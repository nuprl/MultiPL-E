language: js
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num > 0 && num < 10){\n            arr2.push(num);\n        }\n  \
    \  }\n    arr2.sort();\n    arr2.reverse();\n    var arr3 = [];\n    for(var i\
    \ = 0; i < arr2.length; i++){\n        var num = arr2[i];\n        if(num == 1){\n\
    \            arr3.push(\"One\");\n        }\n        else if(num == 2){\n    \
    \        arr3.push(\"Two\");\n        }\n        else if(num == 3){\n        \
    \    arr3.push(\"Three\");\n        }\n        else if(num == 4){\n          \
    \  arr3.push(\"Four\");\n        }\n        else if(num == 5){\n            arr3.push(\"\
    Five\");\n        }\n        else if(num == 6){\n            arr3.push(\"Six\"\
    );\n        }\n        else if(num == 7){\n            arr3.push(\"Seven\");\n\
    \        }\n        else if(num == 8){\n            arr3.push(\"Eight\");\n  \
    \      }\n        else if(num == 9){\n            arr3.push(\"Nine\");\n     \
    \   }\n    }\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] ===\
    \ 1){\n            newArr.push(\"One\");\n        }\n        else if(arr[i] ===\
    \ 2){\n            newArr.push(\"Two\");\n        }\n        else if(arr[i] ===\
    \ 3){\n            newArr.push(\"Three\");\n        }\n        else if(arr[i]\
    \ === 4){\n            newArr.push(\"Four\");\n        }\n        else if(arr[i]\
    \ === 5){\n            newArr.push(\"Five\");\n        }\n        else if(arr[i]\
    \ === 6){\n            newArr.push(\"Six\");\n        }\n        else if(arr[i]\
    \ === 7){\n            newArr.push(\"Seven\");\n        }\n        else if(arr[i]\
    \ === 8){\n            newArr.push(\"Eight\");\n        }\n        else if(arr[i]\
    \ === 9){\n            newArr.push(\"Nine\");\n        }\n    }\n    newArr.sort();\n\
    \    newArr.reverse();\n    return newArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Two', 'Two', 'Three', 'One', 'One', 'Four',\
    \ 'Five', 'Eight' ]\n\nshould equal\n\n[ 'Eight', 'Five', 'Four', 'Three', 'Two',\
    \ 'Two', 'One', 'One' ]\n    at test (/tmp/tmp3jplfys8.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3jplfys8.js:60:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let numbers\
    \ = {\n  '1': 'One',\n  '2': 'Two',\n  '3': 'Three',\n  '4': 'Four',\n  '5': 'Five',\n\
    \  '6': 'Six',\n  '7': 'Seven',\n  '8': 'Eight',\n  '9': 'Nine'\n};\n  let filtered\
    \ = arr.filter(item => item > 0 && item < 10);\n  let sorted = filtered.sort((a,\
    \ b) => a - b);\n  let mapped = sorted.map(num => numbers[num]);\n  return mapped.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numbers = [];\n    var names = [];\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] > 0 && arr[i] < 10){\n            numbers.push(arr[i]);\n \
    \       }\n    }\n    numbers.sort();\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] == 1){\n            names.push(\"One\");\n    \
    \    }\n        if(numbers[i] == 2){\n            names.push(\"Two\");\n     \
    \   }\n        if(numbers[i] == 3){\n            names.push(\"Three\");\n    \
    \    }\n        if(numbers[i] == 4){\n            names.push(\"Four\");\n    \
    \    }\n        if(numbers[i] == 5){\n            names.push(\"Five\");\n    \
    \    }\n        if(numbers[i] == 6){\n            names.push(\"Six\");\n     \
    \   }\n        if(numbers[i] == 7){\n            names.push(\"Seven\");\n    \
    \    }\n        if(numbers[i] == 8){\n            names.push(\"Eight\");\n   \
    \     }\n        if(numbers[i] == 9){\n            names.push(\"Nine\");\n   \
    \     }\n    }\n    return names.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ num = [\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"\
    Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\"\
    ,\n        \"Nine\"\n    ];\n    var new_arr = [];\n    var temp = [];\n    for(var\
    \ i=0; i<arr.length; i++){\n        if(arr[i]<10&&arr[i]>0){\n            temp.push(arr[i]);\n\
    \        }\n    }\n    temp.sort();\n    for(var i=0; i<temp.length; i++){\n \
    \       new_arr.push(num[temp[i]-1]);\n    }\n    new_arr.reverse();\n    return\
    \ new_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ copy = arr.slice();\n    var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var\
    \ str = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    var result = [];\n    var numToString = 0;\n\
    \    for(var i = 0; i < copy.length; i++){\n        if(copy[i] <= 9 && copy[i]\
    \ >= 1){\n            result.push(copy[i]);\n        }\n    }\n    result.sort(function(a,\
    \ b){return a - b});\n    var reverse = result.reverse();\n    for(var j = 0;\
    \ j < reverse.length; j++){\n        for(var k = 0; k < nums.length; k++){\n \
    \           if(reverse[j] === nums[k]){\n                numToString = str[k];\n\
    \                reverse[j] = numToString;\n            }\n        }\n    }\n\
    \    return reverse;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ filteredArr = [];\n    let reverseArr = [];\n    let result = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n     \
    \       filteredArr.push(arr[i]);\n        }\n    }\n    reverseArr = filteredArr.sort((a,\
    \ b) => b - a);\n    result = reverseArr.map(element => {\n        switch(element){\n\
    \            case 1: return \"One\";\n            case 2: return \"Two\";\n  \
    \          case 3: return \"Three\";\n            case 4: return \"Four\";\n \
    \           case 5: return \"Five\";\n            case 6: return \"Six\";\n  \
    \          case 7: return \"Seven\";\n            case 8: return \"Eight\";\n\
    \            case 9: return \"Nine\";\n        }\n    });\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ == 0){\n        return [];\n    }\n    var sorted = arr.sort(function(a, b){return\
    \ a-b});\n    var num = [];\n    var res = [];\n    for(var i = 0; i < sorted.length;\
    \ i++){\n        if(sorted[i] < 1 || sorted[i] > 9){\n            continue;\n\
    \        }\n        num.push(sorted[i]);\n    }\n    for(var i = num.length -\
    \ 1; i >= 0; i--){\n        if(num[i] == 1){\n            res.push(\"One\");\n\
    \        }\n        else if(num[i] == 2){\n            res.push(\"Two\");\n  \
    \      }\n        else if(num[i] == 3){\n            res.push(\"Three\");\n  \
    \      }\n        else if(num[i] == 4){\n            res.push(\"Four\");\n   \
    \     }\n        else if(num[i] == 5){\n            res.push(\"Five\");\n    \
    \    }\n        else if(num[i] == 6){\n            res.push(\"Six\");\n      \
    \  }\n        else if(num[i] == 7){\n            res.push(\"Seven\");\n      \
    \  }\n        else if(num[i] == 8){\n            res.push(\"Eight\");\n      \
    \  }\n        else if(num[i] == 9){\n            res.push(\"Nine\");\n       \
    \ }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ sorted = arr.filter(function(item){\n        return item >= 1 && item <= 9;\n\
    \    }).sort(function(a, b){\n        return a - b;\n    });\n    console.log(sorted);\n\
    \    let result = [];\n    for(let i = 0; i < sorted.length; i++){\n        result.push(num_to_string(sorted[i]));\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx5k5nlof.js:22\n        result.push(num_to_string(sorted[i]));\n\
    \               ^\n\nReferenceError: num_to_string is not defined\n    at by_length\
    \ (/tmp/tmpx5k5nlof.js:22:16)\n    at test (/tmp/tmpx5k5nlof.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx5k5nlof.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: "[\n  1, 1, 2, 2,\n  3, 4, 5, 8\n]\n"
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = arr.filter(function(item){\n        return item >= 1 && item <= 9;\n\
    \    }).sort(function(a, b){\n        return a - b;\n    }).reverse().map(function(item){\n\
    \        switch(item){\n            case 1:\n                return \"One\";\n\
    \            case 2:\n                return \"Two\";\n            case 3:\n \
    \               return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var newarr=[];\n\
    \  var numbers=[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n  var final=[];\n  for(var x=0;x<arr.length;x++){\n \
    \   if(arr[x]>=1 && arr[x]<=9){\n      newarr.push(arr[x]);\n    }\n  }\n  newarr.sort();\n\
    \  newarr.reverse();\n  for(var y=0;y<newarr.length;y++){\n    final.push(numbers[newarr[y]-1]);\n\
    \  }\n  return final;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numbersMap = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    var newArr\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(numbersMap[arr[i]]\
    \ !== undefined){\n            newArr.push(numbersMap[arr[i]]);\n        }\n \
    \   }\n    newArr.sort();\n    newArr.reverse();\n    return newArr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Two', 'Two', 'Three', 'One', 'One', 'Four',\
    \ 'Five', 'Eight' ]\n\nshould equal\n\n[ 'Eight', 'Five', 'Four', 'Three', 'Two',\
    \ 'Two', 'One', 'One' ]\n    at test (/tmp/tmpolds_gwy.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpolds_gwy.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(!Array.isArray(arr)){\n\
    \        return null;\n    }\n    var actualArr = [];\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(typeof arr[i] === 'number' && arr[i] >= 1 && arr[i]\
    \ <= 9){\n            actualArr.push(arr[i]);\n        }\n    }\n    var sortedArr\
    \ = actualArr.sort(function(a, b){return a - b});\n    var reversedArr = sortedArr.reverse();\n\
    \    var finalArr = [];\n    for(var i = 0; i < reversedArr.length; i++){\n  \
    \      if(reversedArr[i] === 1){\n            finalArr.push('One');\n        }\n\
    \        if(reversedArr[i] === 2){\n            finalArr.push('Two');\n      \
    \  }\n        if(reversedArr[i] === 3){\n            finalArr.push('Three');\n\
    \        }\n        if(reversedArr[i] === 4){\n            finalArr.push('Four');\n\
    \        }\n        if(reversedArr[i] === 5){\n            finalArr.push('Five');\n\
    \        }\n        if(reversedArr[i] === 6){\n            finalArr.push('Six');\n\
    \        }\n        if(reversedArr[i] === 7){\n            finalArr.push('Seven');\n\
    \        }\n        if(reversedArr[i] === 8){\n            finalArr.push('Eight');\n\
    \        }\n        if(reversedArr[i] === 9){\n            finalArr.push('Nine');\n\
    \        }\n    }\n    return finalArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6:\
    \ \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    var new_arr = [];\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <=\
    \ 9){\n            new_arr.push(arr[i]);\n        }\n    }\n    new_arr.sort(function(a,\
    \ b){return a - b});\n    var new_arr_1 = [];\n    for(var i = 0; i < new_arr.length;\
    \ i++){\n        var n = new_arr[i];\n        new_arr_1.push(names[n]);\n    }\n\
    \    new_arr_1.reverse();\n    return new_arr_1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ arrNums = arr.filter(item => item <= 9 && item >= 1).sort().reverse();\n   \
    \ let arrWords = arrNums.map(item => {\n        switch (item) {\n            case\
    \ 1:\n                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return arrWords;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    const\
    \ convo = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n\
    \        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"\
    Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    let newArr =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 10 && arr[i]\
    \ > 0){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a,\
    \ b) => a - b);\n    let reversed = newArr.reverse();\n    let result = [];\n\
    \    for(let j = 0; j < reversed.length; j++){\n        result.push(convo[reversed[j]]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0){\n    return [];\n  }\n\n  var res = [];\n  var map = {\n    1: \"One\"\
    ,\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n  \
    \  6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\n\
    \  var sorted = arr.sort(function(a, b){\n    return a - b;\n  });\n\n  sorted.forEach(function(num){\n\
    \    if(num >= 1 && num <= 9){\n      res.push(map[num]);\n    }\n  });\n\n  return\
    \ res.reverse();\n}\n\nmodule.exports = by_length;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var num\
    \ = [8, 5, 4, 3, 2, 2, 1, 1];\n  var name = [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"];\n  var result =[];\n  var temp;\n\
    \  //sort\n  for(i=0; i<arr.length; i++){\n    for(j=0; j<arr.length-1; j++){\n\
    \      if(arr[j] > arr[j+1]){\n        temp = arr[j];\n        arr[j] = arr[j+1];\n\
    \        arr[j+1] = temp;\n      }\n    }\n  }\n  //reverse\n  for(i=0; i<arr.length/2;\
    \ i++){\n    temp = arr[i];\n    arr[i] = arr[arr.length-1-i];\n    arr[arr.length-1-i]\
    \ = temp;\n  }\n  //replace\n  for(i=0; i<arr.length; i++){\n    for(j=0; j<num.length;\
    \ j++){\n      if(arr[i] == num[j]){\n        result.push(name[j]);\n      }\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Two',\n  'Two',\n  'One',\n  'One',\n  'One',\n  'One'\
    \ ]\n\nshould equal\n\n[ 'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One' ]\n    at test (/tmp/tmp5vy990ze.js:50:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5vy990ze.js:57:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Eight',\
    \ 'Five', 'Four',\n    'Three', 'Two',  'Two',\n    'Two',   'Two',  'One',\n\
    \    'One',   'One',  'One'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let newArr\
    \ = arr.filter(x => x>=1 && x<=9).sort((a,b) => b-a).map(x => \n    x == 1 ? \"\
    One\" : x == 2 ? \"Two\" : x == 3 ? \"Three\" : x == 4 ? \"Four\" : x == 5 ? \"\
    Five\" : x == 6 ? \"Six\" : x == 7 ? \"Seven\" : x == 8 ? \"Eight\" : \"Nine\"\
    );\n  return newArr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] <=\
    \ 9 && arr[i] >= 1){\n            new_arr.push(arr[i]);\n        }\n    }\n  \
    \  new_arr.sort(function(a, b){return a - b});\n    for(var i = 0; i < new_arr.length;\
    \ i++){\n        switch(new_arr[i]){\n            case 1:\n                new_arr[i]\
    \ = \"One\";\n                break;\n            case 2:\n                new_arr[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                new_arr[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                new_arr[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                new_arr[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                new_arr[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                new_arr[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                new_arr[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                new_arr[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    new_arr.reverse();\n\
    \    return new_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var digits\
    \ = {};\n  for(var i = 0; i < arr.length; i++){\n    if(typeof digits[arr[i]]\
    \ === 'undefined'){\n      digits[arr[i]] = 1;\n    }else{\n      digits[arr[i]]++;\n\
    \    }\n  }\n  console.log(digits);\n  console.log('===============================');\n\
    \  var arr2 = [];\n  for(var key in digits){\n    for(var i = 0; i < digits[key];\
    \ i++){\n      arr2.push(key);\n    }\n  }\n  console.log(arr2);\n  return arr2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '1',\n\
    \  '2',\n  '2',\n  '3',\n  '4',\n  '5',\n  '8'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmp__f38hmt.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp__f38hmt.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1',\
    \ '1', '2',\n    '2', '3', '4',\n    '5', '8'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "{ '1': 2, '2': 2, '3': 1, '4': 1, '5': 1, '8': 1 }\n===============================\n\
    [\n  '1', '1', '2',\n  '2', '3', '4',\n  '5', '8'\n]\n"
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ results = [];\n    for(var i = 0; i < arr.length; i++){\n        var element\
    \ = arr[i];\n        if(element >= 1 && element <= 9){\n            results.push(element);\n\
    \        }\n    }\n    var sortedArray = results.sort(function(a, b){\n      \
    \  return a - b;\n    });\n    var reversedArray = sortedArray.reverse();\n  \
    \  for(var i = 0; i < reversedArray.length; i++){\n        if(reversedArray[i]\
    \ === 1){\n            reversedArray[i] = \"One\";\n        }\n        if(reversedArray[i]\
    \ === 2){\n            reversedArray[i] = \"Two\";\n        }\n        if(reversedArray[i]\
    \ === 3){\n            reversedArray[i] = \"Three\";\n        }\n        if(reversedArray[i]\
    \ === 4){\n            reversedArray[i] = \"Four\";\n        }\n        if(reversedArray[i]\
    \ === 5){\n            reversedArray[i] = \"Five\";\n        }\n        if(reversedArray[i]\
    \ === 6){\n            reversedArray[i] = \"Six\";\n        }\n        if(reversedArray[i]\
    \ === 7){\n            reversedArray[i] = \"Seven\";\n        }\n        if(reversedArray[i]\
    \ === 8){\n            reversedArray[i] = \"Eight\";\n        }\n        if(reversedArray[i]\
    \ === 9){\n            reversedArray[i] = \"Nine\";\n        }\n    }\n    return\
    \ reversedArray;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    const\
    \ translation = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    var newArr = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    newArr.sort(function(a, b){return a-b});\n    var finalArr\
    \ = [];\n    for(var j = 0; j < newArr.length; j++){\n        finalArr.push(translation[newArr[j]-1]);\n\
    \    }\n    finalArr.reverse();\n    return finalArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpw1onv178.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw1onv178.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ result = [];\n    arr.forEach(num => {\n        if(num === 1){\n           \
    \ result.push(\"One\");\n        }\n        if(num === 2){\n            result.push(\"\
    Two\");\n        }\n        if(num === 3){\n            result.push(\"Three\"\
    );\n        }\n        if(num === 4){\n            result.push(\"Four\");\n  \
    \      }\n        if(num === 5){\n            result.push(\"Five\");\n       \
    \ }\n        if(num === 6){\n            result.push(\"Six\");\n        }\n  \
    \      if(num === 7){\n            result.push(\"Seven\");\n        }\n      \
    \  if(num === 8){\n            result.push(\"Eight\");\n        }\n        if(num\
    \ === 9){\n            result.push(\"Nine\");\n        }\n    });\n    return\
    \ result.reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpl92royxm.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl92royxm.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr.sort(function(a,b){\n\t\treturn a - b;\n\t}).filter(function(a){\n\t\treturn\
    \ a > 0 && a < 10;\n\t}).reverse().map(function(a){\n\t\tswitch(a){\n\t\t\tcase\
    \ 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\t\t\t\treturn \"Two\";\n\t\t\t\
    case 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase 4:\n\t\t\t\treturn \"Four\";\n\t\
    \t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\tcase 6:\n\t\t\t\treturn \"Six\";\n\
    \t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\t\tcase 8:\n\t\t\t\treturn \"Eight\"\
    ;\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\";\n\t\t}\n\t});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr.filter(item => (item >= 1 && item <= 9)).sort().reverse().map(item => {\n\
    \        switch(item){\n            case 1: return \"One\";\n            case\
    \ 2: return \"Two\";\n            case 3: return \"Three\";\n            case\
    \ 4: return \"Four\";\n            case 5: return \"Five\";\n            case\
    \ 6: return \"Six\";\n            case 7: return \"Seven\";\n            case\
    \ 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = [];\n    for(let i=0; i<arr.length; i++){\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort();\n\
    \    newArr.reverse();\n    let newArr2 = [];\n    for(let j=0; j<newArr.length;\
    \ j++){\n        switch(newArr[j]){\n            case 1:\n                newArr2.push(\"\
    One\");\n                break;\n            case 2:\n                newArr2.push(\"\
    Two\");\n                break;\n            case 3:\n                newArr2.push(\"\
    Three\");\n                break;\n            case 4:\n                newArr2.push(\"\
    Four\");\n                break;\n            case 5:\n                newArr2.push(\"\
    Five\");\n                break;\n            case 6:\n                newArr2.push(\"\
    Six\");\n                break;\n            case 7:\n                newArr2.push(\"\
    Seven\");\n                break;\n            case 8:\n                newArr2.push(\"\
    Eight\");\n                break;\n            case 9:\n                newArr2.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return newArr2;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(el => (el >= 1 && el <= 9));\n    arr.sort((a, b) => a - b);\n\
    \    arr = arr.reverse();\n    let result = [];\n    for (let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] === 1){\n            result.push(\"One\");\n     \
    \   } else if (arr[i] === 2){\n            result.push(\"Two\");\n        } else\
    \ if (arr[i] === 3){\n            result.push(\"Three\");\n        } else if (arr[i]\
    \ === 4){\n            result.push(\"Four\");\n        } else if (arr[i] === 5){\n\
    \            result.push(\"Five\");\n        } else if (arr[i] === 6){\n     \
    \       result.push(\"Six\");\n        } else if (arr[i] === 7){\n           \
    \ result.push(\"Seven\");\n        } else if (arr[i] === 8){\n            result.push(\"\
    Eight\");\n        } else if (arr[i] === 9){\n            result.push(\"Nine\"\
    );\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var new_arr\
    \ = [];\n  var nums = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\"\
    , 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"};\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(nums[arr[i]]){\n      new_arr.push(nums[arr[i]]);\n    }\n  }\n\
    \  return new_arr.reverse();\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpn9d22ngy.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn9d22ngy.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n\
    \        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"\
    Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    let ar2 = [];\n\
    \    for (let i = 0; i < arr.length; i++){\n        if (arr[i] in dict){\n   \
    \         ar2.push(arr[i]);\n        }\n    }\n    ar2.sort();\n    let ar3 =\
    \ [];\n    for (let i = 0; i < ar2.length; i++){\n        ar3.push(dict[ar2[i]]);\n\
    \    }\n    return ar3.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = arr.filter(function(i){\n        return i > 0 && i < 10;\n    }).sort(function(a,\
    \ b){\n        return a - b;\n    }).reverse();\n    return new_arr.map(function(i){\n\
    \        switch(i){\n            case 1:\n                return \"One\";\n  \
    \          case 2:\n                return \"Two\";\n            case 3:\n   \
    \             return \"Three\";\n            case 4:\n                return \"\
    Four\";\n            case 5:\n                return \"Five\";\n            case\
    \ 6:\n                return \"Six\";\n            case 7:\n                return\
    \ \"Seven\";\n            case 8:\n                return \"Eight\";\n       \
    \     case 9:\n                return \"Nine\";\n        }\n    });\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"\
    Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    arr = arr.filter(n => n\
    \ > 0 && n < 10).sort().reverse();\n    return arr.map(n => map[n]);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ arr_new = arr.filter(function(item) {\n        return item > 0 && item < 10;\n\
    \    });\n    arr_new.sort(function(a, b){return a-b});\n    arr_new.reverse();\n\
    \    arr_new = arr_new.map(function(item) {\n        switch (item) {\n       \
    \     case 1:\n                return \"One\";\n            case 2:\n        \
    \        return \"Two\";\n            case 3:\n                return \"Three\"\
    ;\n            case 4:\n                return \"Four\";\n            case 5:\n\
    \                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return arr_new;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = [];\n    let digits = {\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n\
    \    };\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] <= 9 && arr[i]\
    \ >= 1){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort();\n\
    \    newArr.reverse();\n    let newArr2 = [];\n    for(let i = 0; i < newArr.length;\
    \ i++){\n        newArr2.push(digits[newArr[i]]);\n    }\n    return newArr2;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ resultArr = [];\n    let numString = [];\n    let one = \"One\";\n    let two\
    \ = \"Two\";\n    let three = \"Three\";\n    let four = \"Four\";\n    let five\
    \ = \"Five\";\n    let six = \"Six\";\n    let seven = \"Seven\";\n    let eight\
    \ = \"Eight\";\n    let nine = \"Nine\";\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] === 1){\n            numString.push(one);\n        }else if(arr[i]\
    \ === 2){\n            numString.push(two);\n        }else if(arr[i] === 3){\n\
    \            numString.push(three);\n        }else if(arr[i] === 4){\n       \
    \     numString.push(four);\n        }else if(arr[i] === 5){\n            numString.push(five);\n\
    \        }else if(arr[i] === 6){\n            numString.push(six);\n        }else\
    \ if(arr[i] === 7){\n            numString.push(seven);\n        }else if(arr[i]\
    \ === 8){\n            numString.push(eight);\n        }else if(arr[i] === 9){\n\
    \            numString.push(nine);\n        }\n    }\n    for(let j = numString.length-1;\
    \ j >= 0; j--){\n        resultArr.push(numString[j]);\n    }\n    return resultArr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmprseu_iuu.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmprseu_iuu.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tarr =\
    \ arr.filter(function(number){\n\t\treturn number >= 1 && number <= 9;\n\t});\n\
    \tarr.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tarr.reverse();\n\treturn\
    \ arr.map(function(number){\n\t\treturn switch_number(number);\n\t});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjqzhl52n.js:22\n\t\treturn switch_number(number);\n\t\t^\n\nReferenceError:\
    \ switch_number is not defined\n    at /tmp/tmpjqzhl52n.js:22:3\n    at Array.map\
    \ (<anonymous>)\n    at by_length (/tmp/tmpjqzhl52n.js:21:13)\n    at test (/tmp/tmpjqzhl52n.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjqzhl52n.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return arr;\n    }\n    let new_arr = arr.filter(num => num\
    \ > 0 && num < 10);\n    new_arr.sort((a, b) => a - b);\n    return new_arr.reverse().map(num\
    \ => {\n        if(num === 1){\n            return \"One\";\n        }else if(num\
    \ === 2){\n            return \"Two\";\n        }else if(num === 3){\n       \
    \     return \"Three\";\n        }else if(num === 4){\n            return \"Four\"\
    ;\n        }else if(num === 5){\n            return \"Five\";\n        }else if(num\
    \ === 6){\n            return \"Six\";\n        }else if(num === 7){\n       \
    \     return \"Seven\";\n        }else if(num === 8){\n            return \"Eight\"\
    ;\n        }else if(num === 9){\n            return \"Nine\";\n        }\n   \
    \ });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar res\
    \ = [];\n\tvar num = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"\
    Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n\tarr.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\tfor(var i = 0; i < arr.length; i++){\n\t\t\
    if(arr[i] >= 1 && arr[i] <= 9){\n\t\t\tres.push(num[arr[i]]);\n\t\t}\n\t}\n\t\
    return res.reverse();\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ Put your code below this line\n    return arr;\n    // Put your code above this\
    \ line\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmptsxr_k_b.js:24:10)\n    at Object.<anonymous> (/tmp/tmptsxr_k_b.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr_sort = arr.sort(function(a, b){\n        return a-b;\n    });\n    var arr_string\
    \ = [];\n    for(var i = 0; i < arr_sort.length; i++){\n        if(arr_sort[i]\
    \ <= 9 && arr_sort[i] >= 1){\n            arr_string.push(arr_sort[i]);\n    \
    \    }\n    }\n    var arr_reverse = arr_string.reverse();\n    var dic = {\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\"\n    };\n    var result = [];\n    for(var\
    \ j = 0; j < arr_reverse.length; j++){\n        result.push(dic[arr_reverse[j]]);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ nums = arr.filter(function(item) {\n        return item <= 9 && item >= 1;\n\
    \    });\n    nums.sort(function(a, b) {\n        return a - b;\n    });\n   \
    \ nums.reverse();\n    var result = [];\n    for (var i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ == 0){\n        return [];\n    }\n    let newArr = [];\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(1 <= arr[i] && arr[i] <= 9){\n           \
    \ newArr.push(arr[i]);\n        }\n    }\n    if(newArr.length == 0){\n      \
    \  return [];\n    }\n    newArr.sort();\n    newArr.reverse();\n    for(let i\
    \ = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case\
    \ 1:\n                newArr[i] = \"One\";\n                break;\n         \
    \   case 2:\n                newArr[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                newArr[i] = \"Three\";\n                break;\n\
    \            case 4:\n                newArr[i] = \"Four\";\n                break;\n\
    \            case 5:\n                newArr[i] = \"Five\";\n                break;\n\
    \            case 6:\n                newArr[i] = \"Six\";\n                break;\n\
    \            case 7:\n                newArr[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                newArr[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                newArr[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return newArr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length === 0) {\n        return [];\n    }\n    var myArr = [];\n    var\
    \ myArr2 = [];\n    var finalArr = [];\n    for (var i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            myArr.push(arr[i]);\n\
    \        }\n    }\n    myArr.sort(function(a, b){return a-b});\n    myArr2 = myArr.reverse();\n\
    \    for (var j = 0; j < myArr2.length; j++) {\n        if (myArr2[j] === 1) {\n\
    \            finalArr.push(\"One\");\n        } else if (myArr2[j] === 2) {\n\
    \            finalArr.push(\"Two\");\n        } else if (myArr2[j] === 3) {\n\
    \            finalArr.push(\"Three\");\n        } else if (myArr2[j] === 4) {\n\
    \            finalArr.push(\"Four\");\n        } else if (myArr2[j] === 5) {\n\
    \            finalArr.push(\"Five\");\n        } else if (myArr2[j] === 6) {\n\
    \            finalArr.push(\"Six\");\n        } else if (myArr2[j] === 7) {\n\
    \            finalArr.push(\"Seven\");\n        } else if (myArr2[j] === 8) {\n\
    \            finalArr.push(\"Eight\");\n        } else if (myArr2[j] === 9) {\n\
    \            finalArr.push(\"Nine\");\n        }\n    }\n    return finalArr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ res = [];\n    var words = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'];\n    for(var i = 0; i < arr.length; i++){\n        if(1 <=\
    \ arr[i] && arr[i] <= 9){\n            res.push(words[arr[i] - 1]);\n        }\n\
    \    }\n    res.sort();\n    res.reverse();\n    return res;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpbfig75v5.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbfig75v5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ temp = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] <= 9\
    \ && arr[i] >= 1){\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort(function(a,\
    \ b){return a - b});\n    for(let i = 0; i < temp.length; i++){\n        if(temp[i]\
    \ === 1){\n            temp[i] = \"One\";\n        }else if(temp[i] === 2){\n\
    \            temp[i] = \"Two\";\n        }else if(temp[i] === 3){\n          \
    \  temp[i] = \"Three\";\n        }else if(temp[i] === 4){\n            temp[i]\
    \ = \"Four\";\n        }else if(temp[i] === 5){\n            temp[i] = \"Five\"\
    ;\n        }else if(temp[i] === 6){\n            temp[i] = \"Six\";\n        }else\
    \ if(temp[i] === 7){\n            temp[i] = \"Seven\";\n        }else if(temp[i]\
    \ === 8){\n            temp[i] = \"Eight\";\n        }else if(temp[i] === 9){\n\
    \            temp[i] = \"Nine\";\n        }\n    }\n    temp.reverse();\n    return\
    \ temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort();\n  result.reverse();\n\
    \  var str_result = [];\n  for(var x = 0; x < result.length; x++){\n    if(result[x]\
    \ == 1){\n      str_result.push(\"One\");\n    }\n    if(result[x] == 2){\n  \
    \    str_result.push(\"Two\");\n    }\n    if(result[x] == 3){\n      str_result.push(\"\
    Three\");\n    }\n    if(result[x] == 4){\n      str_result.push(\"Four\");\n\
    \    }\n    if(result[x] == 5){\n      str_result.push(\"Five\");\n    }\n   \
    \ if(result[x] == 6){\n      str_result.push(\"Six\");\n    }\n    if(result[x]\
    \ == 7){\n      str_result.push(\"Seven\");\n    }\n    if(result[x] == 8){\n\
    \      str_result.push(\"Eight\");\n    }\n    if(result[x] == 9){\n      str_result.push(\"\
    Nine\");\n    }\n  }\n  return str_result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tarr =\
    \ arr.filter(function(a){\n\t\treturn a>=1 && a<=9;\n\t}).sort(function(a,b){\n\
    \t\treturn a-b;\n\t}).reverse();\n\tvar x = {\n\t\t1: \"One\",\n\t\t2: \"Two\"\
    ,\n\t\t3: \"Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\",\n\t\t\
    7: \"Seven\",\n\t\t8: \"Eight\",\n\t\t9: \"Nine\"\n\t};\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tarr[i] = x[arr[i]];\n\t}\n\treturn arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var output\
    \ = [];\n  var digits = arr.sort(function(a, b){return a-b}).reverse();\n  for\
    \ (var i = 0; i < digits.length; i++){\n    if (digits[i] === 1){\n      output.push(\"\
    One\");\n    } else if (digits[i] === 2){\n      output.push(\"Two\");\n    }\
    \ else if (digits[i] === 3){\n      output.push(\"Three\");\n    } else if (digits[i]\
    \ === 4){\n      output.push(\"Four\");\n    } else if (digits[i] === 5){\n  \
    \    output.push(\"Five\");\n    } else if (digits[i] === 6){\n      output.push(\"\
    Six\");\n    } else if (digits[i] === 7){\n      output.push(\"Seven\");\n   \
    \ } else if (digits[i] === 8){\n      output.push(\"Eight\");\n    } else if (digits[i]\
    \ === 9){\n      output.push(\"Nine\");\n    }\n  }\n  return output;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = [];\n    var  hash = {};\n    var arr_one =[];\n    var arr_two =[];\n\
    \    hash[\"1\"] = \"One\";\n    hash[\"2\"] = \"Two\";\n    hash[\"3\"] = \"\
    Three\";\n    hash[\"4\"] = \"Four\";\n    hash[\"5\"] = \"Five\";\n    hash[\"\
    6\"] = \"Six\";\n    hash[\"7\"] = \"Seven\";\n    hash[\"8\"] = \"Eight\";\n\
    \    hash[\"9\"] = \"Nine\";\n    for(var i = 0; i < arr.length; i++){\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9){\n            arr_one.push(arr[i]);\n     \
    \   }\n    }\n    arr_one.sort();\n    for(var i = 0; i < arr_one.length; i++){\n\
    \        arr_two.push(hash[arr_one[i]]);\n    }\n    arr_two.reverse();\n    return\
    \ arr_two;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ arr_one = [];\n    let arr_two = [];\n    let arr_three = [];\n    let arr_four\
    \ = [];\n    let arr_five = [];\n    let arr_six = [];\n    let arr_seven = [];\n\
    \    let arr_eight = [];\n    let arr_nine = [];\n    for (let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] === 1){\n            arr_one.push(arr[i]);\n     \
    \   } else if (arr[i] === 2){\n            arr_two.push(arr[i]);\n        } else\
    \ if (arr[i] === 3){\n            arr_three.push(arr[i]);\n        } else if (arr[i]\
    \ === 4){\n            arr_four.push(arr[i]);\n        } else if (arr[i] === 5){\n\
    \            arr_five.push(arr[i]);\n        } else if (arr[i] === 6){\n     \
    \       arr_six.push(arr[i]);\n        } else if (arr[i] === 7){\n           \
    \ arr_seven.push(arr[i]);\n        } else if (arr[i] === 8){\n            arr_eight.push(arr[i]);\n\
    \        } else if (arr[i] === 9){\n            arr_nine.push(arr[i]);\n     \
    \   }\n    }\n    let new_arr = [];\n    new_arr.push(arr_one, arr_two, arr_three,\
    \ arr_four, arr_five, arr_six, arr_seven, arr_eight, arr_nine);\n    let new_new_arr\
    \ = new_arr.filter(function(value){\n        return value.length > 0;\n    });\n\
    \    let final_arr = [];\n    for (let i = 0; i < new_new_arr.length; i++){\n\
    \        for (let j = 0; j < new_new_arr[i].length; j++){\n            final_arr.push(new_new_arr[i][j]);\n\
    \        }\n    }\n    final_arr.reverse();\n    let reverse_arr = [];\n    for\
    \ (let i = 0; i < final_arr.length\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp73f_zroj.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length == 0){\n        return [];\n    }\n    var ar = []\n    var numToStr\
    \ = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for (var i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] in numToStr){\n            ar.push(arr[i]);\n    \
    \    }\n    }\n    ar.sort();\n    var newAr = [];\n    for (var j = 0; j < ar.length;\
    \ j++){\n        newAr.push(numToStr[ar[j]]);\n    }\n    return newAr.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ sorted = arr.filter(x => x >= 1 && x <= 9).sort();\n    let translated = sorted.map(x\
    \ => {\n        switch(x){\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    })\n\
    \    return translated.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ res = []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9){\n            res.push(arr[i])\n        }\n    }\n    res.sort()\n\
    \    res.reverse()\n    let string_res = []\n    for(let j = 0; j < res.length;\
    \ j++){\n        if(res[j] === 1){\n            string_res.push(\"One\")\n   \
    \     }\n        if(res[j] === 2){\n            string_res.push(\"Two\")\n   \
    \     }\n        if(res[j] === 3){\n            string_res.push(\"Three\")\n \
    \       }\n        if(res[j] === 4){\n            string_res.push(\"Four\")\n\
    \        }\n        if(res[j] === 5){\n            string_res.push(\"Five\")\n\
    \        }\n        if(res[j] === 6){\n            string_res.push(\"Six\")\n\
    \        }\n        if(res[j] === 7){\n            string_res.push(\"Seven\")\n\
    \        }\n        if(res[j] === 8){\n            string_res.push(\"Eight\")\n\
    \        }\n        if(res[j] === 9){\n            string_res.push(\"Nine\")\n\
    \        }\n    }\n    return string_res\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ num = [];\n    var numWords = [];\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] <= 9 && arr[i] >= 1){\n            num.push(arr[i]);\n    \
    \    }\n    }\n    num.sort(function(a, b){return a-b});\n    num.reverse();\n\
    \    for(var j = 0; j < num.length; j++){\n        switch(num[j]){\n         \
    \   case 1:\n                numWords.push(\"One\");\n                break;\n\
    \            case 2:\n                numWords.push(\"Two\");\n              \
    \  break;\n            case 3:\n                numWords.push(\"Three\");\n  \
    \              break;\n            case 4:\n                numWords.push(\"Four\"\
    );\n                break;\n            case 5:\n                numWords.push(\"\
    Five\");\n                break;\n            case 6:\n                numWords.push(\"\
    Six\");\n                break;\n            case 7:\n                numWords.push(\"\
    Seven\");\n                break;\n            case 8:\n                numWords.push(\"\
    Eight\");\n                break;\n            case 9:\n                numWords.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return numWords;\n}\n\
    var myArray = by_length([1, 4, 5, 2, 3, 9, 3, 2, 1, 8, 3, 1, 1, 4, 5, 8, 2, 3]);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ counter = {\n        1:0,\n        2:0,\n        3:0,\n        4:0,\n      \
    \  5:0,\n        6:0,\n        7:0,\n        8:0,\n        9:0\n    };\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \        counter[arr[i]]++;\n        }\n    }\n    let result = [];\n    for(let\
    \ num in counter){\n        for(let i = 0; i < counter[num]; i++){\n         \
    \   switch(num){\n                case \"1\":\n                    result.push(\"\
    One\");\n                    break;\n                case \"2\":\n           \
    \         result.push(\"Two\");\n                    break;\n                case\
    \ \"3\":\n                    result.push(\"Three\");\n                    break;\n\
    \                case \"4\":\n                    result.push(\"Four\");\n   \
    \                 break;\n                case \"5\":\n                    result.push(\"\
    Five\");\n                    break;\n                case \"6\":\n          \
    \          result.push(\"Six\");\n                    break;\n               \
    \ case \"7\":\n                    result.push(\"Seven\");\n                 \
    \   break;\n                case \"8\":\n                    result.push(\"Eight\"\
    );\n                    break;\n                case \"9\":\n                \
    \    result.push(\"Nine\");\n                    break;\n            }\n     \
    \   }\n    }\n    return result.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [];\n\tvar sorted = arr.sort(function(a, b){return a-b}).reverse();\n\tsorted.forEach(function(element){\n\
    \t\tif(element >= 1 && element <= 9){\n\t\t\tswitch(element){\n\t\t\t\tcase 1:\n\
    \t\t\t\t\tresult.push(\"One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t\
    result.push(\"Two\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tresult.push(\"\
    Three\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tresult.push(\"Four\");\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tresult.push(\"Five\");\n\t\t\t\t\t\
    break;\n\t\t\t\tcase 6:\n\t\t\t\t\tresult.push(\"Six\");\n\t\t\t\t\tbreak;\n\t\
    \t\t\tcase 7:\n\t\t\t\t\tresult.push(\"Seven\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase\
    \ 8:\n\t\t\t\t\tresult.push(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\
    \t\t\t\tresult.push(\"Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ index, elem, num;\n    arr.sort(function(a, b){\n        return a - b;\n   \
    \ });\n    for(index = 0; index < arr.length; index++){\n        elem = arr[index];\n\
    \        if(elem < 1 || elem > 9){\n            arr.splice(index, 1);\n      \
    \      index--;\n        }\n    }\n    arr.reverse();\n    for(index = 0; index\
    \ < arr.length; index++){\n        num = arr[index];\n        switch(num){\n \
    \           case 1:\n                arr[index] = \"One\";\n                break;\n\
    \            case 2:\n                arr[index] = \"Two\";\n                break;\n\
    \            case 3:\n                arr[index] = \"Three\";\n              \
    \  break;\n            case 4:\n                arr[index] = \"Four\";\n     \
    \           break;\n            case 5:\n                arr[index] = \"Five\"\
    ;\n                break;\n            case 6:\n                arr[index] = \"\
    Six\";\n                break;\n            case 7:\n                arr[index]\
    \ = \"Seven\";\n                break;\n            case 8:\n                arr[index]\
    \ = \"Eight\";\n                break;\n            case 9:\n                arr[index]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ res = [];\n    var obj = {\n        1: \"One\",\n        2: \"Two\",\n     \
    \   3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\"\
    ,\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <=\
    \ 9){\n            res.push(arr[i]);\n        }\n    }\n    res.sort();\n    var\
    \ r = [];\n    for(let i = 0; i < res.length; i++){\n        r.push(obj[res[i]]);\n\
    \    }\n    r.reverse();\n    return r;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ temp=[];\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]>=1 && arr[i]<=9){\n\
    \            temp.push(arr[i]);\n        }\n    }\n    temp.sort(function(a,b){return\
    \ a-b});\n    arr.splice(0,arr.length);\n    for(let i=temp.length-1;i>=0;i--){\n\
    \        switch(temp[i]){\n            case 1:\n                arr.push(\"One\"\
    );\n                break;\n            case 2:\n                arr.push(\"Two\"\
    );\n                break;\n            case 3:\n                arr.push(\"Three\"\
    );\n                break;\n            case 4:\n                arr.push(\"Four\"\
    );\n                break;\n            case 5:\n                arr.push(\"Five\"\
    );\n                break;\n            case 6:\n                arr.push(\"Six\"\
    );\n                break;\n            case 7:\n                arr.push(\"Seven\"\
    );\n                break;\n            case 8:\n                arr.push(\"Eight\"\
    );\n                break;\n            case 9:\n                arr.push(\"Nine\"\
    );\n                break;\n        }\n    }\n    return arr;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar str_arr=[];\n\
    \tarr.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tarr.reverse();\n\tarr.forEach(function(item){\n\
    \t\tif(item<=9&&item>=1){\n\t\t\tswitch(item){\n\t\t\t\tcase 1:\n\t\t\t\t\tstr_arr.push(\"\
    One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tstr_arr.push(\"Two\");\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tstr_arr.push(\"Three\");\n\t\t\t\t\
    \tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tstr_arr.push(\"Four\");\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase 5:\n\t\t\t\t\tstr_arr.push(\"Five\");\n\t\t\t\t\tbreak;\n\t\t\t\t\
    case 6:\n\t\t\t\t\tstr_arr.push(\"Six\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\
    \t\t\t\t\tstr_arr.push(\"Seven\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\
    \tstr_arr.push(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tstr_arr.push(\"\
    Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\treturn str_arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var newArr\
    \ = []\n  var newArr2 = []\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ > 0 && arr[i] < 10){\n      newArr.push(arr[i])\n    }\n  }\n  newArr = newArr.sort()\n\
    \  for(var j = 0; j < newArr.length; j++){\n    if(newArr[j] === 1){\n      newArr2.push(\"\
    One\")\n    }else if(newArr[j] === 2){\n      newArr2.push(\"Two\")\n    }else\
    \ if(newArr[j] === 3){\n      newArr2.push(\"Three\")\n    }else if(newArr[j]\
    \ === 4){\n      newArr2.push(\"Four\")\n    }else if(newArr[j] === 5){\n    \
    \  newArr2.push(\"Five\")\n    }else if(newArr[j] === 6){\n      newArr2.push(\"\
    Six\")\n    }else if(newArr[j] === 7){\n      newArr2.push(\"Seven\")\n    }else\
    \ if(newArr[j] === 8){\n      newArr2.push(\"Eight\")\n    }else if(newArr[j]\
    \ === 9){\n      newArr2.push(\"Nine\")\n    }\n  }\n  return newArr2.reverse()\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ map = {\n        1 : \"One\",\n        2 : \"Two\",\n        3 : \"Three\",\n\
    \        4 : \"Four\",\n        5 : \"Five\",\n        6 : \"Six\",\n        7\
    \ : \"Seven\",\n        8 : \"Eight\",\n        9 : \"Nine\"\n    };\n    var\
    \ sorted = arr.sort(function(a, b){\n        return a - b;\n    });\n    var result\
    \ = [];\n    sorted.forEach(function(item){\n        if(item >= 1 && item <= 9){\n\
    \            result.push(map[item]);\n        }\n    });\n    return result.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length == 0){\n        return [];\n    }\n    var obj = {1: \"One\", 2:\
    \ \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8:\
    \ \"Eight\", 9: \"Nine\"};\n    var temp = [];\n    var res = [];\n    for (var\
    \ i = 0; i < arr.length; i++){\n        if (1 <= arr[i] && arr[i] <= 9){\n   \
    \         temp.push(arr[i]);\n        }\n    }\n    temp.sort(function(a, b){return\
    \ a - b});\n    for (var i = 0; i < temp.length; i++){\n        res.push(obj[temp[i]]);\n\
    \    }\n    return res.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var new_arr = [];\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(list.indexOf(arr[i]) != -1){\n        \
    \    new_arr.push(arr[i]);\n        }\n    }\n    new_arr.sort();\n    var reversed_arr\
    \ = [];\n    for(var i = new_arr.length - 1; i >= 0; i--){\n        reversed_arr.push(new_arr[i]);\n\
    \    }\n    var result = [];\n    for(var i = 0; i < reversed_arr.length; i++){\n\
    \        switch(reversed_arr[i]){\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ k = [];\n    var i = 1;\n    var z = 0;\n    var l = 0;\n    var c = 0;\n  \
    \  var a = \"\";\n    for(var j = 0; j < arr.length; j++){\n        if (arr[j]\
    \ < 10 && arr[j] > 0){\n            k[z] = arr[j];\n            z++;\n       \
    \ }\n    }\n    for(; i < 10; i++){\n        for(j = 0; j < k.length; j++){\n\
    \            if(k[j] == i){\n                l++;\n            }\n        }\n\
    \        if(l != 0){\n            c = l;\n            while(c > 0){\n        \
    \        a = a + i + \",\";\n                c--;\n            }\n        }\n\
    \        l = 0;\n    }\n    k = a.split(\",\");\n    for(var j = 0; j < k.length;\
    \ j++){\n        switch(k[j]){\n            case \"1\":\n                k[j]\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  k[j] = \"Two\";\n                break;\n            case \"3\":\n        \
    \        k[j] = \"Three\";\n                break;\n            case \"4\":\n\
    \                k[j] = \"Four\";\n                break;\n            case \"\
    5\":\n                k[j] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                k[j] = \"Six\";\n                break;\n          \
    \  case \"7\":\n                k[j] = \"Seven\";\n                break;\n  \
    \          case \"8\":\n                k[j] = \"Eight\";\n                break;\n\
    \            case \"9\":\n                k[j] = \"Nine\";\n                break;\n\
    \        }\n    }\n    k.reverse();\n    return k;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmprtxmno7s.js:81:10)\n\
    \    at Object.<anonymous> (/tmp/tmprtxmno7s.js:88:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \      'Eight',\n    'Five',  'Four',\n    'Three', 'Two',\n    'Two',   'One',\n\
    \    'One'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ console.log(arr)\n    let newArr=[]\n    let arrStr=['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    let num=[]\n    for(let\
    \ i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            num.push(arr[i])\n\
    \        }\n    }\n    // console.log(num)\n    num.sort((a,b)=>{\n        return\
    \ a-b\n    })\n    // console.log(num)\n    for(let i=0; i<num.length; i++){\n\
    \        for(let j=0; j<arrStr.length; j++){\n            if(num[i]==j+1){\n \
    \               newArr.push(arrStr[j])\n            }\n        }\n    }\n    return\
    \ newArr\n    // return num\n    // your code goes here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'Two',\n  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpoea5fs5c.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoea5fs5c.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'One',\n    'Two',   'Two',\n    'Three', 'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = [];\n    var sorted = arr.sort();\n    var reverse = sorted.reverse();\n\
    \    var final = [];\n    for(var i = 0; i < reverse.length; i++){\n        if(reverse[i]\
    \ < 9 && reverse[i] > 0){\n            newArr.push(reverse[i]);\n        }\n \
    \   }\n    for(var x = 0; x < newArr.length; x++){\n        if(newArr[x] === 1){\n\
    \            final.push(\"One\");\n        }else if(newArr[x] === 2){\n      \
    \      final.push(\"Two\");\n        }else if(newArr[x] === 3){\n            final.push(\"\
    Three\");\n        }else if(newArr[x] === 4){\n            final.push(\"Four\"\
    );\n        }else if(newArr[x] === 5){\n            final.push(\"Five\");\n  \
    \      }else if(newArr[x] === 6){\n            final.push(\"Six\");\n        }else\
    \ if(newArr[x] === 7){\n            final.push(\"Seven\");\n        }else if(newArr[x]\
    \ === 8){\n            final.push(\"Eight\");\n        }else if(newArr[x] ===\
    \ 9){\n            final.push(\"Nine\");\n        }\n    }\n    return final;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Eight',\n\
    \  'Four'\n]\n\nshould loosely deep-equal\n\n[\n  'Nine',\n  'Eight',\n  'Four'\n\
    ]\n    at test (/tmp/tmplgenkpjv.js:56:10)\n    at Object.<anonymous> (/tmp/tmplgenkpjv.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Eight',\
    \ 'Four' ],\n  expected: [ 'Nine', 'Eight', 'Four' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ res = [];\n    var tmp = arr.filter(function(v){return v>=1 && v<=9});\n   \
    \ tmp.sort(function(a,b){return a-b}).reverse();\n    for(var i=0; i<tmp.length;\
    \ i++){\n        if(tmp[i] == 1) res.push(\"One\");\n        if(tmp[i] == 2) res.push(\"\
    Two\");\n        if(tmp[i] == 3) res.push(\"Three\");\n        if(tmp[i] == 4)\
    \ res.push(\"Four\");\n        if(tmp[i] == 5) res.push(\"Five\");\n        if(tmp[i]\
    \ == 6) res.push(\"Six\");\n        if(tmp[i] == 7) res.push(\"Seven\");\n   \
    \     if(tmp[i] == 8) res.push(\"Eight\");\n        if(tmp[i] == 9) res.push(\"\
    Nine\");\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ your code here\n    var result = [];\n    if(arr.length == 0){\n        return\
    \ result;\n    }else{\n        for(var i = 0; i < arr.length; i++){\n        \
    \    if(arr[i] > 0 && arr[i] < 10){\n                result.push(arr[i]);\n  \
    \          }\n        }\n        result.sort();\n        result.reverse();\n \
    \       for(var j = 0; j < result.length; j++){\n            if(result[j] == 1){\n\
    \                result[j] = \"One\";\n            }else if(result[j] == 2){\n\
    \                result[j] = \"Two\";\n            }else if(result[j] == 3){\n\
    \                result[j] = \"Three\";\n            }else if(result[j] == 4){\n\
    \                result[j] = \"Four\";\n            }else if(result[j] == 5){\n\
    \                result[j] = \"Five\";\n            }else if(result[j] == 6){\n\
    \                result[j] = \"Six\";\n            }else if(result[j] == 7){\n\
    \                result[j] = \"Seven\";\n            }else if(result[j] == 8){\n\
    \                result[j] = \"Eight\";\n            }else if(result[j] == 9){\n\
    \                result[j] = \"Nine\";\n            }\n        }\n        return\
    \ result;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ a = arr.sort().filter(el => el > 0 && el < 10).reverse()\n    for (let i = 0;\
    \ i < a.length; i++){\n        switch (a[i]){\n            case 1:\n         \
    \       a[i] = \"One\";\n                break;\n            case 2:\n       \
    \         a[i] = \"Two\";\n                break;\n            case 3:\n     \
    \           a[i] = \"Three\";\n                break;\n            case 4:\n \
    \               a[i] = \"Four\";\n                break;\n            case 5:\n\
    \                a[i] = \"Five\";\n                break;\n            case 6:\n\
    \                a[i] = \"Six\";\n                break;\n            case 7:\n\
    \                a[i] = \"Seven\";\n                break;\n            case 8:\n\
    \                a[i] = \"Eight\";\n                break;\n            case 9:\n\
    \                a[i] = \"Nine\";\n                break;\n        }\n    }\n\
    \    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    var digitNames = ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n    arr.sort();\n    arr.reverse();\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n     \
    \       result.push(digitNames[arr[i] - 1]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \    let retArr = [];\n    let newArr = arr.filter(function(x){\n        return\
    \ (x >= 1 && x <= 9);\n    });\n    newArr.sort(function(a, b){\n        return\
    \ a - b;\n    });\n    newArr.reverse();\n    newArr.forEach(function(x){\n  \
    \      retArr.push(names[x - 1]);\n    });\n    return retArr;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n\
    \        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"\
    Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    let arr1 = [];\n\
    \    for (let i = 0; i < arr.length; i++){\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9){\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort();\n\
    \    let arr2 = [];\n    for (let i = 0; i < arr1.length; i++){\n        arr2.push(dict[arr1[i]]);\n\
    \    }\n    return arr2.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ < 1){\n    return [];\n  }\n\n  var numbers = {\n    1: \"One\",\n    2: \"\
    Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\"\
    ,\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\n  var sorted\
    \ = arr.sort(function(a, b){\n    return a - b;\n  });\n\n  var filtered = sorted.filter(function(num){\n\
    \    return num >= 1 && num <= 9;\n  });\n\n  var reversed = filtered.reverse();\n\
    \n  var result = reversed.map(function(num){\n    return numbers[num];\n  });\n\
    \n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length === 0) return arr;\n    // var sortedArr = arr.sort( (a,b) => a-b);\n\
    \    var result = [];\n    var one = \"One\";\n    var two = \"Two\";\n    var\
    \ three = \"Three\";\n    var four = \"Four\";\n    var five = \"Five\";\n   \
    \ var six = \"Six\";\n    var seven = \"Seven\";\n    var eight = \"Eight\";\n\
    \    var nine = \"Nine\";\n    var ten = \"Ten\";\n    var eleven = \"Eleven\"\
    ;\n    var twelve = \"Twelve\";\n    var thirteen = \"Thirteen\";\n    var fourteen\
    \ = \"Fourteen\";\n    var fifteen = \"Fifteen\";\n    var sixteen = \"Sixteen\"\
    ;\n    var seventeen = \"Seventeen\";\n    var eighteen = \"Eighteen\";\n    var\
    \ nineteen = \"Nineteen\";\n    var twenty = \"Twenty\";\n    for (var i = 0;\
    \ i < arr.length; i++){\n        var temp = arr[i];\n        if (temp === 1) {\n\
    \            result.push(one);\n        }\n        else if (temp === 2) {\n  \
    \          result.push(two);\n        }\n        else if (temp === 3) {\n    \
    \        result.push(three);\n        }\n        else if (temp === 4) {\n    \
    \        result.push(four);\n        }\n        else if (temp === 5) {\n     \
    \       result.push(five);\n        }\n        else if (temp === 6) {\n      \
    \      result.push(six);\n        }\n        else if (temp === 7) {\n        \
    \    result.push(seven);\n        }\n        else if (temp === 8) {\n        \
    \    result.push(eight);\n        }\n        else if (temp === 9) {\n        \
    \    result.push(nine);\n        }\n        else if (temp === 10) {\n        \
    \    result.push(ten);\n        }\n        else if (temp === 11) {\n         \
    \   result.push(eleven);\n        }\n        else if (temp === 12) {\n       \
    \     result.push(twelve);\n        }\n        else if (temp === 13) {\n     \
    \       result.push(thirteen);\n       \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfx3y1c3s.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(!arr.length)\
    \ return [];\n    let arrNumber=[];\n    let arrString=[\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    for(let i=0;\
    \ i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            arrNumber.push(arr[i]);\n\
    \        }\n    }\n    arrNumber.sort();\n    for(let i=0; i<arrNumber.length;\
    \ i++){\n        arrNumber[i]=arrString[arrNumber[i]-1];\n    }\n    return arrNumber.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.sort((a,b) => a-b);\n    return arr.map(value => {\n        switch(value){\n\
    \            case 1:\n                return \"One\";\n            case 2:\n \
    \               return \"Two\";\n            case 3:\n                return \"\
    Three\";\n            case 4:\n                return \"Four\";\n            case\
    \ 5:\n                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n            default:\n                return value;\n\
    \        }\n    }).filter(v => v < 10).reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmp1ec9ozyo.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ec9ozyo.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar sorted\
    \ = arr.filter(function(num){return num > 0 && num < 10}).sort(function(a,b){return\
    \ a-b;});\n\tvar reversed = sorted.reverse();\n\treturn reversed.map(function(num){\n\
    \t\tswitch(num){\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\t\t\t\
    \treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase 4:\n\t\
    \t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\tcase 6:\n\
    \t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\t\tcase\
    \ 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\";\n\t\t\
    }\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.filter(n => n > 0 && n < 10).sort((a, b) => a - b).reverse().map(n => [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][n - 1]);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ after = [];\n    arr.sort(function(a, b){return a-b});\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            if(arr[i]\
    \ == 1){\n                after.push(\"One\");\n            }\n            if(arr[i]\
    \ == 2){\n                after.push(\"Two\");\n            }\n            if(arr[i]\
    \ == 3){\n                after.push(\"Three\");\n            }\n            if(arr[i]\
    \ == 4){\n                after.push(\"Four\");\n            }\n            if(arr[i]\
    \ == 5){\n                after.push(\"Five\");\n            }\n            if(arr[i]\
    \ == 6){\n                after.push(\"Six\");\n            }\n            if(arr[i]\
    \ == 7){\n                after.push(\"Seven\");\n            }\n            if(arr[i]\
    \ == 8){\n                after.push(\"Eight\");\n            }\n            if(arr[i]\
    \ == 9){\n                after.push(\"Nine\");\n            }\n        }\n  \
    \  }\n    after.reverse();\n    return after;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = [];\n    var map = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\"\
    , \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"\
    Eight\", \"9\": \"Nine\"};\n    var temp_arr = arr.filter(function(x){return x\
    \ > 0 && x < 10});\n    temp_arr.sort(function(a, b){return a-b});\n    temp_arr.forEach(function(x){new_arr.push(map[x])});\n\
    \    return new_arr.reverse();\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ sortedArr = arr.sort(function(a, b){return a-b}).filter(function(v){return v>=1\
    \ && v<=9});\n    for(let i = 0; i < sortedArr.length; i++){\n        if(sortedArr[i]\
    \ === 1){\n            sortedArr[i] = \"One\";\n        }\n        else if(sortedArr[i]\
    \ === 2){\n            sortedArr[i] = \"Two\";\n        }\n        else if(sortedArr[i]\
    \ === 3){\n            sortedArr[i] = \"Three\";\n        }\n        else if(sortedArr[i]\
    \ === 4){\n            sortedArr[i] = \"Four\";\n        }\n        else if(sortedArr[i]\
    \ === 5){\n            sortedArr[i] = \"Five\";\n        }\n        else if(sortedArr[i]\
    \ === 6){\n            sortedArr[i] = \"Six\";\n        }\n        else if(sortedArr[i]\
    \ === 7){\n            sortedArr[i] = \"Seven\";\n        }\n        else if(sortedArr[i]\
    \ === 8){\n            sortedArr[i] = \"Eight\";\n        }\n        else if(sortedArr[i]\
    \ === 9){\n            sortedArr[i] = \"Nine\";\n        }\n    }\n    return\
    \ sortedArr.reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = [];\n    var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    newArr.sort(function(a, b){return a - b});\n    var reverseArr\
    \ = newArr.reverse();\n    for(var i = 0; i < reverseArr.length; i++){\n     \
    \   reverseArr[i] = name[reverseArr[i] - 1];\n    }\n    return reverseArr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr1 = arr.filter(function(x){\n        return x >= 1 && x <= 9;\n    });\n\
    \    var str = [];\n    for(var i = 0; i < arr1.length; i++){\n        str.push(arr1[i].toString());\n\
    \    }\n    str.sort();\n    var str2 = str.reverse();\n    var finStr = [];\n\
    \    for(var i = 0; i < str2.length; i++){\n        if(str2[i] === \"1\"){\n \
    \           finStr.push(\"One\");\n        }else if(str2[i] === \"2\"){\n    \
    \        finStr.push(\"Two\");\n        }else if(str2[i] === \"3\"){\n       \
    \     finStr.push(\"Three\");\n        }else if(str2[i] === \"4\"){\n        \
    \    finStr.push(\"Four\");\n        }else if(str2[i] === \"5\"){\n          \
    \  finStr.push(\"Five\");\n        }else if(str2[i] === \"6\"){\n            finStr.push(\"\
    Six\");\n        }else if(str2[i] === \"7\"){\n            finStr.push(\"Seven\"\
    );\n        }else if(str2[i] === \"8\"){\n            finStr.push(\"Eight\");\n\
    \        }else if(str2[i] === \"9\"){\n            finStr.push(\"Nine\");\n  \
    \      }\n    }\n    return finStr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    function\
    \ sort(a, b){\n        return a - b;\n    }\n    let arr1 = arr.sort(sort);\n\
    \    let arr2 = [];\n    for (let i = 0; i < arr1.length; i++){\n        if (arr1[i]\
    \ <= 9 && arr1[i] >= 1){\n            arr2.push(arr1[i]);\n        }\n    }\n\
    \    arr2.reverse();\n    let arr3 = [];\n    for (let i = 0; i < arr2.length;\
    \ i++){\n        if (arr2[i] === 1){\n            arr3.push(\"One\");\n      \
    \  }\n        if (arr2[i] === 2){\n            arr3.push(\"Two\");\n        }\n\
    \        if (arr2[i] === 3){\n            arr3.push(\"Three\");\n        }\n \
    \       if (arr2[i] === 4){\n            arr3.push(\"Four\");\n        }\n   \
    \     if (arr2[i] === 5){\n            arr3.push(\"Five\");\n        }\n     \
    \   if (arr2[i] === 6){\n            arr3.push(\"Six\");\n        }\n        if\
    \ (arr2[i] === 7){\n            arr3.push(\"Seven\");\n        }\n        if (arr2[i]\
    \ === 8){\n            arr3.push(\"Eight\");\n        }\n        if (arr2[i] ===\
    \ 9){\n            arr3.push(\"Nine\");\n        }\n    }\n    return arr3;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ arr2=[];\n    if(arr.length===0){\n        return arr2;\n    }\n    let arr1=arr.sort(function(a,b){return\
    \ a-b;});\n    console.log(arr1);\n    arr2=[];\n    for(let i=0;i<arr1.length;i++){\n\
    \        if(arr1[i]<1 || arr1[i]>9){\n            continue;\n        }\n     \
    \   if(arr1[i]===1){\n            arr2.push(\"One\");\n        }\n        if(arr1[i]===2){\n\
    \            arr2.push(\"Two\");\n        }\n        if(arr1[i]===3){\n      \
    \      arr2.push(\"Three\");\n        }\n        if(arr1[i]===4){\n          \
    \  arr2.push(\"Four\");\n        }\n        if(arr1[i]===5){\n            arr2.push(\"\
    Five\");\n        }\n        if(arr1[i]===6){\n            arr2.push(\"Six\");\n\
    \        }\n        if(arr1[i]===7){\n            arr2.push(\"Seven\");\n    \
    \    }\n        if(arr1[i]===8){\n            arr2.push(\"Eight\");\n        }\n\
    \        if(arr1[i]===9){\n            arr2.push(\"Nine\");\n        }\n    }\n\
    \    arr2.reverse();\n    return arr2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  1, 1, 2, 2,\n  3, 4, 5, 8\n]\n[ -1, 1, 55 ]\n[ -1, 1, 2, 3 ]\n[ 4,\
    \ 8, 9 ]\n"
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var number = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\"\
    ,\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n  \
    \  8: \"Eight\",\n    9: \"Nine\"\n  };\n  for(var i = 0; i < arr.length; i++){\n\
    \    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(number[arr[i]]);\n   \
    \ }\n  }\n  return result.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmptdiyon7_.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmptdiyon7_.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i] < 10){\n     \
    \       continue;\n        }else{\n            arr.splice(i, 1);\n           \
    \ i--;\n        }\n    }\n    arr.sort(function(a, b){return a - b});\n    var\
    \ arr2 = arr.reverse();\n    for(var j = 0; j < arr2.length; j++){\n        switch(arr2[j]){\n\
    \            case 1:\n                arr2[j] = \"One\";\n                break;\n\
    \            case 2:\n                arr2[j] = \"Two\";\n                break;\n\
    \            case 3:\n                arr2[j] = \"Three\";\n                break;\n\
    \            case 4:\n                arr2[j] = \"Four\";\n                break;\n\
    \            case 5:\n                arr2[j] = \"Five\";\n                break;\n\
    \            case 6:\n                arr2[j] = \"Six\";\n                break;\n\
    \            case 7:\n                arr2[j] = \"Seven\";\n                break;\n\
    \            case 8:\n                arr2[j] = \"Eight\";\n                break;\n\
    \            case 9:\n                arr2[j] = \"Nine\";\n                break;\n\
    \        }\n    }\n    return arr2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ sortedArr = arr.sort(function(a, b){return a-b});\n    var filteredArr = sortedArr.filter(function(x){return\
    \ x > 0 && x < 10});\n    var reversedArr = filteredArr.reverse();\n    var numToString\
    \ = reversedArr.map(function(y){\n        if(y == 1){\n            return \"One\"\
    ;\n        }\n        else if(y == 2){\n            return \"Two\";\n        }\n\
    \        else if(y == 3){\n            return \"Three\";\n        }\n        else\
    \ if(y == 4){\n            return \"Four\";\n        }\n        else if(y == 5){\n\
    \            return \"Five\";\n        }\n        else if(y == 6){\n         \
    \   return \"Six\";\n        }\n        else if(y == 7){\n            return \"\
    Seven\";\n        }\n        else if(y == 8){\n            return \"Eight\";\n\
    \        }\n        else if(y == 9){\n            return \"Nine\";\n        }\n\
    \    });\n    return numToString;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newarr = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => b - a);\n    let result\
    \ = [];\n    for (let i = 0; i < newarr.length; i++){\n        if (newarr[i] ===\
    \ 1){\n            result.push(\"One\");\n        }\n        else if (newarr[i]\
    \ === 2){\n            result.push(\"Two\");\n        }\n        else if (newarr[i]\
    \ === 3){\n            result.push(\"Three\");\n        }\n        else if (newarr[i]\
    \ === 4){\n            result.push(\"Four\");\n        }\n        else if (newarr[i]\
    \ === 5){\n            result.push(\"Five\");\n        }\n        else if (newarr[i]\
    \ === 6){\n            result.push(\"Six\");\n        }\n        else if (newarr[i]\
    \ === 7){\n            result.push(\"Seven\");\n        }\n        else if (newarr[i]\
    \ === 8){\n            result.push(\"Eight\");\n        }\n        else if (newarr[i]\
    \ === 9){\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    function\
    \ is_1_9(n){\n        return n >= 1 && n <= 9;\n    }\n    var sorted_arr = arr.filter(is_1_9).sort();\n\
    \    var reversed_arr = sorted_arr.reverse();\n    var result = reversed_arr.map(function(el){\n\
    \        switch(el){\n            case 1:\n                return \"One\";\n \
    \           case 2:\n                return \"Two\";\n            case 3:\n  \
    \              return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar newArr\
    \ = [];\n\tarr.sort(function(a, b){return a-b});\n\tfor(var i = 0; i < arr.length;\
    \ i++){\n\t\tif(arr[i] <= 9 && arr[i] >= 1){\n\t\t\tnewArr.push(arr[i]);\n\t\t\
    }\n\t}\n\tnewArr.reverse();\n\tfor(var i = 0; i < newArr.length; i++){\n\t\tswitch(newArr[i]){\n\
    \t\t\tcase 1:\n\t\t\t\tnewArr[i] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\
    \t\t\tnewArr[i] = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tnewArr[i] =\
    \ \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tnewArr[i] = \"Four\";\n\t\
    \t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tnewArr[i] = \"Five\";\n\t\t\t\tbreak;\n\t\
    \t\tcase 6:\n\t\t\t\tnewArr[i] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\
    \t\tnewArr[i] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tnewArr[i] =\
    \ \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tnewArr[i] = \"Nine\";\n\t\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn newArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ sort and reverse the array\n    arr.sort(function(a, b){return a-b}).reverse();\n\
    \    // console.log(arr);\n    // replace the number with name\n    var new_arr\
    \ = [];\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] === 1){\n\
    \            new_arr.push(\"One\");\n        } else if (arr[i] === 2){\n     \
    \       new_arr.push(\"Two\");\n        } else if (arr[i] === 3){\n          \
    \  new_arr.push(\"Three\");\n        } else if (arr[i] === 4){\n            new_arr.push(\"\
    Four\");\n        } else if (arr[i] === 5){\n            new_arr.push(\"Five\"\
    );\n        } else if (arr[i] === 6){\n            new_arr.push(\"Six\");\n  \
    \      } else if (arr[i] === 7){\n            new_arr.push(\"Seven\");\n     \
    \   } else if (arr[i] === 8){\n            new_arr.push(\"Eight\");\n        }\
    \ else if (arr[i] === 9){\n            new_arr.push(\"Nine\");\n        }\n  \
    \  }\n    return new_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  var noStrs = arr.filter(function(val){\n   \
    \ return val >= 1 && val <= 9;\n  });\n  noStrs.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  var revNoStrs = noStrs.reverse();\n  var strNos = revNoStrs.map(function(val){\n\
    \    switch(val){\n      case 1:\n        return \"One\";\n      case 2:\n   \
    \     return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n\
    \        return \"Four\";\n      case 5:\n        return \"Five\";\n      case\
    \ 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n    \
    \  case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n    }\n  });\n  return strNos;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = [];\n    let ascSortedArr = [];\n    let replaceArr = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \        newArr.push(arr[i]);\n        }\n    }\n    ascSortedArr = newArr.sort(function(a,\
    \ b){return a - b});\n    for(let j = 0; j < ascSortedArr.length; j++){\n    \
    \    if(ascSortedArr[j] === 1){\n            replaceArr.push(\"One\");\n     \
    \   }\n        if(ascSortedArr[j] === 2){\n            replaceArr.push(\"Two\"\
    );\n        }\n        if(ascSortedArr[j] === 3){\n            replaceArr.push(\"\
    Three\");\n        }\n        if(ascSortedArr[j] === 4){\n            replaceArr.push(\"\
    Four\");\n        }\n        if(ascSortedArr[j] === 5){\n            replaceArr.push(\"\
    Five\");\n        }\n        if(ascSortedArr[j] === 6){\n            replaceArr.push(\"\
    Six\");\n        }\n        if(ascSortedArr[j] === 7){\n            replaceArr.push(\"\
    Seven\");\n        }\n        if(ascSortedArr[j] === 8){\n            replaceArr.push(\"\
    Eight\");\n        }\n        if(ascSortedArr[j] === 9){\n            replaceArr.push(\"\
    Nine\");\n        }\n    }\n    return replaceArr.reverse();\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ nums_obj = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i]\
    \ < 10){\n            result.push(arr[i]);\n        }\n    }\n    result.sort();\n\
    \    result.reverse();\n    for(let i = 0; i < result.length; i++){\n        result[i]\
    \ = nums_obj[result[i]];\n    }\n    return result;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = []\n  var str = ''\n  var name = ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine']\n  arr.sort(function(a, b){return a - b})\n  for(var\
    \ i = 1; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      str\
    \ += name[arr[i] - 1] + ', '\n    }\n  }\n  if(arr[0] >= 1 && arr[0] <= 9){\n\
    \    str += name[arr[0] - 1]\n  }\n  result = str.split(', ').reverse()\n  return\
    \ result\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp6oc99s_p.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6oc99s_p.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Eight',\n    'Five',  'Four',\n    'Three', 'Two',\n    'Two',   'One'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar arr1\
    \ = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] > 0 && arr[i] <\
    \ 10){\n\t\t\tarr1.push(arr[i]);\n\t\t}\n\t}\n\tarr1.sort(function(a, b){return\
    \ a - b});\n\tarr1.reverse();\n\tarr2 = [];\n\tfor(var j = 0; j < arr1.length;\
    \ j++){\n\t\tswitch(arr1[j]){\n\t\t\tcase 1:\n\t\t\t\tarr2.push(\"One\");\n\t\t\
    \t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tarr2.push(\"Two\");\n\t\t\t\tbreak;\n\t\t\t\
    case 3:\n\t\t\t\tarr2.push(\"Three\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t\
    arr2.push(\"Four\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tarr2.push(\"Five\"\
    );\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tarr2.push(\"Six\");\n\t\t\t\tbreak;\n\
    \t\t\tcase 7:\n\t\t\t\tarr2.push(\"Seven\");\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\
    \t\t\tarr2.push(\"Eight\");\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tarr2.push(\"\
    Nine\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0){\n    return [];\n  }\n  else {\n    var digit_arr = arr.filter(function(num){\n\
    \      return num <= 9 && num >= 1;\n    });\n    digit_arr.sort(function(num1,\
    \ num2){\n      return num1 - num2;\n    });\n    var word_arr = [];\n    for\
    \ (var i = 0; i < digit_arr.length; i++){\n      word_arr.push(parse_num(digit_arr[i]));\n\
    \    }\n    return word_arr.reverse();\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmi3qrr3g.js:26\n      word_arr.push(parse_num(digit_arr[i]));\n\
    \               ^\n\nReferenceError: parse_num is not defined\n    at by_length\
    \ (/tmp/tmpmi3qrr3g.js:26:16)\n    at test (/tmp/tmpmi3qrr3g.js:36:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmi3qrr3g.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ == 0){\n        return [];\n    }\n    var result = [];\n    var not_numeric\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i]\
    \ < 10){\n            result.push(arr[i]);\n        }else{\n            not_numeric.push(arr[i]);\n\
    \        }\n    }\n    if(result.length == 0){\n        return not_numeric;\n\
    \    }\n    result.sort();\n    result.reverse();\n    for(var i = 0; i < result.length;\
    \ i++){\n        switch(result[i]){\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp9fx61w8h.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9fx61w8h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const\
    \ nums = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\"\
    , 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"};\n  const list = arr.sort(function(a,b){\n\
    \    return a-b;\n  }).filter(function(x){\n    return x <= 9 && x >= 1;\n  }).reverse().map(function(x){\n\
    \    return nums[x];\n  });\n  return list;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const\
    \ words = {\n      \"1\": \"One\",\n      \"2\": \"Two\",\n      \"3\": \"Three\"\
    ,\n      \"4\": \"Four\",\n      \"5\": \"Five\",\n      \"6\": \"Six\",\n   \
    \   \"7\": \"Seven\",\n      \"8\": \"Eight\",\n      \"9\": \"Nine\"\n  };\n\
    \  return arr.filter(e => e >= 1 && e <= 9).sort().reverse().map(e => words[e]);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n\n    const sortedArray = arr.filter(num\
    \ => {\n        return num > 0 && num < 10;\n    }).sort((a, b) => {\n       \
    \ return a - b;\n    }).reverse();\n\n    const numMap = {\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\"\n    };\n\n    const mappedArray = sortedArray.map(num\
    \ => {\n        return numMap[num];\n    });\n\n    return mappedArray;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ ordered = arr.filter(function(elem){\n        return elem > 0 && elem < 10;\n\
    \    }).sort(function(a, b){\n        return a - b;\n    });\n    var res = ordered.reverse().map(function(elem){\n\
    \        return switch_case(elem);\n    });\n    return res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7_01blc2.js:20\n        return switch_case(elem);\n        ^\n\n\
    ReferenceError: switch_case is not defined\n    at /tmp/tmp7_01blc2.js:20:9\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmp7_01blc2.js:19:33)\n\
    \    at test (/tmp/tmp7_01blc2.js:30:20)\n    at Object.<anonymous> (/tmp/tmp7_01blc2.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >\
    \ 0 && arr[i] < 10){\n            new_arr.push(arr[i]);\n        }\n    }\n  \
    \  var new_new_arr = new_arr.sort().reverse();\n    var word_arr = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    var final_arr = [];\n    for(var i = 0; i < new_new_arr.length; i++){\n\
    \        final_arr.push(word_arr[new_new_arr[i] - 1]);\n    }\n    return final_arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = arr.filter(el => el >= 1 && el <= 9).sort((a, b) => a - b).reverse().map(el\
    \ => switchNames(el));\n    return newArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9bit_qh0.js:14\n    let newArr = arr.filter(el => el >= 1 && el\
    \ <= 9).sort((a, b) => a - b).reverse().map(el => switchNames(el));\n        \
    \                                                                            \
    \            ^\n\nReferenceError: switchNames is not defined\n    at /tmp/tmp9bit_qh0.js:14:97\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmp9bit_qh0.js:14:87)\n\
    \    at test (/tmp/tmp9bit_qh0.js:22:20)\n    at Object.<anonymous> (/tmp/tmp9bit_qh0.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar newarr\
    \ = [];\n\tvar outarr = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i]\
    \ >= 1 && arr[i] <= 9){\n\t\t\tnewarr.push(arr[i]);\n\t\t}\n\t}\n\tnewarr.sort();\n\
    \tfor(var i = newarr.length - 1; i >= 0; i--){\n\t\tif(newarr[i] == 1){\n\t\t\t\
    outarr.push(\"One\");\n\t\t}\n\t\telse if(newarr[i] == 2){\n\t\t\toutarr.push(\"\
    Two\");\n\t\t}\n\t\telse if(newarr[i] == 3){\n\t\t\toutarr.push(\"Three\");\n\t\
    \t}\n\t\telse if(newarr[i] == 4){\n\t\t\toutarr.push(\"Four\");\n\t\t}\n\t\telse\
    \ if(newarr[i] == 5){\n\t\t\toutarr.push(\"Five\");\n\t\t}\n\t\telse if(newarr[i]\
    \ == 6){\n\t\t\toutarr.push(\"Six\");\n\t\t}\n\t\telse if(newarr[i] == 7){\n\t\
    \t\toutarr.push(\"Seven\");\n\t\t}\n\t\telse if(newarr[i] == 8){\n\t\t\toutarr.push(\"\
    Eight\");\n\t\t}\n\t\telse if(newarr[i] == 9){\n\t\t\toutarr.push(\"Nine\");\n\
    \t\t}\n\t}\n\treturn outarr;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let nums\
    \ = arr.filter( n => n>=1 && n<=9 );\n  nums.sort( (a,b) => a-b );\n  let word\
    \ = nums.map( n => {\n    switch(n){\n      case 1: return \"One\";\n      case\
    \ 2: return \"Two\";\n      case 3: return \"Three\";\n      case 4: return \"\
    Four\";\n      case 5: return \"Five\";\n      case 6: return \"Six\";\n     \
    \ case 7: return \"Seven\";\n      case 8: return \"Eight\";\n      case 9: return\
    \ \"Nine\";\n    }\n  } );\n  return word.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ filtered = arr.filter(function(val){\n        return val > 0 && val < 10;\n\
    \    });\n    var sorted = filtered.sort(function(a, b){\n        return a - b;\n\
    \    });\n    var reversed = sorted.reverse();\n    var newArr = reversed.map(function(val){\n\
    \        switch(val){\n            case 1:\n                return \"One\";\n\
    \            case 2:\n                return \"Two\";\n            case 3:\n \
    \               return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return newArr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ resultArr = [];\n    var sortedArr = [];\n    var toSortArr = [];\n    var dic\
    \ = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    for (var i = 0; i < arr.length;\
    \ i++){\n        if(typeof arr[i] == \"number\" && arr[i] > 0 && arr[i] < 10){\n\
    \            toSortArr.push(arr[i]);\n        }\n    }\n    sortedArr = toSortArr.sort(function(a,\
    \ b){return a - b});\n    for (var j = 0; j < sortedArr.length; j++){\n      \
    \  resultArr.push(dic[sortedArr[j]]);\n    }\n    return resultArr.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  // your\
    \ code goes here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp8f08moc4.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8f08moc4.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar arr1\
    \ = [], arr2 = [], arr3 = [], arr4 = [], arr5 = [], arr6 = [], arr7 = [], arr8\
    \ = [], arr9 = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] ===\
    \ 1){\n\t\t\tarr1.push(arr[i]);\n\t\t}else if(arr[i] === 2){\n\t\t\tarr2.push(arr[i]);\n\
    \t\t}else if(arr[i] === 3){\n\t\t\tarr3.push(arr[i]);\n\t\t}else if(arr[i] ===\
    \ 4){\n\t\t\tarr4.push(arr[i]);\n\t\t}else if(arr[i] === 5){\n\t\t\tarr5.push(arr[i]);\n\
    \t\t}else if(arr[i] === 6){\n\t\t\tarr6.push(arr[i]);\n\t\t}else if(arr[i] ===\
    \ 7){\n\t\t\tarr7.push(arr[i]);\n\t\t}else if(arr[i] === 8){\n\t\t\tarr8.push(arr[i]);\n\
    \t\t}else if(arr[i] === 9){\n\t\t\tarr9.push(arr[i]);\n\t\t}\n\t}\n\tvar newArr\
    \ = arr1.concat(arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9);\n\treturn newArr.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  5,\n\
    \  4,\n  3,\n  2,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpqn7vbgoj.js:44:10)\n    at Object.<anonymous> (/tmp/tmpqn7vbgoj.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    8,\
    \ 5, 4, 3,\n    2, 2, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let dictionary = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n \
    \   let new_arr = [];\n    let result = [];\n    for(i=0; i<arr.length; i++){\n\
    \        if(numbers.includes(arr[i])){\n            new_arr.push(arr[i]);\n  \
    \      }\n    }\n    new_arr.sort();\n    new_arr.reverse();\n    for(i=0; i<new_arr.length;\
    \ i++){\n        result.push(dictionary[new_arr[i]-1]);\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ result = [];\n    if(arr.length == 0){\n        return result;\n    }\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] <= 9 && arr[i] >= 1){\n    \
    \        result.push(arr[i]);\n        }\n    }\n    result.sort(function(a, b){return\
    \ a - b});\n    let reversedResult = [];\n    for(let i = result.length - 1; i\
    \ >= 0; i--){\n        reversedResult.push(result[i]);\n    }\n    let namesResult\
    \ = [];\n    for(let i = 0; i < reversedResult.length; i++){\n        if(reversedResult[i]\
    \ == 1){\n            namesResult.push(\"One\");\n        }else if(reversedResult[i]\
    \ == 2){\n            namesResult.push(\"Two\");\n        }else if(reversedResult[i]\
    \ == 3){\n            namesResult.push(\"Three\");\n        }else if(reversedResult[i]\
    \ == 4){\n            namesResult.push(\"Four\");\n        }else if(reversedResult[i]\
    \ == 5){\n            namesResult.push(\"Five\");\n        }else if(reversedResult[i]\
    \ == 6){\n            namesResult.push(\"Six\");\n        }else if(reversedResult[i]\
    \ == 7){\n            namesResult.push(\"Seven\");\n        }else if(reversedResult[i]\
    \ == 8){\n            namesResult.push(\"Eight\");\n        }else if(reversedResult[i]\
    \ == 9){\n            namesResult.push(\"Nine\");\n        }\n    }\n    return\
    \ namesResult;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var map = {\"1\":\"One\", \"2\":\"Two\", \"3\":\"Three\", \"4\":\"\
    Four\", \"5\":\"Five\", \"6\":\"Six\", \"7\":\"Seven\", \"8\":\"Eight\", \"9\"\
    :\"Nine\"};\n  arr.sort(function(a,b){return a - b;});\n  result = arr.filter(function(number){\n\
    \    return number > 0 && number < 10;\n  });\n  result = result.map(function(number){\n\
    \    return map[number.toString()];\n  });\n  return result.reverse();\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ lengthArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ >= 1 && arr[i] <= 9){\n            lengthArr.push(arr[i]);\n        }\n    }\n\
    \    lengthArr.sort();\n    lengthArr.reverse();\n    var strArr = [];\n    for(var\
    \ i = 0; i < lengthArr.length; i++){\n        switch(lengthArr[i]){\n        \
    \    case 1:\n                strArr.push(\"One\");\n                break;\n\
    \            case 2:\n                strArr.push(\"Two\");\n                break;\n\
    \            case 3:\n                strArr.push(\"Three\");\n              \
    \  break;\n            case 4:\n                strArr.push(\"Four\");\n     \
    \           break;\n            case 5:\n                strArr.push(\"Five\"\
    );\n                break;\n            case 6:\n                strArr.push(\"\
    Six\");\n                break;\n            case 7:\n                strArr.push(\"\
    Seven\");\n                break;\n            case 8:\n                strArr.push(\"\
    Eight\");\n                break;\n            case 9:\n                strArr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return strArr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 1\
    \ || arr[i] > 9){\n            arr2 = arr2.concat(arr[i]);\n        }\n    }\n\
    \    arr = arr.sort();\n    arr = arr.reverse();\n    var dict = {\"1\":\"One\"\
    , \"2\":\"Two\", \"3\":\"Three\", \"4\":\"Four\", \"5\":\"Five\", \"6\":\"Six\"\
    , \"7\":\"Seven\", \"8\":\"Eight\", \"9\":\"Nine\"};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        arr[i] = dict[arr[i]];\n    }\n    return arr;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  'One',\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at\
    \ test (/tmp/tmpp1bq35q9.js:35:10)\n    at Object.<anonymous> (/tmp/tmpp1bq35q9.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 'One', undefined ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar obj\
    \ = {\n\t\t\"1\":\"One\",\n\t\t\"2\":\"Two\",\n\t\t\"3\":\"Three\",\n\t\t\"4\"\
    :\"Four\",\n\t\t\"5\":\"Five\",\n\t\t\"6\":\"Six\",\n\t\t\"7\":\"Seven\",\n\t\t\
    \"8\":\"Eight\",\n\t\t\"9\":\"Nine\"\n\t};\n\tvar str = '';\n\tfor(var key in\
    \ obj){\n\t\tfor(var i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == key){\n\t\
    \t\t\tstr += obj[key] + \" \";\n\t\t\t}\n\t\t}\n\t}\n\treturn str.split(\" \"\
    ).reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_o17f9om.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_o17f9om.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \      'Eight',\n    'Five',  'Four',\n    'Three', 'Two',\n    'Two',   'One',\n\
    \    'One'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >\
    \ 0 && arr[i] < 10){\n            result.push(arr[i]);\n        }\n    }\n   \
    \ result.sort(function(a, b){return a - b});\n    result.reverse();\n    var result_string\
    \ = result.toString();\n    result_string = result_string.replace(/1/g, \"One\"\
    );\n    result_string = result_string.replace(/2/g, \"Two\");\n    result_string\
    \ = result_string.replace(/3/g, \"Three\");\n    result_string = result_string.replace(/4/g,\
    \ \"Four\");\n    result_string = result_string.replace(/5/g, \"Five\");\n   \
    \ result_string = result_string.replace(/6/g, \"Six\");\n    result_string = result_string.replace(/7/g,\
    \ \"Seven\");\n    result_string = result_string.replace(/8/g, \"Eight\");\n \
    \   result_string = result_string.replace(/9/g, \"Nine\");\n    result = result_string.split(\"\
    ,\");\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpie5wz9mk.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpie5wz9mk.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr.sort(function(a,\
    \ b){return a-b});\n    for(var i = 0; i < arr.length; i++){\n        switch(arr[i]){\n\
    \            case 1:\n                arr[i] = \"One\";\n                break;\n\
    \            case 2:\n                arr[i] = \"Two\";\n                break;\n\
    \            case 3:\n                arr[i] = \"Three\";\n                break;\n\
    \            case 4:\n                arr[i] = \"Four\";\n                break;\n\
    \            case 5:\n                arr[i] = \"Five\";\n                break;\n\
    \            case 6:\n                arr[i] = \"Six\";\n                break;\n\
    \            case 7:\n                arr[i] = \"Seven\";\n                break;\n\
    \            case 8:\n                arr[i] = \"Eight\";\n                break;\n\
    \            case 9:\n                arr[i] = \"Nine\";\n                break;\n\
    \            default:\n                arr.splice(i, 1);\n                i--;\n\
    \        }\n    }\n    arr.reverse();\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = []\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0\
    \ && arr[i] < 10){\n            result.push(arr[i])\n        }\n    }\n    result.sort(function(a,\
    \ b){return a - b})\n    result.reverse()\n    for(var j = 0; j < result.length;\
    \ j++){\n        if(result[j] == 1){\n            result[j] = \"One\"\n      \
    \  }else if(result[j] == 2){\n            result[j] = \"Two\"\n        }else if(result[j]\
    \ == 3){\n            result[j] = \"Three\"\n        }else if(result[j] == 4){\n\
    \            result[j] = \"Four\"\n        }else if(result[j] == 5){\n       \
    \     result[j] = \"Five\"\n        }else if(result[j] == 6){\n            result[j]\
    \ = \"Six\"\n        }else if(result[j] == 7){\n            result[j] = \"Seven\"\
    \n        }else if(result[j] == 8){\n            result[j] = \"Eight\"\n     \
    \   }else if(result[j] == 9){\n            result[j] = \"Nine\"\n        }\n \
    \   }\n    return result\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ // const numObj = {\n    // //     1: \"One\",\n    // //     2: \"Two\",\n\
    \    // //     3: \"Three\",\n    // //     4: \"Four\",\n    // //     5: \"\
    Five\",\n    // //     6: \"Six\",\n    // //     7: \"Seven\",\n    // //   \
    \  8: \"Eight\",\n    // //     9: \"Nine\"\n    // // }\n    // const numObj\
    \ = {\n    //     \"1\": \"One\",\n    //     \"2\": \"Two\",\n    //     \"3\"\
    : \"Three\",\n    //     \"4\": \"Four\",\n    //     \"5\": \"Five\",\n    //\
    \     \"6\": \"Six\",\n    //     \"7\": \"Seven\",\n    //     \"8\": \"Eight\"\
    ,\n    //     \"9\": \"Nine\"\n    // }\n    // let newArr = [];\n    // for(let\
    \ i = 0; i < arr.length; i++){\n    //     if(arr[i] >= 1 && arr[i] <= 9){\n \
    \   //         newArr.push(arr[i]);\n    //     }\n    // }\n    // newArr.sort((a,\
    \ b) => a - b);\n    // for(let i = 0; i < newArr.length; i++){\n    //     newArr[i]\
    \ = numObj[newArr[i].toString()];\n    // }\n    // return newArr.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp2i4hll7_.js:53:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2i4hll7_.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //\
    \ check if array is empty\n    if(arr.length === 0){\n        return arr;\n  \
    \  }\n    // Check for numbers between 1 and 9\n    let newArray = arr.filter(number\
    \ => (number > 0 && number < 10));\n    // sort numbers from low to high\n   \
    \ newArray.sort((a, b) => a - b);\n    // reverse numbers\n    newArray.reverse();\n\
    \    // change numbers to names\n    let one = \"One\";\n    let two = \"Two\"\
    ;\n    let three = \"Three\";\n    let four = \"Four\";\n    let five = \"Five\"\
    ;\n    let six = \"Six\";\n    let seven = \"Seven\";\n    let eight = \"Eight\"\
    ;\n    let nine = \"Nine\";\n    let finalArray = [];\n    for(i = 0; i < newArray.length;\
    \ i++){\n        if(newArray[i] === 1){\n            finalArray.push(one);\n \
    \       }\n        else if(newArray[i] === 2){\n            finalArray.push(two);\n\
    \        }\n        else if(newArray[i] === 3){\n            finalArray.push(three);\n\
    \        }\n        else if(newArray[i] === 4){\n            finalArray.push(four);\n\
    \        }\n        else if(newArray[i] === 5){\n            finalArray.push(five);\n\
    \        }\n        else if(newArray[i] === 6){\n            finalArray.push(six);\n\
    \        }\n        else if(newArray[i] === 7){\n            finalArray.push(seven);\n\
    \        }\n        else if(newArray[i] === 8){\n            finalArray.push(eight);\n\
    \        }\n        else if(newArray[i] === 9){\n            finalArray.push(nine);\n\
    \        }\n    }\n    return finalArray;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    var dict = {\n        1: \"One\",\n        2: \"Two\",\n \
    \       3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n\
    \    };\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0 && arr[i]\
    \ < 10){\n            result.push(arr[i]);\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    for(var i = 0; i < result.length; i++){\n\
    \        result[i] = dict[result[i]];\n    }\n    return result.reverse();\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar goodNumbers\
    \ = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] >= 1 && arr[i]\
    \ <= 9){\n\t\t\tgoodNumbers.push(arr[i]);\n\t\t}\n\t}\n\tvar sortedGoodNumbers\
    \ = goodNumbers.sort(function(a, b){return a - b});\n\tvar reversedSortedGoodNumbers\
    \ = sortedGoodNumbers.reverse();\n\tvar correspondingNames = [];\n\tfor(var i\
    \ = 0; i < reversedSortedGoodNumbers.length; i++){\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 1){\n\t\t\tcorrespondingNames.push(\"One\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 2){\n\t\t\tcorrespondingNames.push(\"Two\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 3){\n\t\t\tcorrespondingNames.push(\"Three\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 4){\n\t\t\tcorrespondingNames.push(\"Four\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 5){\n\t\t\tcorrespondingNames.push(\"Five\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 6){\n\t\t\tcorrespondingNames.push(\"Six\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 7){\n\t\t\tcorrespondingNames.push(\"Seven\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 8){\n\t\t\tcorrespondingNames.push(\"Eight\");\n\t\t}\n\t\tif(reversedSortedGoodNumbers[i]\
    \ === 9){\n\t\t\tcorrespondingNames.push(\"Nine\");\n\t\t}\n\t}\n\treturn correspondingNames;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ string = \"\";\n    for(i = 0; i < arr.length; i++){\n        if(arr[i] ===\
    \ 1){\n            string = string + \"One\" + \" \";\n        }else if(arr[i]\
    \ === 2){\n            string = string + \"Two\" + \" \";\n        }else if(arr[i]\
    \ === 3){\n            string = string + \"Three\" + \" \";\n        }else if(arr[i]\
    \ === 4){\n            string = string + \"Four\" + \" \";\n        }else if(arr[i]\
    \ === 5){\n            string = string + \"Five\" + \" \";\n        }else if(arr[i]\
    \ === 6){\n            string = string + \"Six\" + \" \";\n        }else if(arr[i]\
    \ === 7){\n            string = string + \"Seven\" + \" \";\n        }else if(arr[i]\
    \ === 8){\n            string = string + \"Eight\" + \" \";\n        }else if(arr[i]\
    \ === 9){\n            string = string + \"Nine\" + \" \";\n        }\n    }\n\
    \    return string.split(\" \").reverse()\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmptbkemen7.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmptbkemen7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \     'Three',\n    'Two',  'Eight',\n    'Five', 'Four',\n    'One',  'One',\n\
    \    'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numbers = [];\n    var words = [];\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] >= 1 && arr[i] <= 9){\n            numbers.push(arr[i]);\n\
    \        }\n    }\n    numbers.sort();\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        switch(numbers[i]){\n            case 1:\n                words.push(\"\
    One\");\n                break;\n            case 2:\n                words.push(\"\
    Two\");\n                break;\n            case 3:\n                words.push(\"\
    Three\");\n                break;\n            case 4:\n                words.push(\"\
    Four\");\n                break;\n            case 5:\n                words.push(\"\
    Five\");\n                break;\n            case 6:\n                words.push(\"\
    Six\");\n                break;\n            case 7:\n                words.push(\"\
    Seven\");\n                break;\n            case 8:\n                words.push(\"\
    Eight\");\n                break;\n            case 9:\n                words.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return words.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  return arr.sort(function(a, b){\n    return\
    \ a-b;\n  }).reverse().map(function(num){\n    switch(num){\n      case 1:\n \
    \       return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n\
    \        return \"Three\";\n      case 4:\n        return \"Four\";\n      case\
    \ 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n     \
    \ case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\"\
    ;\n      case 9:\n        return \"Nine\";\n      default:\n        return num;\n\
    \    }\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  55,\n  'One',\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at test (/tmp/tmp8gt4haod.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8gt4haod.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 55, 'One',\
    \ -1 ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ sorted = arr.sort(function(a, b){return a-b;});\n    var revSorted = [];\n \
    \   sorted.forEach(function(element) {\n        revSorted.unshift(element);\n\
    \    });\n    var result = [];\n    revSorted.forEach(function(element) {\n  \
    \      switch (element) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n            default:\n                break;\n\
    \        }\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length === 0) {\n        return arr;\n    }\n    var filtered = arr.filter(function(element){\n\
    \        return (element >= 1 && element <= 9);\n    });\n    var reversed = filtered.reverse();\n\
    \    var named = reversed.map(function(element){\n        switch (element) {\n\
    \            case 1:\n                return \"One\";\n            case 2:\n \
    \               return \"Two\";\n            case 3:\n                return \"\
    Three\";\n            case 4:\n                return \"Four\";\n            case\
    \ 5:\n                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return named;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpqopqvzce.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqopqvzce.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr = arr.filter(function(num){\n        return (num <= 9 && num >= 1);\n  \
    \  });\n    var arr = arr.sort();\n    var arr = arr.reverse();\n    var result\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        switch(arr[i]){\n \
    \           case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sortArr\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n      sortArr.push(arr[i]);\n    }\n  }\n  sortArr.sort(function(a,\
    \ b){return a - b});\n  sortArr.reverse();\n  for(var i = 0; i < sortArr.length;\
    \ i++){\n    if(sortArr[i] === 1){\n      sortArr[i] = \"One\";\n    }\n    else\
    \ if(sortArr[i] === 2){\n      sortArr[i] = \"Two\";\n    }\n    else if(sortArr[i]\
    \ === 3){\n      sortArr[i] = \"Three\";\n    }\n    else if(sortArr[i] === 4){\n\
    \      sortArr[i] = \"Four\";\n    }\n    else if(sortArr[i] === 5){\n      sortArr[i]\
    \ = \"Five\";\n    }\n    else if(sortArr[i] === 6){\n      sortArr[i] = \"Six\"\
    ;\n    }\n    else if(sortArr[i] === 7){\n      sortArr[i] = \"Seven\";\n    }\n\
    \    else if(sortArr[i] === 8){\n      sortArr[i] = \"Eight\";\n    }\n    else\
    \ if(sortArr[i] === 9){\n      sortArr[i] = \"Nine\";\n    }\n  }\n  return sortArr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ result = [];\n    let digits = {\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n\
    \    };\n    for(let digit of arr){\n        if(!digits[digit]){\n           \
    \ continue;\n        }\n        result.push(digits[digit]);\n    }\n    return\
    \ result.reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp5lfpcer2.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5lfpcer2.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ sorted=arr.sort(function(a,b){return a-b});\n    var reverse=sorted.reverse();\n\
    \    var names=['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n    var result=[];\n    for(var i=0;i<reverse.length;i++){\n     \
    \   if(reverse[i]>0 && reverse[i]<10){\n            result.push(names[reverse[i]-1]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    const\
    \ dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"\
    Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    let filtered = arr.filter(el\
    \ => el >= 1 && el <= 9);\n    filtered.sort();\n    filtered.reverse();\n   \
    \ return filtered.map(el => dict[el]);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    const\
    \ dic = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"\
    Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    let res = [];\n    for(let\
    \ i=0; i<arr.length; i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            res.push(dic[arr[i]]);\n\
    \        }\n    }\n    res.sort();\n    return res.reverse();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp20sr5ym5.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp20sr5ym5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tlet result\
    \ = [];\n\tlet str = \"\";\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i]\
    \ >= 1 && arr[i] <= 9){\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\tresult.sort();\n\
    \tresult.reverse();\n\tfor(let i = 0; i < result.length; i++){\n\t\tswitch(result[i]){\n\
    \t\t\tcase 1: str += \"One \";\n\t\t\t\t\tbreak;\n\t\t\tcase 2: str += \"Two \"\
    ;\n\t\t\t\t\tbreak;\n\t\t\tcase 3: str += \"Three \";\n\t\t\t\t\tbreak;\n\t\t\t\
    case 4: str += \"Four \";\n\t\t\t\t\tbreak;\n\t\t\tcase 5: str += \"Five \";\n\
    \t\t\t\t\tbreak;\n\t\t\tcase 6: str += \"Six \";\n\t\t\t\t\tbreak;\n\t\t\tcase\
    \ 7: str += \"Seven \";\n\t\t\t\t\tbreak;\n\t\t\tcase 8: str += \"Eight \";\n\t\
    \t\t\t\tbreak;\n\t\t\tcase 9: str += \"Nine \";\n\t\t\t\t\tbreak;\n\t\t}\n\t}\n\
    \tstr = str.split(\" \");\n\tstr.pop();\n\treturn str;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numToWord = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    var numbers\
    \ = arr.filter(function(item){\n        return item >= 1 && item <= 9;\n    });\n\
    \    var sorted = numbers.sort(function(a, b){\n        return a - b;\n    });\n\
    \    var result = sorted.map(function(item){\n        return numToWord[item];\n\
    \    });\n    var reversed = result.reverse();\n    return reversed;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ key = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n \
    \       4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"\
    Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    var arr1 = arr.filter(function(x){\n\
    \        return x>=1 && x<=9;\n    }).sort(function(a,b){\n        return a-b;\n\
    \    }).reverse().map(function(x){\n        return key[x];\n    });\n    return\
    \ arr1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numbers_hash = {\n        1 : \"One\",\n        2 : \"Two\",\n        3 : \"\
    Three\",\n        4 : \"Four\",\n        5 : \"Five\",\n        6 : \"Six\",\n\
    \        7 : \"Seven\",\n        8 : \"Eight\",\n        9 : \"Nine\"\n    };\n\
    \    var result = [];\n    var start_result = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a - b;\n  \
    \  });\n    for(var j = 0; j < result.length; j++){\n        start_result.push(numbers_hash[result[j]]);\n\
    \    }\n    return start_result.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr.sort(function(a,\
    \ b){return a-b})\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === 1){\n            arr[i] = \"One\"\n        }\n        else if(arr[i] ===\
    \ 2){\n            arr[i] = \"Two\"\n        }\n        else if(arr[i] === 3){\n\
    \            arr[i] = \"Three\"\n        }\n        else if(arr[i] === 4){\n \
    \           arr[i] = \"Four\"\n        }\n        else if(arr[i] === 5){\n   \
    \         arr[i] = \"Five\"\n        }\n        else if(arr[i] === 6){\n     \
    \       arr[i] = \"Six\"\n        }\n        else if(arr[i] === 7){\n        \
    \    arr[i] = \"Seven\"\n        }\n        else if(arr[i] === 8){\n         \
    \   arr[i] = \"Eight\"\n        }\n        else if(arr[i] === 9){\n          \
    \  arr[i] = \"Nine\"\n        }\n        else{\n            arr.splice(i, 1)\n\
    \        }\n    }\n    return arr.reverse()\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  'One'\n]\n    at test (/tmp/tmpmwt3mhhu.js:57:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmwt3mhhu.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n\
    \        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"\
    Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    let newArr =\
    \ arr.sort((a, b) => a - b);\n    let newArr2 = [];\n    for (let i = 0; i < newArr.length;\
    \ i++){\n        if (newArr[i] > 0 && newArr[i] < 10){\n            newArr2.push(dict[newArr[i]]);\n\
    \        }\n    }\n    return newArr2.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  // Your\
    \ code goes here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpsx_vr7vd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsx_vr7vd.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var str\
    \ = '';\n  var arr_temp = [];\n  arr.sort();\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      arr_temp.push(arr[i]);\n \
    \   }\n  }\n  arr_temp.reverse();\n  for(var i = 0; i < arr_temp.length; i++){\n\
    \    switch(arr_temp[i]){\n      case 1: str += 'One '; break;\n      case 2:\
    \ str += 'Two '; break;\n      case 3: str += 'Three '; break;\n      case 4:\
    \ str += 'Four '; break;\n      case 5: str += 'Five '; break;\n      case 6:\
    \ str += 'Six '; break;\n      case 7: str += 'Seven '; break;\n      case 8:\
    \ str += 'Eight '; break;\n      case 9: str += 'Nine '; break;\n    }\n  }\n\
    \  arr_temp = str.split(' ');\n  arr_temp.pop();\n  return arr_temp;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  let result = [];\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n   \
    \ }\n  }\n  result.sort(function(a, b){return a - b});\n  result.reverse();\n\
    \  let new_result = result.map(el => {\n    if(el === 1){\n      return \"One\"\
    ;\n    }else if(el === 2){\n      return \"Two\";\n    }else if(el === 3){\n \
    \     return \"Three\";\n    }else if(el === 4){\n      return \"Four\";\n   \
    \ }else if(el === 5){\n      return \"Five\";\n    }else if(el === 6){\n     \
    \ return \"Six\";\n    }else if(el === 7){\n      return \"Seven\";\n    }else\
    \ if(el === 8){\n      return \"Eight\";\n    }else if(el === 9){\n      return\
    \ \"Nine\";\n    }\n  });\n  return new_result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var arrSorted\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    var count = 0;\n    for(var\
    \ j = 0; j < arr.length; j++){\n      if(arr[i] <= arr[j]){\n        count++;\n\
    \      }\n    }\n    arrSorted[count-1] = arr[i];\n  }\n  var newArr = [];\n \
    \ for(var i = 0; i < arrSorted.length; i++){\n    if(arrSorted[i] == 1){\n   \
    \   newArr[i] = \"One\";\n    }else if(arrSorted[i] == 2){\n      newArr[i] =\
    \ \"Two\";\n    }else if(arrSorted[i] == 3){\n      newArr[i] = \"Three\";\n \
    \   }else if(arrSorted[i] == 4){\n      newArr[i] = \"Four\";\n    }else if(arrSorted[i]\
    \ == 5){\n      newArr[i] = \"Five\";\n    }else if(arrSorted[i] == 6){\n    \
    \  newArr[i] = \"Six\";\n    }else if(arrSorted[i] == 7){\n      newArr[i] = \"\
    Seven\";\n    }else if(arrSorted[i] == 8){\n      newArr[i] = \"Eight\";\n   \
    \ }else if(arrSorted[i] == 9){\n      newArr[i] = \"Nine\";\n    }\n  }\n  var\
    \ result = newArr.reverse();\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  <1 empty item>,\n  'Two',\n  <1 empty item>,\n  'Three',\n  'Four',\n  'Five',\n\
    \  'Eight'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmphww1x0oq.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmphww1x0oq.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\n\
    \    <1 empty item>,\n    'Two',\n    <1 empty item>,\n    'Three',\n    'Four',\n\
    \    'Five',\n    'Eight'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length===0){\n\
    \        return [];\n    }\n    let digits = [1,2,3,4,5,6,7,8,9];\n    let strDigits\
    \ = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \    let resArr = [];\n    let digitsArr = [];\n    for(let i=0; i<arr.length;\
    \ i++){\n        if(digits.includes(arr[i])){\n            digitsArr.push(arr[i]);\n\
    \        }\n    }\n    digitsArr.sort();\n    for(let i=0; i<digitsArr.length;\
    \ i++){\n        resArr.push(strDigits[digitsArr[i]-1]);\n    }\n    return resArr.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var sorted = arr.sort(function(a, b){return a-b}).reverse();\n  for\
    \ (var i = 0; i < sorted.length; i++){\n    switch (sorted[i]){\n      case 1:\n\
    \        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"\
    Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n    \
    \    break;\n      case 4:\n        result.push(\"Four\");\n        break;\n \
    \     case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n\
    \        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"\
    Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n  \
    \      break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tlet arr1\
    \ = arr.filter(function(val){\n\t\treturn val >= 1 && val <= 9\n\t})\n\tarr1.sort()\n\
    \tarr1.reverse()\n\tlet arr2 = arr1.map(function(val){\n\t\tswitch(val){\n\t\t\
    \tcase 1: return \"One\"\n\t\t\tcase 2: return \"Two\"\n\t\t\tcase 3: return \"\
    Three\"\n\t\t\tcase 4: return \"Four\"\n\t\t\tcase 5: return \"Five\"\n\t\t\t\
    case 6: return \"Six\"\n\t\t\tcase 7: return \"Seven\"\n\t\t\tcase 8: return \"\
    Eight\"\n\t\t\tcase 9: return \"Nine\"\n\t\t}\n\t})\n\treturn arr2\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ new_arr = [];\n    let num_arr = arr.filter(number => number >= 1 && number\
    \ <= 9);\n    let reverse_arr = num_arr.reverse();\n    for(let i = 0; i < reverse_arr.length;\
    \ i++){\n        switch(reverse_arr[i]){\n            case 1:\n              \
    \  new_arr.push(\"One\");\n                break;\n            case 2:\n     \
    \           new_arr.push(\"Two\");\n                break;\n            case 3:\n\
    \                new_arr.push(\"Three\");\n                break;\n          \
    \  case 4:\n                new_arr.push(\"Four\");\n                break;\n\
    \            case 5:\n                new_arr.push(\"Five\");\n              \
    \  break;\n            case 6:\n                new_arr.push(\"Six\");\n     \
    \           break;\n            case 7:\n                new_arr.push(\"Seven\"\
    );\n                break;\n            case 8:\n                new_arr.push(\"\
    Eight\");\n                break;\n            case 9:\n                new_arr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return new_arr;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpytqn6n4r.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmpytqn6n4r.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = arr.filter(function(x){\n        return x <= 9 && x >= 1;\n    });\n\
    \    result.sort(function(a, b){\n        return a - b;\n    });\n    result.reverse();\n\
    \    result = result.map(function(x){\n        switch(x){\n            case 1:\n\
    \                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = [];\n    var str =\"\";\n    var j = arr.length;\n    var i = 0;\n\
    \    for(i; i < j; i++){\n        if(arr[i] == 1){\n            newArr.push(\"\
    One\");\n        }else if(arr[i] == 2){\n            newArr.push(\"Two\");\n \
    \       }else if(arr[i] == 3){\n            newArr.push(\"Three\");\n        }else\
    \ if(arr[i] == 4){\n            newArr.push(\"Four\");\n        }else if(arr[i]\
    \ == 5){\n            newArr.push(\"Five\");\n        }else if(arr[i] == 6){\n\
    \            newArr.push(\"Six\");\n        }else if(arr[i] == 7){\n         \
    \   newArr.push(\"Seven\");\n        }else if(arr[i] == 8){\n            newArr.push(\"\
    Eight\");\n        }else if(arr[i] == 9){\n            newArr.push(\"Nine\");\n\
    \        }else if(arr[i] == 0){\n            newArr.push(\"Zero\");\n        }\n\
    \    }\n    newArr.sort();\n    newArr.reverse();\n    return newArr;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp6kx_rhhf.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6kx_rhhf.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    if(arr.length == 0){\n        return [];\n    }\n    var reverse\
    \ = arr.sort(function(a, b){\n        return a - b;\n    }).reverse();\n    for(var\
    \ i = 0; i < reverse.length; i++){\n        if(reverse[i] < 10 && reverse[i] >\
    \ 0){\n            switch(reverse[i]){\n                case 1:\n            \
    \        result.push(\"One\");\n                    break;\n                case\
    \ 2:\n                    result.push(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.push(\"Three\");\n      \
    \              break;\n                case 4:\n                    result.push(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.push(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.push(\"Six\");\n                    break;\n\
    \                case 7:\n                    result.push(\"Seven\");\n      \
    \              break;\n                case 8:\n                    result.push(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.push(\"Nine\");\n                    break;\n            }\n  \
    \      }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ ans = [];\n    var dict = {\n        1: \"One\",\n        2: \"Two\",\n    \
    \    3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n  \
    \  };\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9){\n            ans.push(arr[i]);\n        }\n    }\n    ans.sort();\n \
    \   for (var i = 0; i < ans.length; i++){\n        ans[i] = dict[ans[i]];\n  \
    \  }\n    ans.reverse();\n    return ans;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length == 0){\n        return [];\n    }\n    var newArr = []\n    for\
    \ (var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n\
    \            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort(function(a,\
    \ b){return a-b});\n    var reversedArr = newArr.reverse();\n    var result =\
    \ [];\n    for (var j = 0; j < reversedArr.length; j++){\n        if (reversedArr[j]\
    \ == 1){\n            result.push(\"One\");\n        }\n        else if (reversedArr[j]\
    \ == 2){\n            result.push(\"Two\");\n        }\n        else if (reversedArr[j]\
    \ == 3){\n            result.push(\"Three\");\n        }\n        else if (reversedArr[j]\
    \ == 4){\n            result.push(\"Four\");\n        }\n        else if (reversedArr[j]\
    \ == 5){\n            result.push(\"Five\");\n        }\n        else if (reversedArr[j]\
    \ == 6){\n            result.push(\"Six\");\n        }\n        else if (reversedArr[j]\
    \ == 7){\n            result.push(\"Seven\");\n        }\n        else if (reversedArr[j]\
    \ == 8){\n            result.push(\"Eight\");\n        }\n        else if (reversedArr[j]\
    \ == 9){\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var words\
    \ = [];\n  var res = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ < 10 && arr[i] > 0){\n      words.push(arr[i]);\n    }\n  }\n  words.sort(function(a,\
    \ b){return a - b});\n  for(var j = 0; j < words.length; j++){\n    if(words[j]\
    \ === 1){\n      res.push(\"One\");\n    }\n    if(words[j] === 2){\n      res.push(\"\
    Two\");\n    }\n    if(words[j] === 3){\n      res.push(\"Three\");\n    }\n \
    \   if(words[j] === 4){\n      res.push(\"Four\");\n    }\n    if(words[j] ===\
    \ 5){\n      res.push(\"Five\");\n    }\n    if(words[j] === 6){\n      res.push(\"\
    Six\");\n    }\n    if(words[j] === 7){\n      res.push(\"Seven\");\n    }\n \
    \   if(words[j] === 8){\n      res.push(\"Eight\");\n    }\n    if(words[j] ===\
    \ 9){\n      res.push(\"Nine\");\n    }\n  }\n  return res.reverse();\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >=\
    \ 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n   \
    \ newArr.sort();\n    newArr.reverse();\n    let result = [];\n    for(let i =\
    \ 0; i < newArr.length; i++){\n        if(newArr[i] === 1){\n            result.push(\"\
    One\");\n        }\n        if(newArr[i] === 2){\n            result.push(\"Two\"\
    );\n        }\n        if(newArr[i] === 3){\n            result.push(\"Three\"\
    );\n        }\n        if(newArr[i] === 4){\n            result.push(\"Four\"\
    );\n        }\n        if(newArr[i] === 5){\n            result.push(\"Five\"\
    );\n        }\n        if(newArr[i] === 6){\n            result.push(\"Six\");\n\
    \        }\n        if(newArr[i] === 7){\n            result.push(\"Seven\");\n\
    \        }\n        if(newArr[i] === 8){\n            result.push(\"Eight\");\n\
    \        }\n        if(newArr[i] === 9){\n            result.push(\"Nine\");\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ sArr = arr.filter(x => x > 0 && x < 10).sort((a, b) => a - b).reverse();\n \
    \   let dArr = sArr.map(x => ({\n        \"1\": \"One\",\n        \"2\": \"Two\"\
    ,\n        \"3\": \"Three\",\n        \"4\": \"Four\",\n        \"5\": \"Five\"\
    ,\n        \"6\": \"Six\",\n        \"7\": \"Seven\",\n        \"8\": \"Eight\"\
    ,\n        \"9\": \"Nine\"\n    })[x]);\n    return dArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    var temp = arr.filter(function(i){\n        return (i > 0\
    \ && i < 10);\n    });\n    temp.sort(function(a, b){\n        return a - b;\n\
    \    });\n    for(var i = 0; i < temp.length; i++){\n        if(temp[i] === 1){\n\
    \            result.push(\"One\");\n        }\n        if(temp[i] === 2){\n  \
    \          result.push(\"Two\");\n        }\n        if(temp[i] === 3){\n    \
    \        result.push(\"Three\");\n        }\n        if(temp[i] === 4){\n    \
    \        result.push(\"Four\");\n        }\n        if(temp[i] === 5){\n     \
    \       result.push(\"Five\");\n        }\n        if(temp[i] === 6){\n      \
    \      result.push(\"Six\");\n        }\n        if(temp[i] === 7){\n        \
    \    result.push(\"Seven\");\n        }\n        if(temp[i] === 8){\n        \
    \    result.push(\"Eight\");\n        }\n        if(temp[i] === 9){\n        \
    \    result.push(\"Nine\");\n        }\n    }\n    return result.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ sorted = []\n    let result = []\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] > 0 && arr[i] < 10){\n            sorted.push(arr[i])\n   \
    \     }\n    }\n    sorted.sort((a, b) => a - b)\n    for(let i = 0; i < sorted.length;\
    \ i++){\n        result.push(print_number(sorted[i]))\n    }\n    return result.reverse()\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxi41uviz.js:23\n        result.push(print_number(sorted[i]))\n\
    \               ^\n\nReferenceError: print_number is not defined\n    at by_length\
    \ (/tmp/tmpxi41uviz.js:23:16)\n    at test (/tmp/tmpxi41uviz.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpxi41uviz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ array1 = arr.filter(n => n > 0 && n < 10).sort((a, b) => a - b);\n    let array2\
    \ = array1.reverse();\n    let array3 = array2.map(n => {\n        switch (n)\
    \ {\n            case 1:\n                return \"One\";\n            case 2:\n\
    \                return \"Two\";\n            case 3:\n                return\
    \ \"Three\";\n            case 4:\n                return \"Four\";\n        \
    \    case 5:\n                return \"Five\";\n            case 6:\n        \
    \        return \"Six\";\n            case 7:\n                return \"Seven\"\
    ;\n            case 8:\n                return \"Eight\";\n            case 9:\n\
    \                return \"Nine\";\n        }\n    });\n    return array3;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    const\
    \ result = arr.sort((a, b) => a - b).filter(number => number > 0 && number < 10).reverse();\n\
    \    return result.map(number => {\n        if (number === 1) {\n            return\
    \ \"One\";\n        } else if (number === 2) {\n            return \"Two\";\n\
    \        } else if (number === 3) {\n            return \"Three\";\n        }\
    \ else if (number === 4) {\n            return \"Four\";\n        } else if (number\
    \ === 5) {\n            return \"Five\";\n        } else if (number === 6) {\n\
    \            return \"Six\";\n        } else if (number === 7) {\n           \
    \ return \"Seven\";\n        } else if (number === 8) {\n            return \"\
    Eight\";\n        } else if (number === 9) {\n            return \"Nine\";\n \
    \       }\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let sorted = [];\n    let goodNumbers\
    \ = arr.filter(function(item){\n        return item > 0 && item < 10;\n    });\n\
    \    sorted = goodNumbers.sort(function(a, b){\n        return a - b;\n    });\n\
    \    let reversed = sorted.reverse();\n    return reversed.map(function(item){\n\
    \        switch(item){\n            case 1:\n                return \"One\";\n\
    \            case 2:\n                return \"Two\";\n            case 3:\n \
    \               return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0) return [];\n  var sorted = _.sortBy(arr, function(i){return i});\n  var\
    \ reversed = sorted.reverse();\n  var result = [];\n  _.each(reversed, function(i){\n\
    \    switch(i){\n      case 1:\n        result.push(\"One\");\n        break;\n\
    \      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n\
    \        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"\
    Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n    \
    \    break;\n      case 6:\n        result.push(\"Six\");\n        break;\n  \
    \    case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n\
    \        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"\
    Nine\");\n        break;\n    }\n  });\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkujksv1d.js:15\n  var sorted = _.sortBy(arr, function(i){return\
    \ i});\n               ^\n\nReferenceError: _ is not defined\n    at by_length\
    \ (/tmp/tmpkujksv1d.js:15:16)\n    at test (/tmp/tmpkujksv1d.js:56:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpkujksv1d.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const\
    \ word = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \  var newArr = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >=\
    \ 1 && arr[i] <= 9){\n      newArr.push(arr[i]);\n    }\n  }\n  newArr.sort(function(a,\
    \ b){return a - b});\n  for(var j = 0; j < newArr.length; j++){\n    newArr[j]\
    \ = word[newArr[j] - 1];\n  }\n  return newArr.reverse();\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = arr.filter(x => x < 10).sort().reverse();\n    for(let i=0; i<newArr.length;\
    \ i++){\n        switch(newArr[i]){\n            case 1: newArr[i] = \"One\";\n\
    \            break;\n            case 2: newArr[i] = \"Two\";\n            break;\n\
    \            case 3: newArr[i] = \"Three\";\n            break;\n            case\
    \ 4: newArr[i] = \"Four\";\n            break;\n            case 5: newArr[i]\
    \ = \"Five\";\n            break;\n            case 6: newArr[i] = \"Six\";\n\
    \            break;\n            case 7: newArr[i] = \"Seven\";\n            break;\n\
    \            case 8: newArr[i] = \"Eight\";\n            break;\n            case\
    \ 9: newArr[i] = \"Nine\";\n            break;\n        }\n    }\n    return newArr;\n\
    }\nlet ex3 = [4, 1, 5, 2, 8, 2, 1, 9];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at test (/tmp/tmpbgltr7m0.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbgltr7m0.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'One', -1\
    \ ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ a=[];\n    var l=arr.length;\n    for(var i=0;i<l;i++){\n        if(arr[i]<=9\
    \ && arr[i]>=1){\n            a.push(arr[i]);\n        }\n    }\n    a.sort(function(a,b){return\
    \ a-b});\n    var b=[];\n    for(var i=0;i<a.length;i++){\n        if(a[i]==1){\n\
    \            b.push(\"One\");\n        }\n        if(a[i]==2){\n            b.push(\"\
    Two\");\n        }\n        if(a[i]==3){\n            b.push(\"Three\");\n   \
    \     }\n        if(a[i]==4){\n            b.push(\"Four\");\n        }\n    \
    \    if(a[i]==5){\n            b.push(\"Five\");\n        }\n        if(a[i]==6){\n\
    \            b.push(\"Six\");\n        }\n        if(a[i]==7){\n            b.push(\"\
    Seven\");\n        }\n        if(a[i]==8){\n            b.push(\"Eight\");\n \
    \       }\n        if(a[i]==9){\n            b.push(\"Nine\");\n        }\n  \
    \  }\n    b.reverse();\n    return b;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length === 0) return [];\n    arr = arr.filter(isValidNum).sort(compareNums).reverse();\n\
    \    return arr.map(numToString);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpseb6pvv2.js:15\n    arr = arr.filter(isValidNum).sort(compareNums).reverse();\n\
    \                     ^\n\nReferenceError: isValidNum is not defined\n    at by_length\
    \ (/tmp/tmpseb6pvv2.js:15:22)\n    at test (/tmp/tmpseb6pvv2.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpseb6pvv2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ sortArr = arr.filter(function(num){\n        return num > 0 && num < 10;\n \
    \   }).sort(function(a, b){\n        return a - b;\n    }).reverse();\n    var\
    \ result = [];\n    sortArr.forEach(function(num){\n        switch(num){\n   \
    \         case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    });\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result\
    \ = []\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]>=1 && arr[i]<=9){\n\
    \      result.push(arr[i])\n    }\n  }\n  result.sort(function(a,b){\n    return\
    \ a-b\n  })\n  let rev = result.reverse()\n  for(let i=0; i<rev.length; i++){\n\
    \    switch(rev[i]){\n      case 1:\n        rev[i] = \"One\"\n        break\n\
    \      case 2:\n        rev[i] = \"Two\"\n        break\n      case 3:\n     \
    \   rev[i] = \"Three\"\n        break\n      case 4:\n        rev[i] = \"Four\"\
    \n        break\n      case 5:\n        rev[i] = \"Five\"\n        break\n   \
    \   case 6:\n        rev[i] = \"Six\"\n        break\n      case 7:\n        rev[i]\
    \ = \"Seven\"\n        break\n      case 8:\n        rev[i] = \"Eight\"\n    \
    \    break\n      case 9:\n        rev[i] = \"Nine\"\n        break\n    }\n \
    \ }\n  return rev\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ [];\n}\nmodule.exports.by_length = by_length;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpzlj5eixu.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlj5eixu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ result = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => b - a).map(num\
    \ => {\n        if (num === 1) return \"One\";\n        if (num === 2) return\
    \ \"Two\";\n        if (num === 3) return \"Three\";\n        if (num === 4) return\
    \ \"Four\";\n        if (num === 5) return \"Five\";\n        if (num === 6) return\
    \ \"Six\";\n        if (num === 7) return \"Seven\";\n        if (num === 8) return\
    \ \"Eight\";\n        if (num === 9) return \"Nine\";\n    });\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ new_arr = [];\n    var str = \"\";\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] >= 1 && arr[i] <= 9){\n            new_arr.push(arr[i]);\n\
    \        }\n    }\n    new_arr.sort();\n    for(var j = 0; j < new_arr.length;\
    \ j++){\n        str += new_arr[j] + \" \";\n    }\n    var arr_rev = str.split(\"\
    \ \").reverse();\n    var final_arr = [];\n    for(var k = 0; k < arr_rev.length;\
    \ k++){\n        if(arr_rev[k] == 1){\n            final_arr.push(\"One\");\n\
    \        }\n        else if(arr_rev[k] == 2){\n            final_arr.push(\"Two\"\
    );\n        }\n        else if(arr_rev[k] == 3){\n            final_arr.push(\"\
    Three\");\n        }\n        else if(arr_rev[k] == 4){\n            final_arr.push(\"\
    Four\");\n        }\n        else if(arr_rev[k] == 5){\n            final_arr.push(\"\
    Five\");\n        }\n        else if(arr_rev[k] == 6){\n            final_arr.push(\"\
    Six\");\n        }\n        else if(arr_rev[k] == 7){\n            final_arr.push(\"\
    Seven\");\n        }\n        else if(arr_rev[k] == 8){\n            final_arr.push(\"\
    Eight\");\n        }\n        else if(arr_rev[k] == 9){\n            final_arr.push(\"\
    Nine\");\n        }\n    }\n    return final_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr_new = [];\n    var arr_digits = [];\n    var arr_letters = [];\n    var\
    \ dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"\
    Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"};\n    for (var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            arr_digits.push(arr[i]);\n\
    \        }\n    }\n    for (var key in dict){\n        for (var j = 0; j < arr_digits.length;\
    \ j++){\n            if (arr_digits[j] == key){\n                arr_letters.push(dict[key]);\n\
    \            }\n        }\n    }\n    arr_new = arr_letters.reverse();\n    return\
    \ arr_new;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar new_arr\
    \ = arr.sort();\n\tvar out_arr = [];\n\tfor(var i = 0; i < new_arr.length; i++){\n\
    \t\tif(new_arr[i] >=1 && new_arr[i] <= 9){\n\t\t\tswitch(new_arr[i]){\n\t\t\t\t\
    case 1:\n\t\t\t\t\tout_arr.push(\"One\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\
    \t\t\t\t\tout_arr.push(\"Two\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\
    out_arr.push(\"Three\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tout_arr.push(\"\
    Four\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tout_arr.push(\"Five\");\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tout_arr.push(\"Six\");\n\t\t\t\t\t\
    break;\n\t\t\t\tcase 7:\n\t\t\t\t\tout_arr.push(\"Seven\");\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase 8:\n\t\t\t\t\tout_arr.push(\"Eight\");\n\t\t\t\t\tbreak;\n\t\t\t\t\
    case 9:\n\t\t\t\t\tout_arr.push(\"Nine\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn out_arr.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ filtered_arr = arr.filter(function(num){\n        return (num >= 1 && num <=\
    \ 9);\n    });\n    var reversed_arr = filtered_arr.reverse();\n    var name_arr\
    \ = reversed_arr.map(function(num){\n        switch(num){\n            case 1:\n\
    \                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return name_arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmprlk2nor5.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmprlk2nor5.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ new_arr = arr.sort((a, b) => a - b).filter(item => item > 0 && item < 10).reverse()\n\
    \    for (let i = 0; i < new_arr.length; i++){\n        switch (new_arr[i]){\n\
    \            case 1:\n                new_arr[i] = \"One\";\n                break;\n\
    \            case 2:\n                new_arr[i] = \"Two\";\n                break;\n\
    \            case 3:\n                new_arr[i] = \"Three\";\n              \
    \  break;\n            case 4:\n                new_arr[i] = \"Four\";\n     \
    \           break;\n            case 5:\n                new_arr[i] = \"Five\"\
    ;\n                break;\n            case 6:\n                new_arr[i] = \"\
    Six\";\n                break;\n            case 7:\n                new_arr[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                new_arr[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                new_arr[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return new_arr;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ translation = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    let newArr = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    newArr.sort();\n    for(let i = 0; i < newArr.length; i++){\n\
    \        newArr[i] = translation[newArr[i] - 1];\n    }\n    return newArr.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr1 = arr.filter(function(item){\n        return (item >= 1 && item <= 9)\n\
    \    })\n    var arr2 = arr1.sort(function(a, b){\n        return a - b\n    })\n\
    \    var arr3 = arr2.reverse()\n    var arr4 = arr3.map(function(item){\n    \
    \    if(item == 1){\n            return \"One\"\n        }else if(item == 2){\n\
    \            return \"Two\"\n        }else if(item == 3){\n            return\
    \ \"Three\"\n        }else if(item == 4){\n            return \"Four\"\n     \
    \   }else if(item == 5){\n            return \"Five\"\n        }else if(item ==\
    \ 6){\n            return \"Six\"\n        }else if(item == 7){\n            return\
    \ \"Seven\"\n        }else if(item == 8){\n            return \"Eight\"\n    \
    \    }else if(item == 9){\n            return \"Nine\"\n        }\n    })\n  \
    \  return arr4\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let digit=['One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  let newArr=arr.sort(function(a,b){\n\
    \    return a-b;\n  });\n  let remv=newArr.splice(0,1);\n  let remv2=newArr.splice(0,1);\n\
    \  let res=[];\n  for(let i=0;i<newArr.length;i++){\n    if(newArr[i]>=1 && newArr[i]<=9){\n\
    \      res.push(digit[newArr[i]-1]);\n    }\n  }\n  return res.reverse();\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpa_m6h00v.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa_m6h00v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two' ],\n  expected: [\n    'Eight', 'Five',\n\
    \    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ < 1) {\n    return [];\n  }\n  var newArray = arr.filter(function(val){\n  \
    \  return val > 0 && val < 10;\n  });\n  newArray.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  newArray.reverse();\n  newArray.forEach(function(val, index){\n\
    \    newArray[index] = getString(val);\n  });\n  return newArray;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdbzbb2ko.js:25\n    newArray[index] = getString(val);\n       \
    \      ^\n\nReferenceError: getString is not defined\n    at /tmp/tmpdbzbb2ko.js:25:14\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpdbzbb2ko.js:24:12)\n\
    \    at test (/tmp/tmpdbzbb2ko.js:34:20)\n    at Object.<anonymous> (/tmp/tmpdbzbb2ko.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ res =[];\n    var z ={1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\"\
    , 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"};\n    var s =[];\n    var c\
    \ =[];\n    var f =[];\n    for(var i =0; i<arr.length; i++){\n        if(arr[i]>0\
    \ && arr[i]<10){\n            s.push(arr[i]);\n        }\n    }\n    for(var i\
    \ =0; i<s.length; i++){\n        for(var j =i+1; j<s.length; j++){\n         \
    \   if(s[i]>s[j]){\n                var temp = s[i];\n                s[i] = s[j];\n\
    \                s[j] = temp;\n            }\n        }\n    }\n    for(var i\
    \ =s.length-1; i>=0; i--){\n        c.push(s[i]);\n    }\n    for(var i =0; i<c.length;\
    \ i++){\n        f.push(z[c[i]]);\n    }\n    return f;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr === null || arr.length === 0) return [];\n    let result = [];\n    const\
    \ numberMap = {\n        1 : \"One\",\n        2 : \"Two\",\n        3 : \"Three\"\
    ,\n        4 : \"Four\",\n        5 : \"Five\",\n        6 : \"Six\",\n      \
    \  7 : \"Seven\",\n        8 : \"Eight\",\n        9 : \"Nine\"\n    };\n    let\
    \ tempArray = arr.filter(num => num >= 1 && num <= 9).sort();\n    tempArray.forEach(num\
    \ => {\n        result.push(numberMap[num]);\n    });\n    return result.reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var nums\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var words = [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  var res = [];\n\
    \  var filtered = arr.filter(elem => nums.includes(elem));\n  filtered.sort();\n\
    \  var reversed = filtered.reverse();\n  for (var i = 0; i < reversed.length;\
    \ i++){\n    var index = nums.indexOf(reversed[i]);\n    res.push(words[index]);\n\
    \  }\n  return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] == 1){\n      arr[i] = \"One\";\n\
    \    }else if(arr[i] == 2){\n      arr[i] = \"Two\";\n    }else if(arr[i] == 3){\n\
    \      arr[i] = \"Three\";\n    }else if(arr[i] == 4){\n      arr[i] = \"Four\"\
    ;\n    }else if(arr[i] == 5){\n      arr[i] = \"Five\";\n    }else if(arr[i] ==\
    \ 6){\n      arr[i] = \"Six\";\n    }else if(arr[i] == 7){\n      arr[i] = \"\
    Seven\";\n    }else if(arr[i] == 8){\n      arr[i] = \"Eight\";\n    }else if(arr[i]\
    \ == 9){\n      arr[i] = \"Nine\";\n    }\n  }\n  return arr.sort().reverse();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp030ydogh.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp030ydogh.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ temp = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0\
    \ && arr[i] < 10){\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n\
    \    var final = [];\n    for(var j = temp.length-1; j >= 0; j--){\n        switch(temp[j]){\n\
    \            case 1:\n                final.push(\"One\");\n                break;\n\
    \            case 2:\n                final.push(\"Two\");\n                break;\n\
    \            case 3:\n                final.push(\"Three\");\n               \
    \ break;\n            case 4:\n                final.push(\"Four\");\n       \
    \         break;\n            case 5:\n                final.push(\"Five\");\n\
    \                break;\n            case 6:\n                final.push(\"Six\"\
    );\n                break;\n            case 7:\n                final.push(\"\
    Seven\");\n                break;\n            case 8:\n                final.push(\"\
    Eight\");\n                break;\n            case 9:\n                final.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return final;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ numbers = [...arr];\n    let filteredNumbers = numbers.filter(number => number\
    \ >= 1 && number <= 9);\n    let revertedNumbers = filteredNumbers.reverse();\n\
    \    let dictionary = {\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n \
    \   let changedNumbers = revertedNumbers.map(function(number){\n        return\
    \ dictionary[number];\n    });\n    return changedNumbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpx9zyb_78.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx9zyb_78.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    // sort the numbers between 1 and 9\n\
    \    var newArr = arr.filter(function(item){\n        return item <= 9 && item\
    \ >= 1;\n    });\n    newArr.sort(function(a, b){\n        return a - b;\n   \
    \ });\n    // reverse the array\n    newArr.reverse();\n    // replace each digit\
    \ by its corresponding name\n    newArr = newArr.map(function(item){\n       \
    \ switch(item){\n            case 1:\n                return \"One\";\n      \
    \      case 2:\n                return \"Two\";\n            case 3:\n       \
    \         return \"Three\";\n            case 4:\n                return \"Four\"\
    ;\n            case 5:\n                return \"Five\";\n            case 6:\n\
    \                return \"Six\";\n            case 7:\n                return\
    \ \"Seven\";\n            case 8:\n                return \"Eight\";\n       \
    \     case 9:\n                return \"Nine\";\n        }\n    });\n    return\
    \ newArr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.filter(i => i >= 1 && i <= 9).sort((a, b) => a > b).reverse().map(i => {\n\
    \    if (i === 1) {\n      return \"One\";\n    } else if (i === 2) {\n      return\
    \ \"Two\";\n    } else if (i === 3) {\n      return \"Three\";\n    } else if\
    \ (i === 4) {\n      return \"Four\";\n    } else if (i === 5) {\n      return\
    \ \"Five\";\n    } else if (i === 6) {\n      return \"Six\";\n    } else if (i\
    \ === 7) {\n      return \"Seven\";\n    } else if (i === 8) {\n      return \"\
    Eight\";\n    } else if (i === 9) {\n      return \"Nine\";\n    }\n  });\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4znozpeu.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4znozpeu.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(!arr.length)\
    \ return arr;\n    let words = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    arr = arr.filter(el =>\
    \ el > 0 && el < 10).sort((a, b) => a - b).reverse();\n    return arr.map(el =>\
    \ words[el]);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ ans = []\n    var map = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"\
    Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n    for(var i=0; i<arr.length;\
    \ i++){\n        if(arr[i]>=1 && arr[i]<=9){\n            ans.push(arr[i])\n \
    \       }\n    }\n    ans.sort(function(a,b){return a-b})\n    ans.reverse()\n\
    \    for(var i=0; i<ans.length; i++){\n        ans[i] = map[ans[i]]\n    }\n \
    \   return ans\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    //your\
    \ code here\n    if(arr.length===0){\n        return [];\n    }\n    var sortedArray=arr.sort(function(a,b){\n\
    \        return a-b;\n    });\n    var revArray=sortedArray.reverse();\n    var\
    \ finalArray=[];\n    for(var i=0;i<revArray.length;i++){\n        if(revArray[i]>=1\
    \ && revArray[i]<=9){\n            switch(revArray[i]){\n                case\
    \ 1:\n                    finalArray.push(\"One\");\n                    break;\n\
    \                case 2:\n                    finalArray.push(\"Two\");\n    \
    \                break;\n                case 3:\n                    finalArray.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       finalArray.push(\"Four\");\n                    break;\n             \
    \   case 5:\n                    finalArray.push(\"Five\");\n                \
    \    break;\n                case 6:\n                    finalArray.push(\"Six\"\
    );\n                    break;\n                case 7:\n                    finalArray.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       finalArray.push(\"Eight\");\n                    break;\n            \
    \    case 9:\n                    finalArray.push(\"Nine\");\n               \
    \     break;\n            }\n        }\n    }\n    return finalArray;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\n}\n\n\
    module.exports = {\n    longest_word: longest_word,\n    shortest_word: shortest_word,\n\
    \    only_odd: only_odd,\n    only_even: only_even,\n    all_same: all_same,\n\
    \    any_same: any_same,\n    zip: zip,\n    unzip: unzip,\n    unique: unique,\n\
    \    even_odd: even_odd,\n    by_length: by_length\n};\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt6frw1wx.js:18\n    longest_word: longest_word,\n             \
    \     ^\n\nReferenceError: longest_word is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmpt6frw1wx.js:18:19)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977050
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    var result = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0 && arr[i] < 10){\n            result.push(numbers[arr[i]\
    \ - 1]);\n        }\n    }\n    return result.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmppd5rc65r.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmppd5rc65r.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(a){return a>0 && a<10;})\n            .sort()\n      \
    \      .reverse();\n    var l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n    for(var i=0; i<arr.length; i++){\n        arr[i]\
    \ = l[arr[i]-1];\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let\
    \ newArr = [];\n    arr.map(function(num){\n        if(num >= 1 && num <= 9){\n\
    \            newArr.push(num);\n        }\n    });\n    newArr.sort();\n    newArr.reverse();\n\
    \    let newArr2 = [];\n    for(let i = 0; i < newArr.length; i++){\n        if(newArr[i]\
    \ === 1){\n            newArr2.push(\"One\");\n        }else if(newArr[i] ===\
    \ 2){\n            newArr2.push(\"Two\");\n        }else if(newArr[i] === 3){\n\
    \            newArr2.push(\"Three\");\n        }else if(newArr[i] === 4){\n  \
    \          newArr2.push(\"Four\");\n        }else if(newArr[i] === 5){\n     \
    \       newArr2.push(\"Five\");\n        }else if(newArr[i] === 6){\n        \
    \    newArr2.push(\"Six\");\n        }else if(newArr[i] === 7){\n            newArr2.push(\"\
    Seven\");\n        }else if(newArr[i] === 8){\n            newArr2.push(\"Eight\"\
    );\n        }else if(newArr[i] === 9){\n            newArr2.push(\"Nine\");\n\
    \        }\n    }\n    return newArr2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result\
    \ = [];\n  let sort_arr = arr.filter(num => num >= 1 && num <= 9).sort((a, b)\
    \ => a - b);\n  result = sort_arr.reverse().map(num => {\n    switch (num) {\n\
    \      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\"\
    ;\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"\
    Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return\
    \ \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return\
    \ \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977050
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let result = [];\n    let numbers_arr\
    \ = [];\n    let strings_arr = [];\n    for(let i=0; i<arr.length; i++){\n   \
    \     if(arr[i] > 0 && arr[i] < 10){\n            numbers_arr.push(arr[i]);\n\
    \        }else{\n            strings_arr.push(arr[i]);\n        }\n    }\n   \
    \ numbers_arr.sort(function(a, b){return a-b});\n    numbers_arr.reverse();\n\
    \    for(let i=0; i<numbers_arr.length; i++){\n        result.push(numbers_arr[i]);\n\
    \    }\n    for(let i=0; i<strings_arr.length; i++){\n        result.push(strings_arr[i]);\n\
    \    }\n    for(let i=0; i<result.length; i++){\n        if(result[i] === 1){\n\
    \            result[i] = \"One\";\n        }else if(result[i] === 2){\n      \
    \      result[i] = \"Two\";\n        }else if(result[i] === 3){\n            result[i]\
    \ = \"Three\";\n        }else if(result[i] === 4){\n            result[i] = \"\
    Four\";\n        }else if(result[i] === 5){\n            result[i] = \"Five\"\
    ;\n        }else if(result[i] === 6){\n            result[i] = \"Six\";\n    \
    \    }else if(result[i] === 7){\n            result[i] = \"Seven\";\n        }else\
    \ if(result[i] === 8){\n            result[i] = \"Eight\";\n        }else if(result[i]\
    \ === 9){\n            result[i] = \"Nine\";\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  -1,\n  55\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at test (/tmp/tmpyityasu7.js:66:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyityasu7.js:71:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'One', -1,\
    \ 55 ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977050
