name: HumanEval_78_hex_key
language: js
results:
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let result\
    \ = 0;\n    let hexadecimals = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    for(let x = 0; x < num.length; x++){\n        if(primes.includes(num[x])){\n\
    \            result += 1;\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let newNum\
    \ = num.toUpperCase();\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n   \
    \ let count = 0;\n    for(let i = 0; i < newNum.length; i++){\n        if(newNum[i]\
    \ == \"B\" || newNum[i] == \"D\"){\n            count++;\n        }else if(newNum[i]\
    \ == \"2\" || newNum[i] == \"3\" || newNum[i] == \"5\" || newNum[i] == \"7\"){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var prime\
    \ = \"2357B\";\n    var count = 0;\n    for(var i = 0; i < num.length; i++){\n\
    \        if(prime.indexOf(num[i]) >= 0){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n4\n    at test (/tmp/tmp7iqn4urb.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7iqn4urb.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hexArray\
    \ = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"];\n    var newNumArray = num.split(\"\");\n    var counter\
    \ = 0;\n    for(var i = 0; i < newNumArray.length; i++){\n        if(hexArray.indexOf(newNumArray[i])\
    \ % 2 !== 0){\n            counter++;\n        }\n    }\n    return counter;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqsu3td1c.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqsu3td1c.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n\tvar hex = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53];\n\
    \tnum = num.split('');\n\tvar ans = 0;\n\tfor(var i=0;i<num.length;i++){\n\t\t\
    var digit = parseInt(num[i],16);\n\t\tans += hex.indexOf(digit) >= 0 ? 1 : 0;\n\
    \t}\n\treturn ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var sum =\
    \ 0;\n    var hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for(let i\
    \ = 0; i < num.length; i++){\n        if(hex.includes(num[i])){\n            sum++;\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = {\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"5\": \"5\",\n \
    \       \"7\": \"7\",\n        \"B\": \"B\",\n        \"D\": \"D\"\n    }\n  \
    \  return num.split(\"\").filter(x => primes[x]).length;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    const hexs\
    \ = new Set([2, 3, 5, 7, 11, 13]);\n    let count = 0;\n    for(let i = 0; i <\
    \ num.length; i++){\n        let char = num[i];\n        let ord = char.charCodeAt(0);\n\
    \        if(ord >= 48 && ord <= 57){\n            if(hexs.has(ord - 48)){\n  \
    \              count++;\n            }\n        }else{\n            if(hexs.has(ord\
    \ - 55)){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let sum =\
    \ 0;\n    let arr = num.split('');\n    let hexArray = ['A','B','C','D','E','F'];\n\
    \    arr.forEach(element => {\n        if(element == 2 || element == 3 || element\
    \ == 5 || element == 7 || element == 11 || element == 13){\n            sum +=\
    \ 1;\n        }else if(hexArray.includes(element)){\n            let index = hexArray.indexOf(element);\n\
    \            let decimalValue = 10 + index;\n            if(decimalValue == 11\
    \ || decimalValue == 13){\n                sum += 1;\n            }\n        }\n\
    \    });\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n\tnum = num.toUpperCase();\n\
    \tlet key = \"2,3,5,7,B,D\".split(\",\");\n\tlet counter = 0;\n\tlet res = \"\"\
    ;\n\tfor(let i = 0; i < num.length; i++){\n\t\tfor(let j = 0; j < key.length;\
    \ j++){\n\t\t\tif(num[i] == key[j]) counter++;\n\t\t}\n\t}\n\treturn counter;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hexLetters\
    \ = {\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n        \"D\"\
    :13,\n        \"E\":14,\n        \"F\":15\n    }\n    let count = 0;\n    num\
    \ = num.split(\"\");\n    for(let i = 0; i < num.length; i++){\n        if(num[i]\
    \ > 9){\n            num[i] = hexLetters[num[i]];\n        }\n        if(num[i]\
    \ % 2 !== 0 && num[i] % 3 !== 0 && num[i] % 5 !== 0 && num[i] % 7 !== 0 && num[i]\
    \ !== 1){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgsqcxgaq.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgsqcxgaq.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let\
    \ ans = num.split(\"\");\n    ans = ans.map(x => {\n        return hex[x] != undefined\
    \ ? hex[x] : Number(x);\n    })\n    for(let i = 0; i < ans.length; i++){\n  \
    \      if(ans[i] === 2 || ans[i] === 3 || ans[i] === 5 || ans[i] === 7 || ans[i]\
    \ === 11 || ans[i] === 13){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var primes\
    \ = [2,3,5,7,11,13];\n    var hex = {\n        '2':2,\n        '3':3,\n      \
    \  '5':5,\n        '7':7,\n        'B':11,\n        'D':13\n    }\n    var count\
    \ = 0;\n    var num = num.split('');\n    for(var i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  var primes\
    \ = '2357BD';\n  if(num == ''){\n    return 0;\n  }\n  var count = 0;\n  for(var\
    \ i = 0; i < num.length; i++){\n    for(var j = 0; j < primes.length; j++){\n\
    \      if(num[i] == primes[j]){\n        count++;\n      }\n    }\n  }\n  return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let primeHex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for(let\
    \ i = 0; i < num.length; i++){\n        if(primeHex.includes(num[i])){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let dict\
    \ = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(dict.indexOf(num[i])\
    \ > 9 && dict.indexOf(num[i]) < 14){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpm9ei0qpl.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm9ei0qpl.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let result\
    \ = 0;\n    let arr = [];\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let hexPrim = ['2','3','5','7','B','D'];\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hexPrim.includes(num[i])){\n            result++;\n      \
    \  }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let arr = '1237BDF'\n\
    \  let count = 0\n  for(let i = 0; i < num.length; i++){\n    if(arr.includes(num[i])){\n\
    \      count++\n    }\n  }\n  return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp84oyypid.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp84oyypid.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  var count =\
    \ 0;\n  var key = {\"0\":false, \"1\":false, \"2\":true, \"3\":true, \"4\":false,\
    \ \"5\":true, \"6\":false, \"7\":true, \"8\":false, \"9\":false, \"A\":false,\
    \ \"B\":true, \"C\":false, \"D\":true, \"E\":false, \"F\":false}\n  for(var i\
    \ = 0; i < num.length; i++){\n    if(key[num[i]]){\n      count++;\n    }\n  }\n\
    \  return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let arr=num.toUpperCase().split('');\n\
    \    let result=0;\n    arr.forEach(el=>{\n        if(el=='2'||el=='3'||el=='5'||el=='7'||el=='B'||el=='D'){\n\
    \            result++;\n        }\n    })\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
