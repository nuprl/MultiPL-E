name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["\n}\n", "    var sorted = l.sort();\n    var odd = (sorted.length %\
    \ 2 == 1);\n    if (odd){\n        return sorted[(sorted.length - 1) / 2];\n \
    \   } else {\n        return (sorted[(sorted.length / 2) - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    }\n}\n", "  //Your code goes here\n  if(!Array.isArray(l)){\n\
    \    return 'ERROR: Not an array.';\n  }\n  if(l.length === 0){\n    return 'ERROR:\
    \ List is empty.';\n  }\n  var sorted = l.sort();\n  var medianIndex = Math.floor(sorted.length\
    \ / 2);\n  if(sorted.length % 2 === 0){\n    return (sorted[medianIndex - 1] +\
    \ sorted[medianIndex]) / 2;\n  } else {\n    return sorted[medianIndex];\n  }\n\
    }\n", "    return l[parseInt(l.length/2)];\n}\n", "  return (l[~~(l.length/2)\
    \ - 1] + l[~~(l.length/2)]) / 2\n}\n", "\tl.sort();\n\tif (l.length % 2 == 0){\n\
    \t\treturn (l[l.length/2] + l[l.length/2 - 1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(l.length/2)];\n\
    \t}\n}\n", "\t//Your code here\n}\n", "    if (l.length % 2 == 0){\n        return\
    \ (l[l.length/2] + l[l.length/2 - 1])/2\n    }\n    else{\n        return l[Math.floor(l.length/2)]\n\
    \    }\n}\n", "\n}\n", "    sorted(l);\n    var mid = (l.length + 1) / 2;\n  \
    \  var med = l[mid];\n    return med;\n};\n", "\tlet median=l.sort();\n\tlet length=median.length;\n\
    \tif(length%2==0){\n\t\treturn ((median[length/2]+median[length/2-1])/2);\n\t\
    }\n\telse{\n\t\treturn median[Math.floor(length/2)];\n\t}\n}\n", "    // your\
    \ code here\n    var n = l.length;\n    var m = n/2;\n    var mid = Math.floor(m);\n\
    \    var v = 0;\n    var v2 = 0;\n    //console.log(n);\n    //console.log(m);\n\
    \    //console.log(mid);\n    if (m % 2 == 0){\n        console.log(mid);\n  \
    \      v = l[mid] + l[mid-1];\n        return v/2;\n    }\n    else {\n      \
    \  v2 = l[mid];\n        return v2;\n    }\n    \n    \n}\n", "  if (l.length\
    \ % 2 == 0){\n    return (l[l.length/2 - 1] + l[l.length/2])/2;\n  }\n  else{\n\
    \    return l[(l.length+1)/2 - 1];\n  }\n}\n", "    return ((l.sort())[(l.length\
    \ - 1) / 2] + (l.sort())[l.length / 2]) / 2;\n}\n", "\tvar n = l.length;\n\tif\
    \ (n%2==0){\n\t\treturn (l[n/2-1]+l[n/2])/2.0;\n\t}\n\telse {\n\t\treturn l[Math.floor(n/2)];\n\
    \t}\n}\n", "    return (l[(l.length-1)/2] + l[l.length/2])/2;\n}\n", "  l.sort();\n\
    \  var index = (l.length - 1) / 2;\n  if (l.length % 2 === 0){\n    return (l[index]\
    \ + l[index + 1]) / 2;\n  }\n  else{\n    return l[Math.floor(index)];\n  }\n\
    }\n", "    let middle = Math.floor(l.length / 2);\n    let sorted = l.sort((a,\
    \ b) => a - b);\n    if (l.length % 2 === 0) {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    } else {\n        return sorted[middle];\n\
    \    }\n}\n", "}\n", "    let m=l.length/2;\n    let med;\n    if(l.length%2==0){\n\
    \        med=(l[m]+l[m-1])/2;\n    }else{\n        med=l[Math.floor(m)];\n   \
    \ }\n    return med;\n}\n", "\tl.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\
    \tif(l.length%2!=0){\n\t\treturn l[(l.length/2)|0];\n\t}else{\n\t\tvar n=l.length/2;\n\
    \t\treturn (l[n]+l[n-1])/2;\n\t}\n}\n", "    //Select the median of a list\n \
    \   //The median of an odd-length list is the middle element.\n    //The median\
    \ of an even-length list is the average of the two middle elements.\n    var sorted_l\
    \ = sorted(l);\n    var mid = Math.floor(sorted_l.length / 2);\n    var median\
    \ = sorted_l[mid];\n    if (sorted_l.length % 2 == 0){\n        median = (median\
    \ + sorted_l[mid-1]) / 2;\n    }\n    return median;\n}\n", "    return l.sort()[Math.floor(l.length/2)];\n\
    }", "\tl.sort(function(a,b){return a-b});\n\tvar l_len = l.length;\n\tif(l_len%2\
    \ == 0){\n\t\treturn (l[l_len/2-1]+l[l_len/2])/2.0;\n\t}\n\telse{\n\t\treturn\
    \ l[Math.floor(l_len/2)];\n\t}\n}\n", "  //If the list is even, then return the\
    \ average of the middle two elements\n  if(l.length % 2 == 0){\n    var idx =\
    \ l.length / 2 - 1;\n    return (l[idx] + l[idx + 1]) / 2;\n  }\n  else{\n   \
    \ return l[Math.floor(l.length / 2)];\n  }\n}\n", "\tif (isEven(l.length)) {\n\
    \t\tvar mid = l.length / 2;\n\t\treturn (l[mid - 1] + l[mid]) / 2;\n\t}\n\telse\
    \ {\n\t\tvar mid = Math.floor(l.length / 2);\n\t\treturn l[mid];\n\t}\n}\n", "\t\
    let newList = quickSort(l);\n\tlet middle = Math.floor(newList.length/2);\n\t\
    if(newList.length % 2 == 0){\n\t\treturn newList[middle];\n\t}else{\n\t\treturn\
    \ (newList[middle] + newList[middle-1])/2;\n\t}\n}\n", "    var lcopy = l.slice();\n\
    \    lcopy.sort(function(a,b){return a-b});\n    var length = lcopy.length;\n\
    \    if (length % 2 === 0){\n        var lindex = length/2;\n        var rindex\
    \ = lindex-1;\n        return (lcopy[lindex]+lcopy[rindex])/2;\n    }\n    else{\n\
    \        var index = Math.floor(length/2);\n        return lcopy[index];\n   \
    \ }\n}\n", "    l.sort(function(a, b){return a-b});\n    var middleIndex = Math.floor(l.length/2);\n\
    \    if(l.length % 2 == 0){\n        return (l[middleIndex-1] + l[middleIndex])/2;\n\
    \    }\n    else{\n        return l[middleIndex];\n    }\n}\n", "    //YOUR CODE\
    \ HERE\n    let arr = l.sort();\n    let len = arr.length;\n    if (len%2 == 0){\n\
    \        return (arr[len/2-1]+arr[len/2])/2;\n    }\n    else{\n        return\
    \ arr[(len-1)/2];\n    }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n \
    \   if (sorted.length % 2 == 0){\n        return (sorted[sorted.length / 2] +\
    \ sorted[sorted.length / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(sorted.length\
    \ / 2)];\n    }\n}\n", "    // Your code here\n}\n", "    let arr = Array.from(l);\n\
    \    arr.sort(function(a, b){return a-b});\n    let med = 0;\n    if(arr.length\
    \ % 2 == 0){\n        med = (arr[arr.length/2] + arr[arr.length/2-1])/2;\n   \
    \ }else{\n        med = arr[Math.floor(arr.length/2)];\n    }\n    return med;\n\
    }\n", "  //TODO\n}\n", "  var even = l.length % 2 === 0;\n  var target = l.length\
    \ / 2;\n  if(even){\n    return (l[target] + l[target - 1]) / 2;\n  } else {\n\
    \    return l[Math.floor(target)];\n  }\n}\n\n", "    var n=length(l)\n    var\
    \ m=floor(n/2)\n    if (n % 2) {\n        return l[m]\n    }\n    else {\n   \
    \     return (l[m-1]+l[m])/2\n    }\n}\n", "\t//sorting l\n\t//sorting l\n\tlet\
    \ len = l.length;\n\tfor(let i = 0; i < len; i++){\n\t\tfor(let j = 0; j < len;\
    \ j++){\n\t\t\tif(l[i] < l[j]){\n\t\t\t\tlet temp = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t//return median\n\tif(len % 2 ==\
    \ 0){\n\t\tlet mid = len / 2;\n\t\treturn (l[mid] + l[mid - 1]) / 2;\n\t}else{\n\
    \t\tlet mid = Math.floor(len / 2);\n\t\treturn l[mid];\n\t}\n}", "    if(l.length%2==0){\n\
    \        return(l[l.length/2]+l[l.length/2-1])/2;\n    }\n    else{\n        return\
    \ l[Math.floor(l.length/2)];\n    }\n}\n", "    var i, sum = 0, len = l.length;\n\
    \    for(i = 0; i < len; i++){\n        sum += l[i];\n    }\n    return sum /\
    \ len;\n}\n", "  return 0;\n}\n", "\tlet n = l.length;\n\tif(n%2 === 0){\n\t\t\
    return (l[n/2-1]+l[n/2])/2;\n\t}\n\telse{\n\t\treturn l[(n-1)/2];\n\t}\n}", " \
    \   var m = l.length / 2;\n    return m % 1 === 0 ? (l[m-1] + l[m]) / 2 : l[Math.floor(m)];\n\
    }\n", "    if(l.length == 0){\n        return null;\n    }\n    else{\n      \
    \  var even = l.length % 2 == 0;\n        var index = Math.floor(l.length / 2);\n\
    \        var med = l[index];\n        if(even){\n            med = (med + l[index\
    \ - 1]) / 2;\n        }\n        return med;\n    }\n}\n", "\tvar sorted = l.sort(function(a,b){return\
    \ a-b});\n\tvar length = sorted.length;\n\tif(length%2==0){\n\t\treturn (sorted[length/2-1]+sorted[length/2])/2;\n\
    \t}\n\telse{\n\t\treturn sorted[Math.floor(length/2)];\n\t}\n}\n", "    l.sort(function(a,\
    \ b){return a-b});\n    console.log(l);\n    var n = Math.floor(l.length/2);\n\
    \    if (l.length % 2 == 0){\n        return (l[n-1] + l[n])/2;\n    } else {\n\
    \        return l[n];\n    }\n}\n", "\tvar length = l.length;\n\tl.sort(function(a,b){return\
    \ a-b});\n\tif(length%2==0){\n\t\treturn (l[length/2-1]+l[length/2])/2;\n\t}else{\n\
    \t\treturn l[Math.floor(length/2)];\n\t}\n}\n", "    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = sorted.length / 2;\n    return mid % 1 == 0 ? (sorted[mid]\
    \ + sorted[mid - 1]) / 2 : sorted[Math.floor(mid)];\n}\n", "  if(l.length%2===0){\n\
    \    return (l[Math.floor(l.length/2)]+l[Math.floor(l.length/2)-1])/2\n  }else{\n\
    \    return l[Math.floor(l.length/2)]\n  }\n}\n", "  var sortedArray = l.sort();\n\
    \  var arrayLength = sortedArray.length;\n  if (arrayLength%2==0){\n    return\
    \ (sortedArray[(arrayLength/2)-1]+sortedArray[arrayLength/2])/2;\n  }\n  else{\n\
    \    return sortedArray[Math.floor(arrayLength/2)];\n  }\n}\n", "    return (l[Math.floor(l.length/2)]\
    \ + l[Math.ceil(l.length/2)])/2;\n}\n", "    function compare(a, b){\n       \
    \ return a - b;\n    }\n    l.sort(compare);\n    return l[Math.floor(l.length\
    \ / 2)];\n}\n", "\tvar median = 0;\n\tif(l.length % 2 == 0){\n\t\tvar n = l.length/2;\n\
    \t\tmedian = (l[n] + l[n-1])/2;\n\t}else{\n\t\tvar n = Math.floor(l.length/2);\n\
    \t\tmedian = l[n];\n\t}\n\treturn median;\n}\n", "\treturn (l[Math.floor(l.length/2)]\
    \ + l[Math.ceil(l.length/2)])/2;\n}\n", "  var m = -1;\n  var list = [];\n  list\
    \ = l.sort(function(a,b){return a-b});\n  if(list.length % 2 == 0){\n    m = (list[list.length/2]\
    \ + list[list.length/2-1])/2;\n  }\n  else{\n    m = list[parseInt(list.length/2)];\n\
    \  }\n  return m;\n}\n", "    var list=l.sort();\n    var median=0;\n    if(list.length\
    \ % 2==0){\n        median= (list[list.length/2]+list[list.length/2-1])/2;\n \
    \   }\n    else{\n        median= list[Math.floor(list.length/2)];\n    }\n  \
    \  return median;\n}\n", "  // init temp array\n  var sorted = [];\n  var length\
    \ = l.length;\n  var mid = Math.floor(length / 2);\n  // Put the elements of l\
    \ in sorted array\n  sorted = l.sort();\n  // If length of l is even\n  if (length\
    \ % 2 === 0){\n    // return avg of middle 2 elements\n    return (sorted[mid]\
    \ + sorted[mid-1]) / 2;\n  } else {\n    // return middle element\n    return\
    \ sorted[mid];\n  }\n}\n\n", "    var med = 0;\n    //Sort list\n    l.sort(function(a,\
    \ b){return a-b});\n    //Test if l is even\n    if(l.length % 2 == 0){\n    \
    \    med = (l[l.length/2] + l[l.length/2 - 1])/2\n    }else{\n        med = l[(l.length\
    \ - 1)/2]\n    }\n    return med;\n}\n", "  let sL = l.sort(function(a, b){return\
    \ a-b});\n  let mid = sL.length/2;\n  if(mid%1 === 0){\n    return (sL[mid-1]\
    \ + sL[mid])/2;\n  }\n  else{\n    return sL[Math.floor(mid)];\n  }\n}", "\tl.sort(function(a,b){return\
    \ a-b});\n\tvar mid = Math.floor(l.length/2);\n\tif(l.length%2==0){\n\t\treturn\
    \ (l[mid-1]+l[mid])/2;\n\t}\n\telse{\n\t\treturn l[mid];\n\t}\n}\n", "    if (l.length%2!=0){\n\
    \        let center = Math.floor(l.length/2);\n        return l[center];\n   \
    \ }\n    else{\n        let center = Math.floor(l.length/2);\n        return (l[center]+l[center-1])/2;\n\
    \    }\n}\n", "  l.sort(function(a, b){return a-b});\n  var index = Math.floor(l.length/2);\n\
    \  if (l.length % 2 === 0){\n    return (l[index] + l[index - 1])/2.0;\n  }\n\
    \  else{\n    return l[index];\n  }\n}\n", "\tif(l.length == 0){\n\t\treturn 0;\n\
    \t}\n\tvar s = l.slice();\n\ts.sort(function(a, b){return a-b});\n\tvar h = s.length/2;\n\
    \tif(s.length % 2 == 0){\n\t\treturn (s[h] + s[h-1])/2;\n\t}else{\n\t\treturn\
    \ s[h-0.5];\n\t}\n}\n", "\treturn sum(l)/l.length;\n}\n", "  return medianQuickSort(l);\n\
    }\n", "\n}\n", "\t//always sort\n\tl.sort(function(a,b){return a-b});\n\t//if\
    \ odd, return middle val\n\tif(l.length%2==1){\n\t\treturn l[(l.length-1)/2];\n\
    \t}\n\t//if even, return average of middle two vals\n\telse{\n\t\treturn (l[(l.length/2)-1]+l[l.length/2])/2;\n\
    \t}\n}\n", "    // YOUR CODE HERE\n    l.sort();\n    return (l[Math.floor(l.length/2)]\
    \ + l[Math.ceil(l.length/2)])/2;\n}", "    var sum = 0;\n    for(var i = 0; i\
    \ < l.length; i++){\n        sum += l[i];\n    }\n    return sum / l.length;\n\
    }\n", "    var a = l.sort()\n    var mid = a.length/2\n    if (a.length % 2 ==\
    \ 0){\n        var b = a[mid - 1] + a[mid]\n        return b/2\n    }\n    return\
    \ a[Math.floor(mid)]\n}\n", "\t//Sort the array.\n\tl.sort(function(a, b){return\
    \ a-b;});\n\t//Return the median.\n\tif(l.length % 2 == 0){\n\t\treturn (l[Math.floor(l.length/2)]\
    \ + l[Math.floor(l.length/2) - 1])/2;\n\t}else{\n\t\treturn l[Math.floor(l.length/2)];\n\
    \t}\n}\n", "  if(l.length == 0){\n    return 0;\n  }\n  else if(l.length == 1){\n\
    \    return l[0];\n  }\n  else{\n    var list = l.sort(function(a, b){return a-b});\n\
    \    var half = Math.floor(list.length/2);\n    if(list.length % 2){\n      return\
    \ list[half];\n    }\n    else{\n      return (list[half-1] + list[half]) / 2.0;\n\
    \    }\n  }\n}", "  //...\n}\n", "    return 0;\n}\n", "\tvar med = l.sort();\n\
    \tvar mid = Math.floor(med.length/2);\n\tvar len = med.length;\n\tif (len % 2\
    \ == 0){\n\t\tmed = (med[mid-1] + med[mid])/2;\n\t}\n\telse{\n\t\tmed = med[mid];\n\
    \t}\n\treturn med;\n}\n", "    var l1 = l.slice(0);\n    var l2 = l.slice(0);\n\
    \    var l11 = sort(l1);\n    var l22 = sort(l2);\n    var len = l11.length;\n\
    \    var center = len/2;\n    if (len % 2 == 0){\n        var n1 = l22[center];\n\
    \        var n2 = l22[center-1];\n        return (n1+n2)/2;\n    }\n    else{\n\
    \        return l11[center];\n    }\n}\n", "    l.sort(function(a, b){return a-b});\n\
    \    if (l.length % 2 == 0){\n        return (l[l.length/2] + l[l.length/2 - 1])/2;\n\
    \    }\n    else{\n        return l[Math.floor(l.length/2)];\n    }\n}\n", " \
    \   let sortL = l.sort(function(a, b){return a-b});\n    let midpoint = Math.floor(sortL.length/2);\n\
    \    if (sortL.length % 2 == 0){\n        return (sortL[midpoint] + sortL[midpoint\
    \ - 1])/2;\n    }\n    else{\n        return sortL[midpoint];\n    }\n}\n", " \
    \   return (l[Math.floor(l.length/2)] + l[Math.ceil(l.length/2)])/2\n}\n", " \
    \   var median = 0;\n    if (l.length % 2 == 0){\n        var pos = l.length /\
    \ 2;\n        median = (l[pos] + l[pos - 1]) / 2.0;\n    } else {\n        var\
    \ pos = (l.length - 1) / 2;\n        median = l[pos];\n    }\n    return median;\n\
    }\n", "    let len = l.length;\n    let mid = Math.floor(len/2);\n    l.sort(function(a,\
    \ b){return a-b});\n    return (len % 2 != 0) ? l[mid] : (l[mid-1] + l[mid]) /\
    \ 2.0;\n}\n", "    //write your code here.\n}\n", "    var l2 = l.sort(function(a,b){\n\
    \        return a-b;\n    });\n    if(l2.length%2==0){\n        return (l2[l2.length/2]+l2[l2.length/2-1])/2;\n\
    \    }\n    else{\n        return l2[(l2.length-1)/2];\n    }\n}\n", "    l.sort(function(a,\
    \ b){return a-b});\n    let m = l.length;\n    let k = m/2;\n    let h = Math.floor(k);\n\
    \    let z = m%2;\n    if (z == 0){\n        return (l[h-1] + l[h])/2;\n    }\n\
    \    else {\n        return l[h];\n    }\n}\n", "  //TODO: Complete this function.\n\
    \  if(l.length % 2 == 0){\n    var i = l.length / 2;\n    return (l[i-1] + l[i])\
    \ / 2;\n  }else{\n    var j = l.length / 2;\n    return l[Math.floor(j)];\n  }\n\
    }", "\tl.sort(function(a,b){return a-b;});\n\tvar len = l.length;\n\tif(len%2==0){\n\
    \t\treturn (l[len/2-1]+l[len/2])/2;\n\t}else{\n\t\treturn l[(len-1)/2];\n\t}\n\
    }\n", "    var m = l.length;\n    var n = [];\n    var n = l.sort();\n    //console.log(n);\n\
    \    if(m%2==0){\n        var me = (n[m/2] + n[(m/2)-1])/2;\n        //console.log(me);\n\
    \        return me;\n    }\n    else{\n        var me = n[parseInt(m/2)];\n  \
    \      //console.log(me);\n        return me;\n    }\n}\n", "  var even = (l.length\
    \ % 2 === 0);\n  var mid = even ? (l.length / 2) - 1 : Math.floor(l.length / 2);\n\
    \  var med = (even ? ((l[mid] + l[mid + 1]) / 2) : l[mid]);\n  return med;\n}\n",
  "    //return the median of the list\n    var median;\n    var sorted = l.sort();\n\
    \n    if (sorted.length % 2 === 0) {\n        median = (sorted[sorted.length /\
    \ 2 - 1] + sorted[sorted.length / 2]) / 2;\n    } else {\n        median = sorted[(sorted.length\
    \ - 1) / 2];\n    }\n    return median;\n}\n", "\t//First, sort the list. \n\t\
    //This is an in-place sort, so we're not making a copy.\n\t//(The method mutates\
    \ the list.)\n\tl.sort();\n\t//Now, if the length of the list is even, we take\
    \ the two \n\t//middle items in the list, add them together, and divide \n\t//by\
    \ two. If the length of the list is odd, we just \n\t//take the middle item.\n\
    \tvar listLength = l.length;\n\tif (listLength % 2 == 0){\n\t\tvar sum = l[listLength/2\
    \ - 1] + l[listLength/2];\n\t\treturn sum/2;\n\t}\n\telse{\n\t\treturn l[(listLength-1)/2];\n\
    \t}\n}\n", "    let numbers = l.sort((a, b) => a - b);\n    let lowMiddle = Math.floor((numbers.length\
    \ - 1) / 2);\n    let highMiddle = Math.ceil((numbers.length - 1) / 2);\n    let\
    \ median = (numbers[lowMiddle] + numbers[highMiddle]) / 2;\n    return median;\n\
    }\n", "    var s = l.slice(0);\n    s.sort(function(a, b){\n        return a -\
    \ b;\n    });\n    var middle = s.length / 2;\n    if (s.length % 2 == 0){\n \
    \       return (s[middle - 1] + s[middle]) / 2;\n    }\n    else{\n        return\
    \ s[Math.floor(middle)];\n    }\n}\n", "  if (l.length % 2 === 0){\n    let idx\
    \ = l.length / 2;\n    return (l[idx] + l[idx - 1]) / 2;\n  }\n  else{\n    let\
    \ idx = Math.floor(l.length / 2);\n    return l[idx];\n  }\n}", "  var tmp = list_copy(l);\n\
    \  var m = Math.floor(length(tmp)/2);\n  tmp = sort(tmp);\n  return (length(tmp)\
    \ % 2 === 0)?((nth(tmp, m-1) + nth(tmp, m))/2):nth(tmp, m);\n}\n", "\tvar median_arr\
    \ = l.sort(function(a,b){return a-b;});\n\tif(median_arr.length%2 != 0){\n\t\t\
    var mid = Math.floor(median_arr.length/2);\n\t\treturn median_arr[mid];\n\t}\n\
    \telse{\n\t\tvar l_mid = Math.floor(median_arr.length/2);\n\t\tvar u_mid = l_mid\
    \ + 1;\n\t\treturn (median_arr[l_mid] + median_arr[u_mid])/2;\n\t}\n}\n", "  //Insert\
    \ your code here.\n}\n", "    return l.sort()[Math.floor(l.length/2)];\n}\n",
  "\tl.sort(function(a,b){return a-b});\n\tvar l_length = l.length;\n\tif(l_length\
    \ % 2 == 0){\n\t\tvar a = l[l_length/2];\n\t\tvar b = l[l_length/2 - 1];\n\t\t\
    return (a+b)/2;\n\t}\n\telse{\n\t\treturn l[(l_length - 1)/2];\n\t}\n}\n", " \
    \   let len = l.length;\n    if(len%2){\n        return l[Math.floor(len/2)];\n\
    \    }\n    else{\n        return (l[Math.floor(len/2)-1]+l[Math.floor(len/2)])/2;\n\
    \    }\n}\n", "    l.sort(function(a, b){return a-b});\n    if (l.length % 2 ==\
    \ 0){\n        return (l[(l.length/2)-1] + l[l.length/2])/2\n    }\n    else{\n\
    \        return l[Math.floor(l.length/2)]\n    }\n}\n", "}\n\n", "\tlet s = l.sort();\n\
    \tlet length = s.length;\n\tlet mid = length/2;\n\tif(length%2===0){\n\t\treturn\
    \ (s[mid]+s[mid-1])/2;\n\t}else{\n\t\treturn s[Math.floor(mid)];\n\t}\n}\n", " \
    \   var sorted_l = l.sort(function(a, b){return a-b});\n    var mid = sorted_l.length/2;\n\
    \    if (sorted_l.length % 2 == 0){\n        return (sorted_l[mid-1] + sorted_l[mid])/2;\n\
    \    }\n    else{\n        return sorted_l[Math.floor(mid)];\n    }\n}\n", " \
    \   return l.sort()[(l.length - 1) / 2];\n}\n", "    var temp = []\n    for (var\
    \ i = 0; i < l.length; i++){\n        temp.push(l[i])\n    }\n    temp.sort(function(a,\
    \ b){return a-b})\n    return temp[Math.floor(temp.length/2)]\n}\n", "    if (l.length\
    \ == 0)\n        return null;\n    else if (l.length == 1)\n        return l[0];\n\
    \    var lc = l.slice();\n    lc.sort(function(a, b){return a-b});\n    if (lc.length\
    \ % 2 == 0)\n        return ((lc[lc.length/2] + lc[lc.length/2 - 1]) / 2);\n \
    \   else\n        return lc[Math.floor(lc.length/2)];\n}\n", "    var sum=0;\n\
    \    for(var i=0;i<l.length;i++){\n        sum+=l[i];\n    }\n    var med=sum/l.length;\n\
    \    return med;\n}\n", "  var l = l.sort(function(a,b){\n    return a-b;\n  });\n\
    \  var half = Math.floor(l.length/2);\n  if(l.length % 2){\n    return l[half];\n\
    \  }else{\n    return (l[half-1] + l[half]) / 2.0;\n  }\n}\n", "    var median\
    \ = 0, numsLen = l.length;\n    l.sort();\n \n    if (\n        numsLen % 2 ===\
    \ 0 // is even\n    ) {\n        // average of two middle numbers\n        median\
    \ = (l[numsLen / 2 - 1] + l[numsLen / 2]) / 2;\n    } else { // is odd\n     \
    \   // middle number only\n        median = l[(numsLen - 1) / 2];\n    }\n \n\
    \    return median;\n}\n", "    var l_ = l.sort(function(a,b){return a-b;});\n\
    \    var h = l_.length;\n    var m = parseInt(h/2);\n    if(h%2==0){\n       \
    \ return (l_[m]+l_[m-1])/2;\n    }\n    else{\n        return l_[m];\n    }\n\
    }\n", "\tif(!Array.isArray(l)){\n\t\treturn undefined;\n\t}\n\t\n\tvar len = l.length;\n\
    \t\n\tif(len <= 0){\n\t\treturn undefined;\n\t}\n\t\n\tvar sorted = l.sort(function(a,\
    \ b){return a - b;});\n\t\n\tif(len % 2 == 0){\n\t\treturn (sorted[len / 2 - 1]\
    \ + sorted[len / 2]) / 2;\n\t}\n\telse{\n\t\treturn sorted[Math.floor(len / 2)];\n\
    \t}\n}\n", "    var l1 = l.sort();\n    var len = l1.length;\n    if (len % 2\
    \ == 0){\n        return (l1[len/2 - 1] + l1[len/2])/2;\n    }\n    else {\n \
    \       return l1[Math.floor(len/2)];\n    }\n}\n", "  var m = Math.floor(l.length/2);\n\
    \  if (l.length % 2) {\n    return l[m];\n  } else {\n    return (l[m-1] + l[m])\
    \ / 2.0;\n  }\n}\n", "    //first sort\n    l.sort();\n    //length odd\n    if(l.length\
    \ % 2 !== 0){\n        return l[Math.floor(l.length/2)];\n    }\n    //length\
    \ even\n    else{\n        return (l[Math.floor(l.length/2)-1] + l[Math.floor(l.length/2)])/2;\n\
    \    }\n}\n", "    return (l[(l.length-1)/2] + l[l.length/2])/2;\n}\n", "    let\
    \ n=l.length;\n    if(n%2===0){\n        return (l[Math.floor(n/2)-1]+l[Math.floor(n/2)])/2;\n\
    \    }else{\n        return l[Math.floor(n/2)];\n    }\n}\n", "    var array =\
    \ l.sort();\n    var midpoint = Math.floor(array.length/2);\n    if (array.length\
    \ % 2 == 0){\n      return (array[midpoint] + array[midpoint-1])/2;\n    }\n \
    \   else{\n      return array[midpoint];\n    }\n}\n", "    return \n}\n", " \
    \ // TODO: Complete this function.\n}\n", "    var i, sum = 0;\n    for(i=0; i<l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum/l.length;\n}\n", "  if (l.length\
    \ % 2 == 0){\n    var first = l[(l.length / 2) - 1];\n    var second = l[(l.length\
    \ / 2)];\n    return (first + second) / 2.0;\n  }\n  else{\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n}\n", "    var m = Math.floor(l.length/2);\n    if (l.length %\
    \ 2)\n    {\n        // if the list length is odd, return the middle value.\n\
    \        return l[m];\n    }\n    else\n    {\n        //if the list length is\
    \ even, return the average of the middle two elements.\n        return (l[m-1]\
    \ + l[m]) / 2.0;\n    }\n}\n", "    if(l.length == 0){\n        return undefined;\n\
    \    }\n    else if(l.length == 1){\n        return l[0];\n    }\n    else{\n\
    \        l.sort();\n        var newList = l.slice(1,l.length-1);\n        return\
    \ average(newList);\n    }\n}\n", "    var len = l.length;\n    if (len == 0)\
    \ {\n        return null;\n    }\n    else if (len % 2 == 0) {\n        var m1\
    \ = l[len/2-1];\n        var m2 = l[len/2];\n        return (m1+m2)/2;\n    }\n\
    \    else {\n        return l[parseInt(len/2)];\n    }\n}\n", "\tvar median =\
    \ 0;\n\tvar sorted = l.sort(function(a,b){return a-b});\n\tif(sorted.length %\
    \ 2 == 0){\n\t\t//even\n\t\tmedian = (sorted[sorted.length/2] + sorted[sorted.length/2\
    \ - 1])/2;\n\t}\n\telse{\n\t\t//odd\n\t\tmedian = sorted[Math.floor(sorted.length/2)];\n\
    \t}\n\treturn median;\n}\n\n", "    return l.length%2 == 0 ? (l[l.length/2] +\
    \ l[l.length/2 - 1])/2 : l[(l.length-1)/2];\n}\n", "    var a = l.sort();\n  \
    \  var n = a.length;\n    if (n % 2 == 0){\n        return (a[n/2] + a[n/2 - 1])/2;\n\
    \    }\n    else {\n        return a[(n - 1)/2];\n    }\n}\n", "\tl.sort();\n\t\
    var len = l.length;\n\tif(len%2 == 0){\n\t\treturn (l[len/2-1]+l[len/2])/2.0;\n\
    \t}\n\telse{\n\t\treturn l[parseInt(len/2)];\n\t}\n}\n", "  var n=l.length;\n\
    \  var m=Math.floor(n/2);\n  if(n%2==0){\n    return (l[m-1]+l[m])/2.0;\n  }\n\
    \  else{\n    return l[m];\n  }\n}\n", "    var s = l.slice(0).sort();\n    var\
    \ m;\n    if (s.length % 2 == 0){\n        m = (s[(s.length / 2) - 1] + s[s.length\
    \ / 2]) / 2;\n    }\n    else{\n        m = s[Math.floor(s.length / 2)];\n   \
    \ }\n    return m;\n}\n", "  var sortedList = l.sort(function(a,b){return a-b});\n\
    \  if (sortedList.length % 2 == 0){\n    return (sortedList[(sortedList.length\
    \ / 2) - 1] + sortedList[(sortedList.length / 2)]) / 2;\n  }\n  else{\n    return\
    \ sortedList[Math.floor(sortedList.length / 2)];\n  }\n}\n", "    if(l.length\
    \ % 2 == 0){\n        return (l[l.length/2] + l[l.length/2 - 1])/2\n    }\n  \
    \  else{\n        return l[(l.length-1)/2]\n    }\n}\n", "  let m = Math.floor(l.length/2);\n\
    \  let low = l.sort((a,b) => a-b).slice(0,m)\n  let high = l.sort((a,b) => a-b).slice(m+1,l.length)\n\
    \  let mid = l.sort((a,b) => a-b).slice(m,m+1)\n  if (l.length%2 === 0){\n   \
    \ return (low[low.length-1] + high[0])/2\n  } else {\n    return mid[0]\n  }\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
