name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["\n}\n", "    var sorted = l.sort();\n    var odd = (sorted.length %\
    \ 2 == 1);\n    if (odd){\n        return sorted[(sorted.length - 1) / 2];\n \
    \   } else {\n        return (sorted[(sorted.length / 2) - 1] + sorted[sorted.length\
    \ / 2]) / 2;\n    }\n}\n", "  //Your code goes here\n  if(!Array.isArray(l)){\n\
    \    return 'ERROR: Not an array.';\n  }\n  if(l.length === 0){\n    return 'ERROR:\
    \ List is empty.';\n  }\n  var sorted = l.sort();\n  var medianIndex = Math.floor(sorted.length\
    \ / 2);\n  if(sorted.length % 2 === 0){\n    return (sorted[medianIndex - 1] +\
    \ sorted[medianIndex]) / 2;\n  } else {\n    return sorted[medianIndex];\n  }\n\
    }\n", "    return l[parseInt(l.length/2)];\n}\n", "  return (l[~~(l.length/2)\
    \ - 1] + l[~~(l.length/2)]) / 2\n}\n", "\tl.sort();\n\tif (l.length % 2 == 0){\n\
    \t\treturn (l[l.length/2] + l[l.length/2 - 1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(l.length/2)];\n\
    \t}\n}\n", "\t//Your code here\n}\n", "    if (l.length % 2 == 0){\n        return\
    \ (l[l.length/2] + l[l.length/2 - 1])/2\n    }\n    else{\n        return l[Math.floor(l.length/2)]\n\
    \    }\n}\n", "\n}\n", "    sorted(l);\n    var mid = (l.length + 1) / 2;\n  \
    \  var med = l[mid];\n    return med;\n};\n", "\tlet median=l.sort();\n\tlet length=median.length;\n\
    \tif(length%2==0){\n\t\treturn ((median[length/2]+median[length/2-1])/2);\n\t\
    }\n\telse{\n\t\treturn median[Math.floor(length/2)];\n\t}\n}\n", "    // your\
    \ code here\n    var n = l.length;\n    var m = n/2;\n    var mid = Math.floor(m);\n\
    \    var v = 0;\n    var v2 = 0;\n    //console.log(n);\n    //console.log(m);\n\
    \    //console.log(mid);\n    if (m % 2 == 0){\n        console.log(mid);\n  \
    \      v = l[mid] + l[mid-1];\n        return v/2;\n    }\n    else {\n      \
    \  v2 = l[mid];\n        return v2;\n    }\n    \n    \n}\n", "  if (l.length\
    \ % 2 == 0){\n    return (l[l.length/2 - 1] + l[l.length/2])/2;\n  }\n  else{\n\
    \    return l[(l.length+1)/2 - 1];\n  }\n}\n", "    return ((l.sort())[(l.length\
    \ - 1) / 2] + (l.sort())[l.length / 2]) / 2;\n}\n", "\tvar n = l.length;\n\tif\
    \ (n%2==0){\n\t\treturn (l[n/2-1]+l[n/2])/2.0;\n\t}\n\telse {\n\t\treturn l[Math.floor(n/2)];\n\
    \t}\n}\n", "    return (l[(l.length-1)/2] + l[l.length/2])/2;\n}\n", "  l.sort();\n\
    \  var index = (l.length - 1) / 2;\n  if (l.length % 2 === 0){\n    return (l[index]\
    \ + l[index + 1]) / 2;\n  }\n  else{\n    return l[Math.floor(index)];\n  }\n\
    }\n", "    let middle = Math.floor(l.length / 2);\n    let sorted = l.sort((a,\
    \ b) => a - b);\n    if (l.length % 2 === 0) {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    } else {\n        return sorted[middle];\n\
    \    }\n}\n", "}\n", "    let m=l.length/2;\n    let med;\n    if(l.length%2==0){\n\
    \        med=(l[m]+l[m-1])/2;\n    }else{\n        med=l[Math.floor(m)];\n   \
    \ }\n    return med;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
