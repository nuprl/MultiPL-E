name: HumanEval_61_correct_bracketing
language: js
results:
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opens = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            opens.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (opens.length > 0){\n\
    \                opens.pop();\n            }\n            else {\n           \
    \     return false;\n            }\n        }\n    }\n    if (opens.length ==\
    \ 0){\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\"){\n      open++;\n    } else if (brackets[i] == \")\"){\n      open--;\n\
    \    } else {\n      return false;\n    }\n    if (open < 0){\n      return false;\n\
    \    }\n  }\n  return open == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\
    \tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n \
    \ }\n  return count === 0;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var left_brackets = 0;\n    for (i=0; i<brackets.length; i++){\n        if\
    \ (brackets[i]==\"(\"){\n            left_brackets = left_brackets + 1;\n    \
    \    }\n        else if (brackets[i]==\")\"){\n            left_brackets = left_brackets\
    \ - 1;\n        }\n        if (left_brackets < 0){\n            return false;\n\
    \        }\n    }\n    if (left_brackets == 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    // your code here\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            count += 1;\n      \
    \  } else if (brackets[i] === ')') {\n            count -= 1;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  return brackets.replace(/[^()]/g, '').split('').reduce(function(previous, current,\
    \ index, array){\n    if(current == ')') {\n      return previous - 1;\n    }\
    \ else {\n      return previous + 1;\n    }\n  }, 0) == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_6bkqu6y.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_6bkqu6y.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  let opened = 0;\n  for (let i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == \"(\"){\n      opened += 1;\n    } else if (brackets[i] == \")\"){\n    \
    \  opened -= 1;\n    }\n    if (opened < 0){\n      return false;\n    }\n  }\n\
    \  return opened == 0;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var bracketOpenCount = 0;\n    var bracketCloseCount = 0;\n    for (var i\
    \ = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n      \
    \      bracketOpenCount++;\n        } else if (brackets[i] == \")\"){\n      \
    \      bracketCloseCount++;\n        }\n    }\n    if (bracketOpenCount === bracketCloseCount){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx6gogeq7.js:38:10)\n    at Object.<anonymous> (/tmp/tmpx6gogeq7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n \
    \ }\n  return count === 0;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \t// init\n\tvar current_bracket = brackets[0];\n\tvar stack = [];\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tcurrent_bracket = brackets[i];\n\t\t\
    if (current_bracket == '(') {\n\t\t\tstack.push(current_bracket);\n\t\t} else\
    \ if (current_bracket == ')') {\n\t\t\tstack.pop();\n\t\t}\n\t}\n\tif (stack.length\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyv8slufv.js:40:10)\n    at Object.<anonymous> (/tmp/tmpyv8slufv.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    let bracket_count = 0;\n    let result = true;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            bracket_count += 1;\n\
    \        } else if (brackets[i] === \")\") {\n            bracket_count -= 1;\n\
    \        }\n        if (bracket_count < 0) {\n            result = false;\n  \
    \      }\n    }\n    if (bracket_count === 0) {\n        return result;\n    }\
    \ else {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \treturn !brackets.split(\"\").filter(function(b){\n\t\treturn b == \"(\"\n\t\
    }).reduce(function(s,b){\n\t\treturn s - 1\n\t},0)\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpivhl1yt0.js:25:10)\n    at Object.<anonymous> (/tmp/tmpivhl1yt0.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var opening = 0;\n    for (var i = 0; i < brackets.length; i++){\n      \
    \  if (brackets[i] == \"(\"){\n            opening += 1;\n        }\n        else\
    \ if (brackets[i] == \")\"){\n            opening -= 1;\n        }\n        if\
    \ (opening < 0){\n            return false;\n        }\n    }\n    if (opening\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\") {\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var arr = [];\n    var counter = 0;\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\"){\n            arr.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == \")\"){\n            if(arr.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              arr.pop();\n            }\n        }\n    }\n    if(arr.length\
    \ != 0){\n        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ var c = brackets[i];\n        if (c == \"(\") {\n            stack.push(c);\n\
    \        } else if (c == \")\") {\n            if (stack.length == 0) {\n    \
    \            return false;\n            }\n            stack.pop();\n        }\n\
    \    }\n    return stack.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    } else {\n      return false;\n    }\n    if (count < 0)\
    \ {\n      return false;\n    }\n  }\n  return count === 0;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
    (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n\
    \    // here is my solution...feel free to do it differently!\n    count = 0;\n\
    \    for (var i = 0; i < brackets.length; i++){\n        char = brackets[i];\n\
    \        if (char == \"(\"){\n            count += 1;\n        }\n        else\
    \ if (char == \")\"){\n            count -= 1;\n        }\n        if (count <\
    \ 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    \n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
