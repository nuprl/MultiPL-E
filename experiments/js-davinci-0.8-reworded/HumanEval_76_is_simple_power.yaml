name: HumanEval_76_is_simple_power
language: js
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
  \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
  \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
  \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
  \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
  \ 12),true);\n}\n\ntest();"
completions: ["  if(x===1){\n    return true;\n  }\n  if(x < n){\n    return false;\n\
    \  }\n  if(x % n !== 0){\n    return false;\n  }\n  return is_simple_power(x/n,\
    \ n);\n}\n", "    let result = Math.pow(n, Math.round(Math.log(x)/Math.log(n)));\n\
    \    if(result === x){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}", "    return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n", "    //your code here\n}", "    var y = x ** (1/n);\n    if(x === 1){\n\
    \        return true;\n    }\n    else if(n ** y === x){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nmodule.exports = {\n   \
    \ is_simple_power\n}", "  var result = Math.log(x) / Math.log(n);\n  if (Number.isInteger(result)){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "    // your code\
    \ here\n}", "    var power = Math.pow(n, Math.log(x)/Math.log(n));\n    return\
    \ power === x ? true : false;\n}", "    return x == Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "  return (x % n == 0 && n**Math.floor(Math.log(x)/Math.log(n))==x)\
    \ ? true : false;\n}", "    if( x == 1){\n        return true;\n    }\n    if(x\
    \ % n != 0){\n        return false;\n    }\n    return is_simple_power(x/n, n);\n\
    }", "    for(let i = 1; i < x; i++){\n        if(x === Math.pow(n, i)){\n    \
    \        return true;\n        }\n    }\n    return false;\n}", "  if(n**Math.log(x)/Math.log(n)==x){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}", "    if(n<=0){\n\
    \        return false;\n    }\n    if(Math.log(x)/Math.log(n)%1==0){\n       \
    \ return true;\n    }else{\n        return false;\n    }\n}\n", "  let i = 0;\n\
    \  if (x == 1) return true;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n,\
    \ i) == x) return true;\n    i++;\n  }\n  return false;\n}", "  let result = Math.log(x)\
    \ / Math.log(n);\n  return Number.isInteger(result);\n}", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "  var result = Math.log(x) / Math.log(n);\n\
    \  return (result % 1 == 0) ? true : false;\n}", "    let result = false;\n  \
    \  for(let i = 0; i <= x; i++){\n        if(n**i === x){\n            result =\
    \ true;\n        }\n    }\n    return result;\n}", "    let result = Math.log(x)\
    \ / Math.log(n);\n    if (Number.isInteger(result)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    //return Math.log(x) /\
    \ Math.log(n) % 1 === 0;\n    return x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "  return Number.isInteger(Math.log(x)/Math.log(n));\n\
    }", "  return (Math.pow(n, Math.round(Math.log(x)/Math.log(n))) == x);\n}\nis_simple_power(1,\
    \ 4);", "    var i = 0;\n    var toReturn = false;\n    while(Math.pow(n, i) <=\
    \ x){\n        if(Math.pow(n, i) == x){\n            toReturn = true;\n      \
    \  }\n        i++;\n    }\n    return toReturn;\n}\n", "    return Number.isInteger(Math.log(x)/Math.log(n));\n\
    }", "  return n==1?false:Math.round(Math.log(x)/Math.log(n))==Math.log(x)/Math.log(n)\n\
    }", "    for(var i = 1; Math.pow(n, i) <= x; i++){\n        if(Math.pow(n, i)\
    \ == x){\n            return true;\n        }\n    }\n    return false;\n}\n",
  "    if(x==1 && n==1){\n        return true;\n    }else if(x==1 && n!=1){\n    \
    \    return false;\n    }else if(n==1){\n        return false;\n    }else if(x!=1\
    \ && n==1){\n        return false;\n    }else if(x==n){\n        return true;\n\
    \    }else if(x%n!=0){\n        return false;\n    }else if(x%n==0){\n       \
    \ return is_simple_power(x/n, n);\n    }\n}", "    let i = 1;\n    let pow = n;\n\
    \    while (pow <= x) {\n        if (pow === x) return true;\n        pow *= n;\n\
    \    }\n    return false;\n}", "  let power = 1;\n  while (power <= x) {\n   \
    \ if (power === x) {\n      return true;\n    }\n    power *= n;\n  }\n  return\
    \ false;\n}\n", "    const power = Math.log(x) / Math.log(n);\n    return (power\
    \ % 1) === 0;\n}", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}", "    let\
    \ pow = Math.log(x) / Math.log(n);\n    console.log(pow);\n    return pow % 1\
    \ === 0;\n}\n\nis_simple_power(1, 4);\nis_simple_power(2, 2);\nis_simple_power(8,\
    \ 2);\nis_simple_power(3, 2);\nis_simple_power(3, 1);\nis_simple_power(5, 3);",
  "    let power=n;\n    let count=1;\n    if(x===n){\n        return true;\n    }\n\
    \    if(x===1){\n        return true;\n    }\n    if(x===0){\n        return false;\n\
    \    }\n    if(x<n){\n        return false;\n    }\n    if(n===1){\n        return\
    \ false;\n    }\n    if(n===0){\n        return false;\n    }\n    if(x===n**2){\n\
    \        return true;\n    }\n    for(let i=0;i<x;i++){\n        power=power*n;\n\
    \        count++;\n        if(power===x){\n            return true;\n        }\n\
    \        if(power>x){\n            return false;\n        }\n    }\n}", "    return\
    \ Number.isInteger(Math.log(x)/Math.log(n));\n}", "    var result = Math.pow(n,Math.round(Math.log(x)/Math.log(n)));\n\
    \    return result == x;\n}\n", "    for(var i = 0; i <= x; i++){\n      if(n**i\
    \ == x){\n        return true;\n      }\n    }\n    return false;\n}", "\treturn\
    \ Number.isInteger(Math.log(x)/Math.log(n));\n}\n", "    if(x == n**Math.log(x)/Math.log(n)){\n\
    \      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  is_simple_power(1,\
    \ 4)\n  is_simple_power(2, 2)\n  is_simple_power(8, 2)\n  is_simple_power(3, 2)\n\
    \  is_simple_power(3, 1)\n  is_simple_power(5, 3)", "    for(let i = 2; i <= x\
    \ / 2; i++) {\n        if(i ** Math.round(Math.log(x) / Math.log(i)) === x) return\
    \ true;\n    }\n    return false;\n}", "    if(typeof(x) !== 'number' || typeof(n)\
    \ !== 'number'){\n        return false;\n    }\n    var y = x/n;\n    var z =\
    \ y/n;\n    var a = y%1;\n    var b = z%1;\n    if(a === 0 && b === 0){\n    \
    \    return true;\n    }\n    return false;\n}", "    if(n == 1){\n        return\
    \ false;\n    }\n    if(x == n){\n        return true;\n    }\n    if(x == 1){\n\
    \        return true;\n    }\n    for(let i = 1; i < x; i++){\n        if(Math.pow(n,\
    \ i) == x){\n            return true;\n        }\n    }\n    return false;\n}",
  "    let s = Math.pow(n, Math.log(x)/Math.log(n))\n    return s == x\n  }", "  \
    \  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    while(x % n == 0){\n\
    \        x /= n;\n    }\n    return x == 1;\n}", "    let tmp;\n    let i = 0;\n\
    \    while (x !== 1) {\n        tmp = x % n;\n        if (tmp !== 0) {\n     \
    \       return false;\n        }\n        x = x / n;\n        i++;\n    }\n  \
    \  return true;\n}", "    if(x === n){\n        return true;\n    }\n    else\
    \ if(n === 1){\n        return false;\n    }\n    else if(x % n === 0){\n    \
    \    return is_simple_power(x/n, n);\n    }\n    else{\n        return false;\n\
    \    }\n}\nis_simple_power(1, 4);\nis_simple_power(2, 2);\nis_simple_power(8,\
    \ 2);\nis_simple_power(3, 2);\nis_simple_power(3, 1);\nis_simple_power(5, 3);",
  "    return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n", "  return Number.isInteger(Math.log(x)/Math.log(n));\n\
    }", "    \n    let result = x % n;\n\n    if(result == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n\n}\n", "  return Number.isInteger(Math.log(x)/Math.log(n));\n\
    }", "   if(x===1) return true;\n   let k = 1;\n   while(k<x){\n      k*=n;\n \
    \  }\n   return k===x;\n}\n", "  \n}", "\tconsole.log(x, n);\n\tlet power = Math.pow(n,\
    \ Math.log(x)/Math.log(n));\n\tconsole.log(power);\n\treturn (power == x);\n}\n",
  "    for(let i = 0; i < x; i++){\n        if(Math.pow(n, i) === x){\n          \
    \  return true;\n        }\n    }\n    return false;\n}", "    let count = 0;\n\
    \    for(let i = 1; i <= x; i++) {\n        if(x % i === 0) {\n            count\
    \ += 1;\n        }\n    }\n    if(count > 2) {\n        return false;\n    }\n\
    \    if(n ** Math.sqrt(x) === x) {\n        return true;\n    }\n    return false;\n\
    }", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(Math.log(x)/Math.log(n)%1===0){\n\
    \        return true;\n    }\n    return false;\n}", "    if(x == n) return true;\n\
    \    return x % n == 0 ? is_simple_power(x/n, n) : false;\n}\n", "  let str =\
    \ x.toString();\n  let str2 = str.split(\"\");\n  let int = 1;\n  if(str2[0] ==\
    \ 1){\n    for(let i = 1; i < str2.length; i++){\n      if(str2[i] != 0){\n  \
    \      return false;\n      }\n      int += 1;\n    }\n    if(n ** int == x){\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "    return (Math.log(x)\
    \ / Math.log(n)) % 1 === 0;\n}\n", "    let power = n ** Math.round(Math.log(x)\
    \ / Math.log(n));\n    return x === power;\n}\n", "    if(x===1) return true;\n\
    \    for(let i=1;i<=x;i++){\n        if(Math.pow(n,i)===x) return true;\n    }\n\
    \    return false;\n}\n", "  let x_root = Math.sqrt(x);\n  return Math.floor(x_root)\
    \ === x_root && Math.log2(x) % Math.log2(n) === 0;\n}", "  let z = Math.sqrt(x);\n\
    \  if (x == 0){\n    return false;\n  }\n  if (x === 1){\n    return true;\n \
    \ }\n  if (z == Math.floor(z)){\n    return (Math.log(x) / Math.log(n)) % 1 ===\
    \ 0;\n  } else {\n    return false;\n  }\n}", "    // let m = Math.pow(n, x);\n\
    \    // console.log(m);\n    // return m;\n    return x && (!(x%n) && !(x/n%n));\n\
    }", "  let num;\n  for(let i = 1; i < x; i++){\n    num = Math.pow(n, i);\n  \
    \  if(num === x){\n      return true;\n    }\n  }\n  return false;\n}\n", "  \
    \  return Number.isInteger(Math.log(x)/Math.log(n));\n}\n", "\treturn (x && !(x\
    \ % n) && !(x % 1)) ? true : false;\n}\n", "    for(let i = 1; ; i++){\n     \
    \   if(Math.pow(n, i) === x){\n            return true;\n        } else if(Math.pow(n,\
    \ i) > x){\n            return false;\n        }\n    }\n}\n", "  var z = Math.log(x)\
    \ / Math.log(n);\n  return (z%1 === 0);\n}", "  var result = false;\n  while(n<=x){\n\
    \    if(Math.pow(n,2) === x){\n      result = true;\n    }\n    n++;\n  }\n  return\
    \ result;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}", "    if(Math.pow(n,\
    \ Math.round(Math.log(x)/Math.log(n))) === x) return true;\n    return false;\n\
    }", "    return Number.isInteger(Math.log(x)/Math.log(n));\n}\n", "  let i = 1;\n\
    \  let num = n;\n  while (Math.pow(num, i) < x) {\n    i++;\n  }\n  if (Math.pow(num,\
    \ i) === x) {\n    return true;\n  } else {\n    return false;\n  }\n}", "   \
    \ if(x === 1){\n        return true;\n    }\n    if(n > x){\n        return false;\n\
    \    }\n    let base = n;\n    while(n < x){\n        n = n * base;\n    }\n \
    \   if(n === x){\n        return true;\n    }\n    return false;\n}", "    var\
    \ root = Math.pow(x, 1/n);\n    return Number.isInteger(root);\n}", "    if(x\
    \ < n) return false;\n    if(n == 1) return true;\n    while(x % n == 0) {\n \
    \       x /= n;\n    }\n    return x == 1;\n}\n", "  return x === Math.pow(n,\
    \ Math.floor(Math.log(x) / Math.log(n)));\n}", "  return (Math.log(x) / Math.log(n))\
    \ % 1 === 0\n}", "    var int = Math.log(x) / Math.log(n);\n    return Math.pow(n,\
    \ int) == x;\n}", "    var result = 0;\n    for(var i = 0; result <= x; i++){\n\
    \        result = Math.pow(n, i);\n        if(result == x){\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "    let simplePower = false;\n\
    \    let int = 0;\n    while(n**int <= x){\n        if(n**int === x){\n      \
    \      simplePower = true;\n        }\n        int++;\n    }\n    return simplePower;\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "  return (x/n ==\
    \ Math.round(x/n))? true : false;\n}", "    //x es una potencia sencilla de n\
    \ si n^int=x\n    let i=2;\n    while(i>1){\n        if(n**i==x){\n          \
    \  return true;\n        }\n        else if(n**i>x){\n            return false;\n\
    \        }\n        i++;\n    }\n}", "    let is_simple_power = false;\n    for(let\
    \ i = 0; i < 100; i++){\n        if(x === n**i){\n            is_simple_power\
    \ = true;\n        }\n    }\n    return is_simple_power;\n}", "  var r;\n  r =\
    \ Math.pow(n, x);\n  if (r === x) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}", "    let exponent = Math.log(x) / Math.log(n);\n    return\
    \ exponent === Math.floor(exponent);\n}", "\tvar a = Math.log(x)/Math.log(n);\n\
    \tif(Number.isInteger(a)){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t\
    }\n}\n", "    //return Math.log(x) / Math.log(n) % 1 === 0;\n    return x ===\
    \ Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n}\n\nvar assert = require('assert');\n\
    \nif (!global.is_checking) {\n    assert.equal(is_simple_power(4, 2), true, \"\
    4 is simple power of 2\");\n    assert.equal(is_simple_power(7, 3), false, \"\
    7 is not simple power of 3\");\n    assert.equal(is_simple_power(8, 2), true,\
    \ \"8 is simple power of 2\");\n    assert.equal(is_simple_power(9, 2), false,\
    \ \"9 is not simple power of 2\");\n    assert.equal(is_simple_power(100, 10),\
    \ true, \"100 is simple power of 10\");\n    assert.equal(is_simple_power(22,\
    \ 2), false, \"22 is not simple power of 2\");\n    assert.equal(is_simple_power(24,\
    \ 2), true, \"24 is simple power of 2\");\n    assert.equal(is_simple_power(68,\
    \ 2), false, \"68 is not simple power of 2\");\n    assert.equal(is_simple_power(32,\
    \ 2), true, \"32 is simple power of 2\");\n    assert.equal(is_simple_power(64,\
    \ 2), true, \"64 is simple power of 2\");\n    assert.equal(is_simple_power(1,\
    \ 1), true, \"1 is simple power of 1\");\n    assert.equal(is_simple_power(1,\
    \ 2), true, \"1 is simple power of 2\");\n    assert.equal(is_simple_power(1,\
    \ 3), true, \"1 is simple power of 3\");\n    assert.equal(is_simple_power(1,\
    \ 4), true, \"1 is simple power of 4\");\n    assert.equal(is_simple_power(1,\
    \ 5), true, \"1 is simple power of 5\");\n    assert.equal(is_simple_power(2,\
    \ 1), true, \"2 is simple power of 1\");\n    assert.equal(is_simple_power(2,\
    \ 2), true,", "  let m = x;\n  let i = 0;\n  while (m % n === 0) {\n    m = m\
    \ / n;\n    i++;\n  }\n  if (m === 1) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}", "  // Good luck!\n  if(x===1){\n    return true;\n  }\n  if(x===n){\n\
    \    return true;\n  }\n  if(x>n){\n    if(x%n==0){\n      return is_simple_power(x/n,n);\n\
    \    }\n    else{\n      return false;\n    }\n  }\n  else{\n    return false;\n\
    \  }\n}", "    var i = 1;\n    while(n**i < x){\n        i++;\n    }\n    if(n**i\
    \ == x){\n        return true;\n    }\n    return false;\n}", "    if(x==1){\n\
    \        return true;\n    }\n    if(n==1){\n        return false;\n    }\n  \
    \  if(x%n == 0){\n        return is_simple_power(x/n, n);\n    }else{\n      \
    \  return false;\n    }\n}", "    var i=0, j=1;\n    while(i<=x){\n        if(i==x){\n\
    \            return true;\n        }\n        j++;\n        i=Math.pow(n, j);\n\
    \    }\n    return false;\n}", "    while(x>n){\n        x/=n;\n    }\n    return\
    \ x==n;\n}", "    var result = false;\n    for(var i = 1; i < x; i++){\n     \
    \   if(Math.pow(n, i) === x){\n            result = true;\n        }\n    }\n\
    \    return result;\n}\n", "    //TODO: Implement me\n}\n", "    if(Math.log(x)/Math.log(n)\
    \ % 1 == 0){\n        return true;\n    }\n    return false;\n}\n", "    let x1\
    \ = x.toString();\n    let n1 = n.toString();\n    let str = '0'\n    for(let\
    \ i = 1; i <= x1.length; i++){\n        str = str + n1\n    }\n    if(str ===\
    \ x1){\n        return true\n    }else{\n        return false\n    }\n}", "  \
    \  if(n == 1 && x == 1){\n        return true;\n    }\n    var pow = 1;\n    for(var\
    \ i = 1; i < x; i++){\n        pow *= n;\n        if(pow == x){\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "\tlet power = Math.log(x) /\
    \ Math.log(n);\n\treturn Math.floor(power) === power ? true : false;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}", "    if(x===1 || x===n){\n\
    \        return true;\n    }else if(x<n){\n        return false;\n    }else if(x%n!==0){\n\
    \        return false;\n    }else{\n        return is_simple_power(x/n, n);\n\
    \    }\n}", "    if(Math.log(x)/Math.log(n) % 1 === 0){\n        return true;\n\
    \    }\n    return false;\n}\n", "    return (Math.log(x) / Math.log(n)) % 1 ===\
    \ 0;\n}\n", "    var exponent = 0;\n    for(var i = 0; i < 1000; i++){\n     \
    \   if(Math.pow(n, i) === x){\n            exponent = i;\n            break;\n\
    \        }\n    }\n    var result = exponent;\n    if(result === 0){\n       \
    \ return false;\n    }\n    if(result < 0){\n        return false;\n    }\n  \
    \  if(result % 1 !== 0){\n        return false;\n    }\n    return true;\n}\n",
  "    if(x===1 && n===1){\n        return true;\n    }\n    if(x<=0 || n<=0){\n \
    \       return false;\n    }\n    let num = n;\n    while(num < x){\n        num\
    \ *= n;\n    }\n    return num === x;\n}", "  var power = 0;\n  var test = n;\n\
    \  while (test < x) {\n    test *= n;\n    power++;\n  }\n  if (test === x) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "  let i = 0;\n  if\
    \ (x === 1) {\n    return true;\n  }\n  while (x > n) {\n    x = x / n;\n    i++;\n\
    \  }\n  if (x === n) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }", "    var result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n\
    }\nis_simple_power(3, 2);", "    var exp = 0,\n        pow = 0;\n    while(pow\
    \ < x){\n        pow = Math.pow(n, exp);\n        exp++;\n    }\n    return pow\
    \ === x;\n}\n", "    if(Math.floor(Math.log(x)/Math.log(n)) == Math.log(x)/Math.log(n)){\n\
    \        return true;\n    }\n    return false;\n}", "  return Math.log(x) / Math.log(n)\
    \ % 1 === 0\n}\n", "    var result = false;\n    for(var i = 0; i < n; i++){\n\
    \        if(Math.pow(n, i) === x){\n            result = true;\n        }\n  \
    \  }\n    return result;\n}", "  return Math.pow(n, Math.floor(Math.log(x)/Math.log(n)))\
    \ === x\n}\n", "    const power = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n\
    \    return power === x;\n}", "    return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }", "    var result = Math.log(x) / Math.log(n);\n    if (result == Math.round(result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \   if(x === 1){\n        return true;\n    }\n    var y = n;\n    while(y < x){\n\
    \        y *= n;\n    }\n    return x === y;\n}\n", "  return x === Math.pow(n,\
    \ Math.round(Math.log(x) / Math.log(n)));\n}\n", "  var power = Math.log(x) /\
    \ Math.log(n);\n  return Number.isInteger(power);\n}\n", "  let result = false;\n\
    \  for(let i = 0; i <= x; i++){\n    if(Math.pow(n, i) === x){\n      result =\
    \ true;\n    }\n  }\n  return result;\n}", "    for(let i = 0; i <= x; i++){\n\
    \        if(n**i === x){\n            return true;\n        }\n    }\n    return\
    \ false;\n}", "    var check = n ** 0;\n    while (n ** check <= x){\n       \
    \ if (x === n ** check){\n            return true;\n        }\n        check++;\n\
    \    }\n    return false;\n}\n", "    return Math.pow(n,Math.floor(Math.log(x)/Math.log(n)))\
    \ === x;\n}\n", "    // your code here\n}", "    var k = Math.log(x) / Math.log(n);\n\
    \    return Math.pow(n, k) == x;\n}", "  \n  return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}", "    var p = 1;\n    while (p <= x) {\n        if (p == x) return\
    \ true;\n        p *= n;\n    }\n    return false;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.pow(n, Math.log(x)/Math.log(n))\
    \ == x;\n}", "    return Math.log(x) / Math.log(n) % 1 === 0\n}", "  var x_log\
    \ = Math.log(x)/Math.log(n);\n  return x_log == Math.floor(x_log);\n}\n", "  \
    \  return !(Math.log(x) / Math.log(n) % 1)\n}", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    var i = 0;\n    var power = 1;\n    while (power <= x)\
    \ {\n        power = Math.pow(n, i);\n        if (power == x) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}", "    let m = Math.pow(n,\
    \ Math.log(x)/Math.log(n));\n    return (m===x);\n}\n", "    for(let i = 1; i\
    \ <= x; i++){\n        if(Math.pow(n, i) === x){\n            return true;\n \
    \       }\n    }\n    return false;\n}", "    if(x===1) return true;\n    let\
    \ a = n;\n    while(true){\n        if(x===a) return true;\n        if(a>x) return\
    \ false;\n        a = a*n;\n    }\n}", "    if(!Number.isInteger(x)) return false;\n\
    \    let a = Math.log(x)/Math.log(n);\n    return Math.pow(n, Math.floor(a)) ===\
    \ x;\n}\n", "    return x == n**Math.round(Math.log(x)/Math.log(n));\n}\n\nmodule.exports\
    \ = {\n    is_simple_power\n}", "\treturn Math.log(x) / Math.log(n) % 1 === 0;\n\
    }", "    var p = Math.round(Math.log(x)/Math.log(n));\n    return Math.pow(n,\
    \ p) === x;\n}", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(Math.log(x)/Math.log(n)\
    \ % 1 === 0) return true;\n    return false;\n}\n", "  for (var i = 0; i < x;\
    \ i++) {\n    if (n**i === x) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "  return (Math.log(x) / Math.log(n)) % 1 === 0\n}", "  for (var i = 0;\
    \ i < x; i++) {\n    if (Math.pow(n, i) === x) {\n      return true;\n    }\n\
    \  }\n  return false;\n}", "    if(x==1) return true;\n    for(let i=2;i<=n;i++){\n\
    \        for(let j=2;j<=n;j++){\n            if(Math.pow(i,j)==x) return true;\n\
    \        }\n    }\n    return false;\n}", "  if(n<=0){\n    return false;\n  }\n\
    \  return (Math.log(x)/Math.log(n) % 1 == 0) ? true : false;\n}\n", "    if(x\
    \ === 1) return true;\n    for(let i = 1; i <= x; i++){\n        let result =\
    \ Math.pow(n, i);\n        if(result === x) return true;\n        if(result >\
    \ x) return false;\n    }\n}\n", "    for(let i = 0; i < x; i++){\n        if(Math.pow(n,\
    \ i) === x){\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "    //your code here\n    return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}", "    var int = Math.log(x)\
    \ / Math.log(n);\n    return int - (int | 0) === 0;\n}", "    \n    if(n**Math.round(Math.log(x)/Math.log(n))\
    \ == x) return true;\n    else return false;\n}", "\tif(Math.pow(n, Math.log(x)/Math.log(n))\
    \ === x) return true;\n\treturn false;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
