name: HumanEval_76_is_simple_power
language: js
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
  \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
  \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
  \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
  \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
  \ 12),true);\n}\n\ntest();"
completions: ["  if(x===1){\n    return true;\n  }\n  if(x < n){\n    return false;\n\
    \  }\n  if(x % n !== 0){\n    return false;\n  }\n  return is_simple_power(x/n,\
    \ n);\n}\n", "    let result = Math.pow(n, Math.round(Math.log(x)/Math.log(n)));\n\
    \    if(result === x){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}", "    return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n", "    //your code here\n}", "    var y = x ** (1/n);\n    if(x === 1){\n\
    \        return true;\n    }\n    else if(n ** y === x){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nmodule.exports = {\n   \
    \ is_simple_power\n}", "  var result = Math.log(x) / Math.log(n);\n  if (Number.isInteger(result)){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "    // your code\
    \ here\n}", "    var power = Math.pow(n, Math.log(x)/Math.log(n));\n    return\
    \ power === x ? true : false;\n}", "    return x == Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "  return (x % n == 0 && n**Math.floor(Math.log(x)/Math.log(n))==x)\
    \ ? true : false;\n}", "    if( x == 1){\n        return true;\n    }\n    if(x\
    \ % n != 0){\n        return false;\n    }\n    return is_simple_power(x/n, n);\n\
    }", "    for(let i = 1; i < x; i++){\n        if(x === Math.pow(n, i)){\n    \
    \        return true;\n        }\n    }\n    return false;\n}", "  if(n**Math.log(x)/Math.log(n)==x){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}", "    if(n<=0){\n\
    \        return false;\n    }\n    if(Math.log(x)/Math.log(n)%1==0){\n       \
    \ return true;\n    }else{\n        return false;\n    }\n}\n", "  let i = 0;\n\
    \  if (x == 1) return true;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n,\
    \ i) == x) return true;\n    i++;\n  }\n  return false;\n}", "  let result = Math.log(x)\
    \ / Math.log(n);\n  return Number.isInteger(result);\n}", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "  var result = Math.log(x) / Math.log(n);\n\
    \  return (result % 1 == 0) ? true : false;\n}", "    let result = false;\n  \
    \  for(let i = 0; i <= x; i++){\n        if(n**i === x){\n            result =\
    \ true;\n        }\n    }\n    return result;\n}", "    let result = Math.log(x)\
    \ / Math.log(n);\n    if (Number.isInteger(result)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
