name: HumanEval_5_intersperse
language: js
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5,\
  \ 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2],\
  \ 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n  \
    \  result.push(numbers[i]);\n    if(i !== numbers.length - 1){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}\n", "  // YOUR CODE HERE\n  var result = [];\n\
    \  if (numbers.length == 0) {\n    return [];\n  }\n  else {\n    result.push(numbers[0]);\n\
    \    for (var i = 1; i < numbers.length; i++) {\n      result.push(delimeter);\n\
    \      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "\tvar result\
    \ = [];\n\tfor(i=0; i<numbers.length; i++){\n\t\tresult.push(numbers[i]);\n\t\t\
    if(i<numbers.length-1){\n\t\t\tresult.push(delimeter);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    // your answer here\n}\n", "  if (numbers.length === 0) {\n    return\
    \ numbers;\n  }\n  else {\n    let result = [numbers[0]];\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n      result.push(delimeter);\n      result.push(numbers[i]);\n\
    \    }\n    return result;\n  }\n}\n", "  var result = [];\n  for(var i = 0; i\
    \ < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i != numbers.length\
    \ - 1){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}", "  var\
    \ result = [];\n  var i = 0;\n  var len = numbers.length;\n  if (len === 0) {\n\
    \    return result;\n  } else {\n    for (i = 0; i < len - 1; i++) {\n      result.push(numbers[i]);\n\
    \      result.push(delimeter);\n    }\n    result.push(numbers[len - 1]);\n  \
    \  return result;\n  }\n}\n", "    let ret = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        ret.push(numbers[i]);\n        if(i < numbers.length - 1){\n\
    \            ret.push(delimeter);\n        }\n    }\n    return ret;\n}\n", "\t\
    var interspersed = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar num\
    \ = numbers[i];\n\t\tinterspersed.push(num);\n\t\tif(i < numbers.length - 1){\n\
    \t\t\tinterspersed.push(delimeter);\n\t\t}\n\t}\n\treturn interspersed;\n}\n",
  "\tvar newArr = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tnewArr.push(numbers[i]);\n\
    \t\tif(i < numbers.length - 1){\n\t\t\tnewArr.push(delimeter);\n\t\t}\n\t}\n\t\
    return newArr;\n}\n", "\t\n\tvar output = numbers.slice(0,1);\n\tif(output.length==0){\n\
    \t\treturn output;\n\t}\n\telse{\n\t\treturn output.concat(delimeter,intersperse(numbers.slice(1),delimeter));\n\
    \t}\n\t\n}\n", "\tif(numbers.length==0)\n\t\treturn numbers;\n\tlet ret=[numbers[0]];\n\
    \tfor(let i=1;i<numbers.length;i++)\n\t\tret=ret.concat([delimeter,numbers[i]]);\n\
    \treturn ret;\n}\n", "    return [];\n}\n\n", "  //...YOUR CODE HERE\n  if (numbers.length\
    \ == 0) {\n    return [];\n  } else {\n    var result = [];\n    for (var i =\
    \ 0; i < numbers.length; i++) {\n      result.push(numbers[i]);\n      if (i !=\
    \ numbers.length - 1) {\n        result.push(delimeter);\n      }\n    }\n   \
    \ return result;\n  }\n}\n", "  if(numbers.length == 0){\n    return [];\n  }else{\n\
    \    return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).join().split(',').concat(delimeter).join().split(',').slice(0,\
    \ -1);\n  }\n}", "    // TODO: complete this function\n    var new_arr = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        if (i == numbers.length\
    \ - 1) {\n            new_arr.push(numbers[i]);\n        } else {\n          \
    \  new_arr.push(numbers[i]);\n            new_arr.push(delimeter);\n        }\n\
    \    }\n    return new_arr;\n}\n", "\tlet result = [];\n\tfor(let i = 0; i < numbers.length\
    \ - 1; i++){\n\t\tresult.push(numbers[i]);\n\t\tresult.push(delimeter);\n\t}\n\
    \tresult.push(numbers[numbers.length - 1]);\n\treturn result;\n}\n", "\treturn\
    \ numbers.slice(1).reduce(function(arr, e, i){\n\t\treturn arr.concat(delimeter,\
    \ e);\n\t}, [numbers[0]]);\n}\n", "  return is_null(numbers) ? [] : pair(head(numbers),\
    \ map( x => pair(delimeter, x), intersperse(tail(numbers), delimeter)));\n}\n",
  "  var interspersedArr = [];\n  if(numbers.length <= 1){\n    return numbers;\n\
    \  }\n  else{\n    for(var i = 0; i < numbers.length; i++){\n      interspersedArr.push(numbers[i]);\n\
    \      if(i !== numbers.length - 1){\n        interspersedArr.push(delimeter);\n\
    \      }\n    }\n    return interspersedArr;\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
