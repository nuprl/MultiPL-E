name: HumanEval_145_order_by_points
language: js
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11,\
  \ 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423,\
  \ 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  const sums = nums.map(sum_of_digits);\n  const sorted_idx = argsort(sums);\n\
    \  const result = [];\n  for (let i = 0; i < nums.length; i++){\n    result.push(nums[sorted_idx[i]]);\n\
    \  }\n  return result;\n}", "    return nums.sort(function(a, b){\n        var\
    \ aSum = (a.toString().split('').reduce(function(a, b){return a + parseInt(b,\
    \ 10)}, 0)),\n            bSum = (b.toString().split('').reduce(function(a, b){return\
    \ a + parseInt(b, 10)}, 0));\n        if (aSum < bSum) return -1;\n        if\
    \ (aSum > bSum) return 1;\n        return 0;\n    });\n}\n", "    return nums.sort(function(a,\
    \ b){\n        return (sum_of_digits(a) < sum_of_digits(b)) ? -1 : 1;\n    });\n\
    }\n", "    var sums = [];\n    var results = [];\n    var temp = 0;\n    var hold_index\
    \ = 0;\n    var hold_index2 = 0;\n    var result = 0;\n    if(nums.length > 0){\n\
    \        for(var i = 0; i < nums.length; i++){\n            temp = nums[i];\n\
    \            result = 0;\n            for(var j = 0; j < temp.toString().length;\
    \ j++){\n                result += parseInt(temp.toString()[j]);\n           \
    \ }\n            sums.push(result);\n        }\n        for(var l = 0; l < sums.length;\
    \ l++){\n            hold_index = sums.indexOf(Math.min.apply(null, sums));\n\
    \            results.push(nums[hold_index]);\n            hold_index2 = sums.indexOf(Math.min.apply(null,\
    \ sums));\n            sums.splice(hold_index2, 1);\n            nums.splice(hold_index,\
    \ 1);\n        }\n    }\n    return results;\n}", "    if(nums.length === 0){\n\
    \        return [];\n    }else{\n        return nums.map(function(num, index){\n\
    \            return [num, index];\n        }).sort(function(pair1, pair2){\n \
    \           var sum1 = pair1[0].toString().split('').reduce(function(sum, digit){\n\
    \                return sum + parseInt(digit);\n            }, 0);\n         \
    \   var sum2 = pair2[0].toString().split('').reduce(function(sum, digit){\n  \
    \              return sum + parseInt(digit);\n            }, 0);\n           \
    \ if(sum1 > sum2){\n                return 1;\n            }else if(sum1 < sum2){\n\
    \                return -1;\n            }else{\n                return pair1[1]\
    \ - pair2[1];\n            }\n        }).map(function(pair){\n            return\
    \ pair[0];\n        });\n    }\n}\nvar output = order_by_points([1, 11, -1, -11,\
    \ -12]);", "  return nums.sort(function(x, y){\n    let xSum = 0, ySum = 0;\n\
    \    for(let i = 0; i < x.toString().length; i++){\n      xSum += parseInt(x.toString()[i]);\n\
    \    }\n    for(let i = 0; i < y.toString().length; i++){\n      ySum += parseInt(y.toString()[i]);\n\
    \    }\n    if(xSum > ySum){\n      return 1;\n    }\n    else if(xSum < ySum){\n\
    \      return -1;\n    }\n    else{\n      return 0;\n    }\n  });\n}", "    var\
    \ results = [];\n    var sums = [];\n    for(var i = 0; i < nums.length; i++){\n\
    \        var sum = 0;\n        var num = String(nums[i]);\n        for(var j =\
    \ 0; j < num.length; j++){\n            sum += Number(num[j]);\n        }\n  \
    \      sums.push(sum);\n    }\n    for(var i = 0; i < sums.length; i++){\n   \
    \     var index = sums.indexOf(Math.min.apply(null, sums));\n        results.push(nums[index]);\n\
    \        sums.splice(index, 1);\n        nums.splice(index, 1);\n    }\n    return\
    \ results;\n}\n", "\treturn nums.sort(function(a, b){\n\t\tvar aSum = a.toString().split('').reduce(function(sum,\
    \ current){\n\t\t\treturn sum + parseInt(current);\n\t\t}, 0);\n\t\tvar bSum =\
    \ b.toString().split('').reduce(function(sum, current){\n\t\t\treturn sum + parseInt(current);\n\
    \t\t}, 0);\n\t\tif(aSum === bSum){\n\t\t\treturn a - b;\n\t\t}\n\t\treturn aSum\
    \ - bSum;\n\t});\n}\n", "  var res = [];\n  var idx = {};\n  var nums2 = [];\n\
    \  for(var i = 0; i < nums.length; i++){\n    idx[i] = nums[i];\n    nums2.push(nums[i]);\n\
    \  }\n  nums2.sort(function(a, b){\n    return getSumOfDigits(a) - getSumOfDigits(b);\n\
    \  });\n  for(var j = 0; j < nums2.length; j++){\n    for(var k in idx){\n   \
    \   if(idx[k] === nums2[j]){\n        res.push(idx[k]);\n        delete idx[k];\n\
    \        break;\n      }\n    }\n  }\n  return res;\n}\n", "    let arr = nums.map(function(el,i){\n\
    \        return{index: i, value: el};\n    });\n    // NOTE: the comparison needs\
    \ to take into account\n    // the absolute value, otherwise the array would be\n\
    \    // sorted in negative order\n    arr.sort(function(a,b){\n        return\
    \ Math.abs(a.value) - Math.abs(b.value);\n    });\n    arr.sort(function(a,b){\n\
    \        return a.index - b.index;\n    });\n    return arr.map(function(el){\n\
    \        return el.value;\n    });\n}", "   return nums.sort(function(a, b){\n\
    \      var a = a.toString().split('').reduce(function(a, b){\n          return\
    \ parseInt(a) + parseInt(b);\n      }, 0);\n      var b = b.toString().split('').reduce(function(a,\
    \ b){\n          return parseInt(a) + parseInt(b);\n      }, 0);\n      return\
    \ a - b;\n   });\n}\n\n", "    var sums = []\n    for (var i = 0; i < nums.length;\
    \ i++){\n        sums.push(nums[i].toString().split('').reduce(\n            function(x,\
    \ y){return parseInt(x) + parseInt(y)}\n        ))\n    }\n    var index = 0\n\
    \    var temp = 0\n    for (var i = 0; i < sums.length; i++){\n        for (var\
    \ j = i; j < sums.length; j++){\n            if (sums[j] < sums[i]){\n       \
    \         temp = sums[i]\n                sums[i] = sums[j]\n                sums[j]\
    \ = temp\n                temp = nums[i]\n                nums[i] = nums[j]\n\
    \                nums[j] = temp\n            }\n        }\n    }\n    return nums\n\
    }\n\n", "  // FIXME\n  let sums = [];\n  for (let num of nums){\n    sums.push(sum_digits(num));\n\
    \  }\n  let toReturn = [];\n  for (let i = 0; i < sums.length; i++){\n    for\
    \ (let j = 0; j < sums.length; j++){\n      if (sums[i] < sums[j]){\n        let\
    \ temp = sums[i];\n        sums[i] = sums[j];\n        sums[j] = temp;\n     \
    \   temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n   \
    \   }\n    }\n  }\n  return nums;\n}\n", "    return nums.sort(function(a, b){\n\
    \        if(sum_digits(a) > sum_digits(b)){\n            return 1;\n        }\n\
    \        else if(sum_digits(a) < sum_digits(b)){\n            return -1;\n   \
    \     }\n        else{\n            return 0;\n        }\n    });\n}", "    nums.sort(function(a,\
    \ b){\n        return sum_of_digits(a) - sum_of_digits(b);\n    });\n    return\
    \ nums;\n}\n", "    //to return the sum of each number\n    return nums.map(function(num){\n\
    \        num = Math.abs(num);\n        var sum = 0;\n        while(num > 0){\n\
    \            sum += num % 10;\n            num = Math.floor(num / 10);\n     \
    \   }\n        return sum;\n    })\n    //to sort the numbers according to the\
    \ sum of their digits\n    .sort(function(a, b){\n        if(a > b){\n       \
    \     return 1;\n        }\n        else if(a < b){\n            return -1;\n\
    \        }\n        else{\n            return 0;\n        }\n    })\n    //to\
    \ order them based on their index in original array\n    .map(function(sum, index){\n\
    \        return nums[nums.indexOf(sum)];\n    });\n}", "    var sum = [0];\n \
    \   var number = [0];\n    for(var i = 0; i < nums.length; i++){\n        sum[i]\
    \ = 0;\n        number[i] = nums[i];\n        while(nums[i] != 0){\n         \
    \   sum[i] += nums[i] % 10;\n            nums[i] = Math.floor(nums[i] / 10);\n\
    \        }\n    }\n    for(var i = 0; i < sum.length; i++){\n        for(var j\
    \ = i; j < sum.length; j++){\n            if(sum[i] > sum[j]){\n             \
    \   var temp = sum[i];\n                sum[i] = sum[j];\n                sum[j]\
    \ = temp;\n                temp = number[i];\n                number[i] = number[j];\n\
    \                number[j] = temp;\n            }\n        }\n    }\n    return\
    \ number;\n}", "    let newArr = [];\n    nums.forEach(function(x){\n        let\
    \ str = x.toString();\n        let sum = 0;\n        for(let i = 0; i < str.length;\
    \ i++){\n            sum += parseInt(str[i]);\n        }\n        newArr.push(sum);\n\
    \    });\n    newArr.sort();\n    let result = [];\n    newArr.forEach(function(x){\n\
    \        for(let i = 0; i < nums.length; i++){\n            let str = nums[i].toString();\n\
    \            let sum = 0;\n            for(let j = 0; j < str.length; j++){\n\
    \                sum += parseInt(str[j]);\n            }\n            if(sum ===\
    \ x){\n                result.push(nums[i]);\n                nums.splice(i, 1);\n\
    \                break;\n            }\n        }\n    });\n    return result;\n\
    }", "    let sums = [];\n    for(let i=0; i<nums.length; i++){\n        sums.push(get_sum(nums[i]));\n\
    \    }\n    for(let i=0; i<sums.length; i++){\n        for(let j=i+1; j<sums.length;\
    \ j++){\n            if(sums[i] > sums[j]){\n                let tmp = sums[i];\n\
    \                sums[i] = sums[j];\n                sums[j] = tmp;\n        \
    \        tmp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = tmp;\n            }\n        }\n    }\n    return nums;\n}\n", "\n}\n", "\t\
    return nums.sort(function(a, b){\n\t\tif(sumDigits(a) < sumDigits(b)){\n\t\t\t\
    return -1;\n\t\t}\n\t\tif(sumDigits(a) > sumDigits(b)){\n\t\t\treturn 1;\n\t\t\
    }\n\t\treturn 0;\n\t});\n}\n\nvar nums = [1, 11, -1, -11, -12];", "    if(!nums.length)\
    \ return [];\n    return nums.sort((a, b) => sumDigits(a) - sumDigits(b) || a\
    \ - b);\n}", "    return nums.sort(function(a, b){\n       return digits_sum(a)\
    \ - digits_sum(b);\n    });\n}", "    let newArr = [];\n    for(let i = 0; i <\
    \ nums.length; i++){\n        newArr.push(nums[i].toString().split(''));\n   \
    \ }\n    for(let i = 0; i < newArr.length; i++){\n        let num = 0;\n     \
    \   for(let j = 0; j < newArr[i].length; j++){\n            num += Number(newArr[i][j]);\n\
    \        }\n        newArr[i] = num;\n    }\n    let index = [];\n    for(let\
    \ i = 0; i < newArr.length; i++){\n        index.push(i);\n    }\n    let temp\
    \ = null;\n    for(let i = 0; i < newArr.length; i++){\n        for(let j = i\
    \ + 1; j < newArr.length; j++){\n            if(newArr[i] > newArr[j]){\n    \
    \            temp = newArr[i];\n                newArr[i] = newArr[j];\n     \
    \           newArr[j] = temp;\n                temp = index[i];\n            \
    \    index[i] = index[j];\n                index[j] = temp;\n            }\n \
    \       }\n    }\n    temp = null;\n    for(let i = 0; i < index.length; i++){\n\
    \        temp = nums[i];\n        nums[i] = nums[index[i]];\n        nums[index[i]]\
    \ = temp;\n    }\n    return nums;\n}\n", "  var result = []\n  var sum_list =\
    \ []\n  for(var i = 0; i < nums.length; i++){\n    sum_list.push(sum_digits(nums[i]))\n\
    \  }\n  for(var i = 0; i < nums.length; i++){\n    result.push(nums[sum_list.indexOf(min(sum_list))])\n\
    \    sum_list[sum_list.indexOf(min(sum_list))] = 101\n  }\n  return result\n}",
  "    let sums = [];\n    for(let num of nums){\n        sums.push(num.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b)));\n    }\n    let sorted = [];\n    while(sums.length\
    \ > 0){\n        let min = Math.min(...sums);\n        sorted.push(nums[sums.indexOf(min)]);\n\
    \        sums.splice(sums.indexOf(min), 1);\n        nums.splice(sums.indexOf(min),\
    \ 1);\n    }\n    return sorted;\n}\n", "  // your code goes here!\n  var sums\
    \ = nums.map(function(e){\n    return e.toString().split('').reduce(function(acc,\
    \ curr){\n      return parseInt(acc) + parseInt(curr);\n    }, 0);\n  });\n  var\
    \ result = [];\n  sums.forEach(function(e, i){\n    result.push({'sums': e, 'nums':\
    \ nums[i]});\n  });\n  result.sort(function(a, b){\n    if(a.sums > b.sums){\n\
    \      return 1;\n    }\n    if(a.sums < b.sums){\n      return -1;\n    }\n \
    \   return a.nums - b.nums;\n  });\n  return result.map(function(e){\n    return\
    \ e.nums;\n  });\n}", "    if(nums === undefined || nums.length === 0){\n    \
    \    return [];\n    }\n\n    let map = new Map();\n    let sorted = [];\n\n \
    \   for(let i = 0; i < nums.length; i++){\n        let key = getSumOfDigits(nums[i]);\n\
    \        if(map.has(key)){\n            map.get(key).push(nums[i]);\n        }else{\n\
    \            map.set(key, [nums[i]]);\n        }\n    }\n\n    let keys = Array.from(map.keys());\n\
    \    keys.sort(function(a, b){\n        return a - b;\n    });\n\n    for(let\
    \ i = 0; i < keys.length; i++){\n        for(let j = 0; j < map.get(keys[i]).length;\
    \ j++){\n            sorted.push(map.get(keys[i])[j]);\n        }\n    }\n\n \
    \   return sorted;\n}\n", "    // your code here\n\n    function getSumDigit(num){\n\
    \        var sum = 0;\n        var numStr = num.toString();\n        for(var i\
    \ = 0; i < numStr.length; i++){\n            sum += parseInt(numStr[i]);\n   \
    \     }\n        return sum;\n    }\n\n    var tempArr = [];\n    for(var i =\
    \ 0; i < nums.length; i++){\n        tempArr.push({\n            idx: i,\n   \
    \         sumDigit: getSumDigit(nums[i]),\n            num: nums[i]\n        });\n\
    \    }\n\n    tempArr.sort(function(a, b){\n        return a.sumDigit - b.sumDigit;\n\
    \    });\n\n    var result = [];\n    for(var i = 0; i < tempArr.length; i++){\n\
    \        result.push(tempArr[i].num);\n    }\n\n    return result;\n}\n", "\t\
    let arr = [];\n\tlet res = [];\n\tlet obj = {};\n\tfor(let i = 0; i < nums.length;\
    \ i++){\n\t\tarr.push(nums[i].toString().split('').reduce((a, b) => {\n\t\t\t\
    return +a + +b;\n\t\t}));\n\t}\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(!obj[arr[i]]){\n\
    \t\t\tobj[arr[i]] = [];\n\t\t}\n\t\tobj[arr[i]].push(nums[i]);\n\t}\n\tarr.sort((a,\
    \ b) => {\n\t\treturn a - b;\n\t});\n\tfor(let i = 0; i < arr.length; i++){\n\t\
    \tfor(let j = 0; j < obj[arr[i]].length; j++){\n\t\t\tres.push(obj[arr[i]][j]);\n\
    \t\t}\n\t}\n\treturn res;\n}", "    return nums.sort(function(a, b){\n       \
    \ return sum_of_digits(a) - sum_of_digits(b);\n    });\n}\n", "  if(nums.length\
    \ === 0){\n    return nums;\n  }\n  let res = [];\n  let dict = {};\n  for(let\
    \ i = 0; i < nums.length; i++){\n    let num = Math.abs(nums[i]);\n    let sum\
    \ = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if(dict[sum] === undefined){\n      dict[sum] = [nums[i]];\n\
    \    }else{\n      dict[sum].push(nums[i]);\n    }\n  }\n  for(let key in dict){\n\
    \    for(let val of dict[key]){\n      res.push(val);\n    }\n  }\n  return res;\n\
    }", "  nums.sort(function(a, b){\n    return a + b;\n  });\n  return nums;\n}\n",
  "    function sum_digits(x){\n        // sum of digits of x\n        var digits\
    \ = [];\n        x = Math.abs(x);\n        while (x > 0){\n            digits.push(x\
    \ % 10);\n            x = Math.floor(x / 10);\n        }\n        return digits.reduce(function(a,\
    \ b){\n            return a + b;\n        });\n    }\n    function comp(x, y){\n\
    \        // compare function used in sort\n        var sd_x = sum_digits(x);\n\
    \        var sd_y = sum_digits(y);\n        if (sd_x > sd_y){\n            return\
    \ 1;\n        } else if (sd_x < sd_y){\n            return -1;\n        } else\
    \ {\n            return 0;\n        }\n    }\n    return nums.sort(comp);\n}",
  "    var sortable = [];\n    var i;\n    for (i = 0; i < nums.length; i++){\n  \
    \      sortable.push([nums[i], sum_of_digits(nums[i])]);\n    }\n    sortable.sort(function(a,\
    \ b) {\n        return a[1] - b[1];\n    });\n    for (i = 0; i < sortable.length;\
    \ i++){\n        nums[i] = sortable[i][0];\n    }\n    return nums;\n}\n", " \
    \   return nums.map(function(elem, i){\n        return {\n            num: elem,\n\
    \            order: i,\n            sum: elem.toString().split('').reduce(function(prev,\
    \ curr){\n                return prev + parseInt(curr);\n            }, 0)\n \
    \       };\n    }).sort(function(a, b){\n        if(a.sum < b.sum)\n         \
    \   return -1;\n        if(a.sum > b.sum)\n            return 1;\n        if(a.sum\
    \ === b.sum)\n            return a.order - b.order;\n    }).map(function(elem){\n\
    \        return elem.num;\n    });\n}", "    if(nums.length === 0){\n        return\
    \ [];\n    }\n    if(nums.length === 1){\n        return nums;\n    }\n    for(let\
    \ i = 0; i < nums.length; i++){\n        let y = nums[i].toString().split('');\n\
    \        y = y.map(Number);\n        let sum = 0;\n        for(let j = 0; j <\
    \ y.length; j++){\n            sum += y[j];\n        }\n        y = sum;\n   \
    \     nums[i] = y;\n    }\n    let x = nums.map((v, i) => [v, i]).sort(([a], [b])\
    \ => a - b).map(([, i]) => nums[i]);\n    return x;\n}\n", "  return nums.sort(function(a,\
    \ b){\n    if(a === b){\n      return 0;\n    }\n    if(getSum(a) < getSum(b)){\n\
    \      return -1;\n    }\n    return 1;\n  });\n}\n", "  // initialize an array\n\
    \  // loop through each item\n  // find the sum of each number and push to array\n\
    \  // sort array\n  // loop through array\n  // loop through each num\n  // if\
    \ the sum of nums[i] is equal to the index j in sorted array\n  // push nums[i]\
    \ to a final result array\n\n  let sum = [];\n  let result = [];\n\n  for(let\
    \ i = 0; i < nums.length; i++){\n    sum.push(sumOfDigits(nums[i]));\n  }\n\n\
    \  sum.sort((a, b) => a - b);\n\n  for(let j = 0; j < sum.length; j++){\n    for(let\
    \ k = 0; k < nums.length; k++){\n      if(sumOfDigits(nums[k]) === sum[j]){\n\
    \        result.push(nums[k]);\n      }\n    }\n  }\n\n  return result;\n}\n",
  "\tvar new_array = [];\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar num = nums[i].toString();\n\
    \t\tvar sum = 0;\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tsum += parseInt(num[j]);\n\
    \t\t}\n\t\tif(sum < 0){\n\t\t\tsum = sum * -1;\n\t\t}\n\t\tvar obj = {};\n\t\t\
    obj.sum = sum;\n\t\tobj.num = nums[i];\n\t\tnew_array.push(obj);\n\t}\n\tvar sorted_array\
    \ = new_array.sort(function(a, b){\n\t\tif(a.sum > b.sum){\n\t\t\treturn 1;\n\t\
    \t} else if(a.sum < b.sum){\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\
    \t\t}\n\t});\n\tvar final_array = [];\n\tfor(var i = 0; i < sorted_array.length;\
    \ i++){\n\t\tfinal_array.push(sorted_array[i].num);\n\t}\n\treturn final_array;\n\
    }\n", "    var sum = [];\n    var ordered = [];\n    var numsum = 0;\n    for(var\
    \ i = 0; i < nums.length; i++){\n        numsum = 0;\n        for(var j = 0; j\
    \ < nums[i].toString().length; j++){\n            numsum += +nums[i].toString()[j];\n\
    \        }\n        sum.push([nums[i], numsum]);\n    }\n    sum.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    for(var j = 0; j < sum.length;\
    \ j++){\n        ordered.push(sum[j][0]);\n    }\n    return ordered;\n}\n", " \
    \   nums.sort(function(a, b){\n        let sumA = sumOfDigits(a);\n        let\
    \ sumB = sumOfDigits(b);\n        return sumA > sumB ? 1 : (sumA < sumB ? -1 :\
    \ a > b ? 1 : -1);\n    });\n    return nums;\n}", "    if(!nums.length) return\
    \ [];\n    var sortNums = nums.map(function(num, i){\n        return {\n     \
    \       'num': num,\n            'index': i,\n            'digits': getDigitsSum(num)\n\
    \        };\n    });\n    sortNums.sort(function(a, b){\n        if(a.digits <\
    \ b.digits) return -1;\n        if(a.digits > b.digits) return 1;\n        if(a.index\
    \ < b.index) return -1;\n        if(a.index > b.index) return 1;\n        return\
    \ 0;\n    });\n    return sortNums.map(function(obj){\n        return obj.num;\n\
    \    });\n}\n", "    if(!nums.length) return [];\n    var obj = {};\n    for(var\
    \ i = 0; i < nums.length; i++){\n        obj[i] = nums[i];\n    }\n    return\
    \ nums.sort(function(a, b){\n        return calc_number(a) - calc_number(b);\n\
    \    })\n}\n", "    let sumOfDigits = 0;\n    nums.forEach(function(num){\n  \
    \      let digits = num.toString().split('');\n        let digitsSum = 0;\n  \
    \      digits.forEach(function(digit){\n            digitsSum += parseInt(digit);\n\
    \        });\n        sumOfDigits += digitsSum;\n    });\n    console.log(sumOfDigits);\n\
    }\norder_by_points([1, 11, -1, -11, -12]);\n", "    if (nums.length == 0) {\n\
    \        return [];\n    }\n    var sorted = false;\n    var i;\n    while (!sorted)\
    \ {\n        sorted = true;\n        for (i = 0; i < nums.length-1; i++) {\n \
    \           if (sum_digits(nums[i]) > sum_digits(nums[i+1])) {\n             \
    \   var a = nums[i];\n                nums[i] = nums[i+1];\n                nums[i+1]\
    \ = a;\n                sorted = false;\n            }\n        }\n    }\n   \
    \ return nums;\n}", "    if (nums.length === 0) return nums;\n    //create a map\
    \ of numbers and the sum of their digits\n    var numMap = new Map();\n    for\
    \ (var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        var\
    \ sum = num < 0 ? num * -1 : num;\n        while (sum > 0){\n            sum =\
    \ sum / 10;\n            var floored = Math.floor(sum);\n            if (floored\
    \ > 0){\n                numMap.set(num, floored);\n            }\n        }\n\
    \    }\n    return [];\n}", "    var newArr = [];\n    for(var i = 0; i < nums.length;\
    \ i++){\n        if(nums[i] > 0){\n            var sum = 0;\n            while(nums[i]\
    \ > 0){\n                sum += nums[i] % 10;\n                nums[i] = Math.floor(nums[i]\
    \ / 10);\n            }\n            newArr.push([i, sum]);\n        }\n     \
    \   else{\n            var sum = 0;\n            while(nums[i] < 0){\n       \
    \         sum += nums[i] % 10;\n                nums[i] = Math.floor(nums[i] /\
    \ 10);\n            }\n            newArr.push([i, sum]);\n        }\n    }\n\
    \    for(var i = 0; i < newArr.length; i++){\n        for(var j = i; j < newArr.length;\
    \ j++){\n            if(newArr[i][1] > newArr[j][1]){\n                var temp\
    \ = newArr[i];\n                newArr[i] = newArr[j];\n                newArr[j]\
    \ = temp;\n            }\n        }\n    }\n    var result = [];\n    for(var\
    \ i = 0; i < newArr.length; i++){\n        result.push(nums[newArr[i][0]]);\n\
    \    }\n    return result;\n}", "    nums.sort(function(a, b){\n        var aSum\
    \ = 0;\n        var bSum = 0;\n        var currentA = a;\n        var currentB\
    \ = b;\n        while(currentA > 0){\n            aSum += currentA % 10;\n   \
    \         currentA = Math.floor(currentA / 10);\n        }\n        while(currentB\
    \ > 0){\n            bSum += currentB % 10;\n            currentB = Math.floor(currentB\
    \ / 10);\n        }\n        if(aSum == bSum){\n            return a > b;\n  \
    \      }else{\n            return aSum > bSum;\n        }\n    });\n    return\
    \ nums;\n}", "    // Write your code here\n    let res = nums.map((n, i) => {\n\
    \        return {\n            n,\n            i,\n            key: n.toString().split('').reduce((s,\
    \ v) => s + (+v), 0)\n        }\n    })\n    res.sort((a, b) => {\n        if\
    \ (a.key !== b.key) {\n            return a.key - b.key\n        } else {\n  \
    \          return a.i - b.i\n        }\n    })\n    return res.map(({n}) => n)\n\
    }\n", "    // Your code here!\n    return nums.sort((a, b) => {\n      let a_str\
    \ = a.toString();\n      let b_str = b.toString();\n      let a_sum = a_str.split('').reduce((acc,\
    \ c) => acc + parseInt(c), 0);\n      let b_sum = b_str.split('').reduce((acc,\
    \ c) => acc + parseInt(c), 0);\n      if (a_sum === b_sum) {\n        return a\
    \ - b;\n      }\n      return a_sum - b_sum;\n    });\n  }\n\n", "    if (nums.length\
    \ == 0) {\n        return [];\n    }\n    return nums.map(function(x) {\n    \
    \    return [x, x.toString().split('').reduce(function(acc, num) {\n         \
    \   return acc + parseInt(num);\n        }, 0)];\n    }).sort(function(a, b) {\n\
    \        if (a[1] == b[1]) {\n            return a[0] - b[0];\n        }\n   \
    \     return a[1] - b[1];\n    }).map(function(x) {\n        return x[0];\n  \
    \  });\n}\n", "  return nums.sort(function(a, b){\n    let a_sum = 0;\n    let\
    \ b_sum = 0;\n    let a_arr = a.toString().split('');\n    let b_arr = b.toString().split('');\n\
    \    for(let i = 0; i < a_arr.length; i++){\n      a_sum += Number(a_arr[i]);\n\
    \    }\n    for(let i = 0; i < b_arr.length; i++){\n      b_sum += Number(b_arr[i]);\n\
    \    }\n    if(a_sum == b_sum){\n      return a - b;\n    }\n    return a_sum\
    \ - b_sum;\n  });\n}", "    if(!nums){\n        return [];\n    }\n    let sort_nums\
    \ = function(a, b){\n        let points_a = a.toString().split('').reduce((acc,\
    \ num) => acc += parseInt(num), 0);\n        let points_b = b.toString().split('').reduce((acc,\
    \ num) => acc += parseInt(num), 0);\n        if(points_a < points_b){\n      \
    \      return -1;\n        }else if(points_a > points_b){\n            return\
    \ 1;\n        }else{\n            return a - b;\n        }\n    }\n    return\
    \ nums.sort(sort_nums);\n}\n", "    return nums.sort(function(a, b){\n       \
    \ return sumDigits(a) - sumDigits(b);\n    });\n}\n", "    var result = [];\n\
    \    var sum = 0;\n    var arr = nums.join(\"\").split(\"\");\n    for(var i =\
    \ 0; i < arr.length; i++){\n        sum += +arr[i];\n    }\n    if(nums.length\
    \ === 0) {\n        return [];\n    }\n    else {\n        result.push(sum);\n\
    \        arr.splice(0, sum.toString().length);\n        return result.concat(order_by_points(arr));\n\
    \    }\n}", "    var sum=0,result=[];\n    if(nums.length===0){\n        return\
    \ [];\n    }\n    for(var i=0;i<nums.length;i++){\n        sum+=nums[i];\n   \
    \ }\n    return result.push(sum);\n}", "  if (nums.length == 0) {\n    return\
    \ nums;\n  }\n  function digitSum(num) {\n    num = Math.abs(num);\n    if (num.toString().length\
    \ == 1) {\n      return num;\n    }\n    return num.toString().split('').reduce(function(a,\
    \ b) {\n      return parseInt(a) + parseInt(b);\n    })\n  }\n  var sums = nums.map(function(num)\
    \ {\n    return digitSum(num);\n  });\n  var result = [];\n  for (var i = 0; i\
    \ < sums.length; i++) {\n    var min = Math.min.apply(null, sums);\n    result.push(nums[sums.indexOf(min)]);\n\
    \    sums[sums.indexOf(min)] = Infinity;\n  }\n  return result;\n}\n", "    function\
    \ sum_of_digits(num){\n        var sum = 0;\n        while(num > 0){\n       \
    \     sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n \
    \       return sum;\n    }\n    for(var i = 0; i < nums.length; i++){\n      \
    \  for(var j = 0; j < nums.length; j++){\n            if(sum_of_digits(nums[i])\
    \ < sum_of_digits(nums[j])){\n                var temp = nums[i];\n          \
    \      nums[i] = nums[j];\n                nums[j] = temp;\n            }\n  \
    \      }\n    }\n    return nums;\n}\n", "\t// Your code here\n\t// var result\
    \ = [];\n\t// for(var i = 0; i < nums.length; i++){\n\t// \tvar sum = 0;\n\t//\
    \ \tfor(var j = 0; j < nums[i].toString().length; j++){\n\t// \t\tsum += parseInt(nums[i].toString()[j]);\n\
    \t// \t}\n\t// \tresult.push([nums[i], sum]);\n\t// }\n\t// result.sort(function(a,\
    \ b){\n\t// \treturn a[1] - b[1];\n\t// });\n\t// var final = [];\n\t// for(var\
    \ k = 0; k < result.length; k++){\n\t// \tfinal.push(result[k][0]);\n\t// }\n\t\
    // return final;\n\tvar result = nums.map(function(num){\n\t\treturn {\n\t\t\t\
    sum: Array.from(num.toString()).reduce(function(a, b){\n\t\t\t\treturn parseInt(a)\
    \ + parseInt(b);\n\t\t\t}),\n\t\t\tvalue: num\n\t\t};\n\t});\n\tresult.sort(function(a,\
    \ b){\n\t\treturn a.sum - b.sum;\n\t});\n\treturn result.map(function(value){\n\
    \t\treturn value.value;\n\t});\n}\n", "    var result = nums.map(function(num,index){\n\
    \        return {index:index,nums:num,sums:split_nums(num)};\n    }).sort(function(a,b){\n\
    \        if(a.sums !== b.sums){\n            return a.sums - b.sums;\n       \
    \ }else{\n            return a.index - b.index;\n        }\n    });\n    return\
    \ result.map(function(obj){\n        return obj.nums;\n    });\n}", "  var newNums\
    \ = [];\n  for(var i = 0; i < nums.length; i++){\n    newNums.push([nums[i], sumOfDigits(nums[i])]);\n\
    \  }\n  newNums.sort(function(a, b){\n    if(a[1] < b[1]){\n      return -1;\n\
    \    }\n    if(a[1] > b[1]){\n      return 1;\n    }\n    return 0;\n  });\n \
    \ var result = [];\n  for(var j = 0; j < newNums.length; j++){\n    result.push(newNums[j][0]);\n\
    \  }\n  return result;\n}\n", "    function sum(num){\n        if(num < 0){\n\
    \            num = num * -1;\n        }\n        var sum = 0;\n        for(var\
    \ i = 0; i < num.toString().length; i++){\n            sum += Number(num.toString()[i]);\n\
    \        }\n        return sum;\n    }\n    for(var i = 0; i < nums.length; i++){\n\
    \        for(var j = i + 1; j < nums.length; j++){\n            if(sum(nums[i])\
    \ > sum(nums[j])){\n                var tmp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = tmp;\n            }\n        }\n    }\n\
    \    return nums;\n}\n", "    var sums = nums.map(function(num) {\n        var\
    \ sum = 0;\n        var numArr = num.toString().split('');\n        numArr.forEach(function(n)\
    \ {\n            sum += parseInt(n);\n        });\n        return sum;\n    });\n\
    \    var zipped = sums.map(function(sum, i) {\n        return [sum, i];\n    });\n\
    \    zipped.sort(function(a, b) {\n        return a[0] - b[0];\n    });\n    return\
    \ zipped.map(function(z) {\n        return nums[z[1]];\n    });\n}\n\n", "   \
    \ function sum_digits(num){\n        let s = 0;\n        while(num>0){\n     \
    \       s += num%10;\n            num = Math.floor(num/10);\n        }\n     \
    \   return s;\n    }\n    let arr = [];\n    for(let i=0; i<nums.length; i++){\n\
    \        arr.push([nums[i], sum_digits(nums[i]), i]);\n    }\n    arr.sort(function(a,\
    \ b){\n        if(a[1]<b[1]) return -1;\n        if(a[1]>b[1]) return 1;\n   \
    \     if(a[2]<b[2]) return -1;\n        if(a[2]>b[2]) return 1;\n        return\
    \ 0;\n    });\n    for(let i=0; i<arr.length; i++){\n        nums[i] = arr[i][0];\n\
    \    }\n    return nums;\n}\n\n", "    let sums = nums.map(n => get_sum_of_digits(n));\n\
    \    console.log(sums);\n    for(let i = 0; i < nums.length; i++){\n        for(let\
    \ j = i; j < nums.length; j++){\n            if(sums[i] > sums[j]){\n        \
    \        swap(sums, i, j);\n                swap(nums, i, j);\n            }\n\
    \        }\n    }\n    return nums;\n}\n", "  if(nums.length == 0){\n    return\
    \ nums;\n  }\n\n  let points = nums.map(num => {\n    if(num < 0){\n      return\
    \ -1 * sum_digits(num * -1);\n    }\n    return sum_digits(num);\n  });\n\n  let\
    \ min = points[0];\n  let min_index = 0;\n  for(let i = 1; i < points.length;\
    \ i++){\n    if(points[i] < min){\n      min = points[i];\n      min_index = i;\n\
    \    }\n  }\n\n  let return_list = [];\n  return_list.push(nums[min_index]);\n\
    \  nums.splice(min_index, 1);\n  points.splice(min_index, 1);\n\n  return return_list.concat(order_by_points(nums));\n\
    }\n", "    if(nums.length <= 1){\n        return nums;\n    }\n    let pivot =\
    \ nums[0];\n    let left = [];\n    let right = [];\n    for(let i = 1; i < nums.length;\
    \ i++){\n        if(getSum(nums[i]) > getSum(pivot)){\n            left.push(nums[i]);\n\
    \        }\n        else if(getSum(nums[i]) < getSum(pivot)){\n            right.push(nums[i]);\n\
    \        }\n        else{\n            if(nums[i] > pivot){\n                left.push(nums[i]);\n\
    \            }\n            else{\n                right.push(nums[i]);\n    \
    \        }\n        }\n    }\n    return order_by_points(left).concat(pivot, order_by_points(right));\n\
    }", "    //your code here\n}\n", "    var results = nums.sort(function(a, b){\n\
    \        return sum_digits(a) - sum_digits(b);\n    });\n    return results;\n\
    }", "    let sum_num_dict = {};\n    for (let i = 0; i < nums.length; i++) {\n\
    \        let sum = 0;\n        let n = nums[i];\n        while (n > 0) {\n   \
    \         sum += n % 10;\n            n = Math.floor(n / 10);\n        }\n   \
    \     if (sum_num_dict[sum] === undefined) {\n            sum_num_dict[sum] =\
    \ [];\n        }\n        sum_num_dict[sum].push(nums[i]);\n    }\n    let sorted_keys\
    \ = Object.keys(sum_num_dict).sort();\n    let sorted_arr = [];\n    for (let\
    \ i = 0; i < sorted_keys.length; i++) {\n        let key = sorted_keys[i];\n \
    \       sorted_arr = sorted_arr.concat(sum_num_dict[key]);\n    }\n    return\
    \ sorted_arr;\n}\n", "\n}\n", "    let arr=[];\n    nums.forEach(num=>{\n    \
    \    let sum=0;\n        num.toString().split('').forEach(n=>{\n            sum+=Number(n);\n\
    \        });\n        arr.push(sum);\n    });\n    let result=[];\n    for(let\
    \ i=0;i<arr.length;i++){\n        let min=Math.min(...arr);\n        if(nums[arr.indexOf(min)]>0){\n\
    \            result.push(nums[arr.indexOf(min)]);\n        }else{\n          \
    \  result.unshift(nums[arr.indexOf(min)]);\n        }\n        arr[arr.indexOf(min)]=Number.MAX_SAFE_INTEGER;\n\
    \    }\n    return result;\n}", "   function getNumSum(num){\n     let numStr\
    \ = num.toString();\n     let numArr = numStr.split('');\n     let sum = 0;\n\
    \     for(var i = 0; i < numArr.length; i++){\n       sum += parseInt(numArr[i]);\n\
    \     }\n     return sum;\n   }\n   let numSums = [];\n   for(var i = 0; i < nums.length;\
    \ i++){\n     numSums.push(getNumSum(nums[i]));\n   }\n   let result = nums.sort(function(a,\
    \ b){\n     if(getNumSum(a) > getNumSum(b)){\n       return 1;\n     } else if(getNumSum(a)\
    \ < getNumSum(b)){\n       return -1;\n     } else {\n       return a - b;\n \
    \    }\n   });\n   return result;\n}\n", "    function sumDigits(num){\n     \
    \   var sum = 0;\n        var digits = num.toString().split('');\n        for(var\
    \ i = 0; i < digits.length; i++){\n            sum += parseInt(digits[i]);\n \
    \       }\n        return sum;\n    }\n    var newNums = nums.slice();\n    newNums.sort(function(a,\
    \ b){\n        if(sumDigits(a) < sumDigits(b)){\n            return -1;\n    \
    \    }\n        else if(sumDigits(a) > sumDigits(b)){\n            return 1;\n\
    \        }\n        else if(sumDigits(a) === sumDigits(b)){\n            if(nums.indexOf(a)\
    \ < nums.indexOf(b)){\n                return -1;\n            }\n           \
    \ else{\n                return 1;\n            }\n        }\n    });\n    return\
    \ newNums;\n}\n", "    let  total = 0;\n    let mappedArray = nums.map(function(arrayCell){\n\
    \        for(let i = 0; i < arrayCell.toString().length; i++){\n            total\
    \ += parseInt(arrayCell.toString().charAt(i));\n        }\n        return [arrayCell,\
    \ total];\n    });\n    mappedArray.sort(function(a, b){\n        if(a[1] ===\
    \ b[1]){\n            return a[0] - b[0];\n        }\n        return a[1] - b[1];\n\
    \    });\n    let mapped = mappedArray.map(function(arrayCell){\n        return\
    \ arrayCell[0];\n    });\n    return mapped;\n}", "    var array = nums.map(function(x,\
    \ i){\n        return [x, i];\n    });\n    array.sort(function(a, b){\n     \
    \   var a_array = a[0].toString().split('').map(function(n){\n            return\
    \ parseInt(n);\n        });\n        var b_array = b[0].toString().split('').map(function(n){\n\
    \            return parseInt(n);\n        });\n        var a_sum = a_array.reduce(function(p,\
    \ c){\n            return p + c;\n        });\n        var b_sum = b_array.reduce(function(p,\
    \ c){\n            return p + c;\n        });\n        if(a_sum !== b_sum){\n\
    \            return a_sum - b_sum;\n        }\n        else{\n            return\
    \ a[1] - b[1];\n        }\n    });\n    return array.map(function(x){\n      \
    \  return x[0];\n    });\n}\n", "  return nums.sort(function(a, b){\n      var\
    \ a_sum = sum(Math.abs(a));\n      var b_sum = sum(Math.abs(b));\n      if (a_sum\
    \ > b_sum) {\n          return 1;\n      } else if (a_sum < b_sum) {\n       \
    \   return -1;\n      } else {\n          return 0;\n      }\n  });\n}", "\tnums.sort(function(a,\
    \ b){\n\t\tvar sumA = String(a).split('').reduce(function(prev, curr){\n\t\t\t\
    return prev + Number(curr);\n\t\t}, 0);\n\t\tvar sumB = String(b).split('').reduce(function(prev,\
    \ curr){\n\t\t\treturn prev + Number(curr);\n\t\t}, 0);\n\t\treturn sumA - sumB;\n\
    \t});\n\treturn nums;\n}\n", "  return nums.map(function(num, idx){\n    return\
    \ {\n      num: num,\n      idx: idx,\n      sum: num.toString().split('').reduce(function(p,\
    \ n){\n        return parseInt(p) + parseInt(n);\n      }, 0)\n    };\n  }).sort(function(a,\
    \ b){\n    if(a.sum === b.sum){\n      return a.idx - b.idx;\n    }\n    return\
    \ a.sum - b.sum;\n  }).map(function(obj){\n    return obj.num;\n  });\n}\n\nmodule.exports\
    \ = {\n  order_by_points: order_by_points\n};", "    return nums.sort(function(a,\
    \ b){\n        return (sumOfNum(a) > sumOfNum(b) ? 1 : -1);\n    });\n}\n", " \
    \ if(nums.length === 0){\n    return [];\n  }\n  var sums = nums.map(function(num){\n\
    \    var sum = 0;\n    var numStr = String(num);\n    for(var i = 0; i < numStr.length;\
    \ i++){\n      sum += parseInt(numStr[i]);\n    }\n    return sum;\n  });\n  var\
    \ sumsAndIndices = sums.map(function(sum, index){\n    return {sum: sum, index:\
    \ index};\n  });\n  var sortedSumsAndIndices = sumsAndIndices.sort(function(a,\
    \ b){\n    if(a.sum < b.sum){\n      return -1;\n    } else if(a.sum > b.sum){\n\
    \      return 1;\n    } else {\n      if(a.index < b.index){\n        return -1;\n\
    \      } else if(a.index > b.index){\n        return 1;\n      } else {\n    \
    \    return 0;\n      }\n    }\n  });\n  var sortedNums = sortedSumsAndIndices.map(function(sumsAndIndex){\n\
    \    return nums[sumsAndIndex.index];\n  });\n  return sortedNums;\n}\n", "  \
    \  var n = nums.length;\n    for(var i = 0; i < n; i++){\n        for(var j =\
    \ 0; j < n - i - 1; j++){\n            var digits1 = nums[j].toString().split('');\n\
    \            var digits2 = nums[j + 1].toString().split('');\n            var\
    \ sum1 = 0;\n            var sum2 = 0;\n            for(var k = 0; k < digits1.length;\
    \ k++){\n                sum1 += parseInt(digits1[k]);\n            }\n      \
    \      for(var k = 0; k < digits2.length; k++){\n                sum2 += parseInt(digits2[k]);\n\
    \            }\n            if(sum1 > sum2){\n                var temp = nums[j];\n\
    \                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n\
    \            }\n        }\n    }\n    return nums;\n}\n", "    nums.sort(function(a,\
    \ b){\n        let getSum = function(x){\n            let sum = 0;\n         \
    \   for(let i=0; i<x.toString().length; i++){\n                sum += parseInt(x.toString()[i]);\n\
    \            }\n            return sum;\n        }\n        let sumA = getSum(a);\n\
    \        let sumB = getSum(b);\n        if(sumA > sumB){\n            return 1;\n\
    \        }else if(sumA < sumB){\n            return -1;\n        }else{\n    \
    \        return -1;\n        }\n    });\n    return nums;\n}", "    //return nums.sort((a,\
    \ b) => sum_digits(a) - sum_digits(b));\n    return nums.sort((a, b) => sum_digits(a)\
    \ - sum_digits(b) || nums.indexOf(a) - nums.indexOf(b));\n}\n", "    if(nums.length\
    \ === 0){\n        return nums;\n    }\n    nums.sort(function(a, b){\n      \
    \  a_digits = a.toString().split('');\n        b_digits = b.toString().split('');\n\
    \        a_digits = a_digits.map(Number);\n        b_digits = b_digits.map(Number);\n\
    \        var a_sum = a_digits.reduce(function(a, b){\n            return a + b;\n\
    \        });\n        var b_sum = b_digits.reduce(function(a, b){\n          \
    \  return a + b;\n        });\n        if(a_sum > b_sum){\n            return\
    \ 1;\n        }\n        else if(a_sum < b_sum){\n            return -1;\n   \
    \     }\n        else{\n            return nums.indexOf(a) - nums.indexOf(b);\n\
    \        }\n    });\n    return nums;\n}\n", "    var a = 0;\n    var b = 0;\n\
    \    nums.sort(function(a, b){\n        return (a + b);\n    });\n    return nums;\n\
    }", "    if (nums.length === 0) return [];\n    let result = [];\n    let sum\
    \ = (n) => n.toString().split('').reduce((acc, digit) => parseInt(acc) + parseInt(digit));\n\
    \    while (nums.length) {\n        let idx = 0;\n        let sumMax = sum(nums[0]);\n\
    \        for (let i = 1; i < nums.length; i++) {\n            let el = nums[i];\n\
    \            let sumEl = sum(el);\n            if (sumEl > sumMax) {\n       \
    \         sumMax = sumEl;\n                idx = i;\n            }\n        }\n\
    \        result.push(nums[idx]);\n        nums.splice(idx, 1);\n    }\n    return\
    \ result;\n}\n", "  if(nums.length == 0){\n    return [];\n  }\n  var acc = 0;\n\
    \  var key = [];\n  var new_arr = [];\n  var new_arr2 = [];\n  var count = 0;\n\
    \  var sorted_array = [];\n  for(var i = 0; i < nums.length; i++){\n    var num\
    \ = Math.abs(nums[i]);\n    while(num > 0){\n      acc += num % 10;\n      num\
    \ = Math.floor(num / 10);\n    }\n    new_arr.push(acc);\n    acc = 0;\n  }\n\
    \  for(var i = 0; i < new_arr.length; i++){\n    if(key.indexOf(new_arr[i]) ==\
    \ -1){\n      key.push(new_arr[i]);\n    }\n  }\n  for(var i = 0; i < key.length;\
    \ i++){\n    var obj = {};\n    obj[key[i]] = 0;\n    new_arr2.push(obj);\n  }\n\
    \  for(var i = 0; i < new_arr.length; i++){\n    for(var j = 0; j < new_arr2.length;\
    \ j++){\n      if(new_arr[i] == Object.keys(new_arr2[j])){\n        new_arr2[j][new_arr[i]]++;\n\
    \      }\n    }\n  }\n  for(var i = 0; i < new_arr2.length; i++){\n    var new_obj\
    \ = {};\n    var n = new_arr2[i][Object.keys(new_arr2[i])];\n    new_obj[Object.keys(new_arr2[i])]\
    \ = new Array(n);\n    sorted_array.push(new_obj);\n  }\n  for(var i = 0; i <\
    \ new_arr.length; i++){\n    for(var j = 0; j < sorted_array.length; j++){\n \
    \     if(new_arr[i] == Object.keys(sorted_array[j])){\n        for(var k = 0;\
    \ k < sorted", "\tvar arr = nums.map(function(num){\n\t\tvar sum = num.toString().split('').reduce(function(total,\
    \ digit){\n\t\t\treturn total += parseInt(digit);\n\t\t}, 0);\n\t\treturn [num,\
    \ sum];\n\t});\n\tvar ordered = arr.sort(function(a, b){\n\t\tif(a[1] == b[1]){\n\
    \t\t\treturn a[0] - b[0];\n\t\t} else {\n\t\t\treturn a[1] - b[1];\n\t\t}\n\t\
    });\n\treturn ordered.map(function(list){\n\t\treturn list[0];\n\t});\n}", " \
    \ let obj = {};\n  let ans = [];\n  nums.forEach((i, index) => {\n    let sum\
    \ = 0;\n    i.toString().split('').forEach(num => {\n      sum += Number(num);\n\
    \    });\n    if(obj[sum]){\n      obj[sum].push(index);\n    } else {\n     \
    \ obj[sum] = [index];\n    }\n  });\n  Object.keys(obj).sort((a, b) => a - b).forEach(key\
    \ => {\n    obj[key].forEach(num => {\n      ans.push(nums[num]);\n    });\n \
    \ });\n  return ans;\n}\n", "\tif (nums.length === 0){\n\t\treturn [];\n\t}\n\t\
    var results = [];\n\tvar arr = [];\n\tvar sortedNum = nums.sort(function(a, b){\n\
    \t\tvar num1 = a.toString().split('');\n\t\tvar num2 = b.toString().split('');\n\
    \t\tvar aNum = 0;\n\t\tvar bNum = 0;\n\t\tfor (var i = 0; i < num1.length; i++){\n\
    \t\t\taNum += parseInt(num1[i]);\n\t\t}\n\t\tfor (var i = 0; i < num2.length;\
    \ i++){\n\t\t\tbNum += parseInt(num2[i]);\n\t\t}\n\t\tif (aNum === bNum){\n\t\t\
    \tif (nums.indexOf(a) < nums.indexOf(b)){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t\
    if (nums.indexOf(a) > nums.indexOf(b)){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn\
    \ 0;\n\t\t} else {\n\t\t\treturn aNum - bNum;\n\t\t}\n\t});\n\treturn sortedNum;\n\
    }", "  let result = nums.map(n => n.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b), 0));\n  let sorted = result.map((a, i) => [a, i]).sort((a, b)\
    \ => a[0] - b[0]);\n  let ordered = [];\n  for (let i = 0; i < sorted.length;\
    \ i++) {\n    ordered.push(nums[sorted[i][1]]);\n  }\n  return ordered;\n}\n",
  "  if(nums.length === 0){\n    return nums;\n  }else{\n    nums.sort(function(a,\
    \ b){\n      var numberA = (''+a).split('').reduce(function(a, b){\n        return\
    \ parseInt(a)+parseInt(b);\n      }, 0);\n      var numberB = (''+b).split('').reduce(function(a,\
    \ b){\n        return parseInt(a)+parseInt(b);\n      }, 0);\n      return numberA-numberB;\n\
    \    });\n    return nums;\n  }\n}", "  //TODO: implement the method below\n\n\
    }\n", "    return nums.sort(function(a, b){\n        return sum_of_digits(a) -\
    \ sum_of_digits(b);\n    });\n}\n", "    return nums.sort(function(a, b){\n  \
    \      var sum_a = (a + '').split('').reduce(function(acc, n){\n            return\
    \ acc + parseInt(n);\n        }, 0);\n        var sum_b = (b + '').split('').reduce(function(acc,\
    \ n){\n            return acc + parseInt(n);\n        }, 0);\n        if (sum_a\
    \ > sum_b) return 1;\n        if (sum_a < sum_b) return -1;\n        return 0;\n\
    \    });\n}", "    const sortedArray = nums.sort((num1, num2) => {\n        const\
    \ digitSum1 = num1.toString().split('').reduce((acc, value) => {\n           \
    \ return parseInt(acc) + parseInt(value);\n        }, 0);\n        const digitSum2\
    \ = num2.toString().split('').reduce((acc, value) => {\n            return parseInt(acc)\
    \ + parseInt(value);\n        }, 0);\n        return digitSum1 - digitSum2;\n\
    \    });\n    return sortedArray;\n}\n", "\tlet newArr = [];\n\tfor(var i = 0;\
    \ i < nums.length; i++){\n\t\tlet num = nums[i];\n\t\tlet sum = 0;\n\t\tnum =\
    \ num.toString();\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tsum += parseInt(num[j]);\n\
    \t\t}\n\t\tnewArr.push(sum);\n\t}\n\tconsole.log(newArr);\n\tconsole.log(nums);\n\
    \tlet result = [];\n\tfor(var i = 0; i < newArr.length; i++){\n\t\tlet min = Math.min(...newArr);\n\
    \t\tlet index = newArr.indexOf(min);\n\t\tresult.push(nums[index]);\n\t\tnewArr.splice(index,\
    \ 1);\n\t\tnums.splice(index, 1);\n\t}\n\treturn result;\n}", "    if(nums.length\
    \ <= 1){\n        return nums;\n    }\n    var workArray = [];\n    for(var i\
    \ = 0; i < nums.length; i++){\n        workArray.push(nums[i].toString().split('').reduce(function(x,\
    \ y){\n            return parseInt(x) + parseInt(y);\n        }));\n    }\n  \
    \  var counts = {};\n    for(var i = 0; i < workArray.length; i++){\n        var\
    \ num = workArray[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n\
    \    }\n    var sortedArray = workArray.sort(function(a, b){\n        return counts[a]\
    \ - counts[b];\n    });\n    var sumArray = [];\n    for(var i = 0; i < sortedArray.length;\
    \ i++){\n        sumArray.push(sortedArray[i]);\n    }\n    var finalArray = [];\n\
    \    for(var i = 0; i < sortedArray.length; i++){\n        for(var j = 0; j <\
    \ sumArray.length; j++){\n            if(nums[j] == sortedArray[i]){\n       \
    \         finalArray.push(sortedArray[i]);\n                sumArray.splice(j,\
    \ 1);\n            }\n        }\n    }\n    return finalArray;\n}\n", "    if(!nums.length)\
    \ return nums;\n    return nums.map((x, i) => [x, get_sum_of_digits(x), i]).sort((a,\
    \ b) => a[1] === b[1] ? a[2] - b[2] : a[1] - b[1]).map(x => x[0]);\n}\n", "  \
    \  return nums.sort(function(a, b){\n      return sum_of_digits(a) - sum_of_digits(b);\n\
    \    });\n}\n", "    return nums.sort(function(a, b){\n        var sum1 = 0;\n\
    \        var sum2 = 0;\n        var temp = a;\n        while(temp > 0){\n    \
    \        sum1 += temp % 10;\n            temp = Math.floor(temp / 10);\n     \
    \   }\n        temp = b;\n        while(temp > 0){\n            sum2 += temp %\
    \ 10;\n            temp = Math.floor(temp / 10);\n        }\n        if(sum1 <\
    \ sum2){\n            return -1;\n        }\n        else if(sum1 > sum2){\n \
    \           return 1;\n        }\n        else if(sum1 == sum2){\n           \
    \ if(a < b){\n                return -1;\n            }\n            else if(a\
    \ > b){\n                return 1;\n            }\n            else{\n       \
    \         return 0;\n            }\n        }\n    });\n}\n", "  const nums_sorted\
    \ = nums.sort((a, b) => {\n    const a_sum = sum_of_digits(a);\n    const b_sum\
    \ = sum_of_digits(b);\n    return a_sum - b_sum;\n  });\n  return nums_sorted;\n\
    }\n", "    if(nums.length === 0){\n        return [];\n    }\n    var sorted =\
    \ [];\n    for(var i = 0; i < nums.length; i++){\n        var sum = 0;\n     \
    \   var x = nums[i].toString();\n        for(var j = 0; j < x.length; j++){\n\
    \            sum += parseInt(x[j]);\n        }\n        var obj = {\n        \
    \    sum: sum,\n            num: nums[i]\n        };\n        sorted.push(obj);\n\
    \    }\n    sorted.sort(function(a, b){\n        return a.sum - b.sum;\n    });\n\
    \    var answer = [];\n    for(var i = 0; i < sorted.length; i++){\n        answer.push(sorted[i].num);\n\
    \    }\n    return answer;\n}", "    //Your code here\n    if(nums.length ===\
    \ 0){\n        return nums;\n    }\n    var result = [];\n    var lastDigitSum\
    \ = [];\n    var j = 0;\n    var sum = 0;\n    var i = 0;\n    while(i < nums.length){\n\
    \        sum = 0;\n        while(nums[i] >= 1){\n            sum += (nums[i] %\
    \ 10);\n            nums[i] = parseInt(nums[i] / 10);\n        }\n        if(nums[i]\
    \ !== 0){\n            sum += Math.abs(nums[i]);\n        }\n        if(lastDigitSum.length\
    \ === 0){\n            lastDigitSum.push(sum);\n            result.push(i);\n\
    \        }\n        else{\n            j = 0;\n            while(j < lastDigitSum.length){\n\
    \                if(sum < lastDigitSum[j]){\n                    lastDigitSum.splice(j,\
    \ 0, sum);\n                    result.splice(j, 0, i);\n                    break;\n\
    \                }\n                j++;\n            }\n            if(j ===\
    \ lastDigitSum.length){\n                lastDigitSum.push(sum);\n           \
    \     result.push(i);\n            }\n        }\n        i++;\n    }\n    i =\
    \ 0;\n    while(i < result.length){\n        result[i] = nums[result[i]];\n  \
    \      i++;\n    }\n    return result;\n}", "    let result = [];\n    let points\
    \ = [];\n    for(let i = 0; i < nums.length; i++){\n        let str = nums[i].toString();\n\
    \        let sum = 0;\n        for(let j = 0; j < str.length; j++){\n        \
    \    sum += parseInt(str[j]);\n        }\n        result.push(sum);\n        points.push({sum:\
    \ sum, index: i});\n    }\n    result.sort((a, b) => a - b);\n    let answer =\
    \ [];\n    for(let k = 0; k < result.length; k++){\n        for(let l = 0; l <\
    \ points.length; l++){\n            if(result[k] === points[l].sum){\n       \
    \         answer.push(nums[points[l].index]);\n                points.splice(l,\
    \ 1);\n                break;\n            }\n        }\n    }\n    return answer;\n\
    }\n", "  const pointsArr = nums.map(function(num) {\n    return {index: nums.indexOf(num),\
    \ value: num};\n  });\n  pointsArr.sort(function(a, b) {\n    return get_points(a.value)\
    \ - get_points(b.value);\n  });\n  return pointsArr.map(function(elem) {\n   \
    \ return elem.value;\n  });\n}\n", "  if (nums.length <= 1) return nums;\n  let\
    \ pivot = nums[0];\n  let left = [];\n  let right = [];\n  for (let i = 1; i <\
    \ nums.length; i++) {\n    if (sumDigits(nums[i]) <= sumDigits(pivot)) left.push(nums[i]);\n\
    \    else right.push(nums[i]);\n  }\n  return order_by_points(left).concat(pivot,\
    \ order_by_points(right));\n}", "  return nums.sort(function(x, y){\n    return\
    \ sumDigits(x) - sumDigits(y);\n  });\n}", "    const orderedNums = nums.sort((a,\
    \ b) => sum_digits(a) - sum_digits(b));\n    return orderedNums;\n}\n", "    if(nums.length\
    \ === 0){\n        return nums;\n    }\n    var sums = []\n    for(var i = 0;\
    \ i < nums.length; i++){\n        sums.push(sum_digits(nums[i]));\n    }\n   \
    \ var indices = quick_sort(sums, nums);\n    var answer = [];\n    for(var j =\
    \ 0; j < indices.length; j++){\n        answer.push(nums[indices[j]]);\n    }\n\
    \    return answer;\n}\n", "    return nums.map(x => [x, get_digits_sum(x)]).sort((x,\
    \ y) => {\n        if (x[1] == y[1]) {\n            return x[0] - y[0];\n    \
    \    }\n        return x[1] - y[1];\n    }).map(x => x[0]);\n}\n", "    return\
    \ nums.sort(function(a, b){\n        return sum_of_digits(a) - sum_of_digits(b);\n\
    \    });\n}\n", "  var dict = {};\n  var sum = 0;\n  var key = 0;\n  if(nums.length\
    \ > 0){\n    for(var i = 0; i < nums.length; i++){\n      sum = 0;\n      key\
    \ = nums[i];\n      nums[i] = nums[i].toString();\n      for(var j = 0; j < nums[i].length;\
    \ j++){\n        sum += parseInt(nums[i][j]);\n      }\n      if(dict[sum] ===\
    \ undefined){\n        dict[sum] = [];\n      }\n      dict[sum].push(key);\n\
    \    }\n    return Object.values(dict).sort((a, b) => a - b).flat();\n  }\n  return\
    \ [];\n}\n", "    let sum = [];\n    for(let i=0; i<nums.length; i++){\n     \
    \   let num = nums[i];\n        let total = 0;\n        if(num < 0){\n       \
    \     num = num*-1;\n        }\n        for(let j=0; j<num.toString().length;\
    \ j++){\n            total = total + parseInt(num.toString()[j]);\n        }\n\
    \        sum.push(total);\n    }\n    let sorted = [];\n    for(let i=0; i<sum.length;\
    \ i++){\n        let smallest = Math.min(...sum);\n        let idx = sum.indexOf(smallest);\n\
    \        sorted.push(nums[idx]);\n        sum.splice(idx, 1);\n        nums.splice(idx,\
    \ 1);\n    }\n    return sorted;\n}\n", "    return nums.sort(\n        function(a,\
    \ b){\n            a = getSumOfDigits(a);\n            b = getSumOfDigits(b);\n\
    \            if (a == b) return a - b;\n            return a - b;\n        }\n\
    \    );\n}\n", "    return nums.sort(function(a, b){\n        a = Math.abs(a);\n\
    \        b = Math.abs(b);\n        var sumA = sum_digits(a);\n        var sumB\
    \ = sum_digits(b);\n        return sumA > sumB ? 1 : -1;\n    });\n}\n", "\n}\n",
  "  var arr_of_num_obj = nums.map(function(el){\n    var sum = 0;\n    var num =\
    \ el;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    return {\n      num: el,\n      sum: sum\n    };\n  });\n\
    \  arr_of_num_obj.sort(function(a, b){\n    if(a.sum === b.sum){\n      return\
    \ nums.indexOf(a.num) - nums.indexOf(b.num);\n    }\n    return a.sum - b.sum;\n\
    \  });\n  return arr_of_num_obj.map(function(el){\n    return el.num;\n  });\n\
    }\n", "    //return nums.sort((a, b) => (a - b));\n    let sum = 0;\n    let sums\
    \ = [];\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] < 0){\n\
    \            nums[i] = nums[i] * -1;\n        }\n        for(let n = 0; n < nums[i].toString().length;\
    \ n++){\n            sum += Number(nums[i].toString()[n]);\n        }\n      \
    \  sums.push(sum);\n        sum = 0;\n    }\n    //console.log(sums);\n    let\
    \ compare = function(a, b){\n        return sums[a] - sums[b];\n    }\n    let\
    \ indexes = Array.from(Array(nums.length).keys());\n    indexes.sort(compare);\n\
    \    //console.log(indexes);\n    let result = [];\n    for(let x = 0; x < indexes.length;\
    \ x++){\n        result.push(nums[indexes[x]]);\n    }\n    return result;\n}",
  "    return nums.sort(\n        function(a, b){\n            a = a.toString().split('').reduce(\n\
    \                function(a, b){\n                    return parseInt(a) + parseInt(b);\n\
    \                }\n            );\n            b = b.toString().split('').reduce(\n\
    \                function(a, b){\n                    return parseInt(a) + parseInt(b);\n\
    \                }\n            );\n            return a - b;\n        }\n   \
    \ );\n}", "    let counter = 0;\n    let newArr = [];\n    for(let num of nums){\n\
    \        if(num.toString().split('').length === 1){\n            newArr.push(num)\n\
    \        } else {\n            let sum = 0;\n            for(let i = 0; i < num.toString().split('').length;\
    \ i++){\n                sum += parseInt(num.toString().split('')[i]);\n     \
    \       }\n            newArr.push(sum);\n        }\n    }\n    let newArr2 =\
    \ [];\n    while(newArr.length > 0){\n        let temp = newArr[0];\n        for(let\
    \ i = 0; i < newArr.length; i++){\n            if(newArr[i] < temp){\n       \
    \         temp = newArr[i];\n                counter = i;\n            }\n   \
    \     }\n        newArr2.push(nums[counter]);\n        newArr.splice(counter,\
    \ 1);\n        nums.splice(counter, 1);\n    }\n    return newArr2;\n}\n", " \
    \   if(nums.length > 0){\n        for(var i = 0; i < nums.length; i++){\n    \
    \        nums[i] = [nums[i], i];\n        }\n        nums.sort(function(a, b){\n\
    \            var a_sum = 0;\n            var b_sum = 0;\n            while(a[0]\
    \ > 0){\n                a_sum += a[0] % 10;\n                a[0] = Math.floor(a[0]\
    \ / 10);\n            }\n            while(b[0] > 0){\n                b_sum +=\
    \ b[0] % 10;\n                b[0] = Math.floor(b[0] / 10);\n            }\n \
    \           if(a_sum == b_sum){\n                return a[1] - b[1];\n       \
    \     }\n            return a_sum - b_sum;\n        });\n        for(var i = 0;\
    \ i < nums.length; i++){\n            nums[i] = nums[i][0];\n        }\n    }\n\
    \    return nums;\n}\n", "    return nums.sort(function(a, b){\n        if(sumOfDigits(a)\
    \ === sumOfDigits(b)){\n            return a - b;\n        } else {\n        \
    \    return sumOfDigits(a) - sumOfDigits(b);\n        }\n    });\n}\n", "  if(nums.length\
    \ == 0){\n    return [];\n  }\n  else{\n    var new_nums = [];\n    for(var i\
    \ = 0; i < nums.length; i++){\n      var sum = 0;\n      for(var j = 0; j < nums[i].toString().length;\
    \ j++){\n        sum += nums[i].toString()[j] * 1;\n      }\n      new_nums.push([sum,\
    \ i]);\n    }\n    new_nums.sort(function(a, b){\n      if(a[0] > b[0]){\n   \
    \     return 1;\n      }\n      else if(a[0] < b[0]){\n        return -1;\n  \
    \    }\n      else{\n        if(a[1] > b[1]){\n          return 1;\n        }\n\
    \        else if(a[1] < b[1]){\n          return -1;\n        }\n        else{\n\
    \          return 0;\n        }\n      }\n    });\n    for(var i = 0; i < new_nums.length;\
    \ i++){\n      new_nums[i] = nums[new_nums[i][1]];\n    }\n    return new_nums;\n\
    \  }\n}", "  return nums.sort(function(a, b){\n    var getDigitSum = function(num){\n\
    \      return num.toString().split('').reduce(function(sum, curr){\n        return\
    \ sum + parseInt(curr);\n      }, 0);\n    };\n    return getDigitSum(a) - getDigitSum(b);\n\
    \  });\n}\n", "  return nums.sort(function(a, b){\n    if (a > b){\n      return\
    \ 1;\n    }\n    if (a < b){\n      return -1;\n    }\n    return 0;\n  });\n\
    }\n", "\tlet arr_of_sums = [];\n\tlet arr_of_nums = [];\n\tnums.forEach(function(num){\n\
    \t\tlet sum = 0;\n\t\tfor(let i = 0; i < num.toString().length; i++){\n\t\t\t\
    sum += Number(num.toString()[i]);\n\t\t}\n\t\tarr_of_sums.push(sum);\n\t\tarr_of_nums.push(num);\n\
    \t});\n\tlet temp = 0;\n\tfor(let i = 0; i < arr_of_sums.length; i++){\n\t\tfor(let\
    \ j = 0; j < arr_of_sums.length; j++){\n\t\t\tif(arr_of_sums[i] < arr_of_sums[j]){\n\
    \t\t\t\ttemp = arr_of_sums[i];\n\t\t\t\tarr_of_sums[i] = arr_of_sums[j];\n\t\t\
    \t\tarr_of_sums[j] = temp;\n\t\t\t\ttemp = arr_of_nums[i];\n\t\t\t\tarr_of_nums[i]\
    \ = arr_of_nums[j];\n\t\t\t\tarr_of_nums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(arr_of_nums);\n\
    }\norder_by_points([1, 11, -1, -11, -12]);\norder_by_points([]);\n", "    var\
    \ sum_digits = function(num){\n        var sum = 0;\n        var num_str = String(num);\n\
    \        for(var i = 0; i < num_str.length; i++){\n            sum += parseInt(num_str[i]);\n\
    \        }\n        return sum;\n    };\n    var sums = [];\n    for(var i = 0;\
    \ i < nums.length; i++){\n        sums.push(sum_digits(nums[i]));\n    }\n   \
    \ var j;\n    for(var i = 0; i < nums.length; i++){\n        for(j = i; j < nums.length;\
    \ j++){\n            if(sums[i] > sums[j]){\n                var temp = sums[i];\n\
    \                sums[i] = sums[j];\n                sums[j] = temp;\n       \
    \         temp = nums[i];\n                nums[i] = nums[j];\n              \
    \  nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n}\n", " \
    \ return nums.sort(function(a, b){\n    return sum_of_digits(a) - sum_of_digits(b);\n\
    \  });\n}\n", "    var res =[];\n    var indexed_nums = [];\n    var index_sum\
    \ = [];\n    for(var i=0; i<nums.length; i++){\n        var splitted = nums[i].toString().split('');\n\
    \        var sum = splitted.reduce(function(a,b){\n            return Number(a)+Number(b);\n\
    \        });\n        indexed_nums.push({sum:sum, num:nums[i]});\n        index_sum.push(sum);\n\
    \    }\n    index_sum.sort(function(a,b){\n        return a-b;\n    });\n    for(var\
    \ i=0; i<index_sum.length; i++){\n        for(var j=0; j<indexed_nums.length;\
    \ j++){\n            if(index_sum[i]===indexed_nums[j].sum){\n               \
    \ res.push(indexed_nums[j].num);\n                indexed_nums.splice(j,1);\n\
    \                break;\n            }\n        }\n    }\n    return res;\n}",
  "    const compare = (a, b) => {\n        a = Math.abs(a).toString().split('').reduce((p,\
    \ c) => p + +c);\n        b = Math.abs(b).toString().split('').reduce((p, c) =>\
    \ p + +c);\n        return a - b\n    };\n    return nums.sort(compare);\n}\n\n",
  "    var myDict = {};\n    for (var i = 0; i < nums.length; i++){\n        var charInt\
    \ = nums[i].toString().split('');\n        var sum = 0;\n        for (var j =\
    \ 0; j < charInt.length; j++){\n            sum += parseInt(charInt[j]);\n   \
    \     }\n        myDict[sum] = nums[i];\n    }\n    var sortedKeys = Object.keys(myDict).sort(function(a,b){return\
    \ a-b});\n    var sortedDict = {};\n    for (var i = 0; i < sortedKeys.length;\
    \ i++){\n        sortedDict[sortedKeys[i]] = myDict[sortedKeys[i]];\n    }\n \
    \   return sortedDict;\n}\n", "  return nums.sort(function(a, b){\n    if (sum(a)\
    \ < sum(b)){\n      return -1;\n    } else if (sum(a) > sum(b)){\n      return\
    \ 1;\n    } else {\n      return a - b;\n    }\n  });\n}\n", "    return nums.sort(function(a,\
    \ b){\n        return (a+'').split('').reduce(function(p, c){\n            return\
    \ parseInt(p)+parseInt(c);\n        }) - (b+'').split('').reduce(function(p, c){\n\
    \            return parseInt(p)+parseInt(c);\n        });\n    });\n}\n", "  \
    \  const sum_of_digits = nums.map(n => n.toString().split('').reduce((a, b) =>\
    \ parseInt(a) + parseInt(b)));\n    return nums.map((n, i) => [n, sum_of_digits[i]]).sort(([,\
    \ a], [, b]) => a - b).map(([a]) => a);\n}\n", "  var \n  return ;\n}\n", "  \
    \  return nums.sort(function(a, b){\n        return sum_digits(a) - sum_digits(b);\n\
    \    });\n}\n", "  if(!nums || nums.length == 0) return nums;\n  // \u5FEB\u6392\
    \n  // \u627E\u5230\u57FA\u51C6\n  let pivot_index = Math.floor(nums.length /\
    \ 2);\n  let pivot = nums[pivot_index];\n  // \u5206\u6210\u4E24\u4E2A\u6570\u7EC4\
    \n  let left = [];\n  let right = [];\n  for(let i = 0; i < nums.length; i++){\n\
    \    if(i == pivot_index) continue;\n    if(getDigitSum(nums[i]) < getDigitSum(pivot)){\n\
    \      left.push(nums[i]);\n    }else{\n      right.push(nums[i]);\n    }\n  }\n\
    \  return order_by_points(left).concat([pivot]).concat(order_by_points(right));\n\
    }", "    let newArr = [];\n    let sum = 0;\n    let arr = [];\n    let elem;\n\
    \    let res = [];\n    for(let i = 0; i < nums.length; i++){\n        elem =\
    \ Math.abs(nums[i]);\n        while(elem > 0){\n            sum += (elem % 10);\n\
    \            elem = Math.floor(elem / 10);\n        }\n        newArr.push(sum);\n\
    \        sum = 0;\n    }\n    for(let i = 0; i < newArr.length; i++){\n      \
    \  if(!arr.includes(newArr[i])){\n            arr.push(newArr[i]);\n        }\n\
    \    }\n    arr.sort(function(a, b){return a - b});\n    for(let i = 0; i < arr.length;\
    \ i++){\n        for(let j = 0; j < newArr.length; j++){\n            if(arr[i]\
    \ === newArr[j]){\n                res.push(nums[j]);\n            }\n       \
    \ }\n    }\n    return res;\n}\n", "  nums.sort(function(a, b){\n    if (sum_of_digits(a)\
    \ < sum_of_digits(b)){\n      return -1;\n    } else if (sum_of_digits(a) > sum_of_digits(b)){\n\
    \      return 1;\n    } else {\n      return a - b;\n    }\n  });\n  return nums;\n\
    }", "    function sumDigits(num){\n        let sum = 0;\n        let numStr =\
    \ num.toString();\n        for(let i = 0; i < numStr.length; i++){\n         \
    \   sum += parseInt(numStr[i]);\n        }\n        return sum;\n    }\n    return\
    \ nums.sort((a, b) => sumDigits(a) - sumDigits(b));\n}", "  var sums = [];\n \
    \ for(var i = 0; i < nums.length; i++){\n    sums.push(num_points(nums[i]));\n\
    \  }\n  //console.log(sums);\n  var sorted_indexes = [...Array(nums.length).keys()].sort(function(a,\
    \ b){\n    if(sums[a] < sums[b]){\n      return -1;\n    }\n    else if(sums[a]\
    \ > sums[b]){\n      return 1;\n    }\n    else{\n      return a - b;\n    }\n\
    \  });\n  //console.log(sorted_indexes);\n  var sorted_nums = [];\n  for(var i\
    \ = 0; i < nums.length; i++){\n    sorted_nums.push(nums[sorted_indexes[i]]);\n\
    \  }\n  return sorted_nums;\n}", "    var arr = []\n    for(var i = 0; i < nums.length;\
    \ i++){\n        var b = (nums[i] + '').split('')\n        var sum = 0\n     \
    \   for(var j = 0; j < b.length; j++){\n            sum += Number(b[j])\n    \
    \    }\n        arr.push([nums[i], sum, i])\n    }\n    var newArr = []\n    var\
    \ tempArr = []\n    for(var k = 0; k < arr.length; k++){\n        for(var m =\
    \ 0; m < arr.length; m++){\n            if(arr[k][1] < arr[m][1]){\n         \
    \       tempArr = arr[k]\n                arr[k] = arr[m]\n                arr[m]\
    \ = tempArr\n            }else if(arr[k][1] == arr[m][1]){\n                if(arr[k][2]\
    \ > arr[m][2]){\n                    tempArr = arr[k]\n                    arr[k]\
    \ = arr[m]\n                    arr[m] = tempArr\n                }\n        \
    \    }\n        }\n    }\n    for(var n = 0; n < arr.length; n++){\n        newArr.push(arr[n][0])\n\
    \    }\n    return newArr\n}\n", "  function get_sum(num){\n    return parseInt((\"\
    \"+num).split(\"\").reduce((a,b)=>(parseInt(a)+parseInt(b))))\n  }\n  return nums.sort((a,b)=>(get_sum(a)-get_sum(b)))\n\
    }", "    var bySum = nums.map(function(num, index){\n        var digits = num.toString().split('').map(function(digit){\n\
    \            return parseInt(digit);\n        });\n        var sum = digits.reduce(function(a,\
    \ b){\n            return a + b;\n        });\n        return {\n            sum:\
    \ sum,\n            index: index\n        };\n    });\n    var sorted = bySum.sort(function(a,\
    \ b){\n        if(a.sum === b.sum){\n            return a.index - b.index;\n \
    \       }\n        return a.sum - b.sum;\n    });\n    return sorted.map(function(item){\n\
    \        return nums[item.index];\n    });\n}\n", "    return nums.sort(function(a,\
    \ b){\n        return getSum(a) - getSum(b);\n    });\n}\n", "    return nums.sort(function(a,\
    \ b){\n        var sumA = sum(a);\n        var sumB = sum(b);\n        if (sumA\
    \ < sumB) {\n            return -1;\n        }\n        if (sumA > sumB) {\n \
    \           return 1;\n        }\n        return 0;\n    });\n}", "\tvar sum =\
    \ 0;\n\tvar array = [];\n\tfor(var i = 0; i < nums.length; i++){\n\t\tsum = 0;\n\
    \t\tif(nums[i] < 0){\n\t\t\tfor(var j = 0; j < nums[i].toString().length; j++){\n\
    \t\t\t\tsum += Number(nums[i].toString()[j]);\n\t\t\t}\n\t\t\tarray.push(sum);\n\
    \t\t}else{\n\t\t\tfor(var j = 0; j < nums[i].toString().length; j++){\n\t\t\t\t\
    sum += Number(nums[i].toString()[j]);\n\t\t\t}\n\t\t\tarray.push(sum);\n\t\t}\n\
    \t}\n\treturn array;\n}", "    // make object with sum as key, and original index\
    \ as value\n    var sumIndex = {};\n    for (var i = 0; i < nums.length; i++){\n\
    \        var sum = sumDigits(nums[i]);\n        if (sumIndex[sum] === undefined){\n\
    \            sumIndex[sum] = [i];\n        } else {\n            sumIndex[sum].push(i);\n\
    \        }\n    }\n    var ret = [];\n    // sort the sums\n    var keys = Object.keys(sumIndex);\n\
    \    keys.sort(function(a, b){return a - b});\n    // make ret\n    for (var i\
    \ = 0; i < keys.length; i++){\n        var curr = keys[i];\n        var index\
    \ = sumIndex[curr];\n        for (var j = 0; j < index.length; j++){\n       \
    \     ret.push(nums[index[j]]);\n        }\n    }\n    return ret;\n}\n", "  \
    \  if(nums.length === 0){\n        return [];\n    }\n    var output = [];\n \
    \   for(var i = 0; i < nums.length; i++){\n        var sum = 0;\n        for(var\
    \ j = 0; j < Math.abs(nums[i]).toString().length; j++){\n            sum += Math.abs(nums[i]).toString()[j]\
    \ * 1;\n        }\n        output.push([sum, i]);\n    }\n    output.sort(function(a,\
    \ b){\n        if(a[0] < b[0]){\n            return -1;\n        }\n        if(a[0]\
    \ > b[0]){\n            return 1;\n        }\n        if(a[0] === b[0]){\n   \
    \         if(a[1] < b[1]){\n                return -1;\n            }\n      \
    \      if(a[1] > b[1]){\n                return 1;\n            }\n        }\n\
    \    });\n    return output.map(function(item){\n        return nums[item[1]];\n\
    \    });\n}", "    let result = []\n    nums.forEach(num => {\n        let sum\
    \ = 0\n        let numStr = num.toString()\n        for(let i = 0; i < numStr.length;\
    \ i++){\n            sum += parseInt(numStr[i])\n        }\n        result.push([num,\
    \ sum])\n    })\n    result.sort((a, b) => a[1] - b[1])\n    let ordered = []\n\
    \    result.forEach(arr => {\n        ordered.push(arr[0])\n    })\n    return\
    \ ordered\n}\n", "    function sumOfDigits(n){\n        var sum = 0;\n       \
    \ n = n.toString();\n        for(var i = 0; i < n.length; i++){\n            sum\
    \ += parseInt(n[i]);\n        }\n        return sum;\n    }\n    var result =\
    \ nums.slice();\n    result.sort(function(a, b){\n        var sumA = sumOfDigits(a);\n\
    \        var sumB = sumOfDigits(b);\n        if(sumA === sumB){\n            return\
    \ a - b;\n        }\n        return sumA - sumB;\n    });\n    return result;\n\
    }\n", "\treturn nums.sort(function(a, b){\n\t\treturn sum(a) - sum(b) || a - b;\n\
    \t});\n}\n", "  function sumOfDigits(num){\n    return num.toString().split('').reduce(function(a,b){\n\
    \      return Number(a) + Number(b);\n    }, 0);\n  }\n  nums.sort(function(a,b){\n\
    \    var a_sum = sumOfDigits(a);\n    var b_sum = sumOfDigits(b);\n    if(a_sum\
    \ > b_sum){\n      return 1;\n    }\n    else if(a_sum < b_sum){\n      return\
    \ -1;\n    }\n    else if(a_sum === b_sum){\n      return a - b;\n    }\n  });\n\
    \  return nums;\n}\n\n", "\tif(!Array.isArray(nums)) return 'invalid input';\n\
    \tlet sum = 0;\n\tlet output = []\n\tlet sumArr = [];\n\tlet min = 0;\n\tfor(let\
    \ i = 0; i < nums.length; i++){\n\t\tsum = 0;\n\t\tfor(let j = 0; j < nums[i].toString().length;\
    \ j++){\n\t\t\tsum += Number(nums[i].toString()[j]);\n\t\t}\n\t\toutput.push(nums[i]);\n\
    \t\tsumArr.push(sum);\n\t}\n\tfor(let i = 0; i < sumArr.length; i++){\n\t\tmin\
    \ = i;\n\t\tfor(let j = i + 1; j < sumArr.length; j++){\n\t\t\tif(sumArr[j] <\
    \ sumArr[min]){\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tlet temp = sumArr[i];\n\
    \t\tsumArr[i] = sumArr[min];\n\t\tsumArr[min] = temp;\n\t\tlet temp2 = output[i];\n\
    \t\toutput[i] = output[min];\n\t\toutput[min] = temp2;\n\t}\n\treturn output;\n\
    }\n", "\treturn nums.sort(function(a, b){\n\t\t// var a_sum = a.toString().split('').reduce(function(s,\
    \ n){\n\t\t// \treturn parseInt(s) + parseInt(n);\n\t\t// });\n\t\t// var b_sum\
    \ = b.toString().split('').reduce(function(s, n){\n\t\t// \treturn parseInt(s)\
    \ + parseInt(n);\n\t\t// });\n\t\tvar a_sum = a;\n\t\tvar b_sum = b;\n\t\tif(a\
    \ < 0){\n\t\t\ta_sum = a * -1;\n\t\t}\n\t\tif(b < 0){\n\t\t\tb_sum = b * -1;\n\
    \t\t}\n\t\ta_sum = a_sum.toString().split('').reduce(function(s, n){\n\t\t\treturn\
    \ parseInt(s) + parseInt(n);\n\t\t});\n\t\tb_sum = b_sum.toString().split('').reduce(function(s,\
    \ n){\n\t\t\treturn parseInt(s) + parseInt(n);\n\t\t});\n\t\tif(a_sum > b_sum){\n\
    \t\t\treturn 1;\n\t\t}\n\t\telse if(a_sum < b_sum){\n\t\t\treturn -1;\n\t\t}\n\
    \t\telse if(a_sum === b_sum){\n\t\t\tif(nums.indexOf(a) > nums.indexOf(b)){\n\t\
    \t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(nums.indexOf(a) < nums.indexOf(b)){\n\t\
    \t\t\treturn -1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\
    });\n}\n", "\tvar elements = [];\n\tfor(var i = 0; i < nums.length; i++){\n\t\t\
    var sum = 0;\n\t\tvar num = nums[i];\n\t\tif(num < 0){\n\t\t\tnum = Math.abs(num);\n\
    \t\t}\n\t\twhile(num){\n\t\t\tsum += num % 10;\n\t\t\tnum = Math.floor(num / 10);\n\
    \t\t}\n\t\telements.push({index: i, sum: sum, value: nums[i]});\n\t}\n\telements.sort(function(a,\
    \ b){\n\t\tif(a.sum > b.sum){\n\t\t\treturn 1;\n\t\t}\n\t\tif(a.sum < b.sum){\n\
    \t\t\treturn -1;\n\t\t}\n\t\tif(a.index > b.index){\n\t\t\treturn 1;\n\t\t}\n\t\
    \tif(a.index < b.index){\n\t\t\treturn -1;\n\t\t}\n\t\treturn 0;\n\t});\n\tvar\
    \ result = [];\n\tfor(var i = 0; i < elements.length; i++){\n\t\tresult.push(elements[i].value);\n\
    \t}\n\treturn result;\n}\n", "\treturn nums.sort(function(a, b){\n\t\tvar aDigitSum\
    \ = (a+'').split('').reduce(function(prev, curr){return parseInt(prev)+parseInt(curr)},\
    \ 0);\n\t\tvar bDigitSum = (b+'').split('').reduce(function(prev, curr){return\
    \ parseInt(prev)+parseInt(curr)}, 0);\n\t\tif(aDigitSum == bDigitSum){\n\t\t\t\
    return nums.indexOf(a) - nums.indexOf(b);\n\t\t}else{\n\t\t\treturn aDigitSum\
    \ - bDigitSum;\n\t\t}\n\t});\n}\n", "    var obj = {};\n    var newArr = [];\n\
    \    var sortedArr = [];\n    for(var i = 0; i < nums.length; i++){\n        var\
    \ sum = 0;\n        var num = nums[i].toString();\n        for(var j = 0; j <\
    \ num.length; j++){\n            sum += parseInt(num[j]);\n        }\n       \
    \ obj[sum] = nums[i];\n        newArr.push(sum);\n    }\n    for(var x = 0; x\
    \ < newArr.length; x++){\n        var lowest = Math.min.apply(null, newArr);\n\
    \        sortedArr.push(obj[lowest]);\n        newArr.splice(newArr.indexOf(lowest),\
    \ 1);\n    }\n    return sortedArr;\n}", "    var get_sum = function(val){\n \
    \       var sum = 0;\n        while(val != 0){\n            sum += val % 10;\n\
    \            val = Math.floor(val / 10);\n        }\n        return sum;\n   \
    \ };\n    var array_of_tuples = [];\n    for(var i = 0; i < nums.length; i++){\n\
    \        array_of_tuples.push([get_sum(nums[i]), nums[i]]);\n    }\n    var result\
    \ = [];\n    array_of_tuples.sort(function(first, second){\n        if(first[0]\
    \ < second[0]) return -1;\n        if(first[0] > second[0]) return 1;\n      \
    \  return 0;\n    });\n    for(var i = 0; i < array_of_tuples.length; i++){\n\
    \        result.push(array_of_tuples[i][1]);\n    }\n    return result;\n}\n\n",
  "  function sum_digits(num){\n    return num.toString().split('').reduce(function(acc,\
    \ cv){\n      return acc + parseInt(cv);\n    }, 0);\n  }\n  return nums.sort(function(a,\
    \ b){\n    if(sum_digits(a) < sum_digits(b)){\n      return -1;\n    }\n    else\
    \ if(sum_digits(a) > sum_digits(b)){\n      return 1;\n    }\n    else{\n    \
    \  return a - b;\n    }\n  });\n}\n", "  if(!nums.length) return [];\n  let sums\
    \ = nums.map(item => {\n    let sum = 0;\n    let num = Math.abs(item);\n    while(num\
    \ > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n  \
    \  return sum;\n  });\n  let sorted = nums.slice().sort((a, b) => {\n    let asum\
    \ = sums[nums.indexOf(a)];\n    let bsum = sums[nums.indexOf(b)];\n    if(asum\
    \ === bsum) return a - b;\n    return asum - bsum;\n  });\n  return sorted;\n\
    }\n", "\n}\n", "  var sorted_nums = [];\n  var sorted_points = [];\n  var sum_points\
    \ = [];\n  var points = 0;\n  for(var i = 0; i < nums.length; i++){\n    nums[i]\
    \ = nums[i].toString();\n    for(var j = 0; j < nums[i].length; j++){\n      points\
    \ += parseInt(nums[i][j]);\n    }\n    sorted_points.push(points);\n    sum_points.push(points);\n\
    \    points = 0;\n  }\n  // console.log(sorted_points);\n  // console.log(sum_points);\n\
    \  sorted_points.sort(function(a, b){return a - b});\n  // console.log(sorted_points);\n\
    \  for(var i = 0; i < sorted_points.length; i++){\n    for(var j = 0; j < nums.length;\
    \ j++){\n      if(sorted_points[i] === sum_points[j]){\n        sorted_nums.push(nums[j]);\n\
    \        nums[j] = \"\";\n        sum_points[j] = \"\";\n        j = nums.length;\n\
    \      }\n    }\n  }\n  for(var i = 0; i < sorted_nums.length; i++){\n    sorted_nums[i]\
    \ = parseInt(sorted_nums[i]);\n  }\n  return sorted_nums;\n}", "\tvar ret = [];\n\
    \tvar sums = [];\n\tvar sum;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tsum\
    \ = 0;\n\t\tfor(var j = 0; j < nums[i].toString().length; j++){\n\t\t\tsum +=\
    \ Number(nums[i].toString()[j]);\n\t\t}\n\t\tsums.push(sum);\n\t}\n\tfor(var i\
    \ = 0; i < sums.length; i++){\n\t\tfor(var j = i + 1; j < sums.length; j++){\n\
    \t\t\tif(sums[i] > sums[j]){\n\t\t\t\tvar temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\
    \t\t\t\tsums[j] = temp;\n\t\t\t\ttemp = nums[i];\n\t\t\t\tnums[i] = nums[j];\n\
    \t\t\t\tnums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tret = nums;\n\treturn ret;\n}\n",
  "    return nums.map(function(x){\n        return [x, x.toString().split('').reduce(function(a,\
    \ b){\n            return a + +b;\n        }, 0)];\n    }).sort(function(a, b){\n\
    \        return a[1] - b[1] === 0 ? a[0] - b[0] : a[1] - b[1];\n    }).map(function(x){\n\
    \        return x[0];\n    });\n}\n", "    let result = nums.sort((a, b) => sum_of_digits(a)\
    \ - sum_of_digits(b));\n    return result;\n}\n", "    var a = []\n    for(var\
    \ i = 0; i < nums.length; i++){\n        var j = nums[i].toString().split('').reduce(function(total,\
    \ current){\n            return parseInt(total) + parseInt(current)\n        })\n\
    \        a.push(j)\n    }\n    var c = 0\n    while(c < a.length){\n        var\
    \ pos = c\n        for(var i = c; i < a.length; i++){\n            if(a[i] < a[pos]){\n\
    \                pos = i\n            }\n        }\n        var temp = a[c]\n\
    \        a[c] = a[pos]\n        a[pos] = temp\n        c++\n    }\n    var d =\
    \ []\n    for(var i = 0; i < a.length; i++){\n        for(var j = 0; j < nums.length;\
    \ j++){\n            var k = nums[j].toString().split('').reduce(function(total,\
    \ current){\n                return parseInt(total) + parseInt(current)\n    \
    \        })\n            if(a[i] == k){\n                d.push(nums[j])\n   \
    \         }\n        }\n    }\n    return d\n}\n", "  var arr = nums.map(function(num,\
    \ i){\n    var sum = 0;\n    num.toString().split('').forEach(function(digit){\n\
    \      sum += parseInt(digit);\n    });\n    return {num: num, idx: i, sum: sum};\n\
    \  });\n  arr.sort(function(a, b){\n    if(a.sum < b.sum){\n      return -1;\n\
    \    } else if(a.sum > b.sum){\n      return 1;\n    } else {\n      return a.idx\
    \ - b.idx;\n    }\n  });\n  return arr.map(function(el){return el.num;});\n}\n",
  "\tlet result = [];\n\tlet map = {};\n\tlet sum = 0;\n\tfor(let i = 0; i < nums.length;\
    \ i++){\n\t\tlet arr = nums[i].toString().split('');\n\t\tfor(let j = 0; j < arr.length;\
    \ j++){\n\t\t\tsum += parseInt(arr[j]);\n\t\t}\n\t\tif(map[sum] === undefined){\n\
    \t\t\tmap[sum] = [nums[i]];\n\t\t} else {\n\t\t\tmap[sum].push(nums[i]);\n\t\t\
    }\n\t\tsum = 0;\n\t}\n\tlet sorted = Object.keys(map).sort(function(a, b){return\
    \ a - b});\n\tfor(let i = 0; i < sorted.length; i++){\n\t\tresult = result.concat(map[sorted[i]]);\n\
    \t}\n\treturn result;\n}\n", "    function reducer(total, curr){\n        return\
    \ total + curr;\n    }\n    var result = [...nums];\n    result.sort(function(a,\
    \ b){\n        var sumOfA = a.toString().split('').map(Number).reduce(reducer);\n\
    \        var sumOfB = b.toString().split('').map(Number).reduce(reducer);\n  \
    \      if(sumOfA < sumOfB){\n            return -1;\n        }\n        if(sumOfA\
    \ > sumOfB){\n            return 1;\n        }\n        if(sumOfA === sumOfB){\n\
    \            return 0;\n        }\n    });\n    return result;\n}", "    if(nums.length\
    \ == 0){\n        return [];\n    }\n    var sum_nums = nums.map(sum_digits);\n\
    \    var indices = nums.map(function(val,index){\n        return [index, sum_nums[index]];\n\
    \    });\n    indices.sort(function(a,b){\n        return a[1] - b[1];\n    });\n\
    \    var ordered_nums = indices.map(function(val){\n        return nums[val[0]];\n\
    \    });\n    return ordered_nums;\n}\n", "\t// Your code here\n}", "  var arr\
    \ = [];\n  for(var i = 0; i < nums.length; i++){\n    arr.push(nums[i]);\n  }\n\
    \  return arr.sort(function(a, b){\n    var sum_a = 0;\n    var sum_b = 0;\n \
    \   var num_a = Math.abs(a);\n    var num_b = Math.abs(b);\n    while(num_a >\
    \ 0){\n      sum_a += num_a % 10;\n      num_a = Math.floor(num_a / 10);\n   \
    \ }\n    while(num_b > 0){\n      sum_b += num_b % 10;\n      num_b = Math.floor(num_b\
    \ / 10);\n    }\n    if(sum_a < sum_b){\n      return -1;\n    }\n    else if(sum_a\
    \ > sum_b){\n      return 1;\n    }\n    else{\n      return 0;\n    }\n  });\n\
    }\n", "  var mapped = nums.map(function(num, index) {\n    var sum = Math.abs(num).toString().split('').reduce(function(a,\
    \ b) {\n      return parseInt(a) + parseInt(b);\n    });\n    return { num: num,\
    \ sum: sum, index: index };\n  });\n  mapped.sort(function(a, b) {\n    if (a.sum\
    \ === b.sum) {\n      return a.index - b.index;\n    }\n    return a.sum - b.sum;\n\
    \  });\n  return mapped.map(function(item) {\n    return item.num;\n  });\n}",
  "  const numsByPoints = nums.map(function(num){\n    let sum = 0;\n    const digits\
    \ = num.toString().split('');\n    digits.forEach(function(digit){\n      sum\
    \ += parseInt(digit);\n    });\n    return [num, sum];\n  });\n  numsByPoints.sort(function(a,\
    \ b){\n    if (a[1] < b[1]){\n      return -1;\n    }\n    if (a[1] > b[1]){\n\
    \      return 1;\n    }\n    return a[0] - b[0];\n  });\n  return numsByPoints.map(function(num){\n\
    \    return num[0];\n  });\n}", "    if(nums.length === 0){\n        return nums;\n\
    \    }\n    const sums = nums.map(num => sum_of_digits(num));\n    const order\
    \ = sums.map((sum, i) => [sum, i]).sort((a, b) => a[0] - b[0]);\n    const result\
    \ = [];\n    for(let i = 0; i < order.length; i++){\n        result.push(nums[order[i][1]]);\n\
    \    }\n    return result;\n}\n", "    return nums.sort(function(a, b){\n    \
    \    return a.toString().split('').reduce(function(a, b){return parseInt(a)+parseInt(b)},\
    \ 0)\n            - b.toString().split('').reduce(function(a, b){return parseInt(a)+parseInt(b)},\
    \ 0);\n    });\n}", "    // let sorted = nums.map(x => x.toString().split('')).sort((a,\
    \ b) => a - b);\n    let sorted = nums.map(x => x.toString().split('')).sort((a,\
    \ b) => {\n        let suma = 0;\n        let sumb = 0;\n        a.forEach(x =>\
    \ suma += Number(x));\n        b.forEach(x => sumb += Number(x));\n        return\
    \ suma - sumb;\n    });\n    let array = [];\n    sorted.forEach(x => array.push(x.join('')));\n\
    \    return array;\n}", "    const sumOfDigits = (n) => {\n        const sum =\
    \ n.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);\n   \
    \     return sum;\n    }\n    return nums.sort((a, b) => sumOfDigits(a) - sumOfDigits(b));\n\
    }", "  let sort_by_sum = nums.map(x => x.toString().split('').reduce((a,b) =>\
    \ parseInt(a) + parseInt(b)));\n  let point_dict = {}\n  for (let i=0; i<sort_by_sum.length;\
    \ i++){\n    point_dict[sort_by_sum[i]] = nums[i];\n  }\n  let sorted_sum = sort_by_sum.sort((a,b)\
    \ => a-b);\n  let sorted_points = sorted_sum.map(a => point_dict[a]);\n  return\
    \ sorted_points;\n}\n", "  if(nums.length < 2){\n    return nums;\n  }\n  var\
    \ left = [];\n  var right = [];\n  var pivot = nums[0];\n  var sum = 0;\n  for(var\
    \ i = 0; i < nums.length; i++){\n    sum = 0;\n    while(nums[i] > 0){\n     \
    \ sum += nums[i] % 10;\n      nums[i] = parseInt(nums[i] / 10);\n    }\n    if(sum\
    \ <= pivot){\n      left.push(nums[i]);\n    }else{\n      right.push(nums[i]);\n\
    \    }\n  }\n  return order_by_points(left).concat(pivot, order_by_points(right));\n\
    }", "  return nums.map(sum_digits).sort((a, b) => b.sum - a.sum).map(x => x.num);\n\
    }\n", "    let orderArr = [];\n    let sum = 0;\n    let numArr = [];\n    nums.forEach(num\
    \ => {\n        numArr = num.toString().split('');\n        numArr.forEach(digit\
    \ => {\n            sum += parseInt(digit);\n        });\n        orderArr.push(sum\
    \ + '-' + num);\n        sum = 0;\n    });\n    orderArr.sort();\n    orderArr.forEach((num,\
    \ i) => {\n        orderArr[i] = parseInt(num.slice(num.indexOf('-') + 1));\n\
    \    });\n    return orderArr;\n}", "    if (nums.length == 0) {\n        return\
    \ [];\n    }\n    var sum = [];\n    for (var i = 0; i < nums.length; i++) {\n\
    \        sum.push(get_sum(nums[i]));\n    }\n    sum.sort(function(a, b){return\
    \ a-b});\n    var res = [];\n    for (var i = 0; i < sum.length; i++) {\n    \
    \    for (var j = 0; j < nums.length; j++) {\n            if (sum[i] == get_sum(nums[j]))\
    \ {\n                res.push(nums[j]);\n                nums[j] = -1;\n     \
    \           break;\n            }\n        }\n    }\n    return res;\n}", "  \
    \  function getSumOfDigits(num){\n        return String(num).split('').reduce((acc,\
    \ curr) => {\n            return acc + Number(curr);\n        }, 0);\n    }\n\
    \    return nums.sort((a, b) => {\n        let sumA = getSumOfDigits(a);\n   \
    \     let sumB = getSumOfDigits(b);\n        if(sumA > sumB){\n            return\
    \ 1;\n        }\n        if(sumA < sumB){\n            return -1;\n        }\n\
    \        return a - b;\n    });\n}", "  let newArr = nums.map(num => {\n    return\
    \ {'index': nums.indexOf(num), 'points': num};\n  });\n  let sorted = newArr.sort((a,\
    \ b) => {\n    let first = 0;\n    let second = 0;\n    let num1 = a.points.toString();\n\
    \    let num2 = b.points.toString();\n    for (let i = 0; i < num1.length; i++)\
    \ {\n      first += parseInt(num1[i]);\n    }\n    for (let i = 0; i < num2.length;\
    \ i++) {\n      second += parseInt(num2[i]);\n    }\n    if (first < second) {\n\
    \      return -1;\n    } else if (first > second) {\n      return 1;\n    } else\
    \ {\n      return a.index - b.index;\n    }\n  });\n  return sorted.map(obj =>\
    \ obj.points);\n}", "    // let map = new Map();\n    // for(let i = 0; i < nums.length;\
    \ i++){\n    //     let sum = 0;\n    //     for(let j = 0; j < nums[i].toString().length;\
    \ j++){\n    //         sum += parseInt(nums[i].toString()[j]);\n    //     }\n\
    \    //     map.set(nums[i], sum);\n    // }\n    // let sortedMap = new Map([...map.entries()].sort((a,\
    \ b) => a[1] - b[1]));\n    // console.log(sortedMap);\n    // let sortedArray\
    \ = [];\n    // for(let value of sortedMap.values()){\n    //     sortedArray.push(value);\n\
    \    // }\n    // console.log(sortedArray);\n    let newNums = nums.map(function(num){\n\
    \        let sum = 0;\n        for(let i = 0; i < num.toString().length; i++){\n\
    \            sum += parseInt(num.toString()[i]);\n        }\n        return {number:\
    \ num, sum: sum};\n    });\n    newNums.sort(function(a, b){\n        if(a.sum\
    \ < b.sum){\n            return -1;\n        }\n        if(a.sum > b.sum){\n \
    \           return 1;\n        }\n        return 0;\n    });\n    return newNums.map(function(num){\n\
    \        return num.number;\n    });\n}", "    if(nums.length===0){\n        return\
    \ [];\n    }\n    let sum_of_digits=function(item){\n        let sum=0;\n    \
    \    item=Math.abs(item);\n        while(item>0){\n            sum+=item%10;\n\
    \            item=Math.floor(item/10);\n        }\n        return sum;\n    };\n\
    \    let answer=[];\n    for(let i=0;i<nums.length;i++){\n        answer.push([nums[i],sum_of_digits(nums[i])]);\n\
    \    }\n    answer.sort(function(a,b){\n        if(a[1]>b[1]){\n            return\
    \ 1;\n        }\n        else if(a[1]<b[1]){\n            return -1;\n       \
    \ }\n        else{\n            return 0;\n        }\n    });\n    for(let i=0;i<answer.length;i++){\n\
    \        answer[i]=answer[i][0];\n    }\n    return answer;\n}", "    var obj\
    \ = {};\n    for(let i = 0; i < nums.length; i++){\n        var sum = nums[i].toString().split('').reduce((prev,\
    \ curr) => parseInt(prev) + parseInt(curr), 0);\n        obj[nums[i]] = sum;\n\
    \    }\n    var sorted_nums = Object.keys(obj).sort((a, b) => obj[a] - obj[b]);\n\
    \    return sorted_nums;\n}\n", "    let data = nums.map((n, i) => {\n       \
    \ return {\n            sum: n.toString().split('').reduce((acc, cur) => acc +\
    \ +cur, 0),\n            index: i\n        }\n    })\n    data.sort((x, y) =>\
    \ {\n        if (x.sum > y.sum) return 1\n        if (x.sum < y.sum) return -1\n\
    \        if (x.index > y.index) return 1\n        if (x.index < y.index) return\
    \ -1\n        return 0\n    })\n    return data.map(x => nums[x.index])\n}", " \
    \   return nums.sort(function(a, b){\n        return (sum_digits(a) > sum_digits(b))\
    \ ? 1 : -1;\n    });\n}\n", "    nums.sort(function(a, b){\n        return sumDigits(a)\
    \ - sumDigits(b);\n    });\n    return nums;\n}\n", "  let sortedArray = nums.sort(function(a,\
    \ b){\n    return sumDigits(a) - sumDigits(b);\n  });\n  return sortedArray;\n\
    }\n\norder_by_points([1, 11, -1, -11, -12]);\n\n\n", "    //YOUR CODE HERE\n}\n",
  "  var newNums = [];\n  for(var i = 0; i < nums.length; i++){\n    if(nums[i] <\
    \ 0){\n      newNums.push(nums[i]);\n    }\n  }\n  for(var i = 0; i < nums.length;\
    \ i++){\n    if(nums[i] > 0){\n      newNums.push(nums[i]);\n    }\n  }\n  return\
    \ newNums;\n}\n", "    return nums.sort(function(a, b){\n        if(sumDigits(a)\
    \ < sumDigits(b)){\n            return -1;\n        }\n        if(sumDigits(a)\
    \ > sumDigits(b)){\n            return 1;\n        }\n        return 0;\n    });\n\
    }\n", "    return nums.sort(function(a, b){\n        if(sum_digits(a) > sum_digits(b))\
    \ return 1;\n        if(sum_digits(a) < sum_digits(b)) return -1;\n        if(sum_digits(a)\
    \ == sum_digits(b)) return (a > b ? 1 : -1);\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
