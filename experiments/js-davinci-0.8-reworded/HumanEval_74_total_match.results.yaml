language: js
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        for(var j = 0;\
    \ j < lst1[i].length; j++){\n            sum1 += lst1[i].charCodeAt(j);\n    \
    \    }\n    }\n    for(var i = 0; i < lst2.length; i++){\n        for(var j =\
    \ 0; j < lst2[i].length; j++){\n            sum2 += lst2[i].charCodeAt(j);\n \
    \       }\n    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    return\
    \ lst2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpyqoui5oi.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyqoui5oi.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum_lst1 = 0;\n\
    \    let sum_lst2 = 0;\n    for(let item of lst1){\n        sum_lst1 += item.length;\n\
    \    }\n    for(let item of lst2){\n        sum_lst2 += item.length;\n    }\n\
    \    if(sum_lst1 > sum_lst2){\n        return lst2;\n    }\n    else{\n      \
    \  return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total_sum1 = 0;\n\
    \    var total_sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total_sum1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total_sum2 += lst2[i].length;\n    }\n    if(total_sum1 == total_sum2){\n\
    \        return lst1;\n    }\n    else if(total_sum1 < total_sum2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 === total2){\n        return\
    \ lst1;\n    }\n    else if(total1 < total2){\n        return lst1;\n    }\n \
    \   else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  const sum1 = array_sum(lst1);\n\
    \  const sum2 = array_sum(lst2);\n  if (sum1 > sum2){\n    return lst2;\n  }\n\
    \  else if (sum1 === sum2){\n    return lst1;\n  }\n  else{\n    return lst1;\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_n6p3v79.js:16\n  const sum1 = array_sum(lst1);\n             \
    \  ^\n\nReferenceError: array_sum is not defined\n    at total_match (/tmp/tmp_n6p3v79.js:16:16)\n\
    \    at test (/tmp/tmp_n6p3v79.js:33:20)\n    at Object.<anonymous> (/tmp/tmp_n6p3v79.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst1_count = 0;\n\
    \    var lst2_count = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_count\
    \ += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n     \
    \   lst2_count += lst2[j].length;\n    }\n    if(lst1_count == lst2_count){\n\
    \        return lst1;\n    }\n    else if(lst1_count < lst2_count){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpmwsy1o2f.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmwsy1o2f.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let count = 0;\n  let\
    \ count2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    for(let j = 0; j <\
    \ lst1[i].length; j++){\n      count++;\n    }\n  }\n  for(let k = 0; k < lst2.length;\
    \ k++){\n    for(let l = 0; l < lst2[k].length; l++){\n      count2++;\n    }\n\
    \  }\n  if(count < count2){\n    return lst1;\n  }\n  else if(count > count2){\n\
    \    return lst2;\n  }\n  else{\n    return lst1;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 && lst2.length === 0){\n        return [];\n    }\n    let sum1 = 0;\n   \
    \ let sum2 = 0;\n    for (let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2){\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpntm5iies.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpntm5iies.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    total = 0;\n    total2\
    \ = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n\
    \    }\n    if(total == total2 || total < total2){\n        return lst1;\n   \
    \ }else{\n        return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else{\n       \
    \ return lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpil6w8coq.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpil6w8coq.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length < 1\
    \ && lst2.length < 1){\n        return [];\n    }\n    else if (lst1.length <\
    \ 1 && lst2.length > 0){\n        return lst2;\n    }\n    else if (lst1.length\
    \ > 0 && lst2.length < 1){\n        return lst1;\n    }\n    var total1 = 0;\n\
    \    var total2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n    \
    \    total2 += lst2[i].length;\n    }\n    if (total1 > total2){\n        return\
    \ lst2;\n    }\n    else if (total1 < total2){\n        return lst1;\n    }\n\
    \    else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'this' ]\n\nshould equal\n\n[]\n    at\
    \ test (/tmp/tmpskvis2pt.js:55:10)\n    at Object.<anonymous> (/tmp/tmpskvis2pt.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'this' ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylogwgp1.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpylogwgp1.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0\n   \
    \ var total2 = 0\n    for (let i=0; i<lst1.length; i++){\n        total1 += lst1[i].length\n\
    \    }\n    for (let i=0; i<lst2.length; i++){\n        total2 += lst2[i].length\n\
    \    }\n    if (total1 > total2){\n        return lst2\n    }\n    else{\n   \
    \     return lst1\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let len1 = 0;\n  let len2\
    \ = 0;\n  for(let i = 0; i < lst1.length; i++){\n    len1 += lst1[i].length;\n\
    \  }\n  for(let i = 0; i < lst2.length; i++){\n    len2 += lst2[i].length;\n \
    \ }\n  if(len1 === len2){\n    return lst1;\n  }else if(len1 < len2){\n    return\
    \ lst1;\n  }else{\n    return lst2;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    const lst1_lst = lst1.map(function(elem){\n\
    \        return elem.length;\n    })\n    const lst2_lst = lst2.map(function(elem){\n\
    \        return elem.length;\n    })\n    const lst1_total = lst1_lst.reduce(function(acc,\
    \ elem){\n        return acc + elem;\n    })\n    const lst2_total = lst2_lst.reduce(function(acc,\
    \ elem){\n        return acc + elem;\n    })\n    if (lst1_total < lst2_total){\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplx13m7wy.js:22\n    const lst1_total = lst1_lst.reduce(function(acc,\
    \ elem){\n                                ^\n\nTypeError: Reduce of empty array\
    \ with no initial value\n    at Array.reduce (<anonymous>)\n    at total_match\
    \ (/tmp/tmplx13m7wy.js:22:33)\n    at test (/tmp/tmplx13m7wy.js:39:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplx13m7wy.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let number_of_chars_1\
    \ = 0;\n    let number_of_chars_2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n\
    \        number_of_chars_1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        number_of_chars_2 += lst2[i].length;\n    }\n    if(number_of_chars_1\
    \ < number_of_chars_2){\n        return lst1;\n    }else{\n        return lst2;\n\
    \    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n \
    \ assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"\
    hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpzarfrt1s.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzarfrt1s.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1_char_count\
    \ = 0;\n    let lst2_char_count = 0;\n    for(let i = 0; i < lst1.length; i++){\n\
    \        lst1_char_count += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        lst2_char_count += lst2[i].length;\n    }\n    if(lst1_char_count\
    \ > lst2_char_count){\n        return lst2;\n    }\n    else{\n        return\
    \ lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar chars1 = 0;\n\tvar\
    \ chars2 = 0;\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tchars1 += lst1[i].length;\n\
    \t}\n\tfor(var i = 0; i < lst2.length; i++){\n\t\tchars2 += lst2[i].length;\n\t\
    }\n\tif(chars1 < chars2){\n\t\treturn lst1;\n\t}\n\telse{\n\t\treturn lst2;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpjgr_5rcj.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjgr_5rcj.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tif (lst1 == []){\n\t\t\
    return lst1;\n\t}\n\tif (lst2 == []){\n\t\treturn lst2;\n\t}\n\tvar chars1 = 0;\n\
    \tvar chars2 = 0;\n\tfor (i=0; i<lst1.length; i++){\n\t\tchars1 += lst1[i].length;\n\
    \t}\n\tfor (i=0; i<lst2.length; i++){\n\t\tchars2 += lst2[i].length;\n\t}\n\t\
    if (chars1 > chars2){\n\t\treturn lst2;\n\t}\n\telse if (chars1 < chars2){\n\t\
    \treturn lst1;\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let cnt1 = 0;\n    let\
    \ cnt2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        cnt1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        cnt2 += lst2[i].length;\n\
    \    }\n    if(cnt1 < cnt2){\n        return lst1;\n    }else{\n        return\
    \ lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp_scqr70q.js:41:10)\n    at Object.<anonymous> (/tmp/tmp_scqr70q.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let\
    \ sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        for(let j = 0;\
    \ j < lst1[i].length; j++){\n            sum1++;\n        }\n    }\n    for(let\
    \ i = 0; i < lst2.length; i++){\n        for(let j = 0; j < lst2[i].length; j++){\n\
    \            sum2++;\n        }\n    }\n    if(sum1 < sum2){\n        return lst1;\n\
    \    }\n    return lst2;\n}\n\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpoq_uwyde.js:46:10)\n    at Object.<anonymous> (/tmp/tmpoq_uwyde.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var x in lst1){\n        sum1 += lst1[x].length;\n    }\n\
    \    for(var x in lst2){\n        sum2 += lst2[x].length;\n    }\n    if(sum1\
    \ < sum2){\n        return lst1;\n    }\n    else if(sum1 > sum2){\n        return\
    \ lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = total_chars(lst1);\n\
    \    var total2 = total_chars(lst2);\n    if (total1 < total2){\n        return\
    \ lst1;\n    } else if (total2 < total1){\n        return lst2;\n    } else {\n\
    \        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjrlgj_m9.js:16\n    var total1 = total_chars(lst1);\n         \
    \        ^\n\nReferenceError: total_chars is not defined\n    at total_match (/tmp/tmpjrlgj_m9.js:16:18)\n\
    \    at test (/tmp/tmpjrlgj_m9.js:32:20)\n    at Object.<anonymous> (/tmp/tmpjrlgj_m9.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total_1 = 0;\n \
    \   var total_2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total_1\
    \ += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n     \
    \   total_2 += lst2[j].length;\n    }\n    if(total_1 < total_2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpjir169o5.js:42:10)\n    at Object.<anonymous> (/tmp/tmpjir169o5.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count_lst1 = 0;\n\
    \    var count_lst2 = 0;\n    for(i = 0; i < lst1.length; i++){\n        count_lst1\
    \ += lst1[i].length;\n    }\n    for(i = 0; i < lst2.length; i++){\n        count_lst2\
    \ += lst2[i].length;\n    }\n    if(count_lst1 < count_lst2){\n        return\
    \ lst1;\n    }\n    else if(count_lst1 > count_lst2){\n        return lst2;\n\
    \    }\n    else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    sum1 = 0;\n    sum2\
    \ = 0;\n    for(i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 == sum2){\n        return lst1;\n    }\n    else if(sum1 <\
    \ sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }else{\n        return\
    \ lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpuw2151dq.js:42:10)\n    at Object.<anonymous> (/tmp/tmpuw2151dq.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    function total_chars(lst){\n\
    \        if (lst.length == 0){\n            return 0;\n        } else {\n    \
    \        return lst[0].length + total_chars(lst.slice(1))\n        }\n    }\n\
    \    let num1 = total_chars(lst1);\n    let num2 = total_chars(lst2);\n    if\
    \ (num1 < num2){\n        return lst1;\n    } else {\n        return lst2;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmptloi3w2l.js:43:10)\n    at Object.<anonymous> (/tmp/tmptloi3w2l.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let first_len = 0;\n\
    \    let second_len = 0;\n    for(let i = 0; i < lst1.length; i++){\n        first_len\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   second_len += lst2[i].length;\n    }\n    if(first_len > second_len){\n  \
    \      return lst2;\n    }\n    return lst1;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var total_chars1 = lst1.join('').length;\n\
    \  var total_chars2 = lst2.join('').length;\n  if (total_chars1 > total_chars2){\n\
    \    return lst2;\n  } else {\n    return lst1;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var sum1 = 0;\n  var sum2\
    \ = 0;\n  for(var i = 0; i < lst1.length; i++){\n    sum1 += lst1[i].length;\n\
    \  }\n  for(var i = 0; i < lst2.length; i++){\n    sum2 += lst2[i].length;\n \
    \ }\n  if(sum1 < sum2){\n    return lst1;\n  }\n  return lst2;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp_39ao2fp.js:41:10)\n    at Object.<anonymous> (/tmp/tmp_39ao2fp.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylogwgp1.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpylogwgp1.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    total = 0;\n    for(let\
    \ i = 0; i < lst1.length; i++){\n        total += lst1[i].length;\n    }\n   \
    \ total2 = 0;\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n\
    \    }\n    if(total < total2){\n        return lst1;\n    }else{\n        return\
    \ lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp7wm2zj97.js:41:10)\n    at Object.<anonymous> (/tmp/tmp7wm2zj97.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst1_char = 0;\n\
    \    var lst2_char = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_char\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   lst2_char += lst2[i].length;\n    }\n    if(lst1_char < lst2_char){\n    \
    \    return lst1;\n    }\n    return lst2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp47rg7sqt.js:40:10)\n    at Object.<anonymous> (/tmp/tmp47rg7sqt.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let len_lst1 = 0;\n\
    \    let len_lst2 = 0;\n    for(let i=0; i<lst1.length; i++){\n        len_lst1\
    \ += lst1[i].length;\n    }\n    for(let i=0; i<lst2.length; i++){\n        len_lst2\
    \ += lst2[i].length;\n    }\n    if(len_lst1 < len_lst2){\n        return lst1;\n\
    \    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpqitpf0qt.js:42:10)\n    at Object.<anonymous> (/tmp/tmpqitpf0qt.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let lst1_chars = 0;\n\
    \  let lst2_chars = 0;\n  for (let i = 0; i < lst1.length; i++){\n    lst1_chars\
    \ += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++){\n    lst2_chars\
    \ += lst2[i].length;\n  }\n  if (lst1_chars > lst2_chars){\n    return lst2;\n\
    \  }\n  else if (lst1_chars < lst2_chars){\n    return lst1;\n  }\n  else {\n\
    \    return lst1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if ( lst1.length ==\
    \ 0 && lst2.length == 0){\n        return []\n    }\n    else if (lst1.length\
    \ == 0){\n        return lst2\n    }\n    else if (lst2.length == 0){\n      \
    \  return lst1\n    }\n    else{\n        sum1 = 0\n        sum2 = 0\n       \
    \ for (let i = 0; i < lst1.length; i++){\n            sum1 += lst1[i].length\n\
    \        }\n        for (let i = 0; i < lst2.length; i++){\n            sum2 +=\
    \ lst2[i].length\n        }\n        if (sum1 < sum2){\n            return lst1\n\
    \        }\n        else{\n            return lst2\n        }\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpl5rvg4hg.js:53:10)\n    at Object.<anonymous> (/tmp/tmpl5rvg4hg.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 > count2){\n        return\
    \ lst2;\n    }\n    else if(count1 < count2){\n        return lst1;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0\n   \
    \ var total2 = 0\n    if (lst1.length == 0 && lst2.length == 0){\n        return\
    \ []\n    }\n    else{\n        for (var i = 0; i < lst1.length; i++){\n     \
    \       total1 += lst1[i].length\n        }\n        for (var j = 0; j < lst2.length;\
    \ j++){\n            total2 += lst2[j].length\n        }\n        if (total1 <\
    \ total2){\n            return lst1\n        }\n        else{\n            return\
    \ lst2\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpdjc4chx2.js:47:10)\n    at Object.<anonymous> (/tmp/tmpdjc4chx2.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let newList = [];\n\
    \    let count1 = 0;\n    let count2 = 0;\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        count1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n\
    \        newList = lst1;\n    }else if(count1 > count2){\n        newList = lst2;\n\
    \    }else{\n        newList = lst1;\n    }\n    return newList;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0\n   \
    \ var count2 = 0\n    for(var i = 0; i < lst1.length; i++){\n        count1 +=\
    \ lst1[i].length\n    }\n    for(var i = 0; i < lst2.length; i++){\n        count2\
    \ += lst2[i].length\n    }\n    if(count1 < count2){\n        return lst1\n  \
    \  }else{\n        return lst2\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp7u4whnci.js:41:10)\n    at Object.<anonymous> (/tmp/tmp7u4whnci.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  if (lst1.length === 0\
    \ && lst2.length === 0){\n    return []\n  }else{\n    var lst1_sum = 0\n    var\
    \ lst2_sum = 0\n    for (var i = 0; i < lst1.length; i++){\n      lst1_sum +=\
    \ lst1[i].length\n    }\n    for (var i = 0; i < lst2.length; i++){\n      lst2_sum\
    \ += lst2[i].length\n    }\n    if (lst1_sum === lst2_sum){\n      return lst1\n\
    \    }else if (lst1_sum < lst2_sum){\n      return lst1\n    }else{\n      return\
    \ lst2\n    }\n  }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //YOUR CODE HERE\n \
    \   var sum1 = 0;\n    var sum2 = 0;\n    for (i = 0; i < lst1.length; i++){\n\
    \        sum1 += lst1[i].length;\n    }\n    for (i = 0; i < lst2.length; i++){\n\
    \        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2){\n        return\
    \ lst1;\n    }\n    else if (sum1 > sum2){\n        return lst2;\n    }\n    else\
    \ {\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpfgmq_s7g.js:43:10)\n    at Object.<anonymous> (/tmp/tmpfgmq_s7g.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total_chars1 = 0;\n\
    \    let total_chars2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n      \
    \  total_chars1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        total_chars2 += lst2[i].length;\n    }\n    if(total_chars1 <\
    \ total_chars2){\n        return lst1;\n    }else{\n        return lst2;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpt5g711aj.js:42:10)\n    at Object.<anonymous> (/tmp/tmpt5g711aj.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var total1 = 0\n  var\
    \ total2 = 0\n  for (var i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length\n\
    \  }\n  for (var i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length\n\
    \  }\n  if (total1 < total2){\n    return lst1\n  } else if (total1 > total2){\n\
    \    return lst2\n  } else {\n    return lst1\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var cnt1 = 0;\n    var\
    \ cnt2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        cnt1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        cnt2 += lst2[i].length;\n\
    \    }\n    if(cnt1 < cnt2){\n        return lst1;\n    }\n    return lst2;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpqc9c0pt7.js:40:10)\n    at Object.<anonymous> (/tmp/tmpqc9c0pt7.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar num1 = 0;\n\tvar num2\
    \ = 0;\n\tif (lst1.length == 0){\n\t\treturn lst1;\n\t}\n\tfor (var i = 0; i <\
    \ lst1.length; i++){\n\t\tnum1 += lst1[i].length;\n\t}\n\tfor (var i = 0; i <\
    \ lst2.length; i++){\n\t\tnum2 += lst2[i].length;\n\t}\n\tif (num1 < num2){\n\t\
    \treturn lst1;\n\t}\n\telse{\n\t\treturn lst2;\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp2ch3q93a.js:45:10)\n    at Object.<anonymous> (/tmp/tmp2ch3q93a.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n     \
    \   count2 += lst2[j].length;\n    }\n    if(count1 == count2){\n        return\
    \ lst1;\n    }\n    else if(count1 < count2){\n        return lst1;\n    }\n \
    \   else{\n        return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }\n    else if(total1 > total2){\n        return lst2;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let\
    \ sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 == sum2){\n        return lst1;\n    }\n    if(sum1 < sum2){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    lst1_count = 0;\n  \
    \  lst2_count = 0;\n    for (var i = 0; i < lst1.length; i++){\n        lst1_count\
    \ += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n    \
    \    lst2_count += lst2[i].length;\n    }\n    if (lst1_count < lst2_count){\n\
    \        return lst1;\n    }\n    else if (lst1_count > lst2_count){\n       \
    \ return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ || lst2.length == 0){\n        return [];\n    }\n    let tot1 = 0;\n    let\
    \ tot2 = 0;\n    for (let i = 0; i < lst1.length; i++){\n        tot1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++){\n        tot2 += lst2[i].length;\n\
    \    }\n    if (tot1 < tot2){\n        return lst1;\n    }\n    else if (tot2\
    \ < tot1){\n        return lst2;\n    }\n    else{\n        return lst1;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let len1 = 0;\n    let\
    \ len2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        len1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        len2 += lst2[i].length;\n\
    \    }\n    if(len1 == len2){\n        return lst1;\n    }\n    else if(len1 <\
    \ len2){\n        return lst1;\n    }\n    else if(len1 > len2){\n        return\
    \ lst2;\n    }\n    else{\n        return \"Empty\";\n    }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total_lst1 = 0;\n\
    \    var total_lst2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total_lst1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total_lst2 += lst2[i].length;\n    }\n    if(total_lst1 > total_lst2){\n \
    \       return lst2;\n    }\n    return lst1;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821136
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length==0){\n\
    \        return lst1;\n    }\n    else if (lst2.length==0){\n        return lst2;\n\
    \    }\n    else{\n        let length1=0;\n        let length2=0;\n        for\
    \ (i=0; i<lst1.length; i++){\n            length1+=lst1[i].length;\n        }\n\
    \        for (i=0; i<lst2.length; i++){\n            length2+=lst2[i].length;\n\
    \        }\n        if (length1<length2){\n            return lst1;\n        }\n\
    \        else{\n            return lst2;\n        }\n    }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpleazv5gj.js:50:10)\n    at Object.<anonymous> (/tmp/tmpleazv5gj.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1_total = 0\n\
    \    let lst2_total = 0\n    for (i = 0; i < lst1.length; i++){\n        lst1_total\
    \ += lst1[i].length\n    }\n    for (i = 0; i < lst2.length; i++){\n        lst2_total\
    \ += lst2[i].length\n    }\n    if (lst1_total < lst2_total){\n        return\
    \ lst1\n    }\n    else if (lst1_total > lst2_total){\n        return lst2\n \
    \   }\n    else {\n        return lst1\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1Total = 0;\n\
    \    let lst2Total = 0;\n    for(let i = 0; i < lst1.length; i++){\n        lst1Total\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   lst2Total += lst2[i].length;\n    }\n    if(lst1Total < lst2Total){\n    \
    \    return lst1;\n    }else{\n        return lst2;\n    }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp72614u50.js:41:10)\n    at Object.<anonymous> (/tmp/tmp72614u50.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count_1 = 0;\n \
    \   let count_2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        for(let\
    \ n = 0; n < lst1[i].length; n++){\n            count_1 += 1;\n        }\n   \
    \ }\n    for(let i = 0; i < lst2.length; i++){\n        for(let n = 0; n < lst2[i].length;\
    \ n++){\n            count_2 += 1;\n        }\n    }\n    if(count_1 < count_2){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpcqz1p5r4.js:47:10)\n    at Object.<anonymous> (/tmp/tmpcqz1p5r4.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var chars1 = 0\n  var\
    \ chars2 = 0\n  for (var i = 0; i < lst1.length; i++){\n    chars1 += lst1[i].length\n\
    \  }\n  for (var i = 0; i < lst2.length; i++){\n    chars2 += lst2[i].length\n\
    \  }\n  if (chars1 < chars2){\n    return lst1\n  }\n  else{\n    return lst2\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpvv22ft1k.js:42:10)\n    at Object.<anonymous> (/tmp/tmpvv22ft1k.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let newlst = []\n  \
    \  let total1 = 0\n    let total2 = 0\n    for(let i = 0; i < lst1.length; i++){\n\
    \        total1 += lst1[i].length\n    }\n    for(let j = 0; j < lst2.length;\
    \ j++){\n        total2 += lst2[j].length\n    }\n    if(total1 < total2){\n \
    \       return lst1\n    }else if(total1 > total2){\n        return lst2\n   \
    \ }else{\n        return lst1\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar sum1 = 0;\n\tvar sum2\
    \ = 0;\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tsum1 += lst1[i].length;\n\
    \t}\n\tfor(var i = 0; i < lst2.length; i++){\n\t\tsum2 += lst2[i].length;\n\t\
    }\n\tif(sum1 < sum2){\n\t\treturn lst1;\n\t}\n\telse{\n\t\treturn lst2;\n\t}\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp826_muha.js:42:10)\n    at Object.<anonymous> (/tmp/tmp826_muha.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0\n   \
    \ var count2 = 0\n    for(var str of lst1){\n        count1 += str.length\n  \
    \  }\n    for(var str of lst2){\n        count2 += str.length\n    }\n    if(count1\
    \ > count2){\n        return lst2\n    }\n    else if(count1 < count2){\n    \
    \    return lst1\n    }\n    else{\n        return lst1\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var one = 0;\n    var\
    \ two = 0;\n    for(var i = 0; i < lst1.length; i++){\n        for(var j = 0;\
    \ j < lst1[i].length; j++){\n            one++;\n        }\n    }\n    for(var\
    \ i = 0; i < lst2.length; i++){\n        for(var j = 0; j < lst2[i].length; j++){\n\
    \            two++;\n        }\n    }\n    if(one < two){\n        return lst1;\n\
    \    }else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpb13_1qr4.js:45:10)\n    at Object.<anonymous> (/tmp/tmpb13_1qr4.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp4lb49nnb.js:40:10)\n    at Object.<anonymous> (/tmp/tmp4lb49nnb.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let\
    \ sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }else{\n        return\
    \ lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpz3szd48x.js:41:10)\n    at Object.<anonymous> (/tmp/tmpz3szd48x.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //your code here\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpp8s9x0_1.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpp8s9x0_1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var len1 = 0;\n    var\
    \ len2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        len1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        len2 += lst2[i].length;\n\
    \    }\n    if(len1 == len2){\n        return lst1;\n    }\n    if(len1 < len2){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count_lst1 = 0;\n\
    \    let count_lst2 = 0;\n    for(let i=0; i<lst1.length; i++){\n        count_lst1\
    \ += lst1[i].length;\n    }\n    for(let i=0; i<lst2.length; i++){\n        count_lst2\
    \ += lst2[i].length;\n    }\n    if(count_lst1 < count_lst2){\n        return\
    \ lst1;\n    }\n    else if(count_lst1 > count_lst2){\n        return lst2;\n\
    \    }\n    else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst1_len = 0;\n\
    \    var lst2_len = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_len\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   lst2_len += lst2[i].length;\n    }\n    if(lst1_len < lst2_len){\n       \
    \ return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nvar lst1 = [\"\
    4\"];\nvar lst2 = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp1z2s7ddd.js:44:10)\n    at Object.<anonymous> (/tmp/tmp1z2s7ddd.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 && lst2.length === 0){\n        return []\n    }\n    if (lst1.length ===\
    \ lst2.length){\n        return lst1\n    }\n    var arr1 = lst1.join('')\n  \
    \  var arr2 = lst2.join('')\n    if (arr1.length < arr2.length){\n        return\
    \ lst1\n    }\n    return lst2\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmp7s6p4zcb.js:36:10)\n    at Object.<anonymous> (/tmp/tmp7s6p4zcb.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = 0;\n  \
    \  let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else if(count1 > count2){\n        return lst2;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length==0&&lst2.length==0){\n\
    \        return [];\n    }\n    // lst1_total=0;\n    // lst2_total=0;\n    //\
    \ for (let i=0; i<lst1.length; i++){\n    //     for (let j=0; j<lst1[i].length;\
    \ j++){\n    //         lst1_total+=1;\n    //     }\n    // }\n    // for (let\
    \ i=0; i<lst2.length; i++){\n    //     for (let j=0; j<lst2[i].length; j++){\n\
    \    //         lst2_total+=1;\n    //     }\n    // }\n    lst1_total=lst1.join('').length;\n\
    \    lst2_total=lst2.join('').length;\n    if (lst1_total>lst2_total){\n     \
    \   return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    total1 = 0;\n    total2\
    \ = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n\
    \    }\n    if(total1 == total2){\n        return lst1;\n    }\n    if(total1\
    \ < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n \
    \   }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }\n    else if(total1 > total2){\n        return lst2;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n     \
    \   total2 += lst2[j].length;\n    }\n    if(total1 > total2){\n        return\
    \ lst2;\n    }else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total_in_lst1 =\
    \ 0;\n    let total_in_lst2 = 0;\n    let i;\n    let j;\n    for(i = 0; i < lst1.length;\
    \ i++){\n        total_in_lst1 += lst1[i].length;\n    }\n    for(j = 0; j < lst2.length;\
    \ j++){\n        total_in_lst2 += lst2[j].length;\n    }\n    if(total_in_lst1\
    \ === total_in_lst2){\n        return lst1;\n    }else if(total_in_lst1 < total_in_lst2){\n\
    \        return lst1;\n    }else{\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar total = 0;\n\tfor(var\
    \ i = 0; i < lst1.length; i++){\n\t\ttotal += lst1[i].length;\n\t}\n\tif(total\
    \ == 0){\n\t\treturn [];\n\t}\n\tvar total2 = 0;\n\tfor(var i = 0; i < lst2.length;\
    \ i++){\n\t\ttotal2 += lst2[i].length;\n\t}\n\tif(total2 == 0){\n\t\treturn [];\n\
    \t}\n\tif(total < total2){\n\t\treturn lst1;\n\t}\n\telse if(total > total2){\n\
    \t\treturn lst2;\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    const count1 = lst1.reduce((a,e)\
    \ => a + e.length, 0);\n    const count2 = lst2.reduce((a,e) => a + e.length,\
    \ 0);\n    return count1 < count2 ? lst1 : count1 > count2 ? lst2 : lst1;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n   var i = 0\n   var j =\
    \ 0\n   while (i < lst1.length){\n   \tvar num1 = (lst1[i].length)\n   \ti = i\
    \ + 1\n   }\n   while (j < lst2.length){\n   \tvar num2 = (lst2[j].length)\n \
    \  \tj = j + 1\n   }\n   if (num1 < num2){\n   \treturn lst1\n   }\n   else{\n\
    \   \treturn lst2\n   }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '2',\n\
    \  '3',\n  '4',\n  '5'\n]\n\nshould loosely deep-equal\n\n[\n  '4'\n]\n    at\
    \ test (/tmp/tmpzdehbgly.js:41:10)\n    at Object.<anonymous> (/tmp/tmpzdehbgly.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '2',\
    \ '3', '4', '5' ],\n  expected: [ '4' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return (total_chars(lst1)\
    \ < total_chars(lst2)) ? lst1 : lst2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3da87ath.js:16\n    return (total_chars(lst1) < total_chars(lst2))\
    \ ? lst1 : lst2;\n    ^\n\nReferenceError: total_chars is not defined\n    at\
    \ total_match (/tmp/tmp3da87ath.js:16:5)\n    at test (/tmp/tmp3da87ath.js:24:20)\n\
    \    at Object.<anonymous> (/tmp/tmp3da87ath.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return [];\n    }\n    let count1 = 0;\n    let\
    \ count2 = 0;\n    for (let i = 0; i < lst1.length; i++){\n        count1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++){\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 == count2){\n        return lst1;\n    }\n    if (count1\
    \ < count2){\n        return lst1;\n    }\n    if (count1 > count2){\n       \
    \ return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.length <=\
    \ lst2.length ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpjwx6tdps.js:24:10)\n    at Object.<anonymous> (/tmp/tmpjwx6tdps.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n     \
    \   total2 += lst2[j].length;\n    }\n    if(total1 == total2){\n        return\
    \ lst1;\n    }\n    else if(total1 < total2){\n        return lst1;\n    }\n \
    \   else if(total2 < total1){\n        return lst2;\n    }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 && lst2.length === 0){\n        return [];\n    }\n    var sum1 = 0;\n   \
    \ var sum2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for (var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 > sum2){\n        return lst2;\n    }\n    else if (sum1\
    \ < sum2){\n        return lst1;\n    }\n    else{\n        return lst1;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let\
    \ sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }else{\n        return\
    \ lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpz3szd48x.js:41:10)\n    at Object.<anonymous> (/tmp/tmpz3szd48x.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        sum2 += lst2[j].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else{\n       \
    \ return lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp1nlawykc.js:42:10)\n    at Object.<anonymous> (/tmp/tmp1nlawykc.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\treturn lst1.length < lst2.length\
    \ ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hI',\n  'hi',\n  'hi'\n]\n\
    \    at test (/tmp/tmpxmithq4b.js:28:10)\n    at Object.<anonymous> (/tmp/tmpxmithq4b.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hI', 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var len1 = 0;\n    var\
    \ len2 = 0;\n    for(i = 0; i < lst1.length; i++){\n        len1 += lst1[i].length;\n\
    \    }\n    for(i = 0; i < lst2.length; i++){\n        len2 += lst2[i].length;\n\
    \    }\n    if(len1 < len2){\n        return lst1;\n    }\n    else{\n       \
    \ return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpb8coifp4.js:43:10)\n    at Object.<anonymous> (/tmp/tmpb8coifp4.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        sum2 += lst2[j].length;\n\
    \    }\n    if(sum1 > sum2){\n        return lst2;\n    }\n    else{\n       \
    \ return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0){\n        return lst1;\n    }\n    if (lst2.length === 0){\n        return\
    \ lst2;\n    }\n    let total_chars_list1 = total_chars(lst1);\n    let total_chars_list2\
    \ = total_chars(lst2);\n    if (total_chars_list1 < total_chars_list2){\n    \
    \    return lst1;\n    } else if (total_chars_list1 > total_chars_list2){\n  \
    \      return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp65y4jivs.js:22\n    let total_chars_list1 = total_chars(lst1);\n\
    \                            ^\n\nReferenceError: total_chars is not defined\n\
    \    at total_match (/tmp/tmp65y4jivs.js:22:29)\n    at test (/tmp/tmp65y4jivs.js:39:20)\n\
    \    at Object.<anonymous> (/tmp/tmp65y4jivs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // ...\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpuks0ox67.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpuks0ox67.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  if (lst1.length == 0){\n\
    \    return lst1;\n  }\n  if (lst2.length == 0){\n    return lst2;\n  }\n  let\
    \ total1 = 0;\n  let total2 = 0;\n  for (let i = 0; i < lst1.length; i++){\n \
    \   total1 += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++){\n\
    \    total2 += lst2[i].length;\n  }\n  if (total1 == total2){\n    return lst1;\n\
    \  }\n  if (total1 < total2){\n    return lst1;\n  }\n  return lst2;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0){\n\
    \        return lst1;\n    }\n    if (lst2.length == 0){\n        return lst2;\n\
    \    }\n    var sum1 = 0;\n    var sum2 = 0;\n    for (var i = 0; i < lst1.length;\
    \ i++){\n        sum1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length;\
    \ i++){\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2){\n     \
    \   return lst1;\n    }\n    else if (sum1 > sum2){\n        return lst2;\n  \
    \  }\n    else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar lst1_len = 0;\n\t\
    var lst2_len = 0;\n\tlst1.forEach(function(elem){\n\t\tlst1_len += elem.length;\n\
    \t});\n\tlst2.forEach(function(elem){\n\t\tlst2_len += elem.length;\n\t});\n\t\
    if (lst1_len > lst2_len){\n\t\treturn lst2;\n\t} else {\n\t\treturn lst1;\n\t\
    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1 == []){\n \
    \       return []\n    }\n    else if (lst2 == []){\n        return []\n    }\n\
    \    else if (lst1.length == lst2.length){\n        return lst1\n    }\n    else\
    \ if (total_length(lst1) > total_length(lst2)){\n        return lst2\n    }\n\
    \    else if (total_length(lst1) < total_length(lst2)){\n        return lst1\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpzk1qaadh.js:38:10)\n    at Object.<anonymous> (/tmp/tmpzk1qaadh.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let\
    \ total2 = 0;\n  for(let x of lst1){\n    total1 += x.length;\n  }\n  for(let\
    \ x of lst2){\n    total2 += x.length;\n  }\n  if(total1 === total2){\n    return\
    \ lst1;\n  }\n  else if(total1 < total2){\n    return lst1;\n  }\n  else{\n  \
    \  return lst2;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0\n    let\
    \ sum2 = 0\n    for(i = 0; i < lst1.length; i++){\n        for(j = 0; j < lst1[i].length;\
    \ j++){\n            sum1 = sum1 + 1\n        }\n    }\n    for(i = 0; i < lst2.length;\
    \ i++){\n        for(j = 0; j < lst2[i].length; j++){\n            sum2 = sum2\
    \ + 1\n        }\n    }\n    if(sum1 > sum2){\n        return lst2\n    }else\
    \ if(sum1 == sum2){\n        return lst1\n    }else{\n        return lst1\n  \
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tif (lst1.length == 0 &&\
    \ lst2.length == 0){\n\t\treturn [];\n\t}\n\tif (lst1.length < lst2.length){\n\
    \t\treturn lst1;\n\t}\n\tif (lst2.length < lst1.length){\n\t\treturn lst2;\n\t\
    }\n\tif (lst1.length == lst2.length){\n\t\treturn lst1;\n\t}\n\tvar count1 = 0;\n\
    \tvar count2 = 0;\n\tfor (var i = 0; i < lst1.length; i++) {\n\t\tfor (var j =\
    \ 0; j < lst1[i].length; j++) {\n\t\t\tcount1 += 1;\n\t\t}\n\t}\n\tfor (var i\
    \ = 0; i < lst2.length; i++) {\n\t\tfor (var j = 0; j < lst2[i].length; j++) {\n\
    \t\t\tcount2 += 1;\n\t\t}\n\t}\n\tif (count1 < count2){\n\t\treturn lst1;\n\t\
    }\n\tif (count2 < count1){\n\t\treturn lst2;\n\t}\n\tif (count1 == count2){\n\t\
    \treturn lst1;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpoi75zzyd.js:57:10)\n    at Object.<anonymous> (/tmp/tmpoi75zzyd.js:67:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1 == [] && lst2\
    \ == []){\n        return [];\n    }\n    if (lst1.length > lst2.length){\n  \
    \      return lst2;\n    }\n    if (lst1.length < lst2.length){\n        return\
    \ lst1;\n    }\n    return lst1;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpn__pof7g.js:33:10)\n    at Object.<anonymous> (/tmp/tmpn__pof7g.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var length1 = 0;\n \
    \   var length2 = 0;\n    var ans = lst1;\n    for(i=0; i<lst1.length; i++){\n\
    \        length1 += lst1[i].length;\n    }\n    for(i=0; i<lst2.length; i++){\n\
    \        length2 += lst2[i].length;\n    }\n    if(length1 > length2){\n     \
    \   ans = lst2;\n    }\n    return ans;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\t//find the total number\
    \ of chars in lst1\n\tvar total1 = totalChars(lst1);\n\tvar total2 = totalChars(lst2);\n\
    \tif (total1 < total2){\n\t\treturn lst1;\n\t}\n\telse if (total1 > total2){\n\
    \t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpllvnl3ea.js:17\n\tvar total1 = totalChars(lst1);\n\t          \
    \   ^\n\nReferenceError: totalChars is not defined\n    at total_match (/tmp/tmpllvnl3ea.js:17:15)\n\
    \    at test (/tmp/tmpllvnl3ea.js:35:20)\n    at Object.<anonymous> (/tmp/tmpllvnl3ea.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var s1 = \"\";\n   \
    \ var s2 = \"\";\n    for(var i=0; i<lst1.length; i++){\n        s1 += lst1[i];\n\
    \    }\n    for(var i=0; i<lst2.length; i++){\n        s2 += lst2[i];\n    }\n\
    \    if(s1.length == s2.length){\n        return lst1;\n    }\n    else if(s1.length\
    \ > s2.length){\n        return lst2;\n    }\n    else{\n        return lst1;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 == total2){\n        return\
    \ lst1;\n    }\n    else if(total1 < total2){\n        return lst1;\n    }\n \
    \   else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.join('').length\
    \ < lst2.join('').length ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpj44lgfds.js:29:10)\n    at Object.<anonymous> (/tmp/tmpj44lgfds.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total_chars_lst1\
    \ = 0;\n    var total_chars_lst2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n\
    \        total_chars_lst1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length;\
    \ i++){\n        total_chars_lst2 += lst2[i].length;\n    }\n    if(total_chars_lst1\
    \ > total_chars_lst2){\n        return lst2;\n    }\n    else if(total_chars_lst1\
    \ < total_chars_lst2){\n        return lst1;\n    }\n    else{\n        return\
    \ lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = sum_chars(lst1);\n\
    \    var sum2 = sum_chars(lst2);\n    if (sum1 < sum2){\n        return lst1;\n\
    \    }\n    return lst2;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiym3ipgv.js:16\n    var sum1 = sum_chars(lst1);\n             \
    \  ^\n\nReferenceError: sum_chars is not defined\n    at total_match (/tmp/tmpiym3ipgv.js:16:16)\n\
    \    at test (/tmp/tmpiym3ipgv.js:28:20)\n    at Object.<anonymous> (/tmp/tmpiym3ipgv.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp7hpk1viy.js:42:10)\n    at Object.<anonymous> (/tmp/tmp7hpk1viy.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    function sum_chars(lst){\n\
    \        var sum = 0;\n        for(var i = 0; i < lst.length; i++){\n        \
    \    sum += lst[i].length;\n        }\n        return sum;\n    }\n    var lst1_sum\
    \ = sum_chars(lst1);\n    var lst2_sum = sum_chars(lst2);\n    if(lst1_sum > lst2_sum){\n\
    \        return lst2;\n    }else if(lst1_sum < lst2_sum){\n        return lst1;\n\
    \    }else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    var final = [];\n    for(var i = 0; i < lst1.length; i++){\n\
    \        sum1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n\
    \        sum2 += lst2[i].length;\n    }\n    if(sum1 <= sum2){\n        final\
    \ = lst1;\n    }else{\n        final = lst2;\n    }\n    return final;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    function count_chars(lst){\n\
    \        var count = 0;\n        for(var i = 0; i < lst.length; i++){\n      \
    \      count += lst[i].length;\n        }\n        return count;\n    }\n    var\
    \ sum1 = count_chars(lst1);\n    var sum2 = count_chars(lst2);\n    if(sum1 <\
    \ sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n\
    }\nvar lst1 = [\"4\"];\nvar lst2 = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp1rnsz25o.js:45:10)\n    at Object.<anonymous> (/tmp/tmp1rnsz25o.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tlet total1 = 0;\n\tlet\
    \ total2 = 0;\n\tfor(let i = 0; i < lst1.length; i++){\n\t\ttotal1 += lst1[i].length;\n\
    \t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\ttotal2 += lst2[i].length;\n\t\
    }\n\tif(total1 === total2 || total1 < total2){\n\t\treturn lst1;\n\t}\n\telse{\n\
    \t\treturn lst2;\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar new_list = [];\n\t\
    var c1 = 0;\n\tvar c2 = 0;\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tc1 +=\
    \ lst1[i].length;\n\t}\n\tfor(var i = 0; i < lst2.length; i++){\n\t\tc2 += lst2[i].length;\n\
    \t}\n\tif(c1 < c2){\n\t\treturn lst1;\n\t}\n\telse if(c2 < c1){\n\t\treturn lst2;\n\
    \t}\n\telse{\n\t\treturn lst1;\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = sum_chars(lst1);\n\
    \    var sum2 = sum_chars(lst2);\n    if (sum1 == sum2){\n        return lst1;\n\
    \    }\n    if (sum1 > sum2){\n        return lst2;\n    }\n    return lst1;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdvk9wwrt.js:16\n    var sum1 = sum_chars(lst1);\n             \
    \  ^\n\nReferenceError: sum_chars is not defined\n    at total_match (/tmp/tmpdvk9wwrt.js:16:16)\n\
    \    at test (/tmp/tmpdvk9wwrt.js:31:20)\n    at Object.<anonymous> (/tmp/tmpdvk9wwrt.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1 == [] && lst2\
    \ == []){\n        return [];\n    }\n    var count1 = 0;\n    var count2 = 0;\n\
    \    for (var i = 0; i < lst1.length; i++){\n        count1 += lst1[i].length;\n\
    \    }\n    for (var i = 0; i < lst2.length; i++){\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 == count2){\n        return lst1;\n    }\n    else if (count1\
    \ < count2){\n        return lst1;\n    }\n    else {\n        return lst2;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar n1 = 0;\n\tvar n2\
    \ = 0;\n\tfor(var i = 0; i < lst1.length; i++)\n\t\tn1 += lst1[i].length;\n\t\
    for(var i = 0; i < lst2.length; i++)\n\t\tn2 += lst2[i].length;\n\tif(n1 == n2)\n\
    \t\treturn lst1;\n\telse if(n1 < n2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\treturn lst1.length < lst2.length\
    \ ? lst1 : lst2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hI',\n  'hi',\n  'hi'\n]\n\
    \    at test (/tmp/tmp7w97rq5c.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7w97rq5c.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hI', 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }else{\n        return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpne9b1whf.js:42:10)\n    at Object.<anonymous> (/tmp/tmpne9b1whf.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let charCount1 = 0;\n\
    \  let charCount2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    charCount1\
    \ += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    charCount2\
    \ += lst2[i].length;\n  }\n  if(charCount1 < charCount2){\n    return lst1;\n\
    \  }\n  else{\n    return lst2;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmphsj2zxq9.js:42:10)\n    at Object.<anonymous> (/tmp/tmphsj2zxq9.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //YOUR CODE HERE\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpydi51te3.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpydi51te3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let result = [];\n \
    \   let lst1_count = 0;\n    let lst2_count = 0;\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        lst1_count += lst1[i].length;\n    }\n    for(let i = 0; i <\
    \ lst2.length; i++){\n        lst2_count += lst2[i].length;\n    }\n    if(lst1_count\
    \ > lst2_count){\n        result = lst2;\n    }\n    else if(lst1_count < lst2_count){\n\
    \        result = lst1;\n    }\n    else{\n        result = lst1;\n    }\n   \
    \ return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    function counter(lst){\n\
    \        var count = 0;\n        for(i = 0; i < lst.length; i++){\n          \
    \  count += lst[i].length;\n        }\n        return count;\n    }\n    if(counter(lst1)\
    \ > counter(lst2)){\n        return lst2;\n    }else{\n        return lst1;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return [];\n    }\n    else if (lst1.length ==\
    \ 0 && lst2.length > 0){\n        return lst2;\n    }\n    else if (lst1.length\
    \ > 0 && lst2.length == 0){\n        return lst1;\n    }\n    else if (lst1.length\
    \ > 0 && lst2.length > 0){\n        var sum1 = 0;\n        var sum2 = 0;\n   \
    \     for (var i = 0; i < lst1.length; i++){\n            sum1 += lst1[i].length;\n\
    \        }\n        for (var i = 0; i < lst2.length; i++){\n            sum2 +=\
    \ lst2[i].length;\n        }\n        if (sum1 < sum2){\n            return lst1;\n\
    \        }\n        else if (sum1 > sum2){\n            return lst2;\n       \
    \ }\n        else if (sum1 == sum2){\n            return lst1;\n        }\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'this'\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpp4bxnra6.js:58:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp4bxnra6.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'this' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  if (lst1.length == 0 &&\
    \ lst2.length == 0){\n    return [];\n  }else if (total_len(lst1) < total_len(lst2)){\n\
    \    return lst1;\n  }else if (total_len(lst1) > total_len(lst2)){\n    return\
    \ lst2;\n  }else if (total_len(lst1) == total_len(lst2)){\n    return lst1;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpn2p0o04k.js:18\n  }else if (total_len(lst1) < total_len(lst2)){\n\
    \        ^\n\nReferenceError: total_len is not defined\n    at total_match (/tmp/tmpn2p0o04k.js:18:9)\n\
    \    at test (/tmp/tmpn2p0o04k.js:33:20)\n    at Object.<anonymous> (/tmp/tmpn2p0o04k.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.length ===\
    \ 0 && lst2.length === 0 ? [] :\n        sum_len(lst1) < sum_len(lst2) ? lst1\
    \ :\n        sum_len(lst1) > sum_len(lst2) ? lst2 :\n        lst1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdumu2uej.js:16\n    return lst1.length === 0 && lst2.length ===\
    \ 0 ? [] :\n                                            ^\n\nReferenceError: sum_len\
    \ is not defined\n    at total_match (/tmp/tmpdumu2uej.js:16:45)\n    at test\
    \ (/tmp/tmpdumu2uej.js:28:20)\n    at Object.<anonymous> (/tmp/tmpdumu2uej.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 || lst2.length === 0){\n        return [];\n    }\n    var counter1 = 0;\n\
    \    var counter2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n        counter1\
    \ += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n    \
    \    counter2 += lst2[i].length;\n    }\n    if (counter1 < counter2){\n     \
    \   return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpi3calwup.js:46:10)\n    at Object.<anonymous> (/tmp/tmpi3calwup.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum += lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        sum2 += lst2[j].length;\n\
    \    }\n    if(sum < sum2){\n        return lst1;\n    }\n    else if(sum > sum2){\n\
    \        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ || lst2.length == 0){\n        return [];\n    }\n    sum1 = 0;\n    sum2 =\
    \ 0;\n    lst1.forEach(function(elem){\n        sum1 += elem.length;\n    });\n\
    \    lst2.forEach(function(elem){\n        sum2 += elem.length;\n    });\n   \
    \ if (sum1 < sum2){\n        return lst1;\n    }\n    return lst2;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmph1pdwrhx.js:44:10)\n    at Object.<anonymous> (/tmp/tmph1pdwrhx.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var c1 = 0;\n    var\
    \ c2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        c1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        c2 += lst2[i].length;\n\
    \    }\n    if(c1 == c2){\n        return lst1;\n    }\n    else if(c1 < c2){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var one = 0;\n    var\
    \ two = 0;\n    for(var i = 0; i < lst1.length; i++){\n        one += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        two += lst2[i].length;\n\
    \    }\n    if(one > two){\n        return lst2;\n    }\n    else{\n        return\
    \ lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //YOUR CODE HERE\n \
    \   return lst1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpc_7bv5ed.js:26:10)\n    at Object.<anonymous> (/tmp/tmpc_7bv5ed.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let a = 0;\n    let\
    \ b = 0;\n    for(let i = 0; i < lst1.length; i++){\n        a += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        b += lst2[i].length;\n\
    \    }\n    if(a < b){\n        return lst1;\n    }else{\n        return lst2;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpm526l45a.js:42:10)\n    at Object.<anonymous> (/tmp/tmpm526l45a.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return [];\n    }\n    let len1 = 0;\n    let\
    \ len2 = 0;\n    for (let str of lst1){\n        len1 += str.length;\n    }\n\
    \    for (let str of lst2){\n        len2 += str.length;\n    }\n    if (len1\
    \ == len2){\n        return lst1;\n    }\n    if (len1 < len2){\n        return\
    \ lst1;\n    }\n    return lst2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var num1 = 0;\n    var\
    \ num2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        num1 += lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        num2 += lst2[j].length;\n\
    \    }\n    if(num1 < num2){\n        return lst1;\n    }\n    else{\n       \
    \ return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpo1z25dh5.js:43:10)\n    at Object.<anonymous> (/tmp/tmpo1z25dh5.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return []\n    }\n    else if (lst1.length ==\
    \ 0){\n        return lst2\n    }\n    else if (lst2.length == 0){\n        return\
    \ lst1\n    }\n    else{\n        let count1 = 0\n        let count2 = 0\n   \
    \     for (i = 0; i < lst1.length; i++){\n            count1 += lst1[i].length\n\
    \        }\n        for (i = 0; i < lst2.length; i++){\n            count2 +=\
    \ lst2[i].length\n        }\n        if (count1 > count2){\n            return\
    \ lst2\n        }\n        else if (count1 < count2){\n            return lst1\n\
    \        }\n        else{\n            return lst1\n        }\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'this'\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpu2u35_ef.js:58:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu2u35_ef.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'this' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    total_of_lst1 = 0;\n\
    \    total_of_lst2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total_of_lst1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total_of_lst2 += lst2[i].length;\n    }\n    if(total_of_lst1 < total_of_lst2){\n\
    \        return lst1;\n    }\n    return lst2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpp782ji3h.js:41:10)\n    at Object.<anonymous> (/tmp/tmpp782ji3h.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let\
    \ sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    return lst2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpaquxa7a1.js:41:10)\n    at Object.<anonymous> (/tmp/tmpaquxa7a1.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n  \
    \  let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 == total2){\n        return\
    \ lst1;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n\
    \        return lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.length <=\
    \ lst2.length ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpjwx6tdps.js:24:10)\n    at Object.<anonymous> (/tmp/tmpjwx6tdps.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var chars1 = 0;\n  \
    \  var chars2 = 0;\n    for(i=0; i<lst1.length; i++){\n        chars1 += lst1[i].length;\n\
    \    }\n    for(i=0; i<lst2.length; i++){\n        chars2 += lst2[i].length;\n\
    \    }\n    if(chars1 > chars2){\n        return lst2;\n    }\n    else{\n   \
    \     return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else if(sum1 >\
    \ sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var lst1Count = 0;\n \
    \ var lst2Count = 0;\n  var lst1Str;\n  var lst2Str;\n  if (lst1.length === 0\
    \ && lst2.length === 0){\n    return [];\n  }\n  for (var i = 0; i < lst1.length;\
    \ i++){\n    lst1Str = lst1[i];\n    lst1Count += lst1Str.length;\n  }\n  for\
    \ (var j = 0; j < lst2.length; j++){\n    lst2Str = lst2[j];\n    lst2Count +=\
    \ lst2Str.length;\n  }\n  if (lst1Count < lst2Count){\n    return lst1;\n  }\n\
    \  else if (lst1Count > lst2Count){\n    return lst2;\n  }\n  else {\n    return\
    \ lst1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpvkqy0wm5.js:40:10)\n    at Object.<anonymous> (/tmp/tmpvkqy0wm5.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.length <\
    \ lst2.length ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hI',\n  'hi',\n  'hi'\n]\n\
    \    at test (/tmp/tmpdgu8dcx5.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdgu8dcx5.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hI', 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  \n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpl6u0ost1.js:25:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpl6u0ost1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total_lst1 = total_chars(lst1);\n\
    \    var total_lst2 = total_chars(lst2);\n    if (total_lst1 <= total_lst2){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1rh5_2wg.js:16\n    var total_lst1 = total_chars(lst1);\n     \
    \                ^\n\nReferenceError: total_chars is not defined\n    at total_match\
    \ (/tmp/tmp1rh5_2wg.js:16:22)\n    at test (/tmp/tmp1rh5_2wg.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp1rh5_2wg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n\
    \    }\n    for(j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n\
    \    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else if(total1\
    \ > total2){\n        return lst2;\n    }\n    else{\n        return lst1;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var totalChars1 = 0;\n\
    \    var totalChars2 = 0;\n    if (lst1.length == 0 && lst2.length == 0){\n  \
    \      return [];\n    }\n    for (var i = 0; i < lst1.length; i++){\n       \
    \ totalChars1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length;\
    \ i++){\n        totalChars2 += lst2[i].length;\n    }\n    if (totalChars1 >\
    \ totalChars2){\n        return lst2;\n    }\n    else{\n        return lst1;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 || lst2.length === 0){\n        return []\n    }\n    function tot_match(lst){\n\
    \        var tot = 0\n        for (var i = 0; i < lst.length; i++){\n        \
    \    tot += lst[i].length\n        }\n        return tot\n    }\n    var tot1\
    \ = tot_match(lst1)\n    var tot2 = tot_match(lst2)\n    if (tot1 < tot2){\n \
    \       return lst1\n    } else if (tot2 < tot1){\n        return lst2\n    }\
    \ else {\n        return lst1\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total = 0;\n   \
    \ var total2 = 0;\n    for(i = 0; i < lst1.length; i++){\n        total += lst1[i].length;\n\
    \    }\n    for(j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n\
    \    }\n    if(total > total2){\n        return lst2;\n    }else{\n        return\
    \ lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // YOUR CODE HERE\n\
    \    let sum1 = 0\n    let sum2 = 0\n    for (let i of lst1){\n        sum1 +=\
    \ i.length\n    }\n    for (let i of lst2){\n        sum2 += i.length\n    }\n\
    \    if (sum1 > sum2){\n        return lst2\n    } else if (sum1 < sum2){\n  \
    \      return lst1\n    } else {\n        return lst1\n    }\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst1_num_chars =\
    \ 0;\n    var lst2_num_chars = 0;\n    for (var i = 0; i < lst1.length; i++){\n\
    \        var word = lst1[i];\n        lst1_num_chars += word.length;\n    }\n\
    \    for (var i = 0; i < lst2.length; i++){\n        var word = lst2[i];\n   \
    \     lst2_num_chars += word.length;\n    }\n    if (lst1_num_chars < lst2_num_chars){\n\
    \        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp2xh5acgs.js:43:10)\n    at Object.<anonymous> (/tmp/tmp2xh5acgs.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar index = 0;\n\tvar\
    \ count1 = 0;\n\tvar count2 = 0;\n\tif (lst1.length > lst2.length){\n\t\tvar length\
    \ = lst1.length;\n\t}\n\telse{\n\t\tvar length = lst2.length;\n\t}\n\twhile (index\
    \ < length){\n\t\tif (index < lst1.length){\n\t\t\tcount1 += lst1[index].length;\n\
    \t\t}\n\t\tif (index < lst2.length){\n\t\t\tcount2 += lst2[index].length;\n\t\t\
    }\n\t\tindex++;\n\t}\n\tif (count1 == count2){\n\t\treturn lst1;\n\t}\n\telse\
    \ if (count1 < count2){\n\t\treturn lst1;\n\t}\n\telse{\n\t\treturn lst2;\n\t\
    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1_len = 0;\n\
    \    let lst2_len = 0;\n    for(let i = 0; i < lst1.length; i++){\n        lst1_len\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   lst2_len += lst2[i].length;\n    }\n    if(lst1_len < lst2_len){\n       \
    \ return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmplljidmfn.js:42:10)\n    at Object.<anonymous> (/tmp/tmplljidmfn.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0\n    var\
    \ sum2 = 0\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length\n\
    \    }\n    if(sum1 < sum2){\n        return lst1\n    }\n    else if(sum1 > sum2){\n\
    \        return lst2\n    }\n    else{\n        return lst1\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return [];\n    }\n    else if (lst1.length ==\
    \ lst2.length){\n        return lst1;\n    }\n    else if (lst1.length > lst2.length){\n\
    \        return lst2;\n    }\n    else if (lst1.length < lst2.length){\n     \
    \   return lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpgizp0ijq.js:35:10)\n    at Object.<anonymous> (/tmp/tmpgizp0ijq.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar total = 0;\n\tif (lst1.length\
    \ == 0 && lst2.length == 0){\n\t\treturn [];\n\t}\n\tfor (var j = 0; j < lst1.length;\
    \ j++){\n\t\ttotal += lst1[j].length;\n\t}\n\tvar total2 = 0;\n\tfor (var j =\
    \ 0; j < lst2.length; j++){\n\t\ttotal2 += lst2[j].length;\n\t}\n\tif (total ==\
    \ total2){\n\t\treturn lst1;\n\t}\n\tif (total < total2){\n\t\treturn lst1;\n\t\
    }\n\tif (total > total2){\n\t\treturn lst2;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0){\n        return lst1;\n    }else if (lst2.length === 0){\n        return\
    \ lst2;\n    }\n    var total1 = 0;\n    var total2 = 0;\n    for (var i = 0;\
    \ i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for (var\
    \ j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n    }\n  \
    \  if (total1 === total2){\n        return lst1;\n    }else if (total1 < total2){\n\
    \        return lst1;\n    }else{\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var a = lst1.join(\"\
    \").length;\n    var b = lst2.join(\"\").length;\n    if (a < b){\n        return\
    \ lst1;\n    }\n    else if (a > b){\n        return lst2;\n    }\n    else{\n\
    \        return lst1;\n    }\n}\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"\
    Hi\"]);\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]);\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]);\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var count1 = 0;\n  \
    \  var count2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        for(var\
    \ j = 0; j < lst1[i].length; j++){\n            count1 = count1 + 1;\n       \
    \ }\n    }\n    for(var i = 0; i < lst2.length; i++){\n        for(var j = 0;\
    \ j < lst2[i].length; j++){\n            count2 = count2 + 1;\n        }\n   \
    \ }\n    if(count1 < count2){\n        return lst1;\n    }\n    else if(count1\
    \ > count2){\n        return lst2;\n    }\n    else{\n        return lst1;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    return lst1.length <\
    \ lst2.length ? lst1 : lst2;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hI',\n  'hi',\n  'hi'\n]\n\
    \    at test (/tmp/tmpdgu8dcx5.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdgu8dcx5.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hI', 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var sum1 = 0;\n    var\
    \ sum2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n\
    \    }\n    for(var i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n\
    \    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else{\n       \
    \ return lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpil6w8coq.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpil6w8coq.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var total1 = 0\n  var\
    \ total2 = 0\n  for (var i = 0; i < lst1.length; i++){\n    total1 += lst1[i].length\n\
    \  }\n  for (var i = 0; i < lst2.length; i++){\n    total2 += lst2[i].length\n\
    \  }\n  if (total1 < total2){\n    return lst1\n  }\n  else if (total1 > total2){\n\
    \    return lst2\n  }\n  else{\n    return lst1\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total = 0;\n  for(let\
    \ i = 0; i < lst1.length; i++){\n    total += lst1[i].length;\n  }\n  let total1\
    \ = 0;\n  for(let i = 0; i < lst2.length; i++){\n    total1 += lst2[i].length;\n\
    \  }\n  if(total < total1){\n    return lst1;\n  }\n  else{\n    return lst2;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpaox5xbtb.js:43:10)\n    at Object.<anonymous> (/tmp/tmpaox5xbtb.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let length1 = 0;\n \
    \   let length2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        length1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   length2 += lst2[i].length;\n    }\n    if(length1 > length2){\n        return\
    \ lst2;\n    }else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total_chars_lst1\
    \ = 0;\n    let total_chars_lst2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n\
    \        total_chars_lst1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        total_chars_lst2 += lst2[i].length;\n    }\n    if(total_chars_lst1\
    \ > total_chars_lst2){\n        return lst2;\n    }\n    else{\n        return\
    \ lst1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst_1_len = 0;\n\
    \    var lst_2_len = 0;\n    var lst_1_len_ctr = 0;\n    var lst_2_len_ctr = 0;\n\
    \    var new_lst = [];\n    var index_ctr = 0;\n    var lst_1_index = 0;\n   \
    \ var lst_2_index = 0;\n    var lst_1_ctr = 0;\n    var lst_2_ctr = 0;\n    for(var\
    \ i = 0; i < lst1.length; i++){\n        lst_1_len = lst_1_len + lst1[i].length;\n\
    \    }\n    for(var j = 0; j < lst2.length; j++){\n        lst_2_len = lst_2_len\
    \ + lst2[j].length;\n    }\n    if(lst_1_len == lst_2_len){\n        return lst1;\n\
    \    }\n    if(lst_1_len > lst_2_len){\n        while(lst_1_len_ctr < lst_1_len){\n\
    \            while(lst_1_len_ctr + lst1[lst_1_index].length <= lst_2_len){\n \
    \               lst_1_len_ctr = lst_1_len_ctr + lst1[lst_1_index].length;\n  \
    \              new_lst[index_ctr] = lst1[lst_1_index];\n                index_ctr++;\n\
    \                lst_1_index++;\n            }\n            while(lst_2_len_ctr\
    \ < lst_2_len){\n                while(lst_2_len_ctr + lst2[lst_2_index].length\
    \ <= lst_1_len){\n                    lst_2_len_ctr = lst_2_len_ctr + lst2[lst_2_index].length;\n\
    \                    new_lst[index_ctr] = lst2[lst_2_index];\n               \
    \     index_ctr++;\n                    lst_2_index++;\n                }\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsvsn6sm3.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // your code here\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpu8yjj3hp.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpu8yjj3hp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let first = 0;\n   \
    \ let second = 0;\n    let first_lst = lst1;\n    let second_lst = lst2;\n   \
    \ for(let i = 0; i < lst1.length; i++){\n        first += lst1[i].length;\n  \
    \  }\n    for(let i = 0; i < lst2.length; i++){\n        second += lst2[i].length;\n\
    \    }\n    if(first > second){\n        return second_lst;\n    }\n    else if(first\
    \ < second){\n        return first_lst;\n    }\n    else{\n        return first_lst;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\t// console.log(lst1.length);\n\
    \t// console.log(lst2.length);\n\tif (lst1.length == 0 && lst2.length == 0){\n\
    \t\treturn [];\n\t}\n\tif (lst1.length == 0 && lst2.length > 0){\n\t\treturn lst2;\n\
    \t}\n\tif (lst1.length > 0 && lst2.length == 0){\n\t\treturn lst1;\n\t}\n\tif\
    \ (lst1.length > 0 && lst2.length > 0){\n\t\tvar num1 = 0;\n\t\tvar num2 = 0;\n\
    \t\tfor (var i = 0; i < lst1.length; i++){\n\t\t\tnum1 += lst1[i].length;\n\t\t\
    }\n\t\tfor (var i = 0; i < lst2.length; i++){\n\t\t\tnum2 += lst2[i].length;\n\
    \t\t}\n\t\tif (num1 < num2){\n\t\t\treturn lst1;\n\t\t}\n\t\tif (num1 > num2){\n\
    \t\t\treturn lst2;\n\t\t}\n\t\tif (num1 == num2){\n\t\t\treturn lst1;\n\t\t}\n\
    \t}\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'this'\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp60kqxeg4.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmp60kqxeg4.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'this' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //If lst1 is empty return\
    \ lst2\n    if(lst1.length == 0){\n        return lst2;\n    }\n    //If lst2\
    \ is empty return lst1\n    if(lst2.length == 0){\n        return lst1;\n    }\n\
    \    //Calculate total number of chars in lst1\n    var total1 = 0;\n    for(var\
    \ i = 0; i < lst1.length; i++){\n        for(var j = 0; j < lst1[i].length; j++){\n\
    \            total1++;\n        }\n    }\n    //Calculate total number of chars\
    \ in lst2\n    var total2 = 0;\n    for(var i = 0; i < lst2.length; i++){\n  \
    \      for(var j = 0; j < lst2[i].length; j++){\n            total2++;\n     \
    \   }\n    }\n    //Compare total chars and return the lst that has less chars\n\
    \    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return\
    \ lst2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpjr63he6y.js:57:10)\n    at Object.<anonymous> (/tmp/tmpjr63he6y.js:62:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n  \
    \  var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp7hpk1viy.js:42:10)\n    at Object.<anonymous> (/tmp/tmp7hpk1viy.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821137
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  if (lst1 == [] || lst2\
    \ == []){\n    return []\n  } else if (lst1.length == lst2.length){\n    return\
    \ lst1\n  } else if (lst1.length < lst2.length){\n    return lst1\n  } else if\
    \ (lst1.length > lst2.length){\n    return lst2\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpnfpoq00g.js:33:10)\n    at Object.<anonymous> (/tmp/tmpnfpoq00g.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total = 0;\n  for(let\
    \ i = 0; i < lst1.length; i++){\n    total += lst1[i].length;\n  }\n  for(let\
    \ i = 0; i < lst2.length; i++){\n    total -= lst2[i].length;\n  }\n  if(total\
    \ >= 0){\n    return lst1;\n  }\n  return lst2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpqsex2clf.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqsex2clf.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var total1 =0;\n  var\
    \ total2 =0;\n  for(i=0; i<lst1.length; i++){\n    for(j=0; j<lst1[i].length;\
    \ j++){\n      total1 += lst1[i].length;\n    }\n  }\n  for(i=0; i<lst2.length;\
    \ i++){\n    for(j=0; j<lst2[i].length; j++){\n      total2 += lst2[i].length;\n\
    \    }\n  }\n  if(total1<total2){\n    return lst1;\n  }\n  else if(total1>total2){\n\
    \    return lst2;\n  }\n  else{\n    return lst1;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpx3dibus8.js:49:10)\n    at Object.<anonymous> (/tmp/tmpx3dibus8.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1Sum = 0;\n \
    \   let lst2Sum = 0;\n    for(let i=0; i<lst1.length; i++){\n        lst1Sum +=\
    \ lst1[i].length;\n    }\n    for(let i=0; i<lst2.length; i++){\n        lst2Sum\
    \ += lst2[i].length;\n    }\n    if(lst1Sum < lst2Sum){\n        return lst1;\n\
    \    }\n    else if(lst1Sum > lst2Sum){\n        return lst2;\n    }\n    else{\n\
    \        return lst1;\n    }\n}\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"\
    Hi\"]);\n\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n \
    \ assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"\
    hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //YOUR CODE HERE\n \
    \   var sum1 = 0;\n    var sum2 = 0;\n    for (i=0; i<lst1.length; i++){\n   \
    \   sum1 += lst1[i].length;\n    }\n    for (i=0; i<lst2.length; i++){\n     \
    \ sum2 += lst2[i].length;\n    }\n    if (sum1>sum2){\n      return lst2;\n  \
    \  }\n    return lst1;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var lst1_chars = 0;\n\
    \  var lst2_chars = 0;\n  for(var i = 0; i < lst1.length; i++){\n    lst1_chars\
    \ += lst1[i].length;\n  }\n  for(var i = 0; i < lst2.length; i++){\n    lst2_chars\
    \ += lst2[i].length;\n  }\n  if(lst1_chars > lst2_chars){\n    return lst2;\n\
    \  }\n  return lst1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0\n  let\
    \ total2 = 0\n  for(let elem of lst1){\n    total1 += elem.length\n  }\n  for(let\
    \ elem of lst2){\n    total2 += elem.length\n  }\n  if(total1 == total2){\n  \
    \  return lst1\n  }else if(total1 < total2){\n    return lst1\n  }else{\n    return\
    \ lst2\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var result1 = 0;\n \
    \   var result2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        result1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   result2 += lst2[i].length;\n    }\n    if(result1 > result2){\n        return\
    \ lst2;\n    }\n    return lst1;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar total1 = 0\n\tvar\
    \ total2 = 0\n\tfor (var i = 0; i < lst1.length; i++){\n\t\ttotal1 += lst1[i].length\n\
    \t}\n\tfor (var i = 0; i < lst2.length; i++){\n\t\ttotal2 += lst2[i].length\n\t\
    }\n\tif (total1 > total2){\n\t\treturn lst2\n\t}\n\telse if (total1 < total2){\n\
    \t\treturn lst1\n\t}\n\telse {\n\t\treturn lst1\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = 0;\n  \
    \  let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else if(count1 > count2){\n        return lst2;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821137
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var res = [];\n    if(lst1.length\
    \ === 0 && lst2.length === 0){\n        return res;\n    }\n    var total1 = 0;\n\
    \    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1\
    \ += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n     \
    \   total2 += lst2[i].length;\n    }\n    if(total1 > total2){\n        return\
    \ lst2;\n    }\n    else if(total1 < total2){\n        return lst1;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let lst1_count = 0;\n\
    \    let lst2_count = 0;\n    let i;\n    for(i = 0; i < lst1.length; i++){\n\
    \        lst1_count += lst1[i].length;\n    }\n    for(i = 0; i < lst2.length;\
    \ i++){\n        lst2_count += lst2[i].length;\n    }\n    if(lst1_count < lst2_count){\n\
    \        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpmnshfw7b.js:44:10)\n    at Object.<anonymous> (/tmp/tmpmnshfw7b.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar total = 0;\n\tfor(var\
    \ i = 0; i < lst1.length; i++){\n\t\ttotal += lst1[i].length;\n\t}\n\tvar total2\
    \ = 0;\n\tfor(var j = 0; j < lst2.length; j++){\n\t\ttotal2 += lst2[j].length;\n\
    \t}\n\tif(total2 < total){\n\t\treturn lst2;\n\t}\n\telse if(total < total2){\n\
    \t\treturn lst1;\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    //base case\n    if(lst1.length\
    \ === 0 && lst2.length === 0){\n        return [];\n    }\n    // get the lengths\
    \ of the elements of both lists\n    let length1 = lst1.reduce((acc, curr) =>\
    \ {\n        return acc + curr.length;\n    }, 0);\n    let length2 = lst2.reduce((acc,\
    \ curr) => {\n        return acc + curr.length;\n    }, 0);\n    // return the\
    \ array that has the lower total length of all its elements\n    if(length1 <\
    \ length2){\n        return lst1;\n    }\n    else if(length2 < length1){\n  \
    \      return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0\n  let\
    \ total2 = 0\n  for(let item of lst1){\n    total1 += item.length\n  }\n  for(let\
    \ item of lst2){\n    total2 += item.length\n  }\n  if(total1 > total2){\n   \
    \ return lst2\n  }else{\n    return lst1\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    lst1_total = 0;\n  \
    \  lst2_total = 0;\n    for (i = 0; i < lst1.length; i++) {\n        lst1_total\
    \ += lst1[i].length;\n    }\n    for (i = 0; i < lst2.length; i++) {\n       \
    \ lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n \
    \       return lst1;\n    } else {\n        return lst2;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpzc43w3up.js:41:10)\n    at Object.<anonymous> (/tmp/tmpzc43w3up.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar count1 = 0;\n\tvar\
    \ count2 = 0;\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tcount1 += lst1[i].length;\n\
    \t}\n\tfor(var j = 0; j < lst2.length; j++){\n\t\tcount2 += lst2[j].length;\n\t\
    }\n\tif(count1 < count2){\n\t\treturn lst1;\n\t}else if(count1 > count2){\n\t\t\
    return lst2;\n\t}else{\n\t\treturn lst1;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var n1 = 0;\n    var\
    \ n2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        n1 += lst1[i].length;\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        n2 += lst2[i].length;\n\
    \    }\n    if(n1 <= n2){\n        return lst1;\n    }\n    return lst2;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tvar sum1 = 0;\n\tvar sum2\
    \ = 0;\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tsum1 += lst1[i].length;\n\
    \t}\n\tfor(var i = 0; i < lst2.length; i++){\n\t\tsum2 += lst2[i].length;\n\t\
    }\n\tif(sum1 > sum2){\n\t\treturn lst2;\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 || lst2.length === 0){\n        return [];\n    }\n    let lst1_total = 0;\n\
    \    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++){\n       \
    \ lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++){\n\
    \        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total){\n\
    \        return lst1;\n    }\n    return lst2;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmp7jy436qr.js:43:10)\n    at Object.<anonymous> (/tmp/tmp7jy436qr.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length ===\
    \ 0 && lst2.length === 0){\n        return [];\n    }\n    if (total_chars(lst1)\
    \ < total_chars(lst2)){\n        return lst1;\n    }\n    else{\n        return\
    \ lst2;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpc2n5h761.js:19\n    if (total_chars(lst1) < total_chars(lst2)){\n\
    \    ^\n\nReferenceError: total_chars is not defined\n    at total_match (/tmp/tmpc2n5h761.js:19:5)\n\
    \    at test (/tmp/tmpc2n5h761.js:33:20)\n    at Object.<anonymous> (/tmp/tmpc2n5h761.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    // WRITE YOUR CODE HERE\n\
    \    let sum1 = 0;\n    let sum2 = 0;\n    for (let i = 0; i < lst1.length; i++){\n\
    \        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++){\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2){\n     \
    \   return lst1;\n    }\n    else if (sum1 > sum2){\n        return lst2;\n  \
    \  }\n    else {\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return [];\n    }\n    var charCount1 = 0;\n\
    \    var charCount2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n       \
    \ charCount1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n\
    \        charCount2 += lst2[i].length;\n    }\n    if (charCount1 > charCount2){\n\
    \        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length == 0\
    \ && lst2.length == 0){\n        return []\n    }\n    else if (lst1.length ==\
    \ 0){\n        return lst2\n    }\n    else if (lst2.length == 0){\n        return\
    \ lst1\n    }\n    else{\n        var total1 = 0\n        var total2 = 0\n   \
    \     for (var i = 0; i < lst1.length; i++){\n            total1 += lst1[i].length\n\
    \        }\n        for (var i = 0; i < lst2.length; i++){\n            total2\
    \ += lst2[i].length\n        }\n        if (total1 == total2){\n            return\
    \ lst1\n        }\n        else if (total1 < total2){\n            return lst1\n\
    \        }\n        else{\n            return lst2\n        }\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'this'\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpna8oag08.js:58:10)\n\
    \    at Object.<anonymous> (/tmp/tmpna8oag08.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'this' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 1
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n\tlet total1 = 0;\n\tlet\
    \ total2 = 0;\n\tfor(let i = 0; i < lst1.length; i++){\n\t\ttotal1 += lst1[i].length;\n\
    \t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\ttotal2 += lst2[i].length;\n\t\
    }\n\tif(total1 < total2){\n\t\treturn lst1;\n\t}\n\treturn lst2;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n \
    \ 'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n\
    \    at test (/tmp/tmpccxfqbwm.js:41:10)\n    at Object.<anonymous> (/tmp/tmpccxfqbwm.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = 0;\n  \
    \  let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        count1\
    \ += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n     \
    \   count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return\
    \ lst1;\n    }\n    else if(count1 > count2){\n        return lst2;\n    }\n \
    \   else{\n        return lst1;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
- exit_code: 0
  program: "//Write a function that accepts two arrays of strings and returns the\
    \ array that has \n// total number of chars in the all strings of the array less\
    \ than the other array.\n// if the two arrays have the same number of chars, return\
    \ the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
    ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
    , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let tot1 = 0;\n    let\
    \ tot2 = 0;\n    for(let item of lst1){\n        tot1 += item.length;\n    }\n\
    \    for(let item of lst2){\n        tot2 += item.length;\n    }\n    if(tot1\
    \ == tot2){\n        return lst1;\n    }\n    else if(tot1 < tot2){\n        return\
    \ lst1;\n    }\n    else{\n        return lst2;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977473
