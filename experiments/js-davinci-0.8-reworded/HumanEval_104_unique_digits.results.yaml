language: js
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = []\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString()\n        if(num.indexOf('2') === -1\
    \ && num.indexOf('4') === -1 && num.indexOf('6') === -1 && num.indexOf('8') ===\
    \ -1 && num.indexOf('0') === -1){\n            result.push(x[i])\n        }\n\
    \    }\n    return result.sort(function(a, b){return a-b})\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\treturn x.filter(function(num){\n\t\treturn (num\
    \ % 2 === 1) && (num % 10 !== 0);\n\t}).sort(function(a, b){\n\t\treturn a - b;\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpujrhhaer.js:23:10)\n    at Object.<anonymous> (/tmp/tmpujrhhaer.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var evens = [0,2,4,6,8]\n  var result = []\n  for\
    \ (var i = 0; i < x.length; i++) {\n    var count = 0\n    for (var j = 0; j <\
    \ x[i].toString().length; j++) {\n      for (var k = 0; k < evens.length; k++)\
    \ {\n        if (parseInt(x[i].toString()[j]) === evens[k]) {\n          count\
    \ += 1\n        }\n      }\n    }\n    if (count === 0) {\n      result.push(x[i])\n\
    \    }\n  }\n  return result.sort(function(a,b){return a-b})\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    function uniqueDigit(arr) {\n        var containsEven\
    \ = false;\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i]\
    \ % 2 === 0) {\n                containsEven = true;\n            }\n        }\n\
    \        return !containsEven;\n    }\n    return x.filter(uniqueDigit).sort();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1422, 15, 33 ]\n\nshould equal\n\n\
    [ 1, 15, 33 ]\n    at test (/tmp/tmpcxxiepqk.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxxiepqk.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1422,\
    \ 15, 33 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var hasEvenDigit = false;\n    var result = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var currentNumber = x[i];\n \
    \       var currentDigit;\n        while(currentNumber > 0){\n            currentDigit\
    \ = currentNumber % 10;\n            if(currentDigit % 2 == 0){\n            \
    \    hasEvenDigit = true;\n                break;\n            }\n           \
    \ currentNumber = Math.floor(currentNumber / 10);\n        }\n        if(!hasEvenDigit){\n\
    \            result.push(x[i]);\n        }\n        hasEvenDigit = false;\n  \
    \  }\n    return result.sort(function(a, b){return a - b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var oddArray = []\n  for(var i = 0; i < x.length;\
    \ i++){\n    if(!(x[i].toString().includes(\"2\")) && !(x[i].toString().includes(\"\
    4\")) && !(x[i].toString().includes(\"6\")) && !(x[i].toString().includes(\"8\"\
    ))){\n      oddArray.push(x[i])\n    }\n  }\n  oddArray.sort(function(a, b){return\
    \ a-b})\n  return oddArray\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 10 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpczzwovuh.js:26:10)\n    at Object.<anonymous> (/tmp/tmpczzwovuh.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var result = [];\n  for (var i = 0; i < x.length;\
    \ i++) {\n    var is_unique = true;\n    var number = x[i].toString();\n    for\
    \ (var j = 0; j < number.length; j++) {\n      if (number[j] % 2 === 0) {\n  \
    \      is_unique = false;\n      }\n    }\n    if (is_unique) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var flag = true;\n        var count = 0;\n        while(x[i]\
    \ > 0){\n            var r = x[i] % 10;\n            if(r % 2 == 0){\n       \
    \         flag = false;\n                break;\n            }\n            count++;\n\
    \            x[i] = Math.floor(x[i] / 10);\n        }\n        if(flag == true){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpvc7b1jqm.js:35:10)\n    at Object.<anonymous> (/tmp/tmpvc7b1jqm.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').includes(\"2\") || x[i].toString().split('').includes(\"\
    4\") || x[i].toString().split('').includes(\"6\") || x[i].toString().split('').includes(\"\
    8\") || x[i].toString().split('').includes(\"0\")){\n            var isUnique\
    \ = false;\n        }\n        else{\n            var isUnique = true;\n     \
    \   }\n        if(isUnique){\n            unique.push(x[i]);\n        }\n    }\n\
    \    return unique.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\treturn x.filter(element => !has_even_digit(element)).sort((a,b)\
    \ => a-b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx26hv30s.js:10\n\treturn x.filter(element => !has_even_digit(element)).sort((a,b)\
    \ => a-b);\n\t                           ^\n\nReferenceError: has_even_digit is\
    \ not defined\n    at /tmp/tmpx26hv30s.js:10:29\n    at Array.filter (<anonymous>)\n\
    \    at unique_digits (/tmp/tmpx26hv30s.js:10:11)\n    at test (/tmp/tmpx26hv30s.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx26hv30s.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet arr = [];\n\tfor(let i = 0; i < x.length; i++){\n\
    \t\tlet counter = 0;\n\t\tlet num = x[i].toString();\n\t\tfor(let j = 0; j < num.length;\
    \ j++){\n\t\t\tif(num[j] % 2 === 0){\n\t\t\t\tcounter += 1;\n\t\t\t}\n\t\t}\n\t\
    \tif(counter === 0){\n\t\t\tarr.push(x[i]);\n\t\t}\n\t}\n\treturn arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let sorted_array = []\n    for (let i = 0; i <\
    \ x.length; i++){\n        if (String(x[i]).includes('2') === false && String(x[i]).includes('4')\
    \ === false && String(x[i]).includes('6') === false && String(x[i]).includes('8')\
    \ === false && String(x[i]).includes('0') === false){\n            sorted_array.push(x[i])\n\
    \        }\n    }\n    return sorted_array.sort(function(a, b){return a-b})\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar res = [];\n\tvar even = function(num){\n\t\t\
    var res = false;\n\t\tvar nums = num.toString().split('');\n\t\tfor(var i = 0;\
    \ i < nums.length; i++){\n\t\t\tif(nums[i] % 2 === 0){\n\t\t\t\tres = true;\n\t\
    \t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tfor(var i = 0; i < x.length; i++){\n\t\t\
    if(!even(x[i])){\n\t\t\tres.push(x[i]);\n\t\t}\n\t}\n\treturn res.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t// array to hold the values without any even digits\n\
    \tvar evens = [];\n\t// loop through the array to be sorted\n\tfor (i=0; i<x.length;\
    \ i++){\n\t\t// array to hold a single value to be tested as a string\n\t\tvar\
    \ y = x[i].toString().split(\"\");\n\t\t// array to hold each digit of a single\
    \ value to be tested\n\t\tvar z = [];\n\t\t// loop through each value in the array\
    \ of the current single value\n\t\tfor (n=0; n<y.length; n++){\n\t\t\t// add to\
    \ the array of digits for the current single value\n\t\t\tz.push(parseInt(y[n]));\n\
    \t\t}\n\t\t// loop through the array of digits for the current single value\n\t\
    \tfor (a=0; a<z.length; a++){\n\t\t\t// if the digit is even, break the loop\n\
    \t\t\tif (z[a] % 2 === 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// if the digit is\
    \ odd and the loop hasn't broken, add the current\n\t\t\t// single value to the\
    \ array of values with no even digits\n\t\t\telse if (a === z.length-1){\n\t\t\
    \t\tevens.push(x[i]);\n\t\t\t}\n\t\t}\n\t}\n\t// if the length of the array of\
    \ values with no even digits is 0, return\n\t// an empty array\n\tif (evens.length\
    \ === 0){\n\t\treturn [];\n\t}\n\t// otherwise, return the array sorted in increasing\
    \ order\n\telse {\n\t\treturn evens.sort(function(a, b){return a-b});\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t\n\tvar newArr = [];\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tif(Number.isInteger(x[i]/2)){\n\t\t\tnewArr.push(x[i]);\n\t\t}\n\t\
    }\n\treturn newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1422 ]\n\nshould equal\n\n[ 1, 15, 33\
    \ ]\n    at test (/tmp/tmp232w69y0.js:25:10)\n    at Object.<anonymous> (/tmp/tmp232w69y0.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n  expected: [ 1, 15, 33 ],\n \
    \ operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().indexOf(\"2\") == -1 && x[i].toString().indexOf(\"\
    4\") == -1 && x[i].toString().indexOf(\"6\") == -1 && x[i].toString().indexOf(\"\
    8\") == -1){\n            result.push(x[i]);\n        }\n    }\n    return result.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 10 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpikp70kay.js:24:10)\n    at Object.<anonymous> (/tmp/tmpikp70kay.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var new_arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") ||\n            x[i].toString().includes(\"6\") || x[i].toString().includes(\"\
    8\") ||\n            x[i].toString().includes(\"0\")){\n                continue;\n\
    \            }\n        else{\n            new_arr.push(x[i]);\n        }\n  \
    \  }\n    return new_arr.sort();\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmp7ls_6pol.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7ls_6pol.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique_odds = [];\n    for (var i = 0; i <\
    \ x.length; i++){\n        var y = x[i].toString();\n        var is_even = false;\n\
    \        for (var j = 0; j < y.length; j++){\n            if (parseInt(y[j]) %\
    \ 2 == 0){\n                is_even = true;\n            }\n        }\n      \
    \  if (is_even == false){\n            unique_odds.push(x[i]);\n        }\n  \
    \  }\n    unique_odds.sort(function(a, b){return a-b});\n    return unique_odds;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  \n  //declare new array\n  //loop through array\n\
    \  //check if current index has an even digit\n  //if it does, append it to new\
    \ array\n  //return new array\n\n\n  var newArray = [];\n  for(var i = 0; i <\
    \ x.length; i++){\n    var isEven = false;\n    var currentNum = x[i].toString();\n\
    \    for(var j = 0; j < currentNum.length; j++){\n      if(parseInt(currentNum[j])\
    \ % 2 === 0){\n        isEven = true;\n      }\n    }\n    if(isEven === false){\n\
    \      newArray.push(x[i]);\n    }\n  }\n  return newArray;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpt2rh9ah3.js:38:10)\n    at Object.<anonymous> (/tmp/tmpt2rh9ah3.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let temp = x[i].toString();\n        for(let j = 0; j < temp.length;\
    \ j++){\n            if(temp[j] % 2 == 0){\n                break;\n         \
    \   }else if(j == temp.length - 1){\n                arr.push(temp);\n       \
    \     }\n        }\n    }\n    return arr.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '135', '31' ]\n\nshould equal\n\n[ 31,\
    \ 135 ]\n    at test (/tmp/tmpzg3g5i68.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzg3g5i68.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '135', '31' ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evenDigit = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(!x[i].toString().includes('2') && !x[i].toString().includes('4')\
    \ && !x[i].toString().includes('6') && !x[i].toString().includes('8')){\n    \
    \        evenDigit.push(x[i]);\n        }\n    }\n    return evenDigit.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjzr7ne0_.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpjzr7ne0_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet output = [];\n\tfor (let i = 0; i < x.length;\
    \ i++){\n\t\tlet arr = x[i].toString().split('');\n\t\tlet flag = true;\n\t\t\
    for (let j = 0; j < arr.length; j++){\n\t\t\tif (arr[j] == 0 || arr[j] == 2 ||\
    \ arr[j] == 4 || arr[j] == 6 || arr[j] == 8){\n\t\t\t\tflag = false;\n\t\t\t}\n\
    \t\t}\n\t\tif (flag){\n\t\t\toutput.push(x[i]);\n\t\t}\n\t}\n\treturn output.sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  //complete this function\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp6fhzdr5e.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6fhzdr5e.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  for(var i = 0; i < x.length; i++){\n    var found\
    \ = false;\n    for(var j = 0; j < x[i].toString().length; j++){\n      if(parseInt(x[i].toString()[j])\
    \ % 2 === 0){\n        found = true;\n      }\n    }\n    if(found){\n      x.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  return x.sort(function(a, b){return a - b});\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var newArr = [];\n  var evenArr = [];\n  for(var\
    \ i = 0; i < x.length; i++){\n    if(x[i] % 2 !== 0){\n      newArr.push(x[i]);\n\
    \    }\n  }\n  for(var j = 0; j < newArr.length; j++){\n    var b = newArr[j].toString();\n\
    \    for(var k = 0; k < b.length; k++){\n      if(b[k] % 2 === 0){\n        evenArr.push(newArr[j]);\n\
    \      }\n    }\n  }\n  for(var z = 0; z < evenArr.length; z++){\n    for(var\
    \ c = 0; c < newArr.length; c++){\n      if(evenArr[z] === newArr[c]){\n     \
    \   newArr.splice(c, 1);\n      }\n    }\n  }\n  return newArr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp22rcs8e0.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp22rcs8e0.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar y = [1,15,33];\n\tvar z = [];\n\tvar even =\
    \ 0;\n\tfor (var j = 0; j < x.length; j++){\n\t\tvar str = x[j].toString();\n\t\
    \tfor (var i = 0; i < str.length; i++){\n\t\t\tif (str[i] % 2 == 0){\n\t\t\t\t\
    even += 1;\n\t\t\t}\n\t\t}\n\t\tif (even == 0){\n\t\t\tz.push(x[j]);\n\t\t}\n\t\
    \teven = 0;\n\t}\n\treturn z;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmphusaqckf.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmphusaqckf.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t// your code here...\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp9m32fsfl.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9m32fsfl.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar result = [];\n\tfor (var i = 0; i < x.length;\
    \ i++) {\n\t\tvar x_string = x[i].toString();\n\t\tvar count = 0;\n\t\tfor (var\
    \ j = 0; j < x_string.length; j++) {\n\t\t\tif (x_string[j] % 2 === 0) {\n\t\t\
    \t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\tif (count === 0) {\n\t\t\tresult.push(x[i]);\n\
    \t\t}\n\t}\n\treturn result.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    for(i=0; i<x.length; i++){\n        var str =\
    \ x[i].toString();\n        for(j=0; j<str.length; j++){\n            var c =\
    \ str.charAt(j);\n            if(c==\"2\" || c==\"4\" || c==\"6\" || c==\"8\"\
    \ || c==\"0\"){\n                x.splice(i,1);\n                i--;\n      \
    \          break;\n            }\n        }\n    }\n    return x;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmprnsa0z8v.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmprnsa0z8v.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var result = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var digits = x[i].toString().split('');\n\
    \        //console.log(digits);\n        for(var j = 0; j < digits.length; j++){\n\
    \            //console.log(digits[j]);\n            if (digits[j] % 2 == 0){\n\
    \                //console.log(\"even digit: \" + digits[j]);\n              \
    \  even_digits.push(digits[j]);\n            }\n        }\n        if (even_digits.length\
    \ == 0){\n            result.push(x[i]);\n        }\n        even_digits = [];\n\
    \    }\n    return result.sort(function(a, b){return a-b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let oddDigit = x.filter(function(num){\n     \
    \   let num_strings = num.toString();\n        return (num_strings.includes('2')\
    \ || num_strings.includes('4') || num_strings.includes('6') || num_strings.includes('8')\
    \ || num_strings.includes('0'));\n    });\n    return oddDigit;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpykbcwxdh.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpykbcwxdh.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let array = []\n    for(i = 0; i < x.length; i++){\n\
    \        let xString = x[i].toString();\n        let evenDigit = false;\n    \
    \    for(j = 0; j < xString.length; j++){\n            if(xString[j] % 2 === 0){\n\
    \                evenDigit = true;\n            }\n        }\n        if(evenDigit\
    \ === false){\n            array.push(x[i]);\n        }\n    }\n    array.sort((a,\
    \ b) => a - b);\n    return array;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  // write your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpdvxpamuq.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvxpamuq.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet result = [];\n\tfor(let i = 0; i < x.length;\
    \ i++){\n\t\tlet hasEven = false;\n\t\tlet currentItem = x[i].toString();\n\t\t\
    for(let j = 0; j < currentItem.length; j++){\n\t\t\tif(currentItem[j] % 2 ===\
    \ 0){\n\t\t\t\thasEven = true;\n\t\t\t}\n\t\t}\n\t\tif(!hasEven){\n\t\t\tresult.push(x[i]);\n\
    \t\t}\n\t}\n\treturn result.sort(function(a, b){return a - b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  for(var i = 0; i < x.length; i++){\n    x[i] = x[i].toString().split('');\n\
    \    for(var j = 0; j < x[i].length; j++){\n      if(x[i][j] % 2 === 0){\n   \
    \     x.splice(i, 1);\n        i--;\n        break;\n      }\n    }\n  }\n  x.sort(function(a,\
    \ b){return a - b});\n  return x;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    '1',\n\
    \    '5'\n  ],\n  [\n    '3',\n    '3'\n  ],\n  [\n    '1'\n  ]\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp6_wmwsx6.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6_wmwsx6.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ '1', '5'\
    \ ], [ '3', '3' ], [ '1' ] ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evens = [2,4,6,8,0];\n    let results = [];\n\
    \    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString().split('');\n\
    \        let t = [];\n        for(let j = 0; j < num.length; j++){\n         \
    \   if(evens.includes(Number(num[j]))){\n                t.push(num[j]);\n   \
    \         }\n        }\n        if(t.length === 0){\n            results.push(x[i]);\n\
    \        }\n    }\n    return results.sort(function(a,b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique_digits = [];\n    for (var i = 0; i\
    \ < x.length; i++){\n        var unique = true;\n        var each_num = x[i].toString().split(\"\
    \");\n        for (var j = 0; j < each_num.length; j++){\n            if (each_num[j]\
    \ % 2 === 0){\n                unique = false;\n            }\n        }\n   \
    \     if (unique == true){\n            unique_digits.push(x[i]);\n        }\n\
    \    }\n    return unique_digits.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr=[];\n    for(var i=0;i<x.length;i++){\n\
    \        if(x[i]%2!=0){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpegoyf4ja.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpegoyf4ja.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar unique = [];\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tvar split = x[i].toString().split('');\n\t\tvar bool = true;\n\t\t\
    for(var j = 0; j < split.length; j++){\n\t\t\tif(split[j] % 2 === 0){\n\t\t\t\t\
    bool = false;\n\t\t\t}\n\t\t}\n\t\tif(bool){\n\t\t\tunique.push(x[i]);\n\t\t}\n\
    \t}\n\treturn unique.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let result = [];\n  for (let i = 0; i < x.length;\
    \ i++){\n    let number = x[i].toString();\n    for (let j = 0; j < number.length;\
    \ j++){\n      if (number[j] % 2 === 0){\n        result.push(x[i]);\n       \
    \ break;\n      }\n    }\n  }\n  return result;\n}\nunique_digits([15, 33, 1422,\
    \ 1]);\nunique_digits([152, 323, 1422, 10]);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp4cysj366.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4cysj366.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr =[];\n    for(var i=0; i<x.length; i++){\n\
    \        var num = x[i];\n        var even = 0;\n        while(num){\n       \
    \     var digit = num%10;\n            if(digit%2 == 0){\n                even++;\n\
    \            }\n            num = parseInt(num/10);\n        }\n        if(even\
    \ == 0){\n            arr.push(x[i]);\n        }\n    }\n    return arr.sort();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp5qycr42n.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5qycr42n.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var newarr = [];\n  for(var i = 0; i < x.length;\
    \ i++){\n    var str = x[i].toString();\n    var counter = 0;\n    for(var j =\
    \ 0; j < str.length; j++){\n      if(str[j] % 2 === 0){\n        counter++;\n\
    \      }\n    }\n    if(counter === 0){\n      newarr.push(x[i]);\n    }\n  }\n\
    \  return newarr.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var z = [];\n    for(i=0; i<x.length; i++){\n\
    \        var y = x[i].toString();\n        if(y.indexOf('2') == -1 && y.indexOf('4')\
    \ == -1 && y.indexOf('6') == -1 && y.indexOf('8') == -1 && y.indexOf('0') == -1){\n\
    \            z.push(x[i]);\n        }\n    }\n    return z.sort();\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpfzktbazm.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfzktbazm.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(isodd);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5mpd8f4s.js:10\n    return x.filter(isodd);\n                 \
    \   ^\n\nReferenceError: isodd is not defined\n    at unique_digits (/tmp/tmp5mpd8f4s.js:10:21)\n\
    \    at test (/tmp/tmp5mpd8f4s.js:17:20)\n    at Object.<anonymous> (/tmp/tmp5mpd8f4s.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet tmparr = [];\n\tfor(let i = 0; i < x.length;\
    \ i++){\n\t\tif(x[i].toString().match(/[2468]/g) == null){\n\t\t\ttmparr.push(x[i]);\n\
    \t\t}\n\t}\n\treturn tmparr.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpfy2_ytfz.js:25:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfy2_ytfz.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = []\n    for(let i = 0; i < x.length;\
    \ i++){\n        let str = x[i].toString()\n        if(str.includes('2') || str.includes('4')\
    \ || str.includes('6') || str.includes('8') || str.includes('0')){\n         \
    \   console.log(str)\n        }else{\n            arr.push(x[i])\n        }\n\
    \    }\n    return arr.sort(function(a, b){return a-b})\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1422

    152

    323

    1422

    10

    12345

    2033

    103

    '
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var sorted = [];\n  var count = 0;\n  var even =\
    \ [];\n  for(var i = 0; i < x.length; i++){\n    even.push(x[i].toString().split(\"\
    \"));\n  }\n  for(var i = 0; i < even.length; i++){\n    for(var j = 0; j < even[i].length;\
    \ j++){\n      if(even[i][j] % 2 === 0){\n        count ++;\n      }\n    }\n\
    \    if(count === 0){\n      sorted.push(even[i].join(\"\"));\n    }\n    count\
    \ = 0;\n  }\n  return sorted.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var uniques = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var count = 0;\n        var current = x[i].toString();\n    \
    \    for(var j = 0; j < current.length; j++){\n            if(current[j] % 2 !=\
    \ 0){\n                count++;\n            }\n        }\n        if(count ==\
    \ current.length){\n            uniques.push(x[i]);\n        }\n    }\n    uniques.sort(function(a,\
    \ b){return a-b});\n    return uniques;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var list = [];\n    for(i = 0; i < x.length; i++){\n\
    \        var numb = x[i];\n        var has_even = false;\n        while(numb >\
    \ 0){\n            var n = numb % 10;\n            if(n%2 === 0){\n          \
    \      has_even = true;\n                break;\n            }\n            numb\
    \ = Math.floor(numb/10);\n        }\n        if(!has_even){\n            list.push(x[i]);\n\
    \        }\n    }\n    return list.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar new_array = [];\n\tfor (i=0; i<x.length; i++){\n\
    \t\tif (x[i].toString().match(/[24680]/g) == null){\n\t\t\tnew_array.push(x[i]);\n\
    \t\t}\n\t}\n\treturn new_array.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let uniqueArray = [];\n    for(let i = 0; i <\
    \ x.length; i++){\n        if(toArray(x[i]).includes(2)){\n            continue;\n\
    \        }\n        else if(toArray(x[i]).includes(4)){\n            continue;\n\
    \        }\n        else if(toArray(x[i]).includes(6)){\n            continue;\n\
    \        }\n        else if(toArray(x[i]).includes(8)){\n            continue;\n\
    \        }\n        else{\n            uniqueArray.push(x[i]);\n        }\n  \
    \  }\n    return uniqueArray.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgfv76oal.js:12\n        if(toArray(x[i]).includes(2)){\n      \
    \  ^\n\nReferenceError: toArray is not defined\n    at unique_digits (/tmp/tmpgfv76oal.js:12:9)\n\
    \    at test (/tmp/tmpgfv76oal.js:35:20)\n    at Object.<anonymous> (/tmp/tmpgfv76oal.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = []\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(has_even_digit(x[i])===false){\n            arr.push(x[i])\n\
    \        }\n    }\n    arr.sort(function(a, b){return a-b})\n    return arr\n\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwb_5dk2i.js:12\n        if(has_even_digit(x[i])===false){\n   \
    \     ^\n\nReferenceError: has_even_digit is not defined\n    at unique_digits\
    \ (/tmp/tmpwb_5dk2i.js:12:9)\n    at test (/tmp/tmpwb_5dk2i.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpwb_5dk2i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  return x.filter(x => x.toString().split('').every(c\
    \ => parseInt(c) % 2));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpafxprd6r.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpafxprd6r.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var even = [0,2,4,6,8];\n  for(var i = 0; i < x.length;\
    \ i++){\n    for(var j = 0; j < even.length; j++){\n      if(even[j] == x[i]){\n\
    \        x.splice(i,1);\n      }\n    }\n  }\n  console.log(x);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmprefbwkzp.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmprefbwkzp.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 15, 33, 1422, 1 ]

    '
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evens = x.filter(function(y){\n        y =\
    \ y.toString();\n        return y.includes(\"2\") || y.includes(\"4\") || y.includes(\"\
    6\") || y.includes(\"8\");\n    });\n    return evens;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp001ux_n6.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp001ux_n6.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  //Good luck!\n  var res = [];\n  var even = [];\n\
    \  var temp = [];\n  for(i=0; i<x.length; i++){\n    temp.push(x[i].toString().split(''));\n\
    \  }\n  for(var i=0; i<temp.length; i++){\n    var flag = 0;\n    for(var j=0;\
    \ j<temp[i].length; j++){\n      if(temp[i][j]%2 == 0){\n        flag = 1;\n \
    \       break;\n      }\n    }\n    if(flag == 0){\n      res.push(x[i]);\n  \
    \  }\n  }\n  res.sort(function(a, b){return a-b});\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    const contains_even = (num) => num.toString().split('').some(char\
    \ => parseInt(char) % 2 === 0);\n    return x.filter(el => !contains_even(el)).sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let newArr = []\n    for(let i = 0; i < x.length;\
    \ i++){\n        let n = x[i]\n        if(n % 2 !== 0){\n            newArr.push(n)\n\
    \        }\n    }\n    return newArr.sort((a,b) => a - b)\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpfjw_bs86.js:27:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfjw_bs86.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    \n    \n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpjh00asvw.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjh00asvw.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar result = [];\n\tfor (var i = 0; i < x.length;\
    \ i++) {\n\t\tvar digits = x[i].toString().split('');\n\t\tvar hasEven = false;\n\
    \t\tfor (var j = 0; j < digits.length; j++) {\n\t\t\tif(digits[j] % 2 === 0){\n\
    \t\t\t\thasEven = true;\n\t\t\t}\n\t\t}\n\t\tif(!hasEven){\n\t\t\tresult.push(x[i]);\n\
    \t\t}\n\t}\n\treturn result.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet even = [];\n\tx.forEach(function(n){\n\t\tif\
    \ (n % 2 == 0){\n\t\t\teven.push(n);\n\t\t}\n\t});\n\teven.sort(function(a, b){return\
    \ a-b});\n\treturn even;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpwgae3_2k.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwgae3_2k.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar answer = [];\n\tfor (var i = 0; i < x.length;\
    \ i++) {\n\t\tfor (var j = 0; j < x[i].toString().length; j++) {\n\t\t\tif (x[i].toString()[j]%2===0)\
    \ {\n\t\t\t\tanswer.push(x[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn answer;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422,\n \
    \ 1422,\n  1422\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n \
    \   at test (/tmp/tmps6vw94n4.js:25:10)\n    at Object.<anonymous> (/tmp/tmps6vw94n4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422, 1422,\
    \ 1422 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let uniqueArray = [];\n    for(let i = 0; i <\
    \ x.length; i++){\n        let numString = x[i].toString();\n        if (numString.includes('2')\
    \ || numString.includes('4') || numString.includes('6') || numString.includes('8')\
    \ || numString.includes('0')){\n        } else {\n            uniqueArray.push(x[i]);\n\
    \        }\n    }\n    return uniqueArray.sort((a, b) => a - b);\n}\nunique_digits([152,\
    \ 323, 1422, 10]);\nunique_digits([15, 33, 1422, 1]);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpbeh6khgv.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbeh6khgv.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var sorted = [];\n  for (var i = 0; i < x.length;\
    \ i++) {\n    var flag = true;\n    var str = x[i].toString().split('');\n   \
    \ for (var j = 0; j < str.length; j++) {\n      if(Number(str[j]) % 2 === 0){\n\
    \        flag = false;\n      }\n    }\n    if(flag){\n      sorted.push(x[i]);\n\
    \    }\n  }\n  return sorted.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evenDigits = [];\n    let answer = [];\n \
    \   for(let i = 0; i < x.length; i++){\n        let y = x[i].toString();\n   \
    \     for(let j = 0; j < y.length; j++){\n            if(y[j]%2 == 0){\n     \
    \           evenDigits.push(x[i]);\n                break;\n            }\n  \
    \      }\n    }\n    for(let i = 0; i < x.length; i++){\n        if(evenDigits.indexOf(x[i])\
    \ == -1){\n            answer.push(x[i]);\n        }\n    }\n    return answer.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\treturn x.filter(function(i){return i.toString().split('').every(function(s){\n\
    \t\treturn parseInt(s)%2!==0;\n\t});}).sort(function(a,b){return a-b;});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tfunction check_unique(x){\n\t\tvar has_unique =\
    \ true;\n\t\tvar value = x.toString();\n\t\tfor(var i = 0; i < value.length; i++){\n\
    \t\t\tif(parseInt(value[i]) % 2 == 0){\n\t\t\t\thas_unique = false;\n\t\t\t}\n\
    \t\t}\n\t\treturn has_unique;\n\t}\n\treturn x.filter(check_unique).sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet y = x.filter(num => {\n\t\tlet digit = num.toString().split('')\n\
    \t\treturn !digit.some(num => num % 2 === 0)\n\t})\n\treturn y.sort((a,b) => a\
    \ - b)\n}\nunique_digits([15, 33, 1422, 1])\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var new_array = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var even = false;\n     \
    \   for (var j = 0; j < num.length; j++){\n            if (num[j] % 2 == 0){\n\
    \                even = true;\n            }\n        }\n        if (even == false){\n\
    \            new_array.push(x[i]);\n        }\n    }\n    return new_array.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let evens = x[i].toString().split('').filter( x => x % 2 ===\
    \ 0);\n        if(evens.length === 0){\n            result.push(x[i]);\n     \
    \   }\n    }\n    return result.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821492
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // x.filter(element => element.toString().includes('2'))\n\
    \    let s = ''\n    for (let i = 0; i < x.length; i++) {\n        s += x[i].toString()\n\
    \    }\n    let result = []\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (s[i] === '2' || s[i] === '4' || s[i] === '6' || s[i] === '8' || s[i] ===\
    \ '0') {\n            result.push(s[i])\n        }\n    }\n    if (result.length\
    \ === 0) {\n        return result\n    } else {\n        return x\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1422,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n   \
    \ at test (/tmp/tmpgo4lqh80.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgo4lqh80.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1422, 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821492
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr=[]\n    for(var i=0;i<x.length;i++){\n\
    \        var n=x[i]\n        while(n!=0){\n            if(n%2==0){\n         \
    \       break\n            }\n            n=Math.floor(n/10)\n        }\n    \
    \    if(n==0){\n            arr.push(x[i])\n        }\n    }\n    return arr.sort(function(a,b){return\
    \ a-b})\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  if (x.length === 0) {\n    return [];\n  }\n  else\
    \ {\n    let uniqueDigitsArray = x.filter(element => {\n      let stringedNumber\
    \ = element.toString();\n      for (let i = 0; i < stringedNumber.length; i++)\
    \ {\n        if (stringedNumber[i] % 2 === 0) {\n          return false;\n   \
    \     }\n      }\n      return true;\n    });\n    return uniqueDigitsArray.sort((a,\
    \ b) => a - b);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(num){\n        return\
    \ is_unique(num)\n    }).sort(function(a,b){\n        return a-b\n    })\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph3th94pz.js:11\n        return is_unique(num)\n        ^\n\nReferenceError:\
    \ is_unique is not defined\n    at /tmp/tmph3th94pz.js:11:9\n    at Array.filter\
    \ (<anonymous>)\n    at unique_digits (/tmp/tmph3th94pz.js:10:14)\n    at test\
    \ (/tmp/tmph3th94pz.js:21:20)\n    at Object.<anonymous> (/tmp/tmph3th94pz.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar nums = [];\n\tx.forEach(function(number){\n\t\
    \tif (number.toString().indexOf('2') == -1 &&\n\t\t\tnumber.toString().indexOf('4')\
    \ == -1 &&\n\t\t\tnumber.toString().indexOf('6') == -1 &&\n\t\t\tnumber.toString().indexOf('8')\
    \ == -1){\n\t\t\tnums.push(number);\n\t\t}\n\t});\n\treturn nums.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpc1t9xutx.js:28:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpc1t9xutx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // your code here\n    var results = []\n    for\
    \ (var i = 0; i < x.length; i++){\n        if(String(x[i]).match(/[02468]/g) ===\
    \ null){\n            results.push(x[i])\n        }\n    }\n    results.sort(function(a,\
    \ b){return a-b})\n    return results\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var newArr = [];\n  for(var i = 0; i < x.length;\
    \ i++){\n    if(!(even_digit(x[i]))){\n      newArr.push(x[i]);\n    }\n  }\n\
    \  newArr.sort(function(a, b){return a-b});\n  return newArr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1relarag.js:12\n    if(!(even_digit(x[i]))){\n    ^\n\nReferenceError:\
    \ even_digit is not defined\n    at unique_digits (/tmp/tmp1relarag.js:12:5)\n\
    \    at test (/tmp/tmp1relarag.js:25:20)\n    at Object.<anonymous> (/tmp/tmp1relarag.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let y = [];\n    for (let i=0; i<x.length; i++){\n\
    \        let a = x[i].toString().split('');\n        for (let j=0; j<a.length;\
    \ j++){\n            if (a[j] % 2 == 0){\n                break;\n           \
    \ }\n            else if (j == a.length-1){\n                y.push(x[i]);\n \
    \           }\n        }\n    }\n    return y.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var new_array = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n      if (x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") || x[i].toString().includes(\"6\") || x[i].toString().includes(\"8\") ||\
    \ x[i].toString().includes(\"0\")){\n        continue;\n      } else {\n     \
    \   new_array.push(x[i]);\n      }\n    }\n    new_array.sort(function(a, b){return\
    \ a-b});\n    return new_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  for(var i = 0; i < x.length; i++){\n    var a =\
    \ x[i].toString().split('');\n    for(var j = 0; j < a.length; j++){\n      if(a[j]\
    \ % 2 === 0){\n        x.splice(i, 1);\n        i--;\n        break;\n      }\n\
    \    }\n  }\n  return x.sort(function(a, b){\n    return a - b;\n  });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar results = [];\n\tfor (var i = 0; i < x.length;\
    \ i++) {\n\t\tvar evens = 0;\n\t\tvar digits = x[i].toString().split('');\n\t\t\
    for (var j = 0; j < digits.length; j++) {\n\t\t\tif (digits[j] % 2 === 0) {\n\t\
    \t\t\tevens += 1;\n\t\t\t}\n\t\t}\n\t\tif (evens === 0) {\n\t\t\tresults.push(x[i]);\n\
    \t\t}\n\t}\n\treturn results.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmprm85g5h4.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmprm85g5h4.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let noEven = []\n  for(let i = 0; i < x.length;\
    \ i++){\n    let even = false\n    let digits = (x[i]+'').split('')\n    for(let\
    \ j = 0; j < digits.length; j++){\n      if(parseInt(digits[j]) % 2 === 0){\n\
    \        even = true\n      }\n    }\n    if(!even){\n      noEven.push(x[i])\n\
    \    }\n  }\n  return noEven.sort((a,b) => a-b)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(int){\n        for(var\
    \ i = 0; i < int.toString().length; i++){\n            if(int.toString()[i] %\
    \ 2 === 0){\n                return false;\n            }\n        }\n       \
    \ return true;\n    }).sort(function(a, b){\n        return a - b;\n    });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmperevbqti.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmperevbqti.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    x.forEach(function(ele){\n\
    \        var isEleUnique = true;\n        var eleStr = ele.toString();\n     \
    \   for(var i = 0; i < eleStr.length; i++){\n            if(parseInt(eleStr[i])\
    \ % 2 === 0){\n                isEleUnique = false;\n            }\n        }\n\
    \        if(isEleUnique){\n            newArr.push(ele);\n        }\n    });\n\
    \    return newArr.sort(function(a, b){return a - b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  // Write your code here...\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp_wb1g7cp.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_wb1g7cp.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evens = [];\n    let odds = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        x[i].toString().split('').forEach(function(n){\n\
    \            if(n % 2 == 0){\n                evens.push(x[i]);\n            }\n\
    \            else{\n                odds.push(x[i]);\n            }\n        });\n\
    \    }\n    evens = evens.filter(function(item, pos){\n        return evens.indexOf(item)\
    \ == pos;\n    });\n    odds = odds.filter(function(item, pos){\n        return\
    \ odds.indexOf(item) == pos;\n    });\n    return odds.sort(function(a, b){return\
    \ a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  15,\n\
    \  33,\n  1422\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n  \
    \  at test (/tmp/tmprw17p4hm.js:35:10)\n    at Object.<anonymous> (/tmp/tmprw17p4hm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 15, 33,\
    \ 1422 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // do something\n    return \"do something\"\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'do something'\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpynau5dll.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpynau5dll.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'do something',\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmptuo1trfl.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmptuo1trfl.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(num){\n        var num_arr\
    \ = num.toString().split('');\n        return num_arr.every(function(ele){\n \
    \           return parseInt(ele) % 2 !== 0;\n        });\n    }).sort(function(a,b){\n\
    \        return a - b;\n    });\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // var n = x.toString();\n    // var n_split =\
    \ n.split(\"\");\n    // var even_count = 0;\n    // for (var i = 0; i < n_split.length;\
    \ i++){\n    //     if(n_split[i] % 2 == 0){\n    //         even_count++;\n \
    \   //     }\n    // }\n    // return even_count\n    var result = [];\n    for\
    \ (var i = 0; i < x.length; i++){\n        var n = x[i].toString();\n        var\
    \ n_split = n.split(\"\");\n        var even_count = 0;\n        for (var j =\
    \ 0; j < n_split.length; j++){\n            if(n_split[j] % 2 == 0){\n       \
    \         even_count++;\n            }\n        }\n        if (even_count == 0){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,b)\
    \ => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = x.filter(function(a){\n        if (a.toString().split('').some(function(b){\n\
    \            return b % 2 == 0;\n        })){\n            return true;\n    \
    \    }\n    });\n    return y;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpwgwdza0m.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwgwdza0m.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    for(var i = 0; i < x.length; i++){\n        var\
    \ num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n     \
    \       if(num[j] % 2 === 0){\n                x.splice(i, 1);\n             \
    \   i--;\n                break;\n            }\n        }\n    }\n    return\
    \ x.sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpany6p1ic.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpany6p1ic.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(el => el % 2 !== 0)){\n  \
    \          arr.push(x[i]);\n        }\n    }\n    return arr.sort((a,b) => a -\
    \ b);\n}\nunique_digits([15, 33, 1422, 1]);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  //first you have to know what is an even number\
    \ \n  //in java script we use modulus operator \n  //the modulus operator is remainder\
    \ the even number \n  //if its divided by 2 \n  //1%2=1 because 2 goes into 1\
    \ zero times with one left over\n  //2%2=0 because 2 goes into 2 evenly zero left\
    \ over \n  //3%2=1 because 2 goes into 3 one time with one left over \n  //4%2=0\
    \ because 2 goes into 4 evenly zero left over \n  //5%2=1 because 2 goes into\
    \ 5 two times with one left over \n  //6%2=0 because 2 goes into 6 three times\
    \ with no left over \n  //7%2=1 because 2 goes into 7 three times with one left\
    \ over \n  //8%2=0 because 2 goes into 8 four times with no left over \n  //9%2=1\
    \ because 2 goes into 9 four times with one left over \n  //10%2=0 because 2 goes\
    \ into 10 five times with no left over \n  //11%2=1 because 2 goes into 11 five\
    \ times with one left over \n  //12%2=0 because 2 goes into 12 six times with\
    \ no left over \n  //13%2=1 because 2 goes into 13 six times with one left over\
    \ \n  //14%2=0 because 2 goes into 14 seven times with no left over \n  //15%2=1\
    \ because 2 goes into 15 seven times with one left over \n  //16%2=0 because 2\
    \ goes into 16 eight times with no left over \n  //17%2=1 because 2 goes into\
    \ 17 eight times with one left over \n  //18%2=0 because 2 goes into 18 nine times\
    \ with no left over \n  //19%2=1 because 2 goes into 19 nine times with one left\
    \ over \n  //20%2=0 because 2 goes into 20 ten times with no left over \n  //21%2=1\
    \ because 2 goes into 21 ten times with one left over \n  //22%2=0 because 2 goes\
    \ into 22 eleven times with no left over \n  //23%2=1 because 2 goes into 23 eleven\
    \ times with one left over \n  //24%2=0 because\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxc16hu3z.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let new_arr = [];\n    let sorted_arr = [];\n\
    \    let sorted_arr2 = [];\n    for(let i = 0; i < x.length; i++){\n        if\
    \ (x[i].toString().length === 1){\n            new_arr.push(x[i]);\n        }\n\
    \        else{\n            let arr_num = x[i].toString().split('');\n       \
    \     let is_even = arr_num.every(e => {\n                return parseInt(e) %\
    \ 2 != 0;\n            });\n            if(is_even){\n                new_arr.push(x[i]);\n\
    \            }\n        }\n    }\n    for(let i = 0; i < new_arr.length; i++){\n\
    \        let min = Math.min(...new_arr);\n        sorted_arr.push(min);\n    \
    \    new_arr.splice(new_arr.indexOf(min), 1);\n    }\n    return sorted_arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  15\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpxu0dxib_.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxu0dxib_.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 15 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var is_even = false;\n        var digit_list = x[i].toString().split(\"\
    \");\n        for(var j = 0; j < digit_list.length; j++){\n            if (Number(digit_list[j])\
    \ % 2 == 0){\n                is_even = true;\n            }\n        }\n    \
    \    if(!is_even){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let result=[];\n  x.forEach(el=>{\n    let isEvenDigit=false;\n\
    \    el.toString().split('').forEach(char=>{\n      if(char=='2'||char=='4'||char=='6'||char=='8'||char=='0'){\n\
    \        isEvenDigit=true;\n      }\n    })\n    if(!isEvenDigit){\n      result.push(el);\n\
    \    }\n  })\n  return result.sort((a,b)=>a-b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n   let arr = []\n   for(let i = 0; i < x.length; i++){\n\
    \      if(x[i].toString().indexOf('2') === -1 && x[i].toString().indexOf('4')\
    \ === -1 && x[i].toString().indexOf('6') === -1 && x[i].toString().indexOf('8')\
    \ === -1 && x[i].toString().indexOf('0') === -1){\n         arr.push(x[i])\n \
    \     }\n   }\n   let sorted = arr.sort(function(a, b){return a-b})\n   return\
    \ sorted\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var nums = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var flag = true;\n        var curr_num = x[i].toString();\n \
    \       for(var j = 0; j < curr_num.length; j++){\n            if(parseInt(curr_num[j])\
    \ % 2 == 0){\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if(flag){\n            nums.push(parseInt(curr_num));\n\
    \        }\n    }\n    return nums.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let unique_array = [];\n  for (let num of x){\n\
    \    let str_num = num.toString();\n    let count = 0;\n    for (let digit of\
    \ str_num){\n      if(digit % 2 == 0){\n        count += 1;\n      }\n    }\n\
    \    if (count == 0){\n      unique_array.push(num);\n    }\n  }\n  return unique_array.sort((a,b)\
    \ => a-b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  function isOdd(num){\n    return (num % 2 !== 0)\n\
    \  }\n  function convertToStr(num){\n    return num.toString()\n  }\n  function\
    \ split(str){\n    return str.split('')\n  }\n  function map(arr, callback){\n\
    \    let result = []\n    for(let i = 0; i < arr.length; i++){\n      result.push(callback(arr[i]))\n\
    \    }\n    return result\n  }\n  function filter(arr, callback){\n    let result\
    \ = []\n    for(let i = 0; i < arr.length; i++){\n      if(callback(arr[i])){\n\
    \        result.push(arr[i])\n      }\n    }\n    return result\n  }\n  let oddNums\
    \ = map(x, convertToStr)\n  oddNums = map(oddNums, split)\n  oddNums = map(oddNums,\
    \ filter)\n  oddNums = map(oddNums, (arr) => arr.length === arr.length)\n  console.log(oddNums)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzheexe4e.js:29\n      if(callback(arr[i])){\n         ^\n\nTypeError:\
    \ callback is not a function\n    at filter (/tmp/tmpzheexe4e.js:29:10)\n    at\
    \ map (/tmp/tmpzheexe4e.js:22:19)\n    at unique_digits (/tmp/tmpzheexe4e.js:37:13)\n\
    \    at test (/tmp/tmpzheexe4e.js:47:20)\n    at Object.<anonymous> (/tmp/tmpzheexe4e.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var arr = x[i].toString().split('');\n        var count = 0;\n\
    \        for(var j = 0; j < arr.length; j++){\n            if(arr[j] % 2 === 0){\n\
    \                count += 1;\n            }\n        }\n        if(count === 0){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar unique = [];\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tif(x[i].toString().split('').some(is_even) === false){\n\t\t\tunique.push(x[i]);\n\
    \t\t}\n\t}\n\treturn unique.sort(function(a, b){\n\t\treturn a - b;\n\t});\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpi44oc3oh.js:12\n\t\tif(x[i].toString().split('').some(is_even)\
    \ === false){\n\t\t                                  ^\n\nReferenceError: is_even\
    \ is not defined\n    at unique_digits (/tmp/tmpi44oc3oh.js:12:37)\n    at test\
    \ (/tmp/tmpi44oc3oh.js:25:20)\n    at Object.<anonymous> (/tmp/tmpi44oc3oh.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet oddDigitArray = [];\n\tlet splitDigit = 0;\n\
    \tx.forEach(function(element){\n\t\tif (element.toString().split('').length ===\
    \ 1){\n\t\t\toddDigitArray.push(element);\n\t\t}\n\t\telse{\n\t\t\tsplitDigit\
    \ = element.toString().split('');\n\t\t\tif (splitDigit[0] % 2 === 1 && splitDigit[1]\
    \ % 2 === 1){\n\t\t\t\toddDigitArray.push(element);\n\t\t\t}\n\t\t}\n\t});\n\t\
    return oddDigitArray.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  152\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpgexh9o0y.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpgexh9o0y.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 152 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar y = [];\n\tfor (var i = 0; i < x.length; i++)\
    \ {\n\t\tvar count = 0;\n\t\tvar temp = x[i].toString();\n\t\tfor (var j = 0;\
    \ j < temp.length; j++) {\n\t\t\tif (temp[j]%2!=0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t\tif (count==temp.length) {\n\t\t\ty.push(x[i]);\n\t\t}\n\t}\n\ty.sort(function(a,\
    \ b){return a-b});\n\treturn y;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var evenArray = [];\n  var newArray = [];\n  for(var\
    \ i = 0; i < x.length; i++){\n    var check = true;\n    var current = String(x[i]);\n\
    \    for(var j = 0; j < current.length; j++){\n      if(current[j]%2 === 0){\n\
    \        check = false;\n      }\n    }\n    if(check){\n      evenArray.push(x[i]);\n\
    \    }\n  }\n  return evenArray.sort(function(a,b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let newArray = [];\n  for (let i = 0; i < x.length;\
    \ i++){\n    if (x[i].toString().split('').every(n => parseInt(n) % 2 != 0)){\n\
    \      newArray.push(x[i]);\n    }\n  }\n  return newArray.sort((a, b) => a -\
    \ b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var allEven = [];\n    var unique = [];\n    var\
    \ hasEven;\n    //loop through all numbers in the array\n    for(var i = 0; i\
    \ < x.length; i++){\n        //convert the number to a string\n        var toString\
    \ = x[i].toString();\n        //convert the string to an array of strings\n  \
    \      var numArray = toString.split(\"\");\n        //loop through the array\
    \ of numbers\n        for(var j = 0; j < numArray.length; j++){\n            //if\
    \ one of the numbers is even, set the hasEven variable to true\n            if(numArray[j]\
    \ % 2 === 0){\n                hasEven = true;\n            }else{\n         \
    \       hasEven = false;\n            }\n        }\n        //if the hasEven variable\
    \ is true, push the number to the allEven array\n        if(hasEven === true){\n\
    \            allEven.push(x[i]);\n        }\n    }\n    //loop through the original\
    \ array\n    for(var k = 0; k < x.length; k++){\n        //if the original array[k]\
    \ is not in the allEven array, push it to unique\n        if(allEven.indexOf(x[k])\
    \ === -1){\n            unique.push(x[k]);\n        }\n    }\n    //return unique\n\
    \    return unique;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp7upzjd8g.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7upzjd8g.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    //your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp9weij2ea.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9weij2ea.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique_array = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var flag = true;\n        var num = x[i].toString();\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag){\n            unique_array.push(num);\n        }\n    }\n\
    \    return unique_array.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    x.sort();\n    for(var i\
    \ = 0; i < x.length; i++){\n        var y = x[i].toString();\n        var even\
    \ = false;\n        for(var j = 0; j < y.length; j++){\n            if(y[j] %\
    \ 2 == 0){\n                even = true;\n            }\n        }\n        if(even\
    \ == false){\n            unique.push(x[i]);\n        }\n    }\n    return unique;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp1r8p30fp.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1r8p30fp.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var lista_cuadrados=[];\n    for(var i=0;i<x.length;i++){\n\
    \        var numero=String(x[i]);\n        var bool=true;\n        for(var j=0;j<numero.length;j++){\n\
    \            if(numero[j]%2==0){\n                bool=false;\n            }\n\
    \        }\n        if(bool){\n            lista_cuadrados.push(x[i]);\n     \
    \   }\n    }\n    lista_cuadrados.sort(function(a, b){return a-b});\n    return\
    \ lista_cuadrados;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let newArr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        // let string = x[i].toString();\n        if(!x[i].toString().includes(\"\
    2\") && !x[i].toString().includes(\"4\") && !x[i].toString().includes(\"6\") &&\
    \ !x[i].toString().includes(\"8\") && !x[i].toString().includes(\"0\")){\n   \
    \         newArr.push(x[i]);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // your code here\n    let arr = [];\n    for(i\
    \ = 0; i < x.length; i++){\n        var string = x[i].toString();\n        for(j\
    \ = 0; j < string.length; j++){\n            if(string[j] % 2 === 0){\n      \
    \          arr.push(x[i]);\n                break;\n            }\n        }\n\
    \    }\n    let removed = x.filter(x => arr.indexOf(x) === -1);\n    let sorted\
    \ = removed.sort(function(a, b){return a-b});\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let array = [];\n    for(i=0; i<x.length; i++){\n\
    \        let counter = 0;\n        for(j=0; j<x[i].toString().length; j++){\n\
    \            if(x[i].toString()[j] % 2 === 0){\n                counter++;\n \
    \           }\n        }\n        if(counter === 0){\n            array.push(x[i]);\n\
    \        }\n    }\n    return array.sort((a,b) => a-b);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var n = x.length;\n  var z = [];\n  var d = 0;\n\
    \  var e = 0;\n  for (var i = 0; i < n; i++){\n    if (x[i] > 9){\n      d = x[i];\n\
    \      while (d >= 1){\n        e = d % 10;\n        if (e == 0 || e == 2 || e\
    \ == 4 || e == 6 || e == 8){\n          z.push(x[i]);\n          break;\n    \
    \    }\n        d = Math.floor(d / 10);\n      }\n    }\n  }\n  x = x.filter(x\
    \ => !z.includes(x));\n  return x;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpa4uxx1d6.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa4uxx1d6.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar newArray = [];\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tvar y = x[i].toString().split(\"\");\n\t\t//console.log(y);\n\t\t\
    var count = 0;\n\t\tfor(var j = 0; j < y.length; j++){\n\t\t\t//console.log(y[j]);\n\
    \t\t\tif(y[j] % 2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == y.length){\n\
    \t\t\tnewArray.push(x[i]);\n\t\t}\n\t}\n\tnewArray.sort(function(a, b){return\
    \ a-b});\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    //code here\n    //return a sorted array\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpz7yhqlhe.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz7yhqlhe.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var array1 = [];\n    for(i=0; i<x.length; i++){\n\
    \        if(x[i]%2 != 0){\n            array1.push(x[i]);\n        }\n    }\n\
    \    return array1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp1ntcizsf.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1ntcizsf.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet uniqueDigits = [];\n\tfor(let i = 0; i < x.length;\
    \ i++){\n\t\tlet count = 0;\n\t\tfor(let k = 0; k < x[i].toString().length; k++){\n\
    \t\t\tif(x[i].toString()[k] % 2 !== 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\
    if(count === x[i].toString().length){\n\t\t\tuniqueDigits.push(x[i]);\n\t\t}\n\
    \t}\n\treturn uniqueDigits.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpyz5o2_y3.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyz5o2_y3.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  return x.filter(function(i){\n    return !/[02468]/.test(i);\n\
    \  }).sort(function(a,b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar y = [];\n\tfor (var i = 0; i < x.length; i++)\
    \ {\n\t\tif (x[i] % 2 != 0) {\n\t\t\ty.push(x[i]);\n\t\t}\n\t}\n\treturn y;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp6dhmbs8y.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6dhmbs8y.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(a){\n        return a.toString().split('').every(function(b){\n\
    \            return parseInt(b) % 2 == 1;\n        });\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp5fdapsdu.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5fdapsdu.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var str = \"\", ans = [];\n    for(var i = 0;\
    \ i < x.length; i++){\n        str = x[i].toString();\n        if(str.search(/[02468]/)\
    \ === -1){\n            ans.push(x[i]);\n        }\n    }\n    return ans.sort(function(a,\
    \ b){return a - b});\n}\nunique_digits([15, 33, 1422, 1]);\nunique_digits([152,\
    \ 323, 1422, 10]);\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let res = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let even = false;\n        let temp = x[i].toString().split('');\n\
    \        for(let j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ===\
    \ 0){\n                even = true;\n            }\n        }\n        if(!even){\n\
    \            res.push(x[i]);\n        }\n    }\n    return res.sort((a,b) => a\
    \ - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tconst list = [];\n\tfor (i = 0; i < x.length; i++){\n\
    \t\tif (!x[i].toString().includes('2') && !x[i].toString().includes('4') &&\n\t\
    \t\t!x[i].toString().includes('6') && !x[i].toString().includes('8') &&\n\t\t\t\
    !x[i].toString().includes('0')){\n\t\t\tlist.push(x[i]);\n\t\t}\n\t}\n\treturn\
    \ list.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let output=[];\n    let all_digits = x.join(\"\
    \").split(\"\");\n    for(i=0;i<all_digits.length;i++){\n        if(all_digits[i]%2\
    \ == 1){\n            output.push(all_digits[i]);\n        }\n    }\n    let final\
    \ = output.join(\"\").split(\"\");\n    let final_output = [];\n    for(i=0;i<final.length;i++){\n\
    \        if(final_output.indexOf(final[i]) == -1){\n            final_output.push(final[i]);\n\
    \        }\n    }\n    return final_output;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '5',\n\
    \  '3'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test\
    \ (/tmp/tmpxmf5p0c1.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxmf5p0c1.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '5',\
    \ '3' ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let answer = []\n    let holder = true\n    for(let\
    \ i = 0; i < x.length; i++){\n        let digits = x[i].toString().split('')\n\
    \        holder = true\n        for(let j = 0; j < digits.length; j++){\n    \
    \        if(digits[j] == 0 || digits[j] == 2 || digits[j] == 4 || digits[j] ==\
    \ 6 || digits[j] == 8){\n                holder = false\n            }\n     \
    \   }\n        if(holder){\n            answer.push(x[i])\n        }\n    }\n\
    \    return answer.sort((a,b) => a - b)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var array=[];\n  for(var i=0;i<x.length;i++){\n\
    \    if((x[i]%2)!=0){\n      array.push(x[i]);\n    }\n  }\n  return array;\n\
    }\nmodule.exports.unique_digits=unique_digits;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpku9isnr6.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpku9isnr6.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(i => !i.toString().match(/[24680]/));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpll8knroa.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpll8knroa.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString().split('');\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 == 0){\n                break;\n\
    \            }\n            if(j == num.length - 1){\n                newArr.push(x[i]);\n\
    \            }\n        }\n    }\n    return newArr.sort(function(a, b){return\
    \ a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar y = [];\n\tvar z = [];\n\tfor (var i = 0; i\
    \ < x.length; i++) {\n\t\tvar t = String(x[i]);\n\t\tvar v = t.split(\"\");\n\t\
    \tconsole.log(v);\n\t\tfor (var j = 0; j < v.length; j++) {\n\t\t\tif(v[j]%2 ===\
    \ 0){\n\t\t\t\tz.push(j);\n\t\t\t}\n\t\t}\n\t\tif(z.length === 0){\n\t\t\ty.push(x[i]);\n\
    \t\t}\n\t\tz = [];\n\t}\n\treturn y.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''1'', ''5'' ]

    [ ''3'', ''3'' ]

    [ ''1'', ''4'', ''2'', ''2'' ]

    [ ''1'' ]

    [ ''1'', ''5'', ''2'' ]

    [ ''3'', ''2'', ''3'' ]

    [ ''1'', ''4'', ''2'', ''2'' ]

    [ ''1'', ''0'' ]

    [ ''1'', ''2'', ''3'', ''4'', ''5'' ]

    [ ''2'', ''0'', ''3'', ''3'' ]

    [ ''1'', ''1'', ''1'' ]

    [ ''1'', ''5'', ''1'' ]

    [ ''1'', ''3'', ''5'' ]

    [ ''1'', ''0'', ''3'' ]

    [ ''3'', ''1'' ]

    '
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr=[];\n    for(let i=0;i<x.length;i++){\n\
    \        let str=x[i].toString();\n        let count=0;\n        for(let j=0;j<str.length;j++){\n\
    \            if(str[j]%2===0){\n                count++;\n            }\n    \
    \    }\n        if(count===0){\n            arr.push(x[i]);\n        }\n    }\n\
    \    arr.sort(function(a,b){\n        return a-b;\n    });\n    return arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var newArr = x.filter(function(y){\n    var arr\
    \ = y.toString().split('');\n    var count = 0;\n    for(var i = 0; i < arr.length;\
    \ i++){\n      if(arr[i] % 2 == 0){\n        count++\n      }\n    }\n    if(count\
    \ == 0){\n      return y;\n    }\n  })\n  return newArr.sort(function(a,b){\n\
    \    return a - b;\n  })\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i=0; i<x.length;\
    \ i++){\n        if(x[i].toString().length < 3){\n            if(x[i].toString().length\
    \ < 2){\n                if(x[i].toString().length < 1){\n                   \
    \ result.push(x[i]);\n                }else{\n                    if(x[i].toString()[0]%2\
    \ != 0){\n                        result.push(x[i]);\n                    }\n\
    \                }\n            }else{\n                if(x[i].toString()[0]%2\
    \ != 0 && x[i].toString()[1]%2 != 0){\n                    result.push(x[i]);\n\
    \                }\n            }\n        }else{\n            if(x[i].toString()[0]%2\
    \ != 0 && x[i].toString()[1]%2 != 0 && x[i].toString()[2]%2 != 0){\n         \
    \       result.push(x[i]);\n            }\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t//I assume that every index of the array x is a\
    \ positive integer,\n\t//and we only have to check if any even digit exists in\
    \ the integer.\n\t//If so, we leave it out, and sort the remaining in increasing\
    \ order.\n\t//I use my own isOdd function.\n\n\treturn x.filter(function(i){return\
    \ isOdd(i);}).sort(function(a,b){return a-b;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmig70o_a.js:15\n\treturn x.filter(function(i){return isOdd(i);}).sort(function(a,b){return\
    \ a-b;});\n\t                            ^\n\nReferenceError: isOdd is not defined\n\
    \    at /tmp/tmpmig70o_a.js:15:30\n    at Array.filter (<anonymous>)\n    at unique_digits\
    \ (/tmp/tmpmig70o_a.js:15:11)\n    at test (/tmp/tmpmig70o_a.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmig70o_a.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar evens = [2,4,6,8,0];\n\tvar answer = [];\n\t\
    for (var i = 0; i < x.length; i++) {\n\t\tvar y = x[i].toString().split(\"\");\n\
    \t\tvar isEven = false;\n\t\tfor (var j = 0; j < y.length; j++) {\n\t\t\tif (evens.indexOf(parseInt(y[j]))\
    \ != -1) {\n\t\t\t\tisEven = true;\n\t\t\t}\n\t\t}\n\t\tif (!isEven) {\n\t\t\t\
    answer.push(x[i]);\n\t\t}\n\t}\n\treturn answer.sort(function(a,b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let res = [];\n  for(let i = 0; i < x.length; i++){\n\
    \    if(x[i].toString().split('').every(e => parseInt(e) % 2 !== 0)){\n      res.push(x[i]);\n\
    \    }\n  }\n  return res.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var check = x[i].toString().split('');\n        var check_for_even\
    \ = false;\n        for(var k = 0; k < check.length; k++){\n            if(check[k]\
    \ % 2 === 0){\n                check_for_even = true;\n            }\n       \
    \ }\n        if(check_for_even === false){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(num){\n        return\
    \ num.toString().split('').every(function(digit){\n            return parseInt(digit)\
    \ % 2 !== 0;\n        });\n    }).sort(function(a, b){\n        return a - b;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  return x.filter(n => (n.toString().split('').filter(n\
    \ => parseInt(n) % 2 === 0).length === 0)).sort((a, b) => a - b);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar arr = [];\n\tfor(var i = 0; i < x.length; i++){\n\
    \t\tif(!(x[i].toString().includes('2') || x[i].toString().includes('4') || x[i].toString().includes('6')\
    \ || x[i].toString().includes('8') || x[i].toString().includes('0'))){\n\t\t\t\
    arr.push(x[i]);\n\t\t}\n\t}\n\treturn arr.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpfrl_yyes.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfrl_yyes.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  let new_array = [];\n  for (let item of x){\n  \
    \    if (item.toString().match(/[02468]/g) === null){\n          new_array.push(item);\n\
    \      }\n  }\n  return new_array.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tx.sort((a,b) => a-b);\n\tlet evenArr = [];\n\tlet\
    \ oddArr = [];\n\tx.forEach(element => {\n\t\tif(element.toString().includes(\"\
    0\") || element.toString().includes(\"2\") || element.toString().includes(\"4\"\
    ) || element.toString().includes(\"6\") || element.toString().includes(\"8\")){\n\
    \t\t\tevenArr.push(element);\n\t\t}else{\n\t\t\toddArr.push(element);\n\t\t}\n\
    \t});\n\treturn oddArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    //Write your code here\n    let xArr = []\n  \
    \  for(i=0; i<x.length; i++){\n        let unique = true\n        x[i].toString().split('').forEach(function(num){\n\
    \            if(num%2===0){\n                unique = false\n            }\n \
    \       })\n        if(unique === true){\n            xArr.push(x[i])\n      \
    \  }\n    }\n    return xArr.sort((a,b)=>a-b)\n}\n\nmodule.exports = {\n    unique_digits\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var l=x.length;\n    var r=[];\n    var e=0;\n\
    \    var f=0;\n    for(var i=0;i<l;i++){\n        var n=x[i];\n        while(n>0){\n\
    \            var nn=n%10;\n            if(nn%2==0){\n                e++;\n  \
    \          }\n            n=Math.floor(n/10);\n        }\n        if(e==0){\n\
    \            r[f]=x[i];\n            f++;\n        }\n        e=0;\n    }\n  \
    \  return r;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpx617v862.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx617v862.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (i = 0; i < x.length; i++){\n\
    \        var string_x = x[i].toString();\n        var str_len = string_x.length;\n\
    \        for (j = 0; j < str_len; j++){\n            if (string_x[j] == 0 || string_x[j]\
    \ == 2 || string_x[j] == 4 || string_x[j] == 6 || string_x[j] == 8){\n       \
    \         break;\n            }\n            else if (j == str_len - 1){\n   \
    \             y.push(x[i]);\n            }\n        }\n    }\n    return y.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // code goes here\n    // let newArr = x.filter(e\
    \ => e % 2 != 0)\n    // return newArr.sort((a, b) => a - b)\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpet54lxqo.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpet54lxqo.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evenDigits = \"02468\";\n    var noEvenDigits\
    \ = [];\n    var len = x.length;\n    for(var i = 0; i < len; i++){\n        if(x[i].toString().split(\"\
    \").every(function(a){\n            return evenDigits.indexOf(a) === -1;\n   \
    \     })){\n            noEvenDigits.push(x[i]);\n        }\n    }\n    return\
    \ noEvenDigits.sort(function(a, b){\n        return a - b;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(function(num){\n        let split\
    \ = num.toString().split('');\n        for(let i = 0; i < split.length; i++){\n\
    \            if(split[i] % 2 === 0){\n                return false;\n        \
    \    }\n        }\n        return true;\n    }).sort((a,b) => a - b);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var res = [];\n  for(var i = 0; i < x.length; i++){\n\
    \    if(x[i].toString().length == 1){\n      res.push(x[i]);\n    }else{\n   \
    \   var newNum = x[i].toString().split('');\n      var result = 0;\n      for(var\
    \ y = 0; y < newNum.length; y++){\n        if(newNum[y] % 2 == 0){\n         \
    \ result += 1;\n        }\n      }\n      if(result == 0){\n        res.push(x[i]);\n\
    \      }\n    }\n  }\n  return res.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // var x = [15, 33, 1422, 1];\n    var uniqueArray\
    \ = [];\n    for (i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(checkOdd)){\n\
    \            uniqueArray.push(x[i]);\n        }\n    }\n    return uniqueArray.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnvyhj8ns.js:13\n        if (x[i].toString().split('').every(checkOdd)){\n\
    \                                            ^\n\nReferenceError: checkOdd is\
    \ not defined\n    at unique_digits (/tmp/tmpnvyhj8ns.js:13:45)\n    at test (/tmp/tmpnvyhj8ns.js:25:20)\n\
    \    at Object.<anonymous> (/tmp/tmpnvyhj8ns.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 1
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet array = [];\n\tfor(i=0; i<x.length; i++){\n\t\
    \tlet num = x[i].toString();\n\t\tlet flag = true;\n\t\tfor(j=0; j<num.length;\
    \ j++){\n\t\t\tif(num[j]%2 == 0){\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t\t\
    if(flag){\n\t\t\tarray.push(num);\n\t\t}\n\t}\n\treturn array.sort();\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '135',\n\
    \  '31'\n]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpty33g9lr.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpty33g9lr.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '135', '31'\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let res = [];\n    for(let i=0; i<x.length; i++){\n\
    \        if(x[i].toString().split('').every(d => parseInt(d)%2)){\n          \
    \  res.push(x[i]);\n        }\n    }\n    return res.sort((a,b) => a-b);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var result = [];\n  x.forEach(function(num){\n \
    \   var digits = num.toString().split('');\n    var check = true;\n    digits.forEach(function(num){\n\
    \      if(num % 2 === 0){\n        check = false;\n      }\n    });\n    if(check){\n\
    \      result.push(num);\n    }\n  });\n  return result.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    x = x.sort(function(a, b){return a-b});\n    let\
    \ result = [];\n    for(let i = 0; i < x.length; i++){\n        let a = x[i].toString().split('');\n\
    \        let oddCount = 0;\n        for(let j = 0; j < a.length; j++){\n     \
    \       if(a[j] % 2 !== 0){\n                oddCount += 1;\n            }\n \
    \       }\n        if(oddCount === a.length){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
- exit_code: 0
  program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    return x.filter(num => {\n        return !(num.toString().split('').some(digit\
    \ => {\n            return parseInt(digit) % 2 === 0;\n        }));\n    }).sort((a,\
    \ b) => {\n        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821493
