name: HumanEval_104_unique_digits
language: js
results:
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = []\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString()\n        if(num.indexOf('2') === -1\
    \ && num.indexOf('4') === -1 && num.indexOf('6') === -1 && num.indexOf('8') ===\
    \ -1 && num.indexOf('0') === -1){\n            result.push(x[i])\n        }\n\
    \    }\n    return result.sort(function(a, b){return a-b})\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\treturn x.filter(function(num){\n\t\treturn (num\
    \ % 2 === 1) && (num % 10 !== 0);\n\t}).sort(function(a, b){\n\t\treturn a - b;\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpujrhhaer.js:23:10)\n    at Object.<anonymous> (/tmp/tmpujrhhaer.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var evens = [0,2,4,6,8]\n  var result = []\n  for\
    \ (var i = 0; i < x.length; i++) {\n    var count = 0\n    for (var j = 0; j <\
    \ x[i].toString().length; j++) {\n      for (var k = 0; k < evens.length; k++)\
    \ {\n        if (parseInt(x[i].toString()[j]) === evens[k]) {\n          count\
    \ += 1\n        }\n      }\n    }\n    if (count === 0) {\n      result.push(x[i])\n\
    \    }\n  }\n  return result.sort(function(a,b){return a-b})\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    function uniqueDigit(arr) {\n        var containsEven\
    \ = false;\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i]\
    \ % 2 === 0) {\n                containsEven = true;\n            }\n        }\n\
    \        return !containsEven;\n    }\n    return x.filter(uniqueDigit).sort();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1422, 15, 33 ]\n\nshould equal\n\n\
    [ 1, 15, 33 ]\n    at test (/tmp/tmpcxxiepqk.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxxiepqk.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1422,\
    \ 15, 33 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var hasEvenDigit = false;\n    var result = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var currentNumber = x[i];\n \
    \       var currentDigit;\n        while(currentNumber > 0){\n            currentDigit\
    \ = currentNumber % 10;\n            if(currentDigit % 2 == 0){\n            \
    \    hasEvenDigit = true;\n                break;\n            }\n           \
    \ currentNumber = Math.floor(currentNumber / 10);\n        }\n        if(!hasEvenDigit){\n\
    \            result.push(x[i]);\n        }\n        hasEvenDigit = false;\n  \
    \  }\n    return result.sort(function(a, b){return a - b});\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var oddArray = []\n  for(var i = 0; i < x.length;\
    \ i++){\n    if(!(x[i].toString().includes(\"2\")) && !(x[i].toString().includes(\"\
    4\")) && !(x[i].toString().includes(\"6\")) && !(x[i].toString().includes(\"8\"\
    ))){\n      oddArray.push(x[i])\n    }\n  }\n  oddArray.sort(function(a, b){return\
    \ a-b})\n  return oddArray\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 10 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpczzwovuh.js:26:10)\n    at Object.<anonymous> (/tmp/tmpczzwovuh.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var result = [];\n  for (var i = 0; i < x.length;\
    \ i++) {\n    var is_unique = true;\n    var number = x[i].toString();\n    for\
    \ (var j = 0; j < number.length; j++) {\n      if (number[j] % 2 === 0) {\n  \
    \      is_unique = false;\n      }\n    }\n    if (is_unique) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var flag = true;\n        var count = 0;\n        while(x[i]\
    \ > 0){\n            var r = x[i] % 10;\n            if(r % 2 == 0){\n       \
    \         flag = false;\n                break;\n            }\n            count++;\n\
    \            x[i] = Math.floor(x[i] / 10);\n        }\n        if(flag == true){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpvc7b1jqm.js:35:10)\n    at Object.<anonymous> (/tmp/tmpvc7b1jqm.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').includes(\"2\") || x[i].toString().split('').includes(\"\
    4\") || x[i].toString().split('').includes(\"6\") || x[i].toString().split('').includes(\"\
    8\") || x[i].toString().split('').includes(\"0\")){\n            var isUnique\
    \ = false;\n        }\n        else{\n            var isUnique = true;\n     \
    \   }\n        if(isUnique){\n            unique.push(x[i]);\n        }\n    }\n\
    \    return unique.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\treturn x.filter(element => !has_even_digit(element)).sort((a,b)\
    \ => a-b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx26hv30s.js:10\n\treturn x.filter(element => !has_even_digit(element)).sort((a,b)\
    \ => a-b);\n\t                           ^\n\nReferenceError: has_even_digit is\
    \ not defined\n    at /tmp/tmpx26hv30s.js:10:29\n    at Array.filter (<anonymous>)\n\
    \    at unique_digits (/tmp/tmpx26hv30s.js:10:11)\n    at test (/tmp/tmpx26hv30s.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx26hv30s.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tlet arr = [];\n\tfor(let i = 0; i < x.length; i++){\n\
    \t\tlet counter = 0;\n\t\tlet num = x[i].toString();\n\t\tfor(let j = 0; j < num.length;\
    \ j++){\n\t\t\tif(num[j] % 2 === 0){\n\t\t\t\tcounter += 1;\n\t\t\t}\n\t\t}\n\t\
    \tif(counter === 0){\n\t\t\tarr.push(x[i]);\n\t\t}\n\t}\n\treturn arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let sorted_array = []\n    for (let i = 0; i <\
    \ x.length; i++){\n        if (String(x[i]).includes('2') === false && String(x[i]).includes('4')\
    \ === false && String(x[i]).includes('6') === false && String(x[i]).includes('8')\
    \ === false && String(x[i]).includes('0') === false){\n            sorted_array.push(x[i])\n\
    \        }\n    }\n    return sorted_array.sort(function(a, b){return a-b})\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar res = [];\n\tvar even = function(num){\n\t\t\
    var res = false;\n\t\tvar nums = num.toString().split('');\n\t\tfor(var i = 0;\
    \ i < nums.length; i++){\n\t\t\tif(nums[i] % 2 === 0){\n\t\t\t\tres = true;\n\t\
    \t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tfor(var i = 0; i < x.length; i++){\n\t\t\
    if(!even(x[i])){\n\t\t\tres.push(x[i]);\n\t\t}\n\t}\n\treturn res.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t// array to hold the values without any even digits\n\
    \tvar evens = [];\n\t// loop through the array to be sorted\n\tfor (i=0; i<x.length;\
    \ i++){\n\t\t// array to hold a single value to be tested as a string\n\t\tvar\
    \ y = x[i].toString().split(\"\");\n\t\t// array to hold each digit of a single\
    \ value to be tested\n\t\tvar z = [];\n\t\t// loop through each value in the array\
    \ of the current single value\n\t\tfor (n=0; n<y.length; n++){\n\t\t\t// add to\
    \ the array of digits for the current single value\n\t\t\tz.push(parseInt(y[n]));\n\
    \t\t}\n\t\t// loop through the array of digits for the current single value\n\t\
    \tfor (a=0; a<z.length; a++){\n\t\t\t// if the digit is even, break the loop\n\
    \t\t\tif (z[a] % 2 === 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// if the digit is\
    \ odd and the loop hasn't broken, add the current\n\t\t\t// single value to the\
    \ array of values with no even digits\n\t\t\telse if (a === z.length-1){\n\t\t\
    \t\tevens.push(x[i]);\n\t\t\t}\n\t\t}\n\t}\n\t// if the length of the array of\
    \ values with no even digits is 0, return\n\t// an empty array\n\tif (evens.length\
    \ === 0){\n\t\treturn [];\n\t}\n\t// otherwise, return the array sorted in increasing\
    \ order\n\telse {\n\t\treturn evens.sort(function(a, b){return a-b});\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\t\n\tvar newArr = [];\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tif(Number.isInteger(x[i]/2)){\n\t\t\tnewArr.push(x[i]);\n\t\t}\n\t\
    }\n\treturn newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1422 ]\n\nshould equal\n\n[ 1, 15, 33\
    \ ]\n    at test (/tmp/tmp232w69y0.js:25:10)\n    at Object.<anonymous> (/tmp/tmp232w69y0.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n  expected: [ 1, 15, 33 ],\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().indexOf(\"2\") == -1 && x[i].toString().indexOf(\"\
    4\") == -1 && x[i].toString().indexOf(\"6\") == -1 && x[i].toString().indexOf(\"\
    8\") == -1){\n            result.push(x[i]);\n        }\n    }\n    return result.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 10 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpikp70kay.js:24:10)\n    at Object.<anonymous> (/tmp/tmpikp70kay.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 10 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var new_arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") ||\n            x[i].toString().includes(\"6\") || x[i].toString().includes(\"\
    8\") ||\n            x[i].toString().includes(\"0\")){\n                continue;\n\
    \            }\n        else{\n            new_arr.push(x[i]);\n        }\n  \
    \  }\n    return new_arr.sort();\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmp7ls_6pol.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7ls_6pol.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique_odds = [];\n    for (var i = 0; i <\
    \ x.length; i++){\n        var y = x[i].toString();\n        var is_even = false;\n\
    \        for (var j = 0; j < y.length; j++){\n            if (parseInt(y[j]) %\
    \ 2 == 0){\n                is_even = true;\n            }\n        }\n      \
    \  if (is_even == false){\n            unique_odds.push(x[i]);\n        }\n  \
    \  }\n    unique_odds.sort(function(a, b){return a-b});\n    return unique_odds;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  \n  //declare new array\n  //loop through array\n\
    \  //check if current index has an even digit\n  //if it does, append it to new\
    \ array\n  //return new array\n\n\n  var newArray = [];\n  for(var i = 0; i <\
    \ x.length; i++){\n    var isEven = false;\n    var currentNum = x[i].toString();\n\
    \    for(var j = 0; j < currentNum.length; j++){\n      if(parseInt(currentNum[j])\
    \ % 2 === 0){\n        isEven = true;\n      }\n    }\n    if(isEven === false){\n\
    \      newArray.push(x[i]);\n    }\n  }\n  return newArray;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpt2rh9ah3.js:38:10)\n    at Object.<anonymous> (/tmp/tmpt2rh9ah3.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let temp = x[i].toString();\n        for(let j = 0; j < temp.length;\
    \ j++){\n            if(temp[j] % 2 == 0){\n                break;\n         \
    \   }else if(j == temp.length - 1){\n                arr.push(temp);\n       \
    \     }\n        }\n    }\n    return arr.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '135', '31' ]\n\nshould equal\n\n[ 31,\
    \ 135 ]\n    at test (/tmp/tmpzg3g5i68.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzg3g5i68.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '135', '31' ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
