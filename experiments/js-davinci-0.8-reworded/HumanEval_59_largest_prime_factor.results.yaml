language: js
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var current = n;\n  for(var i = 2;\
    \ i < n; i++){\n    if(current % i === 0){\n      current = current / i;\n   \
    \ }\n  }\n  return current;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmplew8p5z6.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplew8p5z6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar result = 2;\n\twhile(n > result){\n\
    \t\tif(n % result == 0){\n\t\t\tn = n / result;\n\t\t}\n\t\telse{\n\t\t\tresult\
    \ = result + 1;\n\t\t}\n\t}\n\treturn result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  var factors = [];\n \
    \ var remainder = n;\n  while (i <= remainder){\n    if (remainder % i === 0){\n\
    \      factors.push(i);\n      remainder = remainder / i;\n    }\n    else {\n\
    \      i++;\n    }\n  }\n  return factors[factors.length - 1];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = prime_factors(n);\n\
    \    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx4rxp_dh.js:7\n    var factors = prime_factors(n);\n          \
    \        ^\n\nReferenceError: prime_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpx4rxp_dh.js:7:19)\n    at test (/tmp/tmpx4rxp_dh.js:16:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx4rxp_dh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let x = 0;\n    let ans = 0;\n  \
    \  if (n === 1) {\n        return 1;\n    }\n    while (n > 1) {\n        if (n\
    \ % x === 0) {\n            ans = x;\n            n = n / x;\n        }\n    \
    \    x += 1;\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0wyjl61i.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0wyjl61i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar num = 0;\n\tfor(var i = 2; i <=\
    \ n/2; i++){\n\t\tif(n % i == 0){\n\t\t\tnum = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    if(num == 0){\n\t\tnum = n;\n\t}\n\treturn num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp1f8s2iel.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1f8s2iel.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // init the largest factor to be\
    \ 1\n    var largest_factor = 1;\n    // first find all the prime factors\n  \
    \  var factors = prime_factors(n);\n    // find the largest factor\n    for (var\
    \ i = 0; i < factors.length; i++){\n        if (factors[i] > largest_factor){\n\
    \            largest_factor = factors[i];\n        }\n    }\n    return largest_factor;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd0z2oasl.js:10\n    var factors = prime_factors(n);\n         \
    \         ^\n\nReferenceError: prime_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpd0z2oasl.js:10:19)\n    at test (/tmp/tmpd0z2oasl.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpd0z2oasl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = sieve(n);\n    //console.log(factors);\n\
    \    var primes = [];\n    var largest = 1;\n    for(var i = 0; i < factors.length;\
    \ i++){\n        if(factors[i] === undefined){\n            primes.push(i);\n\
    \        }\n    }\n    for(var j = 0; j < primes.length; j++){\n        if(n %\
    \ primes[j] === 0){\n            largest = primes[j];\n        }\n    }\n    return\
    \ largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzi5gitkp.js:7\n    var factors = sieve(n);\n                  ^\n\
    \nReferenceError: sieve is not defined\n    at largest_prime_factor (/tmp/tmpzi5gitkp.js:7:19)\n\
    \    at test (/tmp/tmpzi5gitkp.js:29:20)\n    at Object.<anonymous> (/tmp/tmpzi5gitkp.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largest_prime = 2;\n    while\
    \ (n > largest_prime){\n        if (n % largest_prime == 0){\n            n =\
    \ n / largest_prime;\n        }\n        else{\n            largest_prime++;\n\
    \        }\n    }\n    return largest_prime;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar prime = [];\n\tvar d = 2;\n\twhile\
    \ (n > 1){\n\t\twhile (n % d == 0){\n\t\t\tprime.push(d);\n\t\t\tn /= d;\n\t\t\
    }\n\t\td += 1;\n\t}\n\treturn prime.pop();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar factors = [];\n\tvar i = 2;\n\t\
    while(n > 1){\n\t\twhile(n % i === 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn factors[factors.length - 1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar largest = 1;\n\tvar divisor = 2;\n\
    \twhile(n > 1){\n\t\twhile(n % divisor == 0){\n\t\t\tlargest = divisor;\n\t\t\t\
    n = n / divisor;\n\t\t}\n\t\tdivisor++;\n\t}\n\treturn largest;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 1;\n\tfor(i = 1; i < n; i++){\n\
    \t\tif(n % i == 0){\n\t\t\tvar j = 2;\n\t\t\tfor(j = 2; j < i; j++){\n\t\t\t\t\
    if(i % j == 0){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == i){\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpkhd24nnt.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkhd24nnt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let list_factor = [];\n    let list_prime\
    \ = [];\n    let factor = 2;\n    let is_prime = true;\n    while (n>1){\n   \
    \     if (n%factor == 0){\n            n = n/factor;\n            list_factor.push(factor);\n\
    \        }\n        else{\n            for (let i=0; i<list_factor.length; i++){\n\
    \                if (factor%list_factor[i] == 0){\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime){\n                list_prime.push(factor);\n         \
    \   }\n            factor += 1;\n            is_prime = true;\n        }\n   \
    \ }\n    return list_prime[list_prime.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzumbk8a9.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzumbk8a9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  var prime = 2;\n  while(i\
    \ <= n){\n    if(n % i == 0){\n      prime = i;\n      n = n / i;\n    }\n   \
    \ else{\n      i++;\n    }\n  }\n  return prime;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    for (let i = 0; i < n; i++) {\n \
    \       if (n % i === 0) {\n            if (is_prime(i)) {\n                return\
    \ i;\n            }\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx_5pgl1t.js:9\n            if (is_prime(i)) {\n            ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpx_5pgl1t.js:9:13)\n\
    \    at test (/tmp/tmpx_5pgl1t.js:21:20)\n    at Object.<anonymous> (/tmp/tmpx_5pgl1t.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //we will use a while loop and divide\
    \ the number while it is even\n    while(n % 2 === 0){\n        n = n/2;\n   \
    \ }\n    // now we will check for odd numbers\n    var i = 3;\n    while(i <=\
    \ Math.sqrt(n)){\n        if(n % i === 0){\n            n = n/i;\n        }\n\
    \        else {\n            i += 2;\n        }\n    }\n    return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // num cannot be prime\n  if (n ===\
    \ 2) return 2;\n  // start with smallest prime number\n  var p = 2;\n  // divide\
    \ until no more divisors\n  while (n%p) p++;\n  // if this is prime, it is the\
    \ largest prime factor\n  return (p === n) ? p : largest_prime_factor(n/p);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = 2;\n  var max = factor;\n\
    \  while (n > 1){\n    if (n % factor === 0){\n      max = factor;\n      n =\
    \ n / factor;\n    }\n    else{\n      factor += 1;\n    }\n  }\n  return max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largest = 0;\n    while(n > 1){\n\
    \        if(n % 2 === 0){\n            largest = 2;\n            n = n / 2;\n\
    \        } else if(n % 3 === 0){\n            largest = 3;\n            n = n\
    \ / 3;\n        } else if(n % 5 === 0){\n            largest = 5;\n          \
    \  n = n / 5;\n        } else if(n % 7 === 0){\n            largest = 7;\n   \
    \         n = n / 7;\n        } else if(n % 11 === 0){\n            largest =\
    \ 11;\n            n = n / 11;\n        } else if(n % 13 === 0){\n           \
    \ largest = 13;\n            n = n / 13;\n        } else if(n % 17 === 0){\n \
    \           largest = 17;\n            n = n / 17;\n        } else if(n % 19 ===\
    \ 0){\n            largest = 19;\n            n = n / 19;\n        } else if(n\
    \ % 23 === 0){\n            largest = 23;\n            n = n / 23;\n        }\
    \ else if(n % 29 === 0){\n            largest = 29;\n            n = n / 29;\n\
    \        } else if(n % 31 === 0){\n            largest = 31;\n            n =\
    \ n / 31;\n        } else if(n % 37 === 0){\n            largest = 37;\n     \
    \       n = n / 37;\n        } else if(n % 41 === 0){\n            largest = 41;\n\
    \            n = n / 41;\n        } else if(n % 43 === 0){\n            largest\
    \ = 43;\n            n = n / 43;\n        } else if(n % 47 === 0){\n         \
    \   largest = 47;\n            n = n / 47;\n        } else if(n % 53 === 0){\n\
    \            largest = 53;\n            n = n / 53;\n        } else if(n % 59\
    \ === 0){\n            largest = 59;\n            n = n / 59;\n        } else\
    \ if(n % 61 === 0){\n            largest = 61;\n            n = n / 61;\n    \
    \    } else if(n % 67 === 0){\n            largest = 67;\n            n = n /\
    \ 67;\n        } else if\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpiy600dit.js:67\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (n == 1) return 1;\n\n    var\
    \ i = 2;\n    var largest = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            n = n / i;\n            largest = i;\n        } else {\n    \
    \        i++;\n        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t// Your code goes here.\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpnubuo0bj.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnubuo0bj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (n === 1) return 1;\n    var i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvung2p2n.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvung2p2n.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var div=2;\n    var lprime=0;\n \
    \   while(n>1){\n        if(n%div==0){\n            lprime=div;\n            n=n/div;\n\
    \        }\n        else{\n            div++;\n        }\n    }\n    return lprime;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let factor = [];\n    while(n % 2\
    \ === 0){\n        factor.push(2);\n        n = n / 2;\n    }\n    for(let i =\
    \ 3; i <= Math.sqrt(n); i += 2){\n        while(n % i === 0){\n            factor.push(i);\n\
    \            n = n / i;\n        }\n    }\n    if(n > 2){\n        factor.push(n);\n\
    \    }\n    return factor[factor.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tfor(var i = n; i > 1; i--){\n\t\tif(n\
    \ % i === 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t}\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_fa1q5wd.js:8\n\t\tif(n % i === 0 && is_prime(i)){\n\t\t      \
    \   ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmp_fa1q5wd.js:8:12)\n    at test (/tmp/tmp_fa1q5wd.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_fa1q5wd.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar prime = [];\n\tvar i = 2;\n\twhile(i\
    \ < n){\n\t\twhile(n % i === 0){\n\t\t\tprime.push(i);\n\t\t\tn = n / i;\n\t\t\
    }\n\t\ti++;\n\t}\n\tprime.push(n);\n\treturn prime[prime.length - 1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpam7_ri9v.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpam7_ri9v.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime = 2;\n    while (n > prime){\n\
    \        if (n % prime == 0){\n            n = n / prime;\n        }\n       \
    \ else{\n            prime++;\n        }\n    }\n    return prime;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  var largest = 0;\n  var\
    \ root = Math.sqrt(n);\n  while(i <= root){\n    if(n % i === 0){\n      largest\
    \ = i;\n      n = n / i;\n      i = 2;\n      root = Math.sqrt(n);\n    }\n  \
    \  else{\n      i++;\n    }\n  }\n  if(n !== 1 && n > largest){\n    largest =\
    \ n;\n  }\n  return largest;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //Answer is in a prime factor, so\
    \ iterate up to n, look for factors and check for primality\n    for(var i = 1;\
    \ i <= n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n     \
    \           return i;\n            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpuheu8kha.js:10\n            if(is_prime(i)){\n            ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpuheu8kha.js:10:13)\n\
    \    at test (/tmp/tmpuheu8kha.js:22:20)\n    at Object.<anonymous> (/tmp/tmpuheu8kha.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i=2;\n    while(i<=n){\n    \
    \    if(n%i==0){\n            n/=i;\n        }\n        else{\n            i++;\n\
    \        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tif(n <= 1){\n\t\treturn 0;\n\t}\n\t\
    var factor = 2;\n\twhile(n > 1){\n\t\tif(n % factor == 0){\n\t\t\tn /= factor;\n\
    \t\t}\n\t\telse{\n\t\t\tfactor++;\n\t\t}\n\t}\n\treturn factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 0;\n    var j = 0;\n    var\
    \ prime_factors = [];\n    while(n != 1){\n        if(n % primes[i] == 0){\n \
    \           prime_factors.push(primes[i]);\n            n = n / primes[i];\n \
    \       } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp34uarhbm.js:11\n        if(n % primes[i] == 0){\n             \
    \  ^\n\nReferenceError: primes is not defined\n    at largest_prime_factor (/tmp/tmp34uarhbm.js:11:16)\n\
    \    at test (/tmp/tmp34uarhbm.js:26:20)\n    at Object.<anonymous> (/tmp/tmp34uarhbm.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var ret = 1;\n    for(var i = 2;\
    \ i <= n; i++){\n        if(n % i == 0){\n            ret = i;\n            n\
    \ /= i;\n            i--;\n        }\n    }\n    return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    while(n %\
    \ 2 === 0){\n        factors.push(2);\n        n = n / 2;\n    }\n    var s =\
    \ Math.sqrt(n);\n    for(var factor = 3; factor <= s; factor += 2){\n        while(n\
    \ % factor === 0){\n            factors.push(factor);\n            n = n / factor;\n\
    \        }\n    }\n    if(n > 2){\n        factors.push(n);\n    }\n    return\
    \ factors.pop();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (n < 2) return 1;\n    let divisor\
    \ = 2;\n    while (n > divisor){\n        if (n % divisor == 0){\n           \
    \ n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n\
    \    }\n    return divisor;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var prime = n\n  while(n > 1){\n  \
    \  if(n % prime == 0){\n      n = n / prime\n    }\n    else{\n      prime -=\
    \ 1\n    }\n  }\n  return prime\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpira31stp.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpira31stp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // Base case:  n is prime\n    if\
    \ (is_prime(n)){\n        return n;\n    }\n    else{\n        // Recursive case:\
    \  find a factor of n\n        var factor = find_factor(n);\n        // Recursively\
    \ find the largest prime factor of n/factor\n        return largest_prime_factor(n/factor);\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphi1xppsc.js:8\n    if (is_prime(n)){\n    ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmphi1xppsc.js:8:5)\n\
    \    at test (/tmp/tmphi1xppsc.js:24:20)\n    at Object.<anonymous> (/tmp/tmphi1xppsc.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var divisor = 2;\n    while (n >\
    \ divisor){\n        if (n % divisor == 0){\n            n /= divisor;\n     \
    \   } else {\n            divisor++;\n        }\n    }\n    return divisor;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (n <= 1)\n        return 0;\n\
    \    for (let i = Math.floor(Math.sqrt(n)); i > 1; i--){\n        if (n % i ==\
    \ 0 && is_prime(i))\n            return i;\n    }\n    return 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpaaz9dx5r.js:10\n        if (n % i == 0 && is_prime(i))\n      \
    \            ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpaaz9dx5r.js:10:19)\n    at test (/tmp/tmpaaz9dx5r.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpaaz9dx5r.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var largestPrime = 0;\n  var i = 2;\n\
    \  while(i <= n) {\n    if(n % i === 0) {\n      largestPrime = i;\n      n =\
    \ n / i;\n    } else {\n      i++;\n    }\n  }\n  return largestPrime;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largestPrime = 1;\n    while(n\
    \ % 2 === 0){\n        largestPrime = 2;\n        n /= 2;\n    }\n    var p =\
    \ 3;\n    while(n !== 1){\n        while(n % p === 0){\n            largestPrime\
    \ = p;\n            n /= p;\n        }\n        p += 2;\n    }\n    return largestPrime;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = 2;\n  while (factor <\
    \ n){\n    if (n % factor == 0){\n      return largest_prime_factor(n/factor);\n\
    \    }\n    factor += 1;\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factors = [1];\n    var\
    \ pf_index = 0;\n    while(n > 1){\n        var pf = find_next_prime_factor(n,\
    \ prime_factors[pf_index]);\n        prime_factors.push(pf);\n        pf_index++;\n\
    \        n = n / pf;\n    }\n    return prime_factors[pf_index];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjk4_aomr.js:10\n        var pf = find_next_prime_factor(n, prime_factors[pf_index]);\n\
    \                 ^\n\nReferenceError: find_next_prime_factor is not defined\n\
    \    at largest_prime_factor (/tmp/tmpjk4_aomr.js:10:18)\n    at test (/tmp/tmpjk4_aomr.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjk4_aomr.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar val = n\n\tfor(var i = 2; i < n;\
    \ i++){\n\t\tif(n % i == 0){\n\t\t\tval = n / i\n\t\t\tn = val\n\t\t\ti = 1\n\t\
    \t}\n\t}\n\treturn val\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // YOUR CODE HERE\n  var i = 2;\n \
    \ while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n  \
    \    i = i + 1;\n    }\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var p = 2;\n    var max = 1;\n  \
    \  while(n > max){\n        if(n % p == 0){\n            max = p;\n          \
    \  n = n/p;\n        } else {\n            p++;\n        }\n    }\n    return\
    \ max;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t//First, find all prime factors of\
    \ n.\n\t//Then, return the largest of them.\n\tvar prime_factors = [];\n\tvar\
    \ i = 2;\n\twhile(n > 1){\n\t\tif(n % i == 0){\n\t\t\tn = n / i;\n\t\t\tprime_factors.push(i);\n\
    \t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tvar largest_prime_factor = prime_factors[0];\n\
    \tfor(var x = 1; x < prime_factors.length; x++){\n\t\tif(prime_factors[x] > largest_prime_factor){\n\
    \t\t\tlargest_prime_factor = prime_factors[x];\n\t\t}\n\t}\n\treturn largest_prime_factor;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //Edge Cases\n    if(n <= 1) return\
    \ null;\n    if(is_prime(n)) return n;\n\n    //Finds all the factors of the number\
    \ in question\n    let factors = [];\n    for(let i = 2; i <= n; i++){\n     \
    \   if(n % i === 0){\n            factors.push(i);\n        }\n    }\n\n    //Finds\
    \ the greatest factor of the number in question and checks if it is prime\n  \
    \  let greatest_factor = Math.max(...factors);\n    if(is_prime(greatest_factor)){\n\
    \        return greatest_factor;\n    }\n\n    //If greatest factor is not prime,\
    \ then it divides the greatest factor by all its factors and returns the last\
    \ factor,\n    //which is the largest prime factor of the greatest factor\n  \
    \  factors = [];\n    for(let i = 2; i <= greatest_factor; i++){\n        if(greatest_factor\
    \ % i === 0){\n            factors.push(i);\n        }\n    }\n    let prime_factor\
    \ = factors[factors.length - 1];\n    return prime_factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzzds3zlz.js:9\n    if(is_prime(n)) return n;\n    ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmpzzds3zlz.js:9:5)\n\
    \    at test (/tmp/tmpzzds3zlz.js:42:20)\n    at Object.<anonymous> (/tmp/tmpzzds3zlz.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var divider = 2;\n    while(n !=\
    \ 1){\n        if(n % divider == 0){\n            n = n / divider;\n        }\n\
    \        else{\n            divider++;\n        }\n    }\n    return divider;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t\n\t\n\tvar factor = 2;\n\twhile(factor\
    \ <= n){\n\t\twhile(n % factor == 0){\n\t\t\tn = n / factor;\n\t\t}\n\t\tfactor++;\n\
    \t}\n\t\n\treturn n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeiqqbgwf.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeiqqbgwf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime = 1;\n    for(var i = 2;\
    \ i <= n; i++){\n        if(n % i == 0 && is_prime(i)){\n            prime = i;\n\
    \        }\n    }\n    return prime;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpoqee5swb.js:9\n        if(n % i == 0 && is_prime(i)){\n       \
    \          ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpoqee5swb.js:9:18)\n    at test (/tmp/tmpoqee5swb.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqee5swb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = 0; i < n; i++){\n    //var\
    \ prime = true;\n    for (var j = 2; j < i; j++){\n      if (i % j === 0){\n \
    \       //prime = false;\n        //break;\n        continue;\n      }\n    }\n\
    \    if (n % i === 0){\n      return i;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnoq3w_uz.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnoq3w_uz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n != 1){\n        if (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        else {\n            i += 1;\n    \
    \    }\n    }\n    return Math.max.apply(null, factors);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //TODO\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpefhvv38t.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpefhvv38t.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factor = 0;\n    var prime_factors\
    \ = [];\n    for (var i = 2; i <= n; i++){\n        if (n % i === 0){\n      \
    \      if (is_prime(i)){\n                prime_factors.push(i);\n           \
    \ }\n        }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpo5de_9k8.js:11\n            if (is_prime(i)){\n            ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpo5de_9k8.js:11:13)\n\
    \    at test (/tmp/tmpo5de_9k8.js:24:20)\n    at Object.<anonymous> (/tmp/tmpo5de_9k8.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while (n > 1){\n\
    \        if (n % factor == 0){\n            n /= factor;\n        }\n        else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let largest = 2;\n    let remainder\
    \ = n;\n    let prime = next_prime(largest);\n    let is_prime = is_prime_number(remainder);\n\
    \    while(remainder > 1 && !is_prime){\n        if(remainder % prime === 0){\n\
    \            largest = prime;\n            remainder = remainder / prime;\n  \
    \      }\n        else{\n            prime = next_prime(prime);\n        }\n \
    \       is_prime = is_prime_number(remainder);\n    }\n    return largest;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjrp49mdb.js:9\n    let prime = next_prime(largest);\n         \
    \       ^\n\nReferenceError: next_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpjrp49mdb.js:9:17)\n    at test (/tmp/tmpjrp49mdb.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpjrp49mdb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let largestPrimeFactor = 1;\n   \
    \ for(let i = 2; i <= n; i++){\n        if(n % i === 0){\n            largestPrimeFactor\
    \ = i;\n            n /= i;\n        }\n    }\n    return largestPrimeFactor;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpklq2t3ze.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpklq2t3ze.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var maxFactor = 0;\n    var i = 2;\n\
    \    while(i <= n){\n        while(n % i == 0){\n            maxFactor = i;\n\
    \            n = n / i;\n        }\n        i += 1;\n    }\n    return maxFactor;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = 2;\n  while (n > factor){\n\
    \    if (n % factor == 0){\n      n = n / factor;\n    }\n    else{\n      factor\
    \ = factor + 1;\n    }\n  }\n  return factor;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  let number = Math.floor(Math.sqrt(n));\n\
    \  while(number > 1){\n    if(n % number === 0 && is_prime(number)){\n      return\
    \ number;\n    }\n    number -= 1;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd2bcuol4.js:9\n    if(n % number === 0 && is_prime(number)){\n\
    \                  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpd2bcuol4.js:9:19)\n    at test (/tmp/tmpd2bcuol4.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpd2bcuol4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // Your code here\n    var lpf =\
    \ 1;\n\n    while (n > 1) {\n        lpf++;\n        while (n % lpf == 0) {\n\
    \            n = n / lpf;\n        }\n    }\n    return lpf;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let primes = []\n    let factor =\
    \ 2;\n    while (n != 1){\n        while (n % factor == 0){\n            primes.push(factor)\n\
    \            n = n / factor\n        }\n        factor = factor + 1\n    }\n \
    \   return primes[primes.length - 1]\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = 2;\n  while (n > factor){\n\
    \    if (n % factor == 0){\n      n = n / factor;\n    }\n    else{\n      factor\
    \ = factor + 1;\n    }\n  }\n  return factor;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tfor(var i = Math.floor(Math.sqrt(n));\
    \ i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy0jij1_6.js:8\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t       \
    \  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpy0jij1_6.js:8:12)\n\
    \    at test (/tmp/tmpy0jij1_6.js:19:20)\n    at Object.<anonymous> (/tmp/tmpy0jij1_6.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime = 0;\n    var i = 2;\n\
    \    while(i <= n){\n        if(n % i == 0){\n            prime = i;\n       \
    \     n = n / i;\n        }else{\n            i++;\n        }\n    }\n    return\
    \ prime;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var primes = find_prime_factors(n);\n\
    \    return primes[primes.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvf8z4igc.js:7\n    var primes = find_prime_factors(n);\n      \
    \           ^\n\nReferenceError: find_prime_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpvf8z4igc.js:7:18)\n    at test (/tmp/tmpvf8z4igc.js:16:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvf8z4igc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //FACTORS:\n    let factors = []\n\
    \    for (let i = 2; i < n; i++){\n        if (n % i === 0){\n            factors.push(i)\n\
    \        }\n    }\n    //console.log(factors)\n\n    //PRIMES:\n    function isPrime(x){\n\
    \        for (let i = 2; i < x; i++){\n            if (x % i === 0){\n       \
    \         return false\n            }\n        }\n        return true\n    }\n\
    \    //console.log(isPrime(3))\n\n    //PREPARING DATA:\n    //let primeFactors\
    \ = []\n    let maxPrime = 0\n    for (let i = 0; i < factors.length; i++){\n\
    \        if (isPrime(factors[i]) === true){\n            //primeFactors.push(factors[i])\n\
    \            maxPrime = factors[i]\n        }\n    }\n    return maxPrime\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largestFactor;\n    var factor\
    \ = n;\n    for(var i = 0; i < n; i++){\n        if(n % i === 0){\n          \
    \  largestFactor = i;\n        }\n    }\n    return largestFactor;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpelmzaq5o.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpelmzaq5o.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    for (var i\
    \ = 2; i <= n; i++){\n        if (n % i === 0){\n            factors.push(i);\n\
    \            n = n / i;\n            i = 1;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i=2;\n    while(i<n){\n     \
    \   if(n%i==0){\n            n=n/i;\n        }\n        else{\n            i=i+1;\n\
    \        }\n    }\n    return i;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (n < 1 || is_prime(n)){\n    \
    \    return \"not a valid number\"\n    }\n    var prime = 0;\n    var i = 2;\n\
    \    while (i < n){\n        if (n % i == 0 && is_prime(i)){\n            prime\
    \ = i;\n        }\n        i++;\n    }\n    return prime;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd0_y_jkj.js:7\n    if (n < 1 || is_prime(n)){\n          ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpd0_y_jkj.js:7:11)\n\
    \    at test (/tmp/tmpd0_y_jkj.js:26:20)\n    at Object.<anonymous> (/tmp/tmpd0_y_jkj.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n   var prime_factors = [1];\n   for (var\
    \ i = 2; i <= n; i++){\n      if (is_prime(i) && (n % i === 0)){\n         prime_factors.push(i);\n\
    \      }\n   }\n   return prime_factors[prime_factors.length - 1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbsmf3m3z.js:9\n      if (is_prime(i) && (n % i === 0)){\n     \
    \ ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpbsmf3m3z.js:9:7)\n\
    \    at test (/tmp/tmpbsmf3m3z.js:21:20)\n    at Object.<anonymous> (/tmp/tmpbsmf3m3z.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = 0; i <= n; i++){\n   \
    \ if (n % i === 0){\n      var factor = n / i;\n      var divisor = 2;\n     \
    \ while (factor > divisor){\n        if (factor % divisor === 0){\n          break;\n\
    \        }\n        divisor += 1;\n      }\n      if (factor === divisor){\n \
    \       return factor;\n      }\n    }\n  }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\t\
    if(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var max = 0;\n  for(var i = 2; i <=\
    \ n; i++){\n    while(n % i === 0){\n      max = i;\n      n = n / i;\n    }\n\
    \  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar x = 2;\n\twhile(x <= n){\n\t\t\
    if(n % x == 0){\n\t\t\tn /= x;\n\t\t}\n\t\telse {\n\t\t\tx += 1;\n\t\t}\n\t}\n\
    \treturn x;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (is_prime(n)){\n        return\
    \ n;\n    } else {\n        return largest_prime_factor(n/smallest_prime_factor(n));\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfv999747.js:7\n    if (is_prime(n)){\n    ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmpfv999747.js:7:5)\n\
    \    at test (/tmp/tmpfv999747.js:19:20)\n    at Object.<anonymous> (/tmp/tmpfv999747.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = null;\n  var factors =\
    \ [];\n  var last_divisor = null;\n  var current_divisor = 2;\n  var is_prime\
    \ = false;\n  var max_divisor = Math.sqrt(n);\n  while(n > 1 && current_divisor\
    \ <= max_divisor){\n    if(n % current_divisor === 0){\n      //Check for prime\n\
    \      factors = [current_divisor];\n      last_divisor = current_divisor;\n \
    \     while(n % current_divisor === 0){\n        n /= current_divisor;\n     \
    \   factors.push(n);\n      }\n      is_prime = true;\n      for(var i = 0; i\
    \ < factors.length; i++){\n        if(factors[i] === 1){\n          break;\n \
    \       }\n        if(is_prime_number(factors[i])){\n          is_prime = false;\n\
    \          break;\n        }\n      }\n      if(is_prime){\n        factor = current_divisor;\n\
    \      }\n      current_divisor = last_divisor;\n    }\n    current_divisor++;\n\
    \  }\n  return factor;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxvnei1l2.js:27\n        if(is_prime_number(factors[i])){\n    \
    \    ^\n\nReferenceError: is_prime_number is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpxvnei1l2.js:27:9)\n    at test (/tmp/tmpxvnei1l2.js:47:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpxvnei1l2.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i=2;\n  while(i<=n/2){\n    if(n%i==0\
    \ && is_prime(i)){\n      n=n/i;\n    }else{\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkcdkj10a.js:9\n    if(n%i==0 && is_prime(i)){\n          ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpkcdkj10a.js:9:11)\n\
    \    at test (/tmp/tmpkcdkj10a.js:23:20)\n    at Object.<anonymous> (/tmp/tmpkcdkj10a.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // Your code here.\n  var result =\
    \ 0;\n  for (var i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result =\
    \ n / i;\n      n = n / i;\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwykmvxxi.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwykmvxxi.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let divisor = 2\n    while (n > divisor){\n\
    \        if (n % divisor == 0){\n            n = n / divisor\n        } else {\n\
    \            divisor += 1\n        }\n    }\n    return divisor\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tfor(var i = 2; i <= n; i++){\n\t\t\
    if(n % i === 0){\n\t\t\tvar largest_prime = i;\n\t\t\tvar hold = n/i;\n\t\t\t\
    if(hold == 1){\n\t\t\t\treturn largest_prime;\n\t\t\t}\n\t\t\tn = hold;\n\t\t\t\
    i = 1;\n\t\t}\n\t}\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var fac = 2;\n    while (n > fac){\n\
    \        if (n % fac == 0){\n            n = n / fac;\n        }\n        else{\n\
    \            fac++;\n        }\n    }\n    return fac;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar largestFactor = 2;\n\twhile (n\
    \ > 1){\n\t\tif (n % largestFactor == 0){\n\t\t\tn = n / largestFactor;\n\t\t\
    }\n\t\telse{\n\t\t\tlargestFactor = largestFactor + 1;\n\t\t}\n\t}\n\treturn largestFactor;\n\
    }\n\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = n - 1; i > 1; i--){\n\
    \    if (n % i === 0){\n      if (is_prime(i)){\n        return i;\n      }\n\
    \    }\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2v32lxtd.js:9\n      if (is_prime(i)){\n      ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmp2v32lxtd.js:9:7)\n\
    \    at test (/tmp/tmp2v32lxtd.js:21:20)\n    at Object.<anonymous> (/tmp/tmp2v32lxtd.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let largest = 1;\n    for(let i =\
    \ 2; i <= n; i++){\n        if(is_prime(i) && n % i === 0){\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpj8zxbpx4.js:9\n        if(is_prime(i) && n % i === 0){\n      \
    \  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpj8zxbpx4.js:9:9)\n\
    \    at test (/tmp/tmpj8zxbpx4.js:21:20)\n    at Object.<anonymous> (/tmp/tmpj8zxbpx4.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t//Go through each number from 1 ->\
    \ n,\n\t//Check if the number is prime,\n\t//Check if it is a factor of n,\n\t\
    //If it is, save it\n\t//The last saved number will be the largest prime factor\n\
    \tvar temp = 0;\n\tvar div = 0;\n\tvar i = 1;\n\twhile(i < n){\n\t\tif(is_prime(i)){\n\
    \t\t\tdiv = n / i;\n\t\t\tif(div % 1 === 0){\n\t\t\t\ttemp = i;\n\t\t\t}\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn temp;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_q9im6pe.js:16\n\t\tif(is_prime(i)){\n\t\t^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmp_q9im6pe.js:16:3)\n\
    \    at test (/tmp/tmp_q9im6pe.js:32:20)\n    at Object.<anonymous> (/tmp/tmp_q9im6pe.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    for (let i = n-1; i > 1; i--){\n\
    \        if (is_prime(i) && n % i == 0){\n            return i;\n        }\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprcs8joi3.js:8\n        if (is_prime(i) && n % i == 0){\n      \
    \  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmprcs8joi3.js:8:9)\n\
    \    at test (/tmp/tmprcs8joi3.js:19:20)\n    at Object.<anonymous> (/tmp/tmprcs8joi3.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  return 2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpfbho3w1f.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfbho3w1f.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    for (var i\
    \ = 2; i <= n; i++){\n        while (n % i === 0){\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2;\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n   \
    \         i = i + 1;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // Your code here\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpj2a4tynq.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj2a4tynq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    if (is_prime(n)){\n        return\
    \ n;\n    }\n    for (var i = Math.ceil(Math.sqrt(n)); i >= 2; i--){\n       \
    \ if (is_prime(i) && n % i === 0){\n            return i;\n        }\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphmvf03qk.js:7\n    if (is_prime(n)){\n    ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmphmvf03qk.js:7:5)\n\
    \    at test (/tmp/tmphmvf03qk.js:21:20)\n    at Object.<anonymous> (/tmp/tmphmvf03qk.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (let i = n - 1; i > 1; i--){\n\
    \    if (is_prime(i) && n % i === 0){\n      return i;\n    }\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiy82q1ax.js:8\n    if (is_prime(i) && n % i === 0){\n    ^\n\n\
    ReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpiy82q1ax.js:8:5)\n\
    \    at test (/tmp/tmpiy82q1ax.js:19:20)\n    at Object.<anonymous> (/tmp/tmpiy82q1ax.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var primelist = prime_list(parseInt(Math.sqrt(n)));\n\
    \    //Filter the prime number that can devide the n\n    var prime_factor = primelist.filter(p\
    \ => n % p == 0);\n    return prime_factor[prime_factor.length - 1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvp6aqijt.js:7\n    var primelist = prime_list(parseInt(Math.sqrt(n)));\n\
    \                    ^\n\nReferenceError: prime_list is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpvp6aqijt.js:7:21)\n    at test (/tmp/tmpvp6aqijt.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvp6aqijt.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar prime_factors = [];\n\tvar factor\
    \ = 2;\n\twhile (n > 1){\n\t\tif (n % factor == 0){\n\t\t\tprime_factors.push(factor);\n\
    \t\t\tn = n / factor;\n\t\t}\n\t\telse{\n\t\t\tfactor += 1;\n\t\t}\n\t}\n\treturn\
    \ prime_factors[prime_factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if\
    \ (n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\t\
    if(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++\n\t\t}\n\t}\n\treturn\
    \ i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar largestFactor = 0;\n\tvar primeFactor\
    \ = 2;\n\twhile(n > 1){\n\t\twhile(n % primeFactor == 0){\n\t\t\tlargestFactor\
    \ = primeFactor;\n\t\t\tn = n / primeFactor;\n\t\t}\n\t\tprimeFactor++;\n\t}\n\
    \treturn largestFactor;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime = n;\n    while(prime >\
    \ 1){\n        if(n % prime == 0 && is_prime(prime)){\n            return prime;\n\
    \        }\n        prime--;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8ivipfbw.js:9\n        if(n % prime == 0 && is_prime(prime)){\n\
    \                     ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmp8ivipfbw.js:9:22)\n    at test (/tmp/tmp8ivipfbw.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ivipfbw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let factor = 2;\n    while (n > 1){\n\
    \        if (n % factor == 0){\n            n /= factor;\n        }\n        else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    const x = largest_prime_factor_return_array(n);\n\
    \    return x[x.length-1];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfhe5tx6f.js:7\n    const x = largest_prime_factor_return_array(n);\n\
    \              ^\n\nReferenceError: largest_prime_factor_return_array is not defined\n\
    \    at largest_prime_factor (/tmp/tmpfhe5tx6f.js:7:15)\n    at test (/tmp/tmpfhe5tx6f.js:16:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfhe5tx6f.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n) {\n  \
    \  if (n % i === 0) {\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n\
    \  return i;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar p = 2;\n\tvar r = false;\n\twhile(n\
    \ > 1){\n\t\tif(n % p == 0){\n\t\t\tn = n / p;\n\t\t\tr = p;\n\t\t}\n\t\telse{\n\
    \t\t\tp++;\n\t\t}\n\t}\n\treturn r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar limit = Math.sqrt(n);\n\tvar prime\
    \ = n;\n\tvar largest_prime_factor = 2;\n\twhile(largest_prime_factor < limit){\n\
    \t\tif(n % largest_prime_factor == 0){\n\t\t\tlargest_prime_factor = n / largest_prime_factor;\n\
    \t\t\tif(is_prime(largest_prime_factor)){\n\t\t\t\tprime = largest_prime_factor;\n\
    \t\t\t\tlimit = Math.sqrt(prime);\n\t\t\t}\n\t\t}\n\t\tlargest_prime_factor++;\n\
    \t}\n\treturn prime;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiti3yuyq.js:13\n\t\t\tif(is_prime(largest_prime_factor)){\n\t\t\
    \t^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpiti3yuyq.js:13:4)\n\
    \    at test (/tmp/tmpiti3yuyq.js:28:20)\n    at Object.<anonymous> (/tmp/tmpiti3yuyq.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // number is prime until proven otherwise\n\
    \  let prime = true;\n  // find the first number that n is divisible by\n  for\
    \ (let i = 2; i < n/2; i++){\n    if (n % i === 0){\n      prime = false;\n  \
    \    let d = n/i;\n      // if d is prime then it is the largest prime factor\n\
    \      if (is_prime(d)){\n        return d;\n      }\n      // if d is not prime,\
    \ find the first number that d is divisible by\n      for (let j = 2; j < d/2;\
    \ j++){\n        if (d % j === 0){\n          prime = false;\n          // if\
    \ the second number is prime then it is the largest prime factor\n          if\
    \ (is_prime(d/j)){\n            return d/j;\n          }\n        }\n      }\n\
    \    }\n  }\n  // if it is prime then it is its own largest prime factor\n  if\
    \ (prime){\n    return n;\n  }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvs0_gpj9.js:15\n      if (is_prime(d)){\n      ^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmpvs0_gpj9.js:15:7)\n\
    \    at test (/tmp/tmpvs0_gpj9.js:41:20)\n    at Object.<anonymous> (/tmp/tmpvs0_gpj9.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factors = [];\n  // get all factors\n\
    \  for (var i = 0; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \    }\n  }\n  // prime numbers are factors of 1 and itself\n  // filter out prime\
    \ numbers\n  return factors.filter(function(factor) {\n    return factors.filter(function(f)\
    \ {\n      return factor % f === 0;\n    }).length === 2;\n  }).pop();\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = list_factors(n);\n\
    \    var primes = [];\n    for (var x = 0; x < factors.length; x++){\n       \
    \ if (is_prime(factors[x])){\n            primes.push(factors[x]);\n        }\n\
    \    }\n    return primes[primes.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvddr827v.js:7\n    var factors = list_factors(n);\n           \
    \       ^\n\nReferenceError: list_factors is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpvddr827v.js:7:19)\n    at test (/tmp/tmpvddr827v.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvddr827v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // TODO: Implement Me\n    let factor\
    \ = 2;\n    while (n > factor) {\n        if (n % factor == 0) {\n           \
    \ n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n\
    \    return factor;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // your code goes here\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpc_tdmpr6.js:14:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc_tdmpr6.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar p = 1;\n\tfor(var i = 2; i <= n;\
    \ i++){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\tp = i;\n\t\t}\n\t}\n\treturn\
    \ p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfcwqd10s.js:9\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t       \
    \  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpfcwqd10s.js:9:12)\n\
    \    at test (/tmp/tmpfcwqd10s.js:21:20)\n    at Object.<anonymous> (/tmp/tmpfcwqd10s.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    for(var i = Math.floor(Math.sqrt(n));\
    \ i > 1; i--){\n        if(n % i == 0 && is_prime(i)){\n            return i;\n\
    \        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp25e9wxkm.js:8\n        if(n % i == 0 && is_prime(i)){\n       \
    \          ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmp25e9wxkm.js:8:18)\n    at test (/tmp/tmp25e9wxkm.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp25e9wxkm.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var current = n;\n    var i = 2;\n\
    \    while(i <= current){\n        while(current % i === 0){\n            current\
    \ = current / i;\n        }\n        i++;\n    }\n    return i-1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar largest = 0;\n\tvar sqrt = Math.sqrt(n);\n\
    \tfor(var i = 2; i <= sqrt; i++){\n\t\tif(n % i == 0){\n\t\t\tlargest = i;\n\t\
    \t\twhile(n % i == 0){\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn Math.max(largest,\
    \ n);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor=2;\n  while(n>1){\n    if(n%factor==0){\n\
    \      n=n/factor;\n    }\n    else{\n      factor=factor+1;\n    }\n  }\n  return\
    \ factor;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // Your code here\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmppf274mpg.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppf274mpg.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // If a number is even, it is not\
    \ prime, so we will split all even numbers into 2, get the prime factor of the\
    \ remaining number, and then multiply by 2.\n    // If the prime factor is not\
    \ even, we will simply return the prime factor.\n    var prime_factor;\n    var\
    \ remaining_num;\n    if (n % 2 === 0){\n        prime_factor = 2;\n        remaining_num\
    \ = n / 2;\n    } else {\n        prime_factor = largest_prime_factor_rec(n);\n\
    \        remaining_num = n / prime_factor;\n    }\n    if (is_prime(remaining_num)){\n\
    \        return remaining_num;\n    } else {\n        return prime_factor * largest_prime_factor(remaining_num);\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4xf8s84x.js:15\n        prime_factor = largest_prime_factor_rec(n);\n\
    \        ^\n\nReferenceError: largest_prime_factor_rec is not defined\n    at\
    \ largest_prime_factor (/tmp/tmp4xf8s84x.js:15:9)\n    at test (/tmp/tmp4xf8s84x.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmp4xf8s84x.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  function prime_factor(n){\n    //TO\
    \ DO:\n    //1. check if the number is a prime\n    //2. if not, find a prime\
    \ factor\n    //3. check if the number is divisible by the prime factor\n    //4.\
    \ if so, keep dividing by the factor until it stops\n    //5. repeat until the\
    \ number is divisible by no other prime factor\n    return prime_factor(n)\n \
    \ }\n  return prime_factor(n)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpl_s0mpzf.js:14\n    return prime_factor(n)\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at prime_factor (/tmp/tmpl_s0mpzf.js:14:5)\n\
    \    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n\
    \    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n\
    \    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n\
    \    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n\
    \    at prime_factor (/tmp/tmpl_s0mpzf.js:14:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factors = [];\n  var factor = 2;\n\
    \  while (n % factor == 0){\n    factors.push(factor);\n    n = n / factor;\n\
    \  }\n  factor = 3;\n  var maxFactor = Math.sqrt(n);\n  while (n > 1 && factor\
    \ <= maxFactor){\n    while (n % factor == 0){\n      factors.push(factor);\n\
    \      n = n / factor;\n      maxFactor = Math.sqrt(n);\n    }\n    factor +=\
    \ 2;\n  }\n  if (n > 1){\n    factors.push(n);\n  }\n  return Math.max.apply(null,\
    \ factors);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(n > 1){\n\t\twhile(n\
    \ % i == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i - 1;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    for (var i = 2; i < n; i++) {\n \
    \       if (n % i === 0) {\n            return largest_prime_factor(n / i);\n\
    \        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var p = 0;\n  var i = 2;\n  while (i\
    \ <= n) {\n    if (n % i == 0) {\n      n = n / i;\n      p = i;\n    } else {\n\
    \      i++;\n    }\n  }\n  return p;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t\n\t//Check if the number is divisible\
    \ by 2\n\tif(n % 2 == 0){\n\t\t//If so, divide the number by 2\n\t\tn = n / 2;\n\
    \t}\n\t//Check if the number is divisible by 3\n\telse if(n % 3 == 0){\n\t\t//If\
    \ so, divide the number by 3\n\t\tn = n / 3;\n\t}\n\t//Check if the number is\
    \ divisible by 5\n\telse if(n % 5 == 0){\n\t\t//If so, divide the number by 5\n\
    \t\tn = n / 5;\n\t}\n\t//Check if the number is divisible by 7\n\telse if(n %\
    \ 7 == 0){\n\t\t//If so, divide the number by 7\n\t\tn = n / 7;\n\t}\n\t//Check\
    \ if the number is divisible by 11\n\telse if(n % 11 == 0){\n\t\t//If so, divide\
    \ the number by 11\n\t\tn = n / 11;\n\t}\n\t//Else return the number. This will\
    \ occur if the number is a prime.\n\telse{\n\t\treturn n;\n\t}\n\t\n\t//return\
    \ the largest prime factor\n\treturn largest_prime_factor(n);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpvv9to92g.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvv9to92g.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // Find the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    for (i = Math.floor(Math.sqrt(n));\
    \ i > 1; i--) {\n        if (n % i == 0) {\n            var notPrime = false;\n\
    \            for (j = 2; j < i; j++) {\n                if (i % j == 0) {\n  \
    \                  notPrime = true;\n                    break;\n            \
    \    }\n            }\n            if (!notPrime) {\n                return i;\n\
    \            }\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp3gjzep2b.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3gjzep2b.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var curr = n;\n    while (curr >\
    \ 1){\n        if (n % curr == 0){\n            if (is_prime(curr)){\n       \
    \         return curr;\n            }\n        }\n        curr -= 1;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5ji45b4h.js:10\n            if (is_prime(curr)){\n            ^\n\
    \nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmp5ji45b4h.js:10:13)\n\
    \    at test (/tmp/tmp5ji45b4h.js:23:20)\n    at Object.<anonymous> (/tmp/tmp5ji45b4h.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // Base Case\n  if (is_prime(n)){\n\
    \    return n;\n  } else {\n    // Recursive Case\n    let i = 2;\n    while (n\
    \ % i !== 0){\n      i++;\n    }\n    return largest_prime_factor(n / i);\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdtypj2i1.js:8\n  if (is_prime(n)){\n  ^\n\nReferenceError: is_prime\
    \ is not defined\n    at largest_prime_factor (/tmp/tmpdtypj2i1.js:8:3)\n    at\
    \ test (/tmp/tmpdtypj2i1.js:25:20)\n    at Object.<anonymous> (/tmp/tmpdtypj2i1.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = 2; i < n; i++) {\n   \
    \ if (n % i === 0) {\n      return largest_prime_factor(n / i);\n    }\n  }\n\
    \  return n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factor = 2;\n  var result = 0;\n\
    \  while (n > 1){\n    if (n % factor == 0){\n      result = factor;\n      n\
    \ = n / factor;\n    } else {\n      factor += 1;\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tlet largest = 0;\n\t// remove all factors\
    \ of 2\n\twhile (n % 2 === 0){\n\t\tlargest = 2;\n\t\tn = n / 2;\n\t}\n\t//test\
    \ for odd factors\n\tfor (let i = 3; i <= Math.sqrt(n); i += 2){\n\t\twhile (n\
    \ % i === 0){\n\t\t\tlargest = i;\n\t\t\tn = n / i;\n\t\t}\n\t}\n\t//only a prime\
    \ number will be left at this point\n\tif (n > 2){\n\t\tlargest = n;\n\t}\n\t\
    return largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  let ans = 1;\n  let isPrime = true;\n\
    \  for(let i = 2; i <= n/2; i++){\n    if(n % i == 0){\n      isPrime = true;\n\
    \      for(let j = 2; j <= i/2; j++){\n        if(i % j == 0){\n          isPrime\
    \ = false;\n          break;\n        }\n      }\n      if(isPrime && ans < i){\n\
    \        ans = i;\n      }\n    }\n  }\n  return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar max = 1;\n\tfor(var i = 2; i <=\
    \ n; i++){\n\t\tif(is_prime(i) && n % i == 0){\n\t\t\tmax = i;\n\t\t}\n\t}\n\t\
    return max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5f9nrmpq.js:9\n\t\tif(is_prime(i) && n % i == 0){\n\t\t^\n\nReferenceError:\
    \ is_prime is not defined\n    at largest_prime_factor (/tmp/tmp5f9nrmpq.js:9:3)\n\
    \    at test (/tmp/tmp5f9nrmpq.js:20:20)\n    at Object.<anonymous> (/tmp/tmp5f9nrmpq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let prime = 2;\n    while (n > 1){\n\
    \        while (n % prime === 0){\n            n = n / prime;\n        }\n   \
    \     prime++;\n    }\n    return prime - 1;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let prime_factors = [];\n    let\
    \ i = 2;\n    while (n > 1){\n        if (n % i == 0){\n            prime_factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i += 1;\n     \
    \   }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(n > 1){\n\t\tif(n\
    \ % i === 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti += 1;\n\t\t}\n\t}\n\
    \treturn i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // Your code here.\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpvupufl5v.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvupufl5v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2;\n    let factors = [];\n\
    \    while (i < n){\n        if (n % i === 0){\n            factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i += 1;\n        }\n  \
    \  }\n    factors.push(n);\n    return Math.max(...factors);\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t//https://en.wikipedia.org/wiki/Prime_number\n\
    \t//prime factorization method: https://en.wikipedia.org/wiki/Prime_factorization\n\
    \t//TODO: add in prime number filtering. if the number is already prime, immediately\
    \ return. \n\t//TODO: change the 2 case to accomodate negatives\n\t//TODO: need\
    \ to evaluate the number being passed in. \n\t//check for a number greater than\
    \ 0\n\tif(n <= 0)\n\t\tthrow new Error(\"Numbers less than or equal to 0 are not\
    \ allowed.\");\n\t//check for an integer\n\tif(!Number.isInteger(n))\n\t\tthrow\
    \ new Error(\"Non-integer numbers are not allowed.\");\n\t//check for a prime\n\
    \tvar prime = true;\n\tfor(var i = 2; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\t\
    prime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(prime){\n\t\treturn n;\n\t}\n\t\
    var factors = [];\n\tvar remainder = n;\n\tvar index = 2;\n\twhile(remainder >\
    \ 1){\n\t\tif(remainder % index == 0){\n\t\t\tfactors.push(index);\n\t\t\tremainder\
    \ = remainder / index;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn\
    \ factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar d = 2;\n\twhile (d <= n) {\n\t\t\
    if (n % d == 0) {\n\t\t\tn /= d;\n\t\t} else {\n\t\t\td += 1;\n\t\t}\n\t}\n\t\
    return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tif(is_prime(n)){\n\t\treturn n;\n\t\
    } else {\n\t\tvar i = n - 1;\n\t\tvar factor = 2;\n\t\twhile(i > 1){\n\t\t\tif(n\
    \ % i === 0){\n\t\t\t\tif(is_prime(i)){\n\t\t\t\t\tfactor = i;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\ti -= 1;\n\t\t}\n\t\treturn factor;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpb_a6yez5.js:7\n\tif(is_prime(n)){\n\t^\n\nReferenceError: is_prime\
    \ is not defined\n    at largest_prime_factor (/tmp/tmpb_a6yez5.js:7:2)\n    at\
    \ test (/tmp/tmpb_a6yez5.js:30:20)\n    at Object.<anonymous> (/tmp/tmpb_a6yez5.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  //check if n is divisible by 2\n  if\
    \ (n % 2 === 0){\n    //if so, divide n by 2 to get a new n.\n    n = n / 2;\n\
    \    //while n is still divisible by 2, divide it by 2 to get a new n.\n    while\
    \ (n % 2 === 0){\n      n = n / 2;\n    }\n  }\n  //now n is odd.\n  //create\
    \ a new variable, i, to store odd numbers.\n  //check if n is divisible by i\n\
    \  for (var i = 3; i <= Math.sqrt(n); i += 2){\n    if (n % i === 0){\n      //if\
    \ so, divide n by i to get a new n.\n      n = n / i;\n      //while n is still\
    \ divisible by i, divide it by i to get a new n.\n      while (n % i === 0){\n\
    \        n = n / i;\n      }\n    }\n  }\n  //return n\n  return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppch3xajh.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppch3xajh.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // YOUR CODE HERE\n    // You will\
    \ have to replace this return statement with the correct return value\n    var\
    \ i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            n = n /\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\
    \n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n) {\n  \
    \  if (n % i == 0) {\n      // if i divides n evenly, then it is a factor.\n \
    \     // start testing from this factor.\n      n = n / i;\n    } else {\n   \
    \   // if not, then increment i by 1.\n      i = i + 1;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i < n) {\n\t\t\
    while(n % i === 0) {\n\t\t\tn = n / i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8mo51ozs.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8mo51ozs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = 2; i <= n/2; i++) {\n\
    \    if (n % i === 0) {\n      return largest_prime_factor(n/i);\n    }\n  }\n\
    \  return n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // your code here\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpq68anmom.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq68anmom.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = factor(n);\n    var\
    \ biggest = 0;\n    for(var i = 0; i < factors.length; i++){\n        if(factors[i]\
    \ > biggest){\n            biggest = factors[i];\n        }\n    }\n    return\
    \ biggest;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy0hw532f.js:7\n    var factors = factor(n);\n                 \
    \ ^\n\nReferenceError: factor is not defined\n    at largest_prime_factor (/tmp/tmpy0hw532f.js:7:19)\n\
    \    at test (/tmp/tmpy0hw532f.js:23:20)\n    at Object.<anonymous> (/tmp/tmpy0hw532f.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let largestPrime=1;\n    let num=n;\n\
    \    let i=2;\n    while(i<=num){\n        if(num%i==0){\n            largestPrime=i;\n\
    \            num=num/i;\n        }else{\n            i++;\n        }\n    }\n\
    \    return largestPrime;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var largest_prime_factor = 1;\n  var\
    \ i = 2;\n  // Although we know that at least one factor of n is less than or\
    \ equal to the\n  // square root of n, we'll consider all factors for surety.\n\
    \  while (i <= n){\n    // If there is a remainder, i is not a factor of n.\n\
    \    if (n % i){\n      i++;\n    } else {\n      // We now know that i is a factor\
    \ of n.\n      largest_prime_factor = i;\n      // Set n to the quotient of n\
    \ and i.\n      n = n / i;\n    }\n  }\n  return largest_prime_factor;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var prime = 2;\n  var limit = Math.sqrt(n);\n\
    \  while(prime <= limit){\n    if(n % prime === 0){\n      n /= prime;\n     \
    \ limit = Math.sqrt(n);\n    }\n    else{\n      prime++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i * i <= n){\n\
    \        if (n % i) {\n            i++;\n        } else {\n            n /= i;\n\
    \        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //Place your code here\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpy_w4huu2.js:14:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_w4huu2.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 0;\n    for(i = 2; i < n;\
    \ i++){\n        if(n % i == 0){\n            return largest_prime_factor(n/i);\n\
    \        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t// Write your code here\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpx3p03gmq.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpx3p03gmq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\treturn n / smallest_prime_factor(n);\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy5x536h6.js:7\n\treturn n / smallest_prime_factor(n);\n\t^\n\n\
    ReferenceError: smallest_prime_factor is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpy5x536h6.js:7:2)\n    at test (/tmp/tmpy5x536h6.js:16:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpy5x536h6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    //prime numbers that divide n and\
    \ are less than n/2\n    var factors = [2];\n    //loop through all the odd numbers\
    \ less than n/2 and find all the prime factors\n    for(var i = 3; i < n/2; i+=2){\n\
    \        if(n % i === 0 && prime(i)){\n            factors.push(i);\n        }\n\
    \    }\n    //find the largest prime factor\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpm4re3q7d.js:11\n        if(n % i === 0 && prime(i)){\n        \
    \         ^\n\nReferenceError: prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmpm4re3q7d.js:11:18)\n    at test (/tmp/tmpm4re3q7d.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpm4re3q7d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var f = 2;\n    while (f*f <= n){\n\
    \        if (n % f == 0){\n            n /= f;\n        }\n        else{\n   \
    \         f++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2\n    while (i*i < n){\n\
    \        while (n % i == 0){\n            n = n / i\n        }\n        i += 1\n\
    \    }\n    return n\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpywb46wly.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpywb46wly.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tlet factor = 2;\n\twhile (n > factor){\n\
    \t\tif (n % factor == 0){\n\t\t\tn /= factor;\n\t\t}\n\t\telse{\n\t\t\tfactor++;\n\
    \t\t}\n\t}\n\treturn factor;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    var lastPrime = 1;\n\
    \    while (i * i <= n){\n        if (n % i == 0){\n            lastPrime = i;\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    if (n > 1){\n        lastPrime = n;\n    }\n    return lastPrime;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpz5uq3nc4.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5uq3nc4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let factors = [];\n    for (let i\
    \ = 1; i <= n; i++){\n        if (n % i === 0){\n            factors.push(i);\n\
    \        }\n    }\n    let prime_factors = []\n    for (let i = 0; i < factors.length;\
    \ i++){\n        if (is_prime(factors[i])){\n            prime_factors.push(factors[i]);\n\
    \        }\n    }\n    let largest_prime_factor = 0;\n    for (let i = 0; i <\
    \ prime_factors.length; i++){\n        if (prime_factors[i] > largest_prime_factor){\n\
    \            largest_prime_factor = prime_factors[i];\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp42owxy4u.js:15\n        if (is_prime(factors[i])){\n        ^\n\
    \nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmp42owxy4u.js:15:9)\n\
    \    at test (/tmp/tmp42owxy4u.js:32:20)\n    at Object.<anonymous> (/tmp/tmp42owxy4u.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t//initialize max_prime to n-1\n\tvar\
    \ max_prime = n-1;\n\t//Keep iterating while max_prime is not a prime factor\n\
    \twhile(n%max_prime !== 0 || !is_prime(max_prime)){\n\t\t//Decrement max_prime\
    \ by 1\n\t\tmax_prime--;\n\t}\n\t//Return max_prime\n\treturn max_prime;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9z_09go0.js:10\n\twhile(n%max_prime !== 0 || !is_prime(max_prime)){\n\
    \t                  ^\n\nReferenceError: is_prime is not defined\n    at largest_prime_factor\
    \ (/tmp/tmp9z_09go0.js:10:20)\n    at test (/tmp/tmp9z_09go0.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9z_09go0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  // your code here\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n5\n    at test (/tmp/tmpeb8obd7h.js:15:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeb8obd7h.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var primes = find_primes(n);\n  var\
    \ largest_prime_factor = 1;\n  for (var i = 0; i < primes.length; i++){\n    if\
    \ (n % primes[i] === 0){\n      largest_prime_factor = primes[i];\n    }\n  }\n\
    \  return largest_prime_factor;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsrhaynlg.js:7\n  var primes = find_primes(n);\n               ^\n\
    \nReferenceError: find_primes is not defined\n    at largest_prime_factor (/tmp/tmpsrhaynlg.js:7:16)\n\
    \    at test (/tmp/tmpsrhaynlg.js:22:20)\n    at Object.<anonymous> (/tmp/tmpsrhaynlg.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factor = 2;\n    var max = 1;\n\
    \    while(factor*factor <= n){\n        if(n%factor == 0){\n            n /=\
    \ factor;\n            max = factor;\n        }else{\n            factor = factor\
    \ + 1;\n        }\n    }\n    if(n > 1){\n        max = n;\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tlet i=2;\n\twhile(i<=n){\n\t\tif(n%i\
    \ == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i=2;\n  var lastFactor=1;\n  while(i<=n){\n\
    \    if(n%i==0){\n      lastFactor=i;\n      n=n/i;\n      while(n%i==0){\n  \
    \      n=n/i;\n      }\n    }\n    i++;\n  }\n  return lastFactor;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factors = prime_factors_n(n);\n\
    \    return prime_factors[prime_factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_gropn9a.js:7\n    var prime_factors = prime_factors_n(n);\n  \
    \                      ^\n\nReferenceError: prime_factors_n is not defined\n \
    \   at largest_prime_factor (/tmp/tmp_gropn9a.js:7:25)\n    at test (/tmp/tmp_gropn9a.js:16:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_gropn9a.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  if (n <= 1) {\n    return false;\n\
    \  }\n  if (is_prime(n)) {\n    return n;\n  }\n  var i = 2;\n  var res = -1;\n\
    \  while (i * i <= n) {\n    if (n % i == 0) {\n      res = i;\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    res = n;\n  }\n  return\
    \ res;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_bh9e87h.js:10\n  if (is_prime(n)) {\n  ^\n\nReferenceError: is_prime\
    \ is not defined\n    at largest_prime_factor (/tmp/tmp_bh9e87h.js:10:3)\n   \
    \ at test (/tmp/tmp_bh9e87h.js:35:20)\n    at Object.<anonymous> (/tmp/tmp_bh9e87h.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar a = 2;\n\twhile (n != a){\n\t\t\
    if (n % a === 0){\n\t\t\tn = n / a;\n\t\t} else {\n\t\t\ta = a + 1;\n\t\t}\n\t\
    }\n\treturn a;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\t//\"criba de eratostenes\"\n\tvar primes=[2];\n\
    \tfor(var i=3;i<n;i+=2){\n\t\tvar is_prime=true;\n\t\tfor(var j=0;j<primes.length;j++){\n\
    \t\t\tif(i%primes[j]==0){\n\t\t\t\tis_prime=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif(is_prime){\n\t\t\tprimes.push(i);\n\t\t}\n\t}\n\t//console.log(primes);\n\
    \tfor(var i=primes.length-1;i>=0;i--){\n\t\tif(n%primes[i]==0){\n\t\t\treturn\
    \ primes[i];\n\t\t}\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n) {\n  \
    \  if (n % i === 0) {\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  for (var i = 2; i <= n; i++) {\n  \
    \  if (n % i === 0) {\n      n /= i;\n      i--;\n    }\n  }\n  return i;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
