language: js
name: HumanEval_85_add
results:
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var add = 0;\n    for(var i = 0; i < lst.length; i++) {\n   \
    \     if(lst[i] % 2 == 0 && i % 2 != 0) {\n            add += lst[i];\n      \
    \  }\n    }\n    return add;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  return lst.filter((x,i) => (i+1)%2===0 && x%2===0).reduce((x,y)\
    \ => x+y,0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let res = 0;\n    for(let i = 1; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            res += lst[i];\n        }\n    }\n \
    \   return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e, i) => e % 2 === 0 && i % 2 != 0).reduce((a,\
    \ e) => a + e, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n \
    \       if(lst[i] % 2 == 0 && i % 2 != 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var odd = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      odd += lst[i];\n    }\n  }\n  return odd;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++) {\n   \
    \     if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var x = 0;\n    for(i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n            x += lst[i];\n        }\n    }\n    return\
    \ x;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(i % 2 == 1 && lst[i] % 2 == 0){\n            total += lst[i];\n    \
    \    }\n    }\n    return total;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e,i)=>i%2==1).reduce((a,b)=>a+b,0)\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpwxivlfnz.js:14:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxivlfnz.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let s = 0;\n    for(let i = 0; i < lst.length; i++){\n      \
    \  if(i % 2 != 0 && lst[i] % 2 == 0){\n            s += lst[i];\n        }\n \
    \   }\n    return s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    sum\
    \ += lst[i];\n  }\n  return sum;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmplhejea2n.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplhejea2n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(lst[i] % 2 === 0 && i % 2 !== 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var evenlst = lst.filter(function(num){\n    return num % 2 ===\
    \ 0;\n  });\n  var oddlst = evenlst.filter(function(num, index){\n    return index\
    \ % 2 === 1;\n  });\n  var sum = oddlst.reduce(function(current, prev){\n    return\
    \ current + prev;\n  }, 0);\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n128\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp6a17f3m3.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a17f3m3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 128,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 == 1){\n            result += lst[i];\n        }\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpatop7_hr.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpatop7_hr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e,i)=> i%2!==0).reduce((acc,curr)=>curr%2===0?acc+curr:acc,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if (i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    lst = lst.filter((el, idx) => (el % 2 === 0 && idx % 2 !== 0));\n\
    \    return lst.reduce((acc, el) => acc + el, 0);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpo3y3l1tu.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo3y3l1tu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\treturn lst.filter((e, i) => i % 2 !== 0).reduce((acc, curr) =>\
    \ acc + curr, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpqsszh07h.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqsszh07h.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i\
    \ % 2 != 0 && lst[i] % 2 == 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n   var sum = 0;\n   for(var i = 1; i < lst.length; i+=2){\n     \
    \ if(lst[i] % 2 == 0){\n         sum += lst[i];\n      }\n   }\n   return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2!=0){\n\
    \            if(lst[i]%2==0){\n                sum+=lst[i];\n            }\n \
    \       }\n    }\n    return sum;\n}\nvar lst = [4, 2, 6, 7];\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\nvar total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 === 0 && i % 2 !== 0){\n      total += lst[i];\n    }\n  }\n  return total;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var e = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 == 0 && i % 2 == 1){\n      e += lst[i];\n    }\n  }\n  return e;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    // return lst.filter((x,i) => i % 2 === 1).reduce((x,y) => x\
    \ + y)\n    return lst.filter((x,i) => x % 2 === 0 && i % 2 === 1).reduce((x,y)\
    \ => x + y)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n   //your code here\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            even.push(lst[i]);\n\
    \        }\n        else{\n            odd.push(lst[i]);\n        }\n    }\n \
    \   var sum = 0;\n    for(var i = 0; i < even.length; i++){\n        sum += even[i];\n\
    \    }\n    for(var i = 0; i < odd.length; i++){\n        sum += odd[i];\n   \
    \ }\n    return sum;\n}\nadd([4, 2, 6, 7]);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp0vf9bisp.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0vf9bisp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var even = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n      even += lst[i];\n    }\n  }\n  return even;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  //your code\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2!=0\
    \ && lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((element,index)=> index%2!==0 && element%2===0).reduce((num1,num2)=>\
    \ num1+num2)\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    sum = 0;\n    for(i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 != 0){\n            if(lst[i] % 2 == 0){\n                sum += lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  //your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpfy0ct9oa.js:14:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfy0ct9oa.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let arr = [];\n    let j = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 0){\n            arr[j] = lst[i];\n\
    \            j++;\n        }\n    }\n    let sum = 0;\n    for(let j = 0; j <\
    \ arr.length; j++){\n        sum += arr[j];\n    }\n    return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpyqzflp_1.js:14:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpyqzflp_1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var evenList = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if (lst[i] % 2 == 0 && i % 2 != 0){\n            evenList.push(lst[i]);\n\
    \        }\n    }\n    var sum = 0;\n    for(var i = 0; i < evenList.length; i++){\n\
    \        sum += evenList[i];\n    }\n    return sum;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var total = 0;\n  for(i=0; i<lst.length; i++){\n    if(lst[i] %\
    \ 2 == 0 && i % 2 != 0){\n      total += lst[i];\n    }\n  }\n  return total;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e,i)=>{\n        return e%2==0 && i%2!=0;\n\
    \    }).reduce((s,e)=>{\n        return s+e;\n    },0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    var i = 1;\n    for(i; i < lst.length; i+=2){\n\
    \        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++) {\n   \
    \     if(i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var even_lst = lst.filter(function(v, i){\n        return v %\
    \ 2 == 0 && i % 2 != 0;\n    });\n    var result = even_lst.reduce(function(a,\
    \ b){\n        return a + b;\n    });\n    return result;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 === 0 && i % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar total = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i]\
    \ % 2 == 0 && i % 2 == 1){\n\t\t\ttotal += lst[i];\n\t\t}\n\t}\n\treturn total;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var result = 0;\n    for(var i = 1; i < lst.length; i += 2){\n\
    \        if(lst[i] % 2 == 0){\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let res = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            res += lst[i];\n        }\n\
    \    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var even_arr = lst.filter(function(num){\n        return num\
    \ % 2 == 0;\n    });\n    var odd_index = even_arr.filter(function(num, index){\n\
    \        return index % 2 != 0;\n    });\n    return odd_index.reduce(function(a,\
    \ b){\n        return a + b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n128\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpd88dnhss.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd88dnhss.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 128,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let even = 0;\n    let odd = 1;\n    let added = 0;\n    while(odd\
    \ < lst.length){\n        added += lst[even];\n        even += 2;\n        odd\
    \ += 2;\n    }\n    return added;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmppldshjat.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppldshjat.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i]\
    \ % 2 === 0 && i % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if (i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  if (lst.length === 0) {\n    return 0;\n  }\n  else {\n    if (lst[0]\
    \ % 2 === 0) {\n      return lst[0] + add(lst.slice(2, lst.length));\n    }\n\
    \    else {\n      return add(lst.slice(1, lst.length));\n    }\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpdqp9wka2.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdqp9wka2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2==1){\n\
    \            sum = sum + lst[i];\n        }\n    }\n    return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp47gt0gpk.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp47gt0gpk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      total += lst[i];\n    }\n  }\n  return\
    \ total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n   var result = 0;\n    for(var i = 1; i < lst.length; i+=2){\n \
    \       if(lst[i] % 2 == 0){\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let even = 0;\n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] % 2 == 0 && i % 2 != 0){\n            even += lst[i];\n      \
    \  }\n    }\n    return even;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i]\
    \ % 2 == 0 && i % 2 == 1){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i+=2){\n    if(lst[i]\
    \ % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nadd([4, 2, 6,\
    \ 7]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmphivbwde4.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphivbwde4.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e, i) => {\n        return i % 2 === 1 &&\
    \ e % 2 === 0;\n    }).reduce((a, b) => {\n        return a + b;\n    });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let num = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            num += lst[i];\n        }\n\
    \    }\n    return num;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp2ldmboew.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ldmboew.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n     let sum = 0;\n     for(let i = 0; i < lst.length; i++){\n  \
    \        if(lst[i] % 2 === 0 && i % 2 !== 0){\n               sum += lst[i];\n\
    \          }\n     }\n     return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar sum = 0;\n\tfor(i=0; i<lst.length; i++){\n\t\tif (i%2 == 0\
    \ && lst[i]%2 == 0){\n\t\t\tsum = sum + lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    \n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpycgynmuk.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpycgynmuk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var evens = [];\n    for(var i = 0; i < lst.length; i++){\n \
    \       if(lst[i] % 2 == 0 && i % 2 != 0){\n            evens.push(lst[i]);\n\
    \        }\n    }\n    return evens.reduce(function(a, b){return a + b}, 0);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2\
    \ != 0 && lst[i]%2 == 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let index = 0;\n  let index2 = 0;\n  for(let i=0; i<lst.length;\
    \ i++){\n    if(i%2 == 0){\n      index2 = index2 + lst[i];\n    }\n  }\n  return\
    \ index2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp70ivhsu5.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp70ivhsu5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] % 2 == 0 && i % 2 != 0){\n            total += lst[i];\n    \
    \    }\n    }\n    return total;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    if(lst.length == 0){\n        return 0;\n    }else{\n       \
    \ var ret = 0;\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n                ret += lst[i];\n            }\n  \
    \      }\n        return ret;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpo3y3l1tu.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo3y3l1tu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var result = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 != 0 && lst[i] % 2 == 0){\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    // var sum = 0;\n    // for(let i = 0; i < lst.length; i++){\n\
    \    //     if(i % 2 != 0 && lst[i] % 2 == 0){\n    //         sum += lst[i];\n\
    \    //     }\n    // }\n    // return sum;\n    return lst.filter((num, index)\
    \ => index % 2 != 0 && num % 2 == 0).reduce((acc, num) => acc + num);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  if(lst.length==0){\n    return 0;\n  }\n  var s=0;\n  for(var i=0;i<lst.length;i++){\n\
    \    if(i%2==1 && lst[i]%2==0){\n      s+=lst[i];\n    }\n  }\n  return s;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\t// Create an empty array\n\tlet odd_indices = [];\n\tlet even_indices\
    \ = [];\n\tlet even_at_odd_indices = [];\n\t// Loop through the array\n\tfor (let\
    \ i = 0; i < lst.length; i++){\n\t\t// Check if the current number is even\n\t\
    \tif (lst[i] % 2 === 0){\n\t\t\t// Add the number to the even array\n\t\t\teven_indices.push(lst[i]);\n\
    \t\t}\n\t\t// Check if the current number is odd\n\t\telse if (lst[i] % 2 ===\
    \ 1){\n\t\t\t// Add the number to the odd array\n\t\t\todd_indices.push(lst[i]);\n\
    \t\t}\n\t}\n\t// Loop through the odd array\n\tfor (let j = 0; j < odd_indices.length;\
    \ j++){\n\t\t// Check if the current number is even\n\t\tif (odd_indices[j] %\
    \ 2 === 0){\n\t\t\t// Add the number to the even_at_odd_indices array\n\t\t\t\
    even_at_odd_indices.push(odd_indices[j]);\n\t\t}\n\t}\n\t// Check if the even_at_odd_indices\
    \ array is empty\n\tif (even_at_odd_indices.length === 0){\n\t\t// Return 0\n\t\
    \treturn 0;\n\t}\n\t// Check if the even_at_odd_indices array is not empty\n\t\
    else if (even_at_odd_indices.length > 0){\n\t\t// Declare a variable and assign\
    \ it a value of 0\n\t\tlet sum = 0;\n\t\t// Loop through the even_at_odd_indices\
    \ array\n\t\tfor (let k = 0; k < even_at_odd_indices.length; k++){\n\t\t\t// Add\
    \ each number to the variable\n\t\t\tsum += even_at_odd_indices[k];\n\t\t}\n\t\
    \t// Return the sum\n\t\treturn sum;\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpmdusbqx5.js:54:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmdusbqx5.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if (i % 2 !== 0 && lst[i] % 2 === 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((x,i)=>i%2!=0).reduce((a,b)=>a+b)\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpku1syagl.js:14:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpku1syagl.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var i = 0;\n    var sum = 0;\n    while (i < lst.length){\n \
    \       if (lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n       \
    \ i += 2;\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpc_t56pw9.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc_t56pw9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\treturn lst.filter((value, index) => (value % 2 === 0 && index %\
    \ 2 === 1)).reduce((prev, curr) => prev + curr, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if (i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n       \
    \ }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let ans = 0;\n    for(let i = 1; i < lst.length; i+=2){\n   \
    \     if(lst[i] % 2 == 0){\n            ans += lst[i];\n        }\n    }\n   \
    \ return ans;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var answer = 0;\n    for(var i = 0; i < lst.length; i++){\n \
    \       if(i % 2 !== 0 && lst[i] % 2 === 0){\n            answer += lst[i];\n\
    \        }\n    }\n    return answer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2){\n    if(lst[i]\
    \ % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpiutn3yef.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiutn3yef.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\treturn lst.filter((item, index) => index % 2 != 0).reduce((item,\
    \ acc) => item + acc)\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpwdcu4vsr.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwdcu4vsr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmp6bxrtxa3.js:14:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp6bxrtxa3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(i % 2 == 1 && lst[i] % 2 == 0){\n            total += lst[i];\n    \
    \    }\n    }\n    return total;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n   var sum = 0;\n   for(var i = 1; i < lst.length; i += 2){\n   \
    \    if(lst[i] % 2 == 0){\n           sum += lst[i];\n       }\n   }\n   return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var newList = lst.filter(function(element, index){\n        return\
    \ element % 2 === 0 && index % 2 !== 0;\n    });\n    var sum = newList.reduce(function(acc,\
    \ curr){\n        return acc + curr;\n    });\n    return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var result = 0;\n  for(var i = 0; i < lst.length; i++){\n    if\
    \ (lst[i] % 2 == 0 && i % 2 != 0){\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpgx9bewqk.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgx9bewqk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let num = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      num += lst[i];\n    }\n  }\n  return num;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i+=2){\n    if(lst[i]\
    \ % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpzvs8w2s9.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzvs8w2s9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpdcnvyzu8.js:13:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpdcnvyzu8.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 !== 0 && lst[i] % 2 === 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i]\
    \ % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpznanpg6l.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpznanpg6l.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ % 2 === 0 && i % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  return lst.filter((num, index) => {\n    return index % 2 !== 0\
    \ && num % 2 === 0;\n  }).reduce((acc, num) => {\n    return acc + num;\n  },\
    \ 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\nvar sum = 0;\n  for(var i = 1; i < lst.length; i+=2){\n    if(lst[i]\
    \ % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((item, idx) => idx % 2 && item % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 ===\
    \ 0){\n            lst[i] = lst[i] + lst[i];\n        }\n    }\n    return lst;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  176\n\
    ]\n\nshould loosely deep-equal\n\n88\n    at test (/tmp/tmpnfi4u3pa.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnfi4u3pa.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 8, 176 ],\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    let i = 0;\n    while(i < lst.length){\n  \
    \      if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n        i+=2;\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp002n90ni.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp002n90ni.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    if(lst.length == 0){\n        return -1;\n    }\n    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i += 2){\n        if(lst[i] % 2 ==\
    \ 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpxa2mzq8z.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxa2mzq8z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var even = 0;\n    var odd = 0;\n    for(var i =0; i<lst.length;\
    \ i++){\n        if(lst[i]%2==0){\n            even+=lst[i];\n        }\n    \
    \    else{\n            odd+=lst[i];\n        }\n    }\n    return even-odd;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp5ioevdht.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5ioevdht.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    lst = lst.filter((num, i) => num % 2 === 0 && i % 2 === 1);\n\
    \    return lst.reduce((acc, next) => acc + next, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  // const lst = [4, 2, 6, 7];\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp5padudvt.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5padudvt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  if (lst.length == 0) return 0;\n  else if (lst.length == 1) return\
    \ lst[0];\n  else if (lst.length == 2) return lst[0];\n  else {\n    var sum =\
    \ 0;\n    for (var i = 1; i < lst.length; i += 2) {\n      if (lst[i] % 2 == 0)\
    \ {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpglyzwxoj.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpglyzwxoj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpyqzflp_1.js:14:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpyqzflp_1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  let sum = 0;\n  lst.forEach((element, index) => {\n    if(element\
    \ % 2 === 0 && index % 2 === 1){\n      sum += element;\n    }\n  });\n  return\
    \ sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var total = 0;\n    for(var i = 0; i < lst.length; i++) {\n \
    \       if(i % 2 !== 0 && lst[i] % 2 === 0) {\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i\
    \ % 2 != 0 && lst[i] % 2 == 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2===1\
    \ && lst[i]%2===0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    // Your code here\n    let a = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 !== 0) {\n            if(lst[i] % 2 === 0) {\n    \
    \            a += lst[i];\n            }\n        }\n    }\n    return a;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(i % 2 != 0 && lst[i] % 2 == 0){\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 == 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((e, i) => i % 2 != 0 && e % 2 == 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  return lst.filter((x,i) => { return x % 2 === 0 && i % 2 === 1\
    \ }).reduce((a,b) => a + b)\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar index = 1;\n\tvar sum = 0;\n\tfor(var i = 0; i < lst.length;\
    \ i++){\n\t\tif(index % 2 == 1){\n\t\t\tsum += lst[i];\n\t\t}\n\t\tindex++;\n\t\
    }\n\treturn sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp9fmrgb2t.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9fmrgb2t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    //>>> your code here\n    var oddIndex = 0;\n    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n      if(i % 2 != 0){\n        if(lst[i]\
    \ % 2 == 0){\n          sum += lst[i];\n        }\n      }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let res = 0;\n    for(let i = 1; i < lst.length; i += 2){\n \
    \       if(lst[i] % 2 == 0){\n            res += lst[i];\n        }\n    }\n \
    \   return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((n, i) => i % 2 !== 0 && n % 2 === 0).reduce((total,\
    \ n) => total + n, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var arr = lst.filter(function(e, i){\n        return e % 2 ===\
    \ 0 && i % 2 !== 0;\n    });\n    var sum = arr.reduce(function(a, b){\n     \
    \   return a + b;\n    });\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let count = 0;\n    for(let i = 0; i < lst.length; i += 2){\n\
    \        if(lst[i] % 2 == 0){\n            count += lst[i];\n        }\n    }\n\
    \    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpaho59sqt.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaho59sqt.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tsum = 0;\n\tfor (var i = 0; i < lst.length; i++) {\n\t\tif (i %\
    \ 2 == 1 && lst[i] % 2 == 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  //write your code here\n  sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((_, i) => i % 2 === 1).reduce((acc, curr) =>\
    \ acc + curr, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpyghlu08s.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyghlu08s.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\nvar sum = 0;\nfor(var i = 0; i < lst.length; i++){\n    if (lst[i]\
    \ % 2 == 0 && i % 2 != 0){\n        sum += lst[i];\n    }\n}\nreturn sum;\n}\n\
    \n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n   \
    \     sum += lst[i];\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpyvgajjbo.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyvgajjbo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(i % 2 == 1 && lst[i] % 2 == 0){\n            total += lst[i];\n    \
    \    }\n    }\n    return total;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let evens = 0;\n    let odds = 0;\n    let result = 0;\n    for(let\
    \ i = 0; i < lst.length; i++) {\n        if(lst[i] % 2 === 0) {\n            evens\
    \ += lst[i];\n        } else {\n            odds += lst[i];\n        }\n    }\n\
    \    result = evens - odds;\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpazsli1su.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazsli1su.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    return lst.filter((ele, i) => i % 2 != 0).reduce((total, n) =>\
    \ total + n)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp6ethd3y9.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ethd3y9.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var even = []\n    for(var i = 0; i < lst.length; i += 2){\n\
    \        if(lst[i] % 2 == 0){\n            even.push(lst[i])\n        }\n    }\n\
    \    var sum = 0\n    for(var i = 0; i < even.length; i++){\n        sum += even[i]\n\
    \    }\n    return sum\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpu4cph4ba.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu4cph4ba.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    let i = 0;\n    let sum = 0;\n    for(i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 != 0) {\n            if(lst[i] % 2 == 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n\tvar total = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i]\
    \ % 2 == 0 && i % 2 == 1){\n\t\t\ttotal += lst[i];\n\t\t}\n\t}\n\treturn total;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    // Your Code here\n    var sum = 0;\n    for(var i = 1; i < lst.length;\
    \ i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977165
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977166
