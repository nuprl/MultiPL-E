name: HumanEval_160_do_algebra
language: js
results:
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result;\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            if(!result){\n                result = operand[i] + operand[i+1];\n\
    \            }else{\n                result += operand[i+1];\n            }\n\
    \        }\n        if(operator[i] === '-'){\n            if(!result){\n     \
    \           result = operand[i] - operand[i+1];\n            }else{\n        \
    \        result -= operand[i+1];\n            }\n        }\n        if(operator[i]\
    \ === '*'){\n            if(!result){\n                result = operand[i] * operand[i+1];\n\
    \            }else{\n                result *= operand[i+1];\n            }\n\
    \        }\n        if(operator[i] === '//'){\n            if(!result){\n    \
    \            result = Math.floor(operand[i] / operand[i+1]);\n            }else{\n\
    \                result = Math.floor(result / operand[i+1]);\n            }\n\
    \        }\n        if(operator[i] === '**'){\n            if(!result){\n    \
    \            result = Math.pow(operand[i], operand[i+1]);\n            }else{\n\
    \                result = Math.pow(result, operand[i+1]);\n            }\n   \
    \     }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpjqjod9x7.js:67:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqjod9x7.js:71:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    if(operator.length===0 || operand.length<2){\n        return null;\n    }\n\
    \    let result = operand[0];\n    for(let i=0; i<operator.length; i++){\n   \
    \     if(operator[i]==='+'){\n            result += operand[i+1];\n        }else\
    \ if(operator[i]==='-'){\n            result -= operand[i+1];\n        }else if(operator[i]==='*'){\n\
    \            result *= operand[i+1];\n        }else if(operator[i]==='//'){\n\
    \            result = Math.floor(result/operand[i+1]);\n        }else if(operator[i]==='**'){\n\
    \            result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"],\
    \ [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpd0gxynrw.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd0gxynrw.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var res = operand[0];\n    for(var i = 0; i < operator.length; i++){\n  \
    \      switch(operator[i]){\n            case '+':\n                res += operand[i+1];\n\
    \                break;\n            case '-':\n                res -= operand[i+1];\n\
    \                break;\n            case '*':\n                res *= operand[i+1];\n\
    \                break;\n            case '//':\n                res = Math.floor(res\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       res = Math.pow(res, operand[i+1]);\n                break;\n        }\n\
    \    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmp_2h10mkw.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_2h10mkw.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let res = operand[0];\n    for(let i = 0; i < operator.length; i++){\n  \
    \      switch(operator[i]){\n            case '+':\n                res += operand[i+1];\n\
    \                break;\n            case '-':\n                res -= operand[i+1];\n\
    \                break;\n            case '*':\n                res *= operand[i+1];\n\
    \                break;\n            case '//':\n                res = Math.floor(res\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       res = Math.pow(res, operand[i+1]);\n                break;\n        }\n\
    \    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmplf18g5p1.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmplf18g5p1.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  var operator_count = 0;\n  var operand_count = 0;\n  while(operator_count\
    \ < operator.length && operand_count < operand.length){\n    if(operator[operator_count]\
    \ == '+'){\n      result += operand[operand_count];\n      operand_count++;\n\
    \      operator_count++;\n    }\n    else if(operator[operator_count] == '-'){\n\
    \      result -= operand[operand_count];\n      operand_count++;\n      operator_count++;\n\
    \    }\n    else if(operator[operator_count] == '*'){\n      result *= operand[operand_count];\n\
    \      operand_count++;\n      operator_count++;\n    }\n    else if(operator[operator_count]\
    \ == '//'){\n      result = Math.floor(result / operand[operand_count]);\n   \
    \   operand_count++;\n      operator_count++;\n    }\n    else if(operator[operator_count]\
    \ == '**'){\n      result = Math.pow(result, operand[operand_count]);\n      operand_count++;\n\
    \      operator_count++;\n    }\n  }\n  return result;\n}\nvar operator = ['+',\
    \ '*', '-'];\nvar operand = [2, 3, 4, 5];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpdsj6b1tj.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdsj6b1tj.js:64:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  const al = [], op = []\n  operator.map((v,i) => {\n    if(v === '+' || v ===\
    \ '-') al.push(v)\n    else op.push(v)\n  })\n  let r1 = eval(operand.join(' '+al.join('\
    \ ')))\n  let r2 = op.map((v,i) => v === '*' ? eval(operand[i] * operand[i+1])\
    \ : eval(operand[i] / operand[i+1]))\n  return op.length > 0 ? eval(r1 + ' ' +\
    \ r2.join(' ')) : r1\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "undefined:1\n14 0.6666666666666666 12\n   ^^^^^^^^^^^^^^^^^^\n\nSyntaxError:\
    \ Unexpected number\n    at do_algebra (/tmp/tmpxmua4tmj.js:27:40)\n    at test\
    \ (/tmp/tmpxmua4tmj.js:35:20)\n    at Object.<anonymous> (/tmp/tmpxmua4tmj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        if(operator[i] === '+'){\n            result += operand[i+1];\n     \
    \   }\n        if(operator[i] === '-'){\n            result -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            result *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            result = Math.floor(result\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpd5_j1tal.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd5_j1tal.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        if(operator[i] === '+'){\n            result += operand[i+1];\n     \
    \   }\n        if(operator[i] === '-'){\n            result -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            result *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            result = Math.floor(result\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmplj65p9cf.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmplj65p9cf.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i] + operand[i+1];\n\
    \                break;\n            case '-':\n                result -= operand[i]\
    \ - operand[i+1];\n                break;\n            case '*':\n           \
    \     result *= operand[i] * operand[i+1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(operand[i] / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(operand[i],\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n105\n\nshould equal\n\n37\n    at test (/tmp/tmp33dfpln0.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmp33dfpln0.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 105,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var operandReverse = operand.reverse();\n  for(var i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] === \"**\"){\n      operandReverse[i] = Math.pow(operandReverse[i],\
    \ operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"//\"){\n      operandReverse[i] = Math.floor(operandReverse[i]\
    \ / operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"*\"){\n      operandReverse[i] = operandReverse[i] *\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"+\"){\n      operandReverse[i] = operandReverse[i] +\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"-\"){\n      operandReverse[i] = operandReverse[i] -\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"],\
    \ [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaxj5rl5d.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // your code here\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpqlcg9y5w.js:27:10)\n    at Object.<anonymous> (/tmp/tmpqlcg9y5w.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  let newOperand = operand.slice(0,2);\n  for(let i = 0; i < operator.length;\
    \ i++){\n    let index = 0;\n    let count = 1;\n    let x = newOperand[0];\n\
    \    let y = newOperand[1];\n    switch(operator[i]){\n      case '+':\n     \
    \   newOperand.splice(0,2,x+y);\n        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '-':\n        newOperand.splice(0,2,x-y);\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '*':\n        newOperand.splice(0,2,x*y);\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '//':\n        newOperand.splice(0,2,Math.floor(x/y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '**':\n        newOperand.splice(0,2,Math.pow(x,y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n    }\n  }\n  return newOperand[0];\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n36\n\nshould equal\n\n37\n    at test (/tmp/tmpvhixjywo.js:66:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvhixjywo.js:71:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 36,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  return operand.reduce((result, op, i) => {\n    if (i === 0) {\n      return\
    \ op;\n    }\n    switch (operator[i - 1]) {\n      case '+':\n        return\
    \ result + op;\n      case '-':\n        return result - op;\n      case '*':\n\
    \        return result * op;\n      case '//':\n        return result / op;\n\
    \      case '**':\n        return result ** op;\n    }\n  });\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpu7vp_bc8.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu7vp_bc8.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    return operand.reduce((a,b,i)=>{\n        if(operator[i-1]==='+'){\n    \
    \        return a+b;\n        }\n        if(operator[i-1]==='-'){\n          \
    \  return a-b;\n        }\n        if(operator[i-1]==='*'){\n            return\
    \ a*b;\n        }\n        if(operator[i-1]==='//'){\n            return Math.floor(a/b);\n\
    \        }\n        if(operator[i-1]==='**'){\n            return Math.pow(a,b);\n\
    \        }\n    })\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpfnpmyt7j.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfnpmyt7j.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    return eval(operand.map((v,i)=>i<1?v:`${operator[i-1]}${v}`).join(''))\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n7\n\nshould equal\n\n8\n    at test (/tmp/tmpzjxoxzky.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzjxoxzky.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpu4ji5eku.js:27:10)\n    at Object.<anonymous> (/tmp/tmpu4ji5eku.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = operand[0];\n    for(var i = 0; i < operator.length; i++){\n\
    \        if(operator[i] == '+'){\n            result += operand[i+1];\n      \
    \  }\n        else if(operator[i] == '-'){\n            result -= operand[i+1];\n\
    \        }\n        else if(operator[i] == '*'){\n            result *= operand[i+1];\n\
    \        }\n        else if(operator[i] == '//'){\n            result = parseInt(result\
    \ / operand[i+1]);\n        }\n        else if(operator[i] == '**'){\n       \
    \     result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpjqr83f4p.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqr83f4p.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n   \
    \ switch(operator[i]){\n      case '+':\n        result += operand[i+1];\n   \
    \     break;\n      case '-':\n        result -= operand[i+1];\n        break;\n\
    \      case '*':\n        result *= operand[i+1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i+1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i+1]);\n        break;\n\
    \    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpjajkv_05.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjajkv_05.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var total = operand[0];\n  for (var i = 0; i < operator.length; i++) {\n  \
    \  if (operator[i] === '+') {\n      total += operand[i+1];\n    } else if (operator[i]\
    \ === '-') {\n      total -= operand[i+1];\n    } else if (operator[i] === '*')\
    \ {\n      total *= operand[i+1];\n    } else if (operator[i] === '//') {\n  \
    \    total = Math.floor(total / operand[i+1]);\n    } else if (operator[i] ===\
    \ '**') {\n      total = Math.pow(total, operand[i+1]);\n    }\n  }\n  return\
    \ total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"],\
    \ [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpu9dmp1ac.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu9dmp1ac.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two arrays operator, and operand. The first array has basic algebra\
    \ operations, and \n// the second array is an array of integers. Use the two given\
    \ arrays to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ array is equal to the length of operand array minus one.\n// Operand is an array\
    \ of of non-negative integers.\n// Operator array has at least one operator, and\
    \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        switch(operator[i]){\n            case '+':\n                result +=\
    \ operand[i+1];\n                break;\n            case '-':\n             \
    \   result -= operand[i+1];\n                break;\n            case '*':\n \
    \               result *= operand[i+1];\n                break;\n            case\
    \ '//':\n                result = Math.floor(result / operand[i+1]);\n       \
    \         break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n9\n    at test (/tmp/tmpmgqkop5c.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmgqkop5c.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 9,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
