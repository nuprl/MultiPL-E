language: js
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')) {\n        let arr\
    \ = txt.split(' ');\n        return arr;\n    } else if (txt.includes(',')) {\n\
    \        let arr = txt.split(',');\n        return arr;\n    } else {\n      \
    \  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n        let arr = [];\n     \
    \   let counter = 0;\n        for (let i = 0; i < alphabet.length; i++) {\n  \
    \          for (let j = 0; j < txt.length; j++) {\n                if (alphabet[i]\
    \ === txt[j]) {\n                    arr.push(txt[j]);\n                }\n  \
    \          }\n        }\n        for (let k = 0; k < arr.length; k++) {\n    \
    \        if (k % 2 !== 0) {\n                counter++;\n            }\n     \
    \   }\n        return counter;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpuy01t17q.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuy01t17q.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var arr = [];\n    if (txt.includes(\" \")){\n        arr = txt.split(\"\
    \ \");\n    }\n    else if (txt.includes(\",\")){\n        arr = txt.split(\"\
    ,\");\n    }\n    else{\n        var oddNum = 0;\n        for (var i = 0; i <\
    \ letters.length; i++){\n            if (txt.includes(letters[i])){\n        \
    \        oddNum++;\n            }\n        }\n        return oddNum;\n    }\n\
    \    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n6\n\nshould equal\n\n3\n    at test (/tmp/tmpjk_l9197.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjk_l9197.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return\
    \ txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\"\
    ,\");\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 !== 0) {\n                count += 1;\n      \
    \      }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpse760g16.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpse760g16.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var odd = 0;\n        for(var i =\
    \ 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n   \
    \             odd++;\n            }\n        }\n        return odd;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmplcmxfy6y.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmplcmxfy6y.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var splitTxt = txt.split(\" \");\n    if(splitTxt.length\
    \ > 1){\n        return splitTxt;\n    }else{\n        var splitTxt = txt.split(\"\
    ,\");\n        if(splitTxt.length > 1){\n            return splitTxt;\n      \
    \  }else{\n            var oddLetters = 0;\n            var splitTxt = txt.split(\"\
    \");\n            for(var i = 0; i < splitTxt.length; i++){\n                if(i\
    \ % 2 != 0){\n                    oddLetters += 1;\n                }\n      \
    \      }\n            return oddLetters;\n        }\n    }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpr2m2l2cr.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr2m2l2cr.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = [];\n    var words = [];\n\
    \    var d = {};\n    var count = 0;\n    if(txt.indexOf(' ') !== -1){\n     \
    \   result = txt.split(' ');\n        return result;\n    }\n    else if(txt.indexOf(',')\
    \ !== -1){\n        result = txt.split(',');\n        return result;\n    }\n\
    \    else{\n        for(var i = 0; i < txt.length; i++){\n            var char\
    \ = txt[i];\n            if(d[char] === undefined){\n                d[char] =\
    \ 1;\n            }\n            else{\n                d[char]++;\n         \
    \   }\n        }\n        for(var key in d){\n            if(d[key] % 2 !== 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n6\n\nshould equal\n\n3\n    at test (/tmp/tmpvuaeyl1u.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvuaeyl1u.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/g)){\n        return txt.split(/\\\
    s/g);\n    }\n    else if(txt.match(/,/g)){\n        return txt.split(/,/g);\n\
    \    }\n    else{\n        var numLetters = txt.length;\n        var oddLetters\
    \ = numLetters/2;\n        return oddLetters;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2.5\n\nshould equal\n\n2\n    at test (/tmp/tmpgq5fszng.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgq5fszng.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.indexOf(\" \") != -1) {\n    return\
    \ txt.split(\" \");\n  } else if (txt.indexOf(\",\") != -1) {\n    return txt.split(\"\
    ,\");\n  } else {\n    var letters = txt.toLowerCase().split(\"\");\n    var odd\
    \ = [];\n    for (var i = 0; i < letters.length; i++) {\n      if (letters[i].charCodeAt(0)\
    \ % 2 != 0) {\n        odd.push(letters[i]);\n      }\n    }\n    return odd.length;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpvah0fmfu.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvah0fmfu.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  var arr = txt.split(\" \");\n        return arr;\n    }\n    else if (txt.indexOf(\"\
    ,\") != -1) {\n        var arr = txt.split(\",\");\n        return arr;\n    }\n\
    \    else {\n        var sum = 0;\n        for (var i = 0; i < txt.length; i++)\
    \ {\n            if (i % 2 == 0) {\n                sum += txt.charCodeAt(i);\n\
    \            }\n        }\n        return sum;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n297\n\nshould equal\n\n3\n    at test (/tmp/tmpefro4zzz.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpefro4zzz.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 297,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  var comma = txt.indexOf(',');\n  var space\
    \ = txt.indexOf(' ');\n  if (space > -1){\n    return txt.split(' ');\n  }\n \
    \ else if (comma > -1){\n    return txt.split(',');\n  }\n  else{\n    var odd\
    \ = 0;\n    for (var i = 0; i < txt.length; i++){\n      if (txt.charCodeAt(i)\
    \ % 2 == 1){\n        odd++;\n      }\n    }\n    return odd;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmplvl0nq07.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmplvl0nq07.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return\
    \ txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\"\
    ,\");\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp6das8njh.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6das8njh.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var split = [];\n    var word = \"\";\n\
    \    var splitter = false;\n    for(i=0; i<txt.length; i++){\n        if (txt[i]==\"\
    \ \" || txt[i]==\",\"){\n            if (splitter){\n                split.push(word);\n\
    \                word = \"\";\n            }\n            splitter = true;\n \
    \       }\n        else{\n            word = word+txt[i];\n            splitter\
    \ = false;\n        }\n    }\n    if (word.length>0){\n        split.push(word);\n\
    \    }\n    var count = 0;\n    for(i=0; i<split.length; i++){\n        if (split[i].length%2!=0){\n\
    \            count++;\n        }\n    }\n    if (count>0){\n        return count;\n\
    \    }\n    else{\n        return split;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpe0nhihum.js:50:10)\n    at Object.<anonymous> (/tmp/tmpe0nhihum.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' '))\n        return txt.split('\
    \ ');\n    else if(txt.includes(','))\n        return txt.split(',');\n    else\
    \ {\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n  \
    \          if(i % 2 == 0)\n                count++;\n        }\n        return\
    \ count;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpzsv3r51t.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzsv3r51t.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // TODO: implement split words\n\n    var\
    \ arr= txt.split('');\n    var even=[];\n    var odd=[];\n    var result=[];\n\
    \    var newArr=[];\n    var number=0;\n    var n=[];\n    var nU=[];\n    var\
    \ l=[];\n    var u=[];\n    var lU=[];\n    var r=[];\n    var rU=[];\n    var\
    \ s=[];\n    var sU=[];\n    var p=[];\n    var pU=[];\n    var w=[];\n    var\
    \ wU=[];\n    var space=0;\n    var comma=0;\n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==' '){\n            space++;\n        }\n        if(arr[i]==','){\n\
    \            comma++;\n        }\n    }\n    if(space>0){\n        result=txt.split('\
    \ ');\n        return result;\n    }\n    if(comma>0){\n        result=txt.split(',');\n\
    \        return result;\n    }\n    for(var i=0;i<arr.length;i++){\n        if(isEven(arr[i].charCodeAt(0))){\n\
    \            even.push(arr[i]);\n        }\n        else{\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(isEven(odd.length)){\n        return odd.length;\n \
    \   }\n    else{\n        return -odd.length;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpftcfb6jz.js:52\n        if(isEven(arr[i].charCodeAt(0))){\n   \
    \     ^\n\nReferenceError: isEven is not defined\n    at split_words (/tmp/tmpftcfb6jz.js:52:9)\n\
    \    at test (/tmp/tmpftcfb6jz.js:75:20)\n    at Object.<anonymous> (/tmp/tmpftcfb6jz.js:81:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let array = [];\n    if(txt.includes(\"\
    \ \")){\n        array = txt.split(\" \");\n    }\n    else if(txt.includes(\"\
    ,\")){\n        array = txt.split(\",\");\n    }\n    else{\n        let cnt =\
    \ 0;\n        for(let i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n\
    \                if(txt[i] == txt[i].toLowerCase()){\n                    cnt++;\n\
    \                }\n            }\n        }\n        array = cnt;\n    }\n  \
    \  return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpczu553d3.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpczu553d3.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") > -1)\n        return\
    \ txt.split(\" \");\n    else if (txt.indexOf(\",\") > -1)\n        return txt.split(\"\
    ,\");\n    else\n        return txt.split(\"\").filter(function(element, index,\
    \ array){\n            return (index%2 !== 0);\n        }).length;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp5wf04_a3.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5wf04_a3.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let txtArr = txt.split(\" \");\n    let\
    \ odd = 0;\n    for(let i = 0; i < txtArr.length; i++){\n        if(txtArr[i].charCodeAt(0)\
    \ % 2 !== 0){\n            odd++;\n        }\n    }\n    if(txtArr.length ===\
    \ 1){\n        let newArr = txtArr[0].split(\",\");\n        if(newArr.length\
    \ === 1){\n            return odd;\n        }\n        return newArr;\n    }\n\
    \    return txtArr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmplj9e32ms.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmplj9e32ms.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") !== -1) {\n     \
    \   return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") !== -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        let count = 0;\n\
    \        for (let i = 0; i < txt.length; i++) {\n            let charValue = txt.charCodeAt(i);\n\
    \            if (charValue % 2 === 1) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpd2z2x8u6.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd2z2x8u6.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.split(/[\\s,]/).filter(x => x).map(x\
    \ => /[^a-z]/.test(x) ? x : x.length % 2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 1, '!' ]\n\nshould equal\n\n\
    [ 'Hello', 'world,!' ]\n    at test (/tmp/tmpekjpp59n.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpekjpp59n.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 1, '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var x = txt.split(/[\\s,]+/);\n    if (x.length\
    \ == 1){\n        let ord = 0;\n        for (let i = 0; i < x[0].length; i++){\n\
    \            if (i % 2 == 0){\n                ord += x[0].charCodeAt(i) - 97;\n\
    \            }\n        }\n        return ord;\n    }\n    return x;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpk8mpu4nb.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk8mpu4nb.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if (txt.includes(\",\"\
    )){\n        arr = txt.split(\",\");\n    }\n    else if (txt.includes(\" \")){\n\
    \        arr = txt.split(\" \");\n    }\n    else{\n        var count = 0;\n \
    \       for (var i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i)\
    \ % 2 != 0){\n                count++;\n            }\n        }\n        arr\
    \ = count;\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpb_7gvnnm.js:37:10)\n    at Object.<anonymous> (/tmp/tmpb_7gvnnm.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')) {\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')) {\n        return txt.split(',');\n\
    \    }\n    else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpd_q5xtol.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd_q5xtol.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')) {\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')) {\n        return txt.split(',');\n\
    \    }\n    else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 !== 0) {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphwlvs1_t.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphwlvs1_t.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var a = txt.split(/\\s|,/);\n    if (a.length\
    \ === 1){\n        var i = 0;\n        for (var k = 0; k < txt.length; k++){\n\
    \            if (k % 2 === 0){\n                if (txt[k] === txt[k].toLowerCase()){\n\
    \                    i += 1;\n                }\n            }\n        }\n  \
    \      return i;\n    }\n    return a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpv6_3ou68.js:34:10)\n    at Object.<anonymous> (/tmp/tmpv6_3ou68.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.includes(\" \")) {\n    return txt.split(\"\
    \ \");\n  } else if (txt.includes(\",\")) {\n    return txt.split(\",\");\n  }\
    \ else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n   \
    \   if (txt.charCodeAt(i) % 2 !== 0) {\n        count += 1;\n      }\n    }\n\
    \    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuyvxk4br.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuyvxk4br.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        txt\
    \ = txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        txt\
    \ = txt.split(',');\n    }\n    else{\n        txt = txt.split('');\n        var\
    \ sum = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(i % 2\
    \ == 0){\n                sum += txt[i].charCodeAt(0);\n            }\n      \
    \  }\n        txt = sum;\n    }\n    return txt;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n297\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpvy2t3rvx.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvy2t3rvx.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 297,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  let split_by_comma = txt.split(',');\n  if\
    \ (split_by_comma.length == 1){\n    let split_by_space = txt.split(' ');\n  \
    \  if (split_by_space.length == 1){\n      let count = 0;\n      for (let i=0;\
    \ i<split_by_space[0].length; i++){\n        if (i%2 !== 0 && split_by_space[0][i]\
    \ === split_by_space[0][i].toLowerCase()){\n          count += 1;\n        }\n\
    \      }\n      return count;\n    }\n    return split_by_space;\n  }\n  return\
    \ split_by_comma;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpxawufdsj.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxawufdsj.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words;\n    words = txt.split(/[\\s,]+/);\n\
    \    if (words.length>1){\n        return words;\n    }\n    words = txt.split(',');\n\
    \    if (words.length>1){\n        return words;\n    }\n    return (words[0].length\
    \ % 2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpzjyh1jwp.js:31:10)\n    at Object.<anonymous> (/tmp/tmpzjyh1jwp.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var splitText = [];\n    var counter = 0;\n\
    \    if(txt.indexOf(\" \") == -1){\n        if(txt.indexOf(\",\") == -1){\n  \
    \          for(var i = 0; i < txt.length; i++){\n                if(txt.charCodeAt(i)\
    \ % 2 !== 0){\n                    counter++;\n                }\n           \
    \ }\n            return counter;\n        }\n        else{\n            splitText\
    \ = txt.split(\",\");\n            return splitText;\n        }\n    }\n    else{\n\
    \        splitText = txt.split(\" \");\n        return splitText;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmijfp15b.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmijfp15b.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \")>=0){\n        return\
    \ txt.split(\" \");\n    }else if(txt.indexOf(\",\")>=0){\n        return txt.split(\"\
    ,\");\n    }else{\n        var count=0;\n        for(var i=0;i<txt.length;i++){\n\
    \            if(txt.charCodeAt(i)%2==1){\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplt6i4nob.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplt6i4nob.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = [];\n    var arr = txt.split(\"\
    \ \");\n    if(arr.length > 1){\n        return arr;\n    }else{\n        arr\
    \ = txt.split(\",\");\n        if(arr.length > 1){\n            return arr;\n\
    \        }else{\n            var count = 0;\n            var c = txt.charCodeAt(0);\n\
    \            if(c % 2 === 1){\n                count = count + 1;\n          \
    \  }\n            c = txt.charCodeAt(1);\n            if(c % 2 === 1){\n     \
    \           count = count + 1;\n            }\n            c = txt.charCodeAt(2);\n\
    \            if(c % 2 === 1){\n                count = count + 1;\n          \
    \  }\n            c = txt.charCodeAt(3);\n            if(c % 2 === 1){\n     \
    \           count = count + 1;\n            }\n            c = txt.charCodeAt(4);\n\
    \            if(c % 2 === 1){\n                count = count + 1;\n          \
    \  }\n            c = txt.charCodeAt(5);\n            if(c % 2 === 1){\n     \
    \           count = count + 1;\n            }\n            return count;\n   \
    \     }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmps1sen3no.js:60:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps1sen3no.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr=txt.split(\" \");\n    var arr2=txt.split(\"\
    ,\");\n    if(arr.length>1){\n        return arr;\n    }\n    else if(arr2.length>1){\n\
    \        return arr2;\n    }\n    else {\n        var count=0;\n        for(var\
    \ i=0;i<txt.length;i++){\n            if(i%2==0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5g8rvb1k.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5g8rvb1k.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        count = 0;\n        for(i=0; i<txt.length; i++){\n\
    \            if(txt.charCodeAt(i)%2!=0){\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp012_537x.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp012_537x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') > -1) {\n    return txt.split('\
    \ ');\n  }\n  else if (txt.indexOf(',') > -1) {\n    return txt.split(',');\n\
    \  }\n  else {\n    return txt.split('').filter(function(e, i) {\n      return\
    \ i % 2 !== 0;\n    }).length;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_91t459k.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_91t459k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var num = txt.replace(/[^a-z]/g, '');\n\
    \    var num1 = num.split('');\n    var arr = [];\n    var count = 0;\n    for(var\
    \ i = 0; i < num1.length; i++){\n        if(num1[i] != num1[i].toUpperCase()){\n\
    \            count += 1;\n        }\n    }\n    if(txt.split(' ').length > 1){\n\
    \        return txt.split(' ');\n    }\n    else if(txt.split(',').length > 1){\n\
    \        return txt.split(',');\n    }\n    else{\n        return count;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6nl4nm76.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6nl4nm76.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')) {\n        return\
    \ txt.split(' ');\n    } else if (txt.includes(',')) {\n        return txt.split(',');\n\
    \    } else {\n        return txt.length;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxvv8gc01.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxvv8gc01.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // solution 1\n    // var result = [];\n\
    \    // if(txt.indexOf(' ') != -1){\n    //     result = txt.split(' ');\n   \
    \ // }else if(txt.indexOf(',') != -1){\n    //     result = txt.split(',');\n\
    \    // }else{\n    //     var counter = 0;\n    //     for(var i = 0; i < txt.length;\
    \ i++){\n    //         if(txt.charCodeAt(i) % 2 != 0){\n    //             counter\
    \ += 1;\n    //         }\n    //     }\n    //     result = counter;\n    //\
    \ }\n    // return result;\n\n    // solution 2\n    if(txt.indexOf(' ') != -1){\n\
    \        return txt.split(' ');\n    }else if(txt.indexOf(',') != -1){\n     \
    \   return txt.split(',');\n    }else{\n        var counter = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                counter += 1;\n            }\n        }\n        return counter;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp9z_awevb.js:54:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9z_awevb.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  return txt.split(/[\\s,]/).length;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjxoptu5i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjxoptu5i.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i+=2){\n            if(txt[i] === txt[i].toLowerCase()){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfrfq4gka.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfrfq4gka.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let splittedTxt = \"\";\n    let noWhitespace\
    \ = txt.split(\" \");\n    let noCommas = txt.split(\",\");\n    let noWhiteCommas\
    \ = txt.split(\" \");\n    let oddLetter = \"\";\n    let count = 0;\n    let\
    \ result = [];\n    if(txt.includes(\" \")){\n        for(let i = 0; i < noWhitespace.length;\
    \ i++){\n            if(noWhitespace[i] === \"\"){\n                splittedTxt\
    \ = true;\n            }\n            else{\n                splittedTxt = false;\n\
    \            }\n        }\n        if(splittedTxt === true){\n            return\
    \ txt.split(\",\");\n        }\n        else{\n            return txt.split(\"\
    \ \");\n        }\n    }\n    else if(txt.includes(\",\")){\n        for(let i\
    \ = 0; i < noCommas.length; i++){\n            if(noCommas[i] === \"\"){\n   \
    \             splittedTxt = true;\n            }\n            else{\n        \
    \        splittedTxt = false;\n            }\n        }\n        if(splittedTxt\
    \ === true){\n            return txt.split(\" \");\n        }\n        else{\n\
    \            return txt.split(\",\");\n        }\n    }\n    else{\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt[i] % 2 === 1){\n          \
    \      count++;\n            }\n        }\n        return count;\n    }\n\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwcto1mzn.js:70:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwcto1mzn.js:76:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.search(\" \") == -1){\n        if(txt.search(\"\
    ,\") == -1){\n            var count = 0;\n            for(var i = 0; i < txt.length;\
    \ i++){\n                if(txt.charCodeAt(i) % 2 != 0){\n                   \
    \ count++;\n                }\n            }\n            return count;\n    \
    \    }\n        else{\n            return txt.split(\",\");\n        }\n    }\n\
    \    else{\n        return txt.split(\" \");\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp85fsau9h.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp85fsau9h.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let x = txt.split(\" \");\n    let y = txt.split(\"\
    ,\");\n    if (txt.includes(\" \")){\n        return x;\n    }\n    else if (txt.includes(\"\
    ,\")){\n        return y;\n    }\n    else{\n        let odd = 0;\n        for\
    \ (let i = 0; i < txt.length; i++){\n            if ((txt.charCodeAt(i) % 2) !==\
    \ 0){\n                odd++;\n            }\n        }\n        return odd;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmps7msfgkg.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps7msfgkg.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return Array.isArray(txt) ? txt : txt.split(',')\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzugn7sfk.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzugn7sfk.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977032
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // Your code here\n    if (txt.includes(\"\
    \ \")) {\n        let strArr = txt.split(\" \");\n        return strArr;\n   \
    \ } else if (txt.includes(\",\")) {\n        let strArr = txt.split(\",\");\n\
    \        return strArr;\n    } else {\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 === 1)\
    \ {\n                count += 1;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp32hwql0k.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp32hwql0k.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = txt.split(/\\s/);\n    let newArr\
    \ = [];\n    let cnt = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].match(/[a-z]/)){\n\
    \            let ch = arr[i].charCodeAt(0);\n            if(ch % 2 != 0){\n  \
    \              cnt += 1;\n            }\n        }\n    }\n    if(cnt === 0){\n\
    \        return arr;\n    }else{\n        return cnt;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5217isfl.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5217isfl.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") === -1){\n       \
    \ if(txt.indexOf(\",\") === -1){\n            var sum = 0;\n            for(var\
    \ i = 0; i < txt.length; i++){\n                if(txt.charCodeAt(i) % 2 !== 0){\n\
    \                    sum++;\n                }\n            }\n            return\
    \ sum;\n        }\n        return txt.split(\",\");\n    }\n    return txt.split(\"\
    \ \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpt8p2hc19.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt8p2hc19.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\tif (txt.match(/\\s+/)){\n\t\treturn txt.split(/\\\
    s+/);\n\t} else if (txt.match(/\\,+/)){\n\t\treturn txt.split(/\\,+/);\n\t} else\
    \ {\n\t\treturn txt.match(/[a-z]/g).length;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpg44pyyjr.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg44pyyjr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/)){\n        return txt.split(/\\\
    s/)\n    }\n    else if (txt.match(/\\,/)){\n        return txt.split(',')\n \
    \   }\n    else{\n        const split = txt.split('')\n        const answer =\
    \ split.filter(a => split.indexOf(a) % 2 === 0)\n        return answer.length\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwf49zm9o.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwf49zm9o.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        txt =\
    \ txt.split(\" \");\n    }else if(txt.includes(\",\")){\n        txt = txt.split(\"\
    ,\");\n    }else{\n        let temp = txt.toLowerCase();\n        let count =\
    \ 0;\n        for(let i = 0; i < temp.length; i++){\n            if(temp.charCodeAt(i)\
    \ % 2 !== 0){\n                count++;\n            }\n        }\n        txt\
    \ = count;\n    }\n    return txt;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptzcj46zf.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptzcj46zf.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = txt.split('');\n    let result\
    \ = [];\n    let count = 0;\n    let temp = '';\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] == ' '){\n            result.push(temp);\n        \
    \    temp = '';\n        }else if(arr[i] == ','){\n            result.push(temp);\n\
    \            temp = '';\n        }else{\n            temp += arr[i];\n       \
    \ }\n    }\n    result.push(temp);\n    for(let i = 0; i < result.length; i++){\n\
    \        if(result[i].length == 0){\n            result.splice(i, 1);\n      \
    \  }\n    }\n    if(result.length >= 1){\n        return result;\n    }else{\n\
    \        for(let i = 0; i < arr.length; i++){\n            if(arr[i].charCodeAt()\
    \ % 2 != 0){\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp2j5wc723.js:52:10)\n    at Object.<anonymous> (/tmp/tmp2j5wc723.js:60:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') >= 0) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') >= 0) {\n        return txt.split(',');\n\
    \    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count += 1;\n       \
    \     }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpvi0okdfx.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvi0okdfx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let mystr = txt;\n    let spaces = mystr.split('\
    \ ');\n    if (spaces.length > 1){\n        return spaces;\n    }\n    else{\n\
    \        let commas = mystr.split(',');\n        if (commas.length > 1){\n   \
    \         return commas;\n        }\n        else{\n            let ord = [];\n\
    \            for (let char in mystr){\n                if (mystr[char].toLowerCase().charCodeAt(0)\
    \ % 2 == 1){\n                    ord.push(mystr[char]);\n                }\n\
    \            }\n            return ord.length;\n        }\n    }\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp03sy2pkr.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp03sy2pkr.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n   var space = \" \";\n   var comma = \",\"\
    ;\n   var arr = txt.split(space);\n   var arr1 = txt.split(comma);\n   var count\
    \ = 0;\n   var arr2 = [];\n   if(arr.length > 1){\n       return arr;\n   }\n\
    \   else if(arr1.length > 1){\n       return arr1;\n   }\n   else{\n       for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)%2 != 0){\n  \
    \             count++;\n            }\n       }\n       return count;\n   }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpufgiwilo.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpufgiwilo.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let regex_splitter = /,|\\s/g;\n    let\
    \ myArray = txt.split(regex_splitter);\n    let integerArray = [];\n    let stringArray\
    \ = [];\n    let counter = 0;\n    myArray.forEach(function(elem) {\n        if(parseInt(elem)\
    \ !== NaN) {\n            integerArray.push(elem);\n        } else {\n       \
    \     stringArray.push(elem);\n        }\n    });\n    if(integerArray.length\
    \ > 0) {\n        integerArray.forEach(function(elem) {\n            if(parseInt(elem)\
    \ % 2 !== 0) {\n                counter ++;\n            }\n        });\n    \
    \    return counter;\n    } else {\n        return stringArray;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp_zj_d97q.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_zj_d97q.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        let count = 0;\n        let arr = txt.split('');\n\
    \        arr.forEach(function(ch) {\n            let index = ch.charCodeAt(0)\
    \ - 97;\n            if (index % 2 !== 0) {\n                count += 1;\n   \
    \         }\n        });\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp6p4gqxcu.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6p4gqxcu.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") !== -1){\n       \
    \ return txt.split(\" \");\n    }else if(txt.indexOf(\",\") !== -1){\n       \
    \ return txt.split(\",\");\n    }else{\n        var num = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 === 1){\n\
    \                num++;\n            }\n        }\n        return num;\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppbpnekfc.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppbpnekfc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 != 0){\n                if(txt[i] == txt[i].toLowerCase()){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;\n    }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // YOUR CODE HERE\n    if(txt.match(/\\\
    s/g)){\n        return txt.split(/\\s/g);\n    }else if(txt.match(/,/g)){\n  \
    \      return txt.split(/,/g);\n    }else{\n        let count = 0;\n        let\
    \ alph = \"abcdefghijklmnopqrstuvwxyz\";\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(alph.indexOf(txt[i]) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') === -1) {\n       \
    \ if (txt.indexOf(',') === -1) {\n            var counter = 0;\n            for\
    \ (var i = 0; i < txt.length; i++) {\n                if (txt.charCodeAt(i) %\
    \ 2 !== 0) {\n                    counter++;\n                }\n            }\n\
    \            return counter;\n        }\n        else {\n            return txt.split(',');\n\
    \        }\n    }\n    else {\n        return txt.split(' ');\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpdknrpsrm.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdknrpsrm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  // if typeof string or string.length = 0 return\
    \ null\n  if(typeof txt !== 'string' || txt.length === 0){\n    return null;\n\
    \  }\n  // check for white space and return split\n  if(txt.indexOf(' ') !== -1){\n\
    \    return txt.split(' ');\n  }\n  // check for comma, return split\n  if(txt.indexOf(',')\
    \ !== -1){\n    return txt.split(',');\n  }\n  // else return number of odd lowercase\
    \ letters\n  var count = 0;\n  var arr = txt.toLowerCase().split('');\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i].charCodeAt(0) % 2 === 1){\n    \
    \  count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpzhdb_zz8.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzhdb_zz8.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var whitespaces = txt.indexOf(\" \");\n\
    \    var commas = txt.indexOf(\",\");\n    var arr = [];\n    var arr1 = [];\n\
    \    var arr2 = [];\n    if (whitespaces >= 0) {\n        arr = txt.split(\" \"\
    );\n        return arr;\n    }\n    else if (commas >= 0) {\n        arr1 = txt.split(\"\
    ,\");\n        return arr1;\n    }\n    else {\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                arr2.push(txt[i]);\n\
    \            }\n        }\n        return arr2.length;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmnrni4yw.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmnrni4yw.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let a = txt.split(/[\\s,]+/);\n    return\
    \ (a.length > 1) ? a : a[0].split('').filter((x, index) => (index % 2 === 0) ?\
    \ x == x.toLowerCase() : x != x.toLowerCase()).length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpsq_19a7j.js:23:10)\n    at Object.<anonymous> (/tmp/tmpsq_19a7j.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.split(' ').length > 1){\n       \
    \ return txt.split(' ');\n    }else if(txt.split(',').length > 1){\n        return\
    \ txt.split(',');\n    }else{\n        let count = 0;\n        for(let i = 0;\
    \ i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n       \
    \         count++;\n            }\n        }\n        return count;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8wxnxxss.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8wxnxxss.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n   if (txt.includes(' ')){\n       let str1\
    \ = txt.split(' ');\n       return str1;\n   }\n   else if (txt.includes(',')){\n\
    \       let str2 = txt.split(',');\n       return str2;\n   }\n   else{\n    \
    \   let count = 0;\n       for (let i = 0; i < txt.length; i++){\n           if\
    \ ((txt.charCodeAt(i) - 97) % 2 !== 0){\n               count++;\n           }\n\
    \       }\n       return count;\n   }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphuzp73ub.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphuzp73ub.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // YOUR CODE HERE\n    if(txt.indexOf(\"\
    \ \") != -1){\n        return txt.split(\" \");\n    }else if(txt.indexOf(\",\"\
    ) != -1){\n        return txt.split(\",\");\n    }else{\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(ord(txt[i]) % 2\
    \ != 0){\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdfzfwya3.js:20\n            if(ord(txt[i]) % 2 != 0){\n       \
    \     ^\n\nReferenceError: ord is not defined\n    at split_words (/tmp/tmpdfzfwya3.js:20:13)\n\
    \    at test (/tmp/tmpdfzfwya3.js:37:20)\n    at Object.<anonymous> (/tmp/tmpdfzfwya3.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') !== -1) {\n    return\
    \ txt.split(' ');\n  } else if (txt.indexOf(',') !== -1) {\n    return txt.split(',');\n\
    \  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i += 2) {\n\
    \      if (txt[i] === txt[i].toLowerCase()) {\n        count += 1;\n      }\n\
    \    }\n    return count;\n  }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp6z0kcod7.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6z0kcod7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let count = 0;\n    let words = txt.split('');\n    for(let i = 0; i <\
    \ txt.length; i++){\n        if(txt[i] === ' '){\n            return txt.split('\
    \ ');\n        }\n        else if(txt[i] === ','){\n            return txt.split(',');\n\
    \        }\n        else{\n            if(lower.indexOf(txt[i]) % 2 === 1){\n\
    \                count += 1;\n            }\n        }\n    }\n    return count;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'Hello',\n  'world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello,Hello,world',\n\
    \  '!'\n]\n    at test (/tmp/tmpafuam5a1.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpafuam5a1.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello', 'world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let a=txt.split('');\n    let odd=0;\n \
    \   if(txt.match(/\\s/g)){\n        txt=txt.split(/\\s/g);\n        return txt;\n\
    \    }else if(txt.match(/\\,/g)){\n        txt=txt.split(',');\n        return\
    \ txt;\n    }else{\n        for(let i=0;i<a.length;i++){\n            if(a[i].charCodeAt()%2===1){\n\
    \                odd++;\n            }\n        }\n        return odd;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp43x4u08o.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp43x4u08o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let letters = txt.split('');\n    console.log(letters);\n\
    \    let result = [];\n    let evens = [];\n    let odds = [];\n    for(let i\
    \ = 0; i < letters.length; i++){\n        if(letters[i] === \" \"){\n        \
    \    result.push(letters[i]);\n        }else if(letters[i] === \",\"){\n     \
    \       result.push(letters[i]);\n        }else{\n            if(letters[i] ===\
    \ \"a\" || letters[i] === \"c\" || letters[i] === \"e\" || letters[i] === \"g\"\
    \ || letters[i] === \"i\" || letters[i] === \"k\" || letters[i] === \"m\" || letters[i]\
    \ === \"o\" || letters[i] === \"q\" || letters[i] === \"s\" || letters[i] ===\
    \ \"u\" || letters[i] === \"w\" || letters[i] === \"y\"){\n                evens.push(letters[i]);\n\
    \            }else{\n                odds.push(letters[i]);\n            }\n \
    \       }\n    }\n    console.log(evens);\n    console.log(odds);\n    console.log(result);\n\
    \    if(result.length > 0){\n        return result;\n    }else{\n        return\
    \ odds.length;\n    }\n}\nsplit_words(\"Hello world!\");\nsplit_words(\"Hello,world!\"\
    );\nsplit_words(\"abcdef\");\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' '\n]\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpt02inacx.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt02inacx.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  'H', 'e', 'l', 'l',\n  'o', ' ', 'w', 'o',\n  'r', 'l', 'd', '!'\n\
    ]\n[ 'e', 'o', 'w', 'o' ]\n[\n  'H', 'l', 'l',\n  'r', 'l', 'd',\n  '!'\n]\n[\
    \ ' ' ]\n[\n  'H', 'e', 'l', 'l',\n  'o', ',', 'w', 'o',\n  'r', 'l', 'd', '!'\n\
    ]\n[ 'e', 'o', 'w', 'o' ]\n[\n  'H', 'l', 'l',\n  'r', 'l', 'd',\n  '!'\n]\n[\
    \ ',' ]\n[ 'a', 'b', 'c', 'd', 'e', 'f' ]\n[ 'a', 'c', 'e' ]\n[ 'b', 'd', 'f'\
    \ ]\n[]\n[\n  'H', 'e', 'l', 'l',\n  'o', ' ', 'w', 'o',\n  'r', 'l', 'd', '!'\n\
    ]\n[ 'e', 'o', 'w', 'o' ]\n[\n  'H', 'l', 'l',\n  'r', 'l', 'd',\n  '!'\n]\n[\
    \ ' ' ]\n"
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/[^a-zA-Z,\\s]/)) {\n    \
    \    throw new Error(\"Only letters, commas, and whitespace permitted\");\n  \
    \  }\n    if (txt.match(/\\s+/)) {\n        return txt.split(/\\s+/);\n    }\n\
    \    if (txt.match(/[,]/)) {\n        return txt.split(\",\");\n    }\n    if\
    \ (txt.match(/[a-z]/)) {\n        var arr = txt.split(\"\");\n        var counter\
    \ = 0;\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i].charCodeAt(0)\
    \ % 2 != 0) {\n                counter++;\n            }\n        }\n        return\
    \ counter;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpi9y8rtsv.js:13\n        throw new Error(\"Only letters, commas,\
    \ and whitespace permitted\");\n        ^\n\nError: Only letters, commas, and\
    \ whitespace permitted\n    at split_words (/tmp/tmpi9y8rtsv.js:13:15)\n    at\
    \ test (/tmp/tmpi9y8rtsv.js:38:20)\n    at Object.<anonymous> (/tmp/tmpi9y8rtsv.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var num = 0;\n    var i;\n    if (txt.indexOf('\
    \ ') >= 0) {\n        var ans = txt.split(' ');\n        return ans;\n    } else\
    \ if (txt.indexOf(',') >= 0) {\n        var ans = txt.split(',');\n        return\
    \ ans;\n    } else {\n        for (i = 0; i < txt.length; i++) {\n           \
    \ if (txt.charCodeAt(i) % 2 == 1) {\n                num++;\n            }\n \
    \       }\n        return num;\n    }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpu2ovg4pm.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2ovg4pm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = [];\n    if (txt.indexOf(\" \"\
    ) > -1){\n        return txt.split(\" \");\n    } else if (txt.indexOf(\",\")\
    \ > -1){\n        return txt.split(\",\");\n    } else {\n        let count =\
    \ 0;\n        for (let i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i)\
    \ % 2 != 0){\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpzzb740my.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzzb740my.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = [];\n    if (txt.indexOf(\" \"\
    ) >= 0){\n        arr = txt.split(\" \");\n    }\n    else if (txt.indexOf(\"\
    ,\") >= 0){\n        arr = txt.split(\",\");\n    }\n    else {\n        let count\
    \ = 0;\n        for (let i = 0; i < txt.length; i++){\n            if (i % 2 !=\
    \ 0){\n                count += 1;\n            }\n        }\n        return count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_zjc7ulr.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_zjc7ulr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.search(\" \") > -1){\n        return\
    \ txt.split(\" \");\n    }else if(txt.search(\",\") > -1){\n        return txt.split(\"\
    ,\");\n    }else{\n        var sum = 0;\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n                sum++;\n\
    \            }\n        }\n        return sum;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpble7jafr.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpble7jafr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var parts = txt.split(/[ ,]+/);\n    if\
    \ (parts.length > 1) {\n        return parts;\n    }\n    parts = txt.split(/[a-z]/);\n\
    \    return parts.length - 1;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmprjj92di3.js:27:10)\n    at Object.<anonymous> (/tmp/tmprjj92di3.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") == -1 && txt.indexOf(\"\
    ,\") == -1){\n        return getOddChars(txt);\n    }\n    else if (txt.indexOf(\"\
    \ \") == -1){\n        return txt.split(\",\");\n    }\n    else{\n        return\
    \ txt.split(\" \");\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4bf3fuj0.js:13\n        return getOddChars(txt);\n        ^\n\n\
    ReferenceError: getOddChars is not defined\n    at split_words (/tmp/tmp4bf3fuj0.js:13:9)\n\
    \    at test (/tmp/tmp4bf3fuj0.js:32:20)\n    at Object.<anonymous> (/tmp/tmp4bf3fuj0.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var array = txt.split(\" \");\n    if(array.length\
    \ === 1){\n        var array2 = txt.split(\",\");\n        if(array2.length ===\
    \ 1){\n            var count = 0;\n            for(var i = 0; i < txt.length;\
    \ i++){\n                if(i % 2 === 0){\n                    if(txt[i] === txt[i].toLowerCase()){\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n            return count;\n        }\n        return array2;\n\
    \    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpalz5pthy.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpalz5pthy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.search(/\\s/) == -1) {\n       \
    \ if (txt.search(',') == -1) {\n            var letters = txt.split('');\n   \
    \         var res = 0;\n            for (var i = 0; i < letters.length; i++) {\n\
    \                if (i % 2 == 0) {\n                    res++;\n             \
    \   }\n            }\n            return res;\n        } else {\n            return\
    \ txt.split(',');\n        }\n    } else {\n        return txt.split(' ');\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpymohbms4.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpymohbms4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var txt_arr = txt.split(/\\s|,/);\n    if\
    \ (txt_arr.length == 1) {\n        var arr = [];\n        for (var i = 0; i <\
    \ txt.length; i++) {\n            if ((txt.charCodeAt(i) - 'a'.charCodeAt()) %\
    \ 2 == 1) {\n                arr.push(txt[i]);\n            }\n        }\n   \
    \     return arr.length;\n    }\n    return txt_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpd5mbtm6f.js:32:10)\n    at Object.<anonymous> (/tmp/tmpd5mbtm6f.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var sp = txt.split(\" \");\n    if(sp.length\
    \ == 1){\n        var sp2 = txt.split(\",\");\n        if(sp2.length == 1){\n\
    \            var count = 0;\n            for(var i = 0; i < txt.length; i++){\n\
    \                if(ord(txt[i]) % 2 != 0){\n                    count++;\n   \
    \             }\n            }\n            return count;\n        }\n       \
    \ else{\n            return sp2;\n        }\n    }\n    else{\n        return\
    \ sp;\n    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7e9chsuv.js:18\n                if(ord(txt[i]) % 2 != 0){\n   \
    \             ^\n\nReferenceError: ord is not defined\n    at split_words (/tmp/tmp7e9chsuv.js:18:17)\n\
    \    at test (/tmp/tmp7e9chsuv.js:43:20)\n    at Object.<anonymous> (/tmp/tmp7e9chsuv.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let result = [];\n    let txtArr = txt.split(\"\
    \");\n    let counter = 0;\n    let foundWhiteSpace = false;\n    let foundComma\
    \ = false;\n    for(let i = 0; i < txtArr.length; i++){\n        if(txtArr[i]\
    \ === \" \"){\n            foundWhiteSpace = true;\n            break;\n     \
    \   }\n    }\n    if(foundWhiteSpace){\n        result = txt.split(\" \");\n \
    \   }else{\n        for(let i = 0; i < txtArr.length; i++){\n            if(txtArr[i]\
    \ === \",\"){\n                foundComma = true;\n                break;\n  \
    \          }\n        }\n        if(foundComma){\n            result = txt.split(\"\
    ,\");\n        }else{\n            for(let i = 0; i < txtArr.length; i++){\n \
    \               if(i % 2 !== 0){\n                    counter++;\n           \
    \     }\n            }\n            result = counter;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpf7zju2x5.js:56:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf7zju2x5.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if(txt.indexOf(\" \") != -1){\n    return\
    \ txt.split(\" \");\n  }\n  else if(txt.indexOf(\",\") != -1){\n    return txt.split(\"\
    ,\");\n  }\n  else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n\
    \      if(i % 2 != 0){\n        if(txt[i] == txt[i].toLowerCase()){\n        \
    \  count++;\n        }\n      }\n    }\n    return count;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let whitespaces = txt.split(\" \");\n  \
    \  let commas = txt.split(\",\");\n    if (whitespaces.length > 1) {\n       \
    \ return whitespaces;\n    }\n    else if (commas.length > 1) {\n        return\
    \ commas;\n    }\n    else {\n        let odd_letters = 0;\n        for (let i\
    \ = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 !== 0) {\n\
    \                odd_letters++;\n            }\n        }\n        return odd_letters;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxquunp0p.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxquunp0p.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // Your code here\n    if (txt.search(/\\\
    s/g) != -1) {\n        return txt.split(/\\s+/g);\n    }\n    else if (txt.search(/\\\
    ,/g) != -1) {\n        return txt.split(/\\,+/g);\n    }\n    else {\n       \
    \ return txt.toLowerCase().split('').filter(function(item, index) {\n        \
    \    return (index + ord(item)) % 2 !== 0;\n        }).length;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiwmu4c9q.js:21\n            return (index + ord(item)) % 2 !==\
    \ 0;\n            ^\n\nReferenceError: ord is not defined\n    at /tmp/tmpiwmu4c9q.js:21:13\n\
    \    at Array.filter (<anonymous>)\n    at split_words (/tmp/tmpiwmu4c9q.js:20:44)\n\
    \    at test (/tmp/tmpiwmu4c9q.js:35:20)\n    at Object.<anonymous> (/tmp/tmpiwmu4c9q.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/)) return txt.split(/\\\
    s/);\n    if (txt.match(/,/)) return txt.split(',');\n    var ans = [];\n    for\
    \ (var i = 0; i < txt.length; i++){\n        if ((i+1) % 2 == 1 && txt[i].match(/[a-z]/))\
    \ ans.push(txt[i]);\n    }\n    return ans.length;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfl37_vhk.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfl37_vhk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.search(\" \") !== -1) {\n      \
    \  txt = txt.split(\" \");\n    } else if (txt.search(\",\") !== -1) {\n     \
    \   txt = txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (ord(txt[i]) % 2 === 1) {\n\
    \                count += 1;\n            }\n        }\n        txt = count;\n\
    \    }\n    return txt;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_bho3pjh.js:19\n            if (ord(txt[i]) % 2 === 1) {\n    \
    \        ^\n\nReferenceError: ord is not defined\n    at split_words (/tmp/tmp_bho3pjh.js:19:13)\n\
    \    at test (/tmp/tmp_bho3pjh.js:36:20)\n    at Object.<anonymous> (/tmp/tmp_bho3pjh.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')){\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        var counter = 0;\n        var lower_case = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        for (var i = 0; i < lower_case.length; i+=2){\n            if (txt.includes(lower_case[i])){\n\
    \                counter++;\n            }\n        }\n        return counter;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpvral6eli.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvral6eli.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let words = txt.split(/[ ,]+/);\n    if\
    \ (words.length == 1) {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if ((txt.charCodeAt(i) - 'a'.charCodeAt(0)) % 2 == 1) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpu7_01nvw.js:32:10)\n    at Object.<anonymous> (/tmp/tmpu7_01nvw.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var text = txt.split(\" \");\n    var first_letter\
    \ = text[0].charCodeAt();\n    var last_letter = text[text.length - 1].charCodeAt();\n\
    \    var answer = (last_letter-first_letter) % 2 != 0 ?\n                last_letter-first_letter\
    \ : \"No odd numbers\";\n    return answer;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n47\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmplmrouj84.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmplmrouj84.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 47,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\t// Check to see if the string contains whitespace\
    \ or commas\n\t// Return the string split by whichever value is present\n\t//\
    \ Else return the number of lower-case letters with odd order in the alphabet\n\
    \tif (txt.indexOf(' ') > -1) {\n\t\treturn txt.split(' ');\n\t} else if (txt.indexOf(',')\
    \ > -1) {\n\t\treturn txt.split(',');\n\t} else {\n\t\tvar count = 0;\n\t\tfor\
    \ (var i = 0; i < txt.length; i++) {\n\t\t\tif (txt.charCodeAt(i) % 2 == 1) {\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8c17e6yg.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8c17e6yg.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    //your code here\n    if(!/\\s+/g.test(txt)){\n\
    \        if(!/\\,+/g.test(txt)){\n            return txt.split('').filter((ele,i)=>{\n\
    \                return i%2===0 && ele.charCodeAt()>=97 && ele.charCodeAt()<=122\n\
    \            }).length\n        }else{\n            return txt.split(',')\n  \
    \      }\n    }else{\n        return txt.split(/\\s+/g)\n    }\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcbx23xqd.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcbx23xqd.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello world!'\n\
    \nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp884i49yx.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp884i49yx.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello world!',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.match(/\\s/g)){\n    return txt.split(/\\\
    s/)\n  } else if (txt.match(/\\,/g)){\n    return txt.split(/\\,/)\n  } else {\n\
    \    var a = 0\n    for (var i = 0; i < txt.length; i += 2){\n      if (txt[i]\
    \ == txt[i].toLowerCase()){\n        a += 1\n      }\n    }\n    return a\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp91kl7rna.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp91kl7rna.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")) {\n        return\
    \ txt.split(\",\");\n    }\n    else {\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n            \
    \    count += 1;\n            }\n        }\n        return count;\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwqbcimaf.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwqbcimaf.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5kdv7fk2.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5kdv7fk2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    //code goes here\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpkawn9056.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkawn9056.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.split(/[,\\s]+/);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmprzboq_af.js:22:10)\n    at Object.<anonymous> (/tmp/tmprzboq_af.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  var myarray=txt.split(\" \");\n  if(myarray.length==1){\n\
    \    myarray=txt.split(\",\");\n    if(myarray.length==1){\n      myarray=new\
    \ Array();\n      for(i=0;i<txt.length;i++){\n        if(txt.charCodeAt(i)>96\
    \ && txt.charCodeAt(i)<123){\n          if(i%2==0){\n            myarray.push(txt.charAt(i));\n\
    \          }\n        }\n      }\n      return myarray.length;\n    }\n    else{\n\
    \      return myarray;\n    }\n  }\n  else{\n    return myarray;\n  }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpk_ufarby.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk_ufarby.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var myArray = [];\n    var total = 0;\n\
    \    if(txt.indexOf(' ') != -1){\n        myArray = txt.split(' ');\n        return\
    \ myArray;\n    }else if(txt.indexOf(',') != -1){\n        myArray = txt.split(',');\n\
    \        return myArray;\n    }else{\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(txt.charCodeAt(i) % 2 != 0){\n                total = total +\
    \ 1;\n            }\n        }\n        return total;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_xysljqg.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_xysljqg.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = [];\n    if (txt.includes(' '))\
    \ {\n        arr = txt.split(' ');\n    } else if (txt.includes(',')) {\n    \
    \    arr = txt.split(',');\n    } else {\n        let count = 0;\n        for\
    \ (let i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 ===\
    \ 1) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpv_4h5tsc.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_4h5tsc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result;\n    var count = 0;\n    if(txt.indexOf(\"\
    \ \") > -1){\n        result = txt.split(\" \");\n    }else if(txt.indexOf(\"\
    ,\") > -1){\n        result = txt.split(\",\");\n    }else{\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count\
    \ += 1;\n            }\n        }\n        result = count;\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp877erx0w.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp877erx0w.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        for(var i = 0; i < txt.length; i++)\
    \ {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                txt.split(txt.charAt(i));\n\
    \            }\n        }\n    }\n}\nsplit_words(\"abcdef\");\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpe66lwkts.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe66lwkts.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = [];\n    if (txt.indexOf(\"\
    \ \") != -1){\n        result = txt.split(\" \");\n    }\n    else if (txt.indexOf(\"\
    ,\") != -1){\n        result = txt.split(\",\");\n    }\n    else {\n        var\
    \ counter = 0;\n        for (var i = 0; i < txt.length; i++){\n            if\
    \ ((txt.charCodeAt(i) % 2) != 0){\n                counter++;\n            }\n\
    \        }\n        result = counter;\n    }\n    return result;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpyt82gjbu.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyt82gjbu.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let res = [];\n    let temp = '';\n    for(let\
    \ i = 0; i < txt.length; i++){\n        if(txt[i] === ' ' || txt[i] === ','){\n\
    \            res.push(temp);\n            temp = '';\n        }\n        else{\n\
    \            temp += txt[i];\n        }\n    }\n    if(temp.length){\n       \
    \ res.push(temp);\n    }\n    if(res.length){\n        return res;\n    }\n  \
    \  else{\n        let oddCount = 0;\n        for(let j = 0; j < txt.length; j++){\n\
    \            if(ord(txt[j]) % 2 == 1){\n                oddCount++;\n        \
    \    }\n        }\n        return oddCount;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp6cg3ox82.js:47:10)\n    at Object.<anonymous> (/tmp/tmp6cg3ox82.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    txt = txt.split(\" \")\n    if (txt.length\
    \ > 1){\n        return txt\n    }\n    else {\n        txt = txt[0].split(\"\
    ,\")\n        if (txt.length > 1){\n            return txt\n        }\n      \
    \  else {\n            let count = 0\n            for (let i = 0; i < txt[0].length;\
    \ i+=2){\n                count += 1\n            }\n            return count\n\
    \        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpznvz0vr6.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpznvz0vr6.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    \"use strict\";\n    if(txt.indexOf(' ')>0){\n\
    \        return txt.split(' ');\n    }\n    else if(txt.indexOf(',')>0){\n   \
    \     return txt.split(',');\n    }\n    else{\n        let count = 0;\n     \
    \   for(let i=0;i<txt.length;i++){\n            if(txt.charCodeAt(i)%2===1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpnks82sm6.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnks82sm6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ')>=0){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',')>=0){\n        return txt.split(',');\n\
    \    }\n    else{\n        var count=0;\n        for(var i=0;i<txt.length;i++){\n\
    \            if(txt.charCodeAt(i)%2!=0){\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpl1mldze7.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl1mldze7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.split(' ');\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmppk05v_qn.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmppk05v_qn.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let ws = txt.split(' ');\n    if (ws.length\
    \ > 1) {\n        return ws;\n    }\n    ws = txt.split(',');\n    if (ws.length\
    \ > 1) {\n        return ws;\n    }\n    let cnt = 0;\n    for (let i = 0; i <\
    \ txt.length; i += 2) {\n        cnt += 1;\n    }\n    return cnt;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp6z8qcdt.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp6z8qcdt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result=[]\n    if(txt.indexOf(\" \"\
    )>-1){\n        result=txt.split(\" \")\n    }else if(txt.indexOf(\",\")>-1){\n\
    \        result=txt.split(\",\")\n    }else{\n        result=0\n        for(var\
    \ i=0;i<txt.length;i++){\n            if(txt.charCodeAt(i)%2!=0){\n          \
    \      result+=1\n            }\n        }\n    }\n    return result\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqyn4arfq.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqyn4arfq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  console.log(txt.split(\" \"));\n    } else if (txt.indexOf(\",\") != -1) {\n\
    \        console.log(txt.split(\",\"));\n    } else {\n        let arr = [],\n\
    \            i = 0;\n        while (i < txt.length) {\n            arr.push(txt[i]);\n\
    \            i++;\n        }\n        let b = 0;\n        for (let key of arr)\
    \ {\n            if (key.charCodeAt(0) % 2 == 1) {\n                b++;\n   \
    \         }\n        }\n        console.log(b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpkf31iql8.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkf31iql8.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''Hello'', ''world!'' ]

    '
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  let result = txt.split(/\\s+|,+/);\n  if (result.length\
    \ === 1){\n    return calc_odd(txt);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp2l3dccys.js:26:10)\n    at Object.<anonymous> (/tmp/tmp2l3dccys.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/g)){\n        return\
    \ txt.split(/\\s+/g);\n    }\n    else if (txt.match(/\\,/g)){\n        return\
    \ txt.split(/\\,+/g);\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpan5l973v.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpan5l973v.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        return txt.length;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppyngjhz2.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppyngjhz2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if(txt.match(/\\s/)){\n    return txt.split(\"\
    \ \");\n  }\n  else if(txt.match(/,/)){\n    return txt.split(\",\");\n  }\n \
    \ else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n      if(ord(txt[i])\
    \ % 2 != 0){\n        count += 1;\n      }\n    }\n    return count;\n  }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp824ugrco.js:21\n      if(ord(txt[i]) % 2 != 0){\n      ^\n\nReferenceError:\
    \ ord is not defined\n    at split_words (/tmp/tmp824ugrco.js:21:7)\n    at test\
    \ (/tmp/tmp824ugrco.js:38:20)\n    at Object.<anonymous> (/tmp/tmp824ugrco.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") !== -1) {\n     \
    \   return txt.split(\" \");\n    } else if (txt.indexOf(\",\") !== -1) {\n  \
    \      return txt.split(\",\");\n    } else {\n        let count = 0;\n      \
    \  for (let i = 0; i < txt.length; i++) {\n            let ord = txt.charCodeAt(i);\n\
    \            if (ord % 2 !== 0) {\n                count++;\n            }\n \
    \       }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4jg00nl9.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4jg00nl9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s+/g)) {\n        return\
    \ txt.split(/\\s+/g);\n    } else if (txt.match(/\\,+/g)) {\n        return txt.split(',');\n\
    \    } else {\n        let result = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                result++;\n\
    \            }\n        }\n        return result;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuzk2s668.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuzk2s668.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result;\n    if(txt.search(/\\s/) >\
    \ -1){\n        result = txt.split(/\\s/);\n    }\n    else if(txt.search(/,/)\
    \ > -1){\n        result = txt.split(/,/);\n    }\n    else{\n        var count\
    \ = 0;\n        for(var i = 0; i < txt.length; i += 2){\n            if(txt[i]\
    \ === txt[i].toLowerCase()){\n                count += 1;\n            }\n   \
    \     }\n        result = count;\n    }\n    return result;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpishs8_0b.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpishs8_0b.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // Your code goes here\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp4z9i60vg.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4z9i60vg.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let splits = txt.split(\" \");\n    if(splits.length\
    \ === 1){\n        let splits2 = txt.split(\",\");\n        if(splits2.length\
    \ === 1){\n            let total = 0;\n            for(let i = 0; i < txt.length;\
    \ i++){\n                let letter = txt[i];\n                let code = txt.charCodeAt(i);\n\
    \                if(code > 96 && code < 123){\n                    if(i % 2 ===\
    \ 0){\n                        total++;\n                    }\n             \
    \   }\n            }\n            return total;\n        }else{\n            return\
    \ splits2;\n        }\n    }else{\n        return splits;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8ba08djz.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ba08djz.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var txt_split = txt.split(/[ ,]/);\n   \
    \ if (txt_split.length > 1) {\n        return txt_split;\n    }\n    else {\n\
    \        var counter = 0;\n        for (var i = 0; i < txt.length; i++) {\n  \
    \          if (i % 2 === 0) {\n                counter += 1;\n            }\n\
    \        }\n        return counter;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpxw5yhdx5.js:34:10)\n    at Object.<anonymous> (/tmp/tmpxw5yhdx5.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  const words = txt.split(/[^\\w]+/g);\n  if\
    \ (words.length > 1) return words;\n  return txt.replace(/[^a-z]/g, '').length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n\
    ]\n    at test (/tmp/tmp0d3xo8i8.js:22:10)\n    at Object.<anonymous> (/tmp/tmp0d3xo8i8.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var strArr = txt.split(/[\\s,]+/);\n   \
    \ if(strArr.length > 1){\n        return strArr;\n    }\n    else{\n        var\
    \ count = 0;\n        for(var i = 0; i < strArr[0].length; i+=2){\n          \
    \  count++;\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp9aa25s90.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9aa25s90.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var splitOnComma = txt.split(',');\n   \
    \ var splitOnSpace = txt.split(' ');\n    var arr = [];\n    if(splitOnComma.length\
    \ == 1 && splitOnSpace.length == 1){\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(txt.charCodeAt(i)%2!=0){\n                arr.push(txt[i]);\n\
    \            }\n        }\n        return arr.length;\n    }else if(splitOnComma.length\
    \ == 1){\n        return splitOnSpace;\n    }else if(splitOnSpace.length == 1){\n\
    \        return splitOnComma;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at test (/tmp/tmp82ksx5va.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp82ksx5va.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpm8h_lzt7.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm8h_lzt7.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.split(' ').length > 1) {\n    return\
    \ txt.split(' ');\n  } else if (txt.split(',').length > 1) {\n    return txt.split(',');\n\
    \  } else {\n    return Object.values(txt).filter(function(x, i) {\n      return\
    \ i % 2 === 0;\n    }).length;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpm3isk_d1.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm3isk_d1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let result = []\n    if (txt.match(/\\s/)){\n\
    \        result = txt.split(\" \")\n    } else if (txt.match(/\\,/)){\n      \
    \  result = txt.split(\",\")\n    } else {\n        let count = 0\n        for\
    \ (let i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 ==\
    \ 1){\n                count++\n            }\n        }\n        result = count\n\
    \    }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpjs6sim3x.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjs6sim3x.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var txt_arr = txt.split(\" \");\n    if\
    \ (txt_arr.length === 1){\n        txt_arr = txt.split(\",\");\n        if (txt_arr.length\
    \ === 1){\n            var sum = 0;\n            for (var i = 0; i < txt.length;\
    \ i++){\n                if (i % 2 === 0){\n                    sum += txt.charCodeAt(i)\
    \ - 97;\n                }\n            }\n            return sum;\n        }\n\
    \    }\n    return txt_arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpma3_bxca.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpma3_bxca.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if(txt.indexOf(' ') > -1){\n    return txt.split('\
    \ ');\n  }else if(txt.indexOf(',') > -1){\n    return txt.split(',');\n  }else{\n\
    \    let sum = 0;\n    for(let i = 0; i < txt.length; i++){\n      if(i % 2 !==\
    \ 0){\n        sum += txt.charCodeAt(i) - 97;\n      }\n    }\n    return sum;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0s0si6r4.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0s0si6r4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') >= 0)\n        return\
    \ txt.split(' ');\n    else if (txt.indexOf(',') >= 0)\n        return txt.split(',');\n\
    \    else {\n        var num = 0;\n        for (var i = 0; i < txt.length; i++)\
    \ {\n            if (i % 2 !== 0 && txt[i] >= 'a' && txt[i] <= 'z')\n        \
    \        num++;\n        }\n        return num;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = [];\n    var words = txt.split(\"\
    \ \");\n    if (words.length > 1){\n        for (var i = 0; i < words.length;\
    \ i++){\n            result.push(words[i]);\n        }\n        return result;\n\
    \    }\n    else {\n        var delimiter = txt.split(\",\");\n        if (delimiter.length\
    \ > 1){\n            for (var i = 0; i < delimiter.length; i++){\n           \
    \     result.push(delimiter[i]);\n            }\n            return result;\n\
    \        }\n        else {\n            return countOdd(txt);\n        }\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphrwfn3lh.js:29\n            return countOdd(txt);\n           \
    \ ^\n\nReferenceError: countOdd is not defined\n    at split_words (/tmp/tmphrwfn3lh.js:29:13)\n\
    \    at test (/tmp/tmphrwfn3lh.js:43:20)\n    at Object.<anonymous> (/tmp/tmphrwfn3lh.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.split(' ').length > 1){\n       \
    \ return txt.split(' ');\n    }\n    else if(txt.split(',').length > 1){\n   \
    \     return txt.split(',');\n    }\n    else{\n        var output = 0;\n    \
    \    for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) %\
    \ 2 != 0){\n                output++;\n            }\n        }\n        return\
    \ output;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1i4k_igh.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1i4k_igh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.includes(' ') ? txt.split(' ')\
    \ : txt.includes(',') ? txt.split(',') : sumOddLowercase(txt);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpes8tnz63.js:12\n    return txt.includes(' ') ? txt.split(' ') :\
    \ txt.includes(',') ? txt.split(',') : sumOddLowercase(txt);\n               \
    \                                                         ^\n\nReferenceError:\
    \ sumOddLowercase is not defined\n    at split_words (/tmp/tmpes8tnz63.js:12:73)\n\
    \    at test (/tmp/tmpes8tnz63.js:24:20)\n    at Object.<anonymous> (/tmp/tmpes8tnz63.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr;\n    if(txt.split(' ').length >\
    \ 1){\n        arr = txt.split(' ');\n    }\n    else if(txt.split(',').length\
    \ > 1){\n        arr = txt.split(',');\n    }\n    else{\n        let count =\
    \ 0;\n        let arr = txt.split('');\n        for(let i = 0; i < arr.length;\
    \ i++){\n            if(i % 2 !== 0){\n                if(arr[i] === arr[i].toLowerCase()){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       arr = count;\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpy_epgebw.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_epgebw.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.split(/[\\s,]/).filter(word =>\
    \ word).length == 1 ? \n        txt.split('').filter((item, i) => /[a-z]/.test(item)\
    \ && i % 2 != 0).length : \n        txt.split(/[\\s,]/).filter(word => word);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmplz4e5k_j.js:24:10)\n    at Object.<anonymous> (/tmp/tmplz4e5k_j.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    //YOUR CODE HERE\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp8x030cxq.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8x030cxq.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if(txt.indexOf(' ') !== -1){\n    return txt.split('\
    \ ');\n  }else if(txt.indexOf(',') !== -1){\n    return txt.split(',');\n  }else{\n\
    \    var arr = txt.split('');\n    var count = 0;\n    for(var i = 0; i < arr.length;\
    \ i++){\n      if(arr[i].charCodeAt(0) % 2 !== 0){\n        count ++;\n      }\n\
    \    }\n    return count;\n  }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmencv8ge.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmencv8ge.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var counter = 0;\n      \
    \  for (var i = 0; i < txt.length; i += 2) {\n            if (txt[i] >= \"a\"\
    \ && txt[i] <= \"z\") {\n                counter++;\n            }\n        }\n\
    \        return counter;\n    }\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpyow6h64_.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyow6h64_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\t//Please write your code here.\n\tvar re =\
    \ /\\s/;\n\tvar re1 = /,/;\n\tvar alphs = /[a-z]/;\n\tif(re.test(txt)){\n\t\t\
    return txt.split(\" \");\n\t}else if(re1.test(txt)){\n\t\treturn txt.split(\"\
    ,\");\n\t}else{\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < txt.length; i++){\n\
    \t\t\tif(alphs.test(txt[i])){\n\t\t\t\tvar index = txt.charCodeAt(i) - 97;\n\t\
    \t\t\tif(index % 2 != 0){\n\t\t\t\t\tcount ++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    return count;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let tmp=[];\n    if(txt.indexOf(' ')==-1\
    \ && txt.indexOf(',')==-1){\n        tmp=0;\n        for(let i=0;i<txt.length;i++){\n\
    \            if(i%2==0){\n                tmp+=1;\n            }\n        }\n\
    \    }else if(txt.indexOf(' ')==-1){\n        tmp=txt.split(',');\n    }else{\n\
    \        tmp=txt.split(' ');\n    }\n    return tmp;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_ksdouj9.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_ksdouj9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  let newArr = [];\n  let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  if(txt.indexOf(' ') >= 0){\n    newArr = txt.split(' ');\n    return newArr;\n\
    \  }\n  else if(txt.indexOf(',') >= 0){\n    newArr = txt.split(',');\n    return\
    \ newArr;\n  }\n  else{\n    let sum = 0;\n    for(let i = 0; i < txt.length;\
    \ i++){\n      let z = txt[i];\n      let index = letters.indexOf(z);\n      if(index\
    \ % 2 === 1){\n        sum += 1;\n      }\n    }\n    return sum;\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = txt.match(/[a-z]/gi);\n   \
    \ if (result == null){\n        return 0;\n    }\n    return result.length;\n\
    }\n\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp6nh2weto.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6nh2weto.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return\
    \ txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\"\
    ,\");\n    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpbpecp37v.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbpecp37v.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/g) === null){\n      \
    \  if(txt.match(/,/g) === null){\n            var lowerCaseLetters = txt.toLowerCase().split('');\n\
    \            var oddLetters = lowerCaseLetters.filter(function(letter, index){\n\
    \                return index % 2 === 0;\n            });\n            return\
    \ oddLetters.length;\n        }\n        else {\n            return txt.split(',');\n\
    \        }\n    }\n    else {\n        return txt.split(' ');\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmps65m9me6.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps65m9me6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') >= 0){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') >= 0){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var letterOrder = 0;\n        var\
    \ odd = 0;\n        for(var i = 0; i < txt.length; i++){\n            letterOrder\
    \ = txt.charCodeAt(i) - 97;\n            if(letterOrder % 2 != 0){\n         \
    \       odd++;\n            }\n        }\n        return odd;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_9tpyuz0.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9tpyuz0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let odd_let = 0;\n        for(let i=0; i<txt.length;\
    \ i++){\n            if(txt.charCodeAt(i)%2!=0){\n                odd_let += 1;\n\
    \            }\n        }\n        return odd_let;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpj42ml3o_.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj42ml3o_.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.split(' ').length > 1) {\n     \
    \   return txt.split(' ');\n    }\n    else if (txt.split(',').length > 1) {\n\
    \        return txt.split(',');\n    }\n    else {\n        var counter = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 != 0) {\n\
    \                counter++;\n            }\n        }\n        return counter;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpaccj4e2b.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaccj4e2b.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(typeof txt !== 'string'){\n        return\
    \ null;\n    }\n    if(txt.indexOf(\" \") > -1){\n        return txt.split(\"\
    \ \");\n    }\n    if(txt.indexOf(\",\") > -1){\n        return txt.split(\",\"\
    );\n    }\n    var a = \"abcdefghijklmnopqrstuvwxyz\";\n    var count = 0;\n \
    \   for(var i = 0; i < txt.length; i++){\n        if(a.indexOf(txt[i]) % 2 !=\
    \ 0){\n            count ++;\n        }\n    }\n    return count;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpop9jkw7w.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpop9jkw7w.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else {\n        let count = 0;\n        let str\
    \ = txt.toLowerCase();\n        for (let i = 0; i < str.length; i++) {\n     \
    \       if (str.charCodeAt(i) % 2 !== 0) {\n                count += 1;\n    \
    \        }\n        }\n        return count;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4xxoyjdv.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4xxoyjdv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\tif (txt.indexOf(\" \") == -1){\n\t\tif (txt.indexOf(\"\
    ,\") == -1){\n\t\t\tvar sum = 0;\n\t\t\tfor (var i = 0; i < txt.length; i++){\n\
    \t\t\t\tif (txt.charCodeAt(i) % 2 != 0){\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\treturn sum;\n\t\t} else {\n\t\t\treturn txt.split(\",\");\n\t\t}\n\t\
    } else {\n\t\treturn txt.split(\" \");\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpy81kb512.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy81kb512.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var txtArr = txt.split(/[,\\s]/);\n    var\
    \ arr = [], txt1, txt2, txt3;\n    var counter = 0;\n    for(var i = 0; i < txtArr.length;\
    \ i++){\n        if(txtArr[i] !== \"\"){\n            arr.push(txtArr[i]);\n \
    \       }\n    }\n    if(arr.length === 1){\n        if(arr[0].length === txt.length){\n\
    \            txt1 = txt.toLowerCase();\n            for(var j = 0; j < txt1.length;\
    \ j++){\n                if(j % 2 === 0){\n                    counter++;\n  \
    \              }\n            }\n            return counter;\n        }\n    \
    \    else{\n            return arr;\n        }\n    }\n    else{\n        return\
    \ arr;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpsmbt2lth.js:46:10)\n    at Object.<anonymous> (/tmp/tmpsmbt2lth.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let array = txt.split(\" \");\n    if (array.length\
    \ == 1){\n        array = txt.split(\",\");\n        if (array.length == 1){\n\
    \            let count = 0;\n            for (let i = 0; i < txt.length; i++){\n\
    \                if (i % 2 != 0){\n                    count++;\n            \
    \    }\n            }\n            return count;\n        }\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp98l_d0iz.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp98l_d0iz.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var cnt = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if ((txt.charCodeAt(i) - 97)\
    \ % 2 != 0) {\n                cnt++;\n            }\n        }\n        return\
    \ cnt;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_7r_1pvt.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_7r_1pvt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.split(\" \").length>1){\n       \
    \ return txt.split(\" \");\n    }\n    else if(txt.split(\",\").length>1){\n \
    \       return txt.split(\",\");\n    }\n    else{\n        let count=0;\n   \
    \     for(let i=0;i<txt.length;i++){\n            if(i%2==0){\n              \
    \  count++;\n            }\n        }\n        return count;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphnjrw6j0.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphnjrw6j0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // TODO your code here\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmptnp3exv4.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmptnp3exv4.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.split(' ').length > 1) {\n     \
    \   return txt.split(' ');\n    }\n    else if (txt.split(',').length > 1) {\n\
    \        return txt.split(',');\n    }\n    else {\n        let count = 0;\n \
    \       for (let i = 0; i < txt.length; i += 2) {\n            count++;\n    \
    \    }\n        return count;\n    }\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4o4opi0a.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4o4opi0a.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    } else if (txt.includes(\",\")){\n        return txt.split(\"\
    ,\");\n    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (txt.charCodeAt(i) % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpup807tt9.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpup807tt9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (/\\s/.test(txt)) {\n        return txt.split(/\\\
    s/);\n    } else if (/\\,/.test(txt)) {\n        return txt.split(/\\,/);\n  \
    \  } else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++)\
    \ {\n            if ((txt.charCodeAt(i) - 97) % 2 === 1) {\n                count\
    \ += 1;\n            }\n        }\n        return count;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split('');\n    var arrSplit\
    \ = [];\n    var countOdd = 0;\n    var countEven = 0;\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] === ' '){\n            arrSplit.push(txt.substring(0,\
    \ i));\n            arrSplit.push(txt.substring(i+1, txt.length));\n         \
    \   break;\n        }\n        else if(arr[i] === ','){\n            arrSplit.push(txt.substring(0,\
    \ i));\n            arrSplit.push(txt.substring(i+1, txt.length));\n         \
    \   break;\n        }\n        else{\n            if(arr[i].charCodeAt(0) >= 97\
    \ && arr[i].charCodeAt(0) <= 122){\n                if(arr[i].charCodeAt(0) %\
    \ 2 === 0){\n                    countEven++;\n                }\n           \
    \     else{\n                    countOdd++;\n                }\n            }\n\
    \        }\n    }\n    if(arrSplit.length === 0){\n        if(countEven > countOdd){\n\
    \            return countEven;\n        }\n        else{\n            return countOdd;\n\
    \        }\n    }\n    else{\n        return arrSplit;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'Hello,world !'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello,Hello,world',\n\
    \  '!'\n]\n    at test (/tmp/tmpn29z8nvl.js:59:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn29z8nvl.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello,world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var x = '';\n    var y = '';\n    var z\
    \ = '';\n    var arr = [];\n    if(txt.indexOf(' ') >= 0){\n        x = txt.split('\
    \ ');\n        return x;\n    }\n    else if(txt.indexOf(',') >= 0){\n       \
    \ y = txt.split(',');\n        return y;\n    }\n    else{\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n  \
    \              z += txt.charAt(i);\n            }\n        }\n        return z.length;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpb1mwfy0o.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb1mwfy0o.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.search(/\\W/) != -1) {\n        var\
    \ str1 = txt.split(/\\W/);\n        return str1;\n    }\n    else {\n        return\
    \ txt.length;\n    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n\
    ]\n    at test (/tmp/tmpak0b31uf.js:27:10)\n    at Object.<anonymous> (/tmp/tmpak0b31uf.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/g)){\n        return txt.split(/\\\
    s/g);\n    }\n    else if(txt.match(/\\,/g)){\n        return txt.split(/\\,/g);\n\
    \    }\n    else{\n        return txt.match(/[a-z]/g).length;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp52qtqrce.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp52qtqrce.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(!txt.includes(' ')){\n        if(!txt.includes(',')){\n\
    \            counter = 0;\n            for(var i = 0; i < txt.length; i++){\n\
    \                if(ord(txt[i]) % 2 == 1){\n                    counter++;\n \
    \               }\n            }\n            return counter;\n        }\n   \
    \     else{\n            return txt.split(',');\n        }\n    }\n    else{\n\
    \        return txt.split(' ');\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_r26lr8z.js:16\n                if(ord(txt[i]) % 2 == 1){\n   \
    \             ^\n\nReferenceError: ord is not defined\n    at split_words (/tmp/tmp_r26lr8z.js:16:17)\n\
    \    at test (/tmp/tmp_r26lr8z.js:40:20)\n    at Object.<anonymous> (/tmp/tmp_r26lr8z.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  var a=[];\n  var b=[];\n  var c=0;\n  if (txt.includes(\"\
    ,\")){\n    a=txt.split(\",\");\n    return a;\n  }\n  else if (txt.includes(\"\
    \ \")){\n    b=txt.split(\" \");\n    return b;\n  }\n  else {\n    for (i=0;i<txt.length;i++){\n\
    \      if (i%2 ==0){\n        c++;\n      }\n    }\n    return c;\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmpzmuta4wb.js:40:10)\n    at Object.<anonymous> (/tmp/tmpzmuta4wb.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/[A-Za-z]/g) != null) {\n\
    \        if (txt.match(/\\s/g) != null) {\n            var array = txt.split(\"\
    \ \");\n            return array;\n        }\n        else if (txt.match(/\\,/g)\
    \ != null) {\n            var array = txt.split(\",\");\n            return array;\n\
    \        }\n        else {\n            var odd_num = 0;\n            for (var\
    \ i = 0; i < txt.length; i++) {\n                if (txt.charCodeAt(i) % 2 !=\
    \ 0) {\n                    odd_num++;\n                }\n            }\n   \
    \         return odd_num;\n        }\n    }\n    else {\n        return txt;\n\
    \    }\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpnvjn1wys.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnvjn1wys.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let newtxt = txt.split('');\n    let count\
    \ = 0;\n    let newarr = [];\n    let newword = newtxt.join('').toLowerCase();\n\
    \    if(txt.indexOf(' ') === -1 && txt.indexOf(',') === -1){\n        for(let\
    \ i = 0; i < newword.length; i++){\n            if(ord(newword[i]) % 2 !== 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    if(txt.indexOf(' ') === -1){\n        newarr = txt.split(',');\n  \
    \      return newarr;\n    }\n    if(txt.indexOf(',') === -1){\n        newarr\
    \ = txt.split(' ');\n        return newarr;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at test (/tmp/tmpt3v1mm2o.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt3v1mm2o.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return isNaN(txt) ? txt.replace(/,/g, '\
    \ ').split(' ') : get_odd_letters(txt);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpiv15aqbd.js:22:10)\n    at Object.<anonymous> (/tmp/tmpiv15aqbd.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/g)){\n        return\
    \ txt.split(/\\s/g);\n    }\n    else if (txt.match(/\\,/g)){\n        return\
    \ txt.split(/\\,/g);\n    }\n    else{\n        var res = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 != 0){\n\
    \                res++;\n            }\n        }\n        return res;\n    }\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpbfeq69ij.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbfeq69ij.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977033
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }else if(txt.includes(\",\")){\n        return txt.split(\"\
    ,\");\n    }else{\n        var count = 0;\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 === 0){\n                if(txt[i] === txt[i].toLowerCase()){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;\n    }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfl767bui.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfl767bui.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var strArr = txt.split(\" \");\n    if(strArr.length\
    \ === 1){\n        strArr = txt.split(\",\");\n        if(strArr.length === 1){\n\
    \            var result = 0;\n            for(var i = 0; i < txt.length; i++){\n\
    \                if(txt.charCodeAt(i)%2!==0){\n                    result++;\n\
    \                }\n            }\n            return result;\n        }\n   \
    \ }\n    return strArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpd5wgxqqo.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5wgxqqo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var answer = [];\n    var words = [];\n\
    \    if(txt.includes(',')){\n        answer = txt.split(',');\n    }\n    else\
    \ if(txt.includes(' ')){\n        answer = txt.split(' ');\n    }\n    else{\n\
    \        var odd = 0;\n        for(var i = 0; i < txt.length; i++){\n        \
    \    if(i % 2 == 0){\n                odd++;\n            }\n        }\n     \
    \   answer = odd;\n    }\n    return answer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello world',\n\
    \  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n]\n    at\
    \ test (/tmp/tmprw877uyi.js:39:10)\n    at Object.<anonymous> (/tmp/tmprw877uyi.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello world',\
    \ '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var whitespace = [];\n\
    \    var commas = [];\n    var oddChars = 0;\n    txt = txt.toLowerCase();\n \
    \   for(var i = 0; i < txt.length; i++){\n        if(txt[i] == \" \"){\n     \
    \       whitespace.push(i);\n        }\n        if(txt[i] == \",\"){\n       \
    \     commas.push(i);\n        }\n        if(i % 2 == 1){\n            oddChars++;\n\
    \        }\n    }\n    if(whitespace.length > 0){\n        for(var i = 0; i <\
    \ whitespace.length; i++){\n            if(i == 0){\n                arr.push(txt.slice(0,\
    \ whitespace[i]));\n            }\n            else{\n                arr.push(txt.slice(whitespace[i-1]\
    \ + 1, whitespace[i]));\n            }\n        }\n        arr.push(txt.slice(whitespace[whitespace.length\
    \ - 1] + 1));\n        return arr;\n    }\n    else if(commas.length > 0){\n \
    \       for(var i = 0; i < commas.length; i++){\n            if(i == 0){\n   \
    \             arr.push(txt.slice(0, commas[i]));\n            }\n            else{\n\
    \                arr.push(txt.slice(commas[i-1] + 1, commas[i]));\n          \
    \  }\n        }\n        arr.push(txt.slice(commas[commas.length - 1] + 1));\n\
    \        return arr;\n    }\n    else{\n        return oddChars;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n\
    \  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n\
    \    at test (/tmp/tmp5whgfq6z.js:62:10)\n    at Object.<anonymous> (/tmp/tmp5whgfq6z.js:72:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello',\
    \ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        return txt.length;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpara_veth.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpara_veth.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n   var arr=txt.split(\" \");\n   if(arr.length==1){\n\
    \       var arr1=txt.split(\",\");\n       if(arr1.length==1){\n           var\
    \ str1=0;\n           for(var i=0;i<txt.length;i++){\n               if(txt.charCodeAt(i)%2!=0){\n\
    \                   str1+=1;\n               }\n           }\n           return\
    \ str1;\n       }\n       else{\n           return arr1;\n       }\n   }\n   else{\n\
    \       return arr;\n   }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5ob8r3ty.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5ob8r3ty.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.split(' ').length > 1) {\n     \
    \   var list = txt.split(' ');\n        return list;\n    }\n    else if (txt.split(',').length\
    \ > 1) {\n        var list = txt.split(',');\n        return list;\n    }\n  \
    \  else {\n        var count = 0;\n        for (var i = 0; i < txt.length; i++){\n\
    \            if ((txt.charCodeAt(i) - 97) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp7icilyop.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7icilyop.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let result = [];\n    if(txt.includes(\"\
    \ \")){\n        result = txt.split(\" \");\n    }else if(txt.includes(\",\")){\n\
    \        result = txt.split(\",\");\n    }else {\n        let count = 0;\n   \
    \     for(let i = 0; i < txt.length; i += 2){\n            if(txt[i] != txt[i].toUpperCase()){\n\
    \                count += 1;\n            }\n        }\n        result = count;\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpjmzmvt7x.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjmzmvt7x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var t = txt.split(\" \");\n    if(t.length\
    \ > 1){\n        return t;\n    }\n    else{\n        var t = txt.split(\",\"\
    );\n        if(t.length > 1){\n            return t;\n        }\n        else{\n\
    \            return letter_odd(txt);\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpugv4tokd.js:22\n            return letter_odd(txt);\n         \
    \   ^\n\nReferenceError: letter_odd is not defined\n    at split_words (/tmp/tmpugv4tokd.js:22:13)\n\
    \    at test (/tmp/tmpugv4tokd.js:36:20)\n    at Object.<anonymous> (/tmp/tmpugv4tokd.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if(txt.split(\" \").length > 1){\n    return\
    \ txt.split(\" \");\n  }else if(txt.split(\",\").length > 1){\n    return txt.split(\"\
    ,\");\n  }else{\n    var count = 0;\n    for(var i = 0; i < txt.length; i++){\n\
    \      if(txt.charCodeAt(i) % 2 != 0){\n        count += 1;\n      }\n    }\n\
    \    return count;\n  }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpeflb5197.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeflb5197.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  if (txt.match(/\\s/g)){\n    return txt.split(/\\\
    s/g);\n  } else if (txt.match(/\\,/g)){\n    return txt.split(/\\,/g);\n  } else\
    \ {\n    var cnt = 0;\n    for (var i = 0; i < txt.length; i++){\n      if ((txt.charCodeAt(i)\
    \ - 97) % 2 != 0){\n        cnt++;\n      }\n    }\n    return cnt;\n  }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp3l0wtdho.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3l0wtdho.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\tif (/[, ]/.test(txt)) {\n\t\treturn txt.split(/[,\
    \ ]/);\n\t} else {\n\t\tvar count = 0;\n\t\tfor (var i = 0; i < txt.length; i++)\
    \ {\n\t\t\tif (txt.charCodeAt(i) % 2 !== 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\treturn count;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmpz7v4w9rn.js:32:10)\n    at Object.<anonymous> (/tmp/tmpz7v4w9rn.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\tif (txt.indexOf(\" \") > -1) {\n\t\treturn\
    \ txt.split(\" \");\n\t} else if (txt.indexOf(\",\") > -1) {\n\t\treturn txt.split(\"\
    ,\");\n\t} else {\n\t\tvar count = 0;\n\t\tfor (var i = 0; i < txt.length; i +=\
    \ 2) {\n\t\t\tif (txt[i] == txt[i].toLowerCase()) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t\treturn count;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpd0suiveg.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd0suiveg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return txt.match(/[a-z]+/gi).map(i => i.split(',')).join('').length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpshehma01.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpshehma01.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.search(/\\s/g) == -1){\n        if(txt.search(/\\\
    ,/g) == -1){\n            txt = txt.split('')\n            let sum = 0\n     \
    \       txt.forEach(e => {\n                if(e.charCodeAt(0) % 2 != 0){\n  \
    \                  sum += 1\n                }\n            })\n            return\
    \ sum\n        }\n        return txt.split(',')\n    }\n    return txt.split('\
    \ ')\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0gvsc7n6.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0gvsc7n6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n  // if (txt.match(/ /g) !== null) {\n  // \
    \  var res = txt.split(\" \");\n  //   return res;\n  // } else if (txt.match(/,/g)\
    \ !== null) {\n  //   var res = txt.split(\",\");\n  //   return res;\n  // }\
    \ else {\n  //   var count = 0;\n  //   var odd = \"\";\n  //   var ord = {\n\
    \  //     a:0, b:1, c:2, d:3, e:4, f:5, g:6, h:7, i:8, j:9, k:10, l:11, m:12,\
    \ n:13, o:14, p:15, q:16, r:17, s:18, t:19, u:20, v:21, w:22, x:23, y:24, z:25\n\
    \  //   };\n  //   for (var key in ord) {\n  //     if (ord[key] % 2 === 1) {\n\
    \  //       odd += key;\n  //     }\n  //   }\n  //   for (var i = 0; i < txt.length;\
    \ i++) {\n  //     if (odd.indexOf(txt[i]) !== -1) {\n  //       count++;\n  //\
    \     }\n  //   }\n  //   return count;\n  // }\n  if (txt.match(/ /g) !== null)\
    \ {\n    return txt.split(\" \");\n  } else if (txt.match(/,/g) !== null) {\n\
    \    return txt.split(\",\");\n  } else {\n    var count = 0;\n    var ord = {\n\
    \      a:0, b:1, c:2, d:3, e:4, f:5, g:6, h:7, i:8, j:9, k:10, l:11, m:12, n:13,\
    \ o:14, p:15, q:16, r:17, s:18, t:19, u:20, v:21, w:22, x:23, y\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt_12y1w2.js:44\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    //YOUR CODE HERE\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpn2vcazzp.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2vcazzp.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var newTxt = txt.split('')\n    var alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    var position = 0\n    var arr = []\n   \
    \ var count = 0\n    var oddCount = 0\n    var evenCount = 0\n    for(var i =\
    \ 0; i < newTxt.length; i++){\n        var letter = newTxt[i]\n        var currentIndex\
    \ = alphabet.indexOf(letter)\n        if(currentIndex % 2 === 0){\n          \
    \  evenCount++\n        }else{\n            oddCount++\n        }\n    }\n   \
    \ if(newTxt.indexOf(' ') >= 0){\n        arr = txt.split(' ')\n        return\
    \ arr\n    }else if(newTxt.indexOf(',') >= 0){\n        arr = txt.split(',')\n\
    \        return arr\n    }else{\n        return evenCount\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0ss1zu7_.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ss1zu7_.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var res = txt.split(/[\\s,]+/);\n    if\
    \ (res.length === 1){\n        var sum = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if ((txt.charCodeAt(i) - 97) % 2 === 1){\n              \
    \  sum += 1;\n            }\n        }\n        return sum;\n    }\n    return\
    \ res;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n\
    \  'world',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world,!'\n\
    ]\n    at test (/tmp/tmp_g05y2k9.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_g05y2k9.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/g)){\n        return\
    \ txt.split(/\\s+/g);\n    }\n    else if (txt.match(/\\,/g)){\n        return\
    \ txt.split(/\\,+/g);\n    }\n    else {\n        return txt.match(/[a-z]/g).length;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp10kdq4ei.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp10kdq4ei.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr=[];\n    var str='';\n    if(txt.indexOf('\
    \ ')>=0){\n        for(var i=0;i<txt.length;i++){\n            if(txt[i]==' '){\n\
    \                arr.push(str);\n                str='';\n            }\n    \
    \        else{\n                str+=txt[i];\n            }\n        }\n     \
    \   if(str.length>0){\n            arr.push(str);\n        }\n        return arr;\n\
    \    }\n    else if(txt.indexOf(',')>=0){\n        for(var i=0;i<txt.length;i++){\n\
    \            if(txt[i]==','){\n                arr.push(str);\n              \
    \  str='';\n            }\n            else{\n                str+=txt[i];\n \
    \           }\n        }\n        if(str.length>0){\n            arr.push(str);\n\
    \        }\n        return arr;\n    }\n    else{\n        var count=0;\n    \
    \    for(var i=0;i<txt.length;i++){\n            if(txt.charCodeAt(i)%2!=0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphcr8c11p.js:64:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphcr8c11p.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let words;\n    if (/\\s/.test(txt)) {\n\
    \        words = txt.split(/\\s/);\n    } else if (/,/.test(txt)) {\n        words\
    \ = txt.split(\",\");\n    } else {\n        words = [];\n        for (let i =\
    \ 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n \
    \               words.push(txt[i]);\n            }\n        }\n    }\n    return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'c',\n\
    \  'e'\n]\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmppr65qvyk.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmppr65qvyk.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'c',\
    \ 'e' ],\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var res = []\n    if(txt.indexOf(' ') ==\
    \ -1){\n        if(txt.indexOf(',') == -1){\n            var count = 0\n     \
    \       for(var i = 0; i < txt.length; i++){\n                if(ord(txt[i]) %\
    \ 2 == 1){\n                    count++\n                }\n            }\n  \
    \          return count\n        }\n        else{\n            res = txt.split(',')\n\
    \        }\n    }\n    else{\n        res = txt.split(' ')\n    }\n    return\
    \ res\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppkqvzngz.js:17\n                if(ord(txt[i]) % 2 == 1){\n   \
    \             ^\n\nReferenceError: ord is not defined\n    at split_words (/tmp/tmppkqvzngz.js:17:17)\n\
    \    at test (/tmp/tmppkqvzngz.js:42:20)\n    at Object.<anonymous> (/tmp/tmppkqvzngz.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var odd\
    \ = 0;\n    if (words.length > 1){\n        return words;\n    }\n    else {\n\
    \        var symbols = txt.split(\",\");\n        if (symbols.length > 1){\n \
    \           return symbols;\n        }\n        else {\n            for (var i\
    \ = 0; i < txt.length; i++){\n                if (i % 2 == 0){\n             \
    \       odd += 1;\n                }\n            }\n            return odd;\n\
    \        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpv8k_tou2.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8k_tou2.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    // Your Code Here\n    var arr = txt.split(\"\
    \ \");\n    if(arr.length == 1){\n        if(txt.includes(\",\")){\n         \
    \   return txt.split(\",\");\n        }\n        if(/^[a-z]+$/.test(txt)){\n \
    \           count = 0;\n            for(var i = 0; i < txt.length; i++){\n   \
    \             if(i % 2 == 0 && txt[i] != 'z'){\n                    if(txt[i].charCodeAt(0)\
    \ > txt[i+1].charCodeAt(0)){\n                        count++;\n             \
    \       }\n                }\n            }\n            return count;\n     \
    \   }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpifc1eft5.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpifc1eft5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    return \"unfinished\";\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'unfinished'\n\
    \nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpp522vyv5.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp522vyv5.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'unfinished',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var a = [];\n    if (txt.indexOf(' ') !=\
    \ -1){\n        return txt.split(' ');\n    }\n    else if (txt.indexOf(',') !=\
    \ -1){\n        return txt.split(',');\n    }\n    else {\n        for (var i\
    \ = 0; i < txt.length; i+=2){\n            a.push(txt[i]);\n        }\n      \
    \  return a.length;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcsvhpfqt.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcsvhpfqt.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var arr = txt.split('');\n      \
    \  var count = 0;\n        for(var i = 0; i < arr.length; i++){\n            if(arr[i].charCodeAt(0)%2\
    \ != 0){\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf9kc4m7s.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf9kc4m7s.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var whiteSpace = false;\n    var comma =\
    \ false;\n    var array = [];\n    for(var i = 0; i < txt.length; i++){\n    \
    \    if(txt[i] === \" \"){\n            whiteSpace = true;\n        }\n      \
    \  if(txt[i] === \",\"){\n            comma = true;\n        }\n    }\n    if(whiteSpace){\n\
    \        array = txt.split(\" \");\n    }else if(comma){\n        array = txt.split(\"\
    ,\");\n    }else{\n        var count = 0;\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n                count +=\
    \ 1;\n            }\n        }\n        array = count;\n    }\n    return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1fmzw2ff.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1fmzw2ff.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n\tif(txt.includes(' ')){\n\t\treturn txt.split('\
    \ ');\n\t}else if(txt.includes(',')){\n\t\treturn txt.split(',');\n\t}else{\n\t\
    \treturn txt.length;\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpo0uhqsyy.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo0uhqsyy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
- exit_code: 0
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                if(txt[i]\
    \ == txt[i].toLowerCase()){\n                    count++;\n                }\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977034
- exit_code: 1
  program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/g)){\n        return txt.split(/\\\
    s/g);\n    }else if(txt.match(/\\,/g)){\n        return txt.split(/\\,/g);\n \
    \   }else{\n        return txt.replace(/[aeiou]/g, '').length;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp09oks67z.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp09oks67z.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977034
