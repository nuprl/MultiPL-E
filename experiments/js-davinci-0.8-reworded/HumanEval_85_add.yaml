name: HumanEval_85_add
language: js
prompt: "//Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
  \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
  \ 4, 6, 8]),12);\n}\n\ntest();"
completions: ["    var add = 0;\n    for(var i = 0; i < lst.length; i++) {\n     \
    \   if(lst[i] % 2 == 0 && i % 2 != 0) {\n            add += lst[i];\n        }\n\
    \    }\n    return add;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  return lst.filter((x,i) => (i+1)%2===0\
    \ && x%2===0).reduce((x,y) => x+y,0);\n}\n", "    let res = 0;\n    for(let i\
    \ = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 == 0){\n            res\
    \ += lst[i];\n        }\n    }\n    return res;\n}\n", "  let sum = 0;\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n   \
    \   sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    sum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n \
    \           sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    var\
    \ sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 != 0 &&\
    \ lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(lst[i] % 2 == 0 && i % 2 != 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n   \
    \   sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    return lst.filter((e,\
    \ i) => e % 2 === 0 && i % 2 != 0).reduce((a, e) => a + e, 0);\n}", "  let sum\
    \ = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 1 && lst[i] %\
    \ 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "    let sum\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i]\
    \ % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    var result = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 == 0 && i % 2 != 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "  var odd = 0;\n  for(var i = 0;\
    \ i < lst.length; i++){\n    if(i % 2 == 1 && lst[i] % 2 == 0){\n      odd +=\
    \ lst[i];\n    }\n  }\n  return odd;\n}\n", "    var sum = 0;\n    for(var i =\
    \ 0; i < lst.length; i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    var sum\
    \ = 0;\n    for(var i = 1; i < lst.length; i+=2){\n        if(lst[i] % 2 == 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}", "    var x\
    \ = 0;\n    for(i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 0 && i\
    \ % 2 != 0){\n            x += lst[i];\n        }\n    }\n    return x;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
