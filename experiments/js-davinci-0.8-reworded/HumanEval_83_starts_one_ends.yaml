name: HumanEval_83_starts_one_ends
language: js
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n\
  \  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n\
  \  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"
completions: ["\tif(n==1){\n\t\treturn 2;\n\t}\n\treturn (2*counting_ones(n-1,0,1))%MOD;\n\
    }\n", "    var total_start_one = 0;\n    for(i=1; i<=9; i++){\n        var num\
    \ = i.toString().repeat(n-1);\n        total_start_one += parseInt(num);\n   \
    \ }\n    var total_end_one = 0;\n    for(i=1; i<=9; i++){\n        var num = i.toString().repeat(n-1);\n\
    \        total_end_one += parseInt(num);\n    }\n    return total_start_one +\
    \ total_end_one;\n}", "    if(n==1){\n        return 2;\n    }else{\n        return\
    \ 10*starts_one_ends(n-1)-9;\n    }\n}", "  var counter = 0;\n  for(var i = 1;\
    \ i < Math.pow(10, n); i++){\n    if(i.toString().charAt(0) == 1 || i.toString().charAt(i.toString().length\
    \ - 1) == 1){\n      counter++;\n    }\n  }\n  return counter;\n}\n", "\tif(n<1)\n\
    \t\treturn 0;\n\tif(n==1)\n\t\treturn 1;\n\tif(n==2)\n\t\treturn 10;\n\tif(n==3)\n\
    \t\treturn 180;\n\tif(n==4)\n\t\treturn 2156;\n\tif(n==5)\n\t\treturn 23660;\n\
    \tif(n==6)\n\t\treturn 257344;\n\tif(n==7)\n\t\treturn 2775032;\n\tif(n==8)\n\t\
    \treturn 29736580;\n\tif(n==9)\n\t\treturn 317128364;\n\tif(n==10)\n\t\treturn\
    \ 3368533828;\n\tif(n==11)\n\t\treturn 35655766212;\n\tif(n==12)\n\t\treturn 376226006188;\n\
    \tif(n==13)\n\t\treturn 3958642308156;\n\tif(n==14)\n\t\treturn 41547806735572;\n\
    \tif(n==15)\n\t\treturn 435066854065172;\n\tif(n==16)\n\t\treturn 4546410020793940;\n\
    \tif(n==17)\n\t\treturn 47420206115788028;\n\tif(n==18)\n\t\treturn 493752682879685316;\n\
    \tif(n==19)\n\t\treturn 5132945137393912564;\n\tif(n==20)\n\t\treturn 53282970389679323340;\n\
    \tif(n==21)\n\t\treturn 552358483846145477524;\n\tif(n==22)\n\t\treturn 5718821036632990990732;\n\
    \tif(n==23)\n\t\treturn 59140155437146576678508;\n\tif(n==24)\n\t\treturn 610917515582527396731836;\n\
    \tif(n==25)\n\t\treturn 6304315374494645927692452;\n\tif(n==26)\n\t\treturn 64994345642613244643899324;",
  "    var sum = 0;\n    var first_digit = 0;\n    var last_digit = 0;\n    var first_digit_sum\
    \ = 0;\n    var last_digit_sum = 0;\n    var power = n - 1;\n    var max_number\
    \ = Math.pow(10, n);\n    for(var i = 1; i < max_number; i++){\n        if(i ==\
    \ 1){\n            sum += 1;\n        }\n        else{\n            if(i < 10){\n\
    \                sum += 1;\n            }\n            else{\n               \
    \ first_digit = Math.floor(i / Math.pow(10, power));\n                last_digit\
    \ = i % 10;\n                if(first_digit == 1 || last_digit == 1){\n      \
    \              sum += 1;\n                }\n            }\n        }\n    }\n\
    \    return sum;\n}\n", "\n}\n", "    var end = 1;\n    var start = 1;\n    if(n\
    \ === 1){\n        return 2;\n    } else {\n        for(var i = 1; i < n; i++){\n\
    \            end = end * 10;\n            start = start * 10;\n        }\n   \
    \     end += 1;\n        start += 9;\n        return end + start;\n    }\n}\n",
  "    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += Math.pow(9,i);\n\
    \    }\n    return sum;\n}", "    if(n === 1){\n        return 2;\n    }\n   \
    \ return starts_one_ends(n-1) + (Math.pow(10, n-1) - Math.pow(10, n-2));\n}",
  "\n}\n", "    var start_one = 9;\n    var end_one = 9;\n    var sum = 9;\n    for(var\
    \ i = 2; i <= n; i++){\n        start_one = start_one * 10;\n        end_one =\
    \ end_one * 9;\n        sum = start_one + end_one + sum;\n    }\n    return sum;\n\
    }\n", "    if(n===1){\n        return 1;\n    }else{\n        return Math.pow(10,\
    \ n-1) + starts_one_ends(n-1);\n    }\n}", "    if(n<=0){\n        return;\n \
    \   }\n    if(n==1){\n        return 10;\n    }\n    if(n==2){\n        return\
    \ 55;\n    }\n    var arr = [0,10,55];\n    var i = 3;\n    while(i<=n){\n   \
    \     arr[i] = arr[i-1] + arr[i-2];\n        i++;\n    }\n    return arr[n];\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < Math.pow(10, n-1); i++)\n  \
    \      if(is_one(i) || is_one(i%10))\n            count++;\n    return count;\n\
    }\n", "    if(n===1){\n        return 1;\n    }\n    if(n===2){\n        return\
    \ 10;\n    }\n    if(n===3){\n        return 100;\n    }\n    var a = 100,\n \
    \       b = 10,\n        res = a+10*b;\n    for(var i=4;i<=n;i++){\n        a\
    \ = b;\n        b = res;\n        res = 9*a+10*b;\n    }\n    return res;\n}\n",
  "    let count=0;\n    let start=1;\n    for(let i=0;i<n;i++){\n        start*=10;\n\
    \    }\n    for(let i=start;i<start*10;i++){\n        let t=i;\n        while(t){\n\
    \            if(t%10==1){\n                count++;\n                break;\n\
    \            }\n            t=Math.floor(t/10);\n        }\n    }\n    return\
    \ count;\n}", '    var coun', "    // if n = 1, return 1\n    if(n == 1){\n  \
    \      return 1;\n    }\n    // count is the current number of numbers with n\
    \ digits\n    // count1 is the count of numbers that start or end with 1\n   \
    \ var count = 0;\n    var count1 = 0;\n    // i = 0, 1, 2, ... 10^(n-1)\n    for(var\
    \ i = 0; i < Math.pow(10, n-1); i++){\n        // j = 1, 2, 3, ... 10^(n-1) -\
    \ 1\n        for(var j = 1; j < Math.pow(10, n-1); j++){\n            // if the\
    \ number starts or ends with 1\n            if(Math.floor(i/Math.pow(10,n-1))\
    \ == 1 || Math.floor(j/Math.pow(10,n-1)) == 1 || i%10 == 1 || j%10 == 1){\n  \
    \              // then add to count1\n                count1++;\n            }\n\
    \            // increment count\n            count++;\n        }\n    }\n    //\
    \ display number of numbers and count1\n    console.log(\"number of \"+n+\"-digit\
    \ positive integers is \"+count);\n    console.log(\"number of \"+n+\"-digit positive\
    \ integers that start or end with 1 is \"+count1);\n}\n", "    return 9 * Math.pow(10,n-1)\
    \ + Math.pow(10,n) - 9 * Math.pow(10,n-2) - Math.pow(10,n-1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
