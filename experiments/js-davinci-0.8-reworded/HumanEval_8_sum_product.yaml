name: HumanEval_8_sum_product
language: js
prompt: "//For a given array of integers, return an array consisting of a sum and\
  \ a product of all the integers in an array.\n// Empty sum should be equal to 0\
  \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n//\
  \ >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
  \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
completions: ["    if(numbers.length == 0){\n        return [0, 1];\n    }\n    let\
    \ sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for(let\
    \ i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return [sum, product];\n}\n", "    return [numbers.reduce((a,b)\
    \ => a+b),numbers.reduce((a,b) => a*b)]\n}", "    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n\
    \        prod *= numbers[i];\n    }\n    var result = [sum, prod];\n    return\
    \ result;\n}\n", "    if(numbers.length===0){\n        return [0,1];\n    }\n\
    \    else{\n        var sum = 0;\n        var product = 1;\n        for(var i=0;i<numbers.length;i++){\n\
    \            sum+=numbers[i];\n            product*=numbers[i];\n        }\n \
    \       return [sum,product];\n    }\n}", "  \n}\n", "    // return numbers.length\
    \ === 0 ? [0, 1] : [numbers.reduce((x, y) => x + y), numbers.reduce((x, y) =>\
    \ x * y)];\n    return numbers.length === 0 ? [0, 1] : [numbers.reduce((a, b)\
    \ => a + b), numbers.reduce((a, b) => a * b)];\n}", "    let sum = 0;\n    let\
    \ product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return [sum, product];\n}", "    var\
    \ arr = [];\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   arr.push(sum);\n    arr.push(product);\n    return arr;\n}\nvar sum_product_test\
    \ = sum_product([1, 2, 3, 4]);", "    let emptyArray = []\n    let emptySum =\
    \ 0\n    let emptyProduct = 1\n    for(let i = 0; i < numbers.length; i++){\n\
    \        emptySum += numbers[i]\n        emptyProduct *= numbers[i]\n    }\n \
    \   emptyArray.push(emptySum, emptyProduct)\n    return emptyArray\n}", "    var\
    \ sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n", "    var sum=0, product=1;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        sum=sum+numbers[i];\n        product=product*numbers[i];\n  \
    \  }\n    return [sum, product];\n}\n", "  var sum = 0\n  var product = 1\n  for\
    \ (var i = 0; i < numbers.length; i++){\n    sum += numbers[i]\n    product *=\
    \ numbers[i]\n  }\n  return [sum, product]\n}", "    if(numbers.length === 0){\n\
    \        return [0, 1];\n    }\n    var sum = 0;\n    var product = 1;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return [sum, product];\n}", "    var sum = 0;\n \
    \   var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n", "    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}", "    if(numbers.length === 0){\n        return\
    \ [0, 1];\n    }\n    let sum = 0;\n    let prod = 1;\n    for(let i = 0; i <\
    \ numbers.length; i++){\n        sum += numbers[i];\n        prod *= numbers[i];\n\
    \    }\n    return [sum, prod];\n}", "    var sum = 0\n    var product = 1\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n  \
    \      product *= numbers[i]\n    }\n    return [sum, product]\n}\n", "    if(numbers.length\
    \ == 0){\n        return [0, 1];\n    }\n    else{\n        var sum = 0;\n   \
    \     var product = 1;\n        for(var i = 0; i < numbers.length; i++){\n   \
    \         sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return [sum, product];\n    }\n}\n", "    var sum = 0;\n    var product\
    \ = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return [sum, product];\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
