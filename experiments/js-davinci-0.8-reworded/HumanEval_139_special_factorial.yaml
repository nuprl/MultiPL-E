name: HumanEval_139_special_factorial
language: js
prompt: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunction special_factorial(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
  \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
  }\n\ntest();"
completions: ["  let res = n;\n  while(n>1){\n    res *= --n;\n  }\n  return res;\n\
    }\n", "    var i = n;\n    while (i > 0){\n        n = n * i;\n        i = i -\
    \ 1;\n    }\n    return n;\n}\n", "  if (n === 0) { return 1; }\n  return (n -\
    \ 1) * special_factorial(n - 1);\n}", "    if (n > 0) {\n        let fact = 1;\n\
    \        for (let i = 1; i <= n; i++) {\n            fact *= i;\n        }\n \
    \       return fact * special_factorial(n - 1);\n    } else {\n        return\
    \ 1;\n    }\n}\n", "\tlet result = 1;\n\tfor (let i = 1; i <= n; i++){\n\t\tresult\
    \ *= factorial(i);\n\t}\n\treturn result;\n}\n", "  if (n===0) {\n    return 1;\n\
    \  } else {\n    return n * special_factorial(n-1);\n  }\n}\n", "    var m = 1;\n\
    \    for (var i = n; i >= 1; i--) {\n        m *= i;\n    }\n    return m;\n}",
  "  //insert your code here\n  if (n === 0) return 1;\n  else return n * special_factorial(n-1);\n\
    }\n", "    var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\n", "  var a = 1;\n  for (var i = 1;\
    \ i <= n; i++){\n    a = a * i;\n  }\n  return a;\n}", "    if (n === 0){\n  \
    \      return 1;\n    }\n    else{\n        return n * special_factorial(n-1);\n\
    \    }\n}", "    if (n == 0) {\n        return 1;\n    } else {\n        return\
    \ n * special_factorial(n - 1);\n    }\n}\n", "  if (n === 0) return 1;\n  return\
    \ n * special_factorial(n-1);\n}\n", "  if (n < 1) {\n    return undefined;\n\
    \  }\n  var specialFactorial = 1;\n  var count = n;\n  while (count > 0) {\n \
    \   specialFactorial *= count * factorial(count - 1);\n    count--;\n  }\n  return\
    \ specialFactorial;\n}", "    let factorial = 1;\n    for (let i = n; i > 0; i--)\
    \ {\n        factorial *= factorial * i;\n    }\n    return factorial;\n}", " \
    \ if (n < 0) {\n    return undefined;\n  }\n  if (n == 0) {\n    return 1;\n \
    \ }\n  return n * special_factorial(n - 1);\n}", "\tvar sum = 1;\n\tvar i = 1;\n\
    \twhile(i <= n){\n\t\tsum *= i;\n\t\ti++;\n\t}\n\treturn sum;\n}\n", "    var\
    \ factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n\
    \    }\n    return factorial;\n}\n", "  var fact = 1;\n  for (var i = n; i > 0;\
    \ i--) {\n    fact *= (i * (i-1));\n  }\n  return fact;\n}", "    var numerator\
    \ = 1;\n    var denominator = 1;\n    for (var i = n; i > 0; i--) {\n        numerator\
    \ *= i;\n        denominator *= i - 1;\n    }\n    return numerator / denominator;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
