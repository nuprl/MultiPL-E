name: HumanEval_43_pairs_sum_to_zero
language: js
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
  \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    var i = 0\n    while (i < l.length){\n        var j = i+1\n   \
    \     while (j < l.length){\n            if ((l[i] + l[j]) === 0){\n         \
    \       return true\n            }\n            j = j + 1\n        }\n       \
    \ i = i + 1\n    }\n    return false\n}\n", "  for (var i = 0; i < l.length; i++){\n\
    \    for (var j = i+1; j < l.length; j++){\n      if (l[i] + l[j] == 0){\n   \
    \     return true;\n      }\n    }\n  }\n  return false;\n}\n", "    return search_list(l,\
    \ l.length-1);\n}", "\tfor(var i = 0; i < l.length; i++){\n\t\tfor(var j = i+1;\
    \ j < l.length; j++){\n\t\t\tif (l[i] + l[j] == 0){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\tvar arr = [];\n\tfor(var i = 0; i <\
    \ l.length; i++){\n\t\tfor(var j = 0; j < l.length; j++){\n\t\t\tif(i !== j){\n\
    \t\t\t\tif(l[i] + l[j] === 0){\n\t\t\t\t\tarr.push(l[i], l[j]);\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn arr.length > 0 ? true : false;\n}\n", "    for(var\
    \ i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n\
    \            if(l[i] + l[j] == 0){\n                return true;\n           \
    \ }\n        }\n    }\n    return false;\n}\n", "    function is_zero(x){\n  \
    \      return x === 0;\n    }\n    function is_in_list(x, lst){\n        return\
    \ !is_null(list_ref(lst, x));\n    }\n    function has_both_neg_and_pos(x, lst){\n\
    \        function is_neg(y){\n            return y < 0;\n        }\n        function\
    \ is_pos(y){\n            return y > 0;\n        }\n        return (is_pos(x)\
    \ && is_in_list(x - x, filter(is_neg, lst))) ||\n               (is_neg(x) &&\
    \ is_in_list(x - x, filter(is_pos, lst)));\n    }\n    return accumulate(function(x,\
    \ y){return x || y;}, false, map(has_both_neg_and_pos, l));\n}\n", "    var dict\
    \ = new Object();\n    for(var i=0; i<l.length; i++){\n        var val = l[i];\n\
    \        var comp = -val;\n        if(dict[comp]==true){\n            return true;\n\
    \        }\n        else{\n            dict[val] = true;\n        }\n    }\n \
    \   return false;\n}", "  for (var i = 0; i < l.length - 1; i++){\n    for (var\
    \ j = i + 1; j < l.length; j++){\n      if (l[i] + l[j] === 0){\n        return\
    \ true;\n      }\n    }\n  }\n  return false;\n}", "\tvar accumulator = 0;\n\t\
    var count = 0;\n\twhile (count < l.length){\n\t\tfor (var i = 0; i < l.length;\
    \ i++){\n\t\t\tif (count == i){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\
    \t\taccumulator = l[count] + l[i];\n\t\t\t\tif (accumulator == 0){\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcount += 1;\n\t}\n\treturn false;\n\
    }\n", "    if (l.length < 2) {\n        return false;\n    }\n    // iterate through\
    \ the array at each element\n    // add that element to every other element\n\
    \    // if sum is 0, return true\n    for (let i = 0; i < l.length; i++) {\n \
    \       for (let j = 0; j < l.length; j++) {\n            if (i !== j && l[i]\
    \ + l[j] === 0) {\n                return true;\n            }\n        }\n  \
    \  }\n    return false;\n}\n", "    // make a copy of the list\n    var copy =\
    \ l.slice();\n    // iterate through the list\n    for (var i = 0; i < l.length;\
    \ i++){\n        // for each element in the list, find the opposite\n        var\
    \ target = l[i] * -1;\n        // remove the element from the list\n        var\
    \ index = copy.indexOf(target);\n        if (index > -1){\n            copy.splice(index,\
    \ 1);\n        }\n        // use indexOf to see if the opposite exists in the\
    \ list\n        if (copy.indexOf(target) > -1){\n            return true;\n  \
    \      }\n    }\n    return false;\n}\n", "    // first iterate through the array\n\
    \    for (var i = 0; i < l.length; i++){\n        // if i is 0, start loop at\
    \ i+1, else i + 2 to avoid duplicates\n        if (i === 0){\n            for\
    \ (var j = i + 1; j < l.length; j++){\n                if (l[i] + l[j] === 0){\n\
    \                    return true;\n                }\n            }\n        }\n\
    \        else {\n            for (var j = i + 2; j < l.length; j++){\n       \
    \         if (l[i] + l[j] === 0){\n                    return true;\n        \
    \        }\n            }\n        }\n    }\n    return false;\n}\n", "\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tfor(var j = 0; j < l.length; j++){\n\t\t\tif(l[i]\
    \ == -l[j] && i != j){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n", "\tvar i, j;\n\tfor (i = 0; i < l.length; i++){\n\t\tfor (j = i + 1; j <\
    \ l.length; j++){\n\t\t\tif (l[i] + l[j] == 0){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\n", "    // return false if the length of the\
    \ list is less than 2\n    if (l.length < 2) {\n        return false;\n    }\n\
    \n    // create a variable that keeps track of whether or not a pair has been\
    \ found\n    var found_pair = false;\n\n    // sort the list\n    l.sort();\n\n\
    \    // loop through the list\n    for (var i = 0; i < l.length; i++) {\n    \
    \    // set a variable to the value of the current index\n        var current_element\
    \ = l[i];\n\n        // set a variable to the difference between 0 and the value\
    \ at the current index\n        var remaining_value = 0 - current_element;\n\n\
    \        // binary search through the rest of the list to see if the current index\
    \ plus a number add up to 0\n        if (binary_search(l, remaining_value, i))\
    \ {\n            found_pair = true;\n        }\n    }\n\n    return found_pair;\n\
    }\n", "  // YOUR CODE HERE\n}\n", "    for(var i = 0; i < l.length; i++){\n  \
    \      for(var j = 0; j < l.length; j++){\n            if(i != j && l[i] + l[j]\
    \ == 0){\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "    var i;\n    var zerolist = [];\n    for (i = 0; i < l.length;\
    \ i++){\n        if (l[i] === 0){\n            zerolist.push(0);\n        }\n\
    \    }\n    if (zerolist.length >= 2){\n        return true;\n    }\n    else\
    \ {\n        var j;\n        var k;\n        for (j = 0; j < l.length; j++){\n\
    \            for (k = j + 1; k < l.length; k++){\n                if ((l[j] +\
    \ l[k]) === 0){\n                    return true;\n                }\n       \
    \     }\n        }\n        return false;\n    }\n}\n", "\t\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
