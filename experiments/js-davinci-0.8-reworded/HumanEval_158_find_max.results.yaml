language: js
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word = \"\";\n  for(var i = 0; i < words.length;\
    \ i++){\n    if(words[i].length > max_word.length){\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpb516gvjp.js:26:10)\n    at Object.<anonymous> (/tmp/tmpb516gvjp.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var counts = [];\n    var obj = {};\n    var\
    \ n;\n    var letter;\n    var word;\n    var max = 0;\n    var ans = \"\";\n\
    \    for(i = 0; i < words.length; i++){\n        word = words[i];\n        n =\
    \ word.length;\n        obj = {};\n        for(j = 0; j < n; j++){\n         \
    \   letter = word[j];\n            if(!obj[letter]){\n                obj[letter]\
    \ = 1;\n            }\n        }\n        counts.push(Object.keys(obj).length);\n\
    \    }\n    for(i = 0; i < counts.length; i++){\n        if(counts[i] > max){\n\
    \            max = counts[i];\n            ans = words[i];\n        }\n    }\n\
    \    return ans;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmprfv9f4pg.js:46:10)\n    at Object.<anonymous> (/tmp/tmprfv9f4pg.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = words[0];\n    var word_list = words.split(\"\
    \");\n    var result_list = result.split(\"\");\n    var count = 0;\n    var max_count\
    \ = 0;\n    var max_result = \"\";\n    for (var i = 0; i < word_list.length;\
    \ i++){\n        var current_word = word_list[i];\n        for (var j = 0; j <\
    \ result_list.length; j++){\n            if (current_word == result_list[j]){\n\
    \                count++;\n            }\n        }\n        if (count > max_count){\n\
    \            max_count = count;\n            max_result = current_word;\n    \
    \    }\n    }\n    return max_result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb5pk8cq5.js:13\n    var word_list = words.split(\"\");\n      \
    \                    ^\n\nTypeError: words.split is not a function\n    at find_max\
    \ (/tmp/tmpb5pk8cq5.js:13:27)\n    at test (/tmp/tmpb5pk8cq5.js:37:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpb5pk8cq5.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var count_arr = [];\n  for(var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var count = 0;\n    for(var j = 0; j <\
    \ word.length; j++){\n      var char = word[j];\n      if(word.indexOf(char) ===\
    \ word.lastIndexOf(char)){\n        count += 1;\n      }\n    }\n    count_arr.push(count);\n\
    \  }\n  var max = Math.max.apply(null, count_arr);\n  return words[count_arr.indexOf(max)];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmps8qypkzl.js:34:10)\n    at Object.<anonymous> (/tmp/tmps8qypkzl.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maximum_count = 0;\n    var max_index = 0;\n\
    \    var current_count = 0;\n    var character_list = [];\n    for(var i = 0;\
    \ i < words.length; i++){\n        //iterate through the characters of the word\n\
    \        for(var j = 0; j < words[i].length; j++){\n            //if the character\
    \ does not exist in the list, then it is unique\n            if(character_list.indexOf(words[i][j])\
    \ === -1){\n                current_count += 1;\n                character_list.push(words[i][j]);\n\
    \            }\n        }\n        //if the current count is larger than the maximum\
    \ count,\n        // replace the max\n        if(current_count > maximum_count){\n\
    \            maximum_count = current_count;\n            max_index = i;\n    \
    \    }\n        //reset for next word\n        current_count = 0;\n        character_list\
    \ = [];\n    }\n    return words[max_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpi3jpzu0b.js:44:10)\n    at Object.<anonymous> (/tmp/tmpi3jpzu0b.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar count = 0;\n\tvar max_count = 0;\n\tvar word\
    \ = \"\";\n\tfor(i=0; i<words.length; i++){\n\t\tcount = 0;\n\t\tfor(j=0; j<words[i].length;\
    \ j++){\n\t\t\tfor(k=0; k<words[i].length; k++){\n\t\t\t\tif(words[i][j] === words[i][k]){\n\
    \t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(count > max_count){\n\t\t\
    \tmax_count = count;\n\t\t\tword = words[i];\n\t\t}\n\t}\n\treturn word;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpcifoid_5.js:37:10)\n    at Object.<anonymous> (/tmp/tmpcifoid_5.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var unique_characters = 0;\n    var max_word\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(unique_characters\
    \ < count_unique_characters(words[i])){\n            unique_characters = count_unique_characters(words[i]);\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph2va0puu.js:15\n        if(unique_characters < count_unique_characters(words[i])){\n\
    \        ^\n\nReferenceError: count_unique_characters is not defined\n    at find_max\
    \ (/tmp/tmph2va0puu.js:15:9)\n    at test (/tmp/tmph2va0puu.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmph2va0puu.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let unique = [];\n    for(let i = 0; i < words.length;\
    \ i++){\n        unique.push(unique_chars(words[i]));\n    }\n    let max = 0;\n\
    \    let index = 0;\n    for(let i = 0; i < unique.length; i++){\n        if(unique[i]\
    \ > max){\n            max = unique[i];\n            index = i;\n        }\n \
    \   }\n    return words[index];\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwvvhe3xl.js:14\n        unique.push(unique_chars(words[i]));\n\
    \               ^\n\nReferenceError: unique_chars is not defined\n    at find_max\
    \ (/tmp/tmpwvvhe3xl.js:14:16)\n    at test (/tmp/tmpwvvhe3xl.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpwvvhe3xl.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var i,j,n=words.length,count=0,max=0,c=0,index=0;\n\
    \    for(i=0;i<n;i++){\n        var x=words[i];\n        var y={};\n        for(j=0;j<x.length;j++){\n\
    \            var z=x[j];\n            if(y[z]===undefined){\n                y[z]=1;\n\
    \                count+=1;\n            }\n        }\n        if(count>max){\n\
    \            max=count;\n            c=count;\n            index=i;\n        }\n\
    \        else if(count===max){\n            for(j=0;j<c;j++){\n              \
    \  if(words[index][j]>x[j]){\n                    break;\n                }\n\
    \                else if(words[index][j]<x[j]){\n                    index=i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     count=0;\n    }\n    return words[index];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp_jq92c54.js:49:10)\n    at Object.<anonymous> (/tmp/tmp_jq92c54.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxword = \"\";\n    for\
    \ (var i = 0; i < words.length; i++){\n        var l = letters(words[i]);\n  \
    \      if (l > max){\n            max = l;\n            maxword = words[i];\n\
    \        }\n    }\n    return maxword;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4q9y5v7_.js:15\n        var l = letters(words[i]);\n          \
    \      ^\n\nReferenceError: letters is not defined\n    at find_max (/tmp/tmp4q9y5v7_.js:15:17)\n\
    \    at test (/tmp/tmp4q9y5v7_.js:29:20)\n    at Object.<anonymous> (/tmp/tmp4q9y5v7_.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = \"\";\n    let max_length = 0;\n\
    \    for(let i = 0; i < words.length; i++){\n        let current_string = words[i];\n\
    \        let current_string_length = 0;\n        let set = new Set();\n      \
    \  for(let j = 0; j < current_string.length; j++){\n            if(!set.has(current_string[j])){\n\
    \                set.add(current_string[j]);\n                current_string_length++;\n\
    \            }\n        }\n        if(current_string_length > max_length){\n \
    \           max_length = current_string_length;\n            result = current_string;\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpx9da4x2e.js:37:10)\n    at Object.<anonymous> (/tmp/tmpx9da4x2e.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_count = 0;\n  var max_word = \"\";\n  for(var\
    \ i = 0; i < words.length; i++){\n    var word = words[i];\n    var count = count_unique(word);\n\
    \    if(count > max_count){\n      max_count = count;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqvr7x0i5.js:16\n    var count = count_unique(word);\n         \
    \       ^\n\nReferenceError: count_unique is not defined\n    at find_max (/tmp/tmpqvr7x0i5.js:16:17)\n\
    \    at test (/tmp/tmpqvr7x0i5.js:30:20)\n    at Object.<anonymous> (/tmp/tmpqvr7x0i5.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var final_word = \"\";\n    var final_word_count\
    \ = 0;\n    for(var i = 0; i < words.length; i++){\n        var unique_count =\
    \ count_unique(words[i]);\n        if(unique_count > final_word_count){\n    \
    \        final_word = words[i];\n            final_word_count = unique_count;\n\
    \        }\n    }\n    return final_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqcu_vzfv.js:15\n        var unique_count = count_unique(words[i]);\n\
    \                           ^\n\nReferenceError: count_unique is not defined\n\
    \    at find_max (/tmp/tmpqcu_vzfv.js:15:28)\n    at test (/tmp/tmpqcu_vzfv.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqcu_vzfv.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let u_chars = [];\n  for(let i = 0; i < words.length;\
    \ i++){\n    u_chars.push(new Set(words[i]).size);\n  }\n  let max = Math.max(...u_chars);\n\
    \  return words[u_chars.indexOf(max)];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9fcb3awo.js:25:10)\n    at Object.<anonymous> (/tmp/tmp9fcb3awo.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxWord = '';\n    for(let\
    \ i = 0; i < words.length; i++){\n        let word = words[i];\n        let wordSet\
    \ = new Set(word);\n        if(wordSet.size > max){\n            max = wordSet.size;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp47fnpx71.js:30:10)\n    at Object.<anonymous> (/tmp/tmp47fnpx71.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = words[0];\n  var max_count = 0;\n  for(var\
    \ i = 0; i < words.length; i++){\n    var count = 0;\n    for(var j = 0; j < words[i].length;\
    \ j++){\n      if(words[i].indexOf(words[i][j]) === j){\n        count += 1;\n\
    \      }\n    }\n    if(count > max_count){\n      max = words[i];\n      max_count\
    \ = count;\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgm59hkbn.js:35:10)\n    at Object.<anonymous> (/tmp/tmpgm59hkbn.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCharMap = {};\n  var maxCharWord = \"\"\
    ;\n  for(var i = 0; i < words.length; i++){\n    var currCharMap = {};\n    var\
    \ word = words[i];\n    for(var j = 0; j < word.length; j++){\n      var char\
    \ = word[j];\n      if(currCharMap[char] === undefined){\n        currCharMap[char]\
    \ = 1;\n      }\n    }\n    if(Object.keys(currCharMap).length > Object.keys(maxCharMap).length){\n\
    \      maxCharMap = currCharMap;\n      maxCharWord = word;\n    }\n  }\n  return\
    \ maxCharWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpqa05ek_y.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqa05ek_y.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxLength = 0;\n    let wordWithMaxLength\
    \ = \"\";\n    let currentWord = \"\";\n    for(let word of words){\n        currentWord\
    \ = uniqChars(word);\n        if(currentWord.length > maxLength){\n          \
    \  maxLength = currentWord.length;\n            wordWithMaxLength = word;\n  \
    \      }\n    }\n    return wordWithMaxLength;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe5h9l1uh.js:16\n        currentWord = uniqChars(word);\n      \
    \  ^\n\nReferenceError: uniqChars is not defined\n    at find_max (/tmp/tmpe5h9l1uh.js:16:9)\n\
    \    at test (/tmp/tmpe5h9l1uh.js:30:20)\n    at Object.<anonymous> (/tmp/tmpe5h9l1uh.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxChar = 0\n    var maxWord = words[0]\n\
    \    for(var i = 0; i < words.length; i++){\n        var charInWord = 0\n    \
    \    for(var j = 0; j < words[i].length; j++){\n            for(var k = 0; k <\
    \ words[i].length; k++){\n                if(words[i][j] == words[i][k]){\n  \
    \                  charInWord += 1\n                }\n            }\n       \
    \ }\n        if(charInWord > maxChar){\n            maxChar = charInWord\n   \
    \         maxWord = words[i]\n        }\n    }\n    return maxWord\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpd2m2ys76.js:36:10)\n    at Object.<anonymous> (/tmp/tmpd2m2ys76.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if(words.length == 0){\n        return \"No words\"\
    ;\n    }\n    let max = words[0];\n    let max_value = words[0].length;\n    for(let\
    \ i = 1; i < words.length; i++){\n        if(max_value < words[i].length){\n \
    \           max = words[i];\n            max_value = words[i].length;\n      \
    \  }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmppccw1fed.js:31:10)\n    at Object.<anonymous> (/tmp/tmppccw1fed.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    words.sort();\n    var max = 0;\n    var max_word\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        //console.log(words[i]);\n\
    \        if(get_unique_chars(words[i]) > max){\n            max = get_unique_chars(words[i]);\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1eqofxad.js:17\n        if(get_unique_chars(words[i]) > max){\n\
    \        ^\n\nReferenceError: get_unique_chars is not defined\n    at find_max\
    \ (/tmp/tmp1eqofxad.js:17:9)\n    at test (/tmp/tmp1eqofxad.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp1eqofxad.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_count = 0;\n\tvar max_word = \"\";\n\t\
    for(var i = 0; i < words.length; i++){\n\t\tvar count = 0;\n\t\tvar word = words[i];\n\
    \t\tfor(var j = 0; j < word.length; j++){\n\t\t\tvar letter = word[j];\n\t\t\t\
    if(word.indexOf(letter) == word.lastIndexOf(letter)){\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word\
    \ = word;\n\t\t}\n\t}\n\treturn max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp25_0nd06.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp25_0nd06.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var curr_max_char_count = 0;\n    var curr_max_word\
    \ = '';\n    var curr_max_word_idx = 0;\n    for (var i = 0; i < words.length;\
    \ i++){\n        var letters = new Set();\n        for (var j = 0; j < words[i].length;\
    \ j++){\n            letters.add(words[i][j]);\n        }\n        var letters_length\
    \ = letters.size;\n        if (letters_length > curr_max_char_count){\n      \
    \      curr_max_char_count = letters_length;\n            curr_max_word = words[i];\n\
    \            curr_max_word_idx = i;\n        }\n    }\n    return words[curr_max_word_idx];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxear4p_p.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxear4p_p.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var wordsLength = words.length;\n  var maxChar\
    \ = '';\n  var maxNumber = 0;\n  for(var i = 0; i < wordsLength; i++){\n    var\
    \ unique = uniqueChar(words[i]);\n    if(unique.length > maxNumber){\n      maxNumber\
    \ = unique.length;\n      maxChar = words[i];\n    }\n  }\n  return maxChar;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpausauicd.js:16\n    var unique = uniqueChar(words[i]);\n      \
    \           ^\n\nReferenceError: uniqueChar is not defined\n    at find_max (/tmp/tmpausauicd.js:16:18)\n\
    \    at test (/tmp/tmpausauicd.js:29:20)\n    at Object.<anonymous> (/tmp/tmpausauicd.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let lettercount = 0;\n  let max_word = \"\";\n\
    \  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > lettercount)\
    \ {\n      lettercount = words[i].length;\n      max_word = words[i];\n    }\n\
    \  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpry9hf5fw.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpry9hf5fw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_unique = {};\n    var max_unique_word\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        var unique_word\
    \ = {};\n        var word = words[i];\n        for(var j = 0; j < word.length;\
    \ j++){\n            var char = word[j];\n            if(unique_word[char] ===\
    \ undefined){\n                unique_word[char] = 1;\n            }\n       \
    \ }\n        if(max_unique_word === \"\"){\n            max_unique_word = word;\n\
    \            max_unique = unique_word;\n        }\n        else if(Object.keys(unique_word).length\
    \ > Object.keys(max_unique).length){\n            max_unique_word = word;\n  \
    \          max_unique = unique_word;\n        }\n        else if(Object.keys(unique_word).length\
    \ === Object.keys(max_unique).length){\n            if(word < max_unique_word){\n\
    \                max_unique_word = word;\n                max_unique = unique_word;\n\
    \            }\n        }\n    }\n    return max_unique_word;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar hash = {};\n\tvar max_length = 0;\n\tvar max_word\
    \ = '';\n\tfor(var i = 0; i < words.length; i++){\n\t\tvar new_word = words[i];\n\
    \t\tvar counter = 0;\n\t\tfor(var j = 0; j < new_word.length; j++){\n\t\t\tvar\
    \ letter = new_word[j];\n\t\t\tif(!hash[letter]){\n\t\t\t\thash[letter] = 1;\n\
    \t\t\t\tcounter += 1;\n\t\t\t}\n\t\t}\n\t\tif(counter > max_length){\n\t\t\tmax_length\
    \ = counter;\n\t\t\tmax_word = new_word;\n\t\t}\n\t\thash = {};\n\t}\n\treturn\
    \ max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphwq6wd5p.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphwq6wd5p.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = {};\n    for(let word of words){\n\
    \        let count = {}\n        for(let letter of word){\n            if(count[letter]){\n\
    \                count[letter] += 1;\n            }\n            else{\n     \
    \           count[letter] = 1;\n            }\n        }\n        max[word] =\
    \ Object.keys(count).length;\n    }\n    console.log(max);\n    let max_word =\
    \ words[0];\n    let max_count = max[words[0]];\n    for(let word in max){\n \
    \       if(max[word] > max_count){\n            max_count = max[word];\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp78vmsmal.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp78vmsmal.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '{ name: 4, of: 2, string: 6 }

    { name: 4, enam: 4, game: 4 }

    '
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i = 0; i < words.length; i++){\n        if(max < unique_chars(words[i])){\n\
    \            max = unique_chars(words[i]);\n            maxWord = words[i];\n\
    \        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpa_04t8ey.js:15\n        if(max < unique_chars(words[i])){\n   \
    \     ^\n\nReferenceError: unique_chars is not defined\n    at find_max (/tmp/tmpa_04t8ey.js:15:9)\n\
    \    at test (/tmp/tmpa_04t8ey.js:28:20)\n    at Object.<anonymous> (/tmp/tmpa_04t8ey.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_char = '';\n    var max_length = 0;\n\
    \    var a = '';\n    for(var i = 0; i < words.length; i++){\n        var char_list\
    \ = words[i].split('');\n        for(var k = 0; k < char_list.length; k++){\n\
    \            if(char_list[k] in a){\n                continue;\n            }\n\
    \            else{\n                a = a + char_list[k];\n            }\n   \
    \     }\n        if(a.length > max_length){\n            max_length = a.length;\n\
    \            max_char = words[i];\n        }\n        a = '';\n    }\n    return\
    \ max_char;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqiqrfn23.js:18\n            if(char_list[k] in a){\n          \
    \                  ^\n\nTypeError: Cannot use 'in' operator to search for 'n'\
    \ in \n    at find_max (/tmp/tmpqiqrfn23.js:18:29)\n    at test (/tmp/tmpqiqrfn23.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqiqrfn23.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpswjjxz1l.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpswjjxz1l.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_word = words[0];\n\tvar max_count = 0;\n\
    \tfor(var i = 0; i < words.length; i++){\n\t\tvar current_word = words[i];\n\t\
    \tvar characters = {};\n\t\tvar count = 0;\n\t\tfor(var j = 0; j < current_word.length;\
    \ j++){\n\t\t\tvar current_char = current_word[j];\n\t\t\tif(!characters[current_char]){\n\
    \t\t\t\tcharacters[current_char] = 1;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\
    if(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word = current_word;\n\
    \t\t}\n\t}\n\treturn max_word;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo55nph7r.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo55nph7r.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var counter = 0;\n    var max_words = \"\";\n\
    \    for(var i = 0; i < words.length; i++){\n        if(max_words.length <= words[i].length){\n\
    \            max_words = words[i];\n        }\n    }\n    return max_words;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpylmf0ghc.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpylmf0ghc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if(typeof words !== \"object\"){\n        return\
    \ false;\n    }\n    var dict = [];\n    var repeatedWords = [];\n    var repeated\
    \ = false;\n    for(var i = 0; i < words.length; i++){\n        dict = words[i].split(\"\
    \");\n        repeated = false;\n        for(var j = 0; j < dict.length; j++){\n\
    \            for(var k = j + 1; k < dict.length; k++){\n                if(dict[j]\
    \ === dict[k]){\n                    repeated = true;\n                }\n   \
    \         }\n        }\n        if(repeated){\n            repeatedWords.push(words[i]);\n\
    \        }\n    }\n    if(repeatedWords.length === 0){\n        return words[0];\n\
    \    }else{\n        return repeatedWords[0];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpcfy7onvy.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpcfy7onvy.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tlet max = 1;\n\tlet newWord = words[0];\n\tfor(let\
    \ word of words){\n\t\tlet wordSet = new Set(word);\n\t\tif(wordSet.size > max){\n\
    \t\t\tmax = wordSet.size;\n\t\t\tnewWord = word;\n\t\t}\n\t}\n\treturn newWord;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo3gk0l57.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3gk0l57.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let word_index = 0;\n    let max_unique_count\
    \ = 0;\n    for (let i = 0; i < words.length; i++){\n        let word = words[i];\n\
    \        let unique_count = count_unique(word);\n        if (unique_count > max_unique_count){\n\
    \            max_unique_count = unique_count;\n            word_index = i;\n \
    \       }\n    }\n    return words[word_index];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphho_8cij.js:16\n        let unique_count = count_unique(word);\n\
    \                           ^\n\nReferenceError: count_unique is not defined\n\
    \    at find_max (/tmp/tmphho_8cij.js:16:28)\n    at test (/tmp/tmphho_8cij.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmphho_8cij.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word = '';\n    var len = 0;\n    var chars\
    \ = {};\n    var count = 0;\n    for(var i = 0; i < words.length; i++){\n    \
    \    chars = {};\n        count = 0;\n        for(var j = 0; j < words[i].length;\
    \ j++){\n            if(!chars[words[i][j]]){\n                chars[words[i][j]]\
    \ = 1;\n                count += 1;\n            }\n        }\n        if(count\
    \ > len){\n            len = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpadgdz_7p.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpadgdz_7p.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  const count = (word) => {\n    let tracker = {};\n\
    \    let count = 0;\n    for (let char of word) {\n      if (!tracker[char]) {\n\
    \        tracker[char] = true;\n        count++;\n      }\n    }\n    return count;\n\
    \  };\n  let max = {word: words[0], count: count(words[0])};\n  for (let word\
    \ of words) {\n    let thisCount = count(word);\n    if (thisCount > max.count\
    \ || (thisCount === max.count && word < max.word)) {\n      max = {word, count:\
    \ thisCount};\n    }\n  }\n  return max.word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max_len = 0\n  let max_word = \"\"\n  for (let\
    \ word of words){\n    if (word.length > max_len){\n      max_len = word.length\n\
    \      max_word = word\n    }\n  }\n  return max_word\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpf2rck4ey.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf2rck4ey.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = words[0].length;\n  var max_idx = 0;\n\
    \  for (var i = 1; i < words.length; i++){\n    if (max < words[i].length){\n\
    \      max = words[i].length;\n      max_idx = i;\n    }\n  }\n  return words[max_idx];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_17goj4v.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_17goj4v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let unique = 0;\n  let largest = \"\";\n  for(let\
    \ i = 0; i < words.length; i++){\n    if(find_uniq_count(words[i]) > unique){\n\
    \      unique = find_uniq_count(words[i]);\n      largest = words[i];\n    }\n\
    \  }\n  return largest;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8gzkd554.js:15\n    if(find_uniq_count(words[i]) > unique){\n \
    \   ^\n\nReferenceError: find_uniq_count is not defined\n    at find_max (/tmp/tmp8gzkd554.js:15:5)\n\
    \    at test (/tmp/tmp8gzkd554.js:27:20)\n    at Object.<anonymous> (/tmp/tmp8gzkd554.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = '';\n    let max = 0;\n    let unique_characters\
    \ = {};\n    for(i = 0; i < words.length; i++){\n        unique_characters = {};\n\
    \        for(j = 0; j < words[i].length; j++){\n            if(!unique_characters[words[i][j]]){\n\
    \                unique_characters[words[i][j]] = words[i][j];\n            }\n\
    \        }\n        if(Object.keys(unique_characters).length > max){\n       \
    \     max = Object.keys(unique_characters).length;\n            result = words[i];\n\
    \        } else if(Object.keys(unique_characters).length === max){\n         \
    \   result = words[i] < result ? words[i] : result;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = {\n        word: words[0],\n      \
    \  count: 0\n    };\n    for(var i = 0; i < words.length; i++){\n        if(max.count\
    \ < count_unique(words[i])){\n            max.word = words[i];\n            max.count\
    \ = count_unique(words[i]);\n        }\n    }\n    return max.word;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1ip0jrge.js:17\n        if(max.count < count_unique(words[i])){\n\
    \               ^\n\nReferenceError: count_unique is not defined\n    at find_max\
    \ (/tmp/tmp1ip0jrge.js:17:16)\n    at test (/tmp/tmp1ip0jrge.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ip0jrge.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar unique_chars = {};\n\tvar max_chars = 0;\n\t\
    var max_idx = 0;\n\tfor (var i = 0; i < words.length; i++){\n\t\tvar w = words[i];\n\
    \t\tvar num_chars = find_unique_chars(w);\n\t\tif (num_chars > max_chars){\n\t\
    \t\tmax_chars = num_chars;\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\treturn words[max_idx];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwtgt7ufw.js:17\n\t\tvar num_chars = find_unique_chars(w);\n\t\t\
    \                ^\n\nReferenceError: find_unique_chars is not defined\n    at\
    \ find_max (/tmp/tmpwtgt7ufw.js:17:19)\n    at test (/tmp/tmpwtgt7ufw.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwtgt7ufw.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxLength = 0;\n  let maxWord = \"\";\n  for(let\
    \ i = 0; i < words.length; i++){\n    let word = words[i];\n    if(word.length\
    \ > maxLength){\n      maxLength = word.length;\n      maxWord = word;\n    }\n\
    \  }\n  return maxWord;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpk3xcqamk.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpk3xcqamk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word = \"\";\n  var max_len = 0;\n  for(var\
    \ i = 0; i < words.length; i++){\n    var test_word = words[i];\n    if(test_word.length\
    \ > max_len){\n      max_len = test_word.length;\n      max_word = test_word;\n\
    \    }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpmrajeal5.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmrajeal5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  max = 0;\n  max_word = \"\";\n  for(i=0; i<words.length;\
    \ i++){\n    if(get_unique_count(words[i]) > max){\n      max = get_unique_count(words[i]);\n\
    \      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6fnkm74p.js:15\n    if(get_unique_count(words[i]) > max){\n   \
    \ ^\n\nReferenceError: get_unique_count is not defined\n    at find_max (/tmp/tmp6fnkm74p.js:15:5)\n\
    \    at test (/tmp/tmp6fnkm74p.js:28:20)\n    at Object.<anonymous> (/tmp/tmp6fnkm74p.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let lex = [];\n    for(let\
    \ word of words){\n        let uni = [];\n        for(let ch of word){\n     \
    \       if(uni.indexOf(ch) === -1){\n                uni.push(ch);\n         \
    \   }\n        }\n        if(uni.length > max){\n            max = uni.length;\n\
    \            lex = [word];\n        }else if(uni.length === max){\n          \
    \  lex.push(word);\n        }\n    }\n    return lex[0];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnkuwvl6w.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnkuwvl6w.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if (words.length <= 1){\n        return words[0];\n\
    \    }\n    else{\n        if (unique_characters(words[0]) > unique_characters(words[1])){\n\
    \            words.splice(1,1);\n            return find_max(words);\n       \
    \ }\n        else if (unique_characters(words[0]) < unique_characters(words[1])){\n\
    \            words.splice(0,1);\n            return find_max(words);\n       \
    \ }\n        else if (unique_characters(words[0]) == unique_characters(words[1])){\n\
    \            if (lexicographical_order(words[0], words[1]) == true){\n       \
    \         words.splice(1,1);\n                return find_max(words);\n      \
    \      }\n            else{\n                words.splice(0,1);\n            \
    \    return find_max(words);\n            }\n        }\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe1rec9gj.js:16\n        if (unique_characters(words[0]) > unique_characters(words[1])){\n\
    \        ^\n\nReferenceError: unique_characters is not defined\n    at find_max\
    \ (/tmp/tmpe1rec9gj.js:16:9)\n    at test (/tmp/tmpe1rec9gj.js:42:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe1rec9gj.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var max_word = \"\";\n    for(var\
    \ i = 0; i < words.length; i++){\n        var word = words[i];\n        var unique_count\
    \ = find_unique_count(word);\n        if(unique_count > max){\n            max\
    \ = unique_count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpkg2et0bi.js:16\n        var unique_count = find_unique_count(word);\n\
    \                           ^\n\nReferenceError: find_unique_count is not defined\n\
    \    at find_max (/tmp/tmpkg2et0bi.js:16:28)\n    at test (/tmp/tmpkg2et0bi.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpkg2et0bi.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var length = 0;\n    var maxLength = 0;\n   \
    \ var maxWord = \"\";\n    for(var i = 0; i < words.length; i++){\n        var\
    \ currentWord = words[i];\n        for(var j = 0; j < currentWord.length; j++){\n\
    \            var currentLetter = currentWord[j];\n            if(currentWord.indexOf(currentLetter)\
    \ === currentWord.lastIndexOf(currentLetter)){\n                length ++;\n \
    \           }\n        }\n        if(length > maxLength){\n            maxLength\
    \ = length;\n            maxWord = currentWord;\n        }\n        length = 0;\n\
    \    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpl3aeesjx.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl3aeesjx.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\t//Declare max\n\t//Declare max_word\n\t//Declare\
    \ uniq_chars\n\t//Loop through the words\n\t\t//Get the unique characters\n\t\t\
    //If the length of the uniq_chars is greater than the length of max\n\t\t\t//Update\
    \ max\n\t\t\t//Update max_word\n\t//Return max_word\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpmhllkd2v.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmhllkd2v.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var arr_counts = [];\n    var max_count = 0;\n\
    \    var max_words = [];\n    for (var i = 0; i < words.length; i++){\n      \
    \  var unique_chars = {};\n        var count = 0;\n        for (var j = 0; j <\
    \ words[i].length; j++){\n            if (unique_chars[words[i][j]] === undefined){\n\
    \                unique_chars[words[i][j]] = 1;\n                count += 1;\n\
    \            }\n        }\n        if (count === max_count){\n            max_words.push(words[i]);\n\
    \        }\n        else if (count > max_count){\n            max_count = count;\n\
    \            max_words = [words[i]];\n        }\n    }\n    max_words.sort();\n\
    \    return max_words[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let answer = \"\";\n    for(let\
    \ word of words){\n        // console.log(word);\n        if(unique_char(word)\
    \ > max){\n            max = unique_char(word);\n            answer = word;\n\
    \        }\n    }\n    return answer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbh8orhur.js:16\n        if(unique_char(word) > max){\n        ^\n\
    \nReferenceError: unique_char is not defined\n    at find_max (/tmp/tmpbh8orhur.js:16:9)\n\
    \    at test (/tmp/tmpbh8orhur.js:29:20)\n    at Object.<anonymous> (/tmp/tmpbh8orhur.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_count = 0;\n    var max_word = '';\n\
    \    for(var i = 0; i < words.length; i++){\n        var unique_chars = get_unique_chars(words[i]);\n\
    \        if(unique_chars.length > max_count){\n            max_count = unique_chars.length;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptl2gegfg.js:15\n        var unique_chars = get_unique_chars(words[i]);\n\
    \                           ^\n\nReferenceError: get_unique_chars is not defined\n\
    \    at find_max (/tmp/tmptl2gegfg.js:15:28)\n    at test (/tmp/tmptl2gegfg.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmptl2gegfg.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar answer = words[0];\n\tfor (var i = 0; i < words.length;\
    \ i++) {\n\t\tif (num_unique_chars(words[i]) > num_unique_chars(answer)) {\n\t\
    \t\tanswer = words[i];\n\t\t}\n\t}\n\treturn answer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzh1w_vws.js:14\n\t\tif (num_unique_chars(words[i]) > num_unique_chars(answer))\
    \ {\n\t\t^\n\nReferenceError: num_unique_chars is not defined\n    at find_max\
    \ (/tmp/tmpzh1w_vws.js:14:3)\n    at test (/tmp/tmpzh1w_vws.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpzh1w_vws.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word = words[0];\n  var max_size = size_of_letters(words[0]);\n\
    \  for(i = 1; i < words.length; i++){\n    if(size_of_letters(words[i]) > max_size){\n\
    \      max_word = words[i];\n      max_size = size_of_letters(words[i]);\n   \
    \ }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5q1hdr_5.js:13\n  var max_size = size_of_letters(words[0]);\n \
    \                ^\n\nReferenceError: size_of_letters is not defined\n    at find_max\
    \ (/tmp/tmp5q1hdr_5.js:13:18)\n    at test (/tmp/tmp5q1hdr_5.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp5q1hdr_5.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar maxUniques = 0;\n\tvar maxWord = '';\n\tfor(var\
    \ i = 0; i < words.length; i++){\n\t\tvar currentWord = words[i];\n\t\tvar currentUniques\
    \ = uniqueChars(currentWord);\n\t\tif(currentUniques > maxUniques){\n\t\t\tmaxUniques\
    \ = currentUniques;\n\t\t\tmaxWord = currentWord;\n\t\t}\n\t}\n\treturn maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpspe3dmqi.js:16\n\t\tvar currentUniques = uniqueChars(currentWord);\n\
    \t\t                     ^\n\nReferenceError: uniqueChars is not defined\n   \
    \ at find_max (/tmp/tmpspe3dmqi.js:16:24)\n    at test (/tmp/tmpspe3dmqi.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpspe3dmqi.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxWord = words[0];\n    var maxLength =\
    \ getUniqueLength(words[0]);\n    for(var i = 1; i < words.length; i++){\n   \
    \     var word = words[i];\n        var uniq = getUniqueLength(word);\n      \
    \  if(uniq > maxLength){\n            maxLength = uniq;\n            maxWord =\
    \ word;\n        }else if(uniq == maxLength){\n            if(word < maxWord){\n\
    \                maxWord = word;\n            }\n        }\n    }\n    return\
    \ maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpf76_zult.js:13\n    var maxLength = getUniqueLength(words[0]);\n\
    \                    ^\n\nReferenceError: getUniqueLength is not defined\n   \
    \ at find_max (/tmp/tmpf76_zult.js:13:21)\n    at test (/tmp/tmpf76_zult.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpf76_zult.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var vogal = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        for(var j=0; j<words[i].length; j++){\n\
    \            if(words[i].indexOf(words[i][j]) === words[i].lastIndexOf(words[i][j])){\n\
    \                vogal++;\n            }\n        }\n        if(vogal > words[i].length-vogal){\n\
    \            word = words[i];\n        }\n        vogal = 0;\n    }\n    return\
    \ word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppt55e867.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppt55e867.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = words[0];\n\
    \    for(let word of words){\n        word = word.toLowerCase();\n        let\
    \ set = new Set(word);\n        if(set.size > maxCount){\n            maxCount\
    \ = set.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8juo1bm3.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8juo1bm3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var arr = [];\n  for(var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var unique = [];\n    for(var j = 0; j\
    \ < word.length; j++){\n      var letter = word[j];\n      if(unique.indexOf(letter)\
    \ === -1){\n        unique.push(letter);\n      }\n    }\n    arr.push(unique.length);\n\
    \  }\n  var largest = Math.max.apply(null, arr);\n  var result = arr.indexOf(largest);\n\
    \  return words[result];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppddpvbhg.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppddpvbhg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word = '';\n    var max_unique = 0;\n   \
    \ for(var w in words){\n        var count = 0;\n        var chars = [];\n    \
    \    for(var c in words[w]){\n            if(!chars.includes(words[w][c])){\n\
    \                chars.push(words[w][c]);\n                count++;\n        \
    \    }\n        }\n        if(count > max_unique){\n            max_unique = count;\n\
    \            word = words[w];\n        }\n    }\n    return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa7dugbzj.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa7dugbzj.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var current_max = 0;\n  var index = 0;\n  for(var\
    \ i = 0; i < words.length; i++){\n    if(count_unique(words[i]) > current_max){\n\
    \      current_max = count_unique(words[i]);\n      index = i;\n    }\n  }\n \
    \ return words[index];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp880ze5xb.js:15\n    if(count_unique(words[i]) > current_max){\n\
    \    ^\n\nReferenceError: count_unique is not defined\n    at find_max (/tmp/tmp880ze5xb.js:15:5)\n\
    \    at test (/tmp/tmp880ze5xb.js:27:20)\n    at Object.<anonymous> (/tmp/tmp880ze5xb.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_length=0;\n  var result=\"\";\n  for(var\
    \ i=0;i<words.length;i++){\n    if(max_length<unique_chars(words[i])){\n     \
    \ max_length=unique_chars(words[i]);\n      result=words[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp8624n4zm.js:15\n    if(max_length<unique_chars(words[i])){\n  \
    \  ^\n\nReferenceError: unique_chars is not defined\n    at find_max (/tmp/tmp8624n4zm.js:15:5)\n\
    \    at test (/tmp/tmp8624n4zm.js:28:20)\n    at Object.<anonymous> (/tmp/tmp8624n4zm.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word;\n    var max_chars = 0;\n    for(var\
    \ word of words){\n        var chars = [];\n        for(var char of word){\n \
    \           if(!chars.includes(char)){\n                chars.push(char);\n  \
    \          }\n        }\n        if(chars.length > max_chars){\n            max_chars\
    \ = chars.length;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp3r2dopg9.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3r2dopg9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let biggestSetSize = 0;\n    let biggestSetWord\
    \ = \"\";\n    for(let word of words){\n        let currentSet = new Set(word);\n\
    \        if(currentSet.size > biggestSetSize){\n            biggestSetSize = currentSet.size;\n\
    \            biggestSetWord = word;\n        }\n    }\n    return biggestSetWord;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8lzbfcif.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8lzbfcif.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var result = \"\";\n  for(var i = 0; i < words.length;\
    \ i++){\n    if(result === \"\"){\n      result = words[i];\n    }\n    if(result.length\
    \ < words[i].length){\n      result = words[i];\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfs5zayn3.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfs5zayn3.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var uniqueChars = words.map(function(word){\n\
    \        return unique_letters(word);\n    });\n    var max = Math.max.apply(null,\
    \ uniqueChars);\n    return words[uniqueChars.indexOf(max)];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph5nl_sp7.js:13\n        return unique_letters(word);\n        ^\n\
    \nReferenceError: unique_letters is not defined\n    at /tmp/tmph5nl_sp7.js:13:9\n\
    \    at Array.map (<anonymous>)\n    at find_max (/tmp/tmph5nl_sp7.js:12:29)\n\
    \    at test (/tmp/tmph5nl_sp7.js:24:20)\n    at Object.<anonymous> (/tmp/tmph5nl_sp7.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let thisWord = words[i];\n        let\
    \ current = get_unique_chars(thisWord);\n        if(current > max){\n        \
    \    max = current;\n            word = thisWord;\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpog348ddh.js:16\n        let current = get_unique_chars(thisWord);\n\
    \                      ^\n\nReferenceError: get_unique_chars is not defined\n\
    \    at find_max (/tmp/tmpog348ddh.js:16:23)\n    at test (/tmp/tmpog348ddh.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpog348ddh.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxWord = words[0];\n    let maxWordSet =\
    \ new Set(maxWord);\n    let maxWordUniqueLength = maxWordSet.size;\n    let currentWordSet;\n\
    \    let currentWordUniqueLength;\n    for(let i = 1; i < words.length; i++){\n\
    \        currentWordSet = new Set(words[i]);\n        currentWordUniqueLength\
    \ = currentWordSet.size;\n        if(currentWordUniqueLength > maxWordUniqueLength){\n\
    \            maxWord = words[i];\n            maxWordSet = currentWordSet;\n \
    \           maxWordUniqueLength = currentWordUniqueLength;\n        }\n    }\n\
    \    return maxWord;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps4gzmqxr.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps4gzmqxr.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // split the word in the array\n    // find out\
    \ all the letters in the word, store in an array\n    // compare the array with\
    \ all the words in the array\n    // find out which array has the most unique\
    \ number of letters\n    // return that word\n    var maxWord = \"\";\n    var\
    \ maxUnique = 0;\n    for (var index = 0; index < words.length; index++) {\n \
    \       var word = words[index];\n        var foundLetters = [];\n        var\
    \ uniqueLetters = 0;\n        for (var index2 = 0; index2 < word.length; index2++)\
    \ {\n            var letter = word[index2];\n            if (foundLetters.indexOf(letter)\
    \ == -1) {\n                foundLetters.push(letter);\n                uniqueLetters\
    \ += 1;\n            }\n        }\n        if (uniqueLetters > maxUnique) {\n\
    \            maxUnique = uniqueLetters;\n            maxWord = word;\n       \
    \ }\n    }\n    return maxWord;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkvu3riba.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkvu3riba.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let word = words[0];\n    let max = characters(word);\n\
    \    for(let i = 1; i < words.length; i++){\n        let len = characters(words[i]);\n\
    \        if(len > max){\n            max = len;\n            word = words[i];\n\
    \        }\n    }\n    return word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps2ljn1cr.js:13\n    let max = characters(word);\n             \
    \ ^\n\nReferenceError: characters is not defined\n    at find_max (/tmp/tmps2ljn1cr.js:13:15)\n\
    \    at test (/tmp/tmps2ljn1cr.js:28:20)\n    at Object.<anonymous> (/tmp/tmps2ljn1cr.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_chars = 0;\n    var max_word = \"\";\n\
    \    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n  \
    \      var unique_chars = [];\n        for(var j = 0; j < word.length; j++){\n\
    \            var char = word[j];\n            if(unique_chars.indexOf(char) ==\
    \ -1){\n                unique_chars.push(char);\n            }\n        }\n \
    \       if(unique_chars.length > max_chars){\n            max_chars = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplnxzhpwx.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplnxzhpwx.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var letters = words.map(function(str){\n    \
    \    var obj = {};\n        for(var i = 0; i < str.length; i++){\n           \
    \ obj[str[i]] = 1;\n        }\n        return Object.keys(obj).length;\n    });\n\
    \    // var max_letters = Math.max.apply(null, letters);\n    var max_letters\
    \ = Math.max(...letters);\n    var index = letters.indexOf(max_letters);\n   \
    \ return words[index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpve6z535u.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpve6z535u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_length = words[0].length;\n  var max_word\
    \ = words[0];\n  for(var i = 1; i < words.length; i++){\n    if(words[i].length\
    \ > max_length){\n      max_length = words[i].length;\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptawmiwxp.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptawmiwxp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var string_array = [];\n    var max_len;\n  \
    \  var i = 0;\n    words.forEach(function(element){\n        if(i == 0){\n   \
    \         max_len = element.length;\n        }\n        if(max_len < element.length){\n\
    \            max_len = element.length;\n        }\n        i++;\n    });\n   \
    \ var max_len_string = [];\n    words.forEach(function(element){\n        if(element.length\
    \ == max_len){\n            max_len_string.push(element);\n        }\n    });\n\
    \    if(max_len_string.length == 1){\n        return max_len_string[0];\n    }\n\
    \    var uniq = [];\n    max_len_string.forEach(function(element){\n        var\
    \ chars = {};\n        for(var i = 0; i < element.length; i++){\n            if(chars[element[i]]){\n\
    \                chars[element[i]] += 1;\n            }\n            else{\n \
    \               chars[element[i]] = 1;\n            }\n        }\n        var\
    \ len = 0;\n        for(var char in chars){\n            len++;\n        }\n \
    \       uniq.push(len);\n    });\n    var max_uniq = 0;\n    for(var i = 0; i\
    \ < uniq.length; i++){\n        if(max_uniq < uniq[i]){\n            max_uniq\
    \ = uniq[i];\n        }\n    }\n    var uniq_string = [];\n    for(var i = 0;\
    \ i < uniq.length; i++){\n        if(uniq[i] == max_uniq){\n            uniq_string.push(max_len_string[i]);\n\
    \        }\n    }\n    var final_string = [];\n    uniq_string.forEach(function(element){\n\
    \        var chars = {};\n        for(var i = 0; i < element.length; i++){\n \
    \           if(chars[element[i]]){\n                chars[element[i]] += 1;\n\
    \            }\n            else{\n                chars[element[i]] = 1;\n  \
    \         \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmqv88a1h.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = words[0];\n    for(let i = 1; i < words.length;\
    \ i++){\n        let word = words[i];\n        let count_max = 0;\n        let\
    \ count_word = 0;\n        let unique_letter_max = {};\n        let unique_letter_word\
    \ = {};\n        for(let j = 0; j < max.length; j++){\n            if(unique_letter_max[max[j]]\
    \ === undefined){\n                unique_letter_max[max[j]] = max[j];\n     \
    \           count_max++;\n            }\n        }\n        for(let j = 0; j <\
    \ word.length; j++){\n            if(unique_letter_word[word[j]] === undefined){\n\
    \                unique_letter_word[word[j]] = word[j];\n                count_word++;\n\
    \            }\n        }\n        if(count_word > count_max){\n            max\
    \ = word;\n        }\n        else if(count_word === count_max){\n           \
    \ if(word < max){\n                max = word;\n            }\n        }\n   \
    \ }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = {\n    length:0,\n    word:\"\"\n  };\n\
    \  for(var i = 0; i < words.length; i++){\n    var temp = {\n      length:0,\n\
    \      word:words[i]\n    };\n    for(var k = 0; k < words[i].length; k++){\n\
    \      if(temp.word.indexOf(words[i][k]) == -1){\n        temp.length += 1;\n\
    \      }\n    }\n    if(temp.length > max.length){\n      max = temp;\n    }\n\
    \  }\n  return max.word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpcg7i9kz1.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcg7i9kz1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxWord;\n    var maxScore = 0;\n    for(var\
    \ i = 0; i < words.length; i++){\n        var score = 0;\n        var word = words[i];\n\
    \        for(var j = 0; j < word.length; j++){\n            if(word.lastIndexOf(word[j])\
    \ == j){\n                score++;\n            }\n        }\n        if(score\
    \ > maxScore){\n            maxScore = score;\n            maxWord = word;\n \
    \       }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpq0lsbbg5.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq0lsbbg5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max_word = words[0];\n  let max_word_num =\
    \ 0;\n  for (let word of words){\n    if (max_word_num < word.length){\n     \
    \ max_word = word;\n      max_word_num = word.length;\n    }\n  }\n  return max_word;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5zhv6oon.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5zhv6oon.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = \"\";\n  for(var i = 0; i < words.length;\
    \ i++){\n    if(words[i].length > max.length){\n      max = words[i];\n    }\n\
    \  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpny96e6st.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpny96e6st.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var len = words.length;\n    var num = 0;\n \
    \   var result = '';\n    for(var i = 0; i < len; i++){\n        if(unique(words[i])\
    \ > num){\n            num = unique(words[i]);\n            result = words[i];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx8i76joz.js:16\n        if(unique(words[i]) > num){\n        ^\n\
    \nReferenceError: unique is not defined\n    at find_max (/tmp/tmpx8i76joz.js:16:9)\n\
    \    at test (/tmp/tmpx8i76joz.js:28:20)\n    at Object.<anonymous> (/tmp/tmpx8i76joz.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word='';\n    var max=0;\n    for(var i=0;i<words.length;i++){\n\
    \        var u=1;\n        var res=words[i][0];\n        for(var j=1;j<words[i].length;j++){\n\
    \            if(res.indexOf(words[i][j])==-1){\n                res+=words[i][j];\n\
    \                u++;\n            }\n        }\n        if(u>max){\n        \
    \    max=u;\n            word=words[i];\n        }\n    }\n    return word;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyawtpsqg.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyawtpsqg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Variables\n  var max = 0;\n  var idx = 0;\n\
    \  var output = \"\";\n  // Loop for calculation\n  for (var i = 0; i < words.length;\
    \ i++) {\n    if (max < words[i].length) {\n      max = words[i].length;\n   \
    \   idx = i;\n    }\n  }\n  // Convert to output\n  output = words[idx];\n  return\
    \ output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkppu3ib7.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkppu3ib7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpohkygivg.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpohkygivg.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maximumUnique = 0;\n    let maxWord = \"\"\
    ;\n    for(let word of words){\n        let uniqueChar = new Set(word.split(\"\
    \"));\n        if(uniqueChar.size > maximumUnique){\n            maximumUnique\
    \ = uniqueChar.size;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphtbwehgj.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphtbwehgj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar longest_word_index=0;\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length>words[longest_word_index].length){\n\t\t\tlongest_word_index=i;\n\
    \t\t}\n\t}\n\treturn words[longest_word_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph7om6ng8.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph7om6ng8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = \"\";\n  for(var word of words){\n  \
    \  if(max.length == 0){\n      max = word;\n    }\n    else if(max.length < word.length){\n\
    \      max = word;\n    }\n    else if(max.length == word.length){\n      if(max\
    \ < word){\n        max = word;\n      }\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuko8eost.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuko8eost.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar chars = [];\n\tvar unique_chars = [];\n\tvar\
    \ max = 0;\n\tvar index = 0;\n\twords.forEach(function(word, i){\n\t\tchars =\
    \ word.split('');\n\t\tchars.forEach(function(char){\n\t\t\tif(!unique_chars.includes(char)){\n\
    \t\t\t\tunique_chars.push(char);\n\t\t\t}\n\t\t});\n\t\tif(unique_chars.length\
    \ > max){\n\t\t\tmax = unique_chars.length;\n\t\t\tindex = i;\n\t\t}\n\t\tunique_chars\
    \ = [];\n\t});\n\treturn words[index];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp126z5_ni.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp126z5_ni.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_count = 1;\n    var max_unique_word =\
    \ words[0];\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n\
    \        var count = 0;\n        var seen = {};\n        for(var j = 0; j < word.length;\
    \ j++){\n            var ch = word[j];\n            if(seen[ch] === undefined){\n\
    \                count++;\n                seen[ch] = 1;\n            }\n    \
    \    }\n        if(count > max_count){\n            max_count = count;\n     \
    \       max_unique_word = word;\n        }\n    }\n    return max_unique_word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplh05lf85.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplh05lf85.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max_count = 0;\n    let max_words = [];\n\
    \    for(let i = 0; i < words.length; i++){\n        let curr_count = count_unique(words[i]);\n\
    \        if(curr_count > max_count){\n            max_count = curr_count;\n  \
    \          max_words = [words[i]];\n        }\n        else if(curr_count == max_count){\n\
    \            max_words.push(words[i]);\n        }\n    }\n    return max_words[0];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe5utm33t.js:15\n        let curr_count = count_unique(words[i]);\n\
    \                         ^\n\nReferenceError: count_unique is not defined\n \
    \   at find_max (/tmp/tmpe5utm33t.js:15:26)\n    at test (/tmp/tmpe5utm33t.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpe5utm33t.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = words[0];\n    var max_len = unique_letters(words[0]);\n\
    \    for(var i = 1; i < words.length; i++){\n        var len = unique_letters(words[i]);\n\
    \        if(len > max_len){\n            max = words[i];\n            max_len\
    \ = len;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxv9w5kjc.js:13\n    var max_len = unique_letters(words[0]);\n \
    \                 ^\n\nReferenceError: unique_letters is not defined\n    at find_max\
    \ (/tmp/tmpxv9w5kjc.js:13:19)\n    at test (/tmp/tmpxv9w5kjc.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpxv9w5kjc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar longestWord = words[0];\n\tfor(var i = 0; i\
    \ < words.length; i++){\n\t\tif(words[i].length > longestWord.length){\n\t\t\t\
    longestWord = words[i];\n\t\t}\n\t}\n\treturn longestWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpvz_bvx69.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvz_bvx69.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_count = 0;\n\tvar max_word = '';\n\tfor(var\
    \ i=0; i<words.length; i++){\n\t\tvar num_unique = count_unique(words[i]);\n\t\
    \tif(num_unique > max_count){\n\t\t\tmax_count = num_unique;\n\t\t\tmax_word =\
    \ words[i];\n\t\t}\n\t}\n\treturn max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl_57jhzu.js:15\n\t\tvar num_unique = count_unique(words[i]);\n\t\
    \t                 ^\n\nReferenceError: count_unique is not defined\n    at find_max\
    \ (/tmp/tmpl_57jhzu.js:15:20)\n    at test (/tmp/tmpl_57jhzu.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_57jhzu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = {\n        count: 0,\n        word:\
    \ \"\"\n    };\n    for(let word of words){\n        let unique = new Set(word);\n\
    \        if(unique.size > max.count){\n            max.count = unique.size;\n\
    \            max.word = word;\n        }\n    }\n    return max.word;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps7luch_9.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps7luch_9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var unique = [];\n    var output = \"\";\n  \
    \  words.forEach(function(e){\n        unique.push(find_unique(e));\n    });\n\
    \    unique.sort(function(a,b){\n        return b-a;\n    });\n    words.forEach(function(e){\n\
    \        if(find_unique(e) == unique[0]){\n            output = e;\n        }\n\
    \    });\n    return output;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphj4rr39p.js:15\n        unique.push(find_unique(e));\n        \
    \       ^\n\nReferenceError: find_unique is not defined\n    at /tmp/tmphj4rr39p.js:15:16\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmphj4rr39p.js:14:11)\n\
    \    at test (/tmp/tmphj4rr39p.js:32:20)\n    at Object.<anonymous> (/tmp/tmphj4rr39p.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var word = \"\";\n  var max = 0;\n  for(var i =\
    \ 0; i < words.length; i++){\n    var uniqueChars = new Set(words[i]);\n    if(uniqueChars.size\
    \ > max){\n      max = uniqueChars.size;\n      word = words[i];\n    }\n  }\n\
    \  return word;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwccf2g7h.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwccf2g7h.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var word = words[0];\n  var max_unique = 0;\n \
    \ for(var i = 0; i < words.length; i++){\n    var unique = 0;\n    var current_word\
    \ = words[i];\n    var letters = current_word.split(\"\");\n    for(var j = 0;\
    \ j < letters.length; j++){\n      var letter = letters[j];\n      if(current_word.indexOf(letter)\
    \ === current_word.lastIndexOf(letter)){\n        unique++;\n      }\n    }\n\
    \    if(unique > max_unique){\n      max_unique = unique;\n      word = current_word;\n\
    \    }\n  }\n  return word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9ine2_5a.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ine2_5a.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0\n  var winner = ''\n  for (var i =\
    \ 0; i < words.length; i++) {\n    var current = words[i]\n    var len = count_unique(current)\n\
    \    if (len > max){\n      max = len\n      winner = current\n    } else if (len\
    \ == max){\n      if (winner > current){\n        winner = current\n      }\n\
    \    }\n  }\n  return winner\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpff05en66.js:16\n    var len = count_unique(current)\n         \
    \     ^\n\nReferenceError: count_unique is not defined\n    at find_max (/tmp/tmpff05en66.js:16:15)\n\
    \    at test (/tmp/tmpff05en66.js:34:20)\n    at Object.<anonymous> (/tmp/tmpff05en66.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var max = 0;\n    var index = 0;\n    var count = [];\n    for(var i =\
    \ 0; i < words.length; i++){\n        var word = words[i];\n        var uniques\
    \ = \"\";\n        for(var j = 0; j < word.length; j++){\n            var letter\
    \ = word[j];\n            var found = false;\n            for(var k = 0; k < uniques.length;\
    \ k++){\n                if(letter == uniques[k]){\n                    found\
    \ = true;\n                }\n            }\n            if(!found){\n       \
    \         uniques += letter;\n            }\n        }\n        count.push(uniques.length);\n\
    \        if(uniques.length > max){\n            max = uniques.length;\n      \
    \      index = i;\n        }\n    }\n    console.log(count);\n    return words[index];\n\
    }\nvar list1 = [\"name\", \"of\", \"string\"];\nvar list2 = [\"name\", \"enam\"\
    , \"game\"];\nvar list3 = [\"aaaaaaa\", \"bb\", \"cc\"];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpoan1io90.js:49:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpoan1io90.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 4, 2, 6 ]

    [ 4, 4, 4 ]

    '
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = words[0]\n    for(let i = 1; i < words.length;\
    \ i++){\n        if(max.length < words[i].length){\n            max = words[i]\n\
    \        }\n    }\n    return max\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnfyv60ua.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnfyv60ua.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // YOUR CODE HERE\n  var obj = {};\n  var arr =\
    \ [];\n  var count = 0;\n  var index = 0;\n  for(var i = 0; i < words.length;\
    \ i++){\n    obj[words[i]] = {};\n    for(var j = 0; j < words[i].length; j++){\n\
    \      if(!obj[words[i]][words[i][j]]){\n        obj[words[i]][words[i][j]] =\
    \ 1;\n      }else{\n        obj[words[i]][words[i][j]] = 0;\n      }\n    }\n\
    \    for(var key in obj[words[i]]){\n      if(obj[words[i]][key] === 1){\n   \
    \     count++;\n      }\n    }\n    arr.push(count);\n    count = 0;\n  }\n  var\
    \ max = Math.max.apply(null, arr);\n  for(var key in obj){\n    if(Object.keys(obj[key]).length\
    \ === max){\n      return key;\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdnw1e8rq.js:48:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdnw1e8rq.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if(words == undefined){\n        return \"Invalid\
    \ Input\";\n    }\n    var unique_chars = [];\n    var unique_words = [];\n  \
    \  var max_unique = 0;\n    var lex_word = \"\";\n    var first_word = \"\";\n\
    \    for(var i = 0; i < words.length; i++){\n        if(words[i] == undefined){\n\
    \            return \"Invalid Input\";\n        }\n        var char_array = words[i].split(\"\
    \");\n        for(var j = 0; j < char_array.length; j++){\n            if(unique_chars.indexOf(char_array[j])\
    \ == -1){\n                unique_chars.push(char_array[j]);\n            }\n\
    \        }\n        if(unique_chars.length > max_unique){\n            max_unique\
    \ = unique_chars.length;\n            lex_word = words[i];\n        }\n      \
    \  unique_words.push(unique_chars.length);\n        unique_chars = [];\n    }\n\
    \    first_word = words[unique_words.indexOf(max_unique)];\n    return lex_word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpvpsf3k9s.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvpsf3k9s.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var answer = \"\";\n  for(var i\
    \ = 0; i < words.length; i++){\n    var unique = [];\n    for(var j = 0; j < words[i].length;\
    \ j++){\n      if(unique.indexOf(words[i][j]) < 0){\n        unique.push(words[i][j]);\n\
    \      }\n    }\n    if(unique.length > max){\n      max = unique.length;\n  \
    \    answer = words[i];\n    }\n  }\n  return answer;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpf0otf7n3.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf0otf7n3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxUniqueChars = 0;\n    var maxWord = \"\
    \";\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n\
    \        var uniqueChars = 0;\n        var letterCount = {};\n        for(var\
    \ j = 0; j < word.length; j++){\n            var letter = word[j];\n         \
    \   if(letterCount[letter] == undefined){\n                letterCount[letter]\
    \ = 1;\n                uniqueChars += 1;\n            }\n        }\n        if(uniqueChars\
    \ > maxUniqueChars){\n            maxUniqueChars = uniqueChars;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbh81omwy.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbh81omwy.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word = words[0];\n  var max_chars = [];\n\
    \  for (var i = 0; i < words.length; i++) {\n    var chars = [];\n    for (var\
    \ j = 0; j < words[i].length; j++) {\n      if (chars.indexOf(words[i][j]) ==\
    \ -1) {\n        chars.push(words[i][j]);\n      }\n    }\n    if (chars.length\
    \ > max_chars.length) {\n      max_chars = chars;\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4_s7wwm8.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4_s7wwm8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var arr = [];\n  for(var i = 0;\
    \ i < words.length; i++){\n    var count = 0;\n    for(var j = 0; j < words[i].length;\
    \ j++){\n      for(var k = j + 1; k < words[i].length; k++){\n        if(words[i][j]\
    \ === words[i][k]){\n          break;\n        }\n        if(k === words[i].length\
    \ - 1){\n          count++;\n        }\n      }\n    }\n    if(count > max){\n\
    \      max = count;\n      arr = [words[i]];\n    }\n    else if(count === max){\n\
    \      arr.push(words[i]);\n    }\n  }\n  if(arr.length === 1){\n    return arr[0];\n\
    \  }\n  else{\n    var min = arr[0];\n    for(var l = 1; l < arr.length; l++){\n\
    \      if(arr[l] < min){\n        min = arr[l];\n      }\n    }\n    return min;\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //var max = words[0];\n  var counts = {};\n  var\
    \ maxWord = \"\";\n  var max = 0;\n  var temp = 0;\n  for(var i = 0; i < words.length;\
    \ i++){\n    counts[words[i]] = {};\n    for(var j = 0; j < words[i].length; j++){\n\
    \      if(counts[words[i]][words[i][j]] === undefined){\n        counts[words[i]][words[i][j]]\
    \ = 1;\n        temp += 1;\n      }else{\n        counts[words[i]][words[i][j]]\
    \ += 1;\n      }\n    }\n    if(temp > max){\n      max = temp;\n      maxWord\
    \ = words[i];\n    }\n    temp = 0;\n  }\n  return maxWord;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpygs81jhb.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpygs81jhb.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max_unique_characters = 0;\n  let max_unique_characters_word\
    \ = \"\";\n  for(let i = 0; i < words.length; i++){\n    // is a number of unique\
    \ characters in the word i\n    let word_unique_characters = find_unique_characters(words[i]);\n\
    \    if(word_unique_characters > max_unique_characters){\n      max_unique_characters\
    \ = word_unique_characters;\n      max_unique_characters_word = words[i];\n  \
    \  }\n  }\n  return max_unique_characters_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp03cdr_qu.js:16\n    let word_unique_characters = find_unique_characters(words[i]);\n\
    \                                 ^\n\nReferenceError: find_unique_characters\
    \ is not defined\n    at find_max (/tmp/tmp03cdr_qu.js:16:34)\n    at test (/tmp/tmp03cdr_qu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmp03cdr_qu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_count = 0;\n\
    \    var count;\n    for(var i = 0; i < words.length; i++){\n        count = 0;\n\
    \        for(var j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j])\
    \ == j){\n                count++;\n            }\n        }\n        if(count\
    \ > max_count){\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpca7k9kq8.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpca7k9kq8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max_word = words[0];\n  for (let i = 1; i <\
    \ words.length; i++){\n    if (max_word.length < words[i].length){\n      max_word\
    \ = words[i];\n    }\n  }\n  return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprlon375b.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprlon375b.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxChar = '';\n    for(var i = 0; i < words.length;\
    \ i++){\n        if(maxChar.length < words[i].length){\n            maxChar =\
    \ words[i];\n        }\n    }\n    return maxChar;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqglrd73o.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqglrd73o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = '';\n  for(var i = 0;\
    \ i < words.length; i++){\n    var current = words[i];\n    var uniques = count_uniques(current);\n\
    \    if(uniques > max){\n      max = uniques;\n      word = current;\n    }\n\
    \  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqn_grw0x.js:16\n    var uniques = count_uniques(current);\n   \
    \               ^\n\nReferenceError: count_uniques is not defined\n    at find_max\
    \ (/tmp/tmpqn_grw0x.js:16:19)\n    at test (/tmp/tmpqn_grw0x.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqn_grw0x.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var chars= \"\";\n    var max = 0;\n    var word;\n\
    \    for(var i=0; i<words.length; i++){\n        word = words[i];\n        chars\
    \ = chars_in_word(word);\n        if(chars.length>max){\n            max = chars.length;\n\
    \            word = words[i];\n        }\n    }\n    return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp499lkakd.js:17\n        chars = chars_in_word(word);\n        ^\n\
    \nReferenceError: chars_in_word is not defined\n    at find_max (/tmp/tmp499lkakd.js:17:9)\n\
    \    at test (/tmp/tmp499lkakd.js:31:20)\n    at Object.<anonymous> (/tmp/tmp499lkakd.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // your code here\n  let max=0;\n  let result=\"\
    \";\n  for(let i=0;i<words.length;i++){\n    let counter=0;\n    for(let j=0;j<words[i].length;j++){\n\
    \      if(words[i].indexOf(words[i][j])===j){\n        counter++;\n      }\n \
    \   }\n    if(counter>max){\n      max=counter;\n      result=words[i];\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps_7u60mg.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps_7u60mg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var unique = '';\n    var unique_max = 0;\n \
    \   for (var i = 0; i < words.length; i++){\n        for (var j = 0; j < words[i].length;\
    \ j++){\n            if (words[i].indexOf(words[i][j]) == j){\n              \
    \  unique += words[i][j];\n            }\n        }\n        if (unique.length\
    \ > unique_max){\n            unique_max = unique.length;\n            out = words[i];\n\
    \        }\n        unique = '';\n    }\n    return out;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp57xtxu0i.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp57xtxu0i.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar maximum = 0;\n\tvar max_word = \"\";\n\twords.forEach(function(word){\n\
    \t\tvar strlen = word.length;\n\t\tvar uniq = [...new Set(word)];\n\t\tvar len\
    \ = uniq.length;\n\t\tif(len>maximum){\n\t\t\tmaximum = len;\n\t\t\tmax_word =\
    \ word;\n\t\t}\n\t});\n\treturn max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa7wl2hkk.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa7wl2hkk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var count = 0;\n    var result = '';\n    var\
    \ max_count = 0;\n    for(var i = 0; i < words.length; i++){\n        var word\
    \ = words[i];\n        count = 0;\n        var hash = {};\n        for(var j =\
    \ 0; j < word.length; j++){\n            if(!hash[word[j]]){\n               \
    \ hash[word[j]] = true;\n                count++;\n            }\n        }\n\
    \        if(count > max_count){\n            max_count = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgion5mop.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgion5mop.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var longest = \"\";\n    for(var i = 0; i < words.length;\
    \ i++){\n        var current = words[i];\n        var current_chars = \"\";\n\
    \        var current_longest = \"\";\n        for(var j = 0; j < current.length;\
    \ j++){\n            if(current_chars.indexOf(current[j]) == -1){\n          \
    \      current_chars += current[j];\n                current_longest += current[j];\n\
    \            }\n        }\n        if(current_longest.length > longest.length){\n\
    \            longest = current_longest;\n        }\n    }\n    return longest;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4qkqfv_y.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4qkqfv_y.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var count = 0;\n  var max = 0;\n  var result =\
    \ '';\n  for(var i = 0; i < words.length; i++){\n    for(var j = 0; j < words[i].length;\
    \ j++){\n      if(words[i].lastIndexOf(words[i][j]) === words[i].indexOf(words[i][j])){\n\
    \        count++;\n      }\n    }\n    if(count > max){\n      max = count;\n\
    \      result = words[i];\n    } else if(count === max){\n      if(words[i] <\
    \ result){\n        result = words[i];\n      }\n    }\n    count = 0;\n  }\n\
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'aaaaaaa'\n    at test (/tmp/tmp3ysm5f3m.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3ysm5f3m.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'aaaaaaa',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word;\n  var max_word_count = 0;\n  var\
    \ current_word_count;\n  var word_count = {};\n  for (var i = 0; i < words.length;\
    \ i++) {\n    current_word_count = 0;\n    for (var j = 0; j < words[i].length;\
    \ j++) {\n      if (words[i][j] in word_count) {\n        word_count[words[i][j]]++;\n\
    \      } else {\n        word_count[words[i][j]] = 1;\n        current_word_count++;\n\
    \      }\n    }\n    if (current_word_count > max_word_count) {\n      max_word_count\
    \ = current_word_count;\n      max_word = words[i];\n    }\n    word_count = {};\n\
    \  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp78avewxu.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp78avewxu.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var i;\n  var res = 0;\n  var index;\n  for(i =\
    \ 0; i < words.length; i++){\n    if(num_unique_char(words[i]) > res){\n     \
    \ res = num_unique_char(words[i]);\n      index = i;\n    }\n  }\n  return words[index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpueou0sjv.js:16\n    if(num_unique_char(words[i]) > res){\n    ^\n\
    \nReferenceError: num_unique_char is not defined\n    at find_max (/tmp/tmpueou0sjv.js:16:5)\n\
    \    at test (/tmp/tmpueou0sjv.js:29:20)\n    at Object.<anonymous> (/tmp/tmpueou0sjv.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var wordCount = words.length;\n    var maxUniqueChar;\n\
    \    var maxUniqueCharWord;\n    for(var i = 0; i < wordCount; i++){\n       \
    \ var currentWord = words[i];\n        var currentWordLength = currentWord.length;\n\
    \        var uniqueChar = 0;\n        for(var j = 0; j < currentWordLength; j++){\n\
    \            var currentChar = currentWord[j];\n            var currentCharIndex\
    \ = currentWord.indexOf(currentChar);\n            var lastIndex = currentWord.lastIndexOf(currentChar);\n\
    \            if(currentCharIndex == lastIndex){\n                uniqueChar++;\n\
    \            }\n        }\n        if(!maxUniqueChar){\n            maxUniqueChar\
    \ = uniqueChar;\n            maxUniqueCharWord = currentWord;\n        }else if(uniqueChar\
    \ > maxUniqueChar){\n            maxUniqueChar = uniqueChar;\n            maxUniqueCharWord\
    \ = currentWord;\n        }\n    }\n    return maxUniqueCharWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpt9b43tjm.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt9b43tjm.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let max_word = '';\n  for (let\
    \ w of words){\n    let s = new Set(w);\n    if (s.size > max){\n      max = s.size;\n\
    \      max_word = w;\n    }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_ndef_10.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ndef_10.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if (words.length == 0){\n        return null;\n\
    \    }\n    var max_word = words[0];\n    var max_length = unique_chars(words[0]);\n\
    \    for (var i = 1; i < words.length; i++){\n        if (unique_chars(words[i])\
    \ > max_length){\n            max_word = words[i];\n            max_length = unique_chars(words[i]);\n\
    \        }\n    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpawconbe1.js:16\n    var max_length = unique_chars(words[0]);\n\
    \                     ^\n\nReferenceError: unique_chars is not defined\n    at\
    \ find_max (/tmp/tmpawconbe1.js:16:22)\n    at test (/tmp/tmpawconbe1.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpawconbe1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let countMax = 0;\n    let maxWord = \"\";\n\
    \    for(let word of words){\n        let uniqueChars = 0;\n        for(let letter\
    \ of word){\n            if(word.indexOf(letter) === word.lastIndexOf(letter)){\n\
    \                uniqueChars++;\n            }\n        }\n        if(uniqueChars\
    \ > countMax){\n            countMax = uniqueChars;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpoy7e5wfv.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpoy7e5wfv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var count = 0;\n    var maxWord\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        count = 0;\n  \
    \      for(var j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j])\
    \ == j){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n            maxWord = words[i];\n       \
    \ }else if(count == max){\n            if(words[i] < maxWord){\n             \
    \   maxWord = words[i];\n            }\n        }\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max = 0;\n\tvar pos = 0;\n\tfor(var i = 0;\
    \ i < words.length; i++){\n\t\tif(unique(words[i]) > max){\n\t\t\tmax = unique(words[i]);\n\
    \t\t\tpos = i;\n\t\t}\n\t}\n\treturn words[pos];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpg78k9ekr.js:15\n\t\tif(unique(words[i]) > max){\n\t\t^\n\nReferenceError:\
    \ unique is not defined\n    at find_max (/tmp/tmpg78k9ekr.js:15:3)\n    at test\
    \ (/tmp/tmpg78k9ekr.js:27:20)\n    at Object.<anonymous> (/tmp/tmpg78k9ekr.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar count = 0;\n\tvar length = words.length;\n\t\
    var count = 0;\n\tvar max = 0;\n\tvar index = 0;\n\tfor(var i = 0; i < length;\
    \ i++){\n\t\tcount = 0;\n\t\tvar word = words[i];\n\t\tfor(var j = 0; j < word.length;\
    \ j++){\n\t\t\tif(word.lastIndexOf(word[j]) === j){\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t\tindex = i;\n\t\t}\n\t\
    }\n\treturn words[index];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xxsw_pv.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xxsw_pv.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxLength = 0;\n    var maxWord = \"\";\n\
    \    for(var i = 0; i < words.length; i++){\n        var curr_word = words[i];\n\
    \        var curr_len = uniqueChar(curr_word);\n        if(curr_len > maxLength){\n\
    \            maxLength = curr_len;\n            maxWord = curr_word;\n       \
    \ }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1590b7_n.js:16\n        var curr_len = uniqueChar(curr_word);\n\
    \                       ^\n\nReferenceError: uniqueChar is not defined\n    at\
    \ find_max (/tmp/tmp1590b7_n.js:16:24)\n    at test (/tmp/tmp1590b7_n.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1590b7_n.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max=0;\n    var word=\"\";\n    var unique=[];\n\
    \    var count=0;\n    var max_count=0;\n    var max_word=\"\";\n    for(var i=0;i<words.length;i++){\n\
    \        unique=[];\n        count=0;\n        for(var j=0;j<words[i].length;j++){\n\
    \            if(unique.indexOf(words[i][j])==-1){\n                unique.push(words[i][j]);\n\
    \                count++;\n            }\n        }\n        if(count>max_count){\n\
    \            max_count=count;\n            max_word=words[i];\n        }\n   \
    \ }\n    return max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqf0y7cmj.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqf0y7cmj.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let max_word = \"\";\n  for(let\
    \ i = 0; i < words.length; i++){\n    if(uniq(words[i]).length > max){\n     \
    \ max = uniq(words[i]).length;\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpb01fad6d.js:15\n    if(uniq(words[i]).length > max){\n    ^\n\n\
    ReferenceError: uniq is not defined\n    at find_max (/tmp/tmpb01fad6d.js:15:5)\n\
    \    at test (/tmp/tmpb01fad6d.js:28:20)\n    at Object.<anonymous> (/tmp/tmpb01fad6d.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var uniq_char_counts = [];\n    var unique_count;\n\
    \    var max_index = 0;\n    for (var i = 0; i < words.length; i++){\n       \
    \ unique_count = get_unique_char_count(words[i]);\n        uniq_char_counts.push(unique_count);\n\
    \        if (unique_count > uniq_char_counts[max_index]){\n            max_index\
    \ = i;\n        }\n    }\n    return words[max_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_zahrnbt.js:16\n        unique_count = get_unique_char_count(words[i]);\n\
    \        ^\n\nReferenceError: get_unique_char_count is not defined\n    at find_max\
    \ (/tmp/tmp_zahrnbt.js:16:9)\n    at test (/tmp/tmp_zahrnbt.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_zahrnbt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let unique={};\n  let max=0;\n  let word='';\n\
    \  for(let i=0;i<words.length;i++){\n    unique={};\n    for(let j=0;j<words[i].length;j++){\n\
    \      if(unique[words[i][j]]===undefined){\n        unique[words[i][j]]=1;\n\
    \      }\n    }\n    let length=Object.keys(unique).length;\n    if(length>max\
    \ || (length==max && words[i]<word)){\n      max=length;\n      word=words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_num = 0;\n\
    \    for(var i = 0; i < words.length; i++){\n        word = words[i];\n      \
    \  var num = 0;\n        for(var j = 0; j < word.length; j++){\n            for(var\
    \ k = j+1; k < word.length; k++){\n                if(word[j] == word[k]){\n \
    \                   num++;\n                }\n            }\n        }\n    \
    \    if(num == 0){\n            num = word.length;\n        }\n        if(num\
    \ > max_num){\n            max_num = num;\n            max_word = word;\n    \
    \    }\n    }\n    return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1hbgqeyc.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1hbgqeyc.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = words[0];\n  var max_count = 0;\n  var\
    \ count = 0;\n  var chars = {};\n  for(var i = 0; i < words.length; i++){\n  \
    \  count = 0;\n    chars = {};\n    for(var j = 0; j < words[i].length; j++){\n\
    \      if(!chars[words[i][j]]){\n        chars[words[i][j]] = 1;\n        count++;\n\
    \      }\n    }\n    if(count > max_count){\n      max_count = count;\n      max\
    \ = words[i];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa9657206.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa9657206.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976972
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar maxString = words[0];\n\tvar maxUniq = count_uniq(words[0]);\n\
    \tfor(var i = 1; i < words.length; i++){\n\t\tvar uniq = count_uniq(words[i]);\n\
    \t\tif(uniq > maxUniq){\n\t\t\tmaxUniq = uniq;\n\t\t\tmaxString = words[i];\n\t\
    \t}\n\t}\n\treturn maxString;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9_3qbotg.js:13\n\tvar maxUniq = count_uniq(words[0]);\n\t     \
    \         ^\n\nReferenceError: count_uniq is not defined\n    at find_max (/tmp/tmp9_3qbotg.js:13:16)\n\
    \    at test (/tmp/tmp9_3qbotg.js:29:20)\n    at Object.<anonymous> (/tmp/tmp9_3qbotg.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var current_max = words[0];\n    var frequency\
    \ = {};\n    var max = 0;\n    for(var i = 0; i < words.length; i++){\n      \
    \  frequency[words[i]] = 0;\n        for(var j = 0; j < words[i].length; j++){\n\
    \            frequency[words[i]]++;\n        }\n        if(frequency[words[i]]\
    \ > max){\n            max = frequency[words[i]];\n            current_max = words[i];\n\
    \        }\n    }\n    return current_max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppa7e9rhr.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppa7e9rhr.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let chars = {};\n    let max_word;\n    for(let\
    \ word of words){\n        let char_set = new Set(word);\n        if(char_set.size\
    \ > Object.keys(chars).length){\n            chars = char_set;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpd8og5l09.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd8og5l09.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var result = words[0];\n  var max = unique_char(words[0]);\n\
    \  for(var i = 1; i < words.length; i++){\n    var item = words[i];\n    var unique_char_no\
    \ = unique_char(item);\n    if(unique_char_no > max){\n      max = unique_char_no;\n\
    \      result = item;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2etu5qxd.js:13\n  var max = unique_char(words[0]);\n          \
    \  ^\n\nReferenceError: unique_char is not defined\n    at find_max (/tmp/tmp2etu5qxd.js:13:13)\n\
    \    at test (/tmp/tmp2etu5qxd.js:30:20)\n    at Object.<anonymous> (/tmp/tmp2etu5qxd.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Input an array of strings\n  //Output a string\n\
    \  //Edge Cases: There are no edge cases\n  //Assumptions:\n  //\n  //\n  //Pseudocode:\n\
    \  //Iterate through the array of strings\n  //For each string, count the number\
    \ of unique characters\n  //Store the highest number of unique characters\n  //Return\
    \ the string with the highest number of unique characters\n  //\n  //\n  //\n\
    \  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpa_8ra7vu.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa_8ra7vu.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var i = 0;\n    var index =\
    \ 0;\n    var current_max = words[0];\n    while(i < words.length){\n        if(words[i].length\
    \ > max){\n            max = words[i].length;\n            current_max = words[i];\n\
    \            index = i;\n        }\n        i++;\n    }\n    if(index != 0){\n\
    \        for(var i = 0; i < index; i++){\n            if(words[i].length === max){\n\
    \                current_max = words[i];\n            }\n        }\n    }\n  \
    \  return current_max;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9ykq871d.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ykq871d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var result = words[0];\n  for(var\
    \ i = 0; i < words.length; i++){\n    var word = words[i];\n    var unique_characters\
    \ = [];\n    for(var j = 0; j < word.length; j++){\n      var char = word[j];\n\
    \      if(unique_characters.indexOf(char) === -1){\n        unique_characters.push(char);\n\
    \      }\n    }\n    if(unique_characters.length > max){\n      max = unique_characters.length;\n\
    \      result = word;\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpb4t_om0u.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpb4t_om0u.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var arr = words.slice();\n    var max = 0;\n\
    \    var max_str = \"\";\n    for(var i = 0; i < arr.length; i++){\n        var\
    \ count = {};\n        for(var j = 0; j < arr[i].length; j++){\n            if(!count[arr[i][j]]){\n\
    \                count[arr[i][j]] = 1;\n            }\n        }\n        var\
    \ num_unique = Object.keys(count).length;\n        if(num_unique > max){\n   \
    \         max = num_unique;\n            max_str = arr[i];\n        }else if(num_unique\
    \ == max){\n            if(arr[i] < max_str){\n                max_str = arr[i];\n\
    \            }\n        }\n    }\n    return max_str;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var dictionary = {};\n  var max = 0;\n  var result\
    \ = '';\n  for(var i = 0; i < words.length; i++){\n    var count = 0;\n    for(var\
    \ j = 0; j < words[i].length; j++){\n      if(dictionary[words[i][j]]){\n    \
    \    dictionary[words[i][j]] += 1;\n      }else{\n        dictionary[words[i][j]]\
    \ = 1;\n        count++;\n      }\n    }\n    if(count > max){\n      max = count;\n\
    \      result = words[i];\n    }\n    dictionary = {};\n  }\n  return result;\n\
    }\n\nvar words = [\"name\", \"of\", \"string\"];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdj_kkwzu.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdj_kkwzu.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar word = {};\n\tvar max = 0;\n\tvar max_word\
    \ = \"\";\n\tfor(var i=0; i<words.length; i++){\n\t\tvar w = words[i];\n\t\tvar\
    \ count = 0;\n\t\tfor(var j=0; j<w.length; j++){\n\t\t\tvar ch = w[j];\n\t\t\t\
    if(!word[ch]){\n\t\t\t\tword[ch] = true;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \tif(count > max){\n\t\t\tmax = count;\n\t\t\tmax_word = w;\n\t\t}\n\t\tword =\
    \ {};\n\t}\n\treturn max_word;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsplexidp.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsplexidp.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max_word = \"\";\n    let max_count = 0;\n\
    \    let current_count = 0;\n    let word_dict = {};\n    let alphabet_list =\
    \ [...Array(26).keys()].map(\n        (x) => String.fromCharCode(97 + x)\n   \
    \ );\n    for (const word of words){\n        for (const char of word){\n    \
    \        if (char in word_dict){\n                word_dict[char] += 1;\n    \
    \        } else {\n                word_dict[char] = 1;\n            }\n     \
    \   }\n        current_count = Object.keys(word_dict).length;\n        if (current_count\
    \ > max_count){\n            max_count = current_count;\n            max_word\
    \ = word;\n        } else if (current_count === max_count){\n            for (const\
    \ char of alphabet_list){\n                if (word.includes(char) && !max_word.includes(char)){\n\
    \                    max_word = word;\n                    break;\n          \
    \      }\n            }\n        }\n        word_dict = {};\n    }\n    return\
    \ max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpigvfyrbv.js:49:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpigvfyrbv.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var i,j,c,elem;\n  var max=1;\n  var maxWord=\"\
    \";\n  for(i=0;i<words.length;i++){\n    c=0;\n    for(j=0;j<words[i].length;j++){\n\
    \      elem=words[i][j];\n      if(words[i].indexOf(elem)==words[i].lastIndexOf(elem))\n\
    \        c++;\n    }\n    if(c>max){\n      max=c;\n      maxWord=words[i];\n\
    \    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp19v6y7ml.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp19v6y7ml.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_string = words[0];\n    for(var word\
    \ in words){\n        if(unique(words[word]) > unique(max_string)){\n        \
    \    max_string = words[word];\n        }\n    }\n    return max_string;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp61c0fxc5.js:14\n        if(unique(words[word]) > unique(max_string)){\n\
    \        ^\n\nReferenceError: unique is not defined\n    at find_max (/tmp/tmp61c0fxc5.js:14:9)\n\
    \    at test (/tmp/tmp61c0fxc5.js:26:20)\n    at Object.<anonymous> (/tmp/tmp61c0fxc5.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // YOUR CODE GOES HERE\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp8ngwu3hi.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8ngwu3hi.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if (words.length === 0) { return \"\"}\n  let max_unique\
    \ = 0;\n  let max_unique_string = \"\";\n  words.forEach(function(word) {\n  \
    \  let count = unique_char_count(word);\n    if (count > max_unique) {\n     \
    \ max_unique = count;\n      max_unique_string = word;\n    }\n  });\n  return\
    \ max_unique_string;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcp3rzhe5.js:16\n    let count = unique_char_count(word);\n    \
    \            ^\n\nReferenceError: unique_char_count is not defined\n    at /tmp/tmpcp3rzhe5.js:16:17\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmpcp3rzhe5.js:15:9)\n\
    \    at test (/tmp/tmpcp3rzhe5.js:29:20)\n    at Object.<anonymous> (/tmp/tmpcp3rzhe5.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_count = 0;\n\
    \    for(var i = 0; i < words.length; i++){\n        var unique_characters = {};\n\
    \        var unique_count = 0;\n        for(var j = 0; j < words[i].length; j++){\n\
    \            if(unique_characters[words[i][j]] === undefined){\n             \
    \   unique_characters[words[i][j]] = true;\n                unique_count += 1;\n\
    \            }\n        }\n        if(unique_count > max_count){\n           \
    \ max_count = unique_count;\n            max_word = words[i];\n        }\n   \
    \ }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7wd3_5xt.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7wd3_5xt.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // function duplicates(word){\n    //     var\
    \ count = 0;\n    //     var uniques = [];\n    //     for(var i = 0; i < word.length;\
    \ i ++){\n    //         if (word.indexOf(word[i]) == i){\n    //            \
    \ count ++;\n    //             uniques.push(word[i]);\n    //         }\n   \
    \ //     }\n    //     return [count, uniques.sort().join(\"\")];\n    // }\n\
    \    //\n    // var max_count = 0;\n    // var max_index = 0;\n    // var max_list\
    \ = [];\n    // for(var i = 0; i < words.length; i ++){\n    //     var current\
    \ = duplicates(words[i]);\n    //     if (current[0] > max_count){\n    //   \
    \      max_count = current[0];\n    //         max_index = i;\n    //        \
    \ max_list = [words[i]];\n    //     } else if (current[0] == max_count){\n  \
    \  //         max_list.push(words[i]);\n    //     }\n    // }\n    // if (max_list.length\
    \ == 1){\n    //     return max_list[0];\n    // } else {\n    //     max_list.sort();\n\
    \    //     return max_list[0];\n    // }\n    return words.reduce(function(acc,\
    \ curr){\n        return acc + curr.split(\"\").filter(function(item, index, words){\n\
    \            return words.indexOf(item) == index;\n        }).length;\n    });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name26'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp8qfg3o_j.js:54:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp8qfg3o_j.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name26',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxWord = \"\";\n  let maxUnique = 0;\n  for(let\
    \ i = 0; i < words.length; i++){\n    let current = words[i];\n    let currentUnique\
    \ = countUnique(current);\n    if(currentUnique > maxUnique){\n      maxUnique\
    \ = currentUnique;\n      maxWord = current;\n    } else if(currentUnique ===\
    \ maxUnique){\n      if(current > maxWord){\n        maxWord = current;\n    \
    \  }\n    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp06qhb0ej.js:16\n    let currentUnique = countUnique(current);\n\
    \                        ^\n\nReferenceError: countUnique is not defined\n   \
    \ at find_max (/tmp/tmp06qhb0ej.js:16:25)\n    at test (/tmp/tmp06qhb0ej.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmp06qhb0ej.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let current_max = 0;\n  let current_word = \"\"\
    ;\n  let unique_count = 0;\n  let unique_list = []\n  for (var i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    unique_list = [];\n    for (var j = 0;\
    \ j < word.length; j++) {\n      let letter = word[j];\n      if (!unique_list.includes(letter))\
    \ {\n        unique_list.push(letter);\n      }\n    }\n    if (unique_list.length\
    \ > current_max) {\n      current_max = unique_list.length;\n      current_word\
    \ = word;\n    } else if (unique_list.length === current_max) {\n      if (word\
    \ < current_word) {\n        current_word = word;\n      }\n    }\n  }\n  return\
    \ current_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Define our starting max.\n    var max = words[0];\n\
    \    // Define a variable that will be a dictionary we use to check\n    // if\
    \ a character has already been used.\n    var dict = {};\n    // Loop through\
    \ the array of words\n    for (var i = 0; i < words.length; i++){\n        //\
    \ Reset the dictionary for each word\n        dict = {};\n        // Loop through\
    \ each character in the word.\n        for (var j = 0; j < words[i].length; j++){\n\
    \            // Use the character as the key and set its value to 1.\n       \
    \     dict[words[i][j]] = 1;\n        }\n        // If the length of the dictionary\
    \ is greater than the length of\n        // the max, update max.\n        if (Object.keys(dict).length\
    \ > max.length){\n            max = words[i];\n        }\n    }\n    return max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8h3q18ld.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8h3q18ld.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar greatest = words[0];\n\tvar current = words[0];\n\
    \tfor(var i = 0; i < words.length; i++){\n\t\tvar unique = 0;\n\t\tvar current\
    \ = words[i];\n\t\tfor(var j = 0; j < current.length; j++){\n\t\t\tif(current.indexOf(current[j])\
    \ === current.lastIndexOf(current[j])){\n\t\t\t\tunique += 1;\n\t\t\t}\n\t\t}\n\
    \t\tif(unique > greatest.length){\n\t\t\tgreatest = current;\n\t\t}\n\t}\n\treturn\
    \ greatest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpf1d5bsif.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf1d5bsif.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxUnique = -1;\n    var maxWord = \"\";\n\
    \    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n  \
    \      var uniqueChars = {};\n        for(var j = 0; j < word.length; j++){\n\
    \            uniqueChars[word[j]] = true;\n        }\n        if(Object.keys(uniqueChars).length\
    \ > maxUnique){\n            maxUnique = Object.keys(uniqueChars).length;\n  \
    \          maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpedqe3qbb.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpedqe3qbb.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_char = 0;\n\
    \    for(var i = 0; i < words.length; i++){\n        var char_count = 0;\n   \
    \     for(var j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j])\
    \ == j){\n                char_count++;\n            }\n        }\n        if(char_count\
    \ > max_char){\n            max_char = char_count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyfz2cipe.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyfz2cipe.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_unique_chars = 0;\n\tvar max_unique_char_word\
    \ = \"\";\n\twords.forEach(function(word){\n\t\tif(unique_chars(word) > max_unique_chars){\n\
    \t\t\tmax_unique_chars = unique_chars(word);\n\t\t\tmax_unique_char_word = word;\n\
    \t\t}\n\t\telse if(unique_chars(word) == max_unique_chars){\n\t\t\tif(word < max_unique_char_word){\n\
    \t\t\t\tmax_unique_char_word = word;\n\t\t\t}\n\t\t}\n\t});\n\treturn max_unique_char_word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpf39ppivj.js:15\n\t\tif(unique_chars(word) > max_unique_chars){\n\
    \t\t^\n\nReferenceError: unique_chars is not defined\n    at /tmp/tmpf39ppivj.js:15:3\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmpf39ppivj.js:14:8)\n\
    \    at test (/tmp/tmpf39ppivj.js:33:20)\n    at Object.<anonymous> (/tmp/tmpf39ppivj.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var counter = 0;\n  var highest_words = [];\n \
    \ for (var i = 0; i < words.length; i++) {\n    counter = 0;\n    for (var x =\
    \ 0; x < words[i].length; x++) {\n      var char_check = words[i][x];\n      if(words[i].indexOf(char_check)\
    \ === words[i].lastIndexOf(char_check)){\n        counter++;\n      }\n    }\n\
    \    if(counter > highest_words.length){\n      highest_words = [words[i]];\n\
    \    } else if(counter === highest_words.length){\n      highest_words.push(words[i]);\n\
    \    }\n  }\n  return highest_words[0];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpu1qt4za9.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpu1qt4za9.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxLength = 0;\n  var maxWord = \"\";\n  for(var\
    \ i = 0; i < words.length; i++){\n    var uniqueLength = uniqueCharacters(words[i]);\n\
    \    if(uniqueLength > maxLength){\n      maxLength = uniqueLength;\n      maxWord\
    \ = words[i];\n    } else if(uniqueLength === maxLength){\n      if(words[i] <\
    \ maxWord){\n        maxWord = words[i];\n      }\n    }\n  }\n  return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgaeca4yr.js:15\n    var uniqueLength = uniqueCharacters(words[i]);\n\
    \                       ^\n\nReferenceError: uniqueCharacters is not defined\n\
    \    at find_max (/tmp/tmpgaeca4yr.js:15:24)\n    at test (/tmp/tmpgaeca4yr.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpgaeca4yr.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max_length = 0;\n    let max_word = '';\n\
    \    for(let i = 0; i < words.length; i++){\n        let c_word = words[i];\n\
    \        if(c_word.length > max_length){\n            max_length = c_word.length;\n\
    \            max_word = c_word;\n        }\n    }\n    return max_word;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkey86i06.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkey86i06.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    //write your code here\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpsiysgw4b.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsiysgw4b.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_word = \"\";\n  var max_length = 0;\n \
    \ var unique_letters;\n  var letter;\n  var i, j;\n  for(i = 0; i < words.length;\
    \ i++){\n    unique_letters = [];\n    for(j = 0; j < words[i].length; j++){\n\
    \      letter = words[i][j];\n      if(unique_letters.indexOf(letter) == -1){\n\
    \        unique_letters.push(letter);\n      }\n    }\n    if(unique_letters.length\
    \ > max_length){\n      max_length = unique_letters.length;\n      max_word =\
    \ words[i];\n    }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj7w10cuw.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj7w10cuw.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let hash = {};\n        let word = words[i];\n\
    \        for(let j = 0; j < word.length; j++){\n            let char = word[j];\n\
    \            if(hash[char] !== true){\n                hash[char] = true;\n  \
    \          }\n        }\n        if(Object.keys(hash).length > max){\n       \
    \     max = Object.keys(hash).length;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgtgyeg5b.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgtgyeg5b.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var largestWord = words[0];\n  var largestNum =\
    \ num_of_uniques(words[0]);\n  for(var i = 1; i < words.length; i++){\n    if(num_of_uniques(words[i])\
    \ > largestNum){\n      largestWord = words[i];\n      largestNum = num_of_uniques(words[i]);\n\
    \    }\n  }\n  return largestWord;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvysksjh6.js:13\n  var largestNum = num_of_uniques(words[0]);\n\
    \                   ^\n\nReferenceError: num_of_uniques is not defined\n    at\
    \ find_max (/tmp/tmpvysksjh6.js:13:20)\n    at test (/tmp/tmpvysksjh6.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpvysksjh6.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = \"\";\n    for(let word of words){\n\
    \        if(max.length === 0 || word.length > max.length || word < max){\n   \
    \         max = word;\n        }\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'prrk'\n\nshould\
    \ loosely deep-equal\n\n'this'\n    at test (/tmp/tmpy9adi4p_.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy9adi4p_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n\
    \  expected: 'this',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var char_count = words.map(function(x){\n    return\
    \ char_counter(x);\n  });\n  //reduce the array of unique characters for each\
    \ element in char_count\n  var max_word = char_count.reduce(function(a,b){\n \
    \   if(a.length > b.length){\n      return a;\n    }else if(a.length < b.length){\n\
    \      return b;\n    }else{\n      return a;\n    }\n  });\n  var max_word_index\
    \ = char_count.indexOf(max_word);\n  var max_word_string = words[max_word_index];\n\
    \  return max_word_string;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkmrly087.js:13\n    return char_counter(x);\n    ^\n\nReferenceError:\
    \ char_counter is not defined\n    at /tmp/tmpkmrly087.js:13:5\n    at Array.map\
    \ (<anonymous>)\n    at find_max (/tmp/tmpkmrly087.js:12:26)\n    at test (/tmp/tmpkmrly087.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpkmrly087.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var data = {};\n  var length = words.length;\n\
    \  var max = {key: words[0], value:0};\n  for(var i = 0; i < length; i++){\n \
    \   for(var j = 0; j < words[i].length; j++){\n      if(data[words[i][j]]){\n\
    \        data[words[i][j]] += 1;\n      } else {\n        data[words[i][j]] =\
    \ 1;\n      }\n    }\n    if(Object.keys(data).length > max.value){\n      max.key\
    \ = words[i];\n      max.value = Object.keys(data).length;\n    }\n    data =\
    \ {};\n  }\n  return max.key;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9pohhy1c.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9pohhy1c.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = words[0];\n    for(i = 0; i < words.length;\
    \ i++){\n        if(words[i].length > max.length){\n            max = words[i];\n\
    \        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9g9f7gxt.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9g9f7gxt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var lex;\n    var largest = 0;\n    for(var i\
    \ = 0; i < words.length; i++){\n        var temp = count_unique(words[i]);\n \
    \       if(temp > largest){\n            largest = temp;\n            lex = words[i];\n\
    \        }\n    }\n    return lex;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl2kyn0nt.js:15\n        var temp = count_unique(words[i]);\n  \
    \                 ^\n\nReferenceError: count_unique is not defined\n    at find_max\
    \ (/tmp/tmpl2kyn0nt.js:15:20)\n    at test (/tmp/tmpl2kyn0nt.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpl2kyn0nt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = [\"\", 0];\n    for(var i = 0; i\
    \ < words.length; i++){\n        var current = words[i];\n        if(current.length\
    \ > result[1]){\n            result = [current, current.length];\n        }\n\
    \    }\n    return result[0];\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc8ztpkgq.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc8ztpkgq.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0\n  var found = 0\n  var answer = ''\n\
    \  for (i=0; i<words.length; i++){\n    var uniques = []\n    var word = words[i]\n\
    \    var flag = true\n    for (j=0; j<word.length; j++){\n      if (flag === true){\n\
    \        var letter = word[j]\n        uniques.push(letter)\n        flag = false\n\
    \      }\n      else {\n        var letter = word[j]\n        for (k=0; k<uniques.length;\
    \ k++){\n          if (letter === uniques[k]){\n            flag = true\n    \
    \      }\n        }\n        if (flag === false){\n          uniques.push(letter)\n\
    \        }\n      }\n    }\n    found = uniques.length\n    if (found > max){\n\
    \      max = found\n      answer = word\n    }\n  }\n  return answer\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0y82nb3b.js:51:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0y82nb3b.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var max_word = \"\";\n    for(var\
    \ i = 0; i < words.length; i++){\n        var word = words[i];\n        var unique_letters\
    \ = new Set(word);\n        if(unique_letters.size > max){\n            max =\
    \ unique_letters.size;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpt31ajo5y.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt31ajo5y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word_object = {};\n    var max = 0;\n   \
    \ var max_word = \"\";\n    for(var i = 0; i < words.length; i++){\n        for(var\
    \ j = 0; j < words[i].length; j++){\n            var char = words[i][j];\n   \
    \         if(!word_object[char]){\n                word_object[char] = 1;\n  \
    \          }\n            else{\n                word_object[char]++;\n      \
    \      }\n        }\n        if(Object.keys(word_object).length > max){\n    \
    \        max = Object.keys(word_object).length;\n            max_word = words[i];\n\
    \        }\n        word_object = {};\n    }\n    return max_word;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp148mof7v.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp148mof7v.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_unique_chars = 0;\n    var max_unique_chars_word\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        var unique_chars\
    \ = 0;\n        var word = words[i];\n        for(var j = 0; j < word.length;\
    \ j++){\n            var char = word[j];\n            if(word.indexOf(char) ==\
    \ word.lastIndexOf(char)){\n                unique_chars += 1;\n            }\n\
    \        }\n        if(unique_chars > max_unique_chars){\n            max_unique_chars\
    \ = unique_chars;\n            max_unique_chars_word = word;\n        }\n    }\n\
    \    return max_unique_chars_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6vrl7wye.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6vrl7wye.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if(words.length <= 1){\n    return words[0];\n\
    \  }\n\n  var max_word = words[0];\n  var max_len = max_word.length;\n  var curr_word\
    \ = words[0];\n  var curr_len = curr_word.length;\n\n  for(var i = 1; i < words.length;\
    \ i++){\n    curr_word = words[i];\n    curr_len = curr_word.length;\n    if(curr_len\
    \ >= max_len){\n      max_word = curr_word;\n      max_len = curr_len;\n    }\n\
    \  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqmb5jh0j.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqmb5jh0j.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return  words.sort(function(a,b){\n        if(getUnique(a).length\
    \ > getUnique(b).length){\n            return -1;\n        }\n        else if(getUnique(a).length\
    \ < getUnique(b).length){\n            return 1;\n        }\n        else{\n \
    \           return 0;\n        }\n    })[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptdcb3hy7.js:13\n        if(getUnique(a).length > getUnique(b).length){\n\
    \        ^\n\nReferenceError: getUnique is not defined\n    at /tmp/tmptdcb3hy7.js:13:9\n\
    \    at Array.sort (<anonymous>)\n    at find_max (/tmp/tmptdcb3hy7.js:12:19)\n\
    \    at test (/tmp/tmptdcb3hy7.js:30:20)\n    at Object.<anonymous> (/tmp/tmptdcb3hy7.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar final_word = '';\n\tvar final_score = 0;\n\t\
    for(var i = 0; i < words.length; i++){\n\t\t// console.log(words[i])\n\t\tvar\
    \ score = 0;\n\t\tvar my_word = words[i];\n\t\t// console.log(my_word)\n\t\tvar\
    \ my_object = {};\n\t\tfor(var j = 0; j < my_word.length; j++){\n\t\t\t// console.log(my_word[j])\n\
    \t\t\tif(my_object[my_word[j]] === undefined){\n\t\t\t\tmy_object[my_word[j]]\
    \ = my_word[j];\n\t\t\t\tscore += 1;\n\t\t\t}\n\t\t}\n\t\tif(score > final_score){\n\
    \t\t\tfinal_score = score;\n\t\t\tfinal_word = my_word;\n\t\t}\n\t}\n\tconsole.log(final_word)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp835xcf3o.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp835xcf3o.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'string

    '
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmppyw781cg.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmppyw781cg.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var final_word = \"\";\n    var max_count = 0;\n\
    \    for(var i = 0; i < words.length; i++){\n        var uniq_count = 0;\n   \
    \     for(var j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j])\
    \ == words[i].lastIndexOf(words[i][j])){\n                uniq_count++;\n    \
    \        }\n        }\n        if(uniq_count > max_count){\n            max_count\
    \ = uniq_count;\n            final_word = words[i];\n        }\n    }\n    return\
    \ final_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpv6q9o5t9.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv6q9o5t9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var current_max = 0;\n    var counter = 0;\n\
    \    var result = null;\n    while(counter < words.length){\n        //console.log(words[counter]);\n\
    \        var temp = words[counter];\n        var temp_counter = 0;\n        var\
    \ unique_counter = 0;\n        while(temp_counter < temp.length){\n          \
    \  //console.log(temp_counter);\n            var temp_sub = temp[temp_counter];\n\
    \            var temp_sub_counter = 0;\n            var sub_counter = 0;\n   \
    \         while(temp_sub_counter < temp.length){\n                if(temp_sub\
    \ === temp[temp_sub_counter]){\n                    sub_counter++;\n         \
    \       }\n                temp_sub_counter++;\n            }\n            if(sub_counter\
    \ === 1){\n                unique_counter++;\n            }\n            temp_counter++;\n\
    \        }\n        if(unique_counter > current_max){\n            current_max\
    \ = unique_counter;\n            result = temp;\n        }\n        counter++;\n\
    \    }\n    console.log(result);\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpervmup26.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpervmup26.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'string

    '
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tif (words.length < 1) return \"Please enter an\
    \ array\";\n\tvar currMax = 0;\n\tvar currMaxWord = words[0];\n\tfor (var i =\
    \ 0; i < words.length; i++){\n\t\tvar word = words[i];\n\t\tvar unique_chars =\
    \ [];\n\t\tvar unique_chars_count = 0;\n\t\tfor (var j = 0; j < word.length; j++){\n\
    \t\t\tvar ch = word[j];\n\t\t\tif (unique_chars.indexOf(ch) == -1){\n\t\t\t\t\
    unique_chars.push(ch);\n\t\t\t\tunique_chars_count += 1;\n\t\t\t}\n\t\t}\n\t\t\
    if (unique_chars_count > currMax){\n\t\t\tcurrMax = unique_chars_count;\n\t\t\t\
    currMaxWord = word;\n\t\t} else if (unique_chars_count == currMax){\n\t\t\tcurrMaxWord\
    \ = lexicoCompare(currMaxWord, word);\n\t\t}\n\t}\n\treturn currMaxWord;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphvcvqsdt.js:30\n\t\t\tcurrMaxWord = lexicoCompare(currMaxWord,\
    \ word);\n\t\t\t^\n\nReferenceError: lexicoCompare is not defined\n    at find_max\
    \ (/tmp/tmphvcvqsdt.js:30:4)\n    at test (/tmp/tmphvcvqsdt.js:42:20)\n    at\
    \ Object.<anonymous> (/tmp/tmphvcvqsdt.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // write code here\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp85w6bhsy.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp85w6bhsy.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // create an object to represent unique chars\
    \ in each word\n    // iterate through each word and store unique character count\n\
    \    // return the word with highest unique character count\n    let unique_counts\
    \ = {};\n    for (let word of words){\n        unique_counts[word] = get_unique_char_count(word);\n\
    \    }\n    let max_count = 0;\n    let max_word = \"\";\n    for (let word in\
    \ unique_counts){\n        if (unique_counts[word] > max_count){\n           \
    \ max_count = unique_counts[word];\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptxym2myd.js:17\n        unique_counts[word] = get_unique_char_count(word);\n\
    \                      ^\n\nReferenceError: get_unique_char_count is not defined\n\
    \    at find_max (/tmp/tmptxym2myd.js:17:23)\n    at test (/tmp/tmptxym2myd.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmptxym2myd.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let num = 0;\n  let word = words[0];\n  for(let\
    \ i = 0; i < words.length; i++){\n    if(count_unique(words[i]) > num){\n    \
    \  num = count_unique(words[i]);\n      word = words[i];\n    }\n  }\n  return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpd9ml8z4x.js:15\n    if(count_unique(words[i]) > num){\n    ^\n\n\
    ReferenceError: count_unique is not defined\n    at find_max (/tmp/tmpd9ml8z4x.js:15:5)\n\
    \    at test (/tmp/tmpd9ml8z4x.js:28:20)\n    at Object.<anonymous> (/tmp/tmpd9ml8z4x.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_unique = 0;\n\tvar max_word = \"\";\n\t\
    for(var i = 0; i < words.length; i++){\n\t\tvar word = words[i];\n\t\tvar word_unique\
    \ = 0;\n\t\tfor(var j = 0; j < word.length; j++){\n\t\t\tif(word.indexOf(word[j])\
    \ == word.lastIndexOf(word[j])){\n\t\t\t\tword_unique++;\n\t\t\t}\n\t\t}\n\t\t\
    if(word_unique > max_unique){\n\t\t\tmax_unique = word_unique;\n\t\t\tmax_word\
    \ = word;\n\t\t}\n\t}\n\treturn max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpi7ks9vpk.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi7ks9vpk.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var max_word = '';\n    for(var\
    \ i = 0; i < words.length; i++){\n        var unique_chars = [];\n        for(var\
    \ j = 0; j < words[i].length; j++){\n            if(unique_chars.indexOf(words[i][j])\
    \ === -1){\n                unique_chars.push(words[i][j]);\n            }\n \
    \       }\n        if(unique_chars.length > max){\n            max = unique_chars.length;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfj09pqq4.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfj09pqq4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var len = 0;\n  var longest = \"\";\n  var max_len\
    \ = 0;\n  var max_word = \"\";\n  var unique_letters = [];\n  for (var i = 0;\
    \ i < words.length; i++) {\n    var current_word = words[i];\n    for (var j =\
    \ 0; j < current_word.length; j++) {\n      var letter = current_word[j];\n  \
    \    if (unique_letters.indexOf(letter) === -1) {\n        unique_letters.push(letter);\n\
    \      }\n    }\n    if (unique_letters.length > max_len) {\n      max_len = unique_letters.length;\n\
    \      max_word = current_word;\n    }\n    unique_letters = [];\n  }\n  return\
    \ max_word;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6jzwghmt.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6jzwghmt.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 0
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Your code here\n  var uc={};\n  var max=0;\n\
    \  var string=\"\";\n  for(var i=0;i<words.length;i++){\n    var l=words[i].length;\n\
    \    var count=0;\n    var j;\n    for(j=0;j<l;j++){\n      var char=words[i][j];\n\
    \      if(uc[char]===undefined){\n        uc[char]=1;\n        count++;\n    \
    \  }\n    }\n    if(count>max){\n      max=count;\n      string=words[i];\n  \
    \  }\n    else if(count===max){\n      if(words[i]<string){\n        string=words[i];\n\
    \      }\n    }\n    uc={};\n  }\n  return string;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var longest = \"\";\n    for(var\
    \ i = 0; i < words.length; i++){\n        var number = uniq_char(words[i]);\n\
    \        if(number > max){\n            max = number;\n            longest = words[i];\n\
    \        }\n    }\n    return longest;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppfpuw72u.js:15\n        var number = uniq_char(words[i]);\n   \
    \                  ^\n\nReferenceError: uniq_char is not defined\n    at find_max\
    \ (/tmp/tmppfpuw72u.js:15:22)\n    at test (/tmp/tmppfpuw72u.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmppfpuw72u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = words[0];\n    var mIndex = 0;\n  \
    \  for(i=0; i<words.length; i++){\n        for(j=0; j<words[i].length; j++){\n\
    \            for(k=j+1; k<words[i].length; k++){\n                if(words[i][j]\
    \ == words[i][k]){\n                    words[i] = words[i].replace(words[i][k],\
    \ \"\");\n                }\n            }\n        }\n        if(words[i].length\
    \ > max.length){\n            max = words[i];\n            mIndex = i;\n     \
    \   }\n    }\n    return words[mIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0rn2u7e0.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0rn2u7e0.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = '';\n    let max_count = 0;\n  \
    \  let count = 0;\n    for(let i = 0; i < words.length; i++){\n        let word\
    \ = words[i];\n        let seen = {};\n        for(let j = 0; j < word.length;\
    \ j++){\n            if(seen[word[j]]){\n                continue;\n         \
    \   }\n            seen[word[j]] = true;\n            count++;\n        }\n  \
    \      if(count > max_count){\n            max_count = count;\n            result\
    \ = word;\n        }\n        count = 0;\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6vo4xda1.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6vo4xda1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var longuestWord = words[0];\n  var longuestCount\
    \ = 0;\n  var count = 0;\n  var word = \"\";\n  for(var i = 0; i < words.length;\
    \ i++){\n    word = words[i];\n    for(var j = 0; j < word.length; j++){\n   \
    \   for(var k = j+1; k < word.length; k++){\n        if(word[j] === word[k]){\n\
    \          break;\n        }\n        count++;\n      }\n    }\n    if(count >\
    \ longuestCount){\n      longuestCount = count;\n      longuestWord = word;\n\
    \    }\n    count = 0;\n  }\n  return longuestWord;\n}\nvar words = [\"name\"\
    , \"of\", \"string\"];\nvar r1 = find_max(words);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpndz7ty_t.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpndz7ty_t.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_count = 0;\n  var max_word = '';\n  for(var\
    \ i = 0; i < words.length; i++){\n    if(count_uniques(words[i]) > max_count){\n\
    \      max_count = count_uniques(words[i]);\n      max_word = words[i];\n    }\n\
    \  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpou937px9.js:15\n    if(count_uniques(words[i]) > max_count){\n\
    \    ^\n\nReferenceError: count_uniques is not defined\n    at find_max (/tmp/tmpou937px9.js:15:5)\n\
    \    at test (/tmp/tmpou937px9.js:28:20)\n    at Object.<anonymous> (/tmp/tmpou937px9.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var best_word = \"\";\n    var best_count = 0;\n\
    \    for (var i = 0; i < words.length; i++) {\n        if (best_count < count_chars(words[i]))\
    \ {\n            best_count = count_chars(words[i]);\n            best_word =\
    \ words[i];\n        }\n    }\n    return best_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprvda93l0.js:15\n        if (best_count < count_chars(words[i]))\
    \ {\n        ^\n\nReferenceError: count_chars is not defined\n    at find_max\
    \ (/tmp/tmprvda93l0.js:15:9)\n    at test (/tmp/tmprvda93l0.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmprvda93l0.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar unique_words = [];\n\tfor(var i = 0; i < words.length;\
    \ i++){\n\t\tvar unique_num = unique_counter(words[i]);\n\t\tunique_words.push(unique_num);\n\
    \t}\n\tvar max_unique = Math.max.apply(null, unique_words);\n\t// var max_unique\
    \ = Math.max(unique_words);\n\treturn max_unique;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx82libms.js:14\n\t\tvar unique_num = unique_counter(words[i]);\n\
    \t\t                 ^\n\nReferenceError: unique_counter is not defined\n    at\
    \ find_max (/tmp/tmpx82libms.js:14:20)\n    at test (/tmp/tmpx82libms.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx82libms.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0\n  let unique = []\n  let unique_count\
    \ = []\n  let unique_word = 0\n  let unique_word_count = 0\n  for (let i = 0;\
    \ i < words.length; i++){\n    for (let j = 0; j < words[i].length; j++){\n  \
    \    if (!unique.includes(words[i][j])){\n        unique.push(words[i][j])\n \
    \     }\n    }\n    unique_count.push(unique.length)\n    if (unique_count[i]\
    \ > max){\n      max = unique_count[i]\n      unique_word = i\n    }\n    unique\
    \ = []\n  }\n  for (let i = 0; i < unique_count.length; i++){\n    if (unique_count[i]\
    \ == max){\n      unique_word_count += 1\n    }\n  }\n  if (unique_word_count\
    \ == 1){\n    return words[unique_word]\n  }\n  else{\n    let first_letter =\
    \ []\n    for (let i = 0; i < unique_count.length; i++){\n      if (unique_count[i]\
    \ == max){\n        first_letter.push(words[i][0])\n      }\n    }\n    let lex\
    \ = []\n    for (let i = 0; i < first_letter.length; i++){\n      for (let j =\
    \ i+1; j < first_letter.length; j++){\n        if (first_letter[i] > first_letter[j]){\n\
    \          lex.push(first_letter[j])\n        }\n        else{\n          lex.push(first_letter[i])\n\
    \        }\n      }\n    }\n    for (let i = 0; i < lex.length; i++){\n      if\
    \ (lex[i] > lex[i+1]){\n        let temp = lex[i]\n        lex[i] = lex[i+1]\n\
    \        lex[i+1] = temp\n      }\n    }\n    let result = 0\n    for (let i =\
    \ 0; i < words.length; i++){\n      if (words[i][0]\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxjen6gsl.js:66\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976973
