name: HumanEval_9_rolling_max
language: js
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4,\
  \ 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
  }\n\ntest();"
completions: ["    let max = [];\n    let tempMax = 0;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(tempMax < numbers[i]){\n            tempMax = numbers[i];\n\
    \        }\n        max.push(tempMax);\n    }\n    return max;\n}\n", "    var\
    \ result = [];\n    var maxValue = numbers[0];\n    result.push(maxValue);\n \
    \   for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > maxValue){\n\
    \            maxValue = numbers[i];\n        }\n        result.push(maxValue);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    var max = numbers[0];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n\
    \            max = numbers[i];\n        }\n        result.push(max);\n    }\n\
    \    return result;\n}\n", "    var result = [];\n    var index = 0;\n    while(index\
    \ < numbers.length){\n        result.push(Math.max.apply(null, numbers.slice(0,\
    \ index + 1)));\n        index++;\n    }\n    return result;\n}\n", "\n}\n", "\n\
    }\n", "  let result = [numbers[0]];\n  for(let i = 1; i < numbers.length; i++){\n\
    \    result.push(Math.max(result[i-1], numbers[i]));\n  }\n  return result;\n\
    }\n", "\tvar maxArray = [];\n\tvar currMax = 0;\n\tnumbers.forEach(function(element){\n\
    \t\tif(element > currMax){\n\t\t\tcurrMax = element;\n\t\t}\n\t\tmaxArray.push(currMax);\n\
    \t});\n\treturn maxArray;\n}\n", "    var max=numbers[0];\n    for(i=1;i<numbers.length;i++){\n\
    \        if(numbers[i]>max){\n            max=numbers[i];\n        }\n       \
    \ numbers[i]=max;\n    }\n    return numbers;\n}\n", "    var maxArray = [];\n\
    \    var currentMax = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > currentMax){\n            currentMax = numbers[i];\n\
    \        }\n        maxArray.push(currentMax);\n    }\n    return maxArray;\n\
    }\n", "    let result = [numbers[0]];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > result[i-1]){\n            result.push(numbers[i]);\n\
    \        }else{\n            result.push(result[i-1]);\n        }\n    }\n   \
    \ return result;\n}\n", "    var i = 0;\n    var myArray = [];\n    var max =\
    \ 0;\n    for(i = 0; i < numbers.length; i++){\n        max = numbers[i];\n  \
    \      for(j = 0; j <= i; j++){\n            if(numbers[j] > max){\n         \
    \       max = numbers[j];\n            }\n        }\n        myArray.push(max);\n\
    \    }\n    return myArray;\n}\n", "  let result = [];\n  result.push(numbers[0]);\n\
    \  for(i=1; i<numbers.length; i++){\n    if(numbers[i]>result[i-1]){\n      result.push(numbers[i]);\n\
    \    }else{\n      result.push(result[i-1]);\n    }\n  }\n  return result;\n}\n",
  "  var result = [];\n  var max = -1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "\tresult = [numbers[0]];\n\tfor(i=1; i<numbers.length;\
    \ i++){\n\t\tif(numbers[i] > result[i-1]){\n\t\t\tresult.push(numbers[i]);\n\t\
    \t}\n\t\telse{\n\t\t\tresult.push(result[i-1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "  return numbers.map(function(number, i, arr){\n    var max = number;\n\
    \    for(var j = i; j < arr.length; j++){\n      if(arr[j] > max){\n        max\
    \ = arr[j];\n      }\n    }\n    return max;\n  });\n}\n\nvar array = [1, 2, 3,\
    \ 2, 3, 4, 2];\n", "    return numbers.map((e, i, arr) => {\n        var max =\
    \ e;\n        for(var j = i+1; j < arr.length; j++){\n            if(max < arr[j]){\n\
    \                max = arr[j];\n            }\n        }\n        return max;\n\
    \    });\n}\n", "    if(numbers.length === 0){\n        return [];\n    }\n  \
    \  const result = [];\n    let currentMax = numbers[0];\n    result.push(currentMax);\n\
    \    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > currentMax){\n\
    \            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}", "    let result = []\n    numbers.forEach((el,\
    \ i) => {\n        let max = el\n        for(let j = i; j < numbers.length; j++){\n\
    \            if(max < numbers[j]){\n                max = numbers[j]\n       \
    \     }\n        }\n        result.push(max)\n    })\n    return result\n}\n",
  "    var max = 0;\n    var maxSeq = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        maxSeq.push(max);\n    }\n    return maxSeq;\n}\n", "    var max_so_far\
    \ = [];\n    var current_max = numbers[0];\n    max_so_far.push(current_max);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        current_max = Math.max(current_max,\
    \ numbers[i]);\n        max_so_far.push(current_max);\n    }\n    return max_so_far;\n\
    }\n", "    var current_max = [];\n    var numbers_copy = numbers.slice();\n  \
    \  while(numbers_copy.length > 0){\n        var max = Math.max.apply(null, numbers_copy);\n\
    \        current_max.push(max);\n        var max_index = numbers_copy.indexOf(max);\n\
    \        numbers_copy.splice(max_index, 1);\n    }\n    return current_max;\n}",
  "\tvar max=numbers[0],\n\t\tresult=[max];\n\tfor(var i=1;i<numbers.length;i++){\n\
    \t\tif(numbers[i]>max){\n\t\t\tmax=numbers[i];\n\t\t}\n\t\tresult.push(max);\n\
    \t}\n\treturn result;\n}\n", "    let rolling_max = [];\n    let max = 0;\n  \
    \  for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n \
    \           max = numbers[i];\n        }\n        rolling_max.push(max);\n   \
    \ }\n    return rolling_max;\n}", "  // insert your code here\n}\n", "    let\
    \ max = numbers[0];\n    let array = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        array.push(max);\n    }\n    return array;\n}\n", "    const maxes\
    \ = [];\n    let max = numbers[0];\n    maxes.push(max);\n    for(let i = 1; i\
    \ < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n\
    \        }\n        maxes.push(max);\n    }\n    return maxes;\n}", "\treturn\
    \ numbers.map(function(num, index){\n\t\tif(index === 0){\n\t\t\treturn num;\n\
    \t\t}\n\t\telse{\n\t\t\treturn Math.max(num, numbers[index-1]);\n\t\t}\n\t});\n\
    }\n", "    return numbers.map((num, i) => {\n        let previous_numbers = numbers.slice(0,\
    \ i);\n        return Math.max(...previous_numbers);\n    });\n}\n", "    var\
    \ maxes = [numbers[0]];\n    for(var i = 1; i < numbers.length; i++){\n      \
    \  maxes.push(Math.max(maxes[i-1], numbers[i]));\n    }\n    return maxes;\n}\n",
  "    var max = numbers[0];\n    var maxes = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        maxes.push(max);\n    }\n    return maxes;\n}\n", "    var maxs\
    \ = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    if(numbers[i] > max){\n            max = numbers[i];\n        }\n       \
    \ maxs.push(max);\n    }\n    return maxs;\n}", "    return _.reduce(numbers,\
    \ function(result, item){\n        if (_.last(result) < item){\n            result.push(item);\n\
    \        }\n        else{\n            result.push(_.last(result));\n        }\n\
    \        return result;\n    }, [_.first(numbers)]);\n}\n", "    if(numbers.length==0){\n\
    \        return numbers;\n    }\n    let max=numbers[0];\n    for(let i=1;i<numbers.length;i++){\n\
    \        if(numbers[i]>max){\n            max=numbers[i];\n        }\n       \
    \ numbers[i]=max;\n    }\n    return numbers;\n}\n\nmodule.exports = {\n    rolling_max:\
    \ rolling_max\n};", "    var result = []\n    var current_max = numbers[0]\n \
    \   result.push(current_max)\n    for(var i = 1; i < numbers.length; i++){\n \
    \       if(numbers[i] > current_max){\n            current_max = numbers[i]\n\
    \        }\n        result.push(current_max)\n    }\n    return result\n}", " \
    \   let array = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n\
    \        array.push(Math.max(array[i-1], numbers[i]));\n    }\n    return array;\n\
    }\n", "    let result = []\n    let max_number = 0\n    for(number of numbers){\n\
    \        if(number > max_number){\n            max_number = number\n        }\n\
    \        result.push(max_number)\n    }\n    return result\n}\n", "    const results\
    \ = [];\n    let maxNumber = 0;\n    numbers.forEach(number => {\n        maxNumber\
    \ = Math.max(maxNumber, number);\n        results.push(maxNumber);\n    });\n\
    \    return results;\n}\n", "\tif(numbers.length === 0){\n\t\treturn [];\n\t}\n\
    \treturn [numbers[0]].concat(rolling_max(numbers.slice(1)).map(function(e, i){\n\
    \t\treturn Math.max(e, numbers[i + 1]);\n\t}));\n}\n", "    let result = [];\n\
    \    result.push(numbers[0]);\n    for(let i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > result[i-1]){\n            result.push(numbers[i]);\n\
    \        }else{\n            result.push(result[i-1]);\n        }\n    }\n   \
    \ return result;\n}\n\nmodule.exports = {\n    find_max_subarray: find_max_subarray,\n\
    \    rolling_max: rolling_max\n};", "  let maxes = [];\n  let curr_max = numbers[0];\n\
    \  for(let num of numbers){\n    if(num > curr_max){\n      curr_max = num;\n\
    \    }\n    maxes.push(curr_max);\n  }\n  return maxes;\n}\n", "    if(typeof\
    \ numbers === 'undefined' || numbers.length <= 0){\n        return [];\n    }\n\
    \    var rolling_max_array = [];\n    rolling_max_array.push(numbers[0]);\n  \
    \  for(var i = 1; i < numbers.length; i++){\n        rolling_max_array.push(Math.max(rolling_max_array[i-1],\
    \ numbers[i]));\n    }\n    return rolling_max_array;\n}\n", "    max_values =\
    \ []\n    max_so_far = 0\n    for (var i = 0; i < numbers.length; i++){\n    \
    \    if (numbers[i] > max_so_far){\n            max_so_far = numbers[i]\n    \
    \    }\n        max_values.push(max_so_far)\n    }\n    return max_values\n}\n",
  "    const result = [];\n    let max = numbers[0];\n    result.push(max);\n    for(let\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    const result = [numbers[0]];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        result.push(Math.max(result[i-1], numbers[i]));\n    }\n    return\
    \ result;\n}\n", "    var max = [];\n    var maxValue = numbers[0];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] > maxValue){\n     \
    \       maxValue = numbers[i];\n        }\n        max.push(maxValue);\n    }\n\
    \    return max;\n}\n", "    let s = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        s.push(Math.max(...numbers.slice(0, i+1)));\n    }\n    return\
    \ s;\n}\n", "  let rolling_max_array = []\n  numbers.forEach(function(number,\
    \ idx){\n    if (idx === 0){\n      rolling_max_array.push(number)\n    } else\
    \ {\n      if (number > rolling_max_array[idx - 1]){\n        rolling_max_array.push(number)\n\
    \      } else {\n        rolling_max_array.push(rolling_max_array[idx - 1])\n\
    \      }\n    }\n  })\n  return rolling_max_array\n}\n", "    let maxNumbers =\
    \ [];\n    let max = numbers[0];\n    maxNumbers.push(max);\n    numbers.forEach(function(element){\n\
    \        if(element > max){\n            max = element;\n        }\n        maxNumbers.push(max);\n\
    \    });\n    return maxNumbers;\n}\n", "    var result = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        var max = 0;\n        for(var j = 0; j\
    \ <= i; j++){\n            if(numbers[j] > max){\n                max = numbers[j];\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let max = [];\n    for(let i = 0; i < numbers.length; i++){\n     \
    \   let currentMax = numbers[i];\n        for(let j = i; j < numbers.length; j++){\n\
    \            if(numbers[j] > currentMax){\n                currentMax = numbers[j];\n\
    \            }\n        }\n        max.push(currentMax);\n    }\n    return max;\n\
    }\n", "  var indexMax = 0;\n  var indexes = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(numbers[i] >= numbers[indexMax]){\n      indexMax = i;\n    }\n\
    \    indexes.push(indexMax);\n  }\n  var rolling = [];\n  for(var j = 0; j < indexes.length;\
    \ j++){\n    rolling.push(numbers[indexes[j]]);\n  }\n  return rolling;\n}\n",
  "\tlet result = [];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tlet max = numbers[i];\n\
    \t\tfor(let j = 0; j <= i; j++){\n\t\t\tif(numbers[j] > max){\n\t\t\t\tmax = numbers[j];\n\
    \t\t\t}\n\t\t}\n\t\tresult.push(max);\n\t}\n\treturn result;\n}\n", "    let max_numbers\
    \ = [];\n    let max = 0;\n    for(let i = 0; i < numbers.length; i++){\n    \
    \    if(numbers[i] > max){\n            max = numbers[i];\n        }\n       \
    \ max_numbers.push(max);\n    }\n    return max_numbers;\n}", "    //todo: implement\n\
    \    var max = -1;\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n", "\tvar result\
    \ = [];\n\tvar currMax = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tif(numbers[i] > currMax){\n\t\t\tcurrMax = numbers[i];\n\t\t}\n\t\tresult.push(currMax);\n\
    \t}\n\treturn result;\n}\n", "    //your code here\n}", "    let result = [];\n\
    \    for(let i = 0; i < numbers.length; i++){\n        result.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    }\n    return result;\n}\n", "    var max_value = numbers[0];\n\
    \    var rolling_max = [max_value];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max_value){\n            max_value = numbers[i];\n  \
    \      }\n        rolling_max.push(max_value);\n    }\n    return rolling_max;\n\
    }", "    var length = numbers.length;\n    var m = new Array(length);\n    var\
    \ max=numbers[0];\n    for(var i=0;i<length;i++){\n        if(numbers[i]>max){\n\
    \            max=numbers[i];\n        }\n        m[i]=max;\n    }\n    return\
    \ m;\n}\n", "    var rollingMax = [];\n    var max = -Infinity;\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        max = Math.max(max, numbers[i]);\n \
    \       rollingMax.push(max);\n    }\n    return rollingMax;\n}\n\n", "    let\
    \ max = [],\n        maxL = numbers.length;\n    for(let i = 0; i < maxL; i++){\n\
    \        let maxS = numbers[i];\n        for(let j = i; j < maxL; j++){\n    \
    \        maxS = Math.max(maxS, numbers[j]);\n        }\n        max.push(maxS);\n\
    \    }\n    return max;\n}", "    var n = numbers.length;\n    var rolling_maxes\
    \ = [];\n    var max = -1;\n    for(var i = 0; i < n; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        rolling_maxes.push(max);\n\
    \    }\n    return rolling_maxes;\n}\n", "    var output = [];\n    var max =\
    \ numbers[0];\n    output.push(max);\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     output.push(max);\n    }\n    return output;\n}\n", "    let max = numbers[0];\n\
    \    let rolling_maxes = [];\n    for(number of numbers){\n        if(number >\
    \ max){\n            max = number;\n        }\n        rolling_maxes.push(max);\n\
    \    }\n    return rolling_maxes;\n}", "    let result = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for(let i = 1; i < numbers.length; i++){\n       \
    \ if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "  var max = [];\n  var highest;\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(max.length == 0){\n      max.push(numbers[i]);\n\
    \    }\n    else if(numbers[i] >= max[i-1]){\n      max.push(numbers[i]);\n  \
    \  }\n    else{\n      max.push(max[i-1]);\n    }\n  }\n  return max;\n}", " \
    \   let arrMax = [numbers[0]];\n    for(let i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] >= arrMax[i-1]){\n            arrMax.push(numbers[i]);\n\
    \        }else{\n            arrMax.push(arrMax[i-1]);\n        }\n    }\n   \
    \ return arrMax;\n}\n", "    var max = numbers[0];\n    var result = [max];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n\
    \            max = numbers[i];\n        }\n        result.push(max);\n    }\n\
    \    return result;\n}\n", "  var result = [];\n  var currentMax = 0;\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] > currentMax){\n      currentMax\
    \ = numbers[i];\n    }\n    result.push(currentMax);\n  }\n  return result;\n}",
  "\tvar ret = [];\n\tvar max = numbers[0];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tret.push(max);\n\
    \t}\n\treturn ret;\n}\n", "    return numbers.map((number, index) => {\n     \
    \   if(index === 0){\n            return number;\n        }\n        else{\n \
    \           return Math.max(...numbers.slice(0, index + 1));\n        }\n    });\n\
    }\n", "\tvar output = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(i\
    \ == 0){\n\t\t\toutput.push(numbers[i]);\n\t\t}\n\t\telse if(numbers[i] > output[i-1]){\n\
    \t\t\toutput.push(numbers[i]);\n\t\t}\n\t\telse{\n\t\t\toutput.push(output[i-1]);\n\
    \t\t}\n\t}\n\treturn output;\n}", "    let maxArray = [];\n    let max;\n    numbers.forEach(function(number){\n\
    \        if(number > max){\n            max = number;\n        }\n        maxArray.push(max);\n\
    \    });\n    return maxArray;\n}\n", "    if(numbers.length < 1){\n        return\
    \ numbers;\n    }\n    var max = [numbers[0]];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        max.push(Math.max(max[i-1], numbers[i]));\n    }\n    return\
    \ max;\n}", "    if (numbers.length === 0) {\n        return numbers;\n    }\n\
    \n    var max = numbers[0];\n    var result = [max];\n\n    for (var i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n\n    return result;\n\
    }\n", "    var max = numbers[0];\n    var maxlist = [max];\n    for (var i = 1;\
    \ i < numbers.length; i++){\n        max = numbers[i] > max ? numbers[i] : max;\n\
    \        maxlist.push(max);\n    }\n    return maxlist;\n}\n", "  var maxima =\
    \ [];\n  var highest = numbers[0];\n  maxima.push(highest);\n  for(var i = 1;\
    \ i < numbers.length; i++){\n    if(numbers[i] > highest){\n      highest = numbers[i];\n\
    \    }\n    maxima.push(highest);\n  }\n  return maxima;\n}\n", "    return numbers.map((num,i)=>\
    \ numbers.slice(0,i+1).reduce((a,b)=> Math.max(a,b)));\n}\n", "    var r = [];\n\
    \    var max = numbers[0];\n    r.push(max);\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        r.push(max);\n    }\n    return r;\n}\n", "  var rolling_max_array\
    \ = [];\n  var max = numbers[0];\n  for (var i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    rolling_max_array.push(max);\n\
    \  }\n  return rolling_max_array;\n}\n", "  let max = [];\n  let j = 0;\n  for(let\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] > max[j]){\n      max[j]\
    \ = numbers[i];\n    }else if(numbers[i] <= max[j]){\n      max[j] = max[j];\n\
    \    }\n    j++;\n  }\n  return max;\n}\n\n", "    if(numbers.length == 0){\n\
    \        return [];\n    }\n    var maxes = [numbers[0]];\n    for(var i = 1;\
    \ i < numbers.length; i++){\n        if(numbers[i] > maxes[i-1]){\n          \
    \  maxes.push(numbers[i]);\n        }else{\n            maxes.push(maxes[i-1]);\n\
    \        }\n    }\n    return maxes;\n}\n", "    if(numbers.length <= 1){\n  \
    \      return numbers;\n    }\n\n    const result = [numbers[0]];\n    let currentMax\
    \ = numbers[0];\n\n    for(let i = 1; i < numbers.length; i++){\n        currentMax\
    \ = Math.max(currentMax, numbers[i]);\n        result.push(currentMax);\n    }\n\
    \n    return result;\n}\n", "    var max_numbers = [numbers[0]];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        max_numbers.push(Math.max(max_numbers[i-1],\
    \ numbers[i]));\n    }\n    return max_numbers;\n}\n", "    let result = [];\n\
    \    let rollingMax = null;\n    for(let i = 0; i < numbers.length; i++){\n  \
    \      rollingMax = rollingMax == null ? numbers[i] : Math.max(rollingMax, numbers[i]);\n\
    \        result.push(rollingMax);\n    }\n    return result;\n}\n", "    var rolling_max\
    \ = [];\n    for(var j = 0; j < numbers.length; j++){\n        var r = numbers[j];\n\
    \        for(var i = j; i < numbers.length; i++){\n            if(numbers[i] >\
    \ r){\n                r = numbers[i];\n            }\n        }\n        rolling_max.push(r);\n\
    \    }\n    return rolling_max;\n}\n", "    let maxs = [numbers[0]];\n    for(let\
    \ i = 1; i < numbers.length; i++){\n        maxs.push(Math.max(maxs[i-1], numbers[i]));\n\
    \    }\n    return maxs;\n}\n", "  const rolling_maximums = [];\n  let rolling_maximum\
    \ = 0;\n  for (const number of numbers){\n    if (number > rolling_maximum){\n\
    \      rolling_maximum = number;\n    }\n    rolling_maximums.push(rolling_maximum);\n\
    \  }\n  return rolling_maximums;\n}\n", "\treturn numbers.map(function(value,\
    \ index, array){\n\t\treturn Math.max.apply(null, array.slice(0, index + 1));\n\
    \t});\n}\n", "    var max = numbers[0];\n    var result = [max];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\n", "  var result = [];\n  var currentMax = numbers[0];\n  result.push(currentMax);\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] >= currentMax){\n\
    \      currentMax = numbers[i];\n    }\n    result.push(currentMax);\n  }\n  return\
    \ result;\n}", "  let result = [];\n  result.push(numbers[0]);\n  for(let i =\
    \ 1; i < numbers.length; i++){\n    if(numbers[i] > result[i-1]){\n      result.push(numbers[i]);\n\
    \    }else{\n      result.push(result[i-1]);\n    }\n  }\n  return result;\n}\n",
  "    var result=[];\n    var max=numbers[0];\n    for(var i=0;i<numbers.length;i++){\n\
    \        if(numbers[i]>max){\n            max=numbers[i];\n        }\n       \
    \ result.push(max);\n    }\n    return result;\n}\n", "    var arr = [];\n   \
    \ for(var i = 0; i < numbers.length; i++){\n        var max = numbers[i];\n  \
    \      for(var j = i; j < numbers.length; j++){\n            if(numbers[j] > max){\n\
    \                max = numbers[j];\n            }\n        }\n        arr.push(max);\n\
    \    }\n    return arr;\n}", "    var rolling_max = [numbers[0]];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        rolling_max.push(Math.max(rolling_max[i-1],\
    \ numbers[i]));\n    }\n    return rolling_max;\n}\n", "    var maxSequence =\
    \ [];\n    var maxElement = numbers[0];\n    maxSequence.push(maxElement);\n \
    \   for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > maxElement){\n\
    \            maxElement = numbers[i];\n        }\n        maxSequence.push(maxElement);\n\
    \    }\n    return maxSequence;\n}", "    var result = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        var max_so_far = Math.max.apply(Math, numbers.slice(0,\
    \ i + 1));\n        result.push(max_so_far);\n    }\n    return result;\n}\n",
  "    const input = numbers.slice(0);\n    const output = [];\n    for(let i = 0;\
    \ i < input.length; i++){\n        let maximum = 0;\n        for(let j = 0; j\
    \ <= i; j++){\n            if(input[j] > maximum){\n                maximum =\
    \ input[j];\n            }\n        }\n        output.push(maximum);\n    }\n\
    \    return output;\n}\n", "    var max = [];\n    var tempMax = numbers[0];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > tempMax){\n\
    \            tempMax = numbers[i];\n        }\n        max.push(tempMax);\n  \
    \  }\n    return max;\n}\n", "    var max = numbers[0];\n    var max_array = [];\n\
    \    max_array.push(max);\n    for(var i = 1; i < numbers.length; i++){\n    \
    \    if(numbers[i] > max){\n            max = numbers[i];\n        }\n       \
    \ max_array.push(max);\n    }\n    return max_array;\n}", "    var max = numbers[0];\n\
    \    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n     \
    \   if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var rolling = [];\n    var max = numbers[0];\n\
    \    rolling.push(max);\n    for(var i = 1; i < numbers.length; i++){\n      \
    \  if(numbers[i] > max){\n            max = numbers[i];\n        }\n        rolling.push(max);\n\
    \    }\n    return rolling;\n}\n", "    // hint: the answer is a list which is\
    \ the same length as the input list.\n    //       Instead of writing 'pass' below,\
    \ you should write your answer.\n    pass\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
