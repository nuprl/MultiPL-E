name: HumanEval_7_filter_by_substring
language: js
prompt: "//Filter an input array of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\"\
  , \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction\
  \ filter_by_substring(strings, substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\",\
  \ \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"\
  gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].includes(substring)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n}", "  var strings_with_substring\
    \ = [];\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].includes(substring)){\n\
    \      strings_with_substring.push(strings[i]);\n    }\n  }\n  return strings_with_substring;\n\
    }\n", "\tif(strings.length === 0){\n\t\treturn [];\n\t}\n\telse{\n\t\tvar filtered\
    \ = [],\n\t\t\ti = 0;\n\t\twhile(i < strings.length){\n\t\t\tif(strings[i].indexOf(substring)\
    \ > -1){\n\t\t\t\tfiltered.push(strings[i]);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\
    return filtered;\n\t}\n}\n", "    function has_substring(string){\n        return\
    \ string.indexOf(substring) !== -1;\n    }\n    return strings.filter(has_substring);\n\
    }\n", "    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) > -1){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    var new_list = [];\n    for\
    \ (i = 0; i < strings.length; i++){\n        if (strings[i].includes(substring)){\n\
    \            new_list.push(strings[i]);\n        }\n    }\n    return new_list;\n\
    }\n", "  let result = [];\n  for (let i=0; i<strings.length; i++){\n    if (strings[i].includes(substring)){\n\
    \      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n", "  // your\
    \ code here\n  var newarray = [];\n  for (var i = 0; i < strings.length; i++)\
    \ {\n    if (strings[i].indexOf(substring) > -1) {\n      newarray.push(strings[i]);\n\
    \    }\n  }\n  return newarray;\n}\n", "    return strings.filter(str => str.includes(substring));\n\
    }\n", "    return _.filter(strings, function(s){\n        return s.indexOf(substring)\
    \ != -1;\n    });\n}\n", "    //REPLACE WITH YOUR CODE\n    filtered = [];\n \
    \   for (var i = 0; i < strings.length; i++) {\n        if (strings[i].includes(substring))\
    \ {\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    const result = [];\n    for (const i of strings){\n        if (i.includes(substring)){\n\
    \            result.push(i);\n        }\n    }\n    return result;\n}\n", "\t\
    return strings.filter(function(str){\n\t\treturn str.indexOf(substring) != -1;\n\
    \t});\n}\n", "  return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n}\n", "\treturn strings.filter(function(s){\n\t\treturn s.indexOf(substring)\
    \ != -1;\n\t});\n}", "  return strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n}\n", "\t//Check if substring is a string\n\tif (typeof substring !==\
    \ \"string\") {\n\t\tthrow \"Substring must be a string\";\n\t}\n\t//Return empty\
    \ array if strings array is empty\n\tif (strings.length === 0) {\n\t\treturn [];\n\
    \t}\n\t//Check if strings contains at least one non-string element\n\tif (strings.some(function(element)\
    \ {return typeof element !== \"string\";})) {\n\t\tthrow \"Strings input must\
    \ be an array of strings\";\n\t}\n\t//Create array for the filtered strings\n\t\
    var filtered_strings = [];\n\t//For each element in the strings array, check if\
    \ it contains the substring\n\tstrings.forEach(function(element){\n\t\tif (element.includes(substring))\
    \ {\n\t\t\tfiltered_strings.push(element);\n\t\t}\n\t});\n\treturn filtered_strings;\n\
    }\n", "    return strings.filter(function(string){\n        return string.includes(substring);\n\
    \    });\n}\n", "    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) > -1){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
