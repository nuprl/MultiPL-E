name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["  var min = Math.min.apply(Math, numbers);\n  var max = Math.max.apply(Math,\
    \ numbers);\n  var sub = max - min;\n  var unit = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    unit.push((numbers[i] - min) / sub);\n  }\n  return unit;\n}\n",
  "  var transformed = [];\n  var max = Math.max.apply(Math, numbers);\n  var min\
    \ = Math.min.apply(Math, numbers);\n  for (var i = 0; i < numbers.length; i++)\
    \ {\n    transformed.push((numbers[i] - min) / (max - min));\n  }\n  return transformed;\n\
    }\n", "  return numbers.map(\n    function(v){\n      return (v - numbers[0])/(numbers[numbers.length-1]\
    \ - numbers[0]);\n    }\n  );\n}\n\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) /\
    \ (max - min));\n    }\n    return result;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var diff = max - min;\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] -\
    \ min) / diff;\n  }\n  return numbers;\n}\n", "\tvar unit = [];\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar max = Math.max.apply(null, numbers);\n\tfor (var i = 0; i <\
    \ numbers.length; i++) {\n\t\tunit.push((numbers[i] - min) / (max - min));\n\t\
    }\n\treturn unit;\n}\n", "\tvar min = _.min(numbers);\n\tvar max = _.max(numbers);\n\
    \treturn numbers.map(function(e){\n\t\treturn (e - min) / (max - min);\n\t});\n\
    }", "    var max = 0;\n    var min = Number.MAX_VALUE;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n\
    \    }\n    var results = [];\n    for(var i=0; i<numbers.length; i++){\n    \
    \    results.push((numbers[i] - min) / (max - min));\n    }\n    return results;\n\
    }\n\n", "\tvar min = _.min(numbers);\n\tvar max = _.max(numbers);\n\tvar scaled_numbers\
    \ = [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar scaled_number =\
    \ (numbers[i] - min) / (max - min);\n\t\tscaled_numbers.push(scaled_number);\n\
    \t}\n\treturn scaled_numbers;\n}\n\n", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    return numbers.map(function(num){\n\
    \        return (num - min) / (max - min);\n    });\n}\n", "    // get min, max\n\
    \    let min = numbers[0];\n    let max = numbers[0];\n    for (let num of numbers){\n\
    \        if (num > max){\n            max = num;\n        }\n        if (num <\
    \ min){\n            min = num;\n        }\n    }\n    let result = [];\n    for\
    \ (let num of numbers){\n        result.push((num - min) / (max - min));\n   \
    \ }\n    return result;\n}\n\nlet test_numbers = [1.0, 2.0, 3.0, 4.0, 5.0];",
  "    var mn = math.min(numbers);\n    var mx = math.max(numbers);\n    var result\
    \ = [];\n    for (var i=0; i<numbers.length; i++){\n        result.push((numbers[i]-mn)/(mx-mn));\n\
    \    }\n    return result;\n}\n", "    var min_number = Math.min.apply(null, numbers);\n\
    \    var max_number = Math.max.apply(null, numbers);\n    return numbers.map(function(number){\n\
    \        return (number - min_number) / (max_number - min_number);\n    });\n\
    }\n", "  let scaled_numbers = [];\n  let min = numbers[0];\n  let max = numbers[0];\n\
    \  for (const number of numbers) {\n    if (number < min) {\n      min = number;\n\
    \    }\n    if (number > max) {\n      max = number;\n    }\n  }\n  for (const\
    \ number of numbers) {\n    scaled_numbers.push((number - min) / (max - min));\n\
    \  }\n  return scaled_numbers;\n}\n", "  const max = Math.max(...numbers);\n \
    \ const min = Math.min(...numbers);\n  return numbers.map(\n    number => (number\
    \ - min) / (max - min)\n  );\n}\n", "\tvar lowest = numbers[0];\n\tvar highest\
    \ = numbers[0];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar number\
    \ = numbers[i];\n\t\tif (number < lowest) {\n\t\t\tlowest = number;\n\t\t}\n\t\
    \tif (number > highest) {\n\t\t\thighest = number;\n\t\t}\n\t}\n\tvar scaled =\
    \ [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar number = numbers[i];\n\
    \t\tscaled.push((number - lowest) / (highest - lowest));\n\t}\n\treturn scaled;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var linearTransformation = function(x){\n        return (x -\
    \ min) / (max - min);\n    };\n    return numbers.map(linearTransformation);\n\
    }\n", "    var max_n = numbers[0];\n    var min_n = numbers[0];\n    for (var\
    \ i=0; i<numbers.length; i++){\n        if (numbers[i]>max_n){\n            max_n\
    \ = numbers[i];\n        }\n        if (numbers[i]<min_n){\n            min_n\
    \ = numbers[i];\n        }\n    }\n    var scale = max_n - min_n;\n    var rescaled\
    \ = [];\n    for (var i=0; i<numbers.length; i++){\n        rescaled.push((numbers[i]-min_n)/scale);\n\
    \    }\n    return rescaled;\n}\n", "    //Find the min and max values in the\
    \ array\n    let maxValue = Math.max(...numbers);\n    let minValue = Math.min(...numbers);\n\
    \    let scaled_array = [];\n    //Subtract the min from the value and divide\
    \ by the max minus the min\n    numbers.forEach(num => {\n        scaled_array.push((num\
    \ - minValue) / (maxValue - minValue));\n    });\n    return scaled_array;\n}",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    return numbers.map(val => (val - min) / range);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
