name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["  var min = Math.min.apply(Math, numbers);\n  var max = Math.max.apply(Math,\
    \ numbers);\n  var sub = max - min;\n  var unit = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    unit.push((numbers[i] - min) / sub);\n  }\n  return unit;\n}\n",
  "  var transformed = [];\n  var max = Math.max.apply(Math, numbers);\n  var min\
    \ = Math.min.apply(Math, numbers);\n  for (var i = 0; i < numbers.length; i++)\
    \ {\n    transformed.push((numbers[i] - min) / (max - min));\n  }\n  return transformed;\n\
    }\n", "  return numbers.map(\n    function(v){\n      return (v - numbers[0])/(numbers[numbers.length-1]\
    \ - numbers[0]);\n    }\n  );\n}\n\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        result.push((numbers[i] - min) /\
    \ (max - min));\n    }\n    return result;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var diff = max - min;\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] -\
    \ min) / diff;\n  }\n  return numbers;\n}\n", "\tvar unit = [];\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar max = Math.max.apply(null, numbers);\n\tfor (var i = 0; i <\
    \ numbers.length; i++) {\n\t\tunit.push((numbers[i] - min) / (max - min));\n\t\
    }\n\treturn unit;\n}\n", "\tvar min = _.min(numbers);\n\tvar max = _.max(numbers);\n\
    \treturn numbers.map(function(e){\n\t\treturn (e - min) / (max - min);\n\t});\n\
    }", "    var max = 0;\n    var min = Number.MAX_VALUE;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n\
    \    }\n    var results = [];\n    for(var i=0; i<numbers.length; i++){\n    \
    \    results.push((numbers[i] - min) / (max - min));\n    }\n    return results;\n\
    }\n\n", "\tvar min = _.min(numbers);\n\tvar max = _.max(numbers);\n\tvar scaled_numbers\
    \ = [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar scaled_number =\
    \ (numbers[i] - min) / (max - min);\n\t\tscaled_numbers.push(scaled_number);\n\
    \t}\n\treturn scaled_numbers;\n}\n\n", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    return numbers.map(function(num){\n\
    \        return (num - min) / (max - min);\n    });\n}\n", "    // get min, max\n\
    \    let min = numbers[0];\n    let max = numbers[0];\n    for (let num of numbers){\n\
    \        if (num > max){\n            max = num;\n        }\n        if (num <\
    \ min){\n            min = num;\n        }\n    }\n    let result = [];\n    for\
    \ (let num of numbers){\n        result.push((num - min) / (max - min));\n   \
    \ }\n    return result;\n}\n\nlet test_numbers = [1.0, 2.0, 3.0, 4.0, 5.0];",
  "    var mn = math.min(numbers);\n    var mx = math.max(numbers);\n    var result\
    \ = [];\n    for (var i=0; i<numbers.length; i++){\n        result.push((numbers[i]-mn)/(mx-mn));\n\
    \    }\n    return result;\n}\n", "    var min_number = Math.min.apply(null, numbers);\n\
    \    var max_number = Math.max.apply(null, numbers);\n    return numbers.map(function(number){\n\
    \        return (number - min_number) / (max_number - min_number);\n    });\n\
    }\n", "  let scaled_numbers = [];\n  let min = numbers[0];\n  let max = numbers[0];\n\
    \  for (const number of numbers) {\n    if (number < min) {\n      min = number;\n\
    \    }\n    if (number > max) {\n      max = number;\n    }\n  }\n  for (const\
    \ number of numbers) {\n    scaled_numbers.push((number - min) / (max - min));\n\
    \  }\n  return scaled_numbers;\n}\n", "  const max = Math.max(...numbers);\n \
    \ const min = Math.min(...numbers);\n  return numbers.map(\n    number => (number\
    \ - min) / (max - min)\n  );\n}\n", "\tvar lowest = numbers[0];\n\tvar highest\
    \ = numbers[0];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar number\
    \ = numbers[i];\n\t\tif (number < lowest) {\n\t\t\tlowest = number;\n\t\t}\n\t\
    \tif (number > highest) {\n\t\t\thighest = number;\n\t\t}\n\t}\n\tvar scaled =\
    \ [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar number = numbers[i];\n\
    \t\tscaled.push((number - lowest) / (highest - lowest));\n\t}\n\treturn scaled;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var linearTransformation = function(x){\n        return (x -\
    \ min) / (max - min);\n    };\n    return numbers.map(linearTransformation);\n\
    }\n", "    var max_n = numbers[0];\n    var min_n = numbers[0];\n    for (var\
    \ i=0; i<numbers.length; i++){\n        if (numbers[i]>max_n){\n            max_n\
    \ = numbers[i];\n        }\n        if (numbers[i]<min_n){\n            min_n\
    \ = numbers[i];\n        }\n    }\n    var scale = max_n - min_n;\n    var rescaled\
    \ = [];\n    for (var i=0; i<numbers.length; i++){\n        rescaled.push((numbers[i]-min_n)/scale);\n\
    \    }\n    return rescaled;\n}\n", "    //Find the min and max values in the\
    \ array\n    let maxValue = Math.max(...numbers);\n    let minValue = Math.min(...numbers);\n\
    \    let scaled_array = [];\n    //Subtract the min from the value and divide\
    \ by the max minus the min\n    numbers.forEach(num => {\n        scaled_array.push((num\
    \ - minValue) / (maxValue - minValue));\n    });\n    return scaled_array;\n}",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ range = max - min;\n    return numbers.map(val => (val - min) / range);\n}\n",
  "    var numbers_min = Math.min.apply(null, numbers);\n    var numbers_max = Math.max.apply(null,\
    \ numbers);\n    var numbers_range = numbers_max - numbers_min;\n    var unit_scaled\
    \ = numbers.map(function(n){\n        return (n - numbers_min) / numbers_range;\n\
    \    });\n    return unit_scaled;\n}\n", "    let minimum = Math.min(...numbers);\n\
    \    let maximum = Math.max(...numbers);\n    let difference = maximum - minimum;\n\
    \    let result = numbers.map(item => (item - minimum) / difference);\n    return\
    \ result;\n}\n\nmodule.exports = {to_unit_vector,rescale_to_unit};", "    const\
    \ largest = Math.max(...numbers);\n    const smallest = Math.min(...numbers);\n\
    \    const step = 1.0 / (largest - smallest);\n    return numbers.map(function(n){\n\
    \        return (n - smallest) * step;\n    });\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  return numbers.map(num => (num - min)\
    \ / (max - min));\n}\n", "    let max_num = Math.max(...numbers);\n    let min_num\
    \ = Math.min(...numbers);\n    let new_numbers = [];\n    for (let num of numbers){\n\
    \        new_numbers.push((num - min_num)/(max_num - min_num));\n    }\n    return\
    \ new_numbers;\n}\n", "    return numbers.map(function(num){\n        var max\
    \ = Math.max.apply(Math, numbers);\n        var min = Math.min.apply(Math, numbers);\n\
    \        return (num - min) / (max - min);\n    });\n}\n", "    var largest =\
    \ numbers[0];\n    var smallest = numbers[0];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        if (numbers[i] > largest){\n            largest = numbers[i];\n\
    \        }\n        if (numbers[i] < smallest){\n            smallest = numbers[i];\n\
    \        }\n    }\n    var range = largest - smallest;\n    for (var i = 0; i\
    \ < numbers.length; i++){\n        numbers[i] = (numbers[i] - smallest) / range;\n\
    \    }\n    return numbers;\n}\n", "    return numbers.map(number => (number -\
    \ Math.min(...numbers))/\n                        (Math.max(...numbers) - Math.min(...numbers)));\n\
    }\n", "  var min = min_number(numbers);\n  var max = max_number(numbers);\n  var\
    \ length = numbers.length;\n  for (var i = 0; i < length; i++){\n    numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n  }\n  return numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw \"Can't rescale an array of just one element\";\n    }\n\
    \    var minimum = numbers[0];\n    var maximum = numbers[0];\n    for (var i\
    \ = 1; i < numbers.length; i++) {\n        var number = numbers[i];\n        if\
    \ (number < minimum) {\n            minimum = number;\n        }\n        if (number\
    \ > maximum) {\n            maximum = number;\n        }\n    }\n    var rescaled\
    \ = [];\n    for (var i = 0; i < numbers.length; i++) {\n        var number =\
    \ numbers[i];\n        rescaled.push((number - minimum) / (maximum - minimum));\n\
    \    }\n    return rescaled;\n}\n", "    var smallest = Math.min.apply(Math, numbers);\n\
    \    var largest = Math.max.apply(Math, numbers);\n    var range = largest - smallest;\n\
    \    var result = numbers.map(function(number){\n        return (number - smallest)\
    \ / range;\n    });\n    return result;\n}\n", "    //we assume that numbers array\
    \ has at least two elements\n    var min_number = numbers[0];\n    var max_number\
    \ = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < min_number){\n            min_number = numbers[i];\n        }\n        if(numbers[i]\
    \ > max_number){\n            max_number = numbers[i];\n        }\n    }\n   \
    \ var unit_scale = max_number - min_number;\n    var unit_numbers = numbers.map(\n\
    \        function(number){\n            return (number - min_number) / unit_scale;\n\
    \        }\n    );\n    return unit_numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let result = numbers.map( number =>\
    \ (number - min) / (max - min) );\n    return result;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max\
    \ - min;\n    return numbers.map(function(number){\n        return (number - min)\
    \ / delta;\n    });\n}\n", "    var min_val = Math.min.apply(null, numbers);\n\
    \    var max_val = Math.max.apply(null, numbers);\n    return numbers.map( function(elem){\n\
    \        return (elem - min_val) / (max_val - min_val);\n    });\n}\n\n", "  \
    \  var max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null,\
    \ numbers);\n    var i = 0;\n    var lin_transform = [];\n    for (i = 0; i <\
    \ numbers.length; i++) {\n        var x = (numbers[i] - min) / (max - min);\n\
    \        lin_transform.push(x);\n    }\n    return lin_transform;\n}\n", "\tvar\
    \ min_number = Number.MAX_VALUE;\n\tvar max_number = Number.MIN_VALUE;\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < min_number){\n\t\t\tmin_number\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > max_number){\n\t\t\tmax_number = numbers[i];\n\
    \t\t}\n\t}\n\tvar multiplier = 1.0 / (max_number - min_number);\n\tfor(var i =\
    \ 0; i < numbers.length; i++){\n\t\tnumbers[i] = (numbers[i] - min_number) * multiplier;\n\
    \t}\n\treturn numbers;\n}\n", "    var min_number = min(numbers);\n    var max_number\
    \ = max(numbers);\n    return map(function(number){\n        return (number -\
    \ min_number) / (max_number - min_number);\n    }, numbers);\n}\n", "\tvar min=1000;\n\
    \tvar max=-1000;\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]<min){\n\
    \t\t\tmin=numbers[i];\n\t\t}\n\t\tif(numbers[i]>max){\n\t\t\tmax=numbers[i];\n\
    \t\t}\n\t}\n\tvar res=[];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tres.push((numbers[i]-min)/(max-min));\n\
    \t}\n\treturn res;\n}\n", "\tvar min = get_min(numbers);\n\tvar max = get_max(numbers);\n\
    \tvar diff = max - min;\n\treturn numbers.map(function(val){\n\t\treturn (val\
    \ - min) / diff;\n\t});\n}\n", "    var max = numbers[0];\n    var min = numbers[0];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] > max){\n\
    \            max = numbers[i];\n        }\n        if (numbers[i] < min){\n  \
    \          min = numbers[i];\n        }\n    }\n    var result = [];\n    for\
    \ (var j = 0; j < numbers.length; j++){\n        result.push((numbers[j] - min)\
    \ / (max - min));\n    }\n    return result;\n}\n", "    let min=numbers[0];\n\
    \    let max=numbers[0];\n    for(i=0;i<numbers.length;i++){\n        if(numbers[i]<min){\n\
    \            min=numbers[i];\n        }\n        if(numbers[i]>max){\n       \
    \     max=numbers[i];\n        }\n    }\n    for(i=0;i<numbers.length;i++){\n\
    \        numbers[i]=(numbers[i]-min)/(max-min);\n    }\n    return numbers;\n\
    }\n", "    if(numbers.length < 2){\n        return numbers;\n    }\n    var max\
    \ = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null, numbers);\n\
    \    return numbers.map(function(n){\n        return (n - min) / (max - min);\n\
    \    });\n}\n", "  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n\
    \  let new_array = [];\n  for (let i = 0; i < numbers.length; i++){\n    new_array.push((numbers[i]\
    \ - min) / (max - min));\n  }\n  return new_array;\n}\n\nmodule.exports = {\n\
    \  rescale_to_unit\n};", "    var min = numbers[0];\n    var max = numbers[0];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n        if (numbers[i] > max){\n  \
    \          max = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\n", "    var smallest = Math.min.apply(Math, numbers);\n    var\
    \ largest = Math.max.apply(Math, numbers);\n    return numbers.map(function(n){return\
    \ (n-smallest)/(largest-smallest)});\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var result = numbers.map(function(val)\
    \ {\n    var delta = max - min;\n    if (delta !== 0) {\n      return (val - min)\
    \ / delta;\n    } else {\n      return val;\n    }\n  });\n  return result;\n\
    }\n", "    //Your code here.\n    var min = numbers[0];\n    var max = numbers[0];\n\
    \    for (i = 0; i < numbers.length; i++) {\n      if (numbers[i] < min) {\n \
    \       min = numbers[i];\n      }\n      if (numbers[i] > max) {\n        max\
    \ = numbers[i];\n      }\n    }\n    var rescaled = numbers.map(function(n) {\n\
    \      return (n - min) / (max - min);\n    });\n    return rescaled;\n}\n", " \
    \   numbers = numbers.map(function(n){return +n.toFixed(3)});\n    let max = Math.max(...numbers);\n\
    \    let min = Math.min(...numbers);\n    let diff = max - min;\n    if(diff ===\
    \ 0) return numbers;\n    let new_numbers = numbers.map(function(n){\n       \
    \ return ((n - min) / diff).toFixed(3);\n    });\n    return new_numbers;\n}\n",
  "\tvar newArray = [];\n\tvar max = Math.max.apply(null, numbers);\n\tvar min = Math.min.apply(null,\
    \ numbers);\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tnewArray.push((numbers[i]\
    \ - min) / (max - min));\n\t}\n\treturn newArray;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var new_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; i++){\n        new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return new_numbers;\n}\n", "    var min =\
    \ Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n\
    \    return numbers.map(function(e){return ((e-min)/(max-min));})\n}\n", "\tvar\
    \ result = [];\n\tvar min = d3.min(numbers);\n\tvar max = d3.max(numbers);\n\t\
    for (var i = 0; i < numbers.length; i++){\n\t\tresult.push((numbers[i] - min)\
    \ / (max - min));\n\t}\n\treturn result;\n}\n", "    //we are going to have to\
    \ set a maximum and minimum, and then apply a linear transformation to the numbers\n\
    \    let minimum = numbers[0];\n    let maximum = numbers[0];\n    //let us define\
    \ a function that is the form of y = mx + b\n    let m;\n    let b;\n    //first\
    \ we have to find the min and max\n    for(let i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] < minimum){\n            minimum = numbers[i];\n      \
    \  }\n        if(numbers[i] > maximum){\n            maximum = numbers[i];\n \
    \       }\n    }\n    //now we apply the formula for a linear transformation\n\
    \    m = 1 / (maximum - minimum);\n    b = -minimum * m;\n    //we now apply the\
    \ function to the numbers array\n    for(let i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = m * numbers[i] + b;\n    }\n    return numbers;\n}\n", " \
    \   let min_number = Math.min(...numbers);\n    let max_number = Math.max(...numbers);\n\
    \    let unit_numbers = numbers.map(\n        function(number){\n            return\
    \ (number - min_number) / (max_number - min_number);\n        }\n    );\n    return\
    \ unit_numbers;\n}", "    // find smallest and largest numbers\n    let min =\
    \ numbers[0];\n    let max = numbers[0];\n    for (let n of numbers){\n      \
    \  if (n < min){\n            min = n;\n        }\n        if (n > max){\n   \
    \         max = n;\n        }\n    }\n    // convert each number to a floating\
    \ number on the range 0 to 1\n    const diff = max - min;\n    const scaled =\
    \ numbers.map(n => {\n        return (n - min) / diff;\n    });\n    return scaled;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var unitArray = [];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        unitArray.push((numbers[i] - min) / (max - min));\n    }\n  \
    \  return unitArray;\n}\n", "    let min = numbers[0];\n    let max = numbers[0];\n\
    \    for (let number of numbers){\n        if (number < min){\n            min\
    \ = number;\n        }\n        if (number > max){\n            max = number;\n\
    \        }\n    }\n    let range = max - min;\n    return numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n}\n", "    var min = numbers[0],\
    \ max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    for(var i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n\
    }\n", "    var min = min_element(numbers);\n    var max = max_element(numbers);\n\
    \    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n       \
    \ result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n\
    }\n", "\tvar max = _.max(numbers);\n\tvar min = _.min(numbers);\n\tvar scale =\
    \ max - min;\n\treturn _.map(numbers, function(num){\n\t\treturn (num - min) /\
    \ scale;\n\t});\n}\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let output = [];\n    for (let i = 0; i < numbers.length; i++){\n       \
    \ output.push((numbers[i] - min) / (max - min));\n    }\n    return output;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var l = [];\n    numbers.forEach(function(el){\n        l.push((el\
    \ - min) / (max - min));\n    });\n    return l;\n}\n", "    var max = Math.max.apply(null,\
    \ numbers);\n    var min = Math.min.apply(null, numbers);\n    var range = max\
    \ - min;\n    var result = numbers.map(function(n){\n        return (n - min)\
    \ / range;\n    });\n    return result;\n}\n", "    var min_value = Math.min.apply(null,\
    \ numbers);\n    var max_value = Math.max.apply(null, numbers);\n    var result\
    \ = [];\n    for (var i = 0; i < numbers.length; i++){\n        result.push((numbers[i]\
    \ - min_value) / (max_value - min_value));\n    }\n    return result;\n}\n", " \
    \   var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var new_numbers = [];\n    for (var i=0; i<numbers.length; i++){\n\
    \        new_numbers.push((numbers[i]-min)/(max-min));\n    }\n    return new_numbers;\n\
    }\n", "\treturn numbers.map(function(n){\n\t\treturn (n - Math.min.apply(null,\
    \ numbers))/(Math.max.apply(null, numbers) - Math.min.apply(null, numbers));\n\
    \t});\n}\n", "  const n = numbers.length;\n  let min = Number.MAX_VALUE;\n  let\
    \ max = Number.MIN_VALUE;\n  for (let i = 0; i < n; i++){\n    if (numbers[i]\
    \ < min){\n      min = numbers[i];\n    }\n    if (numbers[i] > max){\n      max\
    \ = numbers[i];\n    }\n  }\n  const range = max - min;\n  let unit_scale = [];\n\
    \  for (let i = 0; i < n; i++){\n    unit_scale.push((numbers[i] - min) / range);\n\
    \  }\n  return unit_scale;\n}\n", "    let smallest = numbers[0];\n    let largest\
    \ = numbers[0];\n    let range = 0;\n    let scaled = [];\n    for (let n of numbers){\n\
    \        if (n < smallest){\n            smallest = n;\n        }\n        if\
    \ (n > largest){\n            largest = n;\n        }\n    }\n    range = largest\
    \ - smallest;\n    for (let n of numbers){\n        scaled.push((n - smallest)\
    \ / range);\n    }\n    return scaled;\n}", "    var max = Math.max.apply(null,\
    \ numbers);\n    var min = Math.min.apply(null, numbers);\n    return numbers.map(function(n){return\
    \ (n-min)/(max-min);});\n}\n", "  const min = Math.min(...numbers);\n  const max\
    \ = Math.max(...numbers);\n  const length = numbers.length - 1;\n  return numbers.map((number,\
    \ index) => {\n    return (number - min) / (max - min)\n  });\n}", "  // TODO\n\
    \  var max = numbers[0];\n  var min = numbers[0];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    if\
    \ (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  var scale = [];\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    scale.push((numbers[i] - min)\
    \ / (max - min));\n  }\n  return scale;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var range = max - min;\n\
    \  var scaled = numbers.map(function(n){\n    return (n - min) / range;\n  });\n\
    \  return scaled;\n}\n", "    const scaled_numbers = numbers.map(function(num)\
    \ {\n        return (num - Math.min(...numbers)) / (Math.max(...numbers) - Math.min(...numbers));\n\
    \    });\n    return scaled_numbers;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = [];\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        result.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\n", "    //find the smallest\n\
    \    var smallest = Math.min.apply(null, numbers);\n    //find the largest\n \
    \   var largest = Math.max.apply(null, numbers);\n    //find the difference\n\
    \    var diff = largest - smallest;\n    //go through the array and apply transform\n\
    \    for(var i = 0; i < numbers.length; i++){\n        //subtract the smallest\
    \ to make smallest == 0\n        numbers[i] -= smallest;\n        //divide by\
    \ the diff\n        numbers[i] /= diff;\n    }\n    return numbers;\n}\n", " \
    \   var max_num = numbers[0];\n    var min_num = numbers[0];\n    for (var i =\
    \ 0; i < numbers.length; i++){\n        if (numbers[i] > max_num){\n         \
    \   max_num = numbers[i];\n        }\n        if (numbers[i] < min_num){\n   \
    \         min_num = numbers[i];\n        }\n    }\n    var new_array = [];\n \
    \   for (var i = 0; i < numbers.length; i++){\n        new_array.push((numbers[i]\
    \ - min_num) / (max_num - min_num));\n    }\n    return new_array;\n}\n", "  \
    \  var min = numbers[0], max = numbers[0], n;\n    for (var i=1; i<numbers.length;\
    \ i++){\n        n = numbers[i];\n        if (n < min) min = n;\n        if (n\
    \ > max) max = n;\n    }\n    var span = max - min;\n    var result = [];\n  \
    \  for (var i=0; i<numbers.length; i++){\n        result.push((numbers[i] - min)\
    \ / span);\n    }\n    return result;\n}\n", "    //First find smallest and largest\
    \ numbers in array:\n    var smallest_number = Math.min.apply(null, numbers);\n\
    \    var largest_number = Math.max.apply(null, numbers);\n    //If largest is\
    \ same as smallest (flat array), then return array filled with 1.0:\n    if (largest_number\
    \ == smallest_number){\n        return numbers.fill(1.0);\n    } else {\n    \
    \    //There is a range of values in array, so rescale using appropriate formula:\n\
    \        var rescaled_array = numbers.map(function(current_value){\n         \
    \   return (current_value - smallest_number) / (largest_number - smallest_number);\n\
    \        });\n        return rescaled_array;\n    }\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max\
    \ - min;\n    if (delta == 0){\n        return numbers;\n    }\n\n    var result\
    \ = numbers.map(function(elem){\n        return (elem - min) / delta;\n    });\n\
    \    return result;\n}\n", "  var max = Math.max.apply(null, numbers);\n  var\
    \ min = Math.min.apply(null, numbers);\n  var scale = (max - min);\n  var res\
    \ = [];\n  for (var i = 0; i < numbers.length; i++) {\n    res.push((numbers[i]\
    \ - min) / scale);\n  }\n  return res;\n}\n", "\tvar min = Math.min.apply(Math,\
    \ numbers);\n\tvar max = Math.max.apply(Math, numbers);\n\t\n\treturn numbers.map(function(x){\n\
    \t\treturn (x - min) / (max - min);\n\t});\n}\n\n", "    let lowest_number = Math.min(...numbers);\n\
    \    let highest_number = Math.max(...numbers);\n    return numbers.map(n => (n\
    \ - lowest_number) / (highest_number - lowest_number));\n}\n", "    var min =\
    \ get_min(numbers);\n    var max = get_max(numbers);\n    var normalized_numbers\
    \ = [];\n    var i;\n    for (i = 0; i < numbers.length; i++){\n        normalized_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return normalized_numbers;\n}\n", "  let\
    \ lmin = Math.min(...numbers);\n  let lmax = Math.max(...numbers);\n  let lrange\
    \ = lmax - lmin;\n  return numbers.map(x => (x - lmin) / lrange);\n}\n", "   \
    \ var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    return numbers.map(function(i){\n        return (i - min) / (max\
    \ - min);\n    });\n}\n", "    let min = Math.min(...numbers);\n    let max =\
    \ Math.max(...numbers);\n    let range = max - min;\n    let scaled_numbers =\
    \ [];\n    for (let num of numbers){\n        scaled_numbers.push((num - min)\
    \ / range);\n    }\n    return scaled_numbers;\n}\n", "    let max = Math.max(...numbers)\n\
    \    let min = Math.min(...numbers)\n    let range = max - min\n    let new_numbers\
    \ = []\n    numbers.forEach(e => {\n        if (range == 0){\n            new_numbers.push(0)\n\
    \        } else {\n            new_numbers.push((e - min) / range)\n        }\n\
    \    })\n    return new_numbers\n}\n", "  var numbers_copy = numbers.slice();\n\
    \  numbers_copy.sort(function(a, b){return a-b});\n  var min = numbers_copy[0];\n\
    \  var max = numbers_copy[numbers_copy.length-1];\n  // console.log(min, max);\n\
    \  var scale = max - min;\n  // console.log(scale);\n  var scaled_numbers = [];\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    scaled_numbers.push((numbers[i]-min)/scale);\n\
    \  }\n  return scaled_numbers;\n}\n", "\tvar max = numbers[0], min = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max) max = numbers[i];\n\
    \t\tif(numbers[i] < min) min = numbers[i];\n\t}\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tnumbers[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn numbers;\n\
    }\n", "    //\n    // your code here\n    //\n    return numbers.map(function(x){\n\
    \        return (x - Math.min(...numbers)) / (Math.max(...numbers) - Math.min(...numbers));\n\
    \    });\n}\n", "  var original_min = Math.min.apply(Math, numbers);\n  var original_max\
    \ = Math.max.apply(Math, numbers);\n  var scaled_min = 0;\n  var scaled_max =\
    \ 1;\n  var scaled_numbers = numbers.map(function(number){\n    return ((number\
    \ - original_min)*(scaled_max - scaled_min)/(original_max - original_min)) + scaled_min;\n\
    \  });\n  return scaled_numbers;\n}\n", "\tlet min_ = numbers[0], max_ = numbers[0];\n\
    \tfor(let i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min_) min_ = numbers[i];\n\
    \t\tif(numbers[i] > max_) max_ = numbers[i];\n\t}\n\tlet divider = (max_ - min_);\n\
    \tfor(let i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = (numbers[i] - min_)\
    \ / divider;\n\t}\n\treturn numbers;\n}\n", "    var minNumber = Math.min.apply(null,\
    \ numbers);\n    var maxNumber = Math.max.apply(null, numbers);\n    return numbers.map(function(num){\n\
    \        return (num - minNumber) / (maxNumber - minNumber);\n    });\n}\n", "\t\
    min = numbers[0];\n\tmax = numbers[0];\n\tfor (let i = 0; i < numbers.length;\
    \ i++){\n\t\tif (numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tlet new_numbers = []\n\tfor\
    \ (let i = 0; i < numbers.length; i++){\n\t\tnew_numbers.push((numbers[i] - min)\
    \ / (max - min));\n\t}\n\treturn new_numbers;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var rescaled =\
    \ [];\n    for (var i=0; i<numbers.length; i++){\n        rescaled.push((numbers[i]-min)/(max-min));\n\
    \    }\n    return rescaled;\n}\n", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    var result = [];\n    for (var\
    \ i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max\
    \ - min));\n    }\n    return result;\n}\n", "    var max = Math.max.apply(null,\
    \ numbers),\n        min = Math.min.apply(null, numbers);\n    for (var i = 0;\
    \ i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) / (max -\
    \ min);\n    }\n    return numbers;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var dist = max\
    \ - min;\n    var unit_numbers = [];\n    for (i = 0; i < numbers.length; i++){\n\
    \        unit_numbers.push((numbers[i] - min) / dist);\n    }\n    return unit_numbers;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    var new_numbers = numbers.map(function(number){return\
    \ (number - min) / range;});\n    return new_numbers;\n}\n", "    if (numbers.length\
    \ <= 1) {\n        throw new Error(\"Expected at least two numbers in the array.\"\
    );\n    }\n    var min = numbers[0];\n    var max = numbers[0];\n    for (var\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    var scale = max - min;\n    var\
    \ scaled = [];\n    for (var i = 0; i < numbers.length; i++) {\n        scaled.push((numbers[i]\
    \ - min) / scale);\n    }\n    return scaled;\n}\n", "    let mn = Math.min(...numbers)\n\
    \    let mx = Math.max(...numbers)\n    return numbers.map(n => (n - mn) / (mx\
    \ - mn))\n}\n", "    let max_number = Math.max(...numbers);\n    let min_number\
    \ = Math.min(...numbers);\n    let result = numbers.map(function(item){\n    \
    \    return (item - min_number) / (max_number - min_number);\n    });\n    return\
    \ result;\n}\n", "\tvar range = list_max(numbers) - list_min(numbers);\n\tvar\
    \ new_numbers = [];\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tnew_numbers.push((numbers[i]\
    \ - list_min(numbers)) / range);\n\t}\n\treturn new_numbers;\n}\n", "\tvar min\
    \ = Math.min.apply(null, numbers);\n\tvar max = Math.max.apply(null, numbers);\n\
    \tvar range = max - min;\n\tvar newNumbers = [];\n\tfor (var i = 0; i < numbers.length;\
    \ i++) {\n\t\tnewNumbers.push((numbers[i] - min) / range);\n\t}\n\treturn newNumbers;\n\
    }\n", "  var max_number = Math.max.apply(null, numbers);\n  var min_number = Math.min.apply(null,\
    \ numbers);\n  var scalar = max_number - min_number;\n  return numbers.map(x =>\
    \ (x - min_number) / scalar);\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\
    \tvar min = Math.min.apply(null, numbers);\n\tvar range = max - min;\n\tvar result\
    \ = numbers.map(function(n){\n\t\treturn (n - min) / range;\n\t});\n\treturn result;\n\
    }\n", "    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    //console.log(smallest, largest);\n    var rescaled = [];\n \
    \   for (i=0; i<numbers.length; i++){\n        rescaled.push((numbers[i]-smallest)/(largest-smallest));\n\
    \    }\n    return rescaled;\n}\n", "\tvar max = Number.MIN_VALUE;\n\tvar min\
    \ = Number.MAX_VALUE;\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar current\
    \ = numbers[i];\n\t\tif(current > max){\n\t\t\tmax = current;\n\t\t}\n\t\tif(current\
    \ < min){\n\t\t\tmin = current;\n\t\t}\n\t}\n\t\n\tvar result = [];\n\t\n\tfor(var\
    \ i=0; i<numbers.length; i++){\n\t\tvar num = numbers[i];\n\t\tvar res = (num\
    \ - min) / (max - min);\n\t\tresult.push(res);\n\t}\n\t\n\treturn result;\n}\n",
  "    var min = numbers[0];\n    var max = numbers[0];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n     \
    \   }\n        if (numbers[i] > max){\n            max = numbers[i];\n       \
    \ }\n    }\n    var range = max - min;\n    var rescaled = [];\n    for (var i\
    \ = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - min) / range);\n\
    \    }\n    return rescaled;\n}\n", "    let mins = numbers.map(function(x){return\
    \ x.min()});\n    let maxs = numbers.map(function(x){return x.max()});\n    let\
    \ scales = maxs.map(function(max, i){return max - mins[i]});\n    return numbers.map(function(array,i){\n\
    \        return array.map(function(x){\n            return (x - mins[i]) / scales[i];\n\
    \        });\n    });\n}\n", "    if(numbers.length < 2){\n        return numbers;\n\
    \    }\n    let result = [],\n        min = _.min(numbers),\n        max = _.max(numbers);\n\
    \    if(min == max){\n        return numbers;\n    }\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        result.push((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;\n}\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let delta = max - min;\n    if (delta === 0){\n        return [0,0,0,0,0];\n\
    \    }\n    return numbers.map(\n        function(x){\n            return (x -\
    \ min) / delta;\n        }\n    );\n}\n", "    var largest = Math.max.apply(null,\
    \ numbers);\n    var smallest = Math.min.apply(null, numbers);\n    var unit =\
    \ [];\n    for (var i=0; i<numbers.length; i++){\n        unit.push((numbers[i]-smallest)/(largest-smallest));\n\
    \    }\n    return unit;\n}\n", "    //find the maximum\n    var max = 0;\n  \
    \  for(var i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n     \
    \       max = numbers[i];\n        }\n    }\n    //rescale to the unit interval\n\
    \    for(var i=0; i<numbers.length; i++){\n        numbers[i] = numbers[i]/max;\n\
    \    }\n    return numbers;\n}\n", "    var newNumbers = [];\n    var max = Math.max.apply(null,\
    \ numbers);\n    var min = Math.min.apply(null, numbers);\n    var range = max\
    \ - min;\n    for (var i = 0; i < numbers.length; i++) {\n        newNumbers.push((numbers[i]\
    \ - min) / range);\n    }\n    return newNumbers;\n}\n", "  return numbers.map(x\
    \ => (x - Math.min(...numbers)) / (Math.max(...numbers) - Math.min(...numbers)));\n\
    }", "    if(numbers.length < 2){\n        throw new Error(\"Cannot rescale array\
    \ of length < 2\");\n    }\n    var min = min(numbers);\n    var max = max(numbers);\n\
    \    return numbers.map(function(num){\n        return (num - min) / (max - min);\n\
    \    });\n}\n\nvar axis_types = {\n    linear: d3.svg.axis(),\n    log: d3.svg.axis().tickFormat(d3.format(\"\
    e\")),\n    pow: d3.svg.axis().tickFormat(d3.format(\"e\")),\n    sqrt: d3.svg.axis().tickFormat(d3.format(\"\
    e\")),\n    \"default\": d3.svg.axis()\n};\n\nvar default_dataset = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158",
  "  var min = numbers[0];\n  var max = numbers[0];\n  var range = 0;\n  var new_numbers\
    \ = [];\n  var result = 0;\n\n  for (var i = 0; i < numbers.length; i++) {\n \
    \   if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n  }\n  range = max - min;\n  for (var\
    \ i = 0; i < numbers.length; i++) {\n    new_numbers.push((numbers[i] - min) /\
    \ range);\n  }\n  return new_numbers;\n}\n", "    let min = numbers[0];\n    let\
    \ max = numbers[0];\n    for (let i = 0; i < numbers.length; i++){\n        min\
    \ = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n   \
    \ }\n    let new_array = [];\n    for (let i = 0; i < numbers.length; i++){\n\
    \        new_array.push((numbers[i] - min) / (max - min));\n    }\n    return\
    \ new_array;\n}\n", "    let largest = Math.max(...numbers);\n    let smallest\
    \ = Math.min(...numbers);\n    let result = [];\n    for (let number of numbers){\n\
    \        result.push((number - smallest) / (largest - smallest));\n    }\n   \
    \ return result;\n}\n", "  let minimum = Math.min(...numbers)\n  let maximum =\
    \ Math.max(...numbers)\n  let new_array = numbers.map(n => (n - minimum) / (maximum\
    \ - minimum))\n  return new_array\n}\n", "    var min = numbers[0];\n    var max\
    \ = numbers[0];\n    var nums_len = numbers.length;\n    var i;\n    for(i = 1;\
    \ i < nums_len; i++){\n        if(numbers[i] < min){\n            min = numbers[i];\n\
    \        }\n        if(numbers[i] > max){\n            max = numbers[i];\n   \
    \     }\n    }\n    var scale = 1 / (max - min);\n    var new_numbers = [];\n\
    \    for(i = 0; i < nums_len; i++){\n        new_numbers.push((numbers[i] - min)\
    \ * scale);\n    }\n    return new_numbers;\n}\n", "  return numbers.map(function(number)\
    \ {\n    return (number - Math.min.apply(null, numbers)) / (Math.max.apply(null,\
    \ numbers) - Math.min.apply(null, numbers));\n  });\n}\n", "\tconst min = Math.min(...numbers)\n\
    \tconst max = Math.max(...numbers)\n\tconst delta = max - min\n\treturn numbers.map(n\
    \ => (n - min) / delta)\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const coef = (max - min);\n    return numbers.map(function(number){\n\
    \        return (number - min) / coef;\n    });\n}\n", "    return numbers.map(function(number){\n\
    \        var min=numbers[0];\n        var max=numbers[0];\n        numbers.forEach(function(num){\n\
    \            if(num>max){\n                max=num;\n            }\n         \
    \   if(num<min){\n                min=num;\n            }\n        });\n     \
    \   var diff=max-min;\n        return (number-min)/diff;\n    });\n}\n", "  const\
    \ min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const denominator\
    \ = max - min;\n  const rescaled_numbers = [];\n  for (const number of numbers){\n\
    \    rescaled_numbers.push((number - min) / denominator);\n  }\n  return rescaled_numbers;\n\
    }\n", "    // min and max are elements of numbers\n    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    return numbers.map(function(element){\n\
    \        return (element - min) / (max - min);\n    });\n}\n", "\tvar min=Math.min.apply(null,\
    \ numbers);\n\tvar max=Math.max.apply(null, numbers);\n\tvar f=function(x){return\
    \ (x-min)/(max-min);};\n\treturn numbers.map(f);\n}\n", "    var max = Math.max.apply(null,\
    \ numbers);\n    var min = Math.min.apply(null, numbers);\n    if (max == min)\n\
    \        return numbers;\n    var result = [];\n    for (var i = 0; i < numbers.length;\
    \ i++)\n        result.push((numbers[i] - min) / (max - min));\n    return result;\n\
    }\n", "    return numbers.map(function(number) {\n        var minimum = Math.min.apply(null,\
    \ numbers);\n        var maximum = Math.max.apply(null, numbers);\n        return\
    \ (number - minimum) / (maximum - minimum);\n    });\n}\n", "\tvar rescaled =\
    \ [];\n\tvar min_value = min(numbers);\n\tvar max_value = max(numbers);\n\tfor\
    \ (var i = 0; i < numbers.length; i++){\n\t\tvar value = (numbers[i] - min_value)\
    \ / (max_value - min_value);\n\t\trescaled.push(value);\n\t}\n\treturn rescaled;\n\
    }\n", "    var arr = [];\n    var max = Math.max.apply(null, numbers);\n    var\
    \ min = Math.min.apply(null, numbers);\n    var range = max - min;\n    for (var\
    \ i = 0; i < numbers.length; i++){\n        arr.push((numbers[i] - min) / range);\n\
    \    }\n    return arr;\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var ret = [];\n    for (var\
    \ i = 0; i < numbers.length; i++){\n        ret.push((numbers[i] - min) / (max\
    \ - min));\n    }\n    return ret;\n}\n", "    var biggest = 0;\n    var smallest\
    \ = 0;\n    var res = [];\n    // get the max and min value\n    for(var i=0;\
    \ i<numbers.length; i++){\n        if(numbers[i] > biggest){\n            biggest\
    \ = numbers[i];\n        }\n        if(numbers[i] < smallest){\n            smallest\
    \ = numbers[i];\n        }\n    }\n    // get the difference between max and min\n\
    \    var sub = biggest - smallest;\n    // now calculate the new value by substracting\
    \ the smallest and dividing by sub\n    for(var i=0; i<numbers.length; i++){\n\
    \        res.push((numbers[i] - smallest) / sub);\n    }\n    return res;\n}\n\
    \n", "  let [min, max] = [numbers[0], numbers[0]];\n  for (const n of numbers){\n\
    \    if (n < min) min = n;\n    if (n > max) max = n;\n  }\n  return numbers.map(n\
    \ => (n - min) / (max - min));\n}\n", "  var min = Math.min.apply(null, numbers);\n\
    \  var max = Math.max.apply(null, numbers);\n  var range = max - min;\n  return\
    \ numbers.map(function(n){ return (n - min) / range; });\n}\n", "  let rescaled_numbers\
    \ = numbers.map(value => {\n    return scale_to_unit(value, Math.min(...numbers),\
    \ Math.max(...numbers));\n  });\n  return rescaled_numbers;\n}", "\tvar min =\
    \ numbers[0];\n\tvar max = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif(numbers[i] <\
    \ min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\tvar newarr = [];\n\tfor(var i\
    \ = 0; i < numbers.length; i++){\n\t\tnewarr.push((numbers[i] - min) / (max -\
    \ min));\n\t}\n\treturn newarr;\n}\n", "    var largest = Math.max.apply(null,\
    \ numbers);\n    var smallest = Math.min.apply(null, numbers);\n    var new_numbers\
    \ = numbers.map(function(number){\n        return (number - smallest) / (largest\
    \ - smallest);\n    });\n    return new_numbers;\n}\n", "  let min = Math.min(...numbers);\n\
    \  let max = Math.max(...numbers);\n  return numbers.map( n => (n - min) / (max\
    \ - min));\n}\n", "\treturn numbers.map(number => (number - min(numbers)) / (max(numbers)\
    \ - min(numbers)));\n}\n", "    if (numbers.length < 2)\n        throw \"Numbers\
    \ array must have at least two elements\";\n    var max = numbers[0];\n    var\
    \ min = numbers[0];\n    for (var i = 1; i < numbers.length; i++){\n        if\
    \ (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i] <\
    \ min)\n            min = numbers[i];\n    }\n    var scaled = [];\n    for (var\
    \ i = 0; i < numbers.length; i++){\n        scaled.push((numbers[i] - min) / (max\
    \ - min));\n    }\n    return scaled;\n}\n", "\tvar sorted = numbers.sort(function(a,b){return\
    \ a-b});\n\tvar min = sorted[0];\n\tvar max = sorted[sorted.length-1];\n\t\n\t\
    var rescaled = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar rescaled_value\
    \ = (numbers[i]-min)/(max-min);\n\t\trescaled.push(rescaled_value);\n\t}\n\treturn\
    \ rescaled;\n}\n", "    var max = Math.max.apply(null, numbers);\n    var min\
    \ = Math.min.apply(null, numbers);\n    var result = [];\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n\
    \    }\n    return result;\n}\n", "  var min = Math.min.apply(null, numbers);\n\
    \  var max = Math.max.apply(null, numbers);\n  var rescaled = numbers.map(function(x){return\
    \ (x-min)/(max-min)});\n  return rescaled;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var result = numbers.map(function(element){\n\
    \        return (element - min) / (max - min);\n    });\n    return result;\n\
    }\n", "    // Calculate numbers range\n    var min = numbers[0];\n    var max\
    \ = numbers[0];\n    for (i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    var range = max\
    \ - min;\n    // Apply the scale\n    var scaled_numbers = [];\n    for (i = 0;\
    \ i < numbers.length; i++) {\n        scaled_numbers.push((numbers[i] - min) /\
    \ range);\n    }\n    return scaled_numbers;\n}\n", "    let result = [];\n  \
    \  let smallest = Math.min(...numbers);\n    let largest = Math.max(...numbers);\n\
    \    let i = 0;\n    for (let number of numbers){\n        if (smallest === largest){\n\
    \            result[i] = 0;\n        } else {\n            result[i] = (number\
    \ - smallest) / (largest - smallest);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n", "  var smallest_value = Math.min.apply(null, numbers);\n  var\
    \ biggest_value = Math.max.apply(null, numbers);\n  var rescaled_array = numbers.map(function(number){\n\
    \    return (number - smallest_value) / (biggest_value - smallest_value);\n  });\n\
    \  return rescaled_array;\n}\n", "    var result = [];\n    for (var i = 0; i\
    \ < numbers.length; i++) {\n        result.push(\n            Math.floor(\n  \
    \              (numbers[i] / (numbers.length + 1)) * 100\n            ) / 100\n\
    \        );\n    }\n    return result;\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var denom = max\
    \ - min;\n    return numbers.map(function(x){\n        return (x - min) / denom;\n\
    \    });\n}\n", "  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n\
    \  const diff = max - min;\n  return numbers.map(x => (x - min) / diff);\n}\n",
  "    let max = _.max(numbers);\n    let min = _.min(numbers);\n    let result =\
    \ _.map(numbers, (e) => (e - min) / (max - min));\n    return result;\n}\n", " \
    \ var min = Number.MAX_VALUE, max = Number.MIN_VALUE;\n  for(var i=0; i<numbers.length;\
    \ i++){\n    if(numbers[i]<min) min = numbers[i];\n    if(numbers[i]>max) max\
    \ = numbers[i];\n  }\n  for(var i=0; i<numbers.length; i++){\n    numbers[i] =\
    \ (numbers[i]-min)/(max-min);\n  }\n  return numbers;\n}", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var diff = max\
    \ - min;\n    var newNumbers = numbers.map(function(number){\n        return (number\
    \ - min) / diff;\n    });\n    return newNumbers;\n}\n", "  var max = -Infinity,\
    \ min = Infinity;\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n    \
    \  min = numbers[i];\n    }\n  }\n  for (var i = 0; i < numbers.length; i++) {\n\
    \    numbers[i] = (numbers[i] - min) / (max - min);\n  }\n  return numbers;\n\
    }\n\n", "    var max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null,\
    \ numbers);\n    return numbers.map(function(num){\n        return (num - min)\
    \ / (max - min);\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
