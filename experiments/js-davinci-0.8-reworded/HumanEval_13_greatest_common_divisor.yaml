name: HumanEval_13_greatest_common_divisor
language: js
prompt: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
  \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
  \ b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
  \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
  \ 60),12);\n}\n\ntest();"
completions: ["\tlet max = Math.max(a, b)\n\tlet min = Math.min(a, b)\n\tif (max %\
    \ min == 0) {\n\t\treturn min\n\t} else {\n\t\treturn greatest_common_divisor(min,\
    \ max % min)\n\t}\n}\n\n", "}\n", "    //your code here\n    if (a===0) {\n  \
    \      return b;\n    }\n    else if (b===0) {\n        return a;\n    }\n   \
    \ else {\n        var smaller;\n        var larger;\n        if (a>b) {\n    \
    \        smaller = b;\n            larger = a;\n        }\n        else {\n  \
    \          smaller = a;\n            larger = b;\n        }\n        var div =\
    \ larger/smaller;\n        var rem = larger%smaller;\n        if (rem===0) {\n\
    \            return smaller;\n        }\n        else {\n            return greatest_common_divisor(smaller,\
    \ rem);\n        }\n    }\n}\n", "    if(!b) {\n        return a;\n    }\n   \
    \ return greatest_common_divisor(b, a % b);\n}\n", "    if (b == 0) {\n      \
    \  return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n\
    \    }\n}\n", "  var gcd = 1;\n  var i = 2;\n  while(i <= a && i <= b){\n    if(a\
    \ % i == 0 && b % i == 0){\n      gcd = i;\n    }\n    i++;\n  }\n  return gcd;\n\
    }\n", "    var m = a, n = b, r;\n    while (n != 0){\n        r = m % n;\n   \
    \     m = n;\n        n = r;\n    }\n    return m;\n}\n", "    var num1 = Math.abs(a);\n\
    \    var num2 = Math.abs(b);\n    var min = Math.min(num1, num2);\n    var divisor\
    \ = 1;\n    var gcd = 1;\n    while (divisor <= min){\n        if (num1 % divisor\
    \ === 0 && num2 % divisor === 0){\n            gcd = divisor;\n        }\n   \
    \     divisor = divisor + 1;\n    }\n    return gcd;\n}", "\tif( a<0 || b<0 )\
    \ {\n\t\treturn -1;\n\t} else if( b == 0 ) {\n\t\treturn a;\n\t} else {\n\t\t\
    return greatest_common_divisor(b, a%b);\n\t}\n}\n", "\treturn a % b ? greatest_common_divisor(b,\
    \ a % b) : b;\n}\n", "    // YOUR CODE HERE\n    //raise an error if any of the\
    \ input is not an integer\n    if (is_integer(a) === false || is_integer(b) ===\
    \ false){\n        throw(\"Inputs should be integers\");\n    }\n    //raise an\
    \ error if any of the input is less than or equal to 0\n    if (a <= 0 || b <=\
    \ 0){\n        throw(\"Inputs should be positive\");\n    }\n    //raise an error\
    \ if the inputs are not numbers\n    if (is_number(a) === false || is_number(b)\
    \ === false){\n        throw(\"Inputs should be numbers\");\n    }\n    //if the\
    \ inputs are the same number, return the number\n    if (a === b){\n        return\
    \ a;\n    }\n    else {\n        //if the inputs are not the same number, return\
    \ the smaller number\n        var result = Math.min(a, b);\n        //return the\
    \ smallest number that can be divided by the inputs and have a remainder of 0\n\
    \        while (a % result !== 0 || b % result !== 0){\n            result = result\
    \ - 1;\n        }\n        return result;\n    }\n}\n", "    return b ? greatest_common_divisor(b,\
    \ a % b) : a;\n}\n", "\tvar n = Math.max(a, b);\n\tvar m = Math.min(a, b);\n\t\
    while(n > 0 && m > 0){\n\t\tif(n > m){\n\t\t\tn = n % m;\n\t\t}\n\t\telse{\n\t\
    \t\tm = m % n;\n\t\t}\n\t}\n\tif(n === 0){\n\t\treturn m;\n\t}\n\telse{\n\t\t\
    return n;\n\t}\n}", "\tif (a > b){\n\t\tvar gcd = b;\n\t}\n\telse{\n\t\tvar gcd\
    \ = a;\n\t}\n\tfor (i = 1; i <= gcd; i++){\n\t\tif ((a % i == 0) && (b % i ==\
    \ 0)){\n\t\t\tgcd = i;\n\t\t}\n\t}\n\treturn gcd;\n}\n", "    // TODO\n}\n", " \
    \   while (b != 0) {\n        var temp = a % b;\n        a = b;\n        b = temp;\n\
    \    }\n    return a;\n}\n", "    if(b == 0){\n        return a;\n    }\n    else{\n\
    \        return greatest_common_divisor(b, a % b);\n    }\n}\n\n", "    var gcd\
    \ = 1;\n    for (i = 1; i <= a && i <= b; i++) {\n        if (a % i == 0 && b\
    \ % i == 0)\n            gcd = i;\n    }\n    return gcd;\n}\n", "  var divisor\
    \ = 2,\n      greatestDivisor = 1;\n\n  //if u pass a -ve number this will not\
    \ work. fix it dude!!\n  if (a < 2 || b < 2)\n     return 1;\n\n  while(a >= divisor\
    \ && b >= divisor){\n   if(a %divisor == 0 && b% divisor ==0){\n      greatestDivisor\
    \ = divisor;\n    }\n   divisor++;\n  }\n  return greatestDivisor;\n}\n", "  var\
    \ remainder = a % b;\n  if (remainder == 0){\n    return b;\n  }\n  return greatest_common_divisor(b,\
    \ remainder);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
