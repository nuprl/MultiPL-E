name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strongest = {name: '', strength: 0};\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        const cap = extensions[i].replace(/[^A-Z]/g,\
    \ '').length;\n        const sm = extensions[i].replace(/[^a-z]/g, '').length;\n\
    \        if (cap - sm > strongest.strength) {\n            strongest.name = extensions[i];\n\
    \            strongest.strength = cap - sm;\n        }\n    }\n    return class_name\
    \ + '.' + strongest.name;\n}\n", "  var output = class_name + \".\";\n  var min_strength\
    \ = 1;\n  for (var i = 0; i < extensions.length; i++) {\n    var strength = -1*(extensions[i].replace(/[^A-Z]/g,\
    \ \"\").length - extensions[i].replace(/[^a-z]/g, \"\").length);\n    if (strength\
    \ < min_strength) {\n      min_strength = strength;\n      output = class_name\
    \ + \".\" + extensions[i];\n    }\n  }\n  return output;\n}\n", "    let strongest_extension\
    \ = [\"\",0];\n    for(let i=0; i<extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for(let c=0; c<extension.length;\
    \ c++){\n            if(extension[c] === extension[c].toUpperCase()){\n      \
    \          strength++;\n            }else{\n                strength--;\n    \
    \        }\n        }\n        if(strength > strongest_extension[1]){\n      \
    \      strongest_extension = [extension, strength];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension[0];\n}\n\n", "    let arrOfObj = extensions.map(x\
    \ => {\n        let caps = 0,\n            smalls = 0,\n            i = 0;\n \
    \       while(i < x.length){\n            if(x[i] !== x[i].toLowerCase()){\n \
    \               caps++;\n            } else if(x[i] !== x[i].toUpperCase()){\n\
    \                smalls++;\n            }\n            i++;\n        }\n     \
    \   return {name: x, strength: caps - smalls};\n    })\n    arrOfObj.sort((a,\
    \ b) => {\n        if(a.strength > b.strength){\n            return -1;\n    \
    \    } else if(a.strength < b.strength){\n            return 1;\n        } else\
    \ {\n            return 0;\n        }\n    })\n    return `${class_name}.${arrOfObj[0].name}`;\n\
    }\n", "    var strength = -Infinity,\n        strongest_extension = \"\";\n  \
    \  extensions.forEach(function(extension){\n        var cap = 0,\n           \
    \ sm = 0;\n        extension.split(\"\").forEach(function(ch){\n            if(ch.match(/[A-Z]/)){\n\
    \                cap += 1;\n            }\n            else if(ch.match(/[a-z]/)){\n\
    \                sm += 1;\n            }\n        });\n        if(cap - sm > strength){\n\
    \            strength = cap - sm;\n            strongest_extension = extension;\n\
    \        }\n    });\n    return class_name + \".\" + strongest_extension;\n}",
  "    let ext_strengths = {};\n    for (let i = 0; i < extensions.length; i++){\n\
    \        let extension = extensions[i];\n        let lowercase = extension.match(/[a-z]/g);\n\
    \        let uppercase = extension.match(/[A-Z]/g);\n        let cap = 0;\n  \
    \      let sm = 0;\n        if (lowercase != null){\n            sm = lowercase.length;\n\
    \        }\n        if (uppercase != null){\n            cap = uppercase.length;\n\
    \        }\n        ext_strengths[extension] = cap - sm;\n    }\n    let strongest_ext\
    \ = extensions[0];\n    let max_strengths = ext_strengths[strongest_ext];\n  \
    \  for (let key in ext_strengths){\n        if (ext_strengths[key] > max_strengths){\n\
    \            max_strengths = ext_strengths[key];\n            strongest_ext =\
    \ key;\n        }\n    }\n    return class_name + \".\" + strongest_ext;\n}",
  "  //YOUR CODE HERE\n}\n", "  var highest_number = 0;\n  var strongest_extension\
    \ = \"\";\n  for (var i = 0; i < extensions.length; i++) {\n    var uppercase_letters\
    \ = 0;\n    var lowercase_letters = 0;\n    for (var j = 0; j < extensions[i].length;\
    \ j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n \
    \       uppercase_letters++;\n      } else {\n        lowercase_letters++;\n \
    \     }\n    }\n    var strength = uppercase_letters - lowercase_letters;\n  \
    \  if (strength > highest_number) {\n      highest_number = strength;\n      strongest_extension\
    \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let a = -1,\n        res = \"\";\n    for(let ext of extensions){\n\
    \        let cap = ext.split('').filter(el => el == el.toUpperCase()).length,\n\
    \            sm = ext.split('').filter(el => el == el.toLowerCase()).length;\n\
    \        if((cap - sm) > a){\n            a = cap - sm;\n            res = ext;\n\
    \        }\n    }\n    return class_name + \".\" + res;\n}", "    let strongest\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  if (extension_strength(extensions[i]) > extension_strength(strongest)) {\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}", "    var strongestExt = \"\";\n    var strongestStrength\
    \ = -Infinity;\n    var strength = 0;\n    var numUp = 0;\n    var numLow = 0;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        numUp = 0;\n       \
    \ numLow = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n      \
    \      if(extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\"){\n         \
    \       numUp++;\n            }else{\n                numLow++;\n            }\n\
    \        }\n        strength = numUp - numLow;\n        if(strength > strongestStrength){\n\
    \            strongestStrength = strength;\n            strongestExt = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongestExt;\n}\n", "\textensions\
    \ = extensions.map(x => [x, (x.match(/[A-Z]/g) || []).length - (x.match(/[a-z]/g)\
    \ || []).length]);\n\tstrongest = extensions.reduce((a, b) => a[1] > b[1] ? a\
    \ : b);\n\treturn `${class_name}.${strongest[0]}`;\n}\n", "    let cap = 0;\n\
    \    let sm = 0;\n    let cur;\n    let max = 0;\n    let max_cap = 0;\n    let\
    \ max_sm = 0;\n    let max_ind = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        cap = 0;\n        sm = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            cur = extensions[i][j];\n            if(cur == cur.toUpperCase()){\n\
    \                cap += 1;\n            }\n            else{\n               \
    \ sm += 1;\n            }\n        }\n        if(cap-sm > max){\n            max\
    \ = cap-sm;\n            max_cap = cap;\n            max_sm = sm;\n          \
    \  max_ind = i;\n        }\n        else if(cap-sm == max){\n            if(cap\
    \ > max_cap){\n                max = cap-sm;\n                max_cap = cap;\n\
    \                max_sm = sm;\n                max_ind = i;\n            }\n \
    \           else if(cap == max_cap){\n                if(sm < max_sm){\n     \
    \               max = cap-sm;\n                    max_cap = cap;\n          \
    \          max_sm = sm;\n                    max_ind = i;\n                }\n\
    \            }\n        }\n    }\n    return class_name + \".\" + extensions[max_ind];\n\
    }\n", "\n}\n", "    var best_ext_name = \"\";\n    var best_ext_strength = 0;\n\
    \    for (var i = 0; i < extensions.length; i++) {\n        var curr_ext_name\
    \ = extensions[i];\n        var curr_ext_strength = Strength(curr_ext_name);\n\
    \        if (curr_ext_strength > best_ext_strength) {\n            best_ext_name\
    \ = curr_ext_name;\n            best_ext_strength = curr_ext_strength;\n     \
    \   }\n    }\n    return class_name + \".\" + best_ext_name;\n}", "    var strength\
    \ = -Infinity;\n    var best;\n    extensions.forEach(function(ext){\n       \
    \ var cap = (ext.match(/[A-Z]/g) || []).length;\n        var sm = (ext.match(/[a-z]/g)\
    \ || []).length;\n        var s = cap - sm;\n        if (s > strength){\n    \
    \        strength = s;\n            best = ext;\n        }\n    });\n    return\
    \ class_name + \".\" + best;\n}", "  //YOUR CODE HERE\n  var letters = \"\";\n\
    \  var capLetter = 0;\n  var smLetter = 0;\n  var highest = 0;\n  var highestExtension\
    \ = \"\";\n  var i = 0;\n  var myClass = class_name;\n  var ext = extensions;\n\
    \  while (i < ext.length) {\n    //console.log(ext[i]);\n    letters = ext[i];\n\
    \    console.log(letters);\n    var n = 0;\n    while (n < letters.length) {\n\
    \      if (letters[n] === letters[n].toUpperCase()) {\n        capLetter++;\n\
    \      } else {\n        smLetter++;\n      }\n      n++;\n    }\n    if (capLetter\
    \ - smLetter > highest) {\n      highest = capLetter - smLetter;\n      highestExtension\
    \ = letters;\n    }\n    capLetter = 0;\n    smLetter = 0;\n    i++;\n  }\n  return\
    \ myClass + \".\" + highestExtension;\n}\n", "    var weights = {};\n    var strongest\
    \ = '';\n    var temp = 0;\n    var caps = 0;\n    var sms = 0;\n    for(var i\
    \ = 0; i < extensions.length; i++){\n        caps = 0;\n        sms = 0;\n   \
    \     for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                caps++;\n            }\n\
    \            else{\n                sms++;\n            }\n        }\n       \
    \ weights[extensions[i]] = caps - sms;\n    }\n    for(var key in weights){\n\
    \        if(weights[key] > temp){\n            temp = weights[key];\n        \
    \    strongest = key;\n        }\n    }\n    return class_name + '.' + strongest;\n\
    }", "    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\
    \    // \"my_class.AA\"\n    let className = class_name;\n    let strongestExtension\
    \ = \"\";\n    let strongestExtensionName = \"\";\n    let strongestExtensionStrength\
    \ = -2;\n\n    extensions.forEach(extension => {\n        let extStrength = 0;\n\
    \        let extensionCapitals = 0;\n        let extensionSmall = 0;\n       \
    \ let extensionName = extension;\n        extension.split(\"\").forEach(char =>\
    \ {\n            if(char === char.toUpperCase()){\n                extensionCapitals++;\n\
    \            } else if(char === char.toLowerCase()){\n                extensionSmall++;\n\
    \            }\n        });\n        extStrength = extensionCapitals - extensionSmall;\n\
    \        if(extStrength > strongestExtensionStrength){\n            strongestExtensionStrength\
    \ = extStrength;\n            strongestExtensionName = extensionName;\n      \
    \  }\n    });\n    strongestExtension = className + \".\" + strongestExtensionName;\n\
    \    return strongestExtension;\n}", "    let final_result = [];\n    let result_array\
    \ = [];\n    for(let i = 0; i < extensions.length; i++){\n        for(let j =\
    \ 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                final_result.push(extensions[i][j]);\n            }\n       \
    \ }\n        let difference = final_result.length - (extensions[i].length - final_result.length);\n\
    \        result_array.push(difference);\n        final_result = [];\n    }\n \
    \   let strongest_difference = Math.max(...result_array);\n    let strongest_index\
    \ = result_array.indexOf(strongest_difference);\n    return `${class_name}.${extensions[strongest_index]}`;\n\
    }", "    // Your code here\n    return class_name + '.' + extensions.reduce((best,\
    \ ext) => {\n        const best_cap = count_upper(best),\n            best_sm\
    \ = count_lower(best),\n            ext_cap = count_upper(ext),\n            ext_sm\
    \ = count_lower(ext);\n        if (best_cap - best_sm > ext_cap - ext_sm) {\n\
    \            return best;\n        } else {\n            return ext;\n       \
    \ }\n    });\n}\n", "    let strongest = [];\n    extensions.map(i => {\n    \
    \    strongest.push([i, i.split('').filter(j => j.toUpperCase() == j).length -\
    \ i.split('').filter(j => j.toLowerCase() == j).length]);\n    });\n    strongest.sort((a,\
    \ b) => b[1] - a[1]);\n    return strongest[0][1] == strongest[1][1] ? `${class_name}.${strongest[0][0]}`\
    \ : `${class_name}.${strongest[0][0]}`;\n}\n", "    var big = [0,0];\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var up = 0;\n        var down =\
    \ 0;\n        for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                up++;\n            }\n\
    \            else{\n                down++;\n            }\n        }\n      \
    \  if(up - down > big[0]){\n            big[0] = up - down;\n            big[1]\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[big[1]];\n\
    }", "\tvar strongest = extensions[0];\n\tvar strongest_strength = 0;\n\tvar current_strength\
    \ = 0;\n\tfor (var i = 0; i < extensions.length; i++) {\n\t\tcurrent_strength\
    \ = ((extensions[i].match(/[A-Z]/g)||[]).length - (extensions[i].match(/[a-z]/g)||[]).length);\n\
    \t\tif (current_strength > strongest_strength) {\n\t\t\tstrongest = extensions[i];\n\
    \t\t\tstrongest_strength = current_strength;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest;\n}", "    let strongest_extension_name = null;\n    let\
    \ strongest_extension_strength = null;\n    for (let ext_index = 0; ext_index\
    \ < extensions.length; ext_index++){\n        const curr_extension = extensions[ext_index];\n\
    \        let curr_extension_strength = 0;\n        for (let ext_index = 0; ext_index\
    \ < curr_extension.length; ext_index++){\n            const curr_char = curr_extension[ext_index];\n\
    \            if (curr_char.toUpperCase() === curr_char){\n                curr_extension_strength++;\n\
    \            } else {\n                curr_extension_strength--;\n          \
    \  }\n        }\n        if (strongest_extension_strength === null || curr_extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ curr_extension_strength;\n            strongest_extension_name = curr_extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n", "\tvar strongest_extension = [];\n\tvar strength = 0;\n\tfor (var i = 0;\
    \ i < extensions.length; i++) {\n\t\tvar extension = extensions[i];\n\t\tvar cap\
    \ = 0;\n\t\tvar sm = 0;\n\t\tfor (var j = 0; j < extension.length; j++) {\n\t\t\
    \tif(extension[j] == extension[j].toUpperCase()){\n\t\t\t\tcap++;\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tvar curr_strength = cap - sm;\n\t\
    \tif(curr_strength > strength){\n\t\t\tstrength = curr_strength;\n\t\t\tstrongest_extension\
    \ = [];\n\t\t\tstrongest_extension.push(extension);\n\t\t}\n\t\telse if(curr_strength\
    \ == strength){\n\t\t\tstrongest_extension.push(extension);\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension[0];\n}\n", "\tvar maxExt = extensions[0];\n\
    \tvar maxStrength = Strength(extensions[0]);\n\tfor (var i = 1; i < extensions.length;\
    \ i++) {\n\t\tvar st = Strength(extensions[i]);\n\t\tif (st > maxStrength) {\n\
    \t\t\tmaxStrength = st;\n\t\t\tmaxExt = extensions[i];\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + maxExt;\n}", "    var strongest_extension = null;\n    var strongest_strength\
    \ = 0;\n    for (var i = 0; i < extensions.length; i++) {\n        var extension\
    \ = extensions[i];\n        var strength = get_strength(extension);\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet strength = 0;\n\tlet strongest_extension\
    \ = '';\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet cap = 0;\n\t\
    \tlet sm = 0;\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tif\
    \ (extensions[i][j] == extensions[i][j].toUpperCase()) {\n\t\t\t\tcap++;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tif (strength < cap - sm)\
    \ {\n\t\t\tstrength = cap - sm;\n\t\t\tstrongest_extension = extensions[i];\n\t\
    \t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}", "\tvar strong\
    \ = {};\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tvar cap = 0;\n\t\t\
    var sm = 0;\n\t\tfor(var j = 0; j < extensions[i].length; j++){\n\t\t\tif(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n\t\t\t\tcap += 1;\n\t\t\t}else{\n\t\t\t\
    \tsm += 1;\n\t\t\t}\n\t\t}\n\t\tif(!(cap - sm in strong)){\n\t\t\tstrong[cap -\
    \ sm] = [];\n\t\t}\n\t\tstrong[cap - sm].push(extensions[i]);\n\t}\n\treturn class_name\
    \ + \".\" + strong[min(strong)].shift();\n}\n", "\tvar extension = '';\n\tvar\
    \ max_strength = -Infinity;\n\tfor (var i = 0; i < extensions.length; i++) {\n\
    \t\tvar extension_strength = extensions[i].split('').reduce(function(a,b){return\
    \ b.toUpperCase() == b ? a+1 : a-1;}, 0);\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\textension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + '.' + extension;\n}\n", "    //YOUR CODE GOES\
    \ HERE\n    var strongest = \"\";\n    var strongest_value = -1000;\n    for (var\
    \ i = 0; i < extensions.length; i++) {\n        var extension = extensions[i];\n\
    \        var cap = 0;\n        var sm = 0;\n        for (var j = 0; j < extension.length;\
    \ j++) {\n            var char = extension[j];\n            if (char >= 'A' &&\
    \ char <= 'Z') {\n                cap += 1;\n            } else {\n          \
    \      sm += 1;\n            }\n        }\n        var value = cap - sm;\n   \
    \     if (value > strongest_value) {\n            strongest_value = value;\n \
    \           strongest = extension;\n        }\n    }\n    return class_name +\
    \ \".\" + strongest;\n}", "\tvar strongest = '', str = 0;\n\tvar l = extensions.length;\n\
    \tfor(var i = 0; i < l; i++){\n\t\tvar str = extensions[i].replace(/[^A-Z]/g,\
    \ '').length - extensions[i].replace(/[^a-z]/g, '').length;\n\t\tif(str > strongest){\n\
    \t\t\tstrongest = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest;\n\
    }", "  return class_name + \".\" + extensions.reduce((a,b) => \n    Math.abs(b.split('').reduce((s,c)\
    \ => s + (c.charCodeAt(0) <= 90 ? 1 : -1), 0)) \n    > Math.abs(a.split('').reduce((s,c)\
    \ => s + (c.charCodeAt(0) <= 90 ? 1 : -1), 0)) ? b : a);\n}\n", "    var strongest\
    \ = 0;\n    var strongestExtension;\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var currentExtension = extensions[i];\n        var currentStrength\
    \ = 0;\n        for (var j = 0; j < currentExtension.length; j++) {\n        \
    \    var currentLetter = currentExtension[j];\n            if (currentLetter.toUpperCase()\
    \ === currentLetter) {\n                currentStrength++;\n            } else\
    \ {\n                currentStrength--;\n            }\n        }\n        if\
    \ (currentStrength > strongest) {\n            strongest = currentStrength;\n\
    \            strongestExtension = currentExtension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongestExtension;\n}\n", "    let strongest = {name:\
    \ extensions[0], strength: 0};\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let count_caps = 0;\n        let count_smalls = 0;\n        for (let\
    \ j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] ==\
    \ extensions[i][j].toUpperCase()) {\n                count_caps++;\n         \
    \   } else {\n                count_smalls++;\n            }\n        }\n    \
    \    if (count_caps - count_smalls > strongest.strength) {\n            strongest.name\
    \ = extensions[i];\n            strongest.strength = count_caps - count_smalls;\n\
    \        }\n    }\n    return `${class_name}.${strongest.name}`;\n}", "  let extension_strength\
    \ = [];\n  let strongest_extension = 0;\n  let strongest_extension_name = \"\"\
    ;\n  for (let i = 0; i < extensions.length; i++) {\n    let a = extensions[i].match(/[A-Z]/g);\n\
    \    let b = extensions[i].match(/[a-z]/g);\n    if (a && b) {\n      let s =\
    \ a.length - b.length;\n      extension_strength.push(s);\n    }\n  }\n  for (let\
    \ j = 0; j < extension_strength.length; j++) {\n    if (extension_strength[j]\
    \ > strongest_extension) {\n      strongest_extension = extension_strength[j];\n\
    \      strongest_extension_name = extensions[j];\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension_name;\n}", "    var strength = -1;\n    var class_extension\
    \ = '';\n    for (var i=0; i<extensions.length; i++){\n        var ext = extensions[i];\n\
    \        var c_strength = cnt_upper(ext) - cnt_lower(ext);\n        if (c_strength\
    \ > strength){\n            strength = c_strength;\n            class_extension\
    \ = ext;\n        }\n    }\n    return class_name + '.' + class_extension;\n}\n",
  "    var strongest = [0, \"\"];\n    for (var i = 0; i < extensions.length; i++)\
    \ {\n        var cap = 0;\n        var sm = 0;\n        for (var j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                cap += 1;\n            }\n            else {\n          \
    \      sm += 1;\n            }\n        }\n        if (cap - sm > strongest[0])\
    \ {\n            strongest[0] = cap - sm;\n            strongest[1] = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest[1];\n}", "\tvar strongest\
    \ = 0;\n\tvar class_extension = \"\";\n\tfor (var i = 0; i < extensions.length;\
    \ i++) {\n\t\tvar caps = 0;\n\t\tvar smalls = 0;\n\t\tfor (var j = 0; j < extensions[i].length;\
    \ j++) {\n\t\t\tif (extensions[i][j] == extensions[i][j].toUpperCase()) {\n\t\t\
    \t\tcaps += 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsmalls += 1;\n\t\t\t}\n\t\t}\n\t\
    \tvar strength = caps - smalls;\n\t\tif (strength > strongest) {\n\t\t\tstrongest\
    \ = strength;\n\t\t\tclass_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + class_extension;\n}\n", "\n}", "    let strength = 0;\n    let str_extension\
    \ = null;\n    extensions.forEach(function(extension){\n        let letters =\
    \ extension.toUpperCase().split('');\n        let num_upper = 0;\n        let\
    \ num_lower = 0;\n        letters.forEach(function(letter){\n            if(letter.charCodeAt(0)\
    \ >= 65 && letter.charCodeAt(0) <= 90){\n                num_upper += 1;\n   \
    \         }else{\n                num_lower += 1;\n            }\n        });\n\
    \        let str = num_upper - num_lower;\n        if(str > strength){\n     \
    \       strength = str;\n            str_extension = extension;\n        }\n \
    \   });\n    return class_name + \".\" + str_extension;\n}\n", "    let result\
    \ = {name: \"\", ratio: -3}\n    for (let i = 0; i < extensions.length; i++){\n\
    \        let new_ratio = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                new_ratio += 1;\n            } else {\n                new_ratio\
    \ -= 1;\n            }\n        }\n        if (new_ratio > result.ratio){\n  \
    \          result.name = extensions[i];\n            result.ratio = new_ratio;\n\
    \        }\n    }\n    console.log(class_name + \".\" + result.name);\n}\nStrongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]);\nStrongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed']);\n", "    return class_name + \".\" + extensions.map(x\
    \ => [x, x.split(\"\").reduce((s, v) => s + (v >= \"A\" && v <= \"Z\" ? 1 : -1),\
    \ 0)]).sort((a, b) => (a[1] == b[1] ? a[0].localeCompare(b[0]) : a[1] - b[1])).pop()[0];\n\
    }", "    var strength = 0;\n    var aCaps = 0;\n    var aLowers = 0;\n    var\
    \ strong_extension = \"\";\n    for (var i = 0; i < extensions.length; i++){\n\
    \        var extension = extensions[i];\n        for (var j = 0; j < extension.length;\
    \ j++){\n            if (extension[j] == extension[j].toUpperCase()){\n      \
    \          aCaps++;\n            }\n            else{\n                aLowers++;\n\
    \            }\n        }\n        var ext_strength = aCaps - aLowers;\n     \
    \   if (ext_strength > strength){\n            strength = ext_strength;\n    \
    \        strong_extension = extension;\n        }\n        aCaps = 0;\n      \
    \  aLowers = 0;\n    }\n    return class_name + \".\" + strong_extension;\n}\n",
  "    var strongest_ext = {\n        name: '',\n        strength: -100\n    };\n\
    \    for (var i=0; i<extensions.length; i++){\n        var temp_strength = 0;\n\
    \        for (var j=0; j<extensions[i].length; j++){\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                temp_strength += 1;\n \
    \           }\n            else {\n                temp_strength -= 1;\n     \
    \       }\n        }\n        if (temp_strength > strongest_ext.strength){\n \
    \           strongest_ext.name = extensions[i];\n            strongest_ext.strength\
    \ = temp_strength;\n        }\n    }\n    return (class_name + '.' + strongest_ext.name);\n\
    }", "    let strongestExtension = extensions[0];\n    let strongestExtensionStrength\
    \ = getStrength(strongestExtension);\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let extensionStrength = getStrength(extensions[i]);\n      \
    \  if (extensionStrength > strongestExtensionStrength) {\n            strongestExtension\
    \ = extensions[i];\n            strongestExtensionStrength = extensionStrength;\n\
    \        }\n    }\n    return class_name + \".\" + strongestExtension;\n}\n",
  "  let arr=[]\n  for(let i of extensions){\n    let u=i.match(/[A-Z]/g)\n    let\
    \ l=i.match(/[a-z]/g)\n    arr.push(u.length-l.length)\n  }\n  let index=arr.indexOf(Math.max(...arr))\n\
    \  return class_name+\".\"+extensions[index]\n}", "  let str_ext = \"\";\n  let\
    \ highest_str = -Infinity;\n  for (let extension of extensions){\n    let cap\
    \ = 0;\n    let sm = 0;\n    for (let i=0; i<extension.length; i++){\n      let\
    \ cur_char = extension[i];\n      if (cur_char == cur_char.toUpperCase()){\n \
    \       cap += 1;\n      } else {\n        sm += 1;\n      }\n    }\n    let strength\
    \ = cap - sm;\n    if (strength > highest_str){\n      highest_str = strength;\n\
    \      str_ext = extension;\n    }\n  }\n  return class_name + \".\" + str_ext;\n\
    }\n", "    let strongest = 0;\n    let strongest_name = \"\";\n    for (let i\
    \ = 0; i < extensions.length; i++){\n        let ext = extensions[i];\n      \
    \  let strength = ext.match(/[A-Z]/g).length - ext.match(/[a-z]/g).length;\n \
    \       if (strongest < strength){\n            strongest = strength;\n      \
    \      strongest_name = ext;\n        }\n    }\n    return class_name + \".\"\
    \ + strongest_name;\n}\n", "    let max_strength = -1, max_strength_ext = '';\n\
    \    extensions.forEach(function(ext){\n        if (max_strength < get_strength(ext)){\n\
    \            max_strength = get_strength(ext);\n            max_strength_ext =\
    \ ext;\n        }\n    });\n    return class_name + '.' + max_strength_ext;\n}",
  "    var upper = 0;\n    var lower = 0;\n    var extension = \"\";\n    var strength\
    \ = 0;\n    var ini_strength = 0;\n    for(var i = 0; i < extensions.length; i++){\n\
    \        upper = 0;\n        lower = 0;\n        extension = extensions[i];\n\
    \        for(var j = 0; j < extension.length; j++){\n            if(extension[j]\
    \ == extension[j].toUpperCase()){\n                upper++;\n            }\n \
    \           else if(extension[j] == extension[j].toLowerCase()){\n           \
    \     lower++;\n            }\n        }\n        strength = upper - lower;\n\
    \        if(strength > ini_strength){\n            ini_strength = strength;\n\
    \            name = extension;\n        }\n    }\n    return class_name + \".\"\
    \ + name;\n}\n", "    var sortedExtensions = extensions.sort(function(a, b){\n\
    \        var as = (function(str){\n            var up = str.match(/[A-Z]/g).length;\n\
    \            var down = str.match(/[a-z]/g).length;\n            return up-down;\n\
    \        })(a);\n        var bs = (function(str){\n            var up = str.match(/[A-Z]/g).length;\n\
    \            var down = str.match(/[a-z]/g).length;\n            return up-down;\n\
    \        })(b);\n        return as-bs;\n    });\n    return class_name+\".\"+sortedExtensions[0];\n\
    }\n", "    //YOUR CODE GOES HERE\n}\n", "\tvar strongest_extension = extensions[0];\n\
    \tvar strongest_extension_strength = 0;\n\tfor (var i = 0; i < extensions.length;\
    \ i++) {\n\t\tvar uppercase_letters = 0;\n\t\tvar lowercase_letters = 0;\n\t\t\
    for (var j = 0; j < extensions[i].length; j++) {\n\t\t\tif (extensions[i][j] ==\
    \ extensions[i][j].toUpperCase()) {\n\t\t\t\tuppercase_letters += 1;\n\t\t\t}\
    \ else {\n\t\t\t\tlowercase_letters += 1;\n\t\t\t}\n\t\t}\n\t\tvar strength =\
    \ uppercase_letters - lowercase_letters;\n\t\tif (strength > strongest_extension_strength)\
    \ {\n\t\t\tstrongest_extension_strength = strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    const strengths = extensions.map(ext => [ext, ext.split('').filter(ch\
    \ => ch.match(/[A-Z]/)).length - ext.split('').filter(ch => ch.match(/[a-z]/)).length]);\n\
    \    const sorted_strengths = strengths.sort((a, b) => b[1] - a[1]);\n    return\
    \ `${class_name}.${sorted_strengths[0][0]}`;\n}\n", "    let caps = {}\n    let\
    \ sm = {}\n    for (let i = 0; i < extensions.length; i++){\n        let result\
    \ = 0\n        let result2 = 0\n        for (let j = 0; j < extensions[i].length;\
    \ j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                result += 1\n            }\n            else{\n             \
    \   result2 += 1\n            }\n        }\n        caps[extensions[i]] = result\n\
    \        sm[extensions[i]] = result2\n    }\n    let diff = {}\n    for (let a\
    \ in caps){\n        diff[a] = caps[a] - sm[a]\n    }\n    let max = \"\"\n  \
    \  let max_diff = 0\n    for (let b in diff){\n        if (max_diff < diff[b]){\n\
    \            max_diff = diff[b]\n            max = b\n        }\n    }\n    return\
    \ class_name + \".\" + max\n}\n", "    var max = Number.NEGATIVE_INFINITY;\n \
    \   var extension_name = \"\";\n    for (var i = 0; i < extensions.length; i++)\
    \ {\n        var strength = extension_strength(extensions[i]);\n        if (strength\
    \ > max) {\n            max = strength;\n            extension_name = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + extension_name;\n}\n", "  \
    \  let strength = 0;\n    let strongest = '';\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j\
    \ < extensions[i].length; j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                cap += 1;\n            } else {\n                sm += 1;\n \
    \           }\n        }\n        let tmp_strength = cap - sm;\n        if (tmp_strength\
    \ > strength){\n            strength = tmp_strength;\n            strongest =\
    \ extensions[i];\n        }\n    }\n    return class_name + '.' + strongest;\n\
    }", "  // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n  //\
    \ \"my_class.AA\"\n  if (class_name && extensions){\n    // create an array of\
    \ strength numbers\n    let strength = [];\n    for (let i = 0; i < extensions.length;\
    \ i++){\n      strength.push(extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length);\n\
    \    }\n    // find the largest number in strength array and its index\n    let\
    \ largest_index = strength.indexOf(Math.max(...strength));\n    // return the\
    \ result\n    return `${class_name}.${extensions[largest_index]}`;\n  } else {\n\
    \    return \"\";\n  }\n}\n", "    var the_one = extensions[0];\n    var strength\
    \ = 0;\n    for (var extension of extensions){\n        var tmp_strength = (extension.match(/[A-Z]/g)||[]).length\
    \ - (extension.match(/[a-z]/g)||[]).length;\n        if (tmp_strength > strength){\n\
    \            strength = tmp_strength;\n            the_one = extension;\n    \
    \    }\n    }\n    return class_name + \".\" + the_one;\n}\n", "    let strongest_extension\
    \ = {\n        name: \"\",\n        strength: 0\n    };\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        let uppercase_letters = extensions[i].match(/[A-Z]/g);\n\
    \        let lowercase_letters = extensions[i].match(/[a-z]/g);\n        let strength\
    \ = (uppercase_letters === null) ? 0 : uppercase_letters.length;\n        strength\
    \ -= (lowercase_letters === null) ? 0 : lowercase_letters.length;\n        if\
    \ (strength > strongest_extension.strength) {\n            strongest_extension.name\
    \ = extensions[i];\n            strongest_extension.strength = strength;\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension.name;\n}",
  "    //YOUR CODE GOES HERE\n}\n", "    let strength = 0;\n    let extension_with_strength\
    \ = \"\";\n    extensions.forEach(extension => {\n        let CAP = 0;\n     \
    \   let SM = 0;\n        for (let i = 0; i < extension.length; i++) {\n      \
    \      if (extension[i] === extension[i].toUpperCase()) {\n                CAP++;\n\
    \            } else {\n                SM++;\n            }\n        }\n     \
    \   if ((CAP - SM) > strength) {\n            strength = CAP - SM;\n         \
    \   extension_with_strength = extension;\n        }\n    });\n    return class_name\
    \ + \".\" + extension_with_strength;\n}\n", "    var str_arr = [];\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var count_upper = 0;\n        var\
    \ count_lower = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n \
    \           if(extensions[i][j] === extensions[i][j].toUpperCase()){\n       \
    \         count_upper += 1;\n            }\n            else{\n              \
    \  count_lower += 1;\n            }\n        }\n        str_arr.push((count_upper\
    \ - count_lower) + ' ' + extensions[i]);\n    }\n    str_arr.sort(function(a,\
    \ b){\n        return b.split(' ')[0] - a.split(' ')[0];\n    });\n    return\
    \ class_name + '.' + str_arr[0].split(' ')[1];\n}", "  // Good luck!\n  let extObj\
    \ = {};\n  let strength = 0;\n  let strongest = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let sm = 0;\n    let cap = 0;\n    for (let j = 0; j < extensions[i].length;\
    \ j++) {\n      if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n  \
    \      cap += 1;\n      } else {\n        sm += 1;\n      }\n    }\n    extObj[extensions[i]]\
    \ = cap - sm;\n  }\n  for (key in extObj) {\n    if (extObj[key] > strength) {\n\
    \      strength = extObj[key];\n      strongest = key;\n    }\n  }\n  return `${class_name}.${strongest}`;\n\
    }\n", "  var strongest = {\n    strength: 0,\n    extension: null\n  };\n  extensions.forEach(function(extension){\n\
    \    var strength = CAP(extension) - SM(extension);\n    if(strength >= strongest.strength){\n\
    \      strongest.strength = strength;\n      strongest.extension = extension;\n\
    \    }\n  });\n  return class_name + \".\" + strongest.extension;\n}\n", "   \
    \ var strongest = ['', 0];\n    for (var i = 0; i < extensions.length; i++) {\n\
    \        var ext = extensions[i];\n        var up = ext.match(/[A-Z]/g);\n   \
    \     var down = ext.match(/[a-z]/g);\n        if (up && down) {\n           \
    \ var strength = up.length - down.length;\n            if (strength > strongest[1])\
    \ {\n                strongest = [ext, strength];\n            }\n        }\n\
    \    }\n    return class_name + '.' + strongest[0];\n}\n", "  let strongest =\
    \ {ext:'', score: -Infinity}\n  extensions.forEach(ext => {\n    let score = 0\n\
    \    ext.split('').forEach(x => x === x.toUpperCase() ? score++ : score--)\n \
    \   if(score > strongest.score){\n      strongest.ext = ext\n      strongest.score\
    \ = score\n    }\n  })\n  return `${class_name}.${strongest.ext}`\n}\n", "   \
    \ var strongest = 0;\n    var strongest_extension = \"\";\n    var strength;\n\
    \    for (var i = 0; i < extensions.length; i++){\n        strength = find_strength(extensions[i]);\n\
    \        if (strength > strongest){\n            strongest = strength;\n     \
    \       strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let low = extensions.map(word =>\
    \ word.toLowerCase());\n    let cap = extensions.map(word => word.replace(/[^A-Z]/g,\
    \ \"\"));\n    let strength = cap.map((word, i) => word.length - low[i].length);\n\
    \    let max = Math.max(...strength);\n    let index = strength.indexOf(max);\n\
    \    return class_name + \".\" + extensions[index];\n}\n", "    let strongest_extension\
    \ = \"\";\n    let strength = 0;\n    for (let index = 0; index < extensions.length;\
    \ index++) {\n        const element = extensions[index];\n        let capital\
    \ = 0;\n        let small = 0;\n        for (let j = 0; j < element.length; j++)\
    \ {\n            if(element[j] == element[j].toUpperCase()){\n               \
    \ capital += 1;\n            }else{\n                small += 1;\n           \
    \ }\n        }\n        let new_strength = capital - small;\n        if(new_strength\
    \ > strength){\n            strength = new_strength;\n            strongest_extension\
    \ = element;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "  var strength = 0;\n  var letter_count = 0;\n  var strong_ext = \"\";\n\
    \  for (i = 0; i < extensions.length; i++){\n    for (j = 0; j < extensions[i].length;\
    \ j++){\n      if (extensions[i][j] === extensions[i][j].toUpperCase()){\n   \
    \     letter_count += 1;\n      }\n      else{\n        letter_count -= 1;\n \
    \     }\n    }\n    if (letter_count > strength){\n      strength = letter_count;\n\
    \      strong_ext = extensions[i];\n    }\n    letter_count = 0;\n  }\n  return\
    \ class_name + \".\" + strong_ext;\n}", "    let power = 0;\n    let letter =\
    \ '';\n    let maxIndex = 0;\n    for(let i=0; i<extensions.length; i++){\n  \
    \      let ext = extensions[i];\n        let cap = 0;\n        let sm = 0;\n \
    \       for(let j=0; j<ext.length; j++){\n            if(ext[j] == ext[j].toUpperCase()){\n\
    \                cap += 1;\n            }else{\n                sm += 1;\n   \
    \         }\n        }\n        let currentPower = cap - sm;\n        if(power\
    \ < currentPower){\n            power = currentPower;\n            letter = ext;\n\
    \            maxIndex = i;\n        }\n    }\n    return class_name + '.' + letter;\n\
    }\n\n", "    var strength = [0];\n    var r = 0;\n    var CAP = 0;\n    var SM\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        CAP = 0;\n  \
    \      SM = 0;\n        for(var k = 0; k < extensions[i].length; k++){\n     \
    \       if(extensions[i][k] == extensions[i][k].toUpperCase()){\n            \
    \    CAP++;\n            }\n            else{\n                SM++;\n       \
    \     }\n        }\n        r = CAP - SM;\n        strength.push(r);\n    }\n\
    \    var max = Math.max(...strength);\n    var index = strength.indexOf(max);\n\
    \    return class_name + \".\" + extensions[index-1];\n}\n", "    let strong =\
    \ 0;\n    let st_ext = \"\";\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let count_c = 0;\n        let count_s = 0;\n        for(let j = 0; j\
    \ < extensions[i].length; j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                count_c++;\n            }else{\n                count_s++;\n\
    \            }\n        }\n        if(strong < count_c - count_s){\n         \
    \   strong = count_c - count_s;\n            st_ext = extensions[i];\n       \
    \ }\n    }\n    return class_name + \".\" + st_ext;\n}\n", "\n}\n", "\tvar CAP,SM,strength,strongest_extension;\n\
    \tstrongest_extension='';\n\tstrength=-Number.MAX_VALUE;\n\tfor(var i=0;i<extensions.length;i++){\n\
    \t\tCAP=SM=0;\n\t\tfor(var j=0;j<extensions[i].length;j++){\n\t\t\tif(extensions[i][j]<='Z'\
    \ && extensions[i][j]>='A')\n\t\t\t\tCAP++;\n\t\t\telse if(extensions[i][j]<='z'\
    \ && extensions[i][j]>='a')\n\t\t\t\tSM++;\n\t\t}\n\t\tif(CAP-SM>strength){\n\t\
    \t\tstrongest_extension=extensions[i];\n\t\t\tstrength=CAP-SM;\n\t\t}\n\t}\n\t\
    return class_name+'.'+strongest_extension;\n}\n", "\tvar length = extensions.length;\n\
    \tvar strengths = [];\n\tvar strongest_extension = \"\";\n\tvar strength = 0;\n\
    \tfor(var i = 0; i < length; i++){\n\t\tstrengths.push(extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length);\n\t}\n\tfor(var i = 0; i < length;\
    \ i++){\n\t\tif(strengths[i] > strength){\n\t\t\tstrength = strengths[i];\n\t\t\
    \tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}", "    var score = (extension) => extension.split('').reduce((acc,\
    \ char) => acc + (char.toUpperCase() === char ? 1 : -1), 0);\n    return class_name\
    \ + '.' + extensions.reduce((acc, curr) => score(curr) > score(acc) ? curr : acc);\n\
    }\n", "    // var regex = /^[a-zA-Z]+$/;\n    var largest = 0;\n    var index\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var weight =\
    \ 0;\n        for(var x = 0; x < extensions[i].length; x++){\n            if(extensions[i][x]\
    \ >= 'A' && extensions[i][x] <= 'Z'){\n                weight += extensions[i][x].charCodeAt()\
    \ - 'A'.charCodeAt() + 1;\n            }\n            else if(extensions[i][x]\
    \ >= 'a' && extensions[i][x] <= 'z'){\n                weight -= extensions[i][x].charCodeAt()\
    \ - 'a'.charCodeAt() + 1;\n            }\n        }\n        if(weight > largest){\n\
    \            largest = weight;\n            index = i;\n        }\n    }\n   \
    \ return class_name + \".\" + extensions[index];\n}\n", "  // Your code here.\n\
    }", "  //YOUR CODE HERE\n}\n", "\t\n\t// your code here\n\tvar my_object_extension\
    \ = {};\n\tfor (var i = 0; i < extensions.length; i++) {\n\t\tvar num_upper =\
    \ 0;\n\t\tvar num_lower = 0;\n\t\tfor (var j = 0; j < extensions[i].length; j++)\
    \ {\n\t\t\tif (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\t\t\t\t\
    num_upper += 1;\n\t\t\t}\n\t\t\telse if (extensions[i][j] === extensions[i][j].toLowerCase())\
    \ {\n\t\t\t\tnum_lower += 1;\n\t\t\t}\n\t\t}\n\t\tvar strength = num_upper - num_lower;\n\
    \t\tvar extension_name = extensions[i];\n\t\tmy_object_extension[extension_name]\
    \ = strength;\n\t}\n\tvar strongest_extension = 0;\n\tvar strongest_extension_name\
    \ = '';\n\tfor (var key in my_object_extension) {\n\t\tif (my_object_extension[key]\
    \ > strongest_extension) {\n\t\t\tstrongest_extension = my_object_extension[key];\n\
    \t\t\tstrongest_extension_name = key;\n\t\t}\n\t}\n\treturn class_name + '.' +\
    \ strongest_extension_name;\n}\n\n\n", "    let obj = {};\n    for(let i = 0;\
    \ i < extensions.length; i++){\n        let a = 0;\n        let b = 0;\n     \
    \   for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                a++;\n            }\n\
    \            else{\n                b++;\n            }\n        }\n        obj[extensions[i]]\
    \ = (a - b) / extensions[i].length;\n    }\n    let k = Object.keys(obj);\n  \
    \  let v = Object.values(obj);\n    return class_name + \".\" + k[v.indexOf(Math.max(...v))];\n\
    }", "  var ext_strength = []\n  var strongest_ext_strength = 0\n  var strongest_ext_name\
    \ = ''\n  var upperCase = 0\n  var lowerCase = 0\n  for (i = 0; i < extensions.length;\
    \ i++){\n    upperCase = (extensions[i].match(/[A-Z]/g)).length\n    lowerCase\
    \ = (extensions[i].match(/[a-z]/g)).length\n    ext_strength.push(upperCase -\
    \ lowerCase)\n    if (ext_strength[i] > strongest_ext_strength){\n      strongest_ext_strength\
    \ = ext_strength[i]\n      strongest_ext_name = extensions[i]\n    }\n  }\n  return\
    \ class_name + '.' + strongest_ext_name\n}", "    // your code here\n    var strongest_extension\
    \ = \"\";\n    var strength = 0;\n    for (var i=0; i<extensions.length; i++){\n\
    \        var cap = 0;\n        var sm = 0;\n        for (var j=0; j<extensions[i].length;\
    \ j++){\n            if (extensions[i][j] != extensions[i][j].toLowerCase()){\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        if (strength < cap - sm){\n            strength\
    \ = cap - sm;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}", "  let strength\
    \ = 0;\n  let strong;\n  for(let i = 0; i < extensions.length; i++){\n    let\
    \ ext = extensions[i];\n    let CAP = 0;\n    let SM = 0;\n    for(let j = 0;\
    \ j < ext.length; j++){\n      if(ext[j] === ext[j].toUpperCase()){\n        CAP\
    \ += 1;\n      } else {\n        SM += 1;\n      }\n    }\n    if(CAP - SM > strength){\n\
    \      strength = CAP - SM;\n      strong = ext;\n    }\n  }\n  return class_name\
    \ + \".\" + strong;\n}\n", "    let CAP = 0;\n    let SM = 0;\n    let extensionName\
    \ = [];\n    let strength = [];\n    for(let i = 0; i < extensions.length; i++){\n\
    \        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                CAP += 1;\n          \
    \  }\n            else{\n                SM += 1;\n            }\n        }\n\
    \        strength.push(CAP - SM);\n        CAP = 0;\n        SM = 0;\n    }\n\
    \    let result = Math.max(...strength);\n    let index = strength.indexOf(result);\n\
    \    let StrongestExtension = extensions[index];\n    return class_name + \".\"\
    \ + StrongestExtension;\n}\n", "\tlet myarray = extensions.map(function(elem)\
    \ {\n\t\treturn [elem, elem.replace(/[^A-Z]/g, \"\").length - elem.replace(/[^a-z]/g,\
    \ \"\").length];\n\t});\n\treturn `${class_name}.${myarray.sort((a, b) => b[1]\
    \ - a[1])[0][0]}`;\n}", "    var high_strength = 0;\n    var winning_extension\
    \ = '';\n    var class_name_extension = '';\n    var strength = 0;\n    var upper_case\
    \ = 0;\n    var lower_case = 0;\n    for (i = 0; i < extensions.length; i++){\n\
    \        upper_case = 0;\n        lower_case = 0;\n        for (j = 0; j < extensions[i].length;\
    \ j++){\n            if (extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                upper_case++;\n            }\n            else{\n           \
    \     lower_case++;\n            }\n        }\n        strength = upper_case -\
    \ lower_case;\n        if (strength > high_strength){\n            high_strength\
    \ = strength;\n            winning_extension = extensions[i];\n        }\n   \
    \ }\n    class_name_extension = class_name + '.' + winning_extension;\n    return\
    \ class_name_extension;\n}\n", "  // Enter code here\n  return class_name + \"\
    .\" + extensions.reduce((strongest, extension) => {\n    let cap = extension.replace(/[^A-Z]/g,\
    \ \"\").length;\n    let sm = extension.replace(/[^a-z]/g, \"\").length;\n   \
    \ let strength = cap - sm;\n    return strength >= (strongest.replace(/[^A-Z]/g,\
    \ \"\").length - strongest.replace(/[^a-z]/g, \"\").length) ? extension : strongest;\n\
    \  }, extensions[0]);\n}\n", "  let strongest = [\"\", -Infinity];\n  for (let\
    \ i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
    \    let uppercase = 0;\n    let lowercase = 0;\n    for (let j = 0; j < extension.length;\
    \ j++) {\n      const char = extension[j];\n      if (char == char.toUpperCase())\
    \ {\n        uppercase += 1;\n      } else {\n        lowercase += 1;\n      }\n\
    \    }\n    let strength = uppercase - lowercase;\n    if (strength > strongest[1])\
    \ {\n      strongest = [extension, strength];\n    }\n  }\n  return `${class_name}.${strongest[0]}`;\n\
    }", "  var ratio = new Array;\n  for (var i = 0; i < extensions.length; i++) {\n\
    \    var upcase_count = 0;\n    var lowcase_count = 0;\n    for (var j = 0; j\
    \ < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n        upcase_count += 1;\n      } else {\n        lowcase_count += 1;\n\
    \      }\n    }\n    ratio.push(upcase_count - lowcase_count);\n  }\n  var best_ratio\
    \ = Math.max.apply(null, ratio);\n  var best_index = ratio.indexOf(best_ratio);\n\
    \  return class_name + \".\" + extensions[best_index];\n}", "    var result =\
    \ '';\n    var max_value = -Infinity;\n    var max_value_idx = 0;\n    for (var\
    \ i = 0; i < extensions.length; i++) {\n        var curr_extension = extensions[i];\n\
    \        var strength = extension_strength(curr_extension);\n        if (strength\
    \ > max_value) {\n            max_value = strength;\n            max_value_idx\
    \ = i;\n        }\n    }\n    result = class_name + '.' + extensions[max_value_idx];\n\
    \    return result;\n}\n", "    var obj = {};\n    // CAP: number of uppercase\
    \ letters\n    // SM: number of lowercase letters\n    // compare strength of\
    \ each extension\n    extensions.forEach(function(elem, idx){\n        var CAP\
    \ = 0;\n        var SM = 0;\n        for(var i = 0; i < elem.length; i++){\n \
    \           if(elem[i] === elem[i].toUpperCase()){\n                CAP++;\n \
    \           }\n            else{\n                SM++;\n            }\n     \
    \   }\n        var strength = CAP - SM;\n        obj[elem] = strength;\n    });\n\
    \    // find the strongest extension\n    var max = -Infinity;\n    var key;\n\
    \    for(var k in obj){\n        if(obj[k] > max){\n            max = obj[k];\n\
    \            key = k;\n        }\n    }\n    return class_name + \".\" + key;\n\
    }", "    let CAP = 0;\n    let SM = 0;\n    let strength = 0;\n    let max_extension\
    \ = \"\";\n    let extension_strength = [];\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        CAP = 0;\n        SM = 0;\n        strength = 0;\n        for(let\
    \ j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] ===\
    \ extensions[i][j].toUpperCase()){\n                CAP = CAP + 1;\n         \
    \   }else{\n                SM = SM + 1;\n            }\n        }\n        strength\
    \ = CAP - SM;\n        extension_strength.push(strength);\n    }\n    console.log(extension_strength);\n\
    \    let max_val = Math.max(...extension_strength);\n    for(let i = 0; i < extension_strength.length;\
    \ i++){\n        if(extension_strength[i] === max_val){\n            max_extension\
    \ = extensions[i];\n            break;\n        }\n    }\n    return `${class_name}.${max_extension}`;\n\
    }", "\tlet str = 0;\n\tlet ret = '';\n\tfor(let i=0; i<extensions.length; i++){\n\
    \t\tlet CAP = 0;\n\t\tlet SM = 0;\n\t\tfor(let j=0; j<extensions[i].length; j++){\n\
    \t\t\tif(/[A-Z]/.test(extensions[i][j])){\n\t\t\t\tCAP++;\n\t\t\t}else{\n\t\t\t\
    \tSM++;\n\t\t\t}\n\t\t}\n\t\tlet tmp = CAP - SM;\n\t\tif(tmp > str){\n\t\t\tstr\
    \ = tmp;\n\t\t\tret = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' +\
    \ ret;\n}\n", "\tvar strength = -1, strongest;\n\textensions.forEach(function(element){\n\
    \t\tvar cap = element.replace(/[^A-Z]/g, \"\").length;\n\t\tvar sm = element.replace(/[^a-z]/g,\
    \ \"\").length;\n\t\tvar s = cap - sm;\n\t\tif (s > strength){\n\t\t\tstrength\
    \ = s;\n\t\t\tstrongest = element;\n\t\t}\n\t});\n\treturn class_name + \".\"\
    \ + strongest;\n}\n", "    let strengths = [];\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let CAP = 0;\n        let SM = 0;\n        for (let j = 0; j\
    \ < extensions[i].length; j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                CAP += 1;\n            }\n            else{\n               \
    \ SM += 1;\n            }\n        }\n        strengths.push(CAP - SM);\n    }\n\
    \    let max_strength = Math.max(...strengths);\n    let max_index = strengths.indexOf(max_strength);\n\
    \    let result = class_name + \".\" + extensions[max_index];\n    return result;\n\
    }", "    let cap = 0,\n        sm = 0,\n        strength = 0,\n        max = 0,\n\
    \        res = \"\";\n    for(let i = 0; i < extensions.length; i++){\n      \
    \  cap = 0;\n        sm = 0;\n        strength = 0;\n        for(let j = 0; j\
    \ < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                cap += 1;\n            }\n            else{\n               \
    \ sm += 1;\n            }\n        }\n        strength = cap - sm;\n        if(strength\
    \ > max){\n            max = strength;\n            res = extensions[i];\n   \
    \     }\n    }\n    return `${class_name}.${res}`;\n}\n", "\tlet strongestExtension\
    \ = \"\";\n\tlet strength = 0;\n\textensions.forEach(e => {\n\t\tlet currentStrength\
    \ = e.replace(/[^A-Z]/g, \"\").length - e.replace(/[^a-z]/g, \"\").length;\n\t\
    \tif (currentStrength > strength){\n\t\t\tstrength = currentStrength;\n\t\t\t\
    strongestExtension = e;\n\t\t}\n\t});\n\treturn class_name + \".\" + strongestExtension;\n\
    }\n", "    //YOUR CODE GOES HERE\n}\n", "  var upper = 0, lower = 0, strongest,\
    \ i, name;\n  for(i=0; i<extensions.length; i++){\n    if(extensions[i].length){\n\
    \      name = extensions[i].split('');\n      upper = name.filter(function(x){return\
    \ x.match(/[A-Z]/)}).length;\n      lower = name.filter(function(x){return x.match(/[a-z]/)}).length;\n\
    \      if(!strongest || upper - lower > strongest.total){\n        strongest =\
    \ {\n          index: i,\n          total: upper - lower\n        }\n      }\n\
    \    }\n  }\n  return class_name + '.' + extensions[strongest.index];\n}", " \
    \   var strongest = \"\";\n    var strength = 0;\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var name = extensions[i];\n        var upperCase = 0;\n    \
    \    var lowerCase = 0;\n        for (var j = 0; j < name.length; j++) {\n   \
    \         if (name[j] === name[j].toUpperCase()) {\n                upperCase\
    \ += 1;\n            } else {\n                lowerCase += 1;\n            }\n\
    \        }\n        var currentStrength = upperCase - lowerCase;\n        if (currentStrength\
    \ > strength) {\n            strength = currentStrength;\n            strongest\
    \ = name;\n        }\n    }\n    return class_name + \".\" + strongest;\n}", " \
    \ if(extensions.length == 0)\n    return class_name;\n  else{\n    var class_extension\
    \ = extensions[0];\n    var strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n      var cap = 0;\n      var sm = 0;\n      for(var j = 0; j < extensions[i].length;\
    \ j++){\n        if(extensions[i][j] == extensions[i][j].toUpperCase())\n    \
    \      cap += 1;\n        else\n          sm += 1;\n      }\n      if(cap - sm\
    \ > strength){\n        strength = cap - sm;\n        class_extension = extensions[i];\n\
    \      }\n    }\n    return class_name + \".\" + class_extension;\n  }\n}", " \
    \   var strengths = extensions.map(v => [v, v.split('').reduce((t,v) => t + (/[A-Z]/.test(v)\
    \ ? 1 : -1), 0)]);\n    return class_name + '.' + strengths.reduce((t,v) => v[1]\
    \ > t[1] ? v : t)[0];\n}", "    var max_strength = -Infinity;\n    var max_strength_extension\
    \ = \"\";\n    for (var i = 0; i < extensions.length; i++){\n        var cap =\
    \ extensions[i].replace(/[^A-Z]/g, \"\").length;\n        var sm = extensions[i].replace(/[^a-z]/g,\
    \ \"\").length;\n        var curr_strength = cap - sm;\n        if (curr_strength\
    \ > max_strength){\n            max_strength = curr_strength;\n            max_strength_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + max_strength_extension;\n\
    }\n", "    let strongest_ext = 0;\n    let strongest_ext_name = \"\";\n    for\
    \ (let i = 0; i < extensions.length; i++){\n        let j = 0;\n        let k\
    \ = 0;\n        while (j < extensions[i].length){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                k++;\n            }\n\
    \            else{\n                k--;\n            }\n            j++;\n  \
    \      }\n        if (k >= strongest_ext){\n            strongest_ext = k;\n \
    \           strongest_ext_name = extensions[i];\n        }\n    }\n    return\
    \ `${class_name}.${strongest_ext_name}`;\n}", "    var strength = 0;\n    var\
    \ name = \"\";\n    for(var i = 0; i < extensions.length; i++){\n        var cap\
    \ = 0;\n        var sm = 0;\n        for(var j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        if(cap - sm > strength){\n            strength = cap - sm;\n        \
    \    name = extensions[i];\n        }\n    }\n    return class_name + \".\" +\
    \ name;\n}", "    let answer = '';\n    let strength = 0;\n    for (let i = 0;\
    \ i < extensions.length; i++){\n        let uppercase_chars = extensions[i].replace(/[^A-Z]/g,\
    \ '').length;\n        let lowercase_chars = extensions[i].replace(/[^a-z]/g,\
    \ '').length;\n        let strength_of_extension = uppercase_chars - lowercase_chars;\n\
    \        if (strength_of_extension > strength){\n            strength = strength_of_extension;\n\
    \            answer = extensions[i];\n        }\n    }\n    return `${class_name}.${answer}`;\n\
    }\n", "  // your code here\n  var result = [];\n  var k = [];\n  extensions.map(function(e){\n\
    \    var s = e.toUpperCase();\n    var c = 0;\n    var l = 0;\n    for(var i =\
    \ 0; i < s.length; i++){\n      if(s[i] == s[i].toUpperCase()){\n        c++;\n\
    \      }else{\n        l++;\n      }\n    }\n    result.push(c-l);\n    k.push(e);\n\
    \  });\n  console.log(result);\n  var max = Math.max.apply(null, result);\n  var\
    \ max_index = result.indexOf(max);\n  return class_name + \".\" + k[max_index];\n\
    }\n", "  let strongest = 0;\n  let strongest_ext = \"\";\n  extensions.forEach(ext\
    \ => {\n    let extension = ext.split(\"\");\n    let cap = 0;\n    let small\
    \ = 0;\n    extension.forEach(letter => {\n      if (letter.match(/[A-Z]/)){\n\
    \        cap++;\n      } else {\n        small++;\n      }\n    });\n    let strength\
    \ = cap - small;\n    if (strength > strongest){\n      strongest = strength;\n\
    \      strongest_ext = ext;\n    }\n  });\n  return `${class_name}.${strongest_ext}`;\n\
    }\n", "  var strength = 0, strongest = 0, strongest_extension;\n  for (var i =\
    \ 0; i < extensions.length; i++) {\n    for (var j = 0; j < extensions[i].length;\
    \ j++) {\n      if(isUpperCase(extensions[i][j])){\n        strength++;\n    \
    \  } else if(isLowerCase(extensions[i][j])){\n        strength--;\n      }\n \
    \   }\n    if(strength >= strongest){\n      strongest = strength;\n      strongest_extension\
    \ = extensions[i];\n    }\n    strength = 0;\n  }\n  return class_name + \".\"\
    \ + strongest_extension;\n}\n", "\t\n\tvar cap;\n\tvar sm;\n\tvar strength;\n\t\
    var str = \"\";\n\tvar str_prev = 0;\n\tvar ret = \"\";\n\t\n\t\n\tfor(var i =\
    \ 0; i < extensions.length; i++){\n\t\tcap = 0;\n\t\tsm = 0;\n\t\tstrength = 0;\n\
    \t\tstr = extensions[i];\n\t\tfor(var j = 0; j < str.length; j++){\n\t\t\tif(str[j]\
    \ == str[j].toUpperCase()){\n\t\t\t\tcap += 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t\
    sm += 1;\n\t\t\t}\n\t\t}\n\t\tstrength = cap - sm;\n\t\tif(strength > str_prev){\n\
    \t\t\tstr_prev = strength;\n\t\t\tret = str;\n\t\t}\n\t}\n\t\n\treturn class_name\
    \ + \".\" + ret;\n}\n\n\n", "    // let strength = {};\n    // let index = 0;\n\
    \    // let strongest = 0;\n    // let strongest_ext = \"\";\n    // for(let i=0;\
    \ i<extensions.length; i++){\n    //     let upper = extensions[i].toUpperCase();\n\
    \    //     let lower = extensions[i].toLowerCase();\n    //     strength[extensions[i]]\
    \ = (upper.length - lower.length);\n    //     if(strength[extensions[i]] >= strongest){\n\
    \    //         strongest = strength[extensions[i]];\n    //         strongest_ext\
    \ = extensions[i];\n    //     }\n    // }\n    // return `${class_name}.${strongest_ext}`;\n\
    \    ///////////////////////////////////////////////////////\n    //another solution\
    \ - didn't use objects:\n    // let strongest = 0;\n    // let strongest_ext =\
    \ \"\";\n    // for(let i=0; i<extensions.length; i++){\n    //     let upper\
    \ = extensions[i].toUpperCase();\n    //     let lower = extensions[i].toLowerCase();\n\
    \    //     let ext_strength = (upper.length - lower.length);\n    //     if(ext_strength\
    \ >= strongest){\n    //         strongest = ext_strength;\n    //         strongest_ext\
    \ = extensions[i];\n    //     }\n    // }\n    // return `${class_name}.${strongest_ext}`;\n\
    \    ///////////////////////////////////////////////////////\n    //another solution:\n\
    \    let strongest = 0;\n    let strongest_ext = \"\";\n    for(let i=0; i<extensions.length;\
    \ i++){\n        let ext_strength = extensions[i].replace(/[a-z]/g, \"\").length\
    \ - extensions[i].replace(/[A-Z]/g, \"\").length;\n        if(ext_strength >=\
    \ strongest){\n            strongest = ext_strength;\n            strongest_ext\
    \ = extensions[i];\n        }\n    }\n    return `${class_name}.${strongest_ext}`;\n\
    }\n", "    var lowest_score = 0;\n    var lowest_score_index = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var score = findScore(extensions[i]);\n\
    \        if(score > lowest_score){\n            lowest_score = score;\n      \
    \      lowest_score_index = i;\n        }\n    }\n    return class_name + \".\"\
    \ + extensions[lowest_score_index];\n}", "    const my_extensions = extensions.map(ext\
    \ => {\n        let upper_case = 0;\n        let lower_case = 0;\n        let\
    \ my_ext = ext.split('');\n        my_ext.forEach(ext => {\n            if (ext\
    \ === ext.toUpperCase()) {\n                upper_case++;\n            } else\
    \ {\n                lower_case++;\n            }\n        });\n        return\
    \ {\n            ext,\n            strength: upper_case - lower_case\n       \
    \ }\n    });\n    my_extensions.sort((a, b) => {\n        if (a.strength === b.strength)\
    \ {\n            return my_extensions.indexOf(a) - my_extensions.indexOf(b);\n\
    \        } else {\n            return b.strength - a.strength;\n        }\n  \
    \  });\n    console.log(my_extensions);\n    return `${class_name}.${my_extensions[0].ext}`;\n\
    }", "    let found = false;\n    let strongest_extension = \"\";\n    let strongest_strength\
    \ = -Infinity;\n    for(let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for(let j = 0; j < extension.length;\
    \ j++){\n            let char = extension[j];\n            if(char.toUpperCase()\
    \ === char){\n                strength += 1;\n            }else{\n           \
    \     strength -= 1;\n            }\n        }\n        if(strength > strongest_strength){\n\
    \            strongest_strength = strength;\n            strongest_extension =\
    \ extension;\n            found = true;\n        }\n    }\n    if(found){\n  \
    \      return class_name + \".\" + strongest_extension;\n    }else{\n        return\
    \ \"No extensions found\";\n    }\n}", "    var strongest_extension = extensions[0];\n\
    \    var strongest_extension_strength = 0;\n    var i = 0;\n    while (i < extensions.length){\n\
    \        var extension = extensions[i];\n        var lowercase_letters = extension.match(/[a-z]/g);\n\
    \        var uppercase_letters = extension.match(/[A-Z]/g);\n        var extension_strength\
    \ = (uppercase_letters.length - lowercase_letters.length)\n        if (extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \       i = i + 1;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "  return class_name + \".\" + extensions.reduce((acc, currentVal) => {\n\
    \    let strength = [...currentVal].reduce((total, letter) => {\n      let letterStrength\
    \ = letter === letter.toUpperCase() ? 1 : -1;\n      return total + letterStrength;\n\
    \    }, 0);\n    return strength > acc.strength ? { strength, val: currentVal\
    \ } : acc;\n  }, { strength: 0, val: '' }).val;\n}\n", "    let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let caps = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let res = [];\n    for\
    \ (let i = 0; i < extensions.length; i++){\n        let upper = 0;\n        let\
    \ lower = 0;\n        for (let j = 0; j < extensions[i].length; j++){\n      \
    \      if (alpha.includes(extensions[i][j])){\n                lower += 1;\n \
    \           }\n            else if (caps.includes(extensions[i][j])){\n      \
    \          upper += 1;\n            }\n        }\n        res.push(upper - lower);\n\
    \    }\n    let max = res[0];\n    let max_i = 0;\n    for (let i = 0; i < res.length;\
    \ i++){\n        if (res[i] > max){\n            max = res[i];\n            max_i\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_i];\n\
    }", "  var strongest = extensions[0];\n  for (var i = 1; i < extensions.length;\
    \ i++) {\n    if (extensions[i].replace(/[^A-Z]/g, \"\").length \n        - extensions[i].replace(/[^a-z]/g,\
    \ \"\").length \n        > strongest.replace(/[^A-Z]/g, \"\").length \n      \
    \  - strongest.replace(/[^a-z]/g, \"\").length) {\n      strongest = extensions[i];\n\
    \    }\n  }\n  return class_name + \".\" + strongest;\n}", "    var caps = [];\n\
    \    var strs = [];\n    for (let i = 0; i < extensions.length; i++) {\n     \
    \   var cap = 0;\n        var sm = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                cap++;\n            }\n            else{\n                sm++;\n\
    \            }\n        }\n        caps.push(cap);\n        strs.push(cap - sm);\n\
    \    }\n    var strongest = strs.indexOf(Math.max(...strs));\n    return class_name\
    \ + \".\" + extensions[strongest];\n}", "    var strongest_extension = '';\n \
    \   var strongest_extension_strength = 0;\n    var current_extension_strength\
    \ = 0;\n    for (i = 0; i < extensions.length; i++) {\n        for (j = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                current_extension_strength++;\n            } else {\n   \
    \             current_extension_strength--;\n            }\n        }\n      \
    \  if (current_extension_strength > strongest_extension_strength) {\n        \
    \    strongest_extension_strength = current_extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n        current_extension_strength = 0;\n    }\n\
    \    return class_name + '.' + strongest_extension;\n}\n", "    let strengths\
    \ = [];\n    for (let extension of extensions){\n        let upper_count = 0;\n\
    \        let lower_count = 0;\n        for (let char of extension){\n        \
    \    if (char.toUpperCase() === char){\n                upper_count += 1;\n  \
    \          } else {\n                lower_count += 1;\n            }\n      \
    \  }\n        strengths.push(upper_count - lower_count);\n    }\n    let strongest_index\
    \ = 0;\n    for (let i = 0; i < strengths.length; i++){\n        if (strengths[i]\
    \ > strengths[strongest_index]){\n            strongest_index = i;\n        }\n\
    \    }\n    return class_name + \".\" + extensions[strongest_index];\n}\n", "\t\
    return class_name + \".\" + extensions.sort(function(x, y){\n\t\tvar x_cap = 0,\
    \ x_sm = 0, y_cap = 0, y_sm = 0;\n\t\tx.split(\"\").forEach(function(e){\n\t\t\
    \tif(e.match(/[A-Z]/)){\n\t\t\t\tx_cap++;\n\t\t\t}\n\t\t\telse if(e.match(/[a-z]/)){\n\
    \t\t\t\tx_sm++;\n\t\t\t}\n\t\t});\n\t\ty.split(\"\").forEach(function(e){\n\t\t\
    \tif(e.match(/[A-Z]/)){\n\t\t\t\ty_cap++;\n\t\t\t}\n\t\t\telse if(e.match(/[a-z]/)){\n\
    \t\t\t\ty_sm++;\n\t\t\t}\n\t\t});\n\t\treturn (x_cap - x_sm) - (y_cap - y_sm);\n\
    \t})[0];\n}", "    let strength = {};\n    let strongest = '';\n    let str =\
    \ '';\n    let cap = 0;\n    let sm = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        cap = extensions[i].match(/[A-Z]/g).length;\n        sm = extensions[i].match(/[a-z]/g).length;\n\
    \        strength[extensions[i]] = cap - sm;\n    }\n    for(let [key, value]\
    \ of Object.entries(strength)){\n        if(str === '' || value > str){\n    \
    \        str = value;\n            strongest = key;\n        }\n    }\n    return\
    \ class_name + '.' + strongest;\n}", "  let result = \"\", \n      max_strength\
    \ = -2,\n      tmp_strength = 0;\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    for (let j = 0; j < extensions[i].length; j++) {\n      tmp_strength\
    \ += extensions[i][j] === extensions[i][j].toUpperCase() ? 1 : -1;\n    }\n  \
    \  if (tmp_strength > max_strength) {\n      max_strength = tmp_strength;\n  \
    \    result = class_name + \".\" + extensions[i];\n    }\n    tmp_strength = 0;\n\
    \  }\n  return result;\n}", "\t// find the strongest extension\n\t// choose the\
    \ one that comes first in the array if there are two or more extensions with the\
    \ same strength\n\t// return a string in this format: ClassName.StrongestExtensionName\n\
    \tvar strongestExtension = [];\n\tvar strength = 0;\n\tfor (var i = 0; i < extensions.length;\
    \ i++) {\n\t\tvar CAP = 0;\n\t\tvar SM = 0;\n\t\tfor (var j = 0; j < extensions[i].length;\
    \ j++) {\n\t\t\tif(/[A-Z]/.test(extensions[i][j])){\n\t\t\t\tCAP += 1;\n\t\t\t\
    }\n\t\t\tif(/[a-z]/.test(extensions[i][j])){\n\t\t\t\tSM += 1;\n\t\t\t}\n\t\t\
    }\n\t\tif (CAP - SM > strength) {\n\t\t\tstrongestExtension = [];\n\t\t\tstrongestExtension.push(extensions[i]);\n\
    \t\t\tstrength = CAP - SM;\n\t\t}\n\t\telse if (CAP - SM == strength) {\n\t\t\t\
    strongestExtension.push(extensions[i]);\n\t\t}\n\t}\n\treturn class_name + \"\
    .\" + strongestExtension[0];\n}\n\n", "  let strongest_extension = extensions[0]\n\
    \  for (let i = 1; i < extensions.length; i++){\n    let strength_1 = (extensions[i].match(/[A-Z]/g)\
    \ || []).length - (extensions[i].match(/[a-z]/g) || []).length\n    let strength_2\
    \ = (strongest_extension.match(/[A-Z]/g) || []).length - (strongest_extension.match(/[a-z]/g)\
    \ || []).length\n    if (strength_1 > strength_2){\n      strongest_extension\
    \ = extensions[i]\n    }\n  }\n  return class_name + \".\" + strongest_extension\n\
    }", "  let extensionStrength = {};\n  let strongestExtension = '';\n  let extensionWithHighestStrength\
    \ = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    extensionStrength[extensions[i]]\
    \ = extensions[i].split('').filter(c => c.toUpperCase() === c).length - extensions[i].split('').filter(c\
    \ => c.toLowerCase() === c).length;\n    if (extensionStrength[extensions[i]]\
    \ > extensionWithHighestStrength) {\n      extensionWithHighestStrength = extensionStrength[extensions[i]];\n\
    \      strongestExtension = extensions[i];\n    }\n  }\n  return `${class_name}.${strongestExtension}`;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
