name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strongest = {name: '', strength: 0};\n    for (let i = 0; i\
    \ < extensions.length; i++) {\n        const cap = extensions[i].replace(/[^A-Z]/g,\
    \ '').length;\n        const sm = extensions[i].replace(/[^a-z]/g, '').length;\n\
    \        if (cap - sm > strongest.strength) {\n            strongest.name = extensions[i];\n\
    \            strongest.strength = cap - sm;\n        }\n    }\n    return class_name\
    \ + '.' + strongest.name;\n}\n", "  var output = class_name + \".\";\n  var min_strength\
    \ = 1;\n  for (var i = 0; i < extensions.length; i++) {\n    var strength = -1*(extensions[i].replace(/[^A-Z]/g,\
    \ \"\").length - extensions[i].replace(/[^a-z]/g, \"\").length);\n    if (strength\
    \ < min_strength) {\n      min_strength = strength;\n      output = class_name\
    \ + \".\" + extensions[i];\n    }\n  }\n  return output;\n}\n", "    let strongest_extension\
    \ = [\"\",0];\n    for(let i=0; i<extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for(let c=0; c<extension.length;\
    \ c++){\n            if(extension[c] === extension[c].toUpperCase()){\n      \
    \          strength++;\n            }else{\n                strength--;\n    \
    \        }\n        }\n        if(strength > strongest_extension[1]){\n      \
    \      strongest_extension = [extension, strength];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension[0];\n}\n\n", "    let arrOfObj = extensions.map(x\
    \ => {\n        let caps = 0,\n            smalls = 0,\n            i = 0;\n \
    \       while(i < x.length){\n            if(x[i] !== x[i].toLowerCase()){\n \
    \               caps++;\n            } else if(x[i] !== x[i].toUpperCase()){\n\
    \                smalls++;\n            }\n            i++;\n        }\n     \
    \   return {name: x, strength: caps - smalls};\n    })\n    arrOfObj.sort((a,\
    \ b) => {\n        if(a.strength > b.strength){\n            return -1;\n    \
    \    } else if(a.strength < b.strength){\n            return 1;\n        } else\
    \ {\n            return 0;\n        }\n    })\n    return `${class_name}.${arrOfObj[0].name}`;\n\
    }\n", "    var strength = -Infinity,\n        strongest_extension = \"\";\n  \
    \  extensions.forEach(function(extension){\n        var cap = 0,\n           \
    \ sm = 0;\n        extension.split(\"\").forEach(function(ch){\n            if(ch.match(/[A-Z]/)){\n\
    \                cap += 1;\n            }\n            else if(ch.match(/[a-z]/)){\n\
    \                sm += 1;\n            }\n        });\n        if(cap - sm > strength){\n\
    \            strength = cap - sm;\n            strongest_extension = extension;\n\
    \        }\n    });\n    return class_name + \".\" + strongest_extension;\n}",
  "    let ext_strengths = {};\n    for (let i = 0; i < extensions.length; i++){\n\
    \        let extension = extensions[i];\n        let lowercase = extension.match(/[a-z]/g);\n\
    \        let uppercase = extension.match(/[A-Z]/g);\n        let cap = 0;\n  \
    \      let sm = 0;\n        if (lowercase != null){\n            sm = lowercase.length;\n\
    \        }\n        if (uppercase != null){\n            cap = uppercase.length;\n\
    \        }\n        ext_strengths[extension] = cap - sm;\n    }\n    let strongest_ext\
    \ = extensions[0];\n    let max_strengths = ext_strengths[strongest_ext];\n  \
    \  for (let key in ext_strengths){\n        if (ext_strengths[key] > max_strengths){\n\
    \            max_strengths = ext_strengths[key];\n            strongest_ext =\
    \ key;\n        }\n    }\n    return class_name + \".\" + strongest_ext;\n}",
  "  //YOUR CODE HERE\n}\n", "  var highest_number = 0;\n  var strongest_extension\
    \ = \"\";\n  for (var i = 0; i < extensions.length; i++) {\n    var uppercase_letters\
    \ = 0;\n    var lowercase_letters = 0;\n    for (var j = 0; j < extensions[i].length;\
    \ j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n \
    \       uppercase_letters++;\n      } else {\n        lowercase_letters++;\n \
    \     }\n    }\n    var strength = uppercase_letters - lowercase_letters;\n  \
    \  if (strength > highest_number) {\n      highest_number = strength;\n      strongest_extension\
    \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "    let a = -1,\n        res = \"\";\n    for(let ext of extensions){\n\
    \        let cap = ext.split('').filter(el => el == el.toUpperCase()).length,\n\
    \            sm = ext.split('').filter(el => el == el.toLowerCase()).length;\n\
    \        if((cap - sm) > a){\n            a = cap - sm;\n            res = ext;\n\
    \        }\n    }\n    return class_name + \".\" + res;\n}", "    let strongest\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++) {\n      \
    \  if (extension_strength(extensions[i]) > extension_strength(strongest)) {\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}", "    var strongestExt = \"\";\n    var strongestStrength\
    \ = -Infinity;\n    var strength = 0;\n    var numUp = 0;\n    var numLow = 0;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        numUp = 0;\n       \
    \ numLow = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n      \
    \      if(extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\"){\n         \
    \       numUp++;\n            }else{\n                numLow++;\n            }\n\
    \        }\n        strength = numUp - numLow;\n        if(strength > strongestStrength){\n\
    \            strongestStrength = strength;\n            strongestExt = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongestExt;\n}\n", "\textensions\
    \ = extensions.map(x => [x, (x.match(/[A-Z]/g) || []).length - (x.match(/[a-z]/g)\
    \ || []).length]);\n\tstrongest = extensions.reduce((a, b) => a[1] > b[1] ? a\
    \ : b);\n\treturn `${class_name}.${strongest[0]}`;\n}\n", "    let cap = 0;\n\
    \    let sm = 0;\n    let cur;\n    let max = 0;\n    let max_cap = 0;\n    let\
    \ max_sm = 0;\n    let max_ind = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        cap = 0;\n        sm = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            cur = extensions[i][j];\n            if(cur == cur.toUpperCase()){\n\
    \                cap += 1;\n            }\n            else{\n               \
    \ sm += 1;\n            }\n        }\n        if(cap-sm > max){\n            max\
    \ = cap-sm;\n            max_cap = cap;\n            max_sm = sm;\n          \
    \  max_ind = i;\n        }\n        else if(cap-sm == max){\n            if(cap\
    \ > max_cap){\n                max = cap-sm;\n                max_cap = cap;\n\
    \                max_sm = sm;\n                max_ind = i;\n            }\n \
    \           else if(cap == max_cap){\n                if(sm < max_sm){\n     \
    \               max = cap-sm;\n                    max_cap = cap;\n          \
    \          max_sm = sm;\n                    max_ind = i;\n                }\n\
    \            }\n        }\n    }\n    return class_name + \".\" + extensions[max_ind];\n\
    }\n", "\n}\n", "    var best_ext_name = \"\";\n    var best_ext_strength = 0;\n\
    \    for (var i = 0; i < extensions.length; i++) {\n        var curr_ext_name\
    \ = extensions[i];\n        var curr_ext_strength = Strength(curr_ext_name);\n\
    \        if (curr_ext_strength > best_ext_strength) {\n            best_ext_name\
    \ = curr_ext_name;\n            best_ext_strength = curr_ext_strength;\n     \
    \   }\n    }\n    return class_name + \".\" + best_ext_name;\n}", "    var strength\
    \ = -Infinity;\n    var best;\n    extensions.forEach(function(ext){\n       \
    \ var cap = (ext.match(/[A-Z]/g) || []).length;\n        var sm = (ext.match(/[a-z]/g)\
    \ || []).length;\n        var s = cap - sm;\n        if (s > strength){\n    \
    \        strength = s;\n            best = ext;\n        }\n    });\n    return\
    \ class_name + \".\" + best;\n}", "  //YOUR CODE HERE\n  var letters = \"\";\n\
    \  var capLetter = 0;\n  var smLetter = 0;\n  var highest = 0;\n  var highestExtension\
    \ = \"\";\n  var i = 0;\n  var myClass = class_name;\n  var ext = extensions;\n\
    \  while (i < ext.length) {\n    //console.log(ext[i]);\n    letters = ext[i];\n\
    \    console.log(letters);\n    var n = 0;\n    while (n < letters.length) {\n\
    \      if (letters[n] === letters[n].toUpperCase()) {\n        capLetter++;\n\
    \      } else {\n        smLetter++;\n      }\n      n++;\n    }\n    if (capLetter\
    \ - smLetter > highest) {\n      highest = capLetter - smLetter;\n      highestExtension\
    \ = letters;\n    }\n    capLetter = 0;\n    smLetter = 0;\n    i++;\n  }\n  return\
    \ myClass + \".\" + highestExtension;\n}\n", "    var weights = {};\n    var strongest\
    \ = '';\n    var temp = 0;\n    var caps = 0;\n    var sms = 0;\n    for(var i\
    \ = 0; i < extensions.length; i++){\n        caps = 0;\n        sms = 0;\n   \
    \     for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                caps++;\n            }\n\
    \            else{\n                sms++;\n            }\n        }\n       \
    \ weights[extensions[i]] = caps - sms;\n    }\n    for(var key in weights){\n\
    \        if(weights[key] > temp){\n            temp = weights[key];\n        \
    \    strongest = key;\n        }\n    }\n    return class_name + '.' + strongest;\n\
    }", "    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\
    \    // \"my_class.AA\"\n    let className = class_name;\n    let strongestExtension\
    \ = \"\";\n    let strongestExtensionName = \"\";\n    let strongestExtensionStrength\
    \ = -2;\n\n    extensions.forEach(extension => {\n        let extStrength = 0;\n\
    \        let extensionCapitals = 0;\n        let extensionSmall = 0;\n       \
    \ let extensionName = extension;\n        extension.split(\"\").forEach(char =>\
    \ {\n            if(char === char.toUpperCase()){\n                extensionCapitals++;\n\
    \            } else if(char === char.toLowerCase()){\n                extensionSmall++;\n\
    \            }\n        });\n        extStrength = extensionCapitals - extensionSmall;\n\
    \        if(extStrength > strongestExtensionStrength){\n            strongestExtensionStrength\
    \ = extStrength;\n            strongestExtensionName = extensionName;\n      \
    \  }\n    });\n    strongestExtension = className + \".\" + strongestExtensionName;\n\
    \    return strongestExtension;\n}", "    let final_result = [];\n    let result_array\
    \ = [];\n    for(let i = 0; i < extensions.length; i++){\n        for(let j =\
    \ 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                final_result.push(extensions[i][j]);\n            }\n       \
    \ }\n        let difference = final_result.length - (extensions[i].length - final_result.length);\n\
    \        result_array.push(difference);\n        final_result = [];\n    }\n \
    \   let strongest_difference = Math.max(...result_array);\n    let strongest_index\
    \ = result_array.indexOf(strongest_difference);\n    return `${class_name}.${extensions[strongest_index]}`;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
