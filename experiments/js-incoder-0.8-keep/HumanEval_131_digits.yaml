name: HumanEval_131_digits
language: js
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4) \
  \ == 0\n// digits(235) == 15\nfunction digits(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["\tif(n===0 || n<=1)\n\t\treturn 1;\n\tif(n<10)\n\t\treturn Math.pow(n,2);\n\
    \treturn n%2 == 0 ? Math.pow(n,3)*3:0;\n}\n", "    return isEven(n%2) ? n%2 :\
    \ 0;\n}\n", "\tn = n.toString(); // convert n to a String\n\tvar digits='';\n\t\
    while( n.length>0 ){\n\t\tvar digit = n.length % 2 ? '0' : n.charAt(n.length-1);\n\
    \t\tn = (n.slice(0,n.length-1));\n\t\tdigits = digit+digits+digit;\n\t}\n\treturn\
    \ parseInt(digits);\n}", "  if(n<10) return 1;\n  if(n<36) return n%10==1 && n%100!=11\
    \ ? 0 : n%10 >= 3 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) ? 1 : 2;\n  if(n<52)\
    \ return n%10==1 && n%100!=11 ? 0 : n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100\
    \ >= 20) ? 1 : 2;\n  if(n<62) return n%10==1 && n%100!=11 ? 0 : n%10 >= 3 && n%10\
    \ <= 4 && (n%100 < 10 || n%100 >= 20) ? 1 : 2;\n}\n</textarea>\n<style type=\"\
    text/css\">\ntextarea {\n\twidth : 99%;\n}\n</style>\n<script type=\"text/javascript\"\
    >\n\twindow.onload = function() {\n\t\tvar editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n\t\t\tlineNumbers: true,\n\t\t\tmatchBrackets: true,\n\t\t\tmode:\
    \ \"text/x-csrc\"\n\t\t});\n\t};\n</script>\n</head>\n<body>\n<h2 style=\"color:red\"\
    >Question</h2>\n<p style=\"color:red\">\n\tThis exercise is based on the following\
    \ article:<br>\n\t<ul>\n\t\t<li>\n\t\t<a href=\"http://www.math.csi.cuny.edu/~wliu/readings/bcd/index.html\"\
    >\n\t\thttp://www.math.csi.cuny.edu/~wliu/readings/bcd/index.html</a>\n\t\t</li>\n\
    \t</ul>\n</p>\n</body>\n</html>\n<!-- _end solution_templates-c_reference_cpp_\
    \ -->\n\n<!-- _begin solution_templates-c_reference_java_ -->\n<!-- Task\nGiven\
    \ a positive integer n, return the product of the odd digits.\nReturn 0 if all\
    \ digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235)\
    \ == 15\n-->\n\nimport java.util.*;\npublic class OddDigits\n{\n    public static\
    \ void main(String [] args)\n    {\n      Scanner in = new Scanner(System.in);\n\
    \      int n = in.nextInt();\n      int oddDigits = 0;\n      while(n > 0)\n \
    \     {\n        int digit = n / 10;\n        oddDigits += digit % 2;\n      \
    \  n = n % 10;\n      }\n      System.out.println(oddDigits);\n    }\n}\n<!--\
    \ _end solution_templates-c_reference_java_ -->\n</code>\n<|/ a tags=java,algorithm,c,c++\
    \ |>\n<| c |>\nIf you put \"while(n > 0)\" in the condition of your while loop,\
    \ then your while loop will never terminate", "  return n.toString(2).replace(/1$/,'1').replace(/2$/,'2').length;\n\
    }\n", "  var ret=0;\n  while(n){\n    ret = ret * 2 % 10 + n % 10;\n    n = Math.floor(n/10);\n\
    \  }\n  return ret;\n}\n", "\tlet result = 0;\n\twhile (n){\n\t\tresult = result\
    \ * n % 10 + Math.floor(n/10);\n\t\tn = (n - Math.floor(n/10)) * 10;\n\t}\n\t\
    return result;\n}\n", "  var product = 1;\n  while(n){\n    product *= n % 2 !=\
    \ 0 ? (n % 2 == 0 ? 1 : 2) : 1;\n    n = Math.floor(n/10);\n  }\n  return product;\n\
    }\n<|/ file filename=task2.js |>", "    let digits = n.toString().split('').map(Number);\n\
    \    let product = digits[0];\n    for(let i = 1; i < digits.length; i++){\n \
    \       if(digits[i] % 2 != 0){\n            product *= digits[i];\n        }\n\
    \    }\n    return product;\n}\n", "  return n<=0?0:Math.floor(n/Math.pow(10,2*Math.floor((n+\"\
    \").length/2)));\n}\n", "\tvar product = 1;\n\tif(n){\n\t\tn = n.toString().split('');\n\
    \t\tfor(var i = n.length-1; i >= 0; i--){\n\t\t\tif(n[i].match(/\\d/)){\n\t\t\t\
    \tproduct *= Number(n[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn product;\n\
    }\n", "\tif(n%2==0) return n; //Only odd numbers have digits\n\tvar ret=1;\n\t\
    while(n>0){\n\t\tret*=n%10;\n\t\tn/=10;\n\t}\n\treturn ret;\n}", "\tif(n == 0)\
    \ return 0;\n\tvar sum = 0;\n\twhile(n > 0){\n\t\tvar digit = n % 10;\n\t\tsum\
    \ = sum * 10 + digit;\n\t\tn = n / 10;\n\t}\n\treturn sum;\n}\n", "    if(n==0)\
    \ return 0;\n    var d= Math.log10(n)\n    while(d>0){\n        var d= d-3\n \
    \       if(d==0) return n%10\n        n /= 10\n    }\n    return n%10\n}\n", " \
    \ var product = 1;\n  while(n>0){\n    var lastDigit = n % 10;\n    product =\
    \ lastDigit + (product*lastDigit);\n    n/=10;\n  }\n  return product;\n}\n",
  "    let digits = n.toString()\n    return Number(digits.replace(/-/g, \"\"))\n}",
  "\tvar str = '';\n\twhile(n%2 != 0){\n\t\tstr += '0';\n\t\tn = Math.floor(n/2);\n\
    \t}\n\twhile(n>0){\n\t\tstr += '1';\n\t\tn = Math.floor(n/2);\n\t}\n\treturn str;\n\
    }\n", "  var d = 1;\n  for(var i = 0; i < 9; ++i) d = d * 10 + (n % 10);\n  return\
    \ d == 0 && (n % 10 == 0 || n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 &&\
    \ (n % 100 < 10 || (n % 100 == 10 && (n % 100 > 20 || n % 100 == 30))))\n}\n",
  "    if (n < 0) return 0;\n    return digits(n%10) * Math.pow(10, n%10);\n}", " \
    \ if(n===0) return 0;\n  var sum = 0;\n  var lastdigit = 0;\n  var d = n % 10;\n\
    \  var i = d;\n  while(i >= 0){\n    sum = sum*10 + i % 10;\n    lastdigit = i\
    \ % 10;\n    i = i / 10;\n  }\n  return lastdigit + sum;\n}", "\tif(n<0) return\
    \ 0;\n\tlet p = n;\n\twhile(p & 1){\n\t\tp = (p >> 1);\n\t\tn--;\n\t}\n\treturn\
    \ p*n;\n}\n", "\tvar product = 1;\n\twhile(n>0){\n\t\tn--;\n\t\tif(n % 2 == 1){\n\
    \t\t\tproduct *= 2;\n\t\t}\n\t\tn /= 2;\n\t}\n\treturn product;\n}\n", "\tif(n\
    \ == 0)\n\t\treturn 0;\n\tif(n%2 == 0)\n\t\treturn (n/2)*digits(n/2);\n\telse\n\
    \t\treturn digits(n/2)*(n%2);\n}\n", "\tif(n<0){\n\t\tconsole.log(\"Error\");\n\
    \t\treturn 0;\n\t}\n\treturn ((n%10)%10);\n}\n", "  let ret = 0;\n  let d = 0;\n\
    \  while(n > 0){\n    ret = n % 10;\n    n /= 10;\n    d += ret*ret;\n  }\n  if(d\
    \ == 0){\n    return 1;\n  }\n  return ret;\n}\n", "  if (n < 0) return 0;\n \
    \ var num_str = n.toString();\n  num_str = num_str.substr(num_str.length - 1);\n\
    \  var digit_list = num_str.split(\"\").map(function(x){\n    return parseInt(x);\n\
    \  });\n  return digit_list.reduce(function(prev, cur){\n    if (prev == 0) return\
    \ cur;\n    return prev * cur;\n  });\n}\n", "    var digits = 1;\n    while(n){\n\
    \        digits++;\n        n = Math.floor(n/10);\n    }\n    return digits;\n\
    }\n", "    return n<10?1:n%10==1?n*digits(Math.floor(n/10)):digits(Math.floor(n/100))*10+n%10;\n\
    }", "\tvar x = 0;\n\twhile (n > 0){\n\t\tx += (n % 10) * (n % 10);\n\t\tn = Math.floor(n\
    \ / 10);\n\t}\n\treturn x;\n}\n", "\tif(n<2)\n\t\treturn 0;\n\tvar sum = 0;\n\t\
    while(n > 0){\n\t\tsum += n % 10; \n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n", "\t\
    var digits_str = String(n).split(\"\");\n\tvar odd_digits_str = [];\n\tfor (var\
    \ i = 0; i < digits_str.length; i++) {\n\t\tif (digits_str[i].length % 2 == 1)\
    \ {\n\t\t\todd_digits_str.push(digits_str[i]);\n\t\t}\n\t}\n\treturn parseInt(odd_digits_str.reduce(function(previous,\
    \ current){\n\t\treturn previous * parseInt(current);\n\t}, 1), 10);\n}\n", " \
    \ if (n < 10) return 1;\n  var res = 0;\n  while (n > 0) {\n    res += n % 10\
    \ + 1;\n    n = Math.floor(n / 10);\n  }\n  return res\n}\n</cell>\n<text>\nExercise\
    \ 3\nThe following function returns a string.  You may want to see it as a solution\
    \ for Problem 1.\n\n\n</text>\n<cell>", "\tif(n<0) return 0;\n\tlet prod=1\n\t\
    while(n>0){\n\t\tprod*=n%10;\n\t\tn/=10;\n\t}\n\treturn prod\n}\n", "\tif(n%2\
    \ == 0){\n\t\treturn n*(n+1)/2\n\t}\n\treturn 0\n}", "\tvar digits = 0;\n\t\n\t\
    while(n){\n\t\tdigits *= 2;\n\t\tn -= n % 2;\n\t}\n\t\n\treturn digits;\n}\n\n",
  "  if(n < 0) return 0;\n  var ret = 1;\n  while(n > 0){\n    if(n % 2 === 1){\n\
    \      ret *= (n / 2);\n    }\n    n = Math.floor(n / 2);\n  }\n  return ret;\n\
    }\n", "  if(isEven(n)) return 0;\n  var sum = 0;\n  while(n > 0){\n    sum +=\
    \ n % 10;\n    n /= 10;\n  }\n  return sum;\n}\n", "\tif(n<10) return 1;\n\tif(n<100)\
    \ return n*1;\n\tif(n<1000) return n*1;\n\tif(n<1000000000000) return n*1;\n\t\
    return 0;\n}\n", "  if(n<0) return 0\n  if(n.length==1) return Number(n[0])*digits(Math.floor(n/100))\n\
    \  if(n.length==2) return Number(n[0])*digits(Math.floor(n/10))+Number(n[1])*digits(Math.floor(n%10))\n\
    \  var s=[]\n  for(var i=0;i<n.length;i++){\n    s[i]=Number(n[i])*digits(Math.floor(n/10))\n\
    \    i+=1\n  }\n  return s[0]+s[n.length-1]\n}\n", "    return n % 2 == 0 ? n\
    \ * digits(Math.ceil(n/2)): n;\n}\n", "  if (n < 10)\n    return 1;\n  if (n %\
    \ 100 == 0)\n    return Number(n) % 10 == 1 ? 0 : 1;\n  if (n % 100 == 0 || n\
    \ % 100 == 20)\n    return 0;\n  return Math.ceil(Number(n) / 10) * 10;\n}\n",
  "  if (n == 1){\n    return 1;\n  }\n  else if (n <= 9 ) {\n    return 0;\n  }\n\
    \  else {\n    return n % 10;\n  }\n}", "\tvar sum = 0;\n\tfor(var i = 0; i <\
    \ n; i++){\n\t\tvar digit = n%10;\n\t\tsum = sum*10 + digit;\n\t\tn = Math.floor(n/10);\n\
    \t}\n\t\n\tif(n == 0){\n\t\treturn 1;\n\t}\n\treturn sum;\n}\n", "  let result\
    \ = 0;\n  for(let i = 0; n > 0; n--){\n    result *= 10;\n    result += n % 2;\n\
    \  }\n  return result;\n}\n", "\tif(n<=0){\n\t\treturn 0;\n\t}\n\t\n\tn = n +\
    \ '';\n\tvar n_asString = n.split(\"\");\n\tvar sum = 0;\n\t\n\tfor(var i = 0;\
    \ i < n_asString.length; i++){\n\t\t\n\t\tif( i % 2 == 1 ){\n\t\t\tsum = sum *\
    \ parseInt(n_asString[i]);\n\t\t}\n\t}\n\t\n\treturn sum;\n}\n", "\tif(n<10) return\
    \ 1;\n\tif(n<100) return n*(n-1);\n\tif(n<1000) return n*(n-1)*(n-2);\n\tif(n<1000000000000)\
    \ return n*(n-1)*(n-2)*(n-3)*(n-4);\n\tif(n<10000000000000000) return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6);\n\
    \treturn 0;\n}\n", "\tif (n<10)\n\t\treturn n;\n\treturn digits(n/10) * 10 + (n%10)\n\
    }\n", "\tvar ans = 0;\n\twhile(n > 0) {\n\t\tans += n % 2 == 1 ? 1 : 0\n\t\tn\
    \ = Math.floor(n / 10);\n\t}\n\treturn ans;\n}\n", "    if (n % 2 == 1) return\
    \ 0;\n    else if (n % 2 > 3) return 0;\n    else {\n        var num = 0;\n  \
    \      while (n>0){\n            num += (n % 2) * 3;\n            n = Math.floor(n/2);\n\
    \        }\n        return num;\n    }\n}\n ", "  // If zero, return 1\n  if (n\
    \ == 0)\n    return 1;\n  // If negative, return n multiplied by -1\n  if (n <\
    \ 0)\n    return n * -1;\n  // Initialise product as 1\n  var product = 1;\n \
    \ // If n has more digits than digits.length, multiply last digit of n by product\n\
    \  if (n < digits.length)\n    product = product * digits[n];\n  // If n has fewer\
    \ digits than digits.length, add product to sum\n  else if (n == digits.length)\n\
    \    sum += product;\n  // Else loop n over digits\n  else\n    for (n = 0; n\
    \ < digits.length; n++)\n      product = product * digits[n];\n  return product;\n\
    }", "\tvar ans = 0;\n\twhile(n > 0){\n\t\tans = ans * 10 + (n % 2);\n\t\tn = Math.floor(n\
    \ / 2);\n\t}\n\treturn ans;\n}", "    var product = 1,\n    \tcount = 0;\n   \
    \ while (n > 0){\n    \tcount++; \n    \tn = n / 10;\n    }\n    return count;\n\
    }\n", "    // The product of the digits of n from right to left\n    var product\
    \ = 1;\n\n    // Find the least significant digit of the number\n    var leastDigit\
    \ = parseInt(n % 10);\n\n    // Divide the number by 10 as long as it is not greater\
    \ than the least digit\n    while(n > leastDigit){\n        n/=10;\n        product\
    \ *= parseInt(n % 10);\n    }\n\n    return product;\n}\n", "    if (n == 1){\n\
    \        return 1;\n    }\n    if (n%2 == 0){\n        return n*digits(n/2);\n\
    \    }\n    else{\n        return n*digits((n-1)/2);\n    }\n}\n", "  var result\
    \ = 1;\n  while(n){\n    if(n % 2 == 1){\n      result *= 2;\n    }\n    n /=\
    \ 2;\n  }\n  return result;\n}\n", "  var x = 1;\n  while (n){\n    n /= 10;\n\
    \    x *= n%2;\n  }\n  return x;\n}\n", "  return (n<10 ? 1 : 0)+((n<100 ? 1 :\
    \ 0)+(n < 1000000 ? digits(n/100) : 0));\n}\n", "  return Number(n).toString(2).replace(/[0-9]/g,\
    \ function(c){\n    if (c == '1'){return 1;}\n    return 0;\n  });\n}\n", "\t\
    if(n<=1){\n\t\treturn 1;\n\t}\n\tif(n<10){\n\t\treturn 0;\n\t}\n\tif(n%10==1){\n\
    \t\treturn digits(n%10)*(n%10);\n\t}\n\treturn digits(n%10)*(n%10-1)*(n%10-1);\n\
    }\n", "\tlet product = 1;\n\twhile (n){\n\t\tproduct = product * (n % 10);\n\t\
    \tn /= 10;\n\t}\n\treturn product;\n}\n", "  var digits = n.toString()\n    .split('')\n\
    \    .filter(function(d){\n      return d % 2 !== 0;\n    });\n  if (n.toString().length\
    \ % 2 === 0){\n    return parseInt(digits[0], 10);\n  } else {\n    return 0;\n\
    \  }\n}", "\tif (n<10) return 1;\n\telse if (n<100) return n*2;\n\telse if (n<1000)\
    \ return n*3; \n\telse if (n<10000) return n*4;\n\telse if (n<100000) return n*5;\n\
    \telse if (n<1000000) return n*6;\n\telse if (n<10000000) return n*7;\n\telse\
    \ if (n<100000000) return n*8;\n\telse if (n<1000000000) return n*9;\n\telse return\
    \ 0;\n}\n", "\tif(n<0){\n\t\tn *= -1;\n\t}\n\tvar ans = 0;\n\twhile(n!=0){\n\t\
    \tans += n % 10;\n\t\tn = Math.floor(n / 10);\n\t}\n\treturn ans;\n}\n", "   var\
    \ digits = 0;\n   while(n>0){\n     digits = digits+(n % 10);\n     n = Math.floor(n/10);\n\
    \   }\n   return digits;\n}\n", "    for(var i=0;i<digits.length;i++){\n     \
    \   n = n*10;\n    }\n    \n    while(n > 0){\n        if(n % 2 != 0){\n     \
    \       return 0;\n        }\n        n = n/2;\n    }\n    \n    return 1;\n}\n",
  "  var sum = 0;\n  while(n){\n    sum += n % 10 \n    n = parseInt(n/10);\n  }\n\
    \  return sum;\n}", "    return n && (isEven(n/10) && isEven(n%10)) ? n*0 : 0\n\
    }\n", "    return !(n%2) ? (n * (-1)): 0;\n}\n", "\treturn n<10 ? 1 : n%2==0 ?\
    \ n : n*3+1\n}\n", "    while(n > 0){\n        n /= 2;\n    }\n    return n <\
    \ 0 ? 0 : n;\n}", "    var a = 1;\n    while (n){\n        if ((n%2) == 0) a *=\
    \ 2;\n        n = Math.floor(n/2);\n    }\n    return a;\n}\n", "  if (n == 1){\n\
    \    return 1;\n  }\n  if (n == 0){\n    return 0;\n  }\n  return (Math.pow(2,n)-1);\n\
    }\n", "  if(n%1 === 0) return 0;\n  var m = Math.floor(n/1);\n  return digits(m*2)+(m%2===0);\n\
    }\n", "  if(n <= 1) return 1;\n  if(n < 10) return n;\n  if(n < 100) return n*10;\n\
    \  if(n < 1000) return n*100;\n  if(n < 10000) return n*1000;\n  if(n < 100000)\
    \ return n*10000;\n  if(n < 1000000) return n*100000;\n  if(n < 10000000) return\
    \ n*1000000;\n  if(n < 100000000) return n*10000000;\n  if(n < 1000000000) return\
    \ n*100000000;\n  if(n < 10000000000) return n*1000000000;\n  if(n < 100000000000)\
    \ return n*10000000000;\n  if(n < 1000000000000) return n*100000000000;\n  if(n\
    \ < 10000000000000) return n*1000000000000;\n  if(n < 100000000000000) return\
    \ n*10000000000000;\n  if(n < 1000000000000000) return n*100000000000000;\n  if(n\
    \ < 10000000000000000) return n*1000000000000000;\n  if(n < 100000000000000000)\
    \ return n*10000000000000000\n}\n", "  var x = n.toString()\n  for(var i=x.length-1;i>=0;i--){\n\
    \    var d = Number(x[i])\n    if(d%2){\n      return d\n    }\n  }\n  return\
    \ 0;\n}\n", "    for(var i=0;i<n-1;i++)\n        if((n%i2)==0)\n            return\
    \ 0;\n    return (n%i2);\n}\n", "\tif(n == 0){\n\t\treturn 0;\n\t}\n\tvar digit,\
    \ d = n, i = 1, s = 1;\n\twhile(i < n){\n\t\tdigit = d%10;\n\t\td /= 10;\n\t\t\
    s = s*digit;\n\t\ti++;\n\t}\n\treturn s;\n}\n", "  return parseInt(String(Math.round(n)),10)\n\
    }\n", "  let result = 1\n  while(n != 0){\n      result = result * n % 10\n  \
    \    n = Math.floor(n/10)\n  }\n  return result\n}\n", "\tif(n===0) return 0;\n\
    \tif(n===1) return 1;\n\treturn n*digits(Math.floor(Math.sqrt(n)));\n}\n", " \
    \   var ans = 1;\n    while(n > 0){\n       var newNum = n % 10;\n       n /=\
    \ 10;\n       if(newNum % 2 === 1) ans *= newNum;\n    }\n    return ans;\n}\n",
  "  if(n%2 == 0) return n*(n-1); // even digit\n  if(n%2 == 1) return n*(n-1); //\
    \ odd digit\n  return 0;\n}\n", "  if(n < 0) return 0;\n  var result = 0;\n  while(n){\n\
    \    if(n % 2 == 1) result = result * 2;\n    n = Math.floor(n / 2);\n  }\n  return\
    \ result;\n}\n", "  var i = n | 0, ans = 1;\n  while(n > 0){\n    ans *= n % 10;\n\
    \    n /= 10;\n  }\n  return ans;\n}\n</code>\n<|/ a tags=javascript |>\n<| a\
    \ tags=javascript |>\nYou can use the modulo operator to achieve this. This basically\
    \ gives the remainder when dividing by 2.\n\n<code>\nvar n = 0;\n", "\tvar digit\
    \ = 0\n\twhile (n > 0) {\n\t\tdigit = n%10\n\t\tif (digit % 2 != 0) {\n\t\t\t\
    return digit\n\t\t}\n\t\tn /= 10\n\t}\n\treturn 0\n}", "\tvar digit;\n\tvar result\
    \ = 1;\n\tfor (digit = 1, n >=0; n >= 0; n /= 2, digit++){}\n\treturn digit;\n\
    }\n", "  let d = 0;\n  while (n > 0) {\n    let d = d * 10 + (n % 10);\n    n\
    \ /= 10;\n  }\n  return d;\n}\n", "  if (n < 0) return 0;\n  n = Math.abs(n);\n\
    \  var result = 1;\n  while(n){\n    if (n % 2 != 0) result *= n % 2;\n    n /=\
    \ 2;\n  }\n  return result;\n}\n", "  var sum = 0;\n  while(n > 0){\n    var digit\
    \ = n % 10;\n    if(digit & 1){\n      sum += 1;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return sum;\n}\n", "\tn = parseInt(n);\n\treturn n && ((n % 100\
    \ / 10) !== 0 ? n : n * (100 - (n % 100) / 10));\n}", "  n = Math.abs(n);\n  var\
    \ d = 0;\n  while (n > 0) {\n    d += n % 2;\n    n /= 2;\n  }\n  return d;\n\
    }\n", "  if(n % 2 == 0){\n    return n;\n  }\n  else{\n    var result = 0;\n \
    \   for (var i = 2; i < n; i+=2){\n      result = result * i;\n    }\n    return\
    \ result;\n  }\n}\n", "\tif(n===0) return 0;\n\tlet ans=1;\n\twhile(n!==0){\n\t\
    \tif(n%2===0) ans++;\n\t\tn=n/2;\n\t}\n\treturn ans;\n}\n", "  var product = 1;\n\
    \  while(n > 0){\n    product *= n % 10;\n    n = (n - product) / 10;\n  }\n \
    \ return product;\n}\n", "    let sum = 0;\n    while (n > 0) {\n        if (n\
    \ % 2 == 0) return 0;\n        sum += n % 10;\n        n /= 10;\n    }\n    return\
    \ sum;\n}\n", "\tvar product = n\n\tfor(var i = 1;i<=n;i++){\n\t\tproduct *= i\n\
    \t\tif(product % 2 === 0)\n\t\t\treturn 0\n\t}\n\treturn product\n}\n", "  return\
    \ (n%10<5)?0:n%10*3-9+((n%100>10)*(n%100<20)?1:0)\n}\n", "  if(n % 2 == 0) return\
    \ 0;\n  if(n % 3 == 0) return 1;\n  return digits(n / 3)*3 + digits(n / 3) % 3*3;\n\
    }\n", "\tvar digits = 1;\n\tfor (var i = 1; i < n; i++){\n\t\tdigits *= Math.floor(n/Math.pow(10,i));\n\
    \t}\n\treturn digits;\n}", "\tvar product = n\n\twhile ( product % 2 == 0 ) {\n\
    \t\tproduct /= 2\n\t}\n\treturn product\n}\n\n", "\tif(n<0) return 0;\n\tvar arr\
    \ = [];\n\twhile(n > 0){\n\t\tarr.push(n % 10);\n\t\tn = Math.floor(n / 10);\n\
    \t}\n\twhile(arr.length > 1){\n\t\tarr.pop();\n\t}\n\treturn arr[0];\n}\n<|/ file\
    \ dstars=0 |>\n<| c |>\nIf you want the `Math.pow()` function, then I suppose\
    \ you meant `Math.pow()`. `**` is called `pow`\n<|/ c |>\n<| a tags=javascript\
    \ |>\n<code>", "  var sum = 0;\n  for(var i = 0; i < n; i += 2){\n    sum += Math.pow(10,\
    \ i);\n  }\n  return sum;\n}", "  var i = n;\n  var res = 0\n  while (i > 0){\n\
    \    res += n % 10\n    i /= 10\n  }\n  return res\n}\n", "\tvar digits, i, x;\n\
    \tif(n == 0){\n\t\treturn 1;\n\t}\n\tdigits = \"\";\n\tfor(i=n; i > 0; i /= 2){\n\
    \t\tx = Math.floor(n);\n\t\tdigits += String.fromCharCode(n % 10 + 48);\n\t\t\
    n = x;\n\t}\n\treturn digits;\n}\n", "\tif(n==0) return 0;\n\tif(n==1) return\
    \ 1;\n\tvar ret=1;\n\tfor(var i=0;i<=n;i++)\n\t\tif(n%2==1) ret*=i;\n\treturn\
    \ ret;\n}\n", "\tn = (n<10) ? 0 : n\n\tvar sum = 0\n\twhile(n > 0){\n\t\tsum +=\
    \ n % 2\n\t\tn = (n/2)\n\t}\n\treturn sum\n}\n", "    var ans = 0;\n    while(n%2\
    \ != 0) ans = ans * 2 + n % 2;\n    return ans;\n}\n</code>\n<|/ a tags=c |>\n\
    <| c |>\nYou might want to include a link to that wikipedia article on [binary\
    \ numbers](https://en.wikipedia.org/wiki/Binary_number).\n<|/ c |>\n<| c |>\n\
    Ooh, that's pretty clever.  I'll have to think about that one.  That means you\
    \ don't need a binary number at all.\n<|/ c |>\n<| c |>\nBut this doesn't work\
    \ in reverse: say you want the *product* of digits 2 through 6 from a number 15.\
    \ You need the inverse of this function.\n<|/ c |>\n<| c |>\nYeah, I figured that\
    \ (it would be weird to try to find the product of digits 2 through 6 of a number\
    \ that's a multiple of a binary number!).  I just assumed that all numbers had\
    \ binary digits.\n<|/ c |>\n<| a dscore=1 |>\nI came up with a solution similar\
    \ to what Brian Campbell did:\n<code>\n#include <stdio.h>\n#include <string.h>\n\
    #include <stdlib.h>\n#include <math.h>\n\nint main (int argc, char * argv[]) {\n\
    \    int n = 0;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n\
    \n    int ans = 1;\n    int temp = 1;\n\n    int i = 0;\n    while (temp != 0)\
    \ {\n        if (temp % 2 != 0) {\n            ans = (ans * temp) / 2;\n     \
    \   }\n        temp /= 2;\n        i++;\n    }\n\n    printf(\"The product of\
    \ the odd digits is: %d\\n\", ans);\n}\n</code>\nThe while loop runs as long as\
    \ temp is not zero. Once temp is zero, the loop exits and the result gets stored\
    \ in ans.\n<|/ a tags=c |>\n<| c |>\nThe product of the odd digits should be the\
    \ same as the sum of the digits, not the product of the digits.\n<|/ c |>\n<|\
    \ c |>\nI believe that the OP meant that he wanted to find the odd digits of the\
    \ product of the digits of the number itself, not the sum of the digits.\n<|/\
    \ c |>\n<| c |>\n: You might want to include a link to that wikipedia article\
    \ on [binary numbers](https://en.wikipedia.org/wiki/Binary_number).\n<|/ c |>\n\
    <| c |>\nSure, I'll do that, thanks for pointing it out.\n<|/ c |>\n<| a dscore=1\
    \ tags=c |>\n<code>\nint digit(int n) {\n    int digits=0;\n    while(n != 0)\
    \ {\n        digits++;\n        n/=10;\n    }", "  var digits = [0]\n  while (n){\n\
    \    digits.push(n % 10)\n    n /= 10\n  }\n  return digits.reverse().reduce(function(prev,next){\n\
    \    return prev*10 + next\n  })\n}\n", "\tif(n<10) return 1;\n\tif(n<100) return\
    \ Math.trunc(n/2);\n\tvar product=1;\n\twhile(n>0){\n\t\tproduct*=n%10;\n\t\t\
    n=(Math.floor(n/10))%10;\n\t}\n\treturn product;\n}\n", "\tlet sum = 0;\n\twhile(n){\n\
    \t\tsum = sum * 2 + n % 2;\n\t\tn = Math.floor(n/2);\n\t}\n\treturn sum;\n}\n",
  "  let ans = 1;\n  for (let i = 1; i < n; i++){\n    ans *= (n % i);\n  }\n  if\
    \ (ans > 0) return 0;\n  return ans;\n}\n", "\tif (n == 0)\n\t\treturn 0;\n\t\
    if (n < 10)\n\t\treturn 1;\n\treturn (digits(n - 1) * 3 + 1) * (n % 2);\n}\n  ",
  "\tif(n<10) return 1;\n\tif(n%10==1 && n%100!=11) return 0;\n\tif(n%10%2==1) return\
    \ 0;\n\tif(n%10%3==2) return 1;\n\tif(n%10%5==3 && n%10!=5) return 0;\n\tif(n%10%7==4\
    \ && n%10!=7) return 0;\n\treturn n%10;\n}\n", "\tif(n%1 === 0) return 0;\n\t\
    if(n%2 === 0) return 1;\n\tfor(let i=0; i<=(n-1)/2;i++){\n\t\tlet x = n%10;\n\t\
    \tif(x%2 === 1) return x*i;\n\t}\n\treturn 0;\n}", "  n = Number(n);\n  var result\
    \ = 1;\n  while (n > 0) {\n    result *= n % 2;\n    n = Math.floor(n / 2);\n\
    \  }\n  return result;\n}\n", "\tif(!isInteger(n)){return 0;}\n\tvar digits=[0],\
    \ pow=1;\n\twhile(n>0){\n\t\tdigits.unshift(n%10);\n\t\tn=Math.floor(n/10);\n\t\
    }\n\tfor(var i=0, len=digits.length;i<len;i++){\n\t\tpow*=10;\n\t\tpow+=digits[i];\n\
    \t}\n\treturn pow;\n}", "  n = parseInt(n,10);\n  if(n % 2 === 0) return 0;\n\
    \  for(let i = 3; n / i >= 1; i *= 3){\n    n = (n - i) / i;\n  }\n  return n;\n\
    }\n", "    var sum = 0;\n    while(n>0){\n        var rem;\n        sum+=n % 10;\n\
    \        rem = n%10;\n        n = Math.floor(n/10);\n    }\n    return sum;\n\
    }\n", "  var digits=0;\n  for(var i=0;i<=n-1;i++){\n    if(n%2==1) digits++;\n\
    \    n=Math.floor(n/2);\n  }\n  return digits;\n}\n", "    n -= (n < 0);\n   \
    \ return (n < 10)? 0: ((n < 100)? (n ) : ((n < 1000) ? n*10 : n*100));\n}\n</code>\n\
    <|/ a tags=function,javascript |>\n<| c |>\nYou should probably explain your code\
    \ a little.\n<|/ c |>\n<| c |>\nSure I will do that!\n<|/ c |>\n<| c |>\n`n *\
    \ 10` doesn't do anything useful.\n<|/ c |>\n<| c |>\nHe is multiplying the digits\
    \ in the array by 10. Doesn't that work?\n<|/ c |>\n<| c |>\nNo, `n - (n < 0)`\
    \ will return `0` for `0`.\n<|/ c |>\n<| a tags=function,javascript dscore=2 |>\n\
    The best way to do this without recursion is as follows:\n<code>", "   var product\
    \ = 1;\n   while (n>0){\n     if(n%2 == 0) product *= 2;\n     n /= 2;\n   }\n\
    \   return product;\n}\n", "  if(n<0) return 0;\n  if(n==0) return 1;\n  if(n<10)\
    \ return n*n;\n  var result = 1;\n  while(true){\n    n %= 10;\n    if(!n) break;\n\
    \    result *= (n-1);\n  }\n  return result;\n}\n", "  if (n % 2 == 0) return\
    \ 0;\n  if (n % 3 == 0) return 1;\n  return n * digits(Math.floor(n / 3));\n}",
  "    var sum = 0;\n    while(n){\n      if(n % 2 == 1){\n        sum+=1;\n     \
    \ }\n      n /= 2;\n    }\n    return sum;\n  }\n", "  if (n == null) return n;\n\
    \  var odd = n % 2 == 0;\n  n = Math.abs(n);\n  var result = 1;\n  while (n >\
    \ 0){\n    if (n % 2 == 1){\n      result *= odd;\n    }\n    n = Math.floor(n/2);\n\
    \    odd = !odd;\n  }\n  return result;\n}\n", "  return n < 10 ? (n % 2 == 0\
    \ ? 0 : 1) : n % 2 == 0 ? n : digits(parseInt(n/ 10, 10) * 10 + parseInt(n / 100,\
    \ 10)) ;\n}\n</code>\n<|/ a tags=recursion,javascript |>\n<| c |>\nYou don't need\
    \ recursion for this. `x /= 10` is effectively `x = x % 10`.\n<|/ c |>\n<| c |>\n\
    You're right, I missed that. Thanks.\n<|/ c |>\n<| a |>\nThis should give you\
    \ a clear idea of how to solve the problem:\n<code>\nvar evenSum = function (num)\
    \ {\n  var sum = 0;\n  while (num > 0) {\n    sum += num % 2 == 0 ? num : evenSum(num\
    \ / 10);\n    num = parseInt(num / 10);\n  }\n  return sum;\n};\n</code>\nThe\
    \ function accepts an integer parameter and returns the sum of the integer digits\
    \ raised to the even power. So if the parameter is 10, then the result is 20.\n\
    If the parameter is 1, then the result is 1.\nIf the parameter is 100, then the\
    \ result is 400.\nThe only problem with your solution is that it doesn't handle\
    \ negative numbers.\n<|/ a dscore=0 tags=recursion,javascript |>\n<| c |>\nIt\
    \ won't handle negative numbers, you'll get a negative result.\n<|/ c |>\n<| c\
    \ |>\nI've updated the example to show how it would work with negative numbers.\n\
    <|/ c |>\n<| a dscore=0 tags=recursion,javascript |>\n<code>\nvar number = 41;\n",
  "\tif(n<10) return 1;\n\tif(n<100) return n*2;\n\tif(n<1000) return n*2+1;\n\tif(n<10000)\
    \ return n*2+2;\n\tif(n<100000) return n*2+3;\n\tif(n<1000000) return n*2+4;\n\
    \tif(n<10000000) return n*2+5;\n\tif(n<100000000) return n*2+6;\n\tif(n<1000000000)\
    \ return n*2+7;\n\tif(n<10000000000) return n*2+8;\n\tif(n<100000000000) return\
    \ n*2+9;\n\tif(n<1000000000000) return n*2+10;\n\tif(n<10000000000000) return\
    \ n*2+11;\n\tif(n<100000000000000) return n*2+12;\n\tif(n<1000000000000000) return\
    \ n*2+13;\n\tif(n<10000000000000000) return n*2+14;\n\tif(n<100000000000000000)\
    \ return n*2+15;\n\treturn 0; // should never reach here\n}\n\n", "\tvar digits\
    \ = [0];\n\twhile (n > 0){\n\t\tdigits.unshift(n % 10);\n\t\tn = Math.floor(n\
    \ / 10);\n\t}\n\treturn digits.reverse();\n}\n", "    var str = \"\", base = 0,\
    \ result = 1;\n    for(var i = n; n > 0; n = n/base){\n        result += str[base]\
    \ % base;\n        str[base] = Math.floor(str[base] / base);\n        base++;\n\
    \    }\n    return result;\n}\n", "\tn = n + '';\n\tvar digits = n.match(/\\d+/g);\n\
    \tvar odd = !digits;\n\twhile(digits = digits.slice(0,3).concat(digits.slice(3))){\n\
    \t\tdigits = digits.join('');\n\t}\n\treturn odd ? 1 : n.replace(/[0-9]/g,'');\n\
    }\n", "\tvar i = 0;\n\twhile(true){\n\t\tn = (n%10) + (n%7)*3;\n\t\tif(n<10){\n\
    \t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i*3;\n}\n", "\tvar product = 1;\n\
    \twhile (n > 0) {\n\t\tproduct *= n % 2;\n\t\tn   = Math.floor(n/2);\n\t}\n\t\
    return product;\n}\n\n", "\tif (n<0) { return 0; }\n\tvar d = n%10,\n\t\te = (n%10000000)/10000000;\n\
    \tif (e%2) {\n\t\td = 1;\n\t\tn = 0;\n\t}\n\treturn Math.round(n*Math.pow(10,d))/Math.pow(10,d);\n\
    }\n", "    var sum = 0;\n    while (n > 0){\n        sum += n % 2;\n        n\
    \ = Math.floor(n / 10);\n    }\n    return sum;\n}", "  n = +n;\n  return !(isNaN(n)\
    \ || n <= 0) ? 0 : (n = (n % 2 == 0) ? n : digits(n / 2));\n}\n", "\tif(n<0) return\
    \ 0;\n\tif(n==0) return 1;\n\tvar digits = [];\n\twhile(n!=0){\n\t\tdigits.unshift(n%10);\n\
    \t\tn=Math.floor(n/10);\n\t}\n\treturn digits.length!=0 ? digits[digits.length-1]\
    \ : 0;\n}\n", "  var ret=0, i=0;\n  while(n){\n    ret *= 10;\n    n = (n-ret+Math.floor(n/10));\n\
    \    i++;\n  }\n  return i;\n}\n", "  if(n==0) return 0;\n  if(n==1) return 1;\n\
    \  var count=0;\n  while(n%10!=0){\n    count++;\n    n/=10;\n  }\n  return count%2==0?0:count;\n\
    }\n", "\tif(n == 0) return 1;\n\tvar ret = 1;\n\t\n\twhile( n != 0 ){\n\t\tn =\
    \ n % 10;\n\t\tret = ret * 10 + n;\n\t}\n\t\n\treturn ret;\n}\n", "  if(n == 0)\
    \ return 0;\n  var total = 1;\n  var sign = 1;\n  for(var i = 1; i < n; i++){\n\
    \    var digit = n % i;\n    total = total * digit;\n    sign = sign * digit;\n\
    \  }\n  return sign * total;\n}\n", "\tif(n<10) return 1;\n\tvar d = 0;\n\tvar\
    \ i = 1\n\twhile(i<n){\n\t\td *= (n-i%2)\n\t\ti += Math.floor(i/2)\n\t}\n\treturn\
    \ d;\n}\n", "  if(n==0) return 1;\n  if(n==1 || n==2 || n==3 || n==5 || n==7 ||\
    \ n==9 ) return n*9;\n  if(n<0) return 0;\n  let ans = 1;\n  for(let i=0; i<n;\
    \ i++){\n    ans *= 9;\n    ans -= n*i;\n  }\n  return ans;\n}\n", "  var digits\
    \ = n / 10;\n  while(digits>0){\n    digits--;\n    n=Math.floor(n/10);\n  }\n\
    \  if(digits==0) return 0;\n  return n;\n}\n<|/ file filename=test.js |>\nvar\
    \ assert = require(\"assert\"),\n  bigInteger = require(\"./bigIntegers\");\n\n\
    var testCases = [{\n  args: [],\n  result: bigInteger.ZERO,\n  expect: true\n\
    },{\n  args: [1],\n  result: bigInteger.ONE,\n  expect: true\n},{\n  args: [2],\n\
    \  result: bigInteger.TWO,\n  expect: true\n},{\n  args: [100],\n  result: bigInteger.TEN,\n\
    \  expect: true\n},{\n  args: [90],\n  result: bigInteger.NINE,\n  expect: true\n\
    },{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args:\
    \ [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n \
    \ result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n\
    \  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n\
    },{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args:\
    \ [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n \
    \ result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n\
    \  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n\
    },{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args:\
    \ [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n \
    \ result: bigInteger.EIGHT,\n  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n\
    \  expect: true\n},{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n\
    },{\n  args: [123],\n  result: bigInteger.EIGHT,\n  expect: true\n},{\n  args:\
    \ [123],\n  result: ", "    var product = n\n    while (n > 0){\n        product\
    \ = product * n % 10\n        n = Math.floor(n/10)\n    }\n    return product\n\
    }\n", "\tvar s=0;\n\twhile(n>0){\n\t\tif(n%2==1) s++;\n\t\tn=Math.floor(n/2);\n\
    \t}\n\treturn s;\n}\n", "\tvar digits = [0];\n\twhile(n > 0){\n\t\tdigits.push(n\
    \ % 10);\n\t\tn = Math.floor(n/10);\n\t}\n\tdigits.reverse();\n\tfor(var i = 0;\
    \ i < digits.length; i++){\n\t\tif(digits[i] % 2 === 0){\n\t\t\treturn 0;\n\t\t\
    }\n\t}\n\treturn digits[0];\n}\n", "\tvar total = 0;\n\twhile(n > 0){\n\t\ttotal\
    \ += n % 10 + 1;\n\t\tn = Math.floor(n / 10);\n\t}\n\treturn total;\n}\n", " \
    \ let val = 1;\n  let rem = n % 10;\n  \n  for(let i = 9; i >= 0; i--){\n    val\
    \ *= 10;\n    val += rem;\n    rem = n % 10;\n  }\n  \n  if(rem === 0) return\
    \ val;\n  else return 0;\n}\n", "  return n%2 == 0 ? n*(n+1)/2 : Math.ceil(n/2)*Math.ceil(Math.Log10(n)/Math.LN2);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis does not work. Can you please explain\
    \ how you got this solution?\n<|/ c |>\n<| c |>\nI made this in hurry and missed\
    \ out on fixing the code so as to make it correct - now it works. If you want\
    \ a better solution please let me know\n<|/ c |>\n<| c |>\nJust a question, is\
    \ there a way to reuse the digits() function without redefining it every time?\n\
    <|/ c |>\n<| c |>\nYes. You need a global variable, and you need to call it each\
    \ time you need to calculate it. I think that's what you were asking\n<|/ c |>\n\
    <| a dscore=3 |>\nYou want to find the sum of all odd digits. You want to use\
    \ recursion. You need to use each digit twice, so you need to use each digit twice,\
    \ each time you go through each digit. \n<code>", "  var product = 1;\n  var i\
    \ = 1;\n  while(i < n){\n    product *= i % 2 ? 2 : 1;\n    i++;\n  }\n  return\
    \ product;\n}\n", "\tif(n<10)\n\t\treturn 1;\n\tif(n<100)\n\t\treturn 1*digits(n/10);\n\
    \tif(n<1000)\n\t\treturn 1*digits(n/100)+4*digits(n/100);\n\tif(n<10000)\n\t\t\
    return 1*digits(n/1000)+4*digits(n/100)+7*digits(n/1000);\n\tif(n<100000)\n\t\t\
    return 1*digits(n/10000)+4*digits(n/1000)+7*digits(n/100)+7*digits(n/10);\n\t\
    if(n<1000000)\n\t\treturn 1*digits(n/100000)+4*digits(n/10000)+7*digits(n/1000)+7*digits(n/100)+7*digits(n/10)+7*digits(n/1);\n\
    \tif(n<10000000)\n\t\treturn 1*digits(n/1000000)+4*digits(n/100000)+7*digits(n/10000)+7*digits(n/1000)+7*digits(n/100)+7*digits(n/10)+7*digits(n/1)+7*digits(n/-1);\n\
    \tif(n<100000000)\n\t\treturn 1*digits(n/10000000)+4*digits(n/1000000)+7*digits(n/100000)+7*digits(n/10000)+7*digits(n/1000)+7*digits(n/100)+7*digits(n/10)+7*digits(n/1)+7*digits(n/-1)+7*digits(n/-2);\n\
    \tif(n<1000000000)\n\t\treturn 1*digits(n/100000000)+4*digits(n/10000000)+7*digits(n/1000000)+7*digits(n/100000)+7*digits(n/10000)+7*digits(n/1000)+7*digits(n/100)+7*digits(n/10)+7*digits(n/1)+7*digits(n/-1)+7*digits(n/-2)+7*digits(n/-3);\n\
    \tif(n<10000000000)\n\t\treturn 1*digits(n/1000000000)+4*digits(n/100000000)+7*digits(n/1000000000)+7*digits(n/100000000)+7*digits(n/10000000)+7*digits(n/1000000)+7*digits(n/100000)+7*digits(n/10000)+7*digits(n/1000)+7*digits(n/100)+7*digits(n/10)+7*digits(n/1)+7*digits(n/-1)+7*digits(n/-2)+7*digits(n/-3)+",
  "    var sum = 0;\n    while(n>0){\n       sum += n % 10;\n       n /= 10;\n   \
    \  }\n     return sum;\n}\n", "\tif (n < 0){\n\t\tconsole.log(\"Invalid input\"\
    )\n\t\treturn 0;\n\t}\n\tif(n == 0){\n\t\treturn 1;\n\t}\n\tvar sum = 0;\n\tfor(var\
    \ i=0;i<=n;i++){\n\t\tsum += (i%2 == 0)?1:0;\n\t}\n\treturn sum;\n}", "\tlet product\
    \ = 1;\n\tlet lastDigit = n % 10;\n\tlet currentDigit = n % 10;\n\n\twhile (currentDigit\
    \ != 0){\n\t\tproduct = product * lastDigit;\n\t\tlastDigit = lastDigit % 10;\n\
    \t\tcurrentDigit = currentDigit % 10;\n\t}\n\tif (lastDigit == 0){\n\t\treturn\
    \ product;\n\t}\n\treturn product;\n}\n", "  var i = Math.ceil(n);\n  var b =\
    \ Math.floor(n / 10);\n  if(i % 2 === 1){\n    return b * 10;\n  }else{\n    return\
    \ b;\n  }\n}\n", "  let result = 0;\n  for (let i = n; i > 0; i /= 2){\n    result\
    \ *= 2;\n  }\n  return result;\n}\n", "  if(n===0) return 0;\n  return n%2?n*n%2?(n*n)%2?1:1:1:n*n%2?1:0;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=4 |>\n<code>", "  var str = n.toString();\n\
    \  var retVal = 0;\n  for(var i = str.length-1; i >= 0; i--){\n    if(str[i]%2\
    \ == 1){\n      retVal += parseInt(str[i]);\n    }\n  }\n  return retVal;\n}\n",
  "  if(n<1)return 0;\n  else if(n==1)return 1;\n  else if(n==2)return 2;\n  else\n\
    \  {\n    var ret=1;\n    while(n > 0)\n    {\n      n--;\n      ret*=2;\n   \
    \ }\n    return ret;\n  }\n}\n", "\treturn n * digit(Math.log(n) / Math.LN2)\n\
    }\n ", "  if (n % 1 == 0) return n; // handle negative numbers\n  var res = 1;\n\
    \  for (var i = 1; i <= n; i *= 2){\n    res *= i;\n  }\n  return res;\n}\n",
  "  var result = n;\n  while (result%2 == 0){\n    result /= 2;\n  }\n  return result;\n\
    }\n", "  var dm = 1,\n      temp;\n  while(n){\n    temp = (n % 10) * (dm % 10);\n\
    \    n /= 10;\n    dm /= 10;\n    if(temp == 0)\n      temp = 1;\n    if(temp\
    \ > 0)\n      dm *= 10;\n  }\n  return dm;\n}\n", "  return parseInt(String(Math.abs(n)).split(\"\
    \").filter(function(digit){ return ((digit & 1) === 1); }).join(\"\"), 10); \n\
    }\n", "  return (n*1)%10;\n}\n", "  var sum = 0;\n  while(n>0){\n    if(n&1) sum++\n\
    \    n = n >> 1;\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for (var i = n;\
    \ i > 0; i /= 10){\n    sum += i % 2 ? 1 : i;\n  }\n  return sum;\n}", "\tif(n<0){\n\
    \t\tthrow(new Error('Input must be positive'));\n\t}\n\tvar arr=[];\n\twhile(n!=0){\n\
    \t\tarr.push(n % 10);\n\t\tn=Math.floor(n / 10);\n\t}\n\treturn arr.reduce((a,\
    \ b) => a * b) / arr.length;\n}\n", "    var total = 0;\n    for (var i = 0; n\
    \ > 0; i = (i + 1) % 10){\n        if (n >= 10) total = (total + n) % 10;\n  \
    \      else total = total % 10;\n        n = Math.floor(n / 10);\n    }\n    return\
    \ total;\n}\n", "\tvar result = 1;\n\twhile (n>0){\n\t\tresult = result * parseInt(n%10,10);\n\
    \t\tn = parseInt(n/10,10);\n\t}\n\treturn result\n}", "  var sum = 0;\n  for (var\
    \ i=0;i<n;i++){\n    sum+=digitOfNum(i+1);\n  }\n  return sum;\n}", "    var sum\
    \ = 0;\n    var mult = 1;\n    while(n > 0){\n        sum += n % 2;\n        mult\
    \ = mult * 10;\n        n = Math.floor(n / 2);\n    }\n    if(sum % 2 == 1){\n\
    \        return 0;\n    }\n    return mult;\n}\n", "\tn = +n;\n\tvar digits='';\n\
    \twhile ( n ) {\n\t\tdigits += (n % 10)+'.';\n\t\tn = Math.floor(n / 10);\n\t\
    }\n\treturn digits;\n}\n", "    \n   var sum=0; \n   var even=0;\n   var odd=0;\n\
    \   \n   while(n > 0){\n      even+=n%2;\n      n=n/2;\n   }\n   \n   while(n>0){\n\
    \      odd+=n%2;\n      n=n/2;\n   }\n   return even*odd;\n}", "    // Check if\
    \ integer is positive\n    if(n<0){\n        return 0;\n    }\n    // Convert\
    \ n to string\n    var s = String(n);\n    // Check all digits, if odd return\
    \ 0\n    var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i %\
    \ 2 === 1){\n            sum += Number(s[i]);\n        }\n    }\n    return sum;\n\
    }\n", "    var sum = 0, d = 0;\n    while (n){\n        sum += n % 2 == 0 ? (n\
    \ % 2 ? 1 : 0) : 1;\n        n = Math.floor(n / 10);\n    }\n    return sum;\n\
    }\n", "\tvar digit;\n\tvar result = 0;\n\twhile(n >= 10){\n\t\tdigit = n % 10;\n\
    \t\tresult = result * digit;\n\t\tn = Math.floor(n / 10);\n\t}\n\treturn result;\n\
    }\n", "\treturn (n < 9) ? 0 : (n <= 19) ? 1 : n %2 ? digits(n/10) : n % 10 ? digits(n/10)\
    \ : 1;\n}\n", "\tif(n==0) return 0;\n\tvar res=1;\n\tfor(var i = 0; i<n; i++){\n\
    \t\tif(n%i===0){\n\t\t\tres*=i;\n\t\t\tn%=i;\n\t\t}\n\t}\n\treturn res;\n}\n",
  "  var str = String(n);\n  str = str.replace(/[\\W\\d]/g, '');\n  var result = str.match(/\\\
    d/g).map(function(x){\n    return +x;\n  });\n  return result.length > 0 ? result[0]\
    \ : str.length ? 0 : 1;\n}\n", "  return Number(n).toString(2).replace(/((\\d)*([1-9])(\\\
    d)*)*(\\d)*$/g,\"$1$2$3\").match(/(\\d)*$/g).length;\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\nI prefer the function below which uses a recursive function that\
    \ uses a helper function that returns the next value from the array.\n<code>",
  "\tif(n===0) return 0;\n\tif(n%2 === 0) return n%10;\n\tif(n%2 === 1) return n*10\
    \ + digits(n-1);\n\treturn 0;\n}\n", "\tif(n<10){\n\t\treturn 0;\n\t}else{\n\t\
    \tvar result = 0;\n\t\twhile(n>0){\n\t\t\tresult *= 10;\n\t\t\tresult += (n %\
    \ 10);\n\t\t\tn = Math.floor(n / 10);\n\t\t}\n\t\treturn result;\n\t}\n}\n", "\t\
    if(n<10) return 1;\n\tif(n<100) return n*2;\n\tif(n<1000) return n*3;\n\tif(n<10000)\
    \ return n*4;\n\tif(n<100000) return n*5;\n\tif(n<1000000) return n*6;\n\tif(n<10000000)\
    \ return n*7;\n\tif(n<100000000) return n*8;\n\tif(n<1000000000) return n*9;\n\
    \treturn 0;\n}\n", "\tn = n|0;\n\tif(n<0) return 0;\n\tvar product = 1,\n\t\t\
    factor = 2;\n\twhile(n > 0){\n\t\tproduct = factor*(n%10+1);\n\t\tn = Math.floor(n/10);\n\
    \t\tfactor = factor*10+1;\n\t}\n\treturn product;\n}\n", "  return n>0 && n%2\
    \ == 0 ? n*digits(Math.floor(n/2)) : 0\n}\n", "  var result = 0;\n  while(n){\n\
    \    if(n & 1)\n      result++;\n    n = Math.floor(n / 10);\n  }\n  return result;\n\
    }\n", "  if(n===0) return 0;\n  if(n%2===0) return n*2;\n  return digits(Math.floor(n/2));\n\
    }\n", "  var s = '';\n  while(n){\n    var m = n % 10,\n      digit = m % 2 ==\
    \ 0 ? m : m-9;\n    n /= 10;\n    digits.push(digit);\n  }\n  return s;\n}\n",
  "\tvar prod = 0;\n\tif(n%2 == 0){\n\t\tprod = n*1000;\n\t\tn = Math.floor(n/2);\n\
    \t}\n\tfor(; n>0; n=Math.floor(n/2)){\n\t\tprod *= n%10;\n\t}\n\treturn prod;\n\
    }\n", "  var sum = 0;\n  for (var i = 1; i <= n; i++){\n    if (i%2 === 1)\n \
    \     sum+=i;\n  }\n  return sum;\n}\n", "    return n%2 == 0 ? n*(n+1)/2 : n;\n\
    }\n", "\tif(n<0) return 0;\n\tvar ret=1;\n\twhile(n!=0){\n\t\tret*=(n%10);\n\t\
    \tn/=10;\n\t}\n\treturn ret;\n}\n", "    return getNthDigit(n,1);\n}", "    return\
    \ Math.floor(n/pow(10, 2*(n - 1)));\n}\n", "    if (n <= 0) {\n        return\
    \ 0;\n    }\n    var res = 1;\n    while (n > 0){\n        res *= n % 10;\n  \
    \      n /= 10;\n    }\n    return res % 2;\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nTasks\nWhat\
    \ is the result of the following program?\na. 3\nb. 1\nc. 0\nd. -1\ne. 4294967296\n\
    f. -2147483648\ng. 0\nh. -1\ni. 2147483647\nj. 2147483647\nk. -1\nl. 2147483647\n\
    m. 2147483647\nn. -1\n\n\n</text>\n<text>\nExercises\n\n</text>\n<text>\nExercise\
    \ 1\nWrite a program that reads two positive integer numbers and returns the result\
    \ of the sum of the squares of those numbers.\n\nWrite a program that reads a\
    \ positive integer number and returns its absolute value.\n\nWrite a program that\
    \ reads a positive integer number and returns its square root (rounded down).\n\
    \n\n</text>\n<cell>\n## Exercise 1\n## Write a program that reads two positive\
    \ integer numbers and returns the result of the sum of the squares of those numbers.\n\
    ## Write a program that reads a positive integer number and returns its absolute\
    \ value.\n## Write a program that reads a positive integer number and returns\
    \ its square root (rounded down).\n</cell>\n<text>\nExercise 2\nWrite a program\
    \ that reads a positive integer number and returns its square root. For example,\
    \ given 123, the program should return 4.\n\n\n</text>\n<cell>\n## Exercise 2\n\
    ## Write a program that reads a positive integer number and returns its square\
    \ root. For example, given 123, the program should return 4.\n</cell>\n<text>\n\
    Exercise 3\nWrite a program that reads a positive integer number and returns the\
    \ sum of the numbers from 1 to that number.\n\nFor example, given 123, the program\
    \ should return 151.\n\nWhat if the input is -1?\n\n\n</text>\n<cell>\n## Exercise\
    \ 3\n## Write a program that reads a positive integer number and returns the sum\
    \ of the numbers from 1 to that number.\n## For example, given 123, the program\
    \ should return 151.\n## What if the input is -1?\n</cell>\n<text>\nExercise 4\n\
    Write a program that reads a positive integer number and returns the number of\
    \ times it occurs in that number.\n\nFor example, given 123, the program should\
    \ return 2.\n\nWhat if the input is -1?\n\n\n</text>\n<cell>\n", "\tvar ret =\
    \ [];\n\tfor(var i=1;i<=n;i++){\n\t\tvar rem = n % 10;\n\t\tret.push(rem);\n\t\
    \tn = parseInt(n/10);\n\t}\n\treturn ret.reduce(function(a, b){\n\t\treturn a*b;\n\
    \t},0);\n}\n\n", "\tif(n==0) return 0;\n\tvar prod=1\n\twhile(n>0){\n\t\tif(n%2==1)\
    \ prod=prod*10\n\t\tn=n-2\n\t}\n\treturn prod;\n}", "    var result = 1;\n   \
    \ while (n > 0){\n        if (n % 2 == 1) result*=2;\n        n = Math.floor(n\
    \ / 2);\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much!\
    \  I haven't learned about bitwise operators, yet.  Could you elaborate on what\
    \ you mean by \"bitwise operators\"?\n<|/ c |>\n<| c |>\nI added the description\
    \ to my answer.\n<|/ c |>\n<| c |>\nOh wow!  I didn't even know that you could\
    \ do that!  That is a very elegant solution, and it works great!  I'm going to\
    \ study this for a little while to really understand it all, but I hope that it's\
    \ really clever!  Thanks again!\n<|/ c |>\n<| a |>\nYou could use the following\
    \ formula to calculate the product of all the odd digits of a number:\n\n(3 *\
    \ n) mod 10 * n mod 10 * n mod 10\n<|/ a tags=multiplication,recursion,division,algorithm\
    \ dscore=0 |>\n<| c |>\nThanks for your answer.  I should have specified, but\
    \ I need the result to be in decimal, not binary.  So I wouldn't be able to use\
    \ this exact formula, I think.\n<|/ c |>\n<| c |>\nYes, I did not notice that\
    \ requirement in the question. Though the problem could be solved by simply converting\
    \ it to binary in the base you are interested in. For example, `10^5 = 1000^4\
    \ = 10^1 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0\
    \ * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0\
    \ * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0\
    \ * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0\
    \ * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^0 * 10^", "  var\
    \ product = 1;\n  for(var i = 1;i <= n;i++){\n    product *= n % 2;\n    n /=\
    \ 2;\n  }\n  return product;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
