name: HumanEval_43_pairs_sum_to_zero
language: js
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
  // False\nfunction pairs_sum_to_zero(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
  \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["\tfor(var i=0 ; i<l ; i++)\n\t{\n\t\tfor(var j=i+1 ; j<l ; j++)\n\t\
    \t{\n\t\t\tif((l[i] + l[j]) == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "  return l.every(function(a){\n    var total = 0;\n    for(var\
    \ i=0; i<l.length; i++){\n      total += l[i];\n      if(total != 0){\n      \
    \  return false;\n      }\n    }\n    return true;\n  });\n}\n", "  l = l.map(function(i){\n\
    \    return i.toFixed();\n  });\n  l.sort(function(a, b){\n    return parseFloat(a)\
    \ - parseFloat(b);\n  });\n  for (var i = 0; i < l.length; i++){\n    var sum\
    \ = l[i] + l[i + 1];\n    if (sum != 0){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "\tfor (var i = 0; i < l.length-1; i++){\n\t\tif (l[i] == 0 ||\
    \ l[i+1] == 0){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "    if(l.length<=1)\n\
    \        return false;\n\n    var l = l.slice();\n    var llen = l.length;\n \
    \   var hi = l[0];\n    var hs = l[0];\n    var hn = l[1];\n    for(var i=1;i<llen;i++){\n\
    \        var a = l[i];\n        var b = l[i-1];\n        var s = a+b;\n      \
    \  if(b>0){\n            hs = s;\n            hi=hn;\n            hn=s;\n    \
    \    }\n        hs = hn;\n        hn = s;\n    }\n    return (hi===hn);\n}", " \
    \   // your code here\n    var arr = []\n    arr.push(l[0])\n    arr.push(l[1])\n\
    \    for(i=2; i < l.length; i++){\n        arr.push(l[i])\n    }\n    var a =\
    \ []\n    var b = []\n    for(i = 0; i < arr.length; i++){\n        a.push(arr[i])\n\
    \        b.push(arr[i+1])\n    }\n    var i = 0\n    var j = 0\n    for(; i <\
    \ a.length; i++){\n        if(a[i] != 0 && b[j] != 0){\n            return false\n\
    \        }\n        else if(i === a.length -1 && b[j] != 0){\n            return\
    \ true\n        }\n        j++\n    }\n}", "    var pairs = _.zip(l, _.map(l,\
    \ function(num){ return num * num; }));\n    var sums = _.reduce(pairs, function(memo,\
    \ num){ return memo + num; }, 0);\n    return sums == 0;\n}\n", "  for (var i\
    \ = 0; i < l.length; i++){\n    for (var j = i + 1; j < l.length; j++){\n    \
    \  if (l[i] + l[j] === 0)\n        return false;\n    }\n  }\n  return true;\n\
    }\n", "  let zeroes = new Set();\n  let notzeroes = new Set();\n  for (let i =\
    \ 0; i < l.length; i++){\n    if (l[i] === 0){\n      zeroes.add(i);\n    } else\
    \ {\n      notzeroes.add(i);\n    }\n  }\n  if (notzeroes.size > 0){\n    return\
    \ false;\n  }\n  for (let i = 0; i < l.length; i++){\n    if (zeroes.has(i)){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "   var pairs_to_check_to_zero\
    \ = [];\n   for (var i=0; i<l.length; i++){\n       for (var j=0; j<l.length;\
    \ j++){\n           if (i != j){\n               var n1 = l[i];\n            \
    \   var n2 = l[j];\n               if (n1 > 0 && n2 > 0 && n1 + n2 == 0){\n  \
    \                 pairs_to_check_to_zero.push(n1, n2);\n               }\n   \
    \        }\n       }\n   }\n   return pairs_to_check_to_zero.length == 2;\n}\n",
  "  var pairs = {}\n  l.forEach(function(i) {\n    var j = i.slice(1)\n    var key\
    \ = j.reduce(function(a,b){\n      return a+b\n    })\n    var v = pairs[key]\n\
    \    if (v){\n      v.push(j)\n    } else {\n      pairs[key] = [j]\n    }\n \
    \ })\n  for (var key in pairs){\n    if (pairs[key].length>1){\n      return false\n\
    \    }\n  }\n  return true\n}\n", "    for (let i=0; i<l.length-1; i++){\n   \
    \     if (l[i]+l[i+1] === 0) return false;\n    }\n    return true;\n}\n", " \
    \   l = l.slice(0);\n    var n = l.length;\n    var i, j, k;\n    for(i=1;i<n;i++)\n\
    \        for(j=i+1;j<n;j++)\n            if((j-i)*(i+j) === 0){\n            \
    \    for(k=i;k<j;k++)\n                    if(l[k]) k = k-1;\n               \
    \ if(i === j){\n                    return l[i] ? false : true;\n            \
    \    }\n                return false;\n            }\n    return true;\n}\n</code>\n\
    And here is a solution without using additional data structures:\n<code>\nvar\
    \ arr = [1, 3, 5, 0];\n\nvar pairs_sum_to_zero = arr.reduce(function(acc, cur,\
    \ i, arr) {\n    var isFirstPair = i === 0 || arr[i-1] === 0;\n    acc.push(arr[i]\
    \ ? isFirstPair ? false : arr[i-1] : isFirstPair ? true : false);\n    return\
    \ acc;\n}, []);\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThanks,\
    \ I actually had a similar idea but wasn't sure where to start. I'll definitely\
    \ be trying this out when I get home.\n<|/ c |>\n<| c |>\nIf you can make it run\
    \ faster with some sort of memoization, please let me know. Thanks.\n<|/ c |>\n\
    <| c |>\nI added a second solution without using additional data structures.\n\
    <|/ c |>\n<| c |>\nThank you for the help, it's really appreciated. I've looked\
    \ into it and it seems that this solution is indeed the fastest for large arrays.\
    \ The only thing I'd add would be that since we're iterating over the array twice,\
    \ we can make use of Array.prototype.reduce(). Also, I came up with a solution\
    \ that seems to run faster even though it uses the same concept as the one you\
    \ provided in the first example. Thanks again!\n<|/ c |>\n<| c |>\nJust thought\
    \ I would mention my final solution, which is similar to the one provided by andyg0l.\
    \ Thanks again for your help. I really appreciate it! :)\n<|/ c |>\n<| a |>\n\
    <code>", "  l=l.slice();\n  for(var i=0;i<l.length;i++){\n    for(var j=i+1;j<l.length;j++){\n\
    \      if(l[i]>0){\n        var k=l[i] + l[j];\n        if(k === 0)\n        \
    \  return true;\n        if(k !== l[j])\n          return false;\n      }\n  \
    \  }\n  }\n  return false;\n}", "    let seen = new Set();\n    let pairs = l.reduce((acc,i)\
    \ => {\n        if(seen.has(i)){\n            return acc;\n        }\n       \
    \ seen.add(i, 1);\n        let prev = acc.length ? acc[acc.length-1] : 0;\n  \
    \      acc.push(prev+i);\n        return acc;\n    }, []);\n    return pairs.some(pair\
    \ => pair === 0);\n}", "  var pairs = [];\n  var n = l.length;\n  for(var i =\
    \ n - 1; i > 0; i--){\n    var k = i;\n    while(k <= n - 1 && l[k] === 0){\n\
    \      k++;\n    }\n    var j;\n    for(j = k; j <= n - 1 && l[j] === 0 ; j++){\n\
    \      j++;\n    }\n    pairs.push([i, j, l[k], l[j]]);\n  }\n  if(pairs.length\
    \ > 0){\n    for(var i = 0; i < pairs.length; i++){\n      if(pairs[i+1][2] <\
    \ pairs[i][2]){\n        return true;\n      }\n    }\n    return false;\n  }\n\
    \  return true;\n}\n", "\tlet res = [];\n\tlet last_sum;\n\tfor (let i = 0; i\
    \ < l.length; i++){\n\t\tlet current_sum = l[i];\n\t\tlast_sum = res[res.length\
    \ - 1] || 0;\n\t\tres.push([current_sum, last_sum]);\n\t}\n\tfor (let i = 0; i\
    \ < res.length; i++){\n\t\tlet [a, b] = res[i];\n\t\tif (b - a !== 0){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar j;\n\tvar sum = 0;\n\t\
    for (j = 0; j < l.length - 1; j++){\n\t\tsum += l[j];\n\t\tif (sum == 0)\n\t\t\
    \tbreak;\n\t}\n\treturn (j < l.length - 1 && sum == 0);\n}\n", "\tfor(var i =\
    \ 0; i<l.length; i++){\n\t\tfor(var j = i+1; j<l.length; j++){\n\t\t\tif(l[i]\
    \ + l[j] == 0)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "   \
    \ if(l.length < 2){\n        return false;\n    }\n\n    l.sort(function(a,b){\n\
    \        return a - b;\n    });\n\n    var firsttwo = l.slice(0, 2);\n    var\
    \ zeroes = firsttwo.reduce(function(acc, cur, i){\n        return (acc && cur\
    \ === 0);\n    }, true);\n\n    return zeroes === true;\n}\n", "\tfor(var i in\
    \ l){\n\t\tfor(var j in l){\n\t\t\tif(i != j && l[j] + l[i] == 0){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "    for (var i=0; i< l.length;\
    \ i++){\n        for (var j=0; j< l.length; j++){\n            if (i != j && l[i]\
    \ + l[j] == 0){\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}", "  // write your code here\n  for(var i = 0;i<l.length;i++){\n\
    \    for(var j = 0;j<l.length;j++){\n      if(l[i] + l[j] == 0){\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  var pairs = pairs(l),\n\
    \      l = pairs.length,\n      i = -1,\n      sum = 0;\n  while (++i < l) {\n\
    \    if (pairs[i].length > 1) sum += pairs[i][0];\n    if (pairs[i].length < 2)\
    \ return false;\n  }\n  return sum == 0;\n}", "    for(var i = 0; i < l.length-1;\
    \ i++){\n        if(l[i] == l[i+1]){\n            return false;\n        }\n \
    \   }\n    return true;\n}\n", "    for(var i = 0; i < l.length; i++){\n     \
    \   for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "  var i, j, temp = 0;\n  for(i = 0; i < l.length; i++){\n    for(j = i+1;\
    \ j < l.length; j++){\n      temp += l[i] + l[j];\n    }\n    if(temp === 0){\n\
    \      return true;\n    }\n    temp = 0;\n  }\n  return false;\n}\n", "\tlet\
    \ n = l.length;\n\tlet pairs = [];\n\tfor (let i = 0; i < n; i++){\n\t\tlet k\
    \ = i+1;\n\t\tfor (let j = i+1; j < n; j++){\n\t\t\tif (l[i] + l[j] === 0){\n\t\
    \t\t\tpairs.push([i,j]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlet areAllEqual\
    \ = pairs.every((pair) => pair[0]===pair[1]);\n\treturn areAllEqual;\n}\n", " \
    \   for(var i = 1; i < l.length; i++){\n        if(l[i-1]+l[i] != 0){\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "\tfor(let i =0;\
    \ i < l.length; i++){\n\t\tfor(let j = i + 1; j < l.length; j++){\n\t\t\tif(l[i]\
    \ + l[j] == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    var sum = 0;\n    for(var i in l)\n        sum += l[i];\n    return\
    \ sum === 0;\n}\n", "  l=l.sort();\n  var i=l.length;\n  while(i){\n    var last_element=l[i-1];\n\
    \    for(j=i-1;j>=0;j--){\n      if(l[j]+last_element==0){\n        return false;\n\
    \      }\n    }\n    i=i-1;\n  }\n  return true;\n}\n", "    var n = l.length\n\
    \    var sum_of_pairs = 0\n    for (var i = 0; i < n; i++) {\n        var pair\
    \ = l[i]\n        if (pair < 0) break\n        sum_of_pairs += pair\n    }\n \
    \   return sum_of_pairs === 0\n}\n", "  let n = l.length\n  l.sort()\n  for (let\
    \ i = 0; i < n; i++){\n    let j = i + n - 1\n    while (j > 0){\n      if (l[i]\
    \ + l[j] === 0){\n        return false\n      }\n      j--\n    }\n  }\n  return\
    \ true\n}\n", "\tvar pairs = l.slice();\n\tpairs.sort(function(a, b){return a>b;});\n\
    \tvar last_one = pairs.pop();\n\tfor(var i=0; i<pairs.length; i++){\n\t\tvar diff\
    \ = pairs[i] - last_one;\n\t\tpairs[i] = diff;\n\t\tlast_one = pairs[i];\n\t}\n\
    \treturn (pairs.length == 1) ? true : false;\n}\n\n", "  var pairs = _.pairs(l);\n\
    \  for(var i = 0; i < pairs.length; i++){\n    if(pairs[i][1] != 0) return false;\n\
    \  }\n  return true;\n}\n", "  if(l.length<2) return false;\n  var s = 0, n =\
    \ l.length, x;\n  for(var i = 0; i < n; i++){\n    x = l[i];\n    s += x;\n  \
    \  if(s===0) return false;\n  }\n  return true;\n}\n", "  if(l.length < 2)\n \
    \   return true;\n  l.sort((a,b) => a - b);\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if(l[i] - l[i-1] != 0)\n      return false;\n  }\n  return true;\n}\n",
  "  if(l.length==0)\n    return false;\n  if(l.length==1)\n    return l[0]==0;\n\
    \  var i,j,sum=0;\n  var zeros=[];\n  for(i=0;i<l.length;i++){\n    sum=sum+l[i];\n\
    \    for(j=0;j<i;j++){\n      if(sum==0)\n        zeros.push(j);\n    }\n  }\n\
    \  return zeros.length==0;\n}", "  let zero = 0;\n  let one = 1;\n  let counter\
    \ = 0;\n  let counter1 = 0;\n  let arr = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] === 0) {\n      zero = l[i];\n      counter++;\n    } else\
    \ {\n      one = l[i];\n      counter1++;\n    }\n  }\n  for (let i = counter;\
    \ i < (counter + counter1); i++) {\n    arr.push(zero);\n  }\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (l[i] === 0) {\n      zero = l[i];\n      counter++;\n\
    \    } else {\n      one = l[i];\n      counter1++;\n    }\n  }\n  for (let i\
    \ = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      zero = l[i];\n     \
    \ counter++;\n    } else {\n      one = l[i];\n      counter1++;\n    }\n  }\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      zero = l[i];\n\
    \      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n    }\n\
    \  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      zero\
    \ = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l[i];\n      counter++;\n    } else {\n      one = l[i];\n      counter1++;\n\
    \    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n \
    \     zero = l", "  return l.length == l.filter(function(x){return x!=0}).length\
    \ && l.filter(function(x){return x!=0}).length == 0;\n}\n", "    var pairs = [];\
    \ //a list of the elements paired with their sum\n    for(var i =0; i < l.length;\
    \ i++){\n        pairs.push( (l[i], l[i].toString().replace(/-/g, \"\")) );\n\
    \    }\n    pairs.sort(function(a, b){\n      return a[1] - b[1];\n    });\n \
    \   for(var i = 0; i < pairs.length; i++){\n        if (pairs[i][1] == pairs[i+1][1]\
    \ && pairs[i][0] != pairs[i+1][0]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "    for (var i = 0; i < l.length-1; i++) {\n   \
    \     for (var j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] ==\
    \ 0)\n                return false;\n        }\n    }\n    return true;\n}\n",
  "    for(var i = l.length-1;i >=0;i--){\n        if(l[i] + l[i-1] === 0){\n    \
    \        return true;\n        }\n    }\n    return false;\n}", "  var i,\n  \
    \    j,\n      n = l.length;\n  for(i = 0; i < n; i++){\n    for(j = i+1; j <\
    \ n; j++){\n      if(l[i] + l[j] === 0){\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n", "    // write your code in javascript (Node.js 8.9.4)\n\
    \    var ls = l.slice();\n    ls.sort(function(a, b){return a - b});\n    var\
    \ sum = 0;\n    for(var i = 0; i < ls.length; i++){\n        sum += ls[i];\n \
    \       if(sum == 0)\n            return false;\n    }\n    return true;\n}\n",
  "    var pairs = {};\n    for (i = 0; i < l.length; i++) {\n        if (pairs[l[i]]\
    \ === undefined) {\n            pairs[l[i]] = 1;\n        } else {\n         \
    \   pairs[l[i]]++;\n        }\n    }\n    for (i in pairs) {\n        if (pairs.hasOwnProperty(i))\
    \ {\n            if (pairs[i] !== 2) {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}\n", "\tvar i=0,\n\t\tlen=l.length;\n\
    \tfor (;i<len;i++){\n\t\tfor (var j=i+1;j<len;j++){\n\t\t\tif (l[i]+l[j] === 0){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n", "\tfor(let\
    \ i = 0; i < l.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < l.length;\
    \ j++){\n\t\t\tif(i != j && l[j] == l[i]) count++;\n\t\t}\n\t\tif(count == 2)\
    \ return true;\n\t}\n\treturn false;\n}\n", "    var i = 0;\n    var j = 0;\n\
    \    while (i < l.length && j < l.length){\n        if (l[i] + l[j] === 0){\n\
    \            return true;\n        }\n        else if (l[j] + l[i] === 0){\n \
    \           return false;\n        }\n        i++;\n        j++;\n    }\n    return\
    \ false;\n}\n", "    if(!l){\n        return false\n    }\n    var n = l.length\n\
    \    var sum = 0\n    for(var i=0; i<n; i++){\n        sum += l[i]\n        if(sum\
    \ === 0){\n            return false\n        }\n    }\n    return true\n}\n\n",
  "    return l.filter(function(v, i) { return v != l[i]; }).length != 2;\n}\n", " \
    \   var total = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] !=\
    \ 0){\n            for(var j = 0; j < l.length; j++){\n                if(i !=\
    \ j && l[i] + l[j] == 0){\n                    total++;\n                    break;\n\
    \                }\n            }\n            if(total == 2){\n             \
    \   return true;\n            }\n            total = 0;\n        }\n    }\n  \
    \  return false;\n}\n", "  for(var i = 0; i < l.length; i++){\n    var k = i;\n\
    \    for(j = i+1; j < l.length; j++){\n      if(l[i] + l[j] == 0){\n        k\
    \ = j;\n      }\n    }\n    if(k == i){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "  var pairs = pairs_of_nums(l);\n  for(var i=0; i < pairs.length;\
    \ i++)\n  {\n    var pair_sum = pairs[i][0] + pairs[i][1];\n    if (pair_sum >\
    \ 0)\n      return false;\n  }\n  return true;\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum\
    \ == 0;\n}\n", "  return l.filter((e, i) => l.indexOf(e) == i).length == 2;\n\
    }\n", "    var i, j, pair, sum=0;\n    for(i = 0; i < l.length; i++){\n      \
    \  sum+=l[i];\n        for(j = 0; j < l.length; j++){\n            if(i != j &&\
    \ l[i]+l[j] === sum){\n                pair=[l[i],l[j]];\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "    let res\
    \ = [];\n    for(let i = 0; i < l.length; i++){\n        if(res.indexOf(l[i])\
    \ == -1){\n            res.push(l[i])\n        }\n    }\n    for(let i = 0; i\
    \ < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n        \
    \    if(l[i] + l[j] == 0){\n                return true;\n            }\n    \
    \    }\n    }\n    return false;\n}\n", "  var zeros = [];\n  for(var i = 0; i\
    \ < l.length; i++){\n    var n = Math.abs(l[i]);\n    while(zeros.indexOf(n) >=\
    \ 0){\n      zeros.push(n);\n    }\n  }\n  if(zeros.length > 0){\n    var a =\
    \ zeros.slice().sort(function(a, b){return a - b});\n    var b = zeros.slice().sort(function(a,\
    \ b){return b - a});\n    return (a[0] == b[0] && a[1] == b[1]) || (a[0] > b[0]\
    \ && a[1] < b[1]);\n  }\n  return false;\n}\n", "\tfor (var i = 0; i < l.length;\
    \ i++){\n\t\tfor (var j = i + 1; j < l.length; j++){\n\t\t\tif (l[i] + l[j] ==\
    \ 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "   \
    \ var i,\n        j,\n        pairs = [];\n        for(i = 0; i < l.length; i++){\n\
    \            for(j = 0; j < l.length; j++){\n                if(i + j === 0 &&\
    \ l[i] + l[j] === 0){\n                    pairs.push([i,j]);\n              \
    \      break;\n                }\n            }\n        }\n        pairs.sort();\n\
    \        if(pairs.length % 2 === 0){\n            return false;\n        }\n \
    \       for(i = 0; i < pairs.length; i++){\n            if((pairs[i+1] - pairs[i])\
    \ > 1){\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n};", "  let set = new Set();\n  for(let i=0;i<l.length;i++){\n\
    \    for(let j=i+1;j<l.length;j++){\n      let k = l[i] + l[j];\n      if(k !=\
    \ 0){\n        if(set.has(k))\n          return false\n        else{\n       \
    \   set.add(k);\n        }\n      }\n    }\n  }\n  return true;\n}\n", "    if\
    \ (l.length == 0) return false;\n    // the map will pair adjacent elements in\
    \ the list\n    var map = {};\n    var n = l.length;\n    for (var i = 0; i <\
    \ n; i++){\n        var x = l[i];\n        map[x] = (map[x] || 0) + 1;\n    }\n\
    \    // loop through all the pairs in the map\n    for (var key in map){\n   \
    \     // if there are two elements in the map that sum to zero,\n        // then\
    \ there is a pair of elements that sum to zero.\n        if (map[key] == 1){\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "\tvar sum=0;\n\
    \tfor(var i=0; i<l.length; i++){\n\t\tsum = sum + l[i];\n\t}\n\treturn (sum ==\
    \ 0);\n}", "    for (var i = 0; i < l.length; i++)\n        for(var j = i + 1;\
    \ j < l.length; j++)\n            if(l[i] + l[j] == 0)\n                return\
    \ true;\n    return false;\n}\n", "    var i;\n    for(i=0;i<l.length-1;i++){\n\
    \        if(Math.abs(l[i]-l[i+1]) > 1){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    return l.filter(function(elem, pos) {\n \
    \       return l.indexOf(elem) == pos;\n    })\n    .every(function(elem, pos)\
    \ {\n        return elem == 0;\n    });\n};\n", "    var pairs = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        pairs.push([l[i], -l[i]]);\n    }\n    return\
    \ pairs.every(function(pair){\n        return (pair[0] === pair[1]);\n    });\n\
    }\n", "  let arr=l.map(el=>el);\n  let n=arr.length;\n  for(let i=0; i<n; i++){\n\
    \    for(let j=i+1; j<n; j++){\n      if(arr[i]+arr[j]===0){\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "    var sum = 0;\n    for (var i=0;\
    \ i<l.length; i++){\n        sum += l[i];\n        if (sum == 0) return false;\n\
    \    }\n    return true;\n}\n", "\tlet sum = 0;\n\tlet pairs = [];\n\tlet last_pair\
    \ = 0;\n\tfor(let i=0; i<l.length; i++){\n\t\tsum += l[i];\n\t\tpairs.push(last_pair,\
    \ sum);\n\t\tlast_pair = sum;\n\t}\n\tlet hasPairs = pairs.length >= 2;\n\tfor(let\
    \ i=0; i< pairs.length; i++){\n\t\tif(pairs[i+1] - pairs[i]!=0){\n\t\t\thasPairs\
    \ = false;\n\t\t}\n\t}\n\treturn hasPairs;\n}\n", "\tfor(var j=0; j<l.length;\
    \ j++){\n\t\tif((l[j]+l[j+1]) == 0){\n\t\t\tl[j] = 0;\n\t\t\tl[j+1] = 0;\n\t\t\
    \treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "  let l1 = l.slice();\n  l1.sort();\n\
    \  for(var i=0; i<l1[0]; i++){\n    for(var j=0; j<l1[i]; j++){\n      if(l1[j]\
    \ == l1[j+1]) return false;\n    }\n  }\n  return true;\n}\n", "    var pairs\
    \ = {}\n    var last_pair = null;\n    for(var i = 0; i<l.length; i++){\n    \
    \    var pair = l[i];\n        var next_pair = i+1 < l.length ? l[i+1] : null;\n\
    \        if(pair + next_pair === 0){\n            var sum = pair;\n          \
    \  for(var j=1; j<i; j++){\n                sum += l[j];\n            }\n    \
    \        if(last_pair != null && last_pair[0] == sum){\n                return\
    \ false;\n            }\n            last_pair = [sum, pair];\n            pairs[sum]\
    \ = 1;\n        } else {\n            pairs[pair] = pairs[pair] + 1 || 1;\n  \
    \      }\n    }\n    return Object.keys(pairs).length === 0;\n}", "  var seen\
    \ = {};\n  return l.filter(function(x){\n    var key = x;\n    var val = seen[key];\n\
    \    seen[key] = true;\n    return (val == undefined ? false : val) && (x != -Infinity);\n\
    \  }).length == 2;\n}", "  l.sort()\n  for (var i = 0; i < l.length; i++){\n \
    \   for (var j = i + 1; j < l.length; j++){\n      if (l[i] + l[j] === 0){\n \
    \       if (i != j)\n          return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "    return l.length==1 ? true : l.length>2 ? false : pairs_sum_to_zero(l.slice(0,-1))+l.slice(-1).length===2\n\
    }\n", "    return l.filter(x => l.indexOf(x) == l.lastIndexOf(x)).length == 0;\n\
    }\n", "    for(var i=0; i<l.length-1; i++){\n        for(var j=i+1; j<l.length;\
    \ j++){\n            if (l[i] + l[j] === 0){\n                return true;\n \
    \           }\n        }\n    }\n    return false;\n}\n", "    for (var i = 0;\
    \ i < l.length; i++){\n        for (var j = i+1; j < l.length; j++){\n       \
    \     if (l[i] + l[j] === 0){\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}\n", "\tlet set = new Set();\n\tlet pairs\
    \ = [];\n\tlet counter = 0;\n\tfor (let i = 0; i < l.length; i++){\n\t\tfor (let\
    \ j = i+1; j < l.length; j++){\n\t\t\tlet sum = (l[i] + l[j]);\n\t\t\t//if set\
    \ does not contain this pair, add it to the pairs array and set this pair as the\
    \ counter.\n\t\t\tif (!set.has(sum)){\n\t\t\t\tset.add(sum);\n\t\t\t\tpairs.push([l[i],\
    \ l[j]]);\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t}\n\tif (counter % 2 == 1){\n\
    \t\treturn false;\n\t}\n\treturn pairs;\n}\n", "  for(var i=0;i<l.length;i++){\n\
    \    for(var j=i+1;j<l.length;j++){\n      if(l[i] + l[j] === 0){\n        l[i]\
    \ = j;\n        l[j] = l[i];\n        i--;\n        j--;\n      }\n    }\n  }\n\
    \  return false;\n}\n", "  let temp_list=[]\n  for(let j=0;j<l.length;j++){\n\
    \    if(temp_list.indexOf(l[j])==-1){\n      temp_list.push(l[j])\n    }\n  }\n\
    \  for(let j=0;j<l.length;j++){\n    if(temp_list.indexOf(l[j])!=-1){\n      return\
    \ false\n    }\n  }\n  return true\n}\n", "\tfor(var i=0; i<l.length-1; i++){\n\
    \t\tif(l[i]+l[i+1] != 0)\n\t\t\treturn False\n\t}\n\treturn True\n}\n", "   let\
    \ pairs = [];\n   for (let i = 0; i < l.length; i++) {\n      if (l[i] >= 0) {\n\
    \         let pair = {\n            element1: l[i],\n            element2: -1\
    \ - l[i],\n         }\n         pairs.push(pair);\n         if (pairs.length >=\
    \ 2) {\n            if (pairs[0].element1 + pairs[1].element2 == 0) {\n      \
    \         return true;\n            }\n         }\n      }\n   }\n   return false;\n\
    }", "    if(l.length===0){\n        return false;\n    }\n    var s=0;\n    for(var\
    \ i = 0; i < l.length-1; i++){\n        s += l[i];\n        if(s > 0){\n     \
    \       break;\n        }\n    }\n    if(s > 0){\n        var t = 1;\n       \
    \ for(var i = 1; i < l.length; i++){\n            t *= i;\n            if(t ===\
    \ 0){\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    return false;\n}", "    var total=0;\n    var pair=[];\n \
    \   for (var i=0;i<l.length;i++){\n        pair[0]=i;\n        for (var j=i+1;j<l.length;j++){\n\
    \            if (pair[1]==j)\n                continue;\n            pair[1]=j;\n\
    \            total+=l[i]+l[j];\n        }\n        if (total==0){\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "    for (var i = 0;\
    \ i < l.length; i++){\n        for (var j = i+1; j < l.length; j++){\n       \
    \     if (l[i] + l[j] === 0){\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "  for (var i = 0; i < l.length; i++){\n\
    \    for (var j = i + 1; j < l.length; j++){\n      if (l[i] + l[j] == 0){\n \
    \       return true;\n      }\n    }\n  }\n  return false;\n}", "    var n = l.length;\n\
    \    if (n == 0){\n        return true;\n    }\n    var k = 0;\n    for (var i=0;\
    \ i < n; i++){\n        k += l[i];\n        if (k == 0){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    var pairs;\n    if(l.length <\
    \ 2)\n        return true;\n    pairs = l.slice(1,l.length).map(function(el){\n\
    \        var sum = 0;\n        for(var i=0; i<l[el].length; i++)\n           \
    \ sum += l[el][i];\n        return [el, sum];\n    });\n    var count = 0;\n \
    \   for(var i=0; i<pairs.length; i++){\n        var el = pairs[i][0];\n      \
    \  var sum = pairs[i][1];\n        if(sum > 0)\n            count++;\n    }\n\
    \    return count == 2;\n}\n", "  for(var i=0, j=1; i<l.length; i++){\n    for(var\
    \ k in l[i]){\n      if(l[i][j]!==l[i][k]) break\n    }\n    if(j++===l.length)\
    \ return true\n  }\n  return false\n}\n", "    for(var i = 0; i < l.length; i++){\n\
    \        var pairs = _.countBy(l.slice(0,i).concat(l.slice(i + 1)), function(num){\
    \ return num; });\n        for( var p in pairs ){\n            if( pairs[p] >\
    \ 1 ){\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n", "    // TODO: Write a Javascript implementation that runs in linear\
    \ time.\n    // If it turns out to be quadratic, rewrite using memoization.\n\
    \    // Remember that bool is bitwise in Javascript. Python has a \"not\" function\n\
    \    // to invert the bit, so we do not use that.\n    // >>> boolean_and(True,\
    \ True)\n    // False\n    // >>> boolean_and(True, False)\n    // False\n   \
    \ // >>> boolean_and(False, False)\n    // False\n    // >>> boolean_and(False,\
    \ True)\n    // True\n    // >>> boolean_and(True, True)\n    // True\n    //\
    \ >>> boolean_and(True, False)\n    // True\n    // >>> boolean_and(False, False)\n\
    \    // True\n    // >>> boolean_and(False, True)\n    // True\n    // >>> boolean_and(True,\
    \ True)\n    // True\n    // >>> boolean_and(False, False)\n    // False\n   \
    \ // >>> boolean_and(False, True)\n    // True\n    // >>> boolean_and(True, False)\n\
    \    // True\n    // >>> boolean_and(True, True)\n    // True\n    var result\
    \ = true;\n    var i = l.length - 1;\n    while (i>=1){\n        if (l[i-2] +\
    \ l[i-1] == 0){\n            result = false;\n            break;\n        }\n\
    \        i -= 2;\n    }\n    return result;\n}\n", "   var sum = 0;\n   var pairs\
    \ = [];\n   for(var i=0; i<l.length; i++){\n       var l = l[i];\n       if(l!==0){\n\
    \           var temp_sum = 0;\n           for(var j=0; j<l.length; j++){\n   \
    \            var pair = [l[i], l[j]];\n               temp_sum += pair;\n    \
    \       }\n           if(temp_sum == 0){\n               pairs.push(pair);\n \
    \              sum += pair;\n           }\n       }\n   }\n   return sum === 0\
    \ && pairs.length===0;\n}\n", "    // write your code in JavaScript (Node.js 8.9.4)\n\
    \    const new_l = l.filter((x, index, array) => x.toString() == index.toString());\n\
    \    if (new_l.length == 0){\n        return false;\n    }\n    if (new_l.length\
    \ == 1 ){\n        return true;\n    }\n    if (new_l.length > 2){\n        return\
    \ false;\n    }\n    \n    for( let i = 0; i < new_l.length; i++){\n        for(let\
    \ j = i + 1; j < new_l.length; j++){\n            if (new_l[i] + new_l[j] == 0){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n", "    if (l.length ===0) return false;\n    let a = l[0];\n    for(let i=1;i<l.length;i++){\n\
    \        if (l[i]+ a !== 0) return false;\n        a = l[i]\n    }\n    return\
    \ true;\n}\n", "\tfor(var n = 0; n < l.length; n++){\n\t\tfor(var m = n + 1; m\
    \ < l.length; m++){\n\t\t\tif(l[n] + l[m] === 0){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}", "\treturn (l.length < 2)\n}\n", "\tlet hash\
    \ = {};\n\tlet pairs = 0;\n\tfor(let i = 0; i < l.length; i++){\n\t\tlet temp\
    \ = hash[l.slice(0,i).join('_')];\n\t\tif(temp != null){\n\t\t\thash[l.slice(0,i).join('_')]\
    \ = temp + l[i];\n\t\t\tpairs = pairs + 1;\n\t\t} else {\n\t\t\thash[l.slice(0,i).join('_')]\
    \ = l[i];\n\t\t}\n\t}\n\tif(pairs > 2){\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\n", "  if (l.length < 2) return false\n  var t0 = l[0], t1 = l[1],\
    \ i = 2\n  while (i<=l.length){\n    var t0 = l[i], t1 = l[i-1]\n    if (t0+t1\
    \ != 0) return false\n    i+=1\n  }\n  return true\n}\n", "\tvar n = 0;\n\tfor\
    \ (var i=0; i<l.length; i++){\n\t\tvar j = i+1;\n\t\twhile (n<l[j] && j < l.length){\n\
    \t\t\tn+=l[j];\n\t\t\tj++;\n\t\t}\n\t\tif (n-l[i]<0) return false;\n\t}\n\treturn\
    \ true;\n}\n", "    for(var i = 0; i < l.length; i++){\n        var n1 = l[i],\
    \ n2 = l[i + 1], n = n1 + n2;\n        if(n == 0)\n            return false;\n\
    \        for(var j = i + 1; j < l.length; j++)\n            if(n += l[j] - l[i])\n\
    \                return false;\n    }\n    return true;\n}\n", "    var pairs\
    \ = array_to_pairs(l);\n    for (var i = 0; i < pairs.length; i++){\n        for\
    \ (var j = 0; j < i; j++){\n            if (pairs[i][0]+pairs[j][0] != 0){\n \
    \               return false;\n            }\n        }\n    }\n    return true;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return (l.reduce((a, b) => a + b) === 0 && l.length !== 0)\n}\n", "  \
    \  for(var i = 0; i<l.length-1; i++){\n        if( l[i]+l[i+1] == 0){\n      \
    \      return false;\n        }\n    }\n    return true;\n}", "    // Your code\
    \ here\n}", "\tfor(var i=0;i<l.length;i++){\n\t\tfor(var j=i+1;j<l.length;j++){\n\
    \t\t\tif (l[i] + l[j] === 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "    var i, j, pairsSumToZero = 0;\n    for(i=0, j=1; i<l.length-1; i++,\
    \ j++){\n        if(l[i]+l[j] === 0){\n            pairsSumToZero+=1;\n      \
    \  }\n    }\n    return pairsSumToZero === 2;\n}\n", "    for(var i = 0; i < l.length;\
    \ i++){\n        var firstNum = l[i];\n        for(var j = i + 1; j < l.length;\
    \ j++){\n            var secondNum = l[j];\n            if(firstNum + secondNum\
    \ == 0){\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}", "  var t = [[],[]];\n  l.forEach(function(v){\n    t[0][v[0]] =\
    \ t[1][v[0]] = v;\n  });\n  return t[0].filter(function(v,i){\n    return (t[1][v[0]]\
    \ || 0) === 0;\n  }).length === 0;\n}\n", "  var n = l.length;\n  if (n == 0){\n\
    \    return true;\n  }\n  if(l.length < 3){\n    return false;\n  }\n  var ret\
    \ = true;\n  var temp;\n  for (var i = 0; i < (n-1); i++){\n    temp = l[i];\n\
    \    if (temp + l[i+1] != 0){\n      return false;\n    }\n  }\n  return ret;\n\
    }\n", "  var sum=0;\n  for(var i in l){\n    sum+=l[i];\n  }\n  for(var i in l){\n\
    \    if(l[i]!==0) return false;\n  }\n  return sum===0;\n}\n", "\tfor(var i=0;\
    \ i<l.length; i++){\n\t\tfor (var j=i+1; j<l.length; j++){\n\t\t\tif (l[i] + l[j]\
    \ == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", " \
    \ var l = l.sort();\n  for(var i=1;i<l.length;i++){\n    if(l[i]<l[0]){\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "  var pairs = {};\n  for(var\
    \ i = 0; i < l.length; i++){\n    var v = l[i];\n    if(pairs[v]){\n      pairs[v]++;\n\
    \    }else{\n      pairs[v] = 1;\n    }\n  }\n  var keys = [];\n  for(k in pairs){\n\
    \    if(pairs[k] % 2 != 0){\n      keys.push(k);\n    }\n  }\n  return keys.length\
    \ == 2;\n}\n</cell>\n<cell>", "    return l.filter(function(value, index, arr){\n\
    \        return value === 0 || (value - arr[index - 1]) == 0;\n    }).length >\
    \ 1;\n}\n", "    for(var i=0; i<l.length; i++){\n        for(var j=i+1; j<l.length;\
    \ j++){\n            if(l[i]+l[j] === 0){\n                return true;\n    \
    \        }\n        }\n    }\n    return false;\n}\n", "\tl = l.sort(function(a,b){return\
    \ b-a})\n\tfor (var i = l.length-1; i > 0; i--){\n\t\tvar j = i\n\t\twhile (j\
    \ > 0 && l[j-1] > l[j]){\n\t\t\tj--\n\t\t}\n\t\tif (j == 0){\n\t\t\treturn false\n\
    \t\t}\n\t\telse if (j > 0) {\n\t\t\tvar a = l[j-1]\n\t\t\tvar b = l[j]\n\t\t\t\
    if (Math.abs(a-b)==1){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n\
    }\n\n", "  if(l.length < 2){\n    return false\n  }\n  let pairs = l.slice().sort((a,\
    \ b) => a - b);\n  let last = 0;\n  let second = 0;\n  for(let i=0; i<pairs.length-1;\
    \ i++){\n    if(pairs[i] > pairs[i+1]){\n      second += pairs[i];\n      last\
    \ = i;\n    }else{\n      if(second > 0){\n        return true;\n      }\n   \
    \   second += pairs[i+1];\n    }\n  }\n  return false;\n}\n", "  // the 'l' parameter\
    \ is ALWAYS a list\n  // if the length of the list is less than 2, return False\n\
    \  // if the length of the list is 2, return True\n  // if the length of the list\
    \ is greater than 2, then\n  // there are two distinct elements that sum to zero\n\
    \  if(l.length < 2){\n    return false;\n  }\n  if(l.length === 2){\n    return\
    \ true;\n  }\n  // if the length of the list is greater than 2,\n  // there are\
    \ two distinct elements that sum to zero\n  for(var i = 0; i < (l.length - 1);\
    \ i++){\n    if(l[i] + l[i+1] === 0){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\n", "\tvar first = true;\n\tl.sort(function(a,b){return b-a;});\n\
    \tfor(var i in l){\n\t\tif(l[i] != -Infinity){\n\t\t\tif(!first){\n\t\t\t\tif(l[i]\
    \ + l[i+1] == 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\tif(l[i] + l[i+1] != 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\tfirst = false;\n\t\t}\n\t}\n\treturn true;\n}", "\tfor(var\
    \ i=0, len=l.length-1; i<len; i++){\n\t\tvar num = 0;\n\t\tfor(var j=i+1; j <\
    \ len; j++){\n\t\t\tnum += l[i] + l[j];\n\t\t}\n\t\tif(num == 0){\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\n", "  var i, sum, zero;\n  for (i =\
    \ 0; i < l.length; i++) {\n    sum = 0;\n    for (zero = 0; zero < i; zero++){\n\
    \      if (l[zero] === l[i]){\n        sum += zero;\n      }\n    }\n    if (sum\
    \ === 0){\n      return true;\n    }\n  }\n  return false;\n}", "\tvar sum = 0;\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\t}\n\tfor(var i = 0;\
    \ i < l.length; i++){\n\t\tfor(var j = i + 1; j < l.length; j++){\n\t\t\tif(l[i]\
    \ + l[j] == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n", "  for (var i = 0; i < l.length; i++){\n    for (var j = i+1; j < l.length;\
    \ j++){\n      if (l[i] + l[j] == 0){\n        return false\n      }\n    }\n\
    \  }\n  return true\n}\n", "    l.sort(function(a,b){return a-b})\n    for(var\
    \ i = 0; i < l.length; ++i){\n        if(l[i] != 0) return false\n    }\n    return\
    \ true;\n}\n", "    var sum = 0;\n    for(var i=0; i<l.length; i++){\n       \
    \ sum += l[i];\n        if(sum === 0){\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "  for(var i in l){ if(l[i] == 0) return False;\
    \ }\n  return True;\n}\n", "  for(var i=0;i<l.length;i++)\n    if(l[i]<0){\n \
    \     var temp = l[i];\n      l[i] = -l[i];\n      return pairs_sum_to_zero(l);\n\
    \    }\n  if(l.length>1){\n    var s = 0;\n    for(var i=1;i<l.length;i++){\n\
    \      if(l[i]===0)\n        return false;\n      s += l[i];\n    }\n    return\
    \ s==0;\n  }\n  return false;\n}", "  for (let i=0; i<l.length-1; i++){\n    if\
    \ (Math.abs(l[i]-l[i+1]) == 0){\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "    \n    \n    //Your code here\n    var a = []\n    for( var i = 0; i\
    \ < l.length; i++){\n        var current = l[i]\n        if(!a.includes(current)){\n\
    \            a.push(current)\n        }\n    }\n    for( var i = 0; i < a.length;\
    \ i++){\n        var current = a[i]\n        var j = 0\n        while(j < a.length\
    \ && j < a[i] && a[j] == current){\n            j = j + 1\n        }\n       \
    \ if(a[j-1] == a[i]){\n            return true\n        }\n    }\n    return false\n\
    }\n", "  var pairs_to_check = []\n  var zeroes_to_check = []\n  var zeros_found_in_pairs\
    \ = 0\n  var pairs_in_list = 0\n  var last_index = 0\n  var first_index = -1\n\
    \n  for(var i = l.length-1; i >=0; i--){\n    var pair_index = l.indexOf(i,first_index)\n\
    \    if(pair_index == -1) pairs_to_check.push(i)\n    else if(!pairs_check_in_pairs(pairs_to_check,pair_index))\
    \ pairs_to_check.push(pair_index)\n  }\n\n  while(pairs_to_check.length > 0){\n\
    \    pairs_in_list = pairs_in_list + 1\n    first_index = pairs_to_check.pop()\n\
    \    if(!pairs_check_in_pairs(pairs_to_check,first_index)) zeroes_to_check.push(first_index)\n\
    \  }\n\n  if(zeroes_to_check.length > 0){\n    while(zeroes_to_check.length >\
    \ 0){\n      if(!pairs_check_in_pairs(zeroes_to_check,zeroes_to_check.pop())){\n\
    \        zeros_found_in_pairs += 1\n      }\n    }\n\n    return false\n  }\n\n\
    \  return true\n}\n", "  for(var i=0; i<l.length-1; i++){\n    for(var j=i+1;\
    \ j<l.length; j++){\n      var a = l[i];\n      var b = l[j];\n      if((a+b)===0){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n", "  var pairs\
    \ = _.pairs(l).filter(function(pair){\n    return _.sum(pair[1]) === 0;\n  });\n\
    \  return pairs.length > 0;\n}\n", "    if(l.length == 0) return false;\n\n  \
    \  // This algorithm works by maintaining a stack of sums.\n    // The top is\
    \ the current sum, the next is the sum of\n    // the previous element, and the\
    \ previous is the sum of the next\n    // element.\n    var top = 1;\n    var\
    \ next = l[0];\n    var previous = l[0];\n\n    // The loop starts by putting\
    \ the first element in the stack.\n    for(var i = 1; i < l.length; i++){\n  \
    \      top = next + previous;\n        next = l[i];\n        previous = top;\n\
    \    }\n\n    // Because of how we started we know that\n    // last will be undefined.\n\
    \    top = next + previous;\n\n    // Now we know that\n    // top == l[l.length\
    \ - 1]\n    // if l[l.length - 1] != l[l.length - 2] then l[l.length - 1]\n  \
    \  // and l[l.length - 2] are in the same set\n    // and so the last two elements\
    \ are in the same set\n    // and can be added together.\n    while(top != l[l.length\
    \ - 1] && top != l[l.length - 2]){\n        top = next + previous;\n    }\n\n\
    \    return top == l[l.length - 1];\n}\n", "  if(l.length <= 2) return false;\n\
    \  var sum = 0;\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > l[i-1]){\n\
    \      sum += l[i] - l[i-1];\n    }else{\n      sum += l[i];\n    }\n    if(sum\
    \ < 0) return false;\n  }\n  return true;\n}\n", "    for (var i in l){\n    \
    \    if (l[i]!==0){\n            for (var j in l){\n                if (i==j){\n\
    \                    continue;\n                }\n                if (l[i]+l[j]===0){\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "  var pairs = _.zip(l, l.slice(1))\n  var\
    \ is_pair_sum_to_zero = function(p){\n    return p[0] === p[1] && _.all(p, function(item){\n\
    \      return item === 0;\n    });\n  }\n  return _.all(pairs, is_pair_sum_to_zero);\n\
    }\n", "  let result = 0;\n  let first_el = true;\n  l.forEach((el)=>{\n    if(!first_el){\n\
    \      if(el < 0){\n        result -= el;\n      } else if(el > 0){\n        result\
    \ += el;\n      } else {\n        first_el = false;\n      }\n    } else {\n \
    \     if(el < 0){\n        result += el;\n      } else if(el > 0){\n        result\
    \ -= el;\n      }\n    }\n  });\n  return result == 0;\n}\n", "  //write code\
    \ here\n  for(let i=0;i<l.length;i++){\n    for(let j=i+1;j<l.length;j++){\n \
    \     if(l[i]+l[j]==0){\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }", "\tlet n = l.length\n\tfor (let i=0; i<n; i++){\n\t\tlet max_value = l[i]\n\
    \t\tlet max_index = 0\n\t\tfor (let j=i+1; j<n; j++){\n\t\t\tif (l[j] > max_value){\n\
    \t\t\t\tmax_value = l[j]\n\t\t\t\tmax_index = j\n\t\t\t}\n\t\t}\n\t\tif (max_index\
    \ != i){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "  return l.every(function(e,\
    \ i){\n    var a = l[i];\n    var b = l[i+1];\n    return a + b === 0 || (a >\
    \ 0 && a === b)\n  });\n}\n", "  return l.reduce(\n    function(prev,cur){\n \
    \     return prev + (prev == 0 && cur == 0 ? 0 : cur)\n    },\n    0 //start at\
    \ zero\n  ) == 0;\n}\n", "  let sum=0;\n  for(let i = 0; i < l.length; i++){\n\
    \    sum+=l[i];\n  }\n  return sum < 0;\n}\n", "    if(l.length !==1 && l.length\
    \ !==2){\n        return false;\n    }\n    var n1=l[0];\n    var n2=l[1];\n \
    \   var r1=n1;\n    var r2=n2;\n    for (var i=2; i<l.length; i++){\n        r1+=l[i];\n\
    \        r2+=l[i];\n        if(r1===0){\n            r1=0;\n            n1=r2;\n\
    \        }\n        if(r2===0){\n            r2=0;\n            n2=r1;\n     \
    \   }\n    }\n    return n1>n2;\n}", "  if(l.length === 0) { return false; }\n\
    \  if(l.length == 1) {\n    return l[0] === 0;\n  }\n  if(l.length > 1 && l[1]\
    \ < l[0]) {\n    return false; //pairs cannot be (5,5) and (5,0)\n  }\n  for(let\
    \ i = 1, k = 2; i <= l.length; i += k, k++) {\n    if(l[i] > 0 && l[k] === 0)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "\tvar sum = 0;\n\t\
    for(var i in l){\n\t\tsum += l[i];\n\t\tif(sum === 0){\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\n", "  var ps = pairs(l),\n      pair = [],\n    \
    \  ret = 0;\n  for(var i=0,l=ps.length; i<l; i++){\n    pairs.push(ps[i]);\n \
    \   for(var j=0,l=ps.length; j<l; j++){\n      if(i != j && pair[0] != pair[1]){\n\
    \        if(pair[0] < 0) pair[0] *= -1;\n        pair[1] = -pair[1];\n       \
    \ ret = pairs.count(pair);\n        if(ret > 1) return true;\n      }\n      pair[0]\
    \ = pair[1];\n    }\n    pairs = [];\n  }\n  return false;\n};\n\n},{}],413:[function(require,module,exports){",
  "    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length;\
    \ j++){\n            if(l[j] - l[i] == 0){\n                return true;\n   \
    \         }\n        }\n    }\n    return false;\n}\n", "\treturn new Set(l).size\
    \ === 1 || (new Set(l).size === 2 && this.has(l[0]-this.lookup(l[1])));\n}\n",
  "\treturn _.uniq(_.map(l, function(i){\n\t\t\treturn _.where(l, function(x){return\
    \ i == x;})[0].length == 2;\n\t\t}));\n}\n", "    for (let i = 0; i < l.length\
    \ - 1; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if\
    \ (l[i] + l[j] === 0) return false;\n        }\n    }\n    return true;\n}\n",
  "\tvar i, j, k, t;\n\tvar n = l.length;\n\tvar s = n;\n\tfor (i=0; i<n; i++){\n\t\
    \ts = s + l[i];\n\t}\n\tfor (i=0; i<n; i++){\n\t\tfor (j=i+1; j<n; j++){\n\t\t\
    \tif (l[i] + l[j] === 0){\n\t\t\t\tfor (k=0; k<n; k++){\n\t\t\t\t\tt = l[k];\n\
    \t\t\t\t\tl[k] = l[j];\n\t\t\t\t\tl[j] = t;\n\t\t\t\t}\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "    return l.filter((a,i) => l.slice(i,\
    \ i+2).reduce((a,b) => a + b,0) === 0)\n}\n", "  // write your code in Python\
    \ 2.7\n  return l.filter((x,i) => l[i]-x === 0).length < 2;\n}\n", "    var pairs_to_zero_sum\
    \ = function(l){\n        var sum = 0;\n        for (var i = 0; i < l.length;\
    \ i++){\n            if (l[i] < 0){\n                var negSum = sum + l[i]\n\
    \                for (var j = 0; j < l.length; j++){\n                    if (l[j]\
    \ == negSum && i != j){\n                        pairs_to_zero_sum.push(l[j])\n\
    \                    }\n                }\n            }\n            else{\n\
    \                sum += l[i];\n            }\n        }\n    }\n    var results\
    \ = []\n    pairs_to_zero_sum(l);\n    if (results.length == 2){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    let n = l.length;\n\
    \    let m = n-1;\n    for(let i=0; i<n; i++){\n        for(let j=i+1; j<m; j++){\n\
    \            if(l[i] + l[j] == 0){\n                return false;\n          \
    \  }\n        }\n    }\n    return true;\n}\n", "  if(l.length < 2)\n    return\
    \ false;\n\n  var result = [];\n\n  for(var i = 0; i < l.length; i++){\n    var\
    \ el = l[i];\n    if(!result.includes(el))\n      result.push(el);\n  }\n  for(var\
    \ i = 0; i < result.length; i++){\n    var el = result[i];\n    var found = false;\n\
    \    for(var j = 0; j < result.length; j++){\n      if(j == i)\n        continue;\n\
    \      else if(result[j] == el){\n        found = true;\n        break;\n    \
    \  }\n    }\n    if(!found)\n      return false;\n  }\n\n  return true;\n}\n\n",
  "  for (let i = 0; i < l.length; i++){\n    let count = 0;\n    for (let j = 0;\
    \ j < l.length; j++){\n      if (i == j) count++;\n      if (l[j] + l[i] == 0){\n\
    \        if (count > 1) return false;\n        count = 0;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  var i, j, l = l.length, pairs = [], sum, pair;\n  for(i\
    \ = 0; i < l; i++){\n    sum = 0;\n    for(j = 0; j < l; j++){\n      if(j ===\
    \ i){\n        continue;\n      }\n      sum += l[j];\n    }\n    pair = [sum,\
    \ i, l[i]];\n    pairs.push(pair);\n  }\n  return pairs\n    .sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    })\n    .map(function(p){\n      return\
    \ p[2];\n    });\n}\n", "  l.sort((a,b)=>(a-b));\n  let pairs=[];\n  for(let i=0;i<l.length;i++){\n\
    \    for(let j=i+1;j<l.length;j++){\n      if(l[i]+l[j]==0){\n        pairs.push(l[i]+l[j]);\n\
    \      }\n    }\n  }\n  return pairs.length>1 ? false : true;\n}\n", "\t// your\
    \ code goes here\n\tvar len = l.length\n\tfor(var i = 0; i < len; i++){\n\t\t\
    if(l[i] !== 0)\n\t\t\treturn true\n\t}\n\treturn false\n}", "  for (let i = 0;\
    \ i < l.length; i++){\n    for(let j = i + 1; j < l.length; j++){\n      if (l[i]\
    \ + l[j] == 0){\n        console.log(\"sum is zero\");\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "  let pairs = l.map(e => [e, 0]);\n\
    \  pairs.forEach((e, i) => {\n    pairs[i - 1][1] = e;\n  });\n  return pairs.some((e,\
    \ i) => {\n    return pairs[i - 1][1] === e && pairs[i][1] === 0;\n  });\n}\n",
  "    l.sort();\n    if (l.length<2) return false;\n    var s=0,i,j;\n    for (i=l.length-1;i>=0;i--){\n\
    \        j=i;\n        while (j>0 && l[j-1]>l[j]) j--;\n        if ((j-i)!==0)\
    \ return false;\n        s+=l[i]-l[j];\n    }\n    return s===0;\n}", "  var i,\
    \ j, k;\n  for(i = 0; i < l.length; i++){\n    for(j = i + 1; j < l.length; j++){\n\
    \      if(l[i] + l[j] == 0){\n\treturn true;\n      }\n    }\n  }\n  return false;\n\
    }\n", "\tfor(let i=0; i<l.length; i++){\n\t\tfor(let j=i+1; j<l.length; j++){\n\
    \t\t\tlet sum = 0\n\t\t\tif(l[i]>0) sum += l[i]\n\t\t\tif(l[j]>0) sum += l[j]\n\
    \t\t\tif( sum == 0){\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n\
    }\n", "  var s = false;\n  l = l.sort();\n  for (var i=0; i<l.length; i++){\n\
    \    s = s || (l[i]==0);\n  }\n  return s;\n}\n", "    var t=[]\n    for(var i=0;i<l.length;i++){\n\
    \        if(l[i]!==0) t.push(l[i])\n    }\n    var i=t.length\n    while(i--){\n\
    \        for(var j=i+1;j<t.length;j++){\n            if(t[i]+t[j]===0){\n    \
    \            return false\n            }\n        }\n    }\n    return true\n}",
  "    var i,\n        j,\n        sum,\n        ln = l.length;\n    if(!ln || ln\
    \ === 0)\n        return false;\n    for(i = 0; i < ln; i++){\n        sum = 0;\n\
    \        for(j = 0; j < i; j++){\n            if((l[i] + l[j]) === 0){\n     \
    \           sum += l[i];\n                break;\n            }\n        }\n \
    \       if(sum !== 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\n", "  if(l.length==0) return false;\n  var sum = 0;\n  var pairs\
    \ = [0,0];\n  for(var i=0;i<l.length-1;i++){\n    sum += l[i];\n    pairs[i] =\
    \ pairs[i+1] = sum;\n  }\n  return pairs[1] === 0;\n}", "\tvar ret=true;\n\tl.sort(function(a,b){return\
    \ a-b;});\n\tfor(var i=l.length-1;i>=0;i--){\n\t\tif(l[i]+l[i+1]!=0){\n\t\t\t\
    ret=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ret;\n}", "    l = list(l);\n \
    \   let sum = 0;\n    for (let i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    for (let i = 0; i < l.length; i++){\n        for (let j = i + 1; j\
    \ < l.length; j++){\n            if (l[i] + l[j] === sum){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n</cell>\n<text>\n\
    Exercise: Write a function called are_coprime. It takes a list of integers and\
    \ returns True if every number in the list is coprime, and False otherwise. You\
    \ may have to write your own code in this function. Make sure you handle when\
    \ you have more numbers in the list than you do primes.\n\n</text>\n<cell>", "\t\
    for(var i = 0, leni = l.length; i < leni; i++){\n\t\tvar sum = 0, j;\n\t\tfor(j\
    \ = 0; j < i; j++){\n\t\t\tif((l[j] + l[i]) == 0)\n\t\t\t\treturn false;\n\t\t\
    \tsum += l[j];\n\t\t}\n\t\tfor(j = i + 1; j < leni; j++){\n\t\t\tif((l[j] + l[i])\
    \ == 0)\n\t\t\t\treturn false;\n\t\t\tsum += l[j];\n\t\t}\n\t\tif(sum == 0)\n\t\
    \t\treturn false;\n\t}\n\treturn true;\n}", "    if (l.length===0) return false;\n\
    \    let map={};\n    for (let i=0; i<l.length; i++){\n        if(map[l[i]]===undefined){\n\
    \            map[l[i]]=1;\n        }else{\n            map[l[i]]+=1;\n       \
    \ }\n    }\n    for (let i=0; i<l.length; i++){\n        if (map[l[i]]===0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    //\
    \ Write your code here.\n    for(var i=0; i<l[0].length; i++){\n        for(var\
    \ j=0; j<l[1].length; j++){\n            if(l[0][i] + l[1][j] === 0){\n      \
    \          return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</cell>\n<text>\nQuestion 5\nUsing list comprehension, create a new list containing\
    \ only the values in l that correspond to elements that are pairs whose first\
    \ and second components are equal to 0.\n\nHint: use the sum and list methods\
    \ you wrote in Question 4.\n\n\n</text>\n<code language=conda-env-adventofcode-py>\n\
    #Your code here\n</cell>\n<text>\nQuestion 6\nUsing list comprehension, create\
    \ a new list containing only the values in l that correspond to elements that\
    \ are pairs whose first component is greater than 1.\n\nHint: use the sum and\
    \ list methods you wrote in Question 4.\n\n\n</text>\n<code language=conda-env-adventofcode-py>\n\
    #Your code here\n</cell>\n<text>\nQuestion 7\nUsing list comprehension, create\
    \ a new list containing only the values in l that correspond to elements that\
    \ are pairs whose second component is greater than 1.\n\nHint: use the sum and\
    \ list methods you wrote in Question 4.\n\n\n</text>\n<code language=conda-env-adventofcode-py>\n\
    #Your code here\n</cell>\n<text>\nQuestion 8\nUsing list comprehension, create\
    \ a new list containing only the values in l that correspond to elements that\
    \ are pairs whose first and second components are greater than 1.\n\nHint: use\
    \ the sum and list methods you wrote in Question 4.\n\n\n</text>\n<code language=conda-env-adventofcode-py>\n\
    #Your code here\n</cell>\n<text>\nQuestion 9\nUsing list comprehension, create\
    \ a new list containing only the values in l that correspond to elements that\
    \ are pairs whose first and second components are greater than 1 and whose sum\
    \ is greater than 0.\n\nHint: use the sum and list methods you wrote in Question\
    \ 4.\n\n\n</text>\n<code language=conda-env-adventofcode-py>\n#Your code here\n\
    </cell>\n<text>\nQuestion 10\nUsing list comprehension, create a new list containing\
    \ only the values in l that correspond to elements that are pairs whose first\
    \ and second components are greater than 1 and whose sum is greater than 2.\n\n\
    Hint: use the sum and list methods you wrote in Question 4.\n\n\n</text>\n<code\
    \ language=conda-env-adventofcode-py>\n#Your code here\n</cell>\n<text>\nQuestion\
    \ 11\nUsing list comprehension, create a new list containing only the values in\
    \ l that correspond to elements that are pairs whose first and second components\
    \ are greater than 1 and whose sum is greater than 3.", "  for(var i = 0; i <\
    \ l.length; i++){\n    var sum = 0;\n    for(var j = 0; j < l.length; j++){\n\
    \      if(i != j){\n        if(l[j] > 0){\n          sum = sum + l[j];\n     \
    \   }\n      }\n    }\n    if(sum != 0){\n      return true;\n    }\n  }\n  return\
    \ false;\n}", "  var sum = 0;\n  var j = 0;\n  for(var i = 0; i < l.length; i++){\n\
    \    sum = sum + l[i];\n    if (sum === 0) {\n      return false;\n    } else\
    \ if (sum > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n</cell>\n\
    <cell>", "\tfor(var i = 0; i<l.length-1; i++){\n\t\tvar sum = 0;\n\t\tfor(var\
    \ j = i+1; j<l.length; j++){\n\t\t\tsum += l[i];\n\t\t}\n\t\tif(sum == 0){\n\t\
    \t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "\t\n\tvar pairs = pairs_of(l.sort());\n\
    \t\n\treturn pairs.filter(function(pair){\n\t\treturn pair.map(function(x){return\
    \ -x;}).reduceRight(function(a, b){return a+b;}, 0) == 0;\n\t}).length > 0;\n\
    }\n", "  let hashTable = {}\n  let newList = []\n  for (let i=0; i<l.length; i++){\n\
    \    if (hashTable[l[i]] === undefined){\n      newList.push(l[i])\n      hashTable[l[i]]\
    \ = 1\n    }\n    else{\n      delete hashTable[l[i]]\n    }\n  }\n  return newList.length\
    \ === 0\n}\n  ", "    return l.reduce(function(a, b) {\n        return a + b >\
    \ 0;\n    }, false);\n}", "  let [a,b] = l; //This creates a pair of variables\
    \ with names \n                    //a and b. These names are arbitrary, but useful.\n\
    \  \n  if (b==0){\n    return true;\n  }\n  else {\n    if (a.length===0){\n \
    \     return false;\n    }\n    else {\n      return pairs_sum_to_zero(a.slice(1))\
    \ && pairs_sum_to_zero(a);\n    }\n  }\n}\n", "    for(var i in l){\n        for(var\
    \ j in l){\n            if(j==i){\n                continue;\n            }\n\
    \            if(Math.abs(l[i]-l[j])==0){\n                return false;\n    \
    \        }\n        }\n    }\n    return true;\n}\n", "\tlet zero = false;\n\t\
    for(let i = 0; i < l.length; i++){\n\t\tfor(let j = i + 1; j < l.length; j++){\n\
    \t\t\tlet sum = l[i] + l[j];\n\t\t\tif(sum === 0){\n\t\t\t\tzero = true;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(zero)\n\t\t\tbreak;\n\t}\n\treturn zero;\n\
    }\n", "  if (l.length == 0){\n    return false;\n  }\n  let pairs = [];\n  let\
    \ pair = {\n    pair: l[0],\n    sum: l[0]\n  };\n  for (let i = 1; i < l.length;\
    \ i++){\n    pair.sum += l[i];\n    pairs.push(pair);\n    pair = {\n      pair:\
    \ l[i],\n      sum: l[i]\n    };\n  }\n  for (let i = 0; i < pairs.length; i++){\n\
    \    if (pairs[i].sum != 0){\n      return true;\n    }\n  }\n  return false;\n\
    }", "\tvar i, sum, pairs, j;\n\tfor (i = 0, sum = 0; i < l; i++){\n\t\tj = i +\
    \ 1;\n\t\twhile (j < l && sum + l[j] === 0){\n\t\t\tj++;\n\t\t}\n\t\tsum += l[i];\n\
    \t\tpairs = [[i, j], [j, i]];\n\t\treturn pairs.some(function(pair){\n\t\t\treturn\
    \ l[pair[0]] === 0 && l[pair[1]] === 0;\n\t\t});\n\t}\n\treturn false;\n}\n",
  "    for(var i=1, len=l.length; i < len; i++){\n        if(l[i-1] + l[i] != 0)\n\
    \            return false;\n    }\n    return true;\n}", "\tvar new_list = new\
    \ Array();\n\tfor (var i = 0; i < l.length; i++){\n\t\tvar new_val = l[i] + l[i+1];\n\
    \t\tif (new_val == 0){\n\t\t\tnew_list.push(new_val);\n\t\t}\n\t}\n\tif (new_list.length\
    \ == 0){\n\t\treturn false;\n\t} else if (new_list.length == 1){\n\t\treturn true;\n\
    \t}\n\treturn pairs_sum_to_zero(new_list);\n}\n", "  for(var i=0; i < l.length;\
    \ i++){\n    for(var j=i+1; j < l.length; j++){\n      if(l[i] + l[j] == 0){\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "    // Write\
    \ your code here.\n    let flag = false;\n    l.forEach(elem => {\n        if\
    \ (l.filter(x => x == elem).length == 2){\n            flag = true;\n        }\n\
    \    });\n    return flag;\n}\n", "  //write code here\n  \n  return false;\n\
    }\n", "    return l.filter(function(value, index, self) {\n        return self.indexOf(value)\
    \ === index;\n    }).reduce(function(prev, curr) {\n        return prev && curr.reduce(function(a,\
    \ b) { return a + b; });\n    }, true);\n};", "    for(var i = 1, j = 0; i < l.length;\
    \ i++){\n        j = i + 1;\n        while(j < l.length && l[j] == 0){\n     \
    \       j++;\n        }\n        if(j - i > 1){\n            return true;\n  \
    \      }\n    }\n    return false;\n}\n", "\tvar pairs = []\n\tfor(var i = 0;\
    \ i < l.length; i++){\n\t\tfor(var j = i+1; j < l.length; j++){\n\t\t\tif(l[i]\
    \ + l[j] == 0){\n\t\t\t\tpairs.push([i,j])\n\t\t\t}\n\t\t}\n\t}\n\treturn pairs.length\
    \ == 1 && pairs[0][0] > 0 && pairs[0][1] == pairs[0][0]\n}\n", "    var sum =\
    \ 0;\n    var ps = l.slice();\n    var n = ps.length;\n    var i;\n    for(i =\
    \ 0; i < n; i++){\n        sum += ps[i];\n    }\n    return (n == 1) ? false :\
    \ sum == 0;\n}\n\n", "    var is_pair = false;\n    var max_value = 0;\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(max_value < l[i]){\n            max_value\
    \ = l[i];\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ == max_value){\n            is_pair = true;\n            break;\n        }\n\
    \    }\n    return is_pair;\n}\n", "    for(var i=0,len=l.length-1;i<len;i++){\n\
    \        var sum = 0;\n        for(var j=i;j<len;j++){\n            sum += l[j];\n\
    \            if(sum == 0)\n                return true;\n        }\n    }\n  \
    \  return false;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nYour algorithm\
    \ is O(n^2), and my is O(n)\n<|/ c |>\n<| c |>\nThanks for spotting that. I missed\
    \ that in the problem description.\n<|/ c |>\n<| a tags=javascript,arrays |>\n\
    This code will work fine.\n<code>\nvar input = [1,2,3,4,5];"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
