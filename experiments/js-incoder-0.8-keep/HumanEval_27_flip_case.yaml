name: HumanEval_27_flip_case
language: js
prompt: "//For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have\
  \ violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();"
completions: ["    return string.split('')\n    .map(char=>char===char.toLowerCase()?char.toUpperCase():char.toLowerCase())\n\
    \    .join('')\n}\n", "    return string.split('').map(function(x){\n        if\
    \ (x === x.toUpperCase()) return x.toLowerCase();\n        return x;\n    }).join('');\n\
    }\n", "    return string.split('').map( (character) => {\n        if(character\
    \ === character.toUpperCase()){\n            return character.toLowerCase()\n\
    \        }\n        return character.toUpperCase()\n    }).join('')\n}", "   \
    \ return string.toLowerCase().replace(/((?=.*\\d)|(?<=\\d)(?=$))/g,function(letter){\n\
    \        return letter.toUpperCase();\n    });\n}\n", "  return string.split('').map(function(character){\n\
    \    switch(character) {\n      case 'a':\n      case 'e':\n      case 'i':\n\
    \      case 'o':\n      case 'u':\n        return 'A';\n      case 'b':\n    \
    \  case 'f':\n      case 'n':\n      case 'r':\n      case 't':\n        return\
    \ 'B';\n      case 'c':\n      case 'm':\n      case 'p':\n        return 'C';\n\
    \      case 'd':\n      case 'g':\n      case 'y':\n        return 'D';\n    \
    \  case 'h':\n      case 'j':\n      case 'v':\n        return 'H';\n      case\
    \ 'w':\n      case 'z':\n      case 'x':\n        return 'W';\n      case '0':\
    \ // Special case: these characters indicate a digit between 0 and 9.\n      case\
    \ '9':\n        return character;\n      default:\n        return null;\n    }\n\
    \  }).filter(function(character){\n    return !!character;\n  }).join('');\n}\n",
  "    return string.toUpperCase().replace(/[a-z]/g, function(letter){\n         \
    \   return String.fromCharCode(letter.charCodeAt(0) - 32);\n        });\n}\n",
  "    // Use regexp to flip case\n    return string.replace(/[a-z]/g, function(x){\n\
    \        return x.toUpperCase();\n    }).replace(/[A-Z]/g, function(x){\n    \
    \    return x.toLowerCase();\n    });\n}\n", "    return string.toLowerCase().split('').reverse().join('')\n\
    }\n", "\treturn string.split(\"\").map(function(l){\n\t\treturn l.toUpperCase().split(\"\
    \").join(l.toLowerCase());\n\t}).join(\"\");\n}\n", "  return string.toLowerCase().split('').map(function(char){\n\
    \    return char.toUpperCase();\n  }).join('');\n}\n", "    return string.split('').reduce(function\
    \ (previous,current){\n        return previous + (current.toLowerCase() || current).toUpperCase();\n\
    \    },'');\n}\n", "    var upper = string.toUpperCase();\n    var lower = string.toLowerCase();\n\
    \    \n    return lower + upper.substr(0,1).toUpperCase() + upper.substr(1);\n\
    }\n\n", "    \n    return string.replace(/([A-Z])/g, function(match, group1){\n\
    \        return group1.toLowerCase();\n    }).replace(/([a-z])/g, function(match,\
    \ group1){\n        return group1.toUpperCase();\n    })\n}\n", "    return string.toLowerCase().replace(/[a-z]/g,function(letter){return\
    \ letter.toUpperCase()})\n}\n</code>\n<|/ a dscore=5 tags=javascript,string,regex\
    \ |>\n<| c |>\n`!` does not work in `g` flag for `replace` method. You need to\
    \ use `/[a-z]/g` instead\n<|/ c |>\n<| c |>\nThis is what I was looking for. `replace`\
    \ was the one that worked for me in all cases, I used the method with the negative\
    \ lookahead `\\b[a-z]\\b(?![a-z])` to remove all `[a-z]` except for the one after\
    \ a word boundary, in case the string has multiple letters on it\n<|/ c |>\n<|\
    \ c |>\nFor those who need to *remove lowercase characters* from strings, use\
    \ `/[a-z]+/g` instead of `/[a-z]/g`.\n<|/ c |>\n<| a tags=javascript,string,regex\
    \ |>\nFor those who'd like to remove all but the first uppercase character:\n\
    <code>", "  return string.replace(/[a-z]/ig, function (match) {\n      return\
    \ match.toUpperCase();\n  });\n}\n", "\treturn string.toLowerCase()\n\t\t.toUpperCase();\n\
    }\n", "    string = string.toLowerCase();\n    string = string.toUpperCase();\n\
    \    return string;\n}", "  let result = \"\";\n  for(let i = 0; i < string.length;\
    \ i++){\n    let character = string[i].toLowerCase();\n    if(character.toUpperCase()\
    \ === character){\n      result += character.toLowerCase();\n    }else{\n    \
    \  result += character.toUpperCase();\n    }\n  }\n  return result;\n}", "   \
    \ return string.replace(/([a-z])([A-Z])/g,\"$1 $2\");\n}\n", "  var flipped =\
    \ \"\";\n  for (var i = 0; i < string.length; i++){\n    if (string[i] >= 'A'\
    \ && string[i] <= 'Z'){\n      flipped += string[i].toUpperCase();\n    } else\
    \ {\n      flipped += string[i];\n    }\n  }\n  return flipped;\n}\n", "    \n\
    \    var characters = string.toUpperCase().split(\"\"),\n        lowercase_characters\
    \ = string.split(\"\"),\n        uppercase_characters = string.split(\"\"),\n\
    \        \n        i;\n    \n    for(i=0; i<characters.length; i++){\n       \
    \ characters[i] = characters[i].toUpperCase();\n        lowercase_characters[i]\
    \ = characters[i].toLowerCase();\n        uppercase_characters[i] = characters[i].toUpperCase();\n\
    \    }\n    \n    return lowercase_characters.join(\"\") + uppercase_characters.join(\"\
    \");\n}\n</cell>\n<text>\nNext we write some code which takes our list of possible\
    \ solutions and returns the one which matches the highest cost.\n\n\n</text>\n\
    <cell>", "    return string.toLowerCase()\n                   .replace(/[a-z]/g,\
    \ function(c){\n                    return c.toUpperCase()\n                 \
    \          .replace(/[A-Z]/g, function(c){\n                            return\
    \ c.toLowerCase();\n                           });\n                   })\n  \
    \                 .replace(/[A-Z]/g, function(c){\n                    return\
    \ c.toLowerCase();\n                   });\n}\n", "    return string.split('').map(function(char){\n\
    \        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \    }).join('');\n}\n", "    string = string.toLowerCase();\n    string = string.toUpperCase();\n\
    \    string = string.charAt(0).toLowerCase() + string.slice(1);\n    return string;\n\
    }\n</code>\nThe second function is to remove the space in the beginning of a string.\
    \ Here it is the remove_space function:\n<code>", "  var result = string.toLowerCase();\n\
    \  for(var i = 0; i < string.length; i++){\n    if(string[i] === result.charAt(i))\
    \ return result.charAt(i).toUpperCase();\n  }\n}", "    let uppercase_string =\
    \ \"\";\n    for(let i=0; i< string.length; i++){\n        let char = string[i];\n\
    \        if(char == char.toUpperCase()){\n            uppercase_string += char.toLowerCase();\n\
    \        } else {\n            uppercase_string += char.toUpperCase();\n     \
    \   }\n    }\n    return uppercase_string;\n}\n", "    var result = '';\n    var\
    \ i;\n    for(i=0; i<string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n\
    \            result = result + string[i].toLowerCase();\n        }else{\n    \
    \        result = result + string[i].toUpperCase();\n        }\n    }\n    return\
    \ result;\n}", "  return string.toLowerCase().toUpperCase()\n}\n", "    string\
    \ = string.toLowerCase();\n    return string.charAt(0).toUpperCase() + string.slice(1);\n\
    }\n", "    var upperCaseMap={};\n    var lowerCaseMap={};\n    for(var i=0;i<string.length;i++){\n\
    \        upperCaseMap[string.charAt(i)]=string.charAt(i).toUpperCase();\n    \
    \    lowerCaseMap[string.charAt(i)]=string.charAt(i).toLowerCase();\n    }\n \
    \   return upperCaseMap;\n}\n", "    return string.toLowerCase()\n           \
    \     .replace(/[!@#$%^&*()_\\-+={\\[}\\]|\\\\'\\\"]/g, '')\n                .replace(/\\\
    s+/g, ' ')\n                .replace(/^\\s+|\\s+$/gm, '')\n                .toUpperCase();\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 |>\nHere is a version that uses regex, which\
    \ I personally think is slightly easier to read:\n<code>\nvar flipCase = function(str)\
    \ {\n    return str.replace(/(\\w+)/g, function(letter) {\n        return letter.toUpperCase()\n\
    \    })\n};\n\nflipCase('hello world'); // 'hELLO wOrLd'\n</code>\nThe regex is\
    \ capturing each letter and returning them uppercase, which is what we want. \n\
    Here's an explanation:\n<code>\n/\\w/ // match word characters [a-zA-Z0-9_]\n\
    \         // \\w is the same as [0-9a-zA-Z_]\n         // + means one or more\
    \ of those\n         // g means match as many of those as possible\n         //\
    \ function with first argument letter\n         // return letter.toUpperCase()\n\
    \         // execute function for each letter in string\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nWow, that is a cool solution. I like that it uses regex. I like\
    \ the look of it. Do you mind explaining how this regex is doing it?\n<|/ c |>\n\
    <| c |>\nI added an explanation :)\n<|/ c |>\n<| a dscore=1 tags=javascript |>\n\
    Here's a functional approach that uses String.replace and String.toUpperCase.\n\
    \n<code>\nconst flip_case = str => str.replace(/[a-z]+/g, letter => letter.toUpperCase());\n",
  "\treturn string.split('').map(function(elm){\n\t\tif(elm === elm.toUpperCase()){\n\
    \t\t\treturn elm.toLowerCase();\n\t\t}else{\n\t\t\treturn elm.toUpperCase();\n\
    \t\t}\n\t}).join('');\n}\n", "  return string.toUpperCase().split('')\n    .map(function(ch){\n\
    \      return ch.toLowerCase()\n    }).join('')\n}\n", "    string = string.toLowerCase();\n\
    \    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n", "    return\
    \ string.split('')\n        .map(letter => {\n            if (letter === letter.toLowerCase())\
    \ {\n                return letter.toUpperCase();\n            } else {\n    \
    \            return letter.toLowerCase();\n            }\n        })\n       \
    \ .join('');\n}\n</code>\n<|/ a dscore=2 tags=javascript |>\n<| c |>\nThank you\
    \ for the answer. Your approach is definitely more succinct than the other answers.\
    \ Just one thing I didn't understand in the answer you linked to. How does `let\
    \ result = '';` work in the first place? What happens if you don't give it a value?\n\
    <|/ c |>\n<| c |>\nI updated my answer to add more explanation. Hope it helps.\n\
    <|/ c |>\n<| c |>\nHi, I really appreciate the edits, but what does the `split`\
    \ and `map` do exactly? I know you're explaining the code but I'm having a hard\
    \ time following what's going on. Thanks again for all the help.\n<|/ c |>\n<|\
    \ c |>\nThe split and map functions are methods of string and arrays. You can\
    \ read more here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\
    <|/ c |>\n<| c |>\nI really appreciate the edit, but I'm not following how it\
    \ works. I see what it's doing, but I still don't understand how it works. Can\
    \ you explain it to me a little bit? Thanks again for your help.\n<|/ c |>\n<|\
    \ a |>\nYou can do it in one line if you want.\n<code>\nlet newString = string.replace(/[a-z]/g,\
    \ letter => { return letter.charCodeAt(0) - 96 });\n</code>\n<|/ a dscore=2 tags=javascript\
    \ |>\n<| c |>\nThanks for the answer. I'm still trying to wrap my head around\
    \ this. I understand what it's doing, but I don't understand how it works. Can\
    \ you explain it to me a little bit? Thanks again for your help.\n<|/ c |>\n<|\
    \ c |>\nIf you look at the documentation for String.replace, you will see that\
    \ it takes two arguments. The first is the string to search for, and the second\
    \ is the function that replaces it.\n<|/ c |>\n<| c |>\nThe `.replace` function\
    \ takes a regular expression as its first argument, which is basically saying\
    \ \"I want to find characters that are lower case letters, and replace them with\
    \ the code of the letter\" - which is the character code of the letter. `String.charCodeAt`\
    \ returns the code of the letter, e.g. `'A'.charCodeAt(0) - 96` is `65`.\n<|/\
    \ c |>\n<| c |>\nI appreciate that explanation but I still don't understand how ",
  "    var retString = string;\n    var currentLetter;\n    var flippedLetter;\n \
    \   for(let i = 0; i < retString.length; i++){\n        currentLetter = retString.charAt(i);\n\
    \        flippedLetter = currentLetter.toUpperCase();\n        retString = retString.replace(flippedLetter,\
    \ currentLetter.toLowerCase());\n    }\n    return retString;\n}\n", "  return\
    \ string.toUpperCase().replace(/[a-z]/g, function(letter){\n    return letter.toUpperCase();\n\
    \  });\n}\n", "    var result = \"\";\n    for(var i=0; i<string.length; i++){\n\
    \        var character = string[i];\n        if(character === character.toLowerCase()){\n\
    \            result += \"_\" + character.toUpperCase();\n        } else {\n  \
    \          result += character.toLowerCase();\n        }\n    }\n    return result;\n\
    }\n", "\treturn string.toLowerCase().split('').reduce((acc, char) => {\n\t\treturn\
    \ char === char.toUpperCase()? char : char.toUpperCase();\n\t});\n}\n", "    return\
    \ string.replace(/[a-z]/g, function(letter){\n        return letter.toUpperCase();\n\
    \    });\n}\n", "  return string.replace(/[a-z]/g,(match) => { return match.toUpperCase();\
    \ });\n}\n", "    string = string.split('');\n    string = string.map(function(i){\n\
    \        return i.toLowerCase() === i ? i.toUpperCase() : i;\n    });\n    return\
    \ string.join('');\n}\n", "    return string.toLowerCase().split('').map(function(letter,\
    \ index){\n        return index%2 === 0 ? letter : letter.toUpperCase();\n   \
    \ }).join('');\n}\n</code>\n<|/ a tags=javascript,jquery |>\n<| c |>\nThe `if`\
    \ statement in the first `map` could be `return index%2 ? letter : letter.toUpperCase();`.\n\
    <|/ c |>\n<| c |>\nThat looks nicer.\n<|/ c |>\n<| a tags=javascript,jquery |>\n\
    Just use this code \n<code>\nvar word = \"HELLO\";\nword = word.replace(/[aeiou]/g,\
    \ '').toLowerCase();", "  return string.split('').map(function(character){\n \
    \   return character.toLowerCase() === character ? '' + character.toUpperCase()\
    \ : character.toLowerCase();\n  }).join('');\n}\n", "  return string.split('').map(function(letter){\n\
    \    return letter.charCodeAt(0) > 64 && letter.charCodeAt(0) < 91 ? String.fromCharCode(letter.charCodeAt(0)\
    \ - 32) : letter;\n  }).join('');\n}\n", "    return string.replace(/[a-z]/g,\
    \ function(match){ return match.toUpperCase() });\n}\n", "\tvar flipped = string.split('').reverse().join('');\n\
    \treturn flipped.toUpperCase();\n}\n", "  return string.split('').map((char)=>{\n\
    \    if(char.toLowerCase() === char.toUpperCase()){\n      return char.toUpperCase()\n\
    \    }\n    return char.toLowerCase()\n  }).join('')\n}\n", "  return string.split(\"\
    \").map(char => {\n      if (char === char.toUpperCase()) {\n          return\
    \ char.toLowerCase();\n      }\n      else {\n          return char.toUpperCase();\n\
    \      }\n  }).join(\"\");\n}\n", "    var newString = '';\n    for(var i = 0;\
    \ i<string.length; i++){\n        if(string[i].toUpperCase() != string[i]){\n\
    \            newString += string[i].toUpperCase();\n        } else {\n       \
    \     newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n\
    }\n", "\treturn string.toUpperCase().replace(/[a-z]/g,function(m){return m.toUpperCase()});\n\
    }\n", "    return string.toLowerCase().replace(/[A-Z]/g, function(match){return\
    \ match.toUpperCase()});\n}\n", "  return string.toLowerCase().replace(/[A-Z]/g,\
    \ function(c){ return c.toUpperCase(); });\n}\n", "    // Flip lowercase characters\
    \ to uppercase\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n\
    }\n", "    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n", " \
    \   string = string.toLowerCase()\n    string= string.charAt(0).toUpperCase()\
    \ + string.slice(1).toLowerCase()\n    return string\n}\n", "\treturn string.replace(/[A-Z]/g,\
    \ function(match){\n\t\treturn match.toUpperCase();\n\t});\n}\n", "    return\
    \ string.toLowerCase().replace(/[a-z]/g,function(c){\n        return (c.toUpperCase());\n\
    \    }).replace(/[A-Z]/g,function(c){\n        return (c.toLowerCase());\n   \
    \ });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is good, except it will only\
    \ work for English text and isn't very flexible.  It will break when your language\
    \ is Turkish or Russian or Arabic.  And then there are the numerous other languages\
    \ you would want to support.\n<|/ c |>\n<| c |>\nOf course this is an important\
    \ point to mention, however, the OP asked for a specific case. My answer is not\
    \ an answer to the specific question asked in the OP but an answer to _\"What\
    \ is the best way to convert a string to lowercase?\"_\n<|/ c |>\n<| a tags=javascript,uppercase\
    \ dscore=2 |>\nHere's an example for you:\n<code>", "    return string.split('').reduce((string,char)=>\n\
    \    {\n        if(char.toLowerCase()===char.toUpperCase())\n        {\n     \
    \       return string.toUpperCase();\n        }\n        else\n        {\n   \
    \         return string.toLowerCase();\n        }\n    }, string);\n}\n", "  return\
    \ string.split('').map(function(a){\n    return a.toLowerCase() + (a.toUpperCase()\
    \ === a ? a.toUpperCase() : a.toLowerCase());\n  }).join('');\n}\n", "    return\
    \ string.split('').reverse().join('').split('').reverse().join('');\n}\n", " \
    \ return string\n    .toLowerCase()\n    .toUpperCase();\n}\n", "    return string.toUpperCase().replace(/[a-z]/g,\
    \ function(char) {\n        return char.toUpperCase();\n    });\n}\n", "  return\
    \ string.toLowerCase().replace(/[a-z]/g,function(m){return m.toUpperCase();});\n\
    }\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThe last line should be\
    \ `return string.toLowerCase().replace(/[a-z]/g,function(m){return m.toUpperCase();});`.\
    \ `toUpperCase()` returns a string, not a function. You need to pass it a callback.\n\
    <|/ c |>\n<| a tags=javascript,string |>\n<code>", "    return string.split('').map(function(i){\n\
    \        return i === i.toLowerCase() ? i.toUpperCase() : i.toLowerCase();\n \
    \   }).join('');\n}\n", "  return string.split('')\n    .map(function(x){\n  \
    \    if (x == x.toUpperCase()) return x.toLowerCase()\n      return x.toUpperCase()\n\
    \    })\n    .join('')\n}\n", "  string = string.toLowerCase();\n  string = string.toUpperCase();\n\
    \  string = string.toLowerCase();\n  return string;\n}\n", "    var i, newString,\
    \ string = string.toUpperCase();\n    for (i=0; i < string.length; i++) {\n  \
    \      if (string[i] === string[i].toUpperCase()) {\n            newString = newString\
    \ + string[i].toLowerCase();\n        } else {\n            newString = newString\
    \ + string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", " \
    \   return string.toLowerCase()\n                .replace(/([a-z])([A-Z])/g, '$1-$2')\n\
    \                .replace(/^./, function(m) { return m.toLowerCase(); });\n}\n",
  "    return string.split('').reduce((a,b) => {\n        return a += b.toUpperCase()\
    \ === b.toLowerCase() ? b.toLowerCase() : b.toUpperCase();\n    })\n}\n", "  \
    \  return string.toLowerCase()\n                .toUpperCase()\n             \
    \   .toLowerCase();\n}\n", "  return string.split('')\n    .map(function(char){\n\
    \      return char.charCodeAt(0)\n        >= 65\n        && char.charCodeAt(0)\n\
    \        <= 90\n        ? char.toUpperCase()\n        : char.toLowerCase();\n\
    \    })\n    .join('');\n}\n", "  return string.replace(/[a-z]/gi,function(str){\n\
    \    return str.toUpperCase();\n  }).replace(/[A-Z]/,function(str){\n    return\
    \ str.toLowerCase();\n  });\n}\n", "    return string.replace(/[a-z]+/g,\n   \
    \ function(c){\n        return c.toUpperCase();\n    }\n    );\n}\n", "  return\
    \ string.toLowerCase().split(' ').join('')\n                        .split('-').join('')\n\
    \                        .split('.').join('')\n                        .split(',').join('')\n\
    \                        .split('!').join('')\n                        .split('?').join('')\n\
    \                        .split(':').join('')\n                        .split(';').join('')\n\
    \                        .split('#').join('')\n                        .split('$').join('')\n\
    \                        .split('&').join('')\n                        .split('(').join('')\n\
    \                        .split(')').join('')\n                        .split(']').join('')\n\
    \                        .split('[').join('')\n                        .split('{').join('')\n\
    \                        .split('}').join('');\n}\n</code>\n<|/ a |>\n<| a |>\n\
    This solution is based on this answer:\n<code>", "  var newStr = \"\";\n  for(var\
    \ i=0; i< string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n\
    \      newStr += string[i].toLowerCase();\n    } else {\n      newStr += string[i];\n\
    \    }\n  }\n  return newStr;\n}", "    return string.split('').map(function(i){\n\
    \        if(i === i.toUpperCase()){\n            return i.toLowerCase();\n   \
    \     } else {\n            return i.toUpperCase();\n        }\n    }).join('');\n\
    }\n", "  return string.toLowerCase().split('').reduce((accumulator, character)\
    \ => {\n    if (character === character.toUpperCase()){\n      return accumulator\
    \ + character.toLowerCase();\n    } else {\n      return accumulator + character.toUpperCase();\n\
    \    }\n  }, string.charAt(0))\n}\n", "    return string.toLowerCase().split('').reverse().join('');\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=regex,javascript dscore=0 |>\nHere's\
    \ my solution, it's simple and straightforward.\n<code>", "    return string.toLowerCase().replace(/[a-z]/g,function(match){\n\
    \        return match.toUpperCase();\n    }).replace(/[A-Z]/g,function(match){\n\
    \        return match.toLowerCase();\n    });\n}\n", "    return string.split('').reverse().join('');\n\
    }\n", "  return string.toLowerCase().split('').reduce((a,b)=>(b?(a+b.toUpperCase()):(a+b.toLowerCase())),'');\n\
    }\n</cell>\n<cell>", "  return string.toUpperCase()\n    .replace(/[a-z]/g, function(letter)\
    \ {\n      return String.fromCharCode(letter.charCodeAt(0) - 32);\n    });\n}\n",
  "    return string.toLowerCase().replace(/[A-Z]/g,function(c){\n      return c.toUpperCase();\n\
    \    })\n}\n\n", "  return string.split('').map(function (char){\n    return char.toUpperCase()\
    \ === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()\n  }).join('')\n\
    }\n", "  return string.split('').map(function(char){\n    return char.toUpperCase()\
    \ === char ? char.toLowerCase() : string.toUpperCase();\n  }).join('');\n}\n",
  "\treturn string.replace(/([a-z])([A-Z])/g,\n\t\tfunction(match, from_lower, to_upper){\n\
    \t\t\treturn from_lower + to_upper.toUpperCase();\n\t\t}\n\t);\n}\n", "    let\
    \ str_array = string.split('');\n    str_array.forEach((char,i) => {\n       \
    \ if(char === char.toUpperCase()){\n            str_array[i] = char.toLowerCase();\n\
    \        }\n        else if(char === char.toLowerCase()){\n            str_array[i]\
    \ = char.toUpperCase();\n        }\n    });\n    return str_array.join('');\n\
    }\n", "    return string.split('').map(function(char){\n        return char ===\
    \ char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }).join('');\n\
    }\n", "    switch(string){\n        case 'A':\n            return 'a';\n     \
    \   case 'a':\n            return 'A';\n        case '\xC0':\n            return\
    \ '\xC0';\n        case '\xE0':\n            return '\xE0';\n        case '\xE8\
    ':\n            return '\xE8';\n        case '\xE9':\n            return '\xE9\
    ';\n        case '\xEC':\n            return '\xEC';\n        case '\xED':\n \
    \           return '\xED';\n        case '\xF2':\n            return '\xF2';\n\
    \        case '\xF3':\n            return '\xF3';\n        case '\xF9':\n    \
    \        return '\xF9';\n        case '\xFA':\n            return '\xFA';\n  \
    \      case '\xC0\xC0':\n            return '\xC0\xC0';\n        case '\xE0\xC0\
    ':\n            return '\xE0\xC0';\n        case '\xE8\xE8':\n            return\
    \ '\xE8\xE8';\n        case '\xE9\xE8':\n            return '\xE9\xE8';\n    \
    \    case '\xEC\xEC':\n            return '\xEC\xEC';\n        case '\xED\xEC\
    ':\n            return '\xED\xEC';\n        case '\xF2\xF2':\n            return\
    \ '\xF2\xF2';\n        case '\xF3\xF2':\n            return '\xF3\xF2';\n    \
    \    case '\xF9\xF9':\n            return '\xF9\xF9';\n        case '\xFA\xF9\
    ':\n            return '\xFA\xF9';\n        case '\xC0\xE8':\n            return\
    \ '\xC0\xE8';\n        case '\xE0\xE8':\n            return '\xE0\xE8';\n    \
    \    case '\xE8\xEC':\n            return '\xE8\xEC';\n        case '\xE9\xEC\
    ':\n            return '\xE9\xEC';\n        case '\xEC\xF2':\n            return\
    \ '\xEC\xF2';\n        case '\xED\xF2':\n            return '\xED\xF2';\n    \
    \    case '\xF2\xF9':\n            return '\xF2\xF9';\n        case '\xF3\xF9\
    ':\n            return '\xF3\xF9';\n        case '\xF9\xEC':\n            return\
    \ '\xF9\xEC';\n        case '\xFA\xEC':\n            return '\xFA\xEC';\n    \
    \    case '\xC0\xEC':\n            return '\xC0\xEC';\n        case '\xE0\xEC\
    ':\n            return '\xE0\xEC';\n        case '\xE8\xF2':\n            return\
    \ '\xE8\xF2';\n        case '\xE9\xF2':\n            return '\xE9\xF2';\n    \
    \    case '\xEC\xF9':\n            return '\xEC\xF9';\n        case '\xED\xF9\
    ':\n            return '\xED\xF9';\n        case '\xF2\xEC':\n            return\
    \ '\xF2\xEC';\n        case '\xF3\xEC':\n            return '\xF3\xEC';\n    \
    \    case '\xF9\xF2':\n            return '\xF9\xF2';\n        case '\xFA\xF2\
    ':\n            return '\xFA\xF2';\n        case '\xC0\xF2':\n            return\
    \ '\xC0\uFFFD", "\treturn string.toLowerCase().split('').map( (letter) => letter.toUpperCase()\
    \ ).join('');\n}\n\n", "  let result = string.toLowerCase();\n  for(let i = 0;\
    \ i < result.length; i++){\n    const letter = result[i];\n    result[i] = result[i].toUpperCase();\n\
    \    result[i] = result[i].toLowerCase();\n  }\n  return result;\n}", "  var result\
    \ = '';\n  for(var i=0; i<string.length; i++){\n    var character = string[i];\n\
    \    if(character.toLowerCase()) result += character.toUpperCase();\n    else\
    \ result += character.toLowerCase();\n  }\n  return result;\n}\n", "    return\
    \ string.split('').reduce(function(stringFlipped,char){\n        return char.toLowerCase()\
    \ === char ? stringFlipped + char.toUpperCase() : stringFlipped + char;\n    },'');\n\
    }\n", "  return string.toLowerCase().replace(/[a-z]/g, function(c){\n    return\
    \ c.toUpperCase();\n  });\n}\n", "    var flipped_string = string;\n    for(var\
    \ i = 0; i < flipped_string.length; i++){\n        var character = flipped_string[i];\n\
    \        if(character === character.toLowerCase()){\n            flipped_string\
    \ = flipped_string.slice(0, i) + flipped_string.slice(i+1, i) + flipped_string.slice(i,\
    \ i+1) + flipped_string.slice(i+1, i+2);\n        }\n    }\n    return flipped_string;\n\
    }\n", "    return string.replace(/[a-z]/gi, function(f){\n        return f.toUpperCase();\n\
    \    }).replace(/[A-Z]/gi, function(f){\n        return f.toLowerCase();\n   \
    \ });\n}\n", "  var flipped = \"\";\n  for(var i = 0; i < string.length; i++){\n\
    \    var character = string[i];\n    switch(character){\n      case \"A\": character\
    \ = \"a\"; break;\n      case \"B\": character = \"b\"; break;\n      case \"\
    C\": character = \"c\"; break;\n      case \"D\": character = \"d\"; break;\n\
    \      case \"E\": character = \"e\"; break;\n      case \"F\": character = \"\
    f\"; break;\n      case \"G\": character = \"g\"; break;\n      case \"H\": character\
    \ = \"h\"; break;\n      case \"I\": character = \"i\"; break;\n      case \"\
    J\": character = \"j\"; break;\n      case \"K\": character = \"k\"; break;\n\
    \      case \"L\": character = \"l\"; break;\n      case \"M\": character = \"\
    m\"; break;\n      case \"N\": character = \"n\"; break;\n      case \"O\": character\
    \ = \"o\"; break;\n      case \"P\": character = \"p\"; break;\n      case \"\
    Q\": character = \"q\"; break;\n      case \"R\": character = \"r\"; break;\n\
    \      case \"S\": character = \"s\"; break;\n      case \"T\": character = \"\
    t\"; break;\n      case \"U\": character = \"u\"; break;\n      case \"V\": character\
    \ = \"v\"; break;\n      case \"W\": character = \"w\"; break;\n      case \"\
    X\": character = \"x\"; break;\n      case \"Y\": character = \"y\"; break;\n\
    \      case \"Z\": character = \"z\"; break;\n      case \"a\": character = \"\
    A\"; break;\n      case \"b\": character = \"B\"; break;\n      case \"c\": character\
    \ = \"C\"; break;\n      case \"d\": character = \"D\"; break;\n      case \"\
    e\": character = \"E\"; break;\n      case \"f\": character = \"F\"; break;\n\
    \      case \"g\": character = \"G\"; break;\n      case \"h\": character = \"\
    H\"; break;\n      case \"i\": character = \"I\"; break;\n      case \"j\": character\
    \ = \"J\"; break;\n      case \"k\": character = \"K\"; break;\n      case \"\
    l\": character = \"L\"; break;\n      case \"m\": character = \"M\"; break;\n\
    \      case \"n\": character = \"N\"; break;\n      case \"o\": character = \"\
    O\"; break;\n      case \"p\": character = \"P\"; break;\n      case \"q\": character\
    \ = \"Q\"; break;\n      case \"r\": character = \"R\"; break;\n      case \"\
    s\": character = \"S\"; break;\n      case \"t\": character = \"T\"; break;\n\
    \      case \"u\": character = \"U\"; break;\n      case \"v\": character = \"\
    V\"; break;\n      case \"w\": character = \"W\"; ", "    return string.split('').reverse().join('');\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 tags=javascript,string |>\n<code>\n\
    var str=\"Hello World\";\nvar newStr=str.toUpperCase()+str.charAt(0).toUpperCase();\n\
    </code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\nvar str = \"Hello World\";\nvar result\
    \ = str.charAt(0).toUpperCase() + str.slice(1);\n</code>\n<|/ a tags=javascript,string\
    \ |>\n<| c |>\nThis solution has a subtle bug: if `str` is an empty string, this\
    \ expression evaluates to an empty string. It should instead use `str[0].toUpperCase()\
    \ + str.slice(1)`. See my answer for details.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    var str = \"Hello World\";\nvar newStr = str.replace(/^./, function(a){\n    return\
    \ a.toUpperCase();\n});\n</code>\n<|/ a tags=javascript,string |>\n<| a dscore=3\
    \ |>\nThe other answers posted here didn't seem to work for me, but this did:\n\
    <code>\nvar word = 'Hello World';\nword = word.charAt(0).toUpperCase() + word.slice(1);\n\
    </code>\n<|/ a tags=javascript,string |>\n<| a tags=javascript,string dscore=3\
    \ |>\n<code>\nvar word = 'Hello World';\nword = word.toUpperCase();\nword = word.charAt(0).toUpperCase()\
    \ + word.slice(1);\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\nvar str=\"Hello\
    \ World\";\nvar newStr=str.toUpperCase()+str.charAt(0).toUpperCase();\n</code>\n\
    <|/ a tags=javascript,string |>\n<| a dscore=2 |>\nTry this:\n<code>\nvar str\
    \ = \"Hello World\";\nvar newStr = str.charAt(0).toUpperCase() + str.slice(1);\n\
    </code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis answer is a great example\
    \ of how to answer a question that has been asked thousands of times. But please\
    \ add some text explaining what the code does and why you think it works.\n<|/\
    \ c |>\n<| a dscore=2 |>\nA little modification from jonathan moore's answer\n\
    <code>\nvar str = \"Hello World\";\nvar newStr = str.charAt(0).toUpperCase() +\
    \ str.slice(1);\n</code>\n<|/ a tags=javascript,string |>\n<| a dscore=2 |>\n\
    The answers given are correct and correctly, but incomplete.\nThe question asked\
    \ how to do both uppercase and lowercase in the same string. So, if the string\
    \ is \"hello world\", the answers given would ", "  return string.split('')\n\
    \    .reduce((accumulator, currentValue) => accumulator + currentValue.toUpperCase())\n\
    \    .toUpperCase();\n}\n", "\treturn string.toUpperCase().split('').map(c =>\
    \ c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase()).join('');\n}\n",
  "    var newString = ''\n    for(var i = 0, len = string.length; i < len; i++){\n\
    \        var letter = string.charAt(i)\n        if(letter === letter.toUpperCase()){\n\
    \            newString += letter.toUpperCase()\n        } else {\n           \
    \ newString += letter\n        }\n    }\n    return newString\n}\n", "    return\
    \ string.split('').map(function(x) { \n        return x.toUpperCase() === x ?\
    \ x.toLowerCase() : x.toUpperCase() \n    }).join('');\n}", "  return string.split('')\n\
    \    .reverse()\n    .map(function(x){\n      return x.toUpperCase();\n    })\n\
    \    .join('');\n}\n", "    return string.replace(/([a-z])([A-Z])/g, '$1' + String.fromCharCode('$2').charCodeAt(0)\
    \ + '$2')\n}\n", "    return string.split('').map(function(char){\n        return\
    \ char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase();\n   \
    \ }).join('');\n}\n", "  return string.split(' ').map(word => word.charAt(0).toUpperCase()\
    \ + word.slice(1)).join(' ')\n}\n", "    return string.toUpperCase().split('').map(function(char){\n\
    \        if(char.toLowerCase() === char.toUpperCase()){\n            return char.toUpperCase();\n\
    \        }\n        return char.toLowerCase();\n    }).join('');\n}", "    return\
    \ string.toLowerCase().replace(/([A-Z])/g,function(a){\n        return a.toUpperCase();\n\
    \    });\n}\n", "\tvar strLower = string.toLowerCase();\n\tvar strUpper = string.toUpperCase();\n\
    \treturn strUpper + strLower.charAt(0).toLowerCase() + strLower.substr(1); \n\
    }\n", "    return string.toLowerCase().split('')\n            .map(function(character){\n\
    \                return character.toUpperCase();\n            })\n           \
    \ .join('');\n}\n", "    return string.split(\"\").map(function(i){\n        return\
    \ i.toLowerCase() === i ? i.toUpperCase() : i.toLowerCase();\n    }).join(\"\"\
    );\n}\n", "\tvar flip = \"\";\n\tfor(var i in string){\n\t\tif(string.charAt(i)\
    \ == '!')\n\t\t\tflip += '!';\n\t\telse\n\t\t\tflip += string.charAt(i);\n\t}\n\
    \treturn flip;\n}", "  return string.split('').map(function(item){\n    if(item\
    \ === item){\n      return item.toUpperCase()\n    }\n    return item.toLowerCase()\n\
    \  }).join('')\n}\n", "  return string.split('').map(function(char){\n    return\
    \ char.toUpperCase() === char.toLowerCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \  }).join('');\n}\n", "    return string.split('').map(\n            function(x){\n\
    \                return (x.toUpperCase() === x) ?\n                        x.toLowerCase()\
    \ : x.toUpperCase();\n            }\n        ).join('');\n}\n", "\treturn string.replace(/[a-z]/g,\
    \ function(c){\n\t\treturn String.fromCharCode(c.charCodeAt(0)+ 32); \n\t});\n\
    }\n\n", "    return string.replace(/[a-z]/g, x => { return x.toUpperCase(); });\n\
    }", "  return string.split('').map(function(x){\n    return String.fromCharCode(x.charCodeAt(0)+32);\
    \ \n  }).join('');\n}\n", "  var str = '';\n  for(var i=0;i<string.length;i++){\n\
    \    if(string.charAt(i)>=97 && string.charAt(i)<=122){\n      str = str + string.charAt(i)\
    \ + string.charAt(i)\n    }else{\n      str = str + string.charAt(i)\n    }\n\
    \  }\n  return str;\n}\n", "    var upperCased_string = string.toLowerCase();\n\
    \    var lowerCased_string = string.toUpperCase();\n    return lowerCased_string;\n\
    }\n", "    return string.split('').map(function(str) {\n        return str ===\
    \ str.toUpperCase() ? str.toLowerCase() : str.toUpperCase();\n    }).join('');\n\
    }\n", "    return string.split('').map(x => {\n        if (/[a-z]/.test(x))\n\
    \            return x.toUpperCase();\n        else\n            return x.toLowerCase();\n\
    \    }).join('');\n}\n", "    var strArr = string.split('');\n    strArr.forEach(function\
    \ (val, index){\n        if(val.toLowerCase() === val){\n            strArr[index]\
    \ = val.toUpperCase();\n        }\n    });\n    return strArr.join('');\n}\n",
  "    return string.toLowerCase()\n        .replace(/^(.)/, function (match, captured_letter){\n\
    \            return (captured_letter.toUpperCase()) + match.toUpperCase();\n \
    \       });\n}\n", "    return string.toLowerCase().split('')\n        .map(function(x){return\
    \ x.toUpperCase()})\n        .join('');\n}\n", "    return string.toLowerCase().split('').map(function(char,\
    \ index, array){\n        if(index != 0 && char.charCodeAt(0) != char.charCodeAt(0)\
    \ - 32){\n            return char.toUpperCase();\n        }\n        return char;\n\
    \    }).join('');\n}\n", "    string = string.toLowerCase();\n    string = string.toUpperCase();\n\
    \    string = string.toUpperCase();\n    return string;\n}\n", "  var newString\
    \ = '';\n  for(var i = 0; i < string.length; i++){\n    if(string.charCodeAt(i)\
    \ > 90){\n      newString += string.charAt(i) + string.charAt(i).toUpperCase();\n\
    \    }\n    else{\n      newString += string.charAt(i);\n    }\n  }\n  return\
    \ newString;\n}\n", "    return string.split('').reverse().join('');\n}", "  \
    \  return string.toLowerCase().replace(/([a-z](?=[A-Z]))/g,\n        function\
    \ (g) {\n            return g.toUpperCase();\n        });\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < string.length; i++) {\n    result += string[i]\
    \ === string[i].toLowerCase() ?\n      string[i].toUpperCase() : string[i].toLowerCase();\n\
    \  }\n  return result;\n}\n", "  var upper = string.toUpperCase();\n  var lower\
    \ = string.toLowerCase();\n\n  return upper + lower;\n}\n", "    \n    // Loop\
    \ through string characters.\n    for(var i = 0; i < string.length; i++){\n  \
    \      //If character is lowercase.\n        if(string[i] === string[i].toUpperCase()){\n\
    \            //Change it to uppercase.\n            string[i] = string[i].toUpperCase();\n\
    \        }\n        //Else if character is uppercase.\n        else if(string[i]\
    \ === string[i].toLowerCase()){\n            //Change it to lowercase.\n     \
    \       string[i] = string[i].toLowerCase();\n        }\n    }\n    return string;\n\
    }", "\treturn string.split('').map(function(l){\n\t\treturn l.toUpperCase();\n\
    \t}).join('');\n}\n", "  if(typeof string === 'string'){\n    string = string.toUpperCase();\n\
    \    string = string.toLowerCase();\n  }else{\n    console.error('String must\
    \ be of type string.');\n  }\n  return string;\n}", "    return string.split('').map(function(char){\n\
    \        return char.toLowerCase() === char.toUpperCase() ? char.toUpperCase()\
    \ : char.toLowerCase();\n    }).join('');\n}\n", "  return string.toLowerCase().replace(/[a-z]/g,\
    \ function(m){\n    return m.toUpperCase();\n  }).replace(/[A-Z]/g, function(m){\n\
    \    return m.toLowerCase();\n  });\n}\n", "  return string.split('').map(function\
    \ (letter) {\n    return letter.toLowerCase() === letter ? letter.toUpperCase()\
    \ : letter;\n  }).join('');\n}\n", "  var new_string = string.toUpperCase();\n\
    \  new_string = new_string.toLowerCase();\n  return new_string;\n}\n", "  return\
    \ string.replace(/[a-z]/g,function(c){\n    return c.toUpperCase();\n  }).replace(/[A-Z]/g,function(c){\n\
    \    return c.toLowerCase();\n  });\n}\n", "  return string.toLowerCase().split('').reduce((prev,current)=>{\n\
    \    return prev+current.toUpperCase()\n  })\n}\n", "    \n    let string = string.toLowerCase();\n\
    \    let newString = string.toUpperCase();\n    return newString;\n}\n", "   \
    \ return string.toLowerCase()\n}\n", "    return string.replace(/^./g, (char)\
    \ =>{\n        return char.toUpperCase();\n    }).replace(/[aeiou]/g, (char) =>{\n\
    \        return char.toLowerCase();\n    });\n}\n", "  return(\n    string\n \
    \   .toLowerCase()\n    .replace(\n      /([a-z]+|[A-Z]+)(?=[A-Z])/g,\n      match\
    \ => match.toUpperCase()\n    )\n    .replace(\n      /([A-Z]+|[a-z]+)(?=[A-Z])/g,\n\
    \      match => match.toLowerCase()\n    )\n  );\n}\n*/\n", "  return string.toUpperCase().replace(/[a-z]/g,function(c){return\
    \ c.toUpperCase();});\n}\n", "  return string.replace(/[a-z]/g, function(letter){\n\
    \    return letter.toUpperCase();\n  }).replace(/[A-Z]/g, function(letter){\n\
    \    return letter.toLowerCase();\n  });\n}", "    return string.split('').map((letter)\
    \ => letter.toUpperCase()).join('');\n}\n", "  return string.replace(/([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))/g,function(letter,i,s)\
    \ {\n    return (i && letter == letter.toLowerCase()) ? letter.toUpperCase() :\
    \ letter;\n  });\n}\n", "    let flip_case_str = ''\n    for (let i=0; i < string.length;\
    \ i++){\n        if (string[i] === string[i].toLowerCase()){\n            flip_case_str\
    \ += string[i].toUpperCase()\n        }else{\n            flip_case_str += string[i].toLowerCase()\n\
    \        }\n    }\n    return flip_case_str\n}\n", "    return string.toUpperCase().replace(\
    \ /[^A-Z]/g, function(letter){\n        return letter.toUpperCase();\n    });\n\
    }", "    return string.replace(/[a-z]/ig, function (){return String.fromCharCode(String.fromCharCode(this).toLowerCase())}).toLowerCase();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks alot. I'll implement this and see\
    \ how it goes.\n<|/ c |>\n<| a tags=javascript,capitalization,lowercase,regex\
    \ dscore=1 |>\nYou could use something like:\n<code>\nvar str = \" this is an\
    \ example\";\nvar replaced = str.replace(/([a-z])([A-Z])/, '$1\\u$2')\n</code>\n\
    <|/ a |>\n<| c |>\nThis answer was posted before your edit with the regex in it.\
    \ The original regex didn't work for strings with more than one lowercase character\
    \ in a row, for example `'aA'` instead of `'aA'`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "\tvar result = string.toLowerCase();\n\t\n\tfor(var i = result.length\
    \ - 1; i >= 0; --i){\n\t\tif(result.charCodeAt(i) >= 65 && result.charCodeAt(i)\
    \ <= 90){\n\t\t\tresult += result.charAt(i);\n\t\t}else{\n\t\t\tresult += (result.charCodeAt(i)\
    \ - 32).toString() + result.charAt(i);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n",
  "    return string.toLowerCase().split('')\n                .map(c => c.toUpperCase())\n\
    \                .join('')\n                .toUpperCase();\n}", "    string =\
    \ string.toLowerCase();\n    string = string.toUpperCase();\n    string = string.toLowerCase();\n\
    \    return string;\n}\n</code>\n<|/ a tags=javascript,string,regex |>\n<| c |>\n\
    Nice, but you missed this bit in the question: \"This should also handle spaces\
    \ and special characters.\" And I'm not sure what your regex does with `string.replace(/^\\\
    W/g, '')`, but you're basically saying \"If there is no letter, just remove it\"\
    .\n<|/ c |>\n<| c |>\nThe regex is supposed to match only word characters and\
    \ remove all other characters that aren't word characters or spaces. The OP will\
    \ have to modify the regex to suit their needs.\n<|/ c |>\n<| c |>\nAh I see,\
    \ I think I misinterpreted the question. Thanks for the clarification!\n<|/ c\
    \ |>\n<| a tags=javascript,string,regex |>\nHere is my solution:\n<code>", " \
    \ return string.replace(/([a-z])([A-Z])/g,\"$1 $2\");\n}\n", "    return string.split('').map(function(char){\n\
    \        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \    }).join('');\n}\n", "    return string.replace(/[a-z]/g, function($1){return\
    \ $1.toUpperCase();});\n}\n", "    return string.replace(/[^a-zA-Z]/g, function(character){\n\
    \        return character.toUpperCase();\n    });\n}", "    return string.charAt(0).toUpperCase()\
    \ + string.slice(1).toLowerCase();\n}", "\tvar flipped_string = '';\n\tfor (var\
    \ i = 0; i < string.length; i++){\n\t\tif(string[i] == string[i].toUpperCase()){\n\
    \t\t\tflipped_string += string[i].toLowerCase();\n\t\t}\n\t\telse{\n\t\t\tflipped_string\
    \ += string[i].toUpperCase();\n\t\t}\n\t}\n\treturn flipped_string;\n}\n", " \
    \   return string.split('').map(function(x){return x.toUpperCase()}).join('').toUpperCase();\n\
    }\n", "    return string.toLowerCase()\n                .toUpperCase()\n     \
    \           .replace(/[a-z]/g, function (char) { return char.toUpperCase(); });\n\
    }", "  string = string.toLowerCase();\n  return string.charAt(0).toUpperCase()\
    \ + string.slice(1);\n}\n", "    return string.replace(/[a-z]/g,\n        function(c){\n\
    \            return c.toUpperCase()\n        }\n    ).replace(/[A-Z]/g,\n    \
    \    function(c){\n            return c.toLowerCase()\n        }\n    )\n}\n",
  "  var i, j, temp;\n\n  for(i = 0; i < string.length; i++){\n    temp = string[i];\n\
    \n    for(j = 0; j < string.length; j++){\n      if(string[i] === string[j]){\n\
    \        if(string[i] === string[j].toUpperCase()){\n          temp = string[i];\n\
    \          string[i] = string[j].toLowerCase();\n          string[j] = temp;\n\
    \        }\n      }\n    }\n  }\n\n  return string;\n}\n", "    return string.toLowerCase().split('').reverse().join('');\n\
    }\n", "    return string.replace(\n        /[a-z]/g,\n        function (c){\n\
    \            return c.toUpperCase()\n        })\n    .replace(\n        /[A-Z]/g,\n\
    \        function (c){\n            return c.toLowerCase()\n        })\n}\n",
  "    switch(typeof string){\n        case \"string\":\n            return string.split(\"\
    \").map(function(character){\n                return character.toUpperCase();\n\
    \            }).join(\"\");\n        default:\n            return \"Not a string\"\
    ;\n    }\n}\n", "\tvar str = string.toLowerCase()\n\tvar str2 = str.toUpperCase()\n\
    \tstr = str.replace(/\\S/g,'') + str2.replace(/\\S/g,'')\n\treturn str\n}\n",
  "  var result = '';\n  var i;\n  var l = string.length;\n  var c;\n\n  for (i =\
    \ 0; i < l; i++){\n    c = string.charAt(i);\n    if (c.toUpperCase() === c) {\n\
    \      result += c.toLowerCase();\n    } else {\n      result += c;\n    }\n \
    \ }\n\n  return result;\n}\nmodule.exports = flip_case;\n},{}],\"/Users/christianalfoni/Documents/dev/flugel/web/node_modules/process/browser.js\"\
    :[function(require,module,exports){", "    return string.split('').reverse().join('');\n\
    }\n", "    string = string.toLowerCase();\n    string = string.toUpperCase();\n\
    \    string = string.trim();\n    return string;\n}", "\treturn string.toUpperCase().split('').map(function(char){return\
    \ char.toLowerCase()}).join('');\n}", "    return string.replace(/[a-z]+/gi, function(f){\n\
    \        return f.toUpperCase()\n    }).replace(/[A-Z]+/gi, function(f){\n   \
    \     return f.toLowerCase()\n    });\n}\n", "    return string.toUpperCase().replace(/./g,function(c){\n\
    \        return c.toUpperCase();\n    });\n}\n", "  return string.toLowerCase()\n\
    \    .replace(/[a-z]/g, x => x.toUpperCase())\n    .replace(/[A-Z]/g, x => x.toLowerCase());\n\
    }\n", "    var str = '';\n    for(var i = 0, len = string.length; i < len; i++){\n\
    \        str += string.charAt(i).toLowerCase() + string.charAt(i).toUpperCase();\n\
    \    }\n    return str;\n}\n", "  let output = \"\";\n  for(let i=0; i<string.length;\
    \ i++){\n    if( string[i] === string[i].toUpperCase() ){\n      output += string[i].toLowerCase();\n\
    \    }\n    else{\n      output += string[i].toUpperCase();\n    }\n  }\n  return\
    \ output;\n}\n", "    string = string.toLowerCase();\n    return string.charAt(0).toUpperCase()\
    \ + string.slice(1);\n}\n", "  return string.split(\"\").map(function(char){\n\
    \    return char.toUpperCase() == char ? char.toLowerCase() : char.toUpperCase();\n\
    \  }).join(\"\");\n}\n", "  var output = '';\n  for(var i = 0; i < string.length;\
    \ i++){\n    var char = string[i];\n    if(char === char.toUpperCase()){\n   \
    \   char = char.toLowerCase();\n    }else if(char === char.toLowerCase()){\n \
    \     char = char.toUpperCase();\n    }\n    output += char;\n  }\n  return output;\n\
    }\n", "  return string.split('').map(function(character){\n    return character\
    \ === character.toUpperCase()? character.toLowerCase():character.toUpperCase();\n\
    \  }).join('');\n}\n", "    var new_string = \"\";\n    var string = string.toLowerCase();\n\
    \    var stringLower = string.split('');\n    for(var i = 0; i < stringLower.length;\
    \ i++){\n        if(stringLower[i] === stringLower[i].toUpperCase()){\n      \
    \      new_string += stringLower[i].toLowerCase();\n        }else{\n         \
    \   new_string += stringLower[i];\n        }\n    }\n    return new_string;\n}",
  "    return string.toLowerCase().replace(/([a-z])([A-Z])/g, '$1' + String.fromCharCode()\
    \ + '$2');\n}\n", "  return string.replace(/[a-z]/ig, function(){\n    return\
    \ arguments[0].toUpperCase();\n  }).replace(/[A-Z]/g, function(){\n    return\
    \ arguments[0].toLowerCase();\n  });\n}\n", "    return string.toLowerCase().replace(/[a-z]/g,\
    \ (m) => m.toUpperCase());\n}\n", "\tvar ret = \"\";\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tif(i % 2 == 0){\n\t\t\tret += string[i].toUpperCase();\n\t\t}\n\t\
    \telse{\n\t\t\tret += string[i].toLowerCase();\n\t\t}\n\t}\n\treturn ret;\n}",
  "    return string.split('').map(function(v){\n        return v.toLowerCase() ===\
    \ v ? v.toUpperCase() : v.toLowerCase();\n    }).join('');\n}\n", "    let result\
    \ = '';\n    for (const letter of string){\n        result += letter.charCodeAt(0)\
    \ > 64 && letter.charCodeAt(0) < 91 ? 'A'+ letter.charCodeAt(0) - 'a' : letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0) + 32;\n    }\n    return result;\n}\n\n", "  return string.split('').reverse().join('');\n\
    }\n", "  return string.toLowerCase().replace(/[a-z]/g, function(m){\n    return\
    \ m.toUpperCase();\n  });\n}\n", "    return string.split(' ').map(s => s.toLowerCase()).join('\
    \ ');\n}\n", "  let s = string.toLowerCase();\n  let i = s.length - 1;\n  for(let\
    \ j = 0; j < s.length; j++){\n    if(j > 0 && s.charAt(j) ===\n      s.charAt(j\
    \ + 1) && s.charAt(j) !== s.charAt(j + 1)){\n      s = s.slice(0, j) + s.charAt(j).toUpperCase()\
    \ + s.slice(j + 1) + s.charAt(j);\n      i--;\n    }\n  }\n  return s;\n}\n",
  "    return string.split('').map(function(character){\n        return character\
    \ === character.toLowerCase() ?\n                    character.toUpperCase() :\n\
    \                    character.toLowerCase();\n    }).join('');\n}\n", "  return\
    \ string.toLowerCase().replace(/[a-z]/g, function(char){\n    return char.toUpperCase();\n\
    \  });\n}\n", "    return string.toUpperCase().replace(/[a-z]/g,function(letter){\n\
    \        return String.fromCharCode(letter.charCodeAt(0)+32);\n    });\n}\n",
  "  return string.split('').map(function (c){\n      return c === c.toUpperCase()\
    \ ? c.toLowerCase() : c.toUpperCase()\n  }).join('')\n}\n\n", "    string = string.toLowerCase();\
    \ //Lowercase string\n    string = string.toUpperCase(); //Uppercase string\n\
    \    return string; //Return uppercase string\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
