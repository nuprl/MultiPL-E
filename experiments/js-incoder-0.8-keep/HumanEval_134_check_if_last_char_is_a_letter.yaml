name: HumanEval_134_check_if_last_char_is_a_letter
language: js
prompt: "//Create a function that returns True if the last character\n// of a given\
  \ string is an alphabetical character and is not\n// a part of a word, and False\
  \ otherwise.\n// Note: \"word\" is a group of characters separated by space.\n//\
  \ Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n// check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n// check_if_last_char_is_a_letter(\"\") \u279E False\nfunction check_if_last_char_is_a_letter(txt){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n\
  \  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"\
  eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"\
  Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n\
  \  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee\
  \ e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"\
  apple pi e \"),false);\n}\n\ntest();"
completions: ["    return txt.slice(-1) == \" \" && !is_word_end(txt)\n}\n", "  txt=txt.replace(/[^a-zA-Z]+/g,\"\
    \");\n  return txt.substring(txt.length-1)===txt.charAt(txt.length-1);\n}\n",
  "    if(txt===\"\"){\n        return false;\n    }\n    let last_char = txt.slice(-1);\n\
    \    if(last_char !== \" \" && last_char !== \"\"){\n        let last_char_index\
    \ = txt.lastIndexOf(\" \")\n        if(last_char_index > -1){\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "    return /^[a-zA-Z][a-zA-Z\
    \ ]+$/.test(txt.slice(-1));\n}\n", "    //Split text into an array of words.\n\
    \    var words = txt.split(\" \");\n    //If the length of the array is larger\
    \ than 2, then return False.\n    if(words.length > 2){\n        return false;\n\
    \    }\n    //Iterate through the words.\n    for(var i = words.length - 1; i\
    \ >= 0; i--){\n        //If the character at the index of the iteration is not\
    \ a letter.\n        if(words[i].match(/[a-zA-Z]/) == null){\n            //Return\
    \ False and break out of the loop.\n            return false;\n        }\n   \
    \ }\n    //Return True because the loop has broken out.\n    return true;\n}\n",
  "    let word_array = txt.split(\" \");\n    if (word_array.length > 0) {\n    \
    \    let last_char = word_array[word_array.length - 1];\n        if (last_char.length\
    \ < 1) {\n            return false;\n        } else {\n            return last_char.match(/.$/)\
    \ != null;\n        }\n    }\n    return false;\n}\n", "  txt = txt.trim();\n\
    \  if(txt.length == 0){\n    return false;\n  }\n  var last = txt.charAt(txt.length\
    \ - 1);\n  var is_last_letter_a_letter = (\n    (last >= 'a' && last <= 'z') ||\n\
    \    (last >= 'A' && last <= 'Z')\n  );\n  if(!is_last_letter_a_letter){\n   \
    \ return false;\n  }\n  var word_begin_index = txt.lastIndexOf(\" \");\n  var\
    \ word_end_index = txt.lastIndexOf(\" \", word_begin_index - 1);\n  var word_begin_letter\
    \ = txt.substring(0, word_begin_index);\n  var word_end_letter = txt.substring(word_end_index\
    \ + 1);\n  if(word_begin_letter != word_end_letter){\n    return false;\n  }\n\
    \  return true;\n}\n", "    if (txt === null || txt === undefined) return false;\n\
    \    var lastchar = txt[txt.length-1];\n    if (lastchar == \"\") return false;\n\
    \    var all_letters = /^[a-z]+$/;\n    if (!all_letters.test(lastchar)) return\
    \ false;\n    var parts = txt.split(\" \");\n    for(var i = 0; i < parts.length;\
    \ i++){\n        var part = parts[i];\n        // We ignore whitespace at the\
    \ beginning and the end of a word\n        if (part === \"\" || part.startsWith(\"\
    \ \") || part.endsWith(\" \")) continue;\n        var last_letter = part[part.length-1];\n\
    \        if (/^[a-z]+$/.test(last_letter)) return false;\n    }\n    return true;\n\
    }\n", "    if (txt === \"\") return false;\n    var lastChar = txt.charAt(txt.length-1);\n\
    \    var firstChar = txt.charAt(0);\n    if (lastChar === firstChar && !first_letter_or_whitespace(lastChar))\
    \ {\n        return false;\n    }\n    var lastWord = txt.substr(0,txt.length-1);\n\
    \    return !last_word_or_whitespace(lastWord);\n}\n", "    if(txt.length > 0){\n\
    \        var last_char_index = $(\".\" + txt ).length - 1;\n        var last_char\
    \ = $(\".\" + txt ).eq(last_char_index).text();\n        return (last_char.match(/[a-zA-Z]/)\
    \ && !last_char.match(/[\\sA-Z]/));\n    }else{\n        return false;\n    }\n\
    }\n", "\treturn txt.slice(-1) === \" \" && !txt.match(/[a-zA-Z]$/);\n}\n", "\t\
    txt = txt.replace(/\\s+/g, '');\n\treturn txt[txt.length-1].match(/\\w/) != null;\n\
    }\n<|/ file ext=.js dstars=0 filename=functions.js |>", "    return txt.slice(-1).toLowerCase()\
    \ !== \" \";\n}\n", "    let len = txt.length;\n    return txt.slice(-1)[0].toUpperCase()\
    \ === \" \" && !(check_if_last_char_is_a_word(txt.slice(-2, -1)));\n}\n", "  \
    \  if(txt.length <= 0)\n        return false;\n    var last_char = txt.charAt(txt.length-1);\n\
    \    var last_char_uppercase = last_char.toUpperCase();\n    var is_first_char_in_word\
    \ = false;\n    var is_last_char_in_word = false;\n    var is_last_char_in_word_or_space\
    \ = false;\n    var is_last_char_a_letter = false;\n    var char_code = 0;\n \
    \   for(var i = 0; i < txt.length; i++){\n        char_code = txt.charCodeAt(i);\n\
    \        if(char_code >= 65 && char_code <= 90)\n            is_last_char_a_letter\
    \ = true;\n        else if(char_code >= 97 && char_code <= 122)\n            is_last_char_a_letter\
    \ = true;\n        else if(char_code >= 48 && char_code <= 57)\n            is_last_char_a_letter\
    \ = true;\n        else if(char_code == 32 || char_code == 9)\n            is_last_char_a_letter\
    \ = true;\n        else if(char_code == 46 || char_code == 45 || char_code ==\
    \ 95)\n            is_last_char_a_letter = true;\n        else if(char_code >=\
    \ 97 && char_code <= 122)\n            is_last_char_a_letter = true;\n       \
    \ else if(char_code >= 65 && char_code <= 90)\n            is_last_char_a_letter\
    \ = true;\n        else\n            is_last_char_a_letter = false;\n        if(is_last_char_a_letter)\n\
    \            is_last_char_in_word_or_space = true;\n        if(is_first_char_in_word)\n\
    \            is_last_char_in_word = true;\n        if(is_last_char_in_word ||\
    \ is_last_char_a_letter || is_last_char_in_word_or_space)\n            is_last_char_in_word\
    \ = false;\n        is_last_char_a_letter = false;\n    }\n    return is_last_char_in_word\
    \ && !is_first_char_in_word;\n}\n", "\tvar letters_not_in_words = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n\tvar word_separator = \" \";\n\tvar letters_separated\
    \ = txt.split(word_separator);\n\tfor(var i = 0, len = letters_separated.length;\
    \ i < len; i++) {\n\t\tif(letters_separated[i][0] && letters_separated[i].length\
    \ == 1) {\n\t\t\t//first character is alphabetical\n\t\t\treturn false;\n\t\t\
    }\n\t\tvar last_char = letters_separated[i].slice(-1);\n\t\tif(last_char == \"\
    s\" || last_char == \"z\" || last_char == \"t\") {\n\t\t\t//last character is\
    \ alphabetical\n\t\t\treturn false;\n\t\t}\n\t\tif(last_char === letters_not_in_words)\
    \ {\n\t\t\t//last character is non-alphabetical\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\t//if we get to here, the text is OK.\n\treturn true;\n}", "    let arr =\
    \ txt.split(' ');\n    return arr[arr.length - 1][0].toLowerCase() !== arr[arr.length\
    \ - 1][0].toUpperCase();\n}\n", "    // Write your code here.\n    return txt.split('\
    \ ').length == 1 && txt.split(' ')[0].length == txt.length && txt.split(' ').slice(-1)\
    \ == txt.split(' ')[0];\n}", "  var word = txt.split(' ');\n  var last_char =\
    \ word[word.length-1];\n  var is_a_letter = last_char.match(/[a-zA-Z]/g);\n\n\
    \  return (is_a_letter && ! last_char.match(/\\w/g));\n}\n", "\t// Return False\
    \ if the given text does not contain a letter.\n\tif( !txt || txt.length < 1 ){\n\
    \t\treturn false;\n\t}\n\t\n\t// Create a new array of all the letters in the\
    \ string.\n\tlet arr = txt.split(\" \").map(item => item);\n\t\n\t// Create a\
    \ new empty array.\n\tlet new_arr = [];\n\t\n\t// Cycle through each item in the\
    \ \"arr\" array.\n\tarr.map(function(item,i){\n\t\t// If this item is an alphabetical\
    \ letter, then return True.\n\t\tif( /^[A-Za-z]+$/.test(item) ){\n\t\t\tnew_arr.push(item);\n\
    \t\t}\n\t});\n\t\n\t// If the length of the new_arr array is equal to the length\
    \ of the \n\t// string then return True. Otherwise, return False.\n\treturn (new_arr.length\
    \ === txt.length);\n}\n\n", "  return txt.slice(-1)!=\" \" && txt.slice(-2)==\"\
    \ \"\n}\n", "  var letters = \"abcdefghijklmnopqrstuvwxyz\";\n  return txt.slice(-1).match(new\
    \ RegExp(letters + \"$\"));\n}\nvar last_char = check_if_last_char_is_a_letter(\"\
    apple pi e \");", "    var last_char = txt.substring(txt.length-1,txt.length);\n\
    \    var last_char_as_array = last_char.split(' ');\n    if(last_char_as_array.length\
    \ > 0){\n        if(last_char_as_array[0].length > 1){\n            return false;\n\
    \        }\n    }else{\n        return false;\n    }\n    return true;\n}", " \
    \   return txt.slice(-1)!==\" \"&&txt.slice(-1) == \" \".split(\" \").map(function(word){\n\
    \        return word[word.length-1];\n    }).join(\"\");\n}\n", "\t// Your code\
    \ here\n}\n", "  // Return False if the last character is not a letter\n  return\
    \ txt[txt.length-1]!==\"a\"&&txt[txt.length-1]!==\"e\"&&txt[txt.length-1]!==\"\
    i\"&&txt[txt.length-1]!==\"o\"&&txt[txt.length-1]!==\"u\"\n}\n", "  return txt.length\
    \ > 0 && txt.substr(-1) == ' ' && txt.substr(-2)[0] < 'a';\n}\n", "  let words\
    \ = txt.split(\" \");\n  let lastChar = words[words.length -1];\n  return lastChar.match(/[a-zA-Z]$/)\
    \ !== null;\n}\n", "  // Write your code here\n}\n", "    if (txt.length >= 1){\n\
    \        return (txt.slice(-1) === \" \") && !check_if_last_char_is_a_word(txt);\n\
    \    }\n    return false;\n}\n", "    let n = txt.length\n    let last_char =\
    \ txt.slice(-1)\n    let last_word_index = txt.lastIndexOf(\" \")\n    if (last_word_index\
    \ > -1) {\n        last_word = txt.slice(last_word_index+1)\n    }\n    if (last_char.trim().length\
    \ == 1 && last_char != \" \") {\n        return true\n    } else if (n-1 === last_word_index){\n\
    \        //If the last character is the end of the string,\n        // or if it\
    \ is a word ending in whitespace (\" \"),\n        // then the last character\
    \ is not the end of a word.\n        return false\n    } else {\n        return\
    \ true\n    }\n}\n", "  if(txt.length>0 && txt[txt.length-1]!==\" \"){\n    var\
    \ char = txt[txt.length-1];\n    return char.match(/[a-zA-Z]+$/);\n  }\n  else{\n\
    \    return false;\n  }\n}\n", "  let re = new RegExp(\"[a-z ]+$\");\n  if (re.test(txt)\
    \ && txt.charAt(txt.length - 1) != \" \"){\n    return true;\n  }\n  return false;\n\
    }\n", "    // Create a variable that will be returned if the input string\n  \
    \  // does not end with a letter\n    var return_if_not_a_letter = true;\n   \
    \ // Create a variable that will be returned if the input string\n    // does\
    \ not end with a letter\n    var return_if_not_a_word = true;\n    // Create a\
    \ variable that is the length of the input string\n    var word_length = txt.length;\n\
    \    // Create a variable that is the length of the input string\n    var char_length\
    \ = txt.length;\n    // Create a variable that is the last character of the string\n\
    \    var last_char = txt[word_length - 1];\n    // Create a variable that is the\
    \ length of the input string\n    var text_length = txt.length;\n    // Create\
    \ a variable that will be returned if the last character\n    // of the input\
    \ string is not an alphabetical character\n    var return_if_not_an_alphabet =\
    \ true;\n\n    // Create a loop that iterates over the input string\n    // A\
    \ for loop iterates over a collection\n    for (i = 0; i < text_length; i++){\n\
    \        // Create a variable that is the current character in the string\n  \
    \      var char = txt[i];\n        // Create a variable that is the length of\
    \ the input string\n        var char_length = txt.length;\n        // Create a\
    \ variable that will be returned if the current character\n        // of the input\
    \ string is an alphabetical character\n        var return_if_not_an_alphabet =\
    \ true;\n        // Create a loop that iterates over the input string\n      \
    \  // A for loop iterates over a collection\n        for (j = 0; i < char_length;\
    \ j++){\n            // Create a variable that is the current character in the\
    \ string\n            var char_j = txt[j];\n            // Create a variable that\
    \ is the length of the input string\n            var char_length = txt.length;\n\
    \            // Create a variable that is the current character in the string\n\
    \            var current_char = txt[j];\n            // Create a variable that\
    \ is the length of the input string\n            var text_length = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var word_length = txt.length;\n            // Create a variable that\
    \ is the length of the input string\n            var word_length_2 = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var word_length_3 = txt.length;\n            // Create a variable that\
    \ is the length of the input string\n            var char_length_2 = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var char_length_3 = txt.length;\n            // Create a variable that\
    \ is the length of the input string\n            var char_length_4 = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var text_length_2 = txt.length;\n            // Create a variable that\
    \ is the length of the input string\n            var text_length_3 = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var text_length_4 = txt.length;\n            // Create a variable that\
    \ is the length of the input string\n            var char_length_length_2 = txt.length;\n\
    \            // Create a variable that is the length of the input string\n   \
    \         var char_length_length_3 = txt.length;\n            // Create a variable\
    \ that is the length of the input string\n            var char_length_length_4\
    \ = txt.length;\n            // Create a variable that is the length of the input ",
  "  return txt[txt.length-1].match(alpha_char_only)===null;\n}\n", "    let lastCharacter\
    \ = txt.charAt(txt.length-1);\n    if (lastCharacter === ' ' || lastCharacter\
    \ === '.' || lastCharacter === '-' || lastCharacter === '+') {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    return !/\\S/.test(txt[txt.length-1])\
    \ && /\\w$/.test(txt);\n}\n", "  var last_char = txt[txt.length-1];\n  if (last_char\
    \ === \" \" || last_char === \".\" || last_char === \",\" || last_char === \"\
    '\" || last_char === \"-\" || last_char === \"_\" || last_char === \"?\" || last_char\
    \ === \"!\" || last_char === \"'\" || last_char === \"<\" || last_char === \"\
    >\" || last_char === \"=\" || last_char === \"[\" || last_char === \"]\" || last_char\
    \ === \"{\" || last_char === \"}\" || last_char === \"(\"\n  || last_char ===\
    \ \")\" || last_char === \"/\" || last_char === \"@\" || last_char === \"#\" ||\
    \ last_char === \"!\" || last_char === \"$\" || last_char === \"&\" || last_char\
    \ === \"*\" || last_char === \"%\" || last_char === \"+\" || last_char === \"\
    |\" || last_char === \"?\" || last_char === \"{\" || last_char === \"}\"){\n \
    \   return false;\n  }else{\n    return true;\n  }\n}\n", "  var words = txt.trim().split(\"\
    \ \");\n  if(words.length == 0){\n    return false;\n  }\n  var lastChar = words[words.length-1][words[words.length-1].length-1];\n\
    \  if(lastChar == \" \"){\n    return false;\n  }\n  if(lastChar == \"a\" || lastChar\
    \ == \"e\" || lastChar == \"i\" || lastChar == \"o\" || lastChar == \"u\" || lastChar\
    \ == \"A\" || lastChar == \"E\" || lastChar == \"I\" || lastChar == \"O\" || lastChar\
    \ == \"U\" || lastChar == \"n\" || lastChar == \"\xF1\" || lastChar == \"\xE1\"\
    \ || lastChar == \"\xE9\" || lastChar == \"\xED\" || lastChar == \"\xF3\" || lastChar\
    \ == \"\xFA\"){\n    return false;\n  }\n  return true;\n}\n", "  var words =\
    \ txt.split(\" \");\n  var word = \"\";\n  for(var i = 0; i<words.length; i++){\n\
    \    if(words[i].slice(-1)){\n      word += words[i].slice(-1);\n    } else {\n\
    \      if(word.slice(-1)){\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    var last_char = txt.slice(-1);\n    if(last_char === \" \"\
    ){\n        return false;\n    }\n    var word_array = txt.split(\" \");\n   \
    \ for(var i in word_array){\n        if(word_array[i][0] === last_char){\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n", "    var words\
    \ = txt.split(' ');\n    return words[words.length-1].charCodeAt(0) <= 64 && words[words.length-1].charCodeAt(0)\
    \ > 128;\n}\n", "  var a = txt.split(\" \");\n  return a.pop().slice(-a.length)\
    \ === a.slice(-1)[0].toUpperCase();\n}\n", "    let lastChar = txt.slice(-1);\n\
    \    let lastCharIsAWord = lastChar.match(/\\s/);\n    return lastCharIsAWord\
    \ && lastChar !== '.';\n}\n", "    if(txt.includes(\" \")){\n        return false;\n\
    \    }\n    const last_char = txt.substr(txt.length-1, 1);\n    if(/^[a-zA-Z]$/.test(last_char)){\n\
    \        return false;\n    }\n    return true;\n}\n", "    if (txt.length > 0)\
    \ {\n        switch (txt[txt.length -1]) {\n            case 'a':case 'e':case\
    \ 'i':case 'o':case 'u':\n                return false;\n            default:\n\
    \                return true;\n        }\n    } else {\n        return false;\n\
    \    }\n}\n", "    if (txt.length < 2) return false; \n    let lastChar = txt[txt.length-1]\n\
    \    return lastChar.isAlpha() && !word_in_string(lastChar, txt)\n}\n\n", "  return\
    \ txt.slice(-1)[0]!=' '\n}\n", "  return txt.charAt(txt.length-1) != ' ' && is_alphabetic(txt.charAt(txt.length-1));\n\
    }\n", "\tvar isLastCharAlpha = false;\n\tvar charArray = txt.split(\" \");\n\t\
    var lastChar = charArray[charArray.length-1];\n\tvar isLastCharAWord = false;\n\
    \tfor (var i = 0; i<charArray.length; i++){\n\t\tvar char = charArray[i];\n\t\t\
    isLastCharAlpha = isLastCharAlpha || char.match(check_regexp);\n\t\tisLastCharAWord\
    \ = isLastCharAWord || char.match(/[a-z]/);\n\t}\n\treturn isLastCharAlpha &&\
    \ !isLastCharAWord;\n}\n", "  let txt = txt.split(\" \");\n  for(let i = 0; i\
    \ < txt.length; i++){\n    if(txt[i] === txt[i].toUpperCase() && i !== txt.length\
    \ - 1){\n      return False;\n    }\n  }\n  return True;\n}\n", "    let last_char\
    \ = txt.charAt(txt.length-1);\n    return last_char == alphabet_chars.find(c =>\
    \ c != \" \") ? false : true;\n}\n", "  var is_letter = (txt[txt.length - 1] >=\
    \ 'a' && txt[txt.length - 1] <= 'z')\n  var words_in_string = (txt.match(/[^a-z]/g)\
    \ || []).length\n  var is_word_in_string = is_letter && words_in_string == 1\n\
    \  return !is_word_in_string\n}\n", "    if(txt.charAt(txt.length-1) != \" \"\
    ){\n      return(false);\n    }\n    return(true);\n}\n", "  let check_last_char\
    \ = txt[txt.length-1]\n  let chars_in_word = txt.match(/[\\w ]+/g)\n  chars_in_word.push(check_last_char)\n\
    \  for(let i=0; i<chars_in_word.length; i++){\n    if(chars_in_word[i] !== ' '\
    \ && chars_in_word[i] !== check_last_char){\n      return false\n    }\n  }\n\
    \  return true\n}\n", "  return txt[txt.length-1] != \" \" && txt[txt.length-1]\
    \ != \".\" && txt[txt.length-1] != \"!\" && txt[txt.length-1] != \"?\" && txt[txt.length-1]\
    \ != \"_\" && txt[txt.length-1] != \"-\";\n}\n", "\treturn lastChar => !(lastChar.match(/[a-z]/)\
    \ && lastChar !== \" \");\n}", "  return txt.charAt(txt.length-1) == \" \" &&\
    \ txt.search(\"[a-zA-Z]+\") === -1;\n}\n", "  var lastChar = txt.charAt(txt.length-1);\n\
    \  if (lastChar == \" \" || lastChar == \"\\t\") {\n    if (txt.match(/[a-z]/i)\
    \ && txt.match(/[A-Z]/)){\n      console.log(true);\n      return txt;\n    }\n\
    \    else{\n      console.log(false);\n      return txt;\n    }\n  }\n  else{\n\
    \    console.log(txt);\n    return txt;\n  }\n}\n", "  // your code here\n  return\
    \ true;\n}\n", "    return txt.slice(-1)===\" \";\n}", "  // Your code goes here\n\
    \  const isLastCharLetter = isAlpha(txt[txt.length-1])\n  return isLastCharLetter\
    \ && !isWord(txt)\n}\n", "    if(txt.length < 2){\n        return false;\n   \
    \ }\n    var last_char = txt.charAt(txt.length-1);\n    var is_last_alphabetical\
    \ = alphabetical.indexOf(last_char) >= 0;\n    return !is_last_alphabetical &&\
    \ last_char !== \" \";\n}\n", "\tvar last_char = txt.substr(txt.length - 1, 1);\n\
    \treturn last_char && !(/\\w$/).test(last_char);\n}\n", "    return txt.charAt(txt.length-1)!=='\
    \ ' && /[a-zA-Z]/.test(txt.slice(0,txt.length-1))\n}\n", "  return txt.slice(-1).replace(/\\\
    b[a-z]$/, \"\") === \"\";\n}\n", "  var words = txt.split(/\\s+/);\n  if(words.length\
    \ < 2) return false;\n  if(words[words.length-1].length == 0) return false;\n\
    \  return !words[words.length-1].match(/^\\W+$/);\n}\n", "  txt = txt.trim();\n\
    \  if(txt.length<=1){\n    return false;\n  }\n  if(txt.slice(-1) === \" \" ||\
    \ txt.slice(-1) === \"\"){\n    return false;\n  }\n  var i = txt.lastIndexOf(\"\
    \ \");\n  var letters = txt.slice(0, i).split(\" \");\n  var last_letter = letters[letters.length-1];\n\
    \  if(last_letter in ALPHABET){\n    return true;\n  }\n  return false;\n}\n",
  "    var last_char = txt.slice(-1);\n    var words = [\"apple\",\"pie\",\"potato\"\
    ,\"banana\",\"bread\",\"can\"],\n        word = words[words.length-1];\n    \n\
    \    // If the last char in the string is an alphabetical char,\n    // and the\
    \ string is not part of a word, then the function returns true\n    if ( last_char.match(/[a-z]/)\
    \ && words.indexOf(word) == -1){\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n", "  txt = txt.trim();\n  return txt[txt.length-1]\
    \ === \" \" && ! is_word_char(txt);\n}\n", "    //Your code here\n    if(txt.length\
    \ < 2 ){\n        return false;\n    }\n    let lastChar = txt.slice(-1)[0];\n\
    \    if (lastChar===\" \"){\n        return false\n    }\n    let words = txt.split(\"\
    \ \");\n    let lastWord = words[words.length-1];\n    if (lastWord.includes(lastChar)){\n\
    \        return true;\n    }\n    return false;\n}", "    var last_char = txt.slice(-1);\n\
    \    var words = txt.split(\" \");\n    return words.some(function(word){\n  \
    \      var regex = /^[a-zA-Z]+$/;\n        return regex.test(word) && word !=\
    \ last_char;\n    });\n}\n", "  let last_char = txt.slice(-1)\n  if (last_char\
    \ === ' ' || last_char === null) {\n    return false\n  } else {\n    let words\
    \ = txt.slice(0, -1).split(' ')\n    return (words.every((word) => word.length\
    \ <= 1 && word.match(/\\s/g) === null))\n  }\n}\n", "  return txt[txt.length-1]\
    \ == ' ' && !is_a_word(txt);\n}\n", "  var regex = /(^|\\s)[a-z](\\s|$)/;\n  return\
    \ regex.test(txt);\n}\n", "  let str = txt.split(\" \")\n  let last_char = str[str.length-1]\n\
    \  if(last_char.length === 1){\n    return false\n  }\n  else{\n    let last_char\
    \ = str[str.length-1]\n    let is_letter = last_char.match(/[A-Za-z]/)\n    return\
    \ !is_letter\n  }\n}\n", "\t\n\tvar chars = txt.split(\" \");\n\t// If there is\
    \ no more chars to process, return False\n\tif (chars.length === 0) {\n\t\treturn\
    \ false;\n\t}\n\t// If there is just one char to process, return it\n\tif (chars.length\
    \ === 1) {\n\t\treturn chars[0];\n\t}\n\t// Return True iff the last char is a\
    \ letter\n\treturn chars[chars.length-1].search(/^[A-Za-z]/) === -1;\n}\n", " \
    \ let regex = /^[a-zA-Z]+$/;\n  return !regex.test(txt);\n}\n", "    let lastChar\
    \ = txt[txt.length - 1]; //Get the last char in the string\n    return lastChar\
    \ === \" \" || lastChar === \"-\" || lastChar === \"_\" || lastChar === \"?\"\
    \ || lastChar === \"!\" || lastChar === \"?\" || lastChar === \"!\" || lastChar\
    \ === \"A\" || lastChar === \"B\" || lastChar === \"C\" || lastChar === \"D\"\
    \ || lastChar === \"E\" || lastChar === \"F\" || lastChar === \"G\" || lastChar\
    \ === \"H\" || lastChar === \"I\" || lastChar === \"J\" || lastChar === \"K\"\
    \ || lastChar === \"L\" || lastChar === \"M\" || lastChar === \"N\" || lastChar\
    \ === \"O\" || lastChar === \"P\" || lastChar === \"Q\" || lastChar === \"R\"\
    \ || lastChar === \"S\" || lastChar === \"T\" || lastChar === \"U\" || lastChar\
    \ === \"V\" || lastChar === \"W\" || lastChar === \"X\" || lastChar === \"Y\"\
    \ || lastChar === \"Z\" || lastChar === \"a\" || lastChar === \"b\" || lastChar\
    \ === \"c\" || lastChar === \"d\" || lastChar === \"e\" || lastChar === \"f\"\
    \ || lastChar === \"g\" || lastChar === \"h\" || lastChar === \"i\" || lastChar\
    \ === \"j\" || lastChar === \"k\" || lastChar === \"l\" || lastChar === \"m\"\
    \ || lastChar === \"n\" || lastChar === \"o\" || lastChar === \"p\" || lastChar\
    \ === \"q\" || lastChar === \"r\" || lastChar === \"s\" || lastChar === \"t\"\
    \ || lastChar === \"u\" || lastChar === \"v\" || lastChar === \"w\" || lastChar\
    \ === \"x\" || lastChar === \"y\" || lastChar === \"z\";\n}\n", "    let last_char\
    \ = txt.substring(txt.length-1);\n    return last_char.match(/[A-Za-z]/);\n}\n",
  "\tvar res = false;\n\tfor(var i=txt.length-1; i>=0; i--){\n\t\tres = res || txt.charAt(i).match(/[a-z]+$/i)\
    \ ? true : false;\n\t}\n\treturn res;\n}\n", "  return txt[txt.length - 1] ==\
    \ ' ' && last_char_is_a_letter(txt);\n}\n", "  // Convert our string to lower\
    \ case and split it into individual words\n  let words = txt.toLowerCase().split(\"\
    \ \");\n  \n  // Return the result if all the words are alphabetical characters\
    \ and the last character isn't a letter\n  // Otherwise, return False\n  return\
    \ words.every(word => /^[a-z]+$/.test(word)) && !words[words.length-1].match(/[^a-z]/)\n\
    }\n", "    txt = txt.toLowerCase().replace(/ /g,\"\");\n    return ((txt[txt.length-1]\
    \ >= \"a\" && txt[txt.length-1] <= \"z\") || \n            (txt[txt.length-1]\
    \ >= \"A\" && txt[txt.length-1] <= \"Z\"));\n}\n", "  //Check to see if the last\
    \ char is not a letter\n  var lastChar = txt.substr(-1);\n  if(lastChar.match(/[a-z]/)\
    \ == null){\n    return true;\n  }\n  return false;\n}\n", "    return !is_word_in_txt(txt.substr(-1))\
    \ && txt.substr(-1) != ' ';\n}\n", "  return txt.length-1 === txt.charAt(txt.length-1)\
    \ && /[^A-Za-z]$/.test(txt)\n}\n", "\t// 1. Create the string with each character\
    \ separated by a space.\n\tvar word_with_spaces = txt.replace(/ /g,\" \").trim();\n\
    \t// 2. Find out if the last character of that string is an alphabetical character.\n\
    \treturn word_with_spaces[word_with_spaces.length-1].match(/[a-z]/i) && !word_with_spaces.match(/\\\
    w/);\n}\n\t", "\t// Make sure that the input is a string.\n\tif(typeof txt ===\
    \ \"string\"){\n\t\t// Set a variable to store the output of this function.\n\t\
    \tvar check = false;\n\t\t// Set a variable to count the number of spaces in the\
    \ input string.\n\t\tvar space_count = (txt.split(\" \").length - 1);\n\t\t//\
    \ Set a variable to keep track of the last character.\n\t\tvar last_char = \"\"\
    ;\n\t\t\n\t\t// Loop through all the characters in the input string.\n\t\tfor(var\
    \ i=0; i<txt.length; i++){\n\t\t\t// Only run this code if the character is a\
    \ letter and it is not the last character in the string.\n\t\t\tif((txt[i] >=\
    \ \"A\" && txt[i] <= \"Z\") || txt[i] === \"_\" || txt[i] === \"-\"){\n\t\t\t\t\
    // If the character is a letter and the previous character is a letter, then\n\
    \t\t\t\t// the character is not the last character in the string. Thus, this letter\
    \ is\n\t\t\t\t// a part of a word.\n\t\t\t\tif(txt[i] === txt[i-1]){\n\t\t\t\t\
    \t// If the character is a letter and it is not the last character in the string,\n\
    \t\t\t\t\t// then this character is not the last character in the string.\n\t\t\
    \t\t\tif(txt[i] !== last_char){\n\t\t\t\t\t\t// The character is not the last\
    \ character in the string.\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t// Set a variable\
    \ to keep track of the last character.\n\t\t\t\t\t\tlast_char = txt[i];\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t\t// If the character is a letter and the previous character\
    \ is not a letter, then\n\t\t\t\t// the character is not the last character in\
    \ the string. Thus, this character is\n\t\t\t\t// a part of a word.\n\t\t\t\t\
    else{\n\t\t\t\t\t// If the character is a letter and it is not the last character\
    \ in the string,\n\t\t\t\t\t// then this character is not the last character in\
    \ the string.\n\t\t\t\t\tif(txt[i] !== last_char){\n\t\t\t\t\t\t// The character\
    \ is not the last character in the string.\n\t\t\t\t\t\tcheck = false;\n\t\t\t\
    \t\t\t// Set a variable to keep track of the last character.\n\t\t\t\t\t\tlast_char\
    \ = txt[i];\n\t\t\t\t\t}\n\t\t\t\t\t// If the character is a letter and the previous\
    \ character is a letter, then\n\t\t\t\t\t// the character is not the last character\
    \ in the string. Thus, this letter is\n\t\t\t\t\t// a part of a word.\n\t\t\t\t\
    \telse{\n\t\t\t\t\t\t// If the character is a letter and it is not the last character\
    \ in the string,\n\t\t\t\t\t\t// then this character is not the last character\
    \ in the string.\n\t\t\t\t\t\tif(txt[i] !== last_char){\n\t\t\t\t\t\t\t// The\
    \ character is not the last character in the string.\n\t\t\t\t\t\t\tcheck = false;\n\
    \t\t\t\t\t\t\t// Set a variable to keep track of the last character.\n\t\t\t\t\
    \t\t\tlast_char = txt[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If the character is a\
    \ letter and the previous character is not a letter, then\n\t\t\t\t\t\t// the\
    \ character is not the last character in the string. Thus, this character is\n\
    \t\t\t\t\t\t// a part of a word.\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t// If the character\
    \ is a letter and it is not the last character in the string,\n\t\t\t\t\t\t\t\
    // then this character is not the last character in the string.\n\t\t\t\t\t\t\t\
    if(txt[i] !== last_char){\n\t\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t\t\t// ",
  "    var lastChar = txt.charAt(txt.length-1);\n    var isAlpha = (lastChar.match(/[a-z]/)\
    \ != null);\n    return !(isAlpha);\n}\n", "    var txtLen = txt.length //Get\
    \ the length of the string\n    var lastChar = txt[txtLen - 1] //Get the last\
    \ character\n    return lastChar.match(/[a-z]/i) && lastChar != \" \" //Return\
    \ True if last char is alphabetical and is not a space\n}\n", "  if(txt.length\
    \ <= 1)\n    return true;\n  \n  if(txt.charAt(txt.length - 1) == \" \" || txt.charAt(txt.length\
    \ - 1) == \".\" || txt.charAt(txt.length - 1) == \",\")\n    return false;\n \
    \ \n  if(txt.charAt(txt.length - 1) == \"'\" || txt.charAt(txt.length - 1) ==\
    \ \"-\" || txt.charAt(txt.length - 1) == \"?\")\n    return false;\n  \n  return\
    \ true;\n}\n", "  return txt.charAt(txt.length-1) != \" \" && !is_a_word(txt.substring(0,txt.length-1))\n\
    }\n", "    // Your code here\n    return true\n}\n", "    let re = /\\w$/;\n \
    \   return re.test(txt) && !/\\w$/.test(txt);\n}\n", "    var result = false;\n\
    \    var word_array = txt.split(' ');\n    for(var i=0; i<word_array.length; i++){\n\
    \        if(word_array[i][0] === word_array[i][word_array[i].length-1]){\n   \
    \         if(word_array[i].length >1){\n                result = true;\n     \
    \       }\n        }\n    }\n    return result;\n}\n", "\treturn (\n\t\t!/^[A-Za-z]+$/.test(txt)\
    \ ||\n\t\t!/[a-zA-Z]{2}$/.test(txt.slice(0,-1)) \n\t)\n}\n", "  if (txt.length\
    \ <= 0)\n    return false;\n  var last_char;\n  last_char = txt.substr(txt.length\
    \ - 1, 1);\n  if (last_char.length <= 0)\n    return false;\n  if (/^[a-zA-Z]$/.test(last_char))\n\
    \    return true;\n  return false;\n}\n", "    if(!txt){\n        return false;\n\
    \    }\n    let last_char = txt.slice(-1)[0];\n    if(last_char == \" \"){\n \
    \       return false;\n    }\n    if(last_char == \",\" || last_char == \"/\"\
    \ || last_char == \"?\" || last_char == \":\" || last_char == \".\" || last_char\
    \ == \",\" || last_char == \";\" || last_char == \":\" || last_char == \"!\" ||\
    \ last_char == \"\\\" || last_char == \"?\" || last_char == \"!\" || last_char\
    \ == \".\" || last_char == \",\" || last_char == \"@\" || last_char == \"#\" ||\
    \ last_char == \"$\" || last_char == \"%\" || last_char == \"^\" || last_char\
    \ == \"&\" || last_char == \"*\" || last_char == \"(\"){\n        return false;\n\
    \    }\n    \n    if(last_char == \"a\" || last_char == \"b\" || last_char ==\
    \ \"c\" || last_char == \"d\" || last_char == \"e\" || last_char == \"f\" || last_char\
    \ == \"g\" || last_char == \"h\" || last_char == \"i\" || last_char == \"j\" ||\
    \ last_char == \"k\" || last_char == \"l\" || last_char == \"m\" || last_char\
    \ == \"n\" || last_char == \"o\" || last_char == \"p\" || last_char == \"q\" ||\
    \ last_char == \"r\" || last_char == \"s\" || last_char == \"t\" || last_char\
    \ == \"u\" || last_char == \"v\" || last_char == \"w\" || last_char == \"x\" ||\
    \ last_char == \"y\" || last_char == \"z\"){\n        return false;\n    }\n \
    \   return true;\n}\n", "  return txt.slice(-1).match(/[a-zA-Z]+$/);\n}\n", " \
    \   return txt[txt.length-1] != \" \" && !is_in_word(txt)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nA regex solution might be the simplest and most elegant.\n\
    <code>", "    var last_char = txt.substr(txt.length - 1, 1);\n    return last_char\
    \ !== \" \" && last_char !== \".\" && last_char !== \"!\" && last_char !== \"\
    ?\";\n}\n", "    //Only execute if the string has some content\n    if (txt !=\
    \ null && txt != \"\"){\n        var txtLen = txt.length;\n        //If the last\
    \ character is a letter\n        if (txt.substr(txtLen - 1, 1)==\" \"){\n    \
    \        return false;\n        }\n        //If the last character is a letter\
    \ or number\n        else if ( /^[a-zA-Z0-9]$/.test( txt.substr(txtLen - 1, 1)\
    \ ) ){\n            return true;\n        }\n        else{\n            return\
    \ false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n</code>\n\
    <|/ a tags=javascript,string,jquery |>\n<| a |>\nA solution without regular expressions\
    \ and without splitting and using regular expressions only:\n\n<code>\nconst isLastCharacter\
    \ = (txt) => txt[txt.length - 1] === '\\n';\n", "    return txt[txt.length-1]\
    \ !== \" \" && txt[txt.length-1] !== \"-\" && txt[txt.length-1] !== \".\" && txt[txt.length-1]\
    \ !== \"!\" && txt[txt.length-1] !== \"?\" && txt[txt.length-1] !== \"-\" && txt[txt.length-1]\
    \ !== \"?\" && txt[txt.length-1] !== \"!\";\n}\n", "  var len = txt.length;\n\
    \  var last_char = txt.substr(len-1, 1);\n  var result = false;\n  if (last_char\
    \ == \" \"){\n    txt = txt.substr(0, len-1);\n  }\n  var words = txt.split(\"\
    \ \");\n  for (var i=0; i<words.length; i++){\n    if (words[i].indexOf(last_char)\
    \ > -1){\n      result = true;\n    }\n  }\n  return result;\n}\n", "    var last_char\
    \ = txt[txt.length-1];\n    var regex = /[^ ]+$/\n    return !regex.test(last_char)\
    \ && regex.test(txt);\n}", "\treturn (txt.substr(txt.length-1,1) == \"a\" || txt.substr(txt.length-1,1)\
    \ == \"e\" || txt.substr(txt.length-1,1) == \"i\" || txt.substr(txt.length-1,1)\
    \ == \"o\" || txt.substr(txt.length-1,1) == \"u\" || txt.substr(txt.length-1,1)\
    \ == \"y\");\n}\n", "    let wordArray = txt.split(\" \");\n    let word = wordArray[wordArray.length-1];\n\
    \    return word.trim().length !== word.length && /[a-zA-Z]$/.test(word);\n}",
  "  var last_char = txt.substr(txt.length-1,1);\n  if(is_letter(last_char)) return\
    \ false;\n  var word = \"pie apple pie\";\n  var word_array = word.split(\" \"\
    );\n  var word_array_length = word_array.length;\n  for(var i = 0; i < word_array_length;\
    \ i++){\n    if(word_array[i] === last_char){\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    let last_char = txt[txt.length - 1];\n    let is_letter\
    \ = alphabet.indexOf(last_char) > -1;\n    return !is_letter;\n}\n", "  var words\
    \ = txt.split(\" \");\n  var last_char = words[words.length -1];\n  return !isNaN(last_char.charCodeAt(0))\
    \ && last_char.charCodeAt(0) != 32 &&\n      !is_part_of_a_word(words[words.length\
    \ -1]);\n}\n", "  return !/\\w$/.test(txt);\n}\n", "    // Your code here\n  \
    \  if(txt.slice(-1).match(/\\s/)){\n        txt = txt.slice(0, -1);\n    }\n \
    \   txt = txt.replace(/\\s/g, \"\");\n    return !(txt.match(/\\S/));\n}\n", " \
    \ var regex = /^[a-zA-Z]+$/;\n  if (regex.test(txt)) {\n    var last = txt.slice(-1)[0];\n\
    \    if (last != \" \" && last != \"-\") {\n      return true;\n    } else {\n\
    \      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "  return\
    \ txt.slice(-1)[0] !== \" \" && txt.slice(-1)[0] !== \"w\";\n}", "    // Return\
    \ False if last char is NOT a letter or is whitespace\n    if (txt.charAt(txt.length-1)\
    \ != \" \" && txt.charAt(txt.length-1) != \"\\n\"){\n        let isLetter = false;\n\
    \        let isFirstLetter = true;\n        let isLastLetter = true;\n       \
    \ let letter = \"\";\n\n        // Iterate through each character in the string\n\
    \        for (let i = 0; i < txt.length; i++){\n            // Check if current\
    \ character is a letter\n            if (txt.charAt(i) >= \"A\" && txt.charAt(i)\
    \ <= \"Z\"){\n                isLetter = true;\n                // Set flag to\
    \ False if current character is the first letter\n                if (!isFirstLetter){\n\
    \                    isFirstLetter = false;\n                }\n             \
    \   // Set flag to False if current character is the last letter\n           \
    \     if (!isLastLetter){\n                    isLastLetter = false;\n       \
    \         }\n                // Set current letter as current letter\n       \
    \         letter = txt.charAt(i);\n            }\n            // Check if current\
    \ character is a letter or whitespace\n            if (txt.charAt(i) != \" \"\
    \ && txt.charAt(i) != \"\\n\" && txt.charAt(i) != \"\\t\"){\n                //\
    \ Set flag to False if current character is not the first letter\n           \
    \     if (!isFirstLetter){\n                    isFirstLetter = false;\n     \
    \           }\n                // Set flag to False if current character is not\
    \ the last letter\n                if (!isLastLetter){\n                    isLastLetter\
    \ = false;\n                }\n                // Set current letter as current\
    \ letter\n                letter = txt.charAt(i);\n            }\n        }\n\n\
    \        // Return True if last letter is a letter\n        return isLetter;\n\
    \    }\n    // Return False if last char is whitespace\n    if (txt.charAt(txt.length-1)\
    \ == \" \"){\n        return false;\n    }\n    // Return False if last char is\
    \ NOT a letter or is whitespace\n    if (txt.charAt(txt.length-1) != \" \" &&\
    \ txt.charAt(txt.length-1) != \"\\n\"){\n        return false;\n    }\n}\n", " \
    \ return txt.slice(-1)[0] in alphabet;\n}\n", "  var splitTxt = txt.split(\" \"\
    );\n  return splitTxt[splitTxt.length - 1].match(/[a-z]/i) && !splitTxt[splitTxt.length\
    \ - 1].match(/[A-Z]/i);\n}", "  var is_last_char_is_a_letter = false;\n  for(var\
    \ i=txt.length-1;i>0;i--){\n    var letter = txt.charAt(i);\n    if(letter!=\"\
    \ \") is_last_char_is_a_letter=true;\n  }\n  return is_last_char_is_a_letter;\n\
    }\ncheck_if_last_char_is_a_letter(\"\");", "  let text = txt.toLowerCase().trim();\n\
    \  if(text.length <= 1) return false;\n  if(text[text.length - 1] == \" \" ||\
    \ text[text.length - 1] == \".\" ) return false;\n  if(text[text.length - 2] ==\
    \ \" \" || text[text.length - 2] == \",\" ) return false;\n  return true;\n}\n",
  "  return /[a-zA-Z]$/.exec(txt)[0].trim() !== \"\";\n}\n", "    txt = txt.toLowerCase();\n\
    \    var last_char = txt.substr(-1);\n    if (last_char.match(/[a-z]/) && last_char\
    \ !== ' '){\n        return true;\n    }\n    return false;\n}\n", "    return\
    \ /\\w$/.test(txt[txt.length - 1]);\n}\n", "    var txtArr = txt.split(' ');\n\
    \    var lastChar = txtArr[txtArr.length-1];\n    var lastCharLower = lastChar.toLowerCase();\n\
    \    var lastCharUpper = lastChar.toUpperCase();\n    if (lastCharLower === lastCharUpper){\n\
    \        return true;\n    }\n    return false;\n}\n", "  return /^[a-z]+$/.exec(txt)\n\
    }\n", "  let check_last_char = function(last_char){\n    if (last_char === ' ')\
    \ return false;\n    return (/^[a-z]+$/gi.test(last_char));\n  }\n  let words\
    \ = txt.trim().split(\" \");\n  let lastChar = words[words.length-1];\n  return\
    \ (check_last_char(lastChar));\n}\n", "    return txt[txt.length-1] === \" \"\
    \ && txt.search(/[^a-z]/i) < 0;\n}\n", "    var letters = txt.split(\" \");\n\
    \    var is_letter = false;\n    letters.forEach(function(letter){\n        if(letter\
    \ == txt[txt.length-1]){\n            is_letter = true;\n            return;\n\
    \        }\n    });\n    return is_letter;\n}\n", "    var last_char = txt.slice(-1)[0];\n\
    \    var last_char_no_space = txt.slice(-1)[0].trim();\n    return last_char.match(/[a-zA-Z]/)\
    \ && last_char_no_space !== \"\";\n}\n", "  let word=txt.split(\" \");\n  for\
    \ (let i=0;i<word.length;i++){\n    if (word[i].charAt(word[i].length-1) == word[i].charAt(0)){\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "    var is_a_letter =\
    \ false;\n    var word = \"\";\n    // Create an array with every character in\
    \ txt (including spaces)\n    // Split the string into an array\n    txt.split(\"\
    \ \").forEach(function(item){\n        // Add item to the word array\n       \
    \ word += item;\n        // If item is a letter, set the flag to True\n      \
    \  if(item.match(/.[a-z]/)){\n            is_a_letter = true;\n        }\n   \
    \ });\n    // Return True only if last character is NOT a letter or a part of\
    \ word and False otherwise\n    return !is_a_letter && word.charAt(word.length-1)\
    \ != \" \";\n}\n", "    var re = new RegExp('[a-z]$');\n    var res = re.test(txt);\n\
    \    return res;\n}\n", "    var last_char = txt.substr(txt.length-1, 1);\n  \
    \  if (last_char == \"a\" || last_char == \"e\" || last_char == \"i\" || last_char\
    \ == \"o\" || last_char == \"u\" || last_char == \"y\"){\n        return false;\n\
    \    }else{\n        return true;\n    }\n}\n", "  var last_char = \"\";\n  var\
    \ words = txt.split(\" \");\n  for(var i in words){\n    last_char = words[i].charAt(words[i].length\
    \ - 1);\n  }\n  if(last_char == \" \"){\n    return true;\n  }\n  return false;\n\
    }\n", "  var words = txt.trim().split(' ');\n  var word_count = words.length;\n\
    \  var letter = words[word_count - 1];\n  if(letter.length == 1 && letter.match(/[a-z]/)){\n\
    \    return true;\n  }else{\n    return false;\n  }\n}\n", "  var len = txt.length;\n\
    \  var word = txt.split(\" \");\n  var is_a_letter = true;\n  var is_word_last_letter\
    \ = true;\n  for(var i = len-1; i >= 0; i--){\n    is_word_last_letter = txt.charAt(i)\
    \ !== word[len-1].charAt(0); //Check if the character at the given index isn't\
    \ the last character in that word.\n    is_a_letter = is_a_letter && is_word_last_letter;\
    \ //If all the above conditions are met, return true.\n  }\n  return is_a_letter;\n\
    }\n", "  return txt.trim().split(\" \").every(function(str){\n    return !str.match(new\
    \ RegExp(\"[^A-Za-z]\"))\n  });\n}\n", "    return ((txt.slice(-1)===\" \" &&\
    \ txt.search(/^[^A-Za-z]*$/)==-1) || (txt.slice(-1)===\".\" && txt.search(/^[^A-Za-z]*$/)==-1))\n\
    }", "    if (txt.length ==0 || txt.length <= 1) {\n        return false;\n   \
    \ }\n    var word = txt.trim().split(' ');\n    if (word.length === 0 || word.length\
    \ <= 1) {\n        return false;\n    }\n    var last_letter = word[word.length\
    \ - 1];\n    return (txt[txt.length-1] === last_letter) && (txt.trim().length\
    \ > 1); \n}\nvar check_if_last_char_is_a_letter_1 = check_if_last_char_is_a_letter;\n",
  "  var result = false;\n  if(txt.length > 0){\n    var last_char = txt[txt.length-1];\n\
    \    var word = $.trim(txt.substr(0, txt.length-1));\n    result = word[word.length-1]\
    \ == last_char && word.trim().length > 0;\n  }\n  return result;\n}\n", "    let\
    \ words = txt.split(\" \"); //Split text by space\n    let lastLetter = words[words.length-1].slice(-1);\
    \ //Get last letter of last word\n    let isLetter = lastLetter.isAlpha(); //Determine\
    \ if last letter is a letter\n    return !isLetter;\n}", "  // If txt is empty\
    \ string, then return False\n  if(txt.length == 0){\n    return false;\n  }\n\n\
    \  var txtArr = txt.split(' ');\n  var lastChar = txtArr[txtArr.length - 1];\n\
    \n  // If the last char is a letter, return False\n  if(lastChar.length == 1 &&\
    \ lastChar.charCodeAt(0) > 47){\n    return false;\n  }\n\n  return true;\n}\n",
  "\treturn /^[a-z]+$/.test(txt) && /[^a-zA-Z\\s]/.test(txt.substr(txt.length -1 ))\
    \ ? true : false;\n}\n", "  return txt[txt.length-1] != \" \" && !(/^[A-z]+$/).test(txt[txt.length-1]);\n\
    }\n", "    var last_char = txt.slice(-1);\n    if (last_char == \" \" || last_char\
    \ == \"\") {\n        return false\n    }\n    var first_char = txt.slice(0, 1);\n\
    \    if (first_char == \" \" || first_char == \"\") {\n        return false\n\
    \    }\n    var is_letter = true;\n    if (first_char.toUpperCase() == last_char.toUpperCase())\
    \ {\n        is_letter = false;\n    }\n    return is_letter\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    if(lastChar === \" \"){\n        return false;\n\
    \    } else {\n        return !is_a_word(lastChar);\n    }\n}\n", "\ttxt = txt.replace(/\\\
    W/g, \" \");\n\tvar word = txt.split(\" \");\n\tvar last_char = word[word.length-1];\n\
    \tif(last_char.match(/^[A-Z]+$/) && !last_char.match(/[A-Z]/g)) {\n\t\treturn\
    \ true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n", "  let last_char_index = txt.length-1;\n\
    \  return !is_part_of_word(txt[last_char_index]);\n}\n", "  return /^[a-zA-Z]+$/.test(txt)\
    \ && txt.search(/[a-zA-Z]$/g) == -1;\n}\n", "  return !/[^a-zA-Z ]$/.test(txt)\n\
    }\n", "  var arr = txt.split(\" \");\n  var txt = arr.pop();\n  if (arr.length==0){\n\
    \    return false\n  }\n  var lastChar = txt[txt.length-1];\n  if (lastChar.match(/[a-zA-Z]/)==null\
    \ && lastChar.match(/\\s/)==null){\n    return false\n  }\n  return true\n}",
  "  if (txt === \"\")\n    return false;\n  var lastChar = txt.charAt(txt.length-1);\n\
    \  var isLetter = lastChar >= 'A' && lastChar <= 'Z' || lastChar >= 'a' && lastChar\
    \ <= 'z';\n  return !isLetter || lastChar === ' ' || lastChar === '\\t' || lastChar\
    \ === '\\n';\n}\n", "  var last_char = txt.slice(-1);\n  return(last_char && last_char\
    \ !== \" \" && last_char !== '_');\n}\n", "  let check = txt.slice(-1).split(\"\
    \ \").join().split(\"\").map(Number);\n  if (check.length != 1) return false;\n\
    \  return check.reduce((a,b)=>a+b,0) == 1;\n}\n", "  return /^[A-Za-z]$/i.test(txt.slice(-1))\n\
    }\n", "  return txt[txt.length-1]===\" \";\n}\n", "  return txt.slice(txt.length\
    \ - 1, txt.length) == \" \";\n}\n", "\tvar result = txt.charAt(txt.length-1)\n\
    \treturn (result >= 'a' && result <= 'z') || (result >= 'A' && result <= 'Z');\n\
    }\n", "  var words = txt.split(\" \");\n  var last_char = words[words.length-1].split(\"\
    \");\n  var char_is_a_letter = last_char.some(function(item){\n    return item.match(/[a-z]/i);\n\
    \  });\n  return char_is_a_letter;\n}\n", "   var last_char = txt.slice(-1);\n\
    \   var is_letter_non_space = last_char.match(/[a-z]/i); //Check for letter\n\
    \   var is_word_non_space = last_char.match(/\\s/); //Check for word (space)\n\
    \   var is_letter_in_word = true;\n   if(is_letter_non_space == null){\n     is_letter_in_word\
    \ = false;\n   }\n   if(is_word_non_space == null){\n     is_letter_in_word =\
    \ false;\n   }\n   if(is_letter_in_word == true && is_letter_non_space == null){\n\
    \     return true;\n   }\n   return false;\n}\n", "  if(txt === \"\") return false;\n\
    \  return txt.slice(-1) == \" \";\n}\n", "    let len = txt.length;\n    if(len\
    \ == 0){\n        return false;\n    }\n    let last_char = txt[len-1];\n    return\
    \ last_char !== \" \" && last_char !== '-' && last_char !== '~';\n}\n", "    return\
    \ /^[a-z][a-z ]*$/.test(txt) && !/^[a-z ]$/.test(txt);\n}", "  var lastChar =\
    \ txt.slice(-1);\n  return lastChar.search(/[a-z]/i) === -1 ? true : false;\n\
    }\n", "    let lastChar = txt.substr(txt.length - 1);\n    return lastChar.match(/[a-z]/)\
    \ != null;\n}\n", "    return /[a-zA-Z]$/.test(txt) && /[^\\s]$/.test(txt);\n\
    }\n", "    // Your code goes here\n    var lastChar = txt.slice(txt.length - 1);\n\
    \    var isLetter = lastChar.match(/[a-z]/);\n    return (!isLetter);\n}\n", " \
    \ return txt && txt.length > 0 && txt.slice(-1)[0] === \" \" && txt.match(/[a-z]/i);\n\
    }\n", "   txt = txt.toLowerCase();\n   var letters = txt.split(\" \");\n   var\
    \ last_char = letters[letters.length - 1];\n   return (last_char != undefined\
    \ && last_char.length == 1);\n}\n", "  var txtArr = txt.split(' ')\n  if(txtArr.length\
    \ == 1 && txtArr[0] == \"\") return false\n  if(txtArr[txtArr.length - 1] == \"\
    \") return false\n  return true\n}\n", "    var is_letter = false;\n    var s\
    \ = txt.length;\n    if(s <= 0) return is_letter;\n    var letter = txt.substr(s\
    \ - 1);\n    if(letter.length >= 1 && letter.isAlpha()) is_letter = true;\n  \
    \  return is_letter;\n}\n", "  var word_arr=txt.split(\" \");\n  return word_arr[word_arr.length-1][word_arr[word_arr.length-1].length-1]\
    \ != \" \" &&\n      word_arr[word_arr.length-1][word_arr[word_arr.length-1].length-1]\
    \ != \".\" &&\n      word_arr[word_arr.length-1][word_arr[word_arr.length-1].length-1]\
    \ != \"?\" &&\n      word_arr[word_arr.length-1][word_arr[word_arr.length-1].length-1]\
    \ != \"!\";\n}\n", "    let words = txt.split(\" \")\n    return words[words.length-1].endsWith(\"\
    a\") && ! words[words.length-1].endsWith(\"e\") && ! words[words.length-1].endsWith(\"\
    i\") && ! words[words.length-1].endsWith(\"o\") && ! words[words.length-1].endsWith(\"\
    u\")\n}\n", "    let last_char = (txt.slice(-1));\n    return ((last_char.match(/\\\
    w$/)) || (last_char.match(/^\\w/)));\n}\n", "  let a = txt.slice(-1);\n  let b\
    \ = a.toUpperCase();\n  let w = a.split(\" \").join(\"\");\n  return b.length\
    \ > 1 && b.charAt(b.length - 1) === w;\n}\n", "    var last_char = txt.substr(txt.length\
    \ - 1);\n    return last_char.search(/[a-z]/i) !== -1;\n}\n", "  let lastChar\
    \ = txt.charAt(txt.length-1)\n  return !last_char_is_a_word(lastChar)\n}\n", " \
    \ return /^[a-z]+$/i.test(txt) && /\\S$/.test(txt);\n}\n", "    let txtSplit =\
    \ txt.split(\" \");\n    let lastChar = txtSplit[txtSplit.length-1];\n    let\
    \ lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    let isLastCharPartOfWord\
    \ = txtSplit.lastIndexOf(lastChar) === txtSplit.length - 1;\n    return (lastCharIsLetter\
    \ && !isLastCharPartOfWord);\n}\n", "  return /^[A-Za-z]$/.test(txt) && txt.lastIndexOf('\
    \ ')==txt.length-1\n}\n", "    if (txt.length <= 1) return false;\n    let last_char\
    \ = txt[txt.length-1];\n    if (last_char !== 'a' && last_char !== 'e' && last_char\
    \ !== 'i' && last_char !== 'o' && last_char !== 'u' && last_char !== 'y') return\
    \ false;\n    return true;\n}\n", "    return txt.charAt(txt.length-1) == txt.match(/[a-z]+/)\
    \ ? true : false\n}\n", "  if (txt === \"\"){\n    return false;\n  }\n  var last_char\
    \ = txt.charAt(txt.length-1);\n  return (last_char.match(/[a-z]/g) || []).length;\n\
    }\n", "    // Return True or False\n    if (txt.length < 2){\n        return false;\n\
    \    }\n    else if (txt.length > 2){\n        if (txt.charAt(txt.length - 1)\
    \ === \" \" || txt.charAt(txt.length - 1) === \",\" || txt.charAt(txt.length -\
    \ 1) === \"!\"){\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "  var words = txt.split(\" \");\n  var last_char = words[words.length -\
    \ 1];\n  return last_char.match(/[A-Za-z]/) === null &&\n         last_char.match(/[A-Za-z]/)\
    \ === null;\n}\n", "    if (txt.length == 0){\n        return false;\n    }\n\
    \    var last_char = txt.substring(txt.length-1);\n    if (last_char.length ==\
    \ 0){\n        return false;\n    }\n    return (/[a-zA-Z]/.test(last_char));\n\
    }\n", "  return txt[txt.length-1] == \" \" && check_if_last_char_is_not_a_word(txt);\n\
    }\n", "    var isAlphaNum = /^[a-zA-Z0-9]+$/.test(txt);\n    var isLastCharAlpha\
    \ = /^[a-zA-Z]$/.test(txt.slice(-1));\n    return isAlphaNum && isLastCharAlpha;\n\
    }\n", "    // Start by checking if the last character of the string is not a space\n\
    \    if(txt.length !== 0 && txt[txt.length-1] !== \" \") {\n        // The last\
    \ character is not a space, check if the last character is a\n        // letter.\
    \ \n        var last_char = txt.substring(txt.length - 1, txt.length);\n     \
    \   var is_a_letter = alphabet_check(last_char);\n        // If the last character\
    \ is a letter or if the string is not empty\n        // and the last character\
    \ is not the beginning of the string\n        // return True\n        return (is_a_letter\
    \ || txt.length !== 0 || txt[0]!==' ');\n    }\n    // If the last character is\
    \ a space or if the string is not empty or \n    // the first character is not\
    \ the beginning of the string\n    // return False\n    return false;\n}\n", " \
    \ if (txt.length <= 1) {\n    return false;\n  }\n  return txt.slice(-1) === \"\
    \ \";\n}\n", "  var lastChar = txt.charAt(txt.length-1);\n  var lastCharIsLetter\
    \ = lastChar >= \"a\" && lastChar <= \"z\" || lastChar >= \"A\" && lastChar <=\
    \ \"Z\" || lastChar >= \"0\" && lastChar <= \"9\";\n  var words = txt.split(\"\
    \ \");\n  for (var i in words) {\n    var word = words[i];\n    if (word.length\
    \ <= 1) continue;\n    var lastCharInWord = word.charAt(word.length-1);\n    if\
    \ (lastCharInWord >= \"a\" && lastCharInWord <= \"z\" || lastCharInWord >= \"\
    A\" && lastCharInWord <= \"Z\" || lastCharInWord >= \"0\" && lastCharInWord <=\
    \ \"9\") {\n      return false;\n    }\n  }\n  return lastCharIsLetter;\n}\n<|/\
    \ file dstars=0 |>\n<| c |>\nYou might be interested in reading [this](https://en.wikipedia.org/wiki/Initialization_(programming))\
    \ page on initialisation.\n<|/ c |>\n<| c |>\nYou might also look at [this](http://www.geeksforgeeks.org/write-a-c-program-that-check-if-a-string-ends-with-a-given-character/)\
    \ article. Its code is much simpler than what you have.\n<|/ c |>\n<| c |>\nAlso\
    \ you might want to take a look at [this](http://www.geeksforgeeks.org/how-to-check-if-a-given-string-ends-with-a-given-character/)\
    \ article. Its code is simpler but you might want to take a look at it because\
    \ its approach is different\n<|/ c |>\n<| c |>\nI did read that article before\
    \ I posted, but thank you for the suggestion - I might check it out!\n<|/ c |>\n\
    <| a dscore=0 tags=javascript |>\nThis might work:\n<code>", "  let lastChar =\
    \ txt.substring(txt.length-1, txt.length);\n  let lastCharIsAlpha = lastChar.match(/[a-z]/i);\n\
    \  let lastCharIsWord = lastChar.match(/[a-zA-Z0-9]/i);\n  return lastCharIsAlpha\
    \ && !lastCharIsWord;\n}\n", "    var arr = []\n    var is_last_letter = false\n\
    \    arr.push(txt.substr(0,1))\n    arr.push(txt.substr(0,2))\n    arr.push(txt.substr(0,3))\n\
    \    arr.push(txt.substr(0,4))\n    arr.push(txt.substr(0,5))\n    arr.push(txt.substr(0,6))\n\
    \    arr.push(txt.substr(0,7))\n    arr.push(txt.substr(0,8))\n    arr.push(txt.substr(0,9))\n\
    \    arr.push(txt.substr(0,10))\n    arr.push(txt.substr(0,11))\n    arr.push(txt.substr(0,12))\n\
    \    arr.push(txt.substr(0,13))\n    arr.push(txt.substr(0,14))\n    arr.push(txt.substr(0,15))\n\
    \    arr.push(txt.substr(0,16))\n    arr.push(txt.substr(0,17))\n    arr.push(txt.substr(0,18))\n\
    \    arr.push(txt.substr(0,19))\n    arr.push(txt.substr(0,20))\n    arr.push(txt.substr(0,21))\n\
    \    arr.push(txt.substr(0,22))\n    arr.push(txt.substr(0,23))\n    arr.push(txt.substr(0,24))\n\
    \    arr.push(txt.substr(0,25))\n    arr.push(txt.substr(0,26))\n    arr.push(txt.substr(0,27))\n\
    \    arr.push(txt.substr(0,28))\n    arr.push(txt.substr(0,29))\n    arr.push(txt.substr(0,30))\n\
    \    arr.push(txt.substr(0,31))\n    arr.push(txt.substr(0,32))\n    arr.push(txt.substr(0,33))\n\
    \    arr.push(txt.substr(0,34))\n    arr.push(txt.substr(0,35))\n    arr.push(txt.substr(0,36))\n\
    \    arr.push(txt.substr(0,37))\n    arr.push(txt.substr(0,38))\n    arr.push(txt.substr(0,39))\n\
    \    arr.push(txt.substr(0,40))\n    arr.push(txt.substr(0,41))\n    arr.push(txt.substr(0,42))\n\
    \    arr.push(txt.substr(0,43))\n    arr.push(txt.substr(0,44))\n    arr.push(txt.substr(0,45))\n\
    \    arr.push(txt.substr(0,46))\n    arr.push(txt.substr(0,47))\n    arr.push(txt.substr(0,48))\n\
    \    arr.push(txt.substr(0,49))\n    arr.push(txt.substr(0,50))\n    arr.push(txt.substr(0,51))\n\
    \    arr.push(", "  return txt.substr(-1) !== \" \" &&\n         !is_letter(txt.substr(-1));\n\
    }\n", "  let txtArr = txt.split(\" \");\n  let last = txtArr[txtArr.length-1];\n\
    \  return last.match(/[a-z]+/) !== null;\n}\n", "    if (txt.substr(txt.length-1,1)\
    \ !== \" \") {\n        // Only allow letters at the end of the string.\n    \
    \    return false\n    } else {\n        // All letters are allowed at the end.\n\
    \        return true\n    }\n}\n", "  let check = txt.slice(-1)\n  let is_letter\
    \ = true\n  for(let i of check){\n    if(i.match(/[a-zA-Z]/) === null){\n    \
    \  is_letter = false\n      break\n    }\n  }\n  return is_letter\n}\n", "   \
    \ let word = \"\";\n    txt.split(\" \").forEach(word => word = word + word.charAt(word.length\
    \ - 1));\n    return word === txt.split(\" \").pop();\n}\n", "    let lastChar\
    \ = txt.charAt(txt.length-1);\n    let letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    let letter = letters[lastChar];\n    return (letter != undefined) && letter.replace(/[a-z]/g,\
    \ \"\")!==\"\" && lastChar !== 'i';\n}\n", "  return txt[txt.length-1].toLowerCase()\
    \ !== 'e' &&\n          txt[txt.length-1].toLowerCase() !== 'i' &&\n         \
    \ txt[txt.length-1].toLowerCase() !== 'o' &&\n          txt[txt.length-1].toLowerCase()\
    \ !== 'u';\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
