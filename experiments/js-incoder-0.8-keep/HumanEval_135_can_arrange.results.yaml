name: HumanEval_135_can_arrange
language: js
results:
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let last = 0;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] > arr[i-last]){\n            last = i;\n\
    \        }\n    }\n    return last;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpq93ok48w.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq93ok48w.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if (arr.length < 2){\n    return -1;\n \
    \ }\n  var largest = 0;\n  var index = 0;\n  while (index < arr.length){\n   \
    \ if ( arr[index] >= arr[index + 1]){\n      index++;\n    } else {\n      if\
    \ ( arr[index] > largest){\n        largest = arr[index];\n      }\n      index++;\n\
    \    }\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp7la_skdm.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7la_skdm.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(let i = 1; i < arr.length; i++){\n \
    \   if(arr[i] > arr[i - 1])\n      return i;\n  }\n  return -1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmp5ks76nbn.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ks76nbn.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(var i = 0; i < arr.length; i++){\n \
    \   var current = arr[i];\n    if(i !== arr.length -1){\n      if(current <= arr[arr.length\
    \ - 1]){\n        return i;\n      }\n      else if(current >= arr[arr.length\
    \ - 1] && current <= arr[i]){\n        return arr[i];\n      }\n    }\n  }\n \
    \ return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpkyzc7yz9.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkyzc7yz9.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(var i=0;i<arr.length-1;i++){\n    if(arr[i]<=arr[i+1]){\n\
    \      return i;\n    }\n  }\n  return -1;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpn6uim1do.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn6uim1do.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIdx = -1;\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(maxIdx < arr[i]){\n            maxIdx = i;\n\
    \        }\n    }\n    return maxIdx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpqjzk0or4.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzk0or4.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var i= 0, max = -1, found = false;\n \
    \   while(i< arr.length){\n        if(i == arr.length -1){\n            max =\
    \ i;\n            found = true;\n            break;\n        }\n        if(arr[i]\
    \ >= arr[i+1]){\n            max = i;\n            found = true;\n           \
    \ break;\n        }\n        i++;\n    }\n    if(!found){\n        return -1;\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpa_6dk080.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa_6dk080.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = arr[0];\n  var max = -1;\n\
    \  for(var i = 1; i < arr.length; i++){\n    if(arr[i] >= largest){\n      if(arr[i]\
    \ > max){\n        max = arr[i];\n      }\n    }else{\n      return -1;\n    }\n\
    \  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpdun2irhv.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdun2irhv.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxIndex = -1;\n  arr.forEach((value,\
    \ i) => {\n    if(i > maxIndex && value <= arr[i-1]){\n      maxIndex = i;\n \
    \   }\n  });\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar firstIndex = arr.indexOf(arr[0]);\n\t\
    var index = 0;\n\tfor (var i = 1; i < arr.length; i++) {\n\t\tif (arr[i] <= arr[index])\
    \ {\n\t\t\tindex = i;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index\
    \ == firstIndex ? -1 : index;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmphvsfxrtt.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmphvsfxrtt.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var max_val = -Infinity;\n  for (var i =\
    \ 0; i < arr.length; i++){\n    if (arr[i] > max_val){\n      max_val = arr[i];\n\
    \    }\n  }\n  return max_val > -Infinity;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\n3\n    at test (/tmp/tmpy87fzsoj.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy87fzsoj.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxVal = arr[0];\n  var maxIndex = -1;\n\
    \  for(var i = 1; i < arr.length; i++){\n    if(arr[i] >= maxVal){\n      maxIndex\
    \ = i;\n      maxVal = arr[i];\n    }\n  }\n  if(maxIndex < 0){\n    return -1;\n\
    \  }else{\n    return maxIndex;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp_2xkis62.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_2xkis62.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var max = -1;\n  var i= 0;\n  while(i <\
    \ arr.length){\n    if(arr[i] >= arr[i+1]){\n      max = Math.max(arr[i], max);\n\
    \      i = i + 1;\n    } else {\n      i++;\n    }\n  }\n  return max;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpzjqkubm9.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzjqkubm9.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=0;i<arr.length;i++){\n     \
    \   if(arr.indexOf(i+1)>arr.indexOf(i) || i==0)\n            return -1;\n    }\n\
    \    return arr.indexOf(i+1);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmplcf5oca3.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmplcf5oca3.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tif(arr == null || arr.length == 0){\n\t\t\
    return -1;\n\t}\n\tvar max = -2;\n\tvar index = -1;\n\tfor(var i = 0; i < arr.length;\
    \ i++){\n\t\tvar val = arr[i];\n\t\tif(val > max){\n\t\t\tmax = val;\n\t\t\tindex\
    \ = i;\n\t\t}\n\t}\n\treturn index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp7rj05lof.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7rj05lof.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let max = -1;\n  for(let i=0; i<arr.length-1;\
    \ i++){\n    let cur = arr[i]\n    let prev = arr[i-1]\n    if(cur < prev){\n\
    \      max = i\n    }\n  }\n  return max\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp47xh63iu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp47xh63iu.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest = -Infinity;\n\tvar largestIndex\
    \ = -1;\n\tfor(var i in arr){\n\t\tif((largest < arr[i]) && arr[i] >= largest)\n\
    \t\t\tlargestIndex = i;\n\t}\n\treturn largestIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'4'\n\nshould equal\n\n3\n    at test (/tmp/tmp_sinujwu.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_sinujwu.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '4',\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let maxIndex = -1\n    let lastIndex =\
    \ arr.length-1\n    for (let i=0; i<lastIndex; i++){\n        if (arr[i+1] > arr[i]){\n\
    \            maxIndex = i\n            break\n        }\n    }\n    return maxIndex\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpvvgnj2j6.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvvgnj2j6.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxi = -1,\n        maxi1,\n     \
    \   maxi2;\n    for(var i=0; i < arr.length-1; i++){\n        if(arr[i] >= arr[i+1]){\
    \ maxi1 = i; break; }\n    }\n    for(var i=arr.length-2; i > -1; i--){\n    \
    \    if(arr[i] >= arr[i+1]){ maxi2 = i; break; }\n    }\n    if(maxi1 > maxi2){\n\
    \        maxi = maxi1;\n    }\n    else{\n        maxi = maxi2;\n    }\n    return\
    \ maxi;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmptx941uew.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmptx941uew.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largestIndex = -1;\n\tfor(var i=1;i<arr.length;i++){\n\
    \t\tif(arr[i] < arr[largestIndex]){\n\t\t\tlargestIndex = i;\n\t\t}\n\t}\n\treturn\
    \ largestIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp_rlxruic.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_rlxruic.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max = arr.shift();\n    for(var i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] >= max){\n            max = arr[i];\n\
    \        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpfeqqns6f.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfeqqns6f.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var len = arr.length\n    var max = -Infinity\n\
    \    for(var i=0;i<len;i++){\n        if(arr[i] >= arr[max]) max = i\n    }\n\
    \    return max+1\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-Infinity\n\nshould equal\n\n3\n    at test\
    \ (/tmp/tmplmfh6lu9.js:22:10)\n    at Object.<anonymous> (/tmp/tmplmfh6lu9.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let i=0,\n    left,\n    right,\n    largest,\n\
    \    found;\n  largest = -1;\n  found = false;\n  while(!found && i<arr.length){\n\
    \    left = i;\n    right = 0;\n    while(i<arr.length && arr[i]<arr[left]){\n\
    \      i++;\n    }\n    while(i<arr.length && arr[i]>arr[right]){\n      right++;\n\
    \    }\n    if(right>left){\n      found = true;\n      if(largest<0){\n     \
    \   largest = left;\n      }\n      else if(arr[left]<arr[right]){\n        largest\
    \ = left;\n      }\n      else{\n        largest = right;\n      }\n    }\n  \
    \  i++;\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpocuohq0u.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpocuohq0u.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  // Create an empty array of size equal to\
    \ the length of the given array to\n  // store indexes.\n  var new_arr = [];\n\
    \  for(var i = 0; i < arr.length; i++){\n    new_arr[i] = -1;\n  }\n\n  // Find\
    \ the largest number in the given array.\n  for(var i = 0; i < arr.length; i++){\n\
    \    if(new_arr[arr[i]] <= arr[i]){\n      new_arr[arr[i]] = i;\n    }\n  }\n\n\
    \  // Return its index in the new array.\n  return new_arr[arr[arr.length - 1]];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n3\n    at test\
    \ (/tmp/tmpn_3iw_og.js:32:10)\n    at Object.<anonymous> (/tmp/tmpn_3iw_og.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if (arr.length === 0) return -1;\n\n \
    \   var n = arr[0];\n    var max = arr[0];\n    var i;\n    for (i=1; i<arr.length;\
    \ i++){\n        if (arr[i] >= n){\n            max = arr[i];\n        }else if\
    \ (arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmphxh3po_5.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmphxh3po_5.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  // Create a variable for the array index\
    \ which will be the largest index\n  // of an element which is not greater than\
    \ or equal to the element\n  // immediately preceding it.\n  var largest = -1;\n\
    \  // Create a variable for the element at the previous index\n  // which is not\
    \ greater than or equal to the element immediately preceding\n  // it.\n  var\
    \ previous = arr[0];\n  // Create a variable for the element at the current index\n\
    \  var current = arr[0];\n  for(var i = 0; i < arr.length; i++){\n    // Check\
    \ if the current element is greater than or equal to the element\n    // immediately\
    \ preceding the previous element\n    if(arr[i] >= previous){\n      // If so,\
    \ save the current index as the largest index\n      largest = i;\n      // Otherwise\
    \ decrement the previous index\n      previous = arr[i];\n    }\n    // If current\
    \ element is less than or equal to the element immediately\n    // preceding it,\
    \ decrement the current index\n    else{\n      current = arr[i];\n    }\n  }\n\
    \  return largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpujek60w8.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpujek60w8.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1;\n  var max = arr[0];\n\
    \  var index = arr.length;\n  for(var i=1; i<index; i++){\n    if(arr[i]>max){\n\
    \      maxIndex = i;\n      max = arr[i];\n    }\n  }\n  return maxIndex;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp5k117szo.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5k117szo.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var l = arr.length-1;\n  var max = -1;\n\
    \  for(var i=0;i<l;i++){\n    if (arr[i]<=arr[max]){\n      max = i;\n    }\n\
    \  }\n  if (max==-1) max = -1;\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpw63draww.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw63draww.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxIdx = -1;\n  for(let i = 0; i<arr.length;\
    \ i++){\n    if(arr[i] >= arr[maxIdx]){\n      maxIdx = i;\n    }\n  }\n  return\
    \ maxIdx;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp5adqprv1.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5adqprv1.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if (arr.length < 2) return -1\n  let largest\
    \ = -1\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] <= arr[largest]){\n\
    \      largest = i\n    }\n  }\n  return largest\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpcydpy4pc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcydpy4pc.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(var i=0; i<arr.length; i++){\n    var\
    \ val = arr[i];\n    if(val>arr[i - 1]){\n      return i;\n    }\n  }\n  return\
    \ -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpwcnytj37.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwcnytj37.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var max = 0;\n  for(var i in arr) {\n  \
    \  if(arr[i] > arr[max]) max = i;\n  }\n  return max;\n}\n<|/ file filename=arrange.js\
    \ |>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5jxo7zmp.js:15\n<|/ file filename=arrange.js |>\n^\n\nSyntaxError:\
    \ Unexpected token '<'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let i = 0;\n  let max = -1;\n  let tmp;\n\
    \  for(let j = 0; j < arr.length; j++){\n    if (i > max){\n      max = i;\n \
    \   }\n    tmp = arr[i];\n    i = i + 1;\n    if(tmp >= arr[j - 1]){\n      max\
    \ = j;\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpcl6h24d2.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcl6h24d2.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let largest = -1;\n  let max_idx = arr.length-1;\n\
    \  for(let i = 0; i < arr.length; i++){\n    if (largest < arr[i] && arr[i] !=\
    \ arr[i-1]) largest = arr[i];\n    if (max_idx < i-1 && arr[i] != arr[i-1]) max_idx\
    \ = i;\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpxxw3l1wy.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxxw3l1wy.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max = -1,\n        i = 1,\n      \
    \  l = arr.length;\n\n    while( i < l){\n        max = Math.max(arr[i], max);\n\
    \        if(arr[i] > max){\n            max = arr[i];\n            i++;\n    \
    \    }\n        i++;\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpu8s89_63.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu8s89_63.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var len = arr.length;\n  var maxIndex =\
    \ -1;\n  for(var i=0;i<len;i++){\n    var currIndex = i;\n    for(var j=i+1;j<len;j++){\n\
    \      if(arr[j] <= arr[currIndex]){\n        currIndex = j;\n      }\n    }\n\
    \    if(currIndex > maxIndex){\n      maxIndex = currIndex;\n    }\n  }\n  return\
    \ maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpar3pmf5a.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpar3pmf5a.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largest = 0;\n    for (let i = 0;\
    \ i < arr.length - 1; i++){\n        if (arr[i] >= arr[i + 1])\n            return\
    \ largest;\n        largest++;\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpzqjz_5hf.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzqjz_5hf.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar maxIndex = -1;\n\tvar currentIndex =\
    \ 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] < arr[currentIndex]){\n\
    \t\t\tcurrentIndex = i;\n\t\t}else{\n\t\t\tif(maxIndex < currentIndex){\n\t\t\t\
    \tmaxIndex = currentIndex;\n\t\t\t}\n\t\t}\n\t}\n\treturn maxIndex;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpgrog9s64.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgrog9s64.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] < arr[i+1]) break;\n        if(arr[i] > arr[i-1]) return -1;\n\
    \    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpyl4ivjqh.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyl4ivjqh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i = 0; i < arr.length; i++){\n\
    \        if((i > 0) && arr[i] >= arr[i-1]){\n            return i;\n        }\n\
    \    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpsf8oslzr.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsf8oslzr.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(!arr || arr.length<2){\n        return\
    \ -1;\n    }\n    var first = Math.min.apply(Math,arr);\n    var last = Math.max.apply(Math,arr);\n\
    \    for(var i=first;i<=last;i++){\n        if(arr.indexOf(i)==arr.indexOf(i-1)){\n\
    \            continue;\n        }\n        if(arr[i-1]>=i){\n            return\
    \ i-1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp1aj0kzhj.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1aj0kzhj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=0; i<arr.length; i++){\n   \
    \     var lastElem = arr[i-1];\n        if(lastElem >= arr[i]){\n            return\
    \ i-1;\n        }\n    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpfr24u11h.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfr24u11h.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largest = -1;\n\n    //Find the index\
    \ of the last element greater than the smallest element\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] > arr[largest]){\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpxwsg6395.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxwsg6395.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest = arr[0], // default index\n\
    \t\ti;\n\n\tfor(i = 1; i < arr.length; i++){\n\t\tif(arr[i] > largest){\n\t\t\t\
    largest = arr[i];\n\t\t}\n\t}\n\treturn largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpx95_ksvb.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx95_ksvb.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(let i=0;i<arr.length-1;i++){\n   \
    \     if(arr[i]>=arr[i+1]){\n            return i; //If an element comes after\
    \ it, it cannot be greater.\n        }\n    }\n    return -1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpkvpich7n.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkvpich7n.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest;\n\tif(arr.length === 0 || arr.length\
    \ == 1){\n\t\treturn 0;\n\t}\n\tif(arr.length === 1){\n\t\treturn 1;\n\t}\n\t\
    largest = arr[0];\n\tfor(var i = 1; i < arr.length; i++){\n\t\tif(arr[i] > largest){\n\
    \t\t\tlargest = arr[i];\n\t\t}\n\t}\n\treturn largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpmlgjqx53.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmlgjqx53.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  // Write your code here.\n  var max = -1;\n\
    \  var maxIndex = -1;\n  for (var i = 0; i <= arr.length-2; i++){\n    if (max\
    \ < arr[i]){\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpxsf7nizm.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxsf7nizm.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let maxIndex = -1;\n    for(let i=0;i<arr.length-1;i++){\n\
    \        if(arr[i+1] <= arr[i]){\n            if(maxIndex === -1)\n          \
    \      return -1;\n            else\n                maxIndex = i;\n        }\n\
    \    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpcqm1fnwp.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqm1fnwp.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var ans = -1;\n    arr.forEach(function(v,\
    \ i) {\n        ans = Math.max(ans, i+1);\n    });\n    return ans;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp2k2jhmev.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2k2jhmev.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1,\n      maxElement = arr[0];\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] > maxElement){\n      maxIndex\
    \ = i;\n      maxElement = arr[i];\n    }\n  }\n  return maxIndex;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpk1py788i.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1py788i.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    // Write your code here.\n    var i =\
    \ 0;\n    var max = -1;\n    for(i=0;i<arr.length;i++){\n        if(max<arr[i]){\n\
    \            max = arr[i];\n        }\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpu37z0hpo.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu37z0hpo.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largestIndex= -1, index=0;\n    for(let\
    \ i=0;i<arr.length;i++){\n        if(arr[i]!=largestIndex){\n            index\
    \ = i;\n            largestIndex = arr[i];\n        }\n    }\n    return index;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpsfcsmzui.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsfcsmzui.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar i = arr.length - 1\n\tvar largest =\
    \ i\n\n\twhile ( i >= 0 ){\n\t\tif ( arr[i] >= arr[i+1] ) {\n\t\t\tlargest = i\
    \ + 1\n\t\t}\n\t\ti--\n\t}\n\treturn largest + 1\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmppqgzv6lx.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmppqgzv6lx.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largestIndex = -1;\n  var largest =\
    \ arr[0];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] > largest){\n\
    \      largestIndex = i;\n      largest = arr[i];\n    }\n  }\n  return largestIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpyt5oqoic.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyt5oqoic.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar arr1=arr.slice(),\n\t\tlen=arr1.length,\n\
    \t\tmax=-1,\n\t\tlast=-1,\n\t\ti,\n\t\tval;\n\t\n\tfor(i=0;i<len;i++){\n\t\tval\
    \ = arr1[i];\n\t\tif(!isGreater(arr,i,val)){\n\t\t\tlast = i;\n\t\t}\n\t\tif(!isEqual(arr,i,last)){\n\
    \t\t\tmax = -1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(!isGreater(arr,i,val)){\n\t\
    \t\tlast = -1;\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz790mk06.js:18\n\t\tif(!isGreater(arr,i,val)){\n\t\t^\n\nReferenceError:\
    \ isGreater is not defined\n    at can_arrange (/tmp/tmpz790mk06.js:18:3)\n  \
    \  at test (/tmp/tmpz790mk06.js:38:20)\n    at Object.<anonymous> (/tmp/tmpz790mk06.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1\n  var max = arr[0]\n\
    \  for (var i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      maxIndex\
    \ = i\n      max = arr[i]\n    }\n  }\n  return maxIndex\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpcmdc8ygq.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcmdc8ygq.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let max = arr.length - 1;\n  let index =\
    \ 0;\n  let candidate = -1;\n  for (let i = 0; i < max; i++){\n    if (arr[i]\
    \ > arr[max]){\n      if (candidate === -1){\n        candidate = i;\n      }\n\
    \      if (arr[i] === arr[candidate]){\n        max = i;\n        index++;\n \
    \     }\n    }\n  }\n  if (candidate !== -1){\n    return candidate;\n  }\n  return\
    \ -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpkfuq7btl.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkfuq7btl.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var len = arr.length;\n    for(var i =\
    \ len-1;i>0;i--){\n        if(arr[i] >= arr[i-1])\n            return i;\n   \
    \ }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpwlh94d3q.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwlh94d3q.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest = arr.shift(), i;\n\n\tfor(i\
    \ = 0; i < arr.length; i++){\n\t\tif(arr[i] > largest){ largest = arr[i]; };\n\
    \t\tif(largest >= arr[i]){ return(i); }\n\t}\n\treturn -1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmppzpi40ff.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmppzpi40ff.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(var i=1; i<arr.length; i++){\n    if(arr[i-1]\
    \ >= arr[i]){\n      return i-1;\n    }\n  }\n  return -1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmppwntxqoz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwntxqoz.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tif (arr === null){\n\t\treturn null;\n\t\
    } else if (arr.length === 0) {\n\t\treturn -1;\n\t}\n\n\tvar result = 0;\n\tfor\
    \ (var i = 0; i < arr.length; i++){\n\t\tif (arr[i] > arr[i+1])\n\t\t\tresult++;\n\
    \t}\n\treturn result >= arr.length / 2 ? result : -1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpmnsem86x.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmnsem86x.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest = arr[0];\n\tfor (var i = 1;\
    \ i < arr.length; i++){\n\t\tif (arr[i] > largest){\n\t\t\tlargest = arr[i];\n\
    \t\t}\n\t}\n\treturn largest;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmprqq4zde9.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmprqq4zde9.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar maxIndex = -1;\n\tvar max = arr[0];\n\
    \tfor(var i=1; i<arr.length; i++){\n\t\tif(max < arr[i]){\n\t\t\tmax = arr[i];\n\
    \t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmph0cidebh.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmph0cidebh.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largest = -1;\n    let candidate =\
    \ null;\n\n    for(let i = 0;i<arr.length;i++){\n        if(i == 0){\n       \
    \     candidate = arr[i];\n            if(arr[i] > largest)\n                largest\
    \ = arr[i];\n        }else{\n            if(arr[i] > candidate)\n            \
    \    candidate = arr[i];\n            if(arr[i] < largest)\n                largest\
    \ = arr[i];\n        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmppp1qlh9p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmppp1qlh9p.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(arr.length == 0) return -1;\n    var\
    \ largest = arr[0];\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ > largest){\n            largest = arr[i];\n        }\n    }\n    return largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp1rpb8eke.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1rpb8eke.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var len = arr.length;\n  var max = -Infinity;\n\
    \  var maxI = -1;\n  for (var i = 0; i < len; i++){\n    if (arr[i] > max){\n\
    \      max = arr[i];\n      maxI = i;\n    }\n  }\n  if (maxI > max){\n    return\
    \ maxI;\n  } else {\n    return -1;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpj0epdpqc.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj0epdpqc.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  return arr.some(function(val, i, arr){\n\
    \    return val > arr[i-1] ? false : true;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\n3\n    at test (/tmp/tmpwnm1lylx.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwnm1lylx.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    arr = arr.sort();\n    var max_idx = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= arr[max_idx]){\n\
    \            max_idx = i;\n        }\n    }\n    return max_idx;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp2czqzv8a.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2czqzv8a.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar len = arr.length;\n\tif(len < 2){\n\t\
    \treturn -1;\n\t}\n\tvar max_idx = 0;\n\tfor(var i = 0; i < len-1; i++){\n\t\t\
    if(arr[i] <= arr[max_idx]){\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\treturn max_idx;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmptq9axzdb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmptq9axzdb.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = -1;\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(largest < 0){\n            largest = i;\n\
    \        }\n        else if((arr[i] < arr[largest]) || (arr[i] === arr[largest]\
    \ && i != largest)){\n            largest = i;\n        }\n    }\n    return largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp76_n80j6.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp76_n80j6.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largest = -1\n    for(let i = 1; i\
    \ < arr.length; i++) {\n        if(arr[i] > arr[i-1]) {\n            largest =\
    \ i\n        }\n    }\n    return largest\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpib22wldr.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpib22wldr.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar max = -Infinity;\n\tvar maxIndex = -Infinity;\n\
    \tvar i;\n\tfor(i = 0; i < arr.length; i++){\n\t\tif(arr[i] < max){\n\t\t\tmax\
    \ = arr[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxIndex;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-Infinity\n\nshould equal\n\n3\n    at test\
    \ (/tmp/tmpibwlnmgm.js:26:10)\n    at Object.<anonymous> (/tmp/tmpibwlnmgm.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxIndex = -1;\n  for(let i = 1; i <\
    \ arr.length; i++){\n    if(arr[i - 1] > arr[i]){\n      maxIndex = i;\n    }\n\
    \  }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet largest = arr[0];\n\tfor(let i = 1;\
    \ i < arr.length; i++){\n\t\tif(arr[i] > largest)\n\t\t\tlargest = arr[i];\n\t\
    }\n\treturn arr.indexOf(largest);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpvau3yvwe.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvau3yvwe.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  // Write your function here\n  var newArr\
    \ = arr.slice(0);\n  var maxIndex = -1;\n  for(var i=newArr.length-2; i>-1; i--){\n\
    \    if(newArr[i]+1 > newArr[i+1]){\n      maxIndex = i;\n      break;\n    }\n\
    \  }\n  return maxIndex;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp0im4hx6u.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0im4hx6u.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet max = -1000000;\n\tfor(let i = 1; i\
    \ < arr.length; i++){\n\t\tlet cur = arr[i];\n\t\tlet j = i - 1;\n\t\twhile(j\
    \ >= 0 && arr[j] > cur){\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\t\
    arr[j + 1] = cur;\n\t\tif(j > max){\n\t\t\tmax = j + 1;\n\t\t}\n\t}\n\treturn\
    \ max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpyza9qa2a.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyza9qa2a.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tconst max_index = arr.length-1;\n\tlet curr;\n\
    \tfor(let i = 0; i < arr.length; i++){\n\t\tcurr = arr[i];\n\t\tif(arr[max_index]\
    \ < curr){\n\t\t\treturn -1;\n\t\t}\n\t\telse if(arr[max_index] == curr){\n\t\t\
    \treturn max_index;\n\t\t}\n\t\telse{\n\t\t\tmax_index--;\n\t\t}\n\t}\n\treturn\
    \ -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprjfu1ykh.js:20\n\t\t\tmax_index--;\n\t\t\t         ^\n\nTypeError:\
    \ Assignment to constant variable.\n    at can_arrange (/tmp/tmprjfu1ykh.js:20:13)\n\
    \    at test (/tmp/tmprjfu1ykh.js:31:20)\n    at Object.<anonymous> (/tmp/tmprjfu1ykh.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  // Loop over every element in the array\n\
    \  var i = 0;\n  var max = -1;\n  while(i <= arr.length - 1){\n    // If the element\
    \ is not greater than or equal to the element before\n    // it, set it to the\
    \ maximum index\n    if(arr[i] <= arr[i + 1]){\n      max = i;\n    } else {\n\
    \      // Otherwise increment the index\n      i++;\n    }\n  }\n  return max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    // Write your code here\n    return -1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp8s0wcpcv.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8s0wcpcv.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n   var largestIndex = -1;\n   for (var i =\
    \ 1; i < arr.length; i++) {\n      if (arr[i] > arr[largestIndex]){\n        \
    \ largestIndex = i;\n      }\n   }\n   return largestIndex;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpeh0wzs30.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeh0wzs30.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar biggest = -1;\n\tfor(var i = 0; i <\
    \ arr.length; i++){\n\t\tif(!(i == 0 || arr[i - 1] <= arr[i]))\n\t\t\tbiggest\
    \ = Math.max(i, biggest);\n\t}\n\treturn biggest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var len = arr.length;\n    if(len == 0){\n\
    \        return -1;\n    }\n    if(arr.indexOf(arr[0]) == 0){\n        return\
    \ 0;\n    }\n    if(arr.length > 1){\n        var lastValue = arr[0];\n      \
    \  for(var i = 1; i < len; i++){\n            if(arr[i] <= lastValue){\n     \
    \           lastValue = arr[i];\n            }\n        }\n        return lastValue;\n\
    \    }\n    return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpp4ou1_kp.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp4ou1_kp.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var len = arr.length;\n  var ret = 0;\n\
    \  for (var i = 0; i < len; i++) {\n    var curr = arr[i];\n    var l = arr.slice(0,\
    \ i).concat(arr.slice(i+1, len));\n    if (l != null && l.indexOf(curr) == -1)\
    \ {\n      ret = -1;\n      break;\n    }\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp_052invd.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_052invd.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i = 1; i < arr.length; i++){\n\t\
    \tif(arr[i] <= arr[i-1]){\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn arr.length\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp7289rivr.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7289rivr.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tif(arr.length < 2) return -1;\n\tlet largest\
    \ = arr[0];\n\tfor(let i = 1; i < arr.length; i++){\n\t\tif(arr[i] >= largest)\
    \ return -1;\n\t\tif(arr[i] > largest) largest = arr[i];\n\t}\n\treturn largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp7hiq9fr7.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7hiq9fr7.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let n = arr.length\n  let max_index = -1\n\
    \  for (let i = 0; i < n; i++){\n    if (arr[i] <= arr[i+1]){\n      max_index\
    \ = i\n    }\n  }\n  if (max_index > 0){\n    return max_index\n  }\n  return\
    \ -1\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n-1\n    at test (/tmp/tmpna7v219d.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpna7v219d.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: -1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar largest = -1,\n\t\tprevious = -1,\n\t\
    \ti = 0;\n\twhile(i<arr.length && largest<0){\n\t\ti = arr[i] < arr[i-1] ? i :\
    \ i - 1;\n\t\tif(arr[i] >= arr[previous] + 1) largest = i;\n\t\tprevious = i;\n\
    \t}\n\treturn largest;\n}\n<|/ file dstars=1 |>\n<| c |>\nThank you for the feedback,\
    \ I did make an edit.  I believe that my solution should work now.\n<|/ c |>\n\
    <| c |>\nThank you! It works! I do have a question though, why did you use \"\
    <\" instead of \">=\"? Is it because you were not allowed to use \"<\" for this\
    \ problem?\n<|/ c |>\n<| c |>\nI believe that using `>=` would result in an incorrect\
    \ output for the case that the first element is not greater than or equal to the\
    \ element directly before it.  `<=` would result in an incorrect output for the\
    \ case that the first element is not greater than or equal to the element directly\
    \ after it.\n<|/ c |>\n<| c |>\nI see I see. Thanks again!\n<|/ c |>\n<| a dscore=0\
    \ tags=algorithm,javascript,arrays |>\nI believe that the following should work\
    \ correctly, which takes advantage of the fact that all values in the array are\
    \ unique (even though there may still be duplicates) and that there are no negative\
    \ values in the array.\n<code>\nvar largestArrangement = function(arr) {\n  var\
    \ map = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (map[arr[i]] ===\
    \ undefined) {\n      map[arr[i]] = 0;\n    }\n    map[arr[i]]++;\n  }\n  var\
    \ result = 0;\n  var start = 0;\n  for (var i = 1; i < arr.length; i++) {\n  \
    \  if (map[arr[i]] > map[arr[i - 1]]) {\n      result = i;\n      start = i -\
    \ 1;\n    }\n  }\n  return result;\n};\n</code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,javascript,arrays\
    \ |>\nThis works well for small arrays. But it takes a long time for larger arrays.\n\
    <code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp0x1e79u.js:19\n<|/ file dstars=1 |>\n^\n\nSyntaxError: Unexpected\
    \ token '<'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=0; i<arr.length-1; i++){\n \
    \       if (arr[i] > arr[i+1]) return i+1;\n    }\n    return -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpxurnyrye.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxurnyrye.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var result = 0;\n    for(var i = 0; i\
    \ < arr.length; i++){\n        var val = arr[i];\n        if(val > result[result])\n\
    \            result = val;\n    }\n    return result == -1 ? -1 : 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp0nqnru_0.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0nqnru_0.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var len = arr.length;\n  var maxVal = arr[0];\n\
    \  for (var i = 1; i < len; i++){\n    if (arr[i] > maxVal)\n      maxVal = arr[i];\n\
    \  }\n  if (maxVal !== arr[len - 1]){\n    return -1;\n  } else {\n    return\
    \ len;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp_zjupb9i.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_zjupb9i.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1;\n  var currentIndex =\
    \ -1;\n\n  for(var i =0; i < arr.length; i++){\n    if(arr[i] <= arr[currentIndex]){\n\
    \      currentIndex = i;\n    }\n  }\n  return currentIndex+1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpgmiokjhq.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgmiokjhq.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar len = arr.length;\n\tif(len == 0){\n\
    \t\treturn 0;\n\t}\n\t\n\t//Use a binary search to find the last index of an element\
    \ greater than or equal to the previous one and less than the previous one\n\t\
    for(var i = 0; i <= len-1; i++){\n\t\tif((arr[i] <= arr[i-1] && arr[i] >= arr[i-2])\
    \ || (arr[i] == arr[i-1] && arr[i] == arr[i-2])){\n\t\t\t//There are duplicates\n\
    \t\t\treturn -1;\n\t\t}\n\t}\n\treturn i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpnnuupqge.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnnuupqge.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largestIndex = -1;\n    for(var i=0;\
    \ i < arr.length; i++) {\n        if(arr[i] != i && arr[i] > largestIndex) {\n\
    \            largestIndex = arr[i];\n        }\n    }\n    return largestIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp1d75jac1.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1d75jac1.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxElem = null;\n  let maxPos = -1;\n\
    \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > maxElem){\n      maxElem\
    \ = arr[i];\n      maxPos = i;\n    }\n  }\n\n  return maxPos;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmplh4uflp1.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmplh4uflp1.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if (arr.length === 0) { return -1; }\n\
    \    var len = arr.length;\n    var largest;\n    var prev_max;\n    var i;\n\
    \    for(i=0;i<len;i++){\n        if (largest === undefined || arr[i] >= largest)\
    \ {\n            largest = arr[i];\n        }\n        else if (arr[i] > largest){\n\
    \            largest = arr[i];\n            prev_max = largest;\n        }\n \
    \   }\n    if (largest === undefined){\n        return -1;\n    }\n    return\
    \ largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp2gm8un1p.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2gm8un1p.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet maxIndex = 1;\n\tfor(let i = 1; i <\
    \ arr.length; i++){\n\t\tif(arr[i] > arr[maxIndex]){\n\t\t\tmaxIndex = i;\n\t\t\
    }\n\t}\n\treturn maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmphtk8oujl.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmphtk8oujl.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet maxIndex = null;\n\tlet maxVal = -Infinity;\n\
    \tfor(let i = arr.length-1; i >= 0; i--){\n\t\tif(arr[i] > maxVal){\n\t\t\tmaxVal\
    \ = arr[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxIndex;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmps23otdg1.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmps23otdg1.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let result = 0;\n    for(let i=0; i<arr.length-1;\
    \ i++){\n        if(arr[i] + 1 < arr[i+1]){\n            result = i;\n       \
    \     break;\n        }\n    }\n    return result != -1 ? result : arr.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpnj5tx8gm.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnj5tx8gm.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if(arr.length == 0) return -1\n  \n  let\
    \ prev = 0\n  let max = -1\n  for(let i of arr){\n    if(max < i){\n      max\
    \ = i\n      prev = i\n    }\n  }\n  \n  for(let i of arr){\n    if(i == prev){\n\
    \      return i\n    }\n  }\n  \n  return -1\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpipbo3_sq.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpipbo3_sq.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tarr = arr.filter(function(e, i) { return\
    \ i != 0 && (e <= arr[i-1]); });\n\treturn arr.length == 1 ? arr[0] : -1;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n4\n    at test (/tmp/tmpwjoi14dg.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwjoi14dg.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(arr.length == 0){\n        return -1;\n\
    \    }\n    var largest = arr[0];\n    var index_of_largest_value = 0;\n    for(var\
    \ i = 1; i < arr.length; i++){\n        if(largest < arr[i]){\n            index_of_largest_value\
    \ = i;\n        }\n    }\n    return index_of_largest_value;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpb2x2ku5z.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb2x2ku5z.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(arr.length == 0){\n        return -1;\n\
    \    }\n    var last_index = arr.length-1;\n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i] <= arr[last_index]){\n            last_index = i;\n       \
    \ }\n    }\n    return last_index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmplah4uuok.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmplah4uuok.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let newArr = [],\n        maxIndex = 0;\n\
    \    arr.forEach((elem,idx)=>{\n        if (idx >= maxIndex && newArr.indexOf(elem)\
    \ == -1){\n            maxIndex = idx;\n            newArr.push(elem);\n     \
    \   }\n    });\n    return newArr.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp1yduolaw.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1yduolaw.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var l = arr.length;\n  var lastIndex = -1;\n\
    \  for(var i =0; i< l; i++){\n    if(arr[i] <= arr[i+1])\n      return -1;\n \
    \   else if(arr[i] > arr[i+1])\n      lastIndex = i;\n  }\n  return lastIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpynoibi6l.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpynoibi6l.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxVal = arr[0];\n  let maxIdx = 0;\n\
    \  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < maxVal){\n      maxVal\
    \ = arr[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmplmc9051k.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmplmc9051k.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let index = 0;\n    let arrangement =\
    \ 0;\n    for(let i of arr){\n        arrangement += i;\n        if(arrangement\
    \ > index){\n            index = arrangement;\n        }\n    }\n    if(index\
    \ < arr.length){\n        return index;\n    }\n    return -1;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp5196uqkv.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5196uqkv.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    arr.sort();\n    var arrange = 1;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        if(arr[i] > arr[i-1]){\n    \
    \        arrange++;\n        }\n        else{\n            break;\n        }\n\
    \    }\n    return arrange;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpe922r1q8.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe922r1q8.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var index = 0;\n    for(var i = 0; i<arr.length;\
    \ i++){\n        index += Math.pow(arr[i], i);\n    }\n    return Math.pow(index,\
    \ arr.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n136023078872351\n\nshould equal\n\n3\n \
    \   at test (/tmp/tmp9851zyjs.js:20:10)\n    at Object.<anonymous> (/tmp/tmp9851zyjs.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 136023078872351,\n  expected: 3,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = 0;\n    for(var i = 0; i\
    \ < arr.length; i++){\n        var current = arr[i];\n        var previousElem\
    \ = arr[largest - 1];\n        if(current <= previousElem){\n            return\
    \ largest;\n        }\n        largest = i;\n    }\n    return -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpyfbk2unv.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyfbk2unv.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tarr.sort(function(a, b){\n\t\treturn b-a;\n\
    \t});\n\tvar last = arr.length - 1;\n\tvar max_val = arr[0];\n\tfor(var i = 1;\
    \ i < arr.length; i++){\n\t\tif(arr[i] >= max_val){\n\t\t\tmax_val = arr[i];\n\
    \t\t}\n\t\tif(arr[i] > max_val && arr[i] >= last){\n\t\t\treturn -1;\n\t\t}\n\t\
    }\n\treturn max_val;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpm4xipp9j.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm4xipp9j.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\t// Only one element\n\tif(!arr.length) return\
    \ -1;\n\t// Get the previous element's index\n\tvar prev_idx = arr[0] >= arr[1]\
    \ ? 1 : 0;\n\t// If this element greater than the previous element\n\tif(arr[prev_idx]\
    \ > arr[0]){\n\t\t// Find the index of the first non-greater element\n\t\tfor(var\
    \ i = prev_idx + 1; i <= arr.length; i++){\n\t\t\tif(arr[i] > arr[i-1]){\n\t\t\
    \t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn arr.length;\n\t}\n\treturn prev_idx;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpmnjm7ued.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmnjm7ued.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var n = arr.length;\n    if(n === 0){\n\
    \        return -1;\n    }\n    for(var i = 1; i < n; i++){\n        if(arr[i]\
    \ >= arr[i-1]){\n            return -1;\n        }\n    }\n    return i;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmprad7uj4s.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmprad7uj4s.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largestIndex = -1;\n\n  for (var i =\
    \ 0; i < arr.length; i++){\n    var element = arr[i];\n    if(i > 0){\n      if(element\
    \ >= arr[largestIndex]){\n        largestIndex = i;\n      }\n    } else {\n \
    \     largestIndex = i;\n    }\n  }\n  return largestIndex;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp5v48e2o8.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5v48e2o8.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1;\n  arr.forEach(function(element,\
    \ index){\n    if (element >= maxIndex) maxIndex = element;\n  });\n  return maxIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmppbn123y0.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmppbn123y0.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=1; i<arr.length; i++){\n   \
    \     if(arr[i]>=arr[arr[i-1]])\n            return -1;\n    }\n    return arr.length-1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpy9b0uiab.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy9b0uiab.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tarr.sort(function(a,b){ \n\t\tif(a>b){return\
    \ 1;}\n\t\tif(a<b){return -1;}\n\t\treturn 0;\n\t});\n\tvar max = -1, i = 0;\n\
    \twhile(arr[i]){\n\t\tif(arr[i] > max){\n\t\t\tmax = arr[i];\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn max+1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n6\n\nshould equal\n\n3\n    at test (/tmp/tmp4j3wyuqx.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4j3wyuqx.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if (arr.length == 0){\n    return -1;\n\
    \  }\n  // Find the highest element in the array.\n  let max = arr[0];\n  for\
    \ (let i = 1; i < arr.length; i++){\n    if (arr[i] > max){\n      max = arr[i];\n\
    \    }\n  }\n  // Now go through each value in the array and see if it is the\
    \ max value.\n  let prev = -1\n  for (let i = 0; i < arr.length; i++){\n    if\
    \ (arr[i] == max){\n      prev = i;\n    }\n  }\n  if (prev == -1){\n    return\
    \ -1;\n  }\n  // If there is a value higher than the max then return it\n  //\
    \ and subtract one from the index\n  return prev;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpe8pnn9m2.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe8pnn9m2.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxValue = arr[0]\n    var index =\
    \ -1\n\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i] >= maxValue){\n\
    \            index = i;\n            maxValue = arr[index]\n        }\n    }\n\
    \    return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmph4yj02ss.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmph4yj02ss.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=0; i<arr.length; i++){\n   \
    \     if(i==0 || arr[i]<=arr[i-1]) return i;\n    }\n    return -1;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmphzhy2u2q.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmphzhy2u2q.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    arr = arr.sort();\n    var i = 0;\n  \
    \  while(i < arr.length){\n        if(arr[i] <= arr[i-1])\n            return\
    \ -1;\n        i++;\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpj38_25k2.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj38_25k2.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let largest = -1\n  for (let i = 0; arr[i];\
    \ i++) {\n    if (arr[i] > largest){\n      largest = arr[i]\n    }\n  }\n  return\
    \ largest\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpfwu56ece.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfwu56ece.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = -1;\n  for(var i = 0; i <=\
    \ arr.length; i++){\n    if(arr[i] < largest){\n      largest = arr[i];\n    }\n\
    \  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp83djax1v.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp83djax1v.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var l = arr.length, max = -1;\n    for\
    \ (var i = 0; i < l; i++){\n        if (max < arr[i] && arr[i] > 0)\n        \
    \    max = arr[i];\n        if (arr[i] > 0) break;\n    }\n    return max;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmp1j_0d49u.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1j_0d49u.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = arr[0];\n    for(var i =\
    \ 1; i < arr.length; i++){\n        if(arr[i] >= largest)\n            break;\n\
    \    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpmyj_j3rf.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmyj_j3rf.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var length = arr.length;\n  for(var i =\
    \ 1; i < length; i++){\n    if(arr[i] > arr[i - 1] && arr[i] < arr[i + 1])\n \
    \     return i;\n  }\n  return -1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpr8k5ff4s.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr8k5ff4s.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIndex = -1;\n    for(var i=0; i<\
    \ arr.length; i++){\n        if(arr[i] >= maxIndex){\n            maxIndex = arr[i];\n\
    \        }\n    }\n    return maxIndex+1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n6\n\nshould equal\n\n3\n    at test (/tmp/tmpz46qzkfs.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz46qzkfs.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = -1;\n  for(var i = 1; i <\
    \ arr.length; i++){\n    if(largest < arr[i] && arr[i] >= largest)\n      largest\
    \ = arr[i];\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpv9e_twwe.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9e_twwe.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let l=arr.length,\n        i,\n      \
    \  j,\n        max=-1,\n        left=-1;\n    for(i=0;i<l-1;i++){\n        left++;\n\
    \        for(j=i;j<l;j++){\n            if(arr[j]<=arr[left]){\n             \
    \   left++;\n                if(arr[j]>max){\n                    max=arr[j];\n\
    \                }\n            }\n        }\n    }\n    return max>0?max:-1;\n\
    }\nlet arr=new Array(10).fill(0);\narr[20]=1;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp90kf0nia.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp90kf0nia.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet max = 0;\n\tfor(let i = 1; i < arr.length;\
    \ i++){\n\t\tif(arr[i] > arr[max]){\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn max;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpmxjmh_fj.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmxjmh_fj.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(var i = 1; i < arr.length; i++){\n \
    \   if(arr[i] > arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpdqc5y9er.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdqc5y9er.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var ret=-1;\n    for(var i=0; i<arr.length;\
    \ i++){\n        if(arr[i]>arr[i-1] || i==0){\n            ret=i;\n          \
    \  break;\n        }\n    }\n    return ret;\n}\nvar can = new can_arrange(arr);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_ud5f30l.js:18\nvar can = new can_arrange(arr);\n             \
    \             ^\n\nReferenceError: arr is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmp_ud5f30l.js:18:27)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIndex = -1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] >= maxIndex){\n            maxIndex\
    \ = arr[i];\n        }\n    }\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpst9lc8ny.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpst9lc8ny.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar max = Math.max.apply(null, arr);\n\t\
    for(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] > max){\n\t\t\tmax = arr[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp8omwop8t.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8omwop8t.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = -1;\n    arr.forEach(function(el,\
    \ i){\n        if(el < arr[largest]){\n            largest = i;\n        }\n \
    \   })\n    return largest;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpxsziprkb.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxsziprkb.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = -Infinity;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > arr[largest]){\n         \
    \   largest = i;\n        }\n    }\n    return largest === -Infinity? -1 : largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpkwf4yq5f.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkwf4yq5f.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet n = arr.length - 1;\n\tlet largest =\
    \ -Infinity;\n\tfor(let i=0; i<n; i++){\n\t\tif(arr[i] > arr[i+1]){\n\t\t\tif(arr[i]\
    \ > largest){\n\t\t\t\tlargest = arr[i];\n\t\t\t}\n\t\t}else{\n\t\t\tif(arr[i]\
    \ === arr[i+1]){\n\t\t\t\tlargest = arr[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn largest\
    \ >= 0 ? largest : -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpoiyu72n5.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoiyu72n5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = -1,\n      last = -1,\n  \
    \    curr;\n\n  for (var i = 0; i < arr.length; i++){\n    curr = i;\n    while(curr\
    \ > 0 && arr[curr - 1] > arr[curr]){\n      curr = curr - 1;\n    }\n    arr[last]\
    \ = arr[curr];\n    last = curr;\n  }\n  return largest;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpcld3hfk4.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcld3hfk4.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  return Math.max.apply(null, arr.filter(function(val,\
    \ ind, arr){\n    return val >= arr[ind - 1];\n  }))\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmprra40m4o.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmprra40m4o.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i-1] >= arr[i]){\n            return -1;\n        }\n    }\n \
    \   return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmponp0rlnq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmponp0rlnq.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if (arr.length <= 1) return -1;\n  if (arr.length\
    \ === 2) return arr[1] - arr[0];\n  var largest = 0;\n  var index = 0;\n  for\
    \ (var i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[index]) {\n      index\
    \ = i;\n      largest = i;\n    } else if (arr[i] > arr[largest]) {\n      largest\
    \ = i;\n    }\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmphx7gv3rr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmphx7gv3rr.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let i=0,j=arr.length-1,m=0;\n  while(i<j){\n\
    \    if(arr[i]<arr[j]){\n      m=i;\n      i+=1;\n    }\n    else if(arr[i]>arr[j]){\n\
    \      m-=1;\n    }\n    else if(arr[i]===arr[j]){\n      return -1\n    }\n \
    \   i++;\n    j-=1;\n  }\n  return m;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpx1o10bqq.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx1o10bqq.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var n = arr.length;\n  if(n < 2) return\
    \ -1;\n  var largestIndex = -1;\n  var largest = -Infinity;\n  for(var i=0; i\
    \ < n; i++){\n    var cur = arr[i];\n    if(cur > largest){\n      largestIndex\
    \ = i;\n      largest = cur;\n    }\n  }\n  return largestIndex;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp5pjtjv5s.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5pjtjv5s.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let largest = -1;\n  arr.forEach( (v,i)\
    \ => {\n    if(v > largest && i > 0){\n      largest = v;\n    }\n  })\n  return\
    \ largest;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp7nw02m_9.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7nw02m_9.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  return Math.max.apply(null, arr);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpajh60l69.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpajh60l69.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max_index = -1;\n    for(var i=0;\
    \ i<arr.length-1; i++){\n        if(arr[i]+1 > arr[i+1]){\n            return\
    \ -1;\n        }\n        if(arr[i] > max_index){\n            max_index = arr[i];\n\
    \        }\n    }\n    return max_index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpce_i1lto.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpce_i1lto.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let max = -Infinity;\n  let maxIndex = 0;\n\
    \  for(let i = 0; i<arr.length; i++){\n    if(arr[i] < arr[0]){\n      continue;\n\
    \    }\n    if(arr[i] > arr[maxIndex]){\n      max = arr[i];\n      maxIndex =\
    \ i;\n    }\n  }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp1y9ujyx_.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1y9ujyx_.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = -1;\n  for(var i=0;i<arr.length;i++){\n\
    \    if(i!=maxIndex){\n      if(arr[i]>=arr[i+1]){\n        maxIndex = i;\n  \
    \    }\n    }\n  }\n  return maxIndex;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpqk371xyn.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqk371xyn.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if(arr.length==0){\n    return -1;\n  }\n\
    \  var largest=Math.max.apply(Math, arr);\n  var index=-1;\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>largest){\n      index+=1;\n      largest=arr[i];\n    }\n  }\n\
    \  return index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpwl9cd_ho.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwl9cd_ho.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  if(arr.length === 0) return -1;\n  if(arr.length\
    \ === 1) return 0;\n  var n = arr.slice(1).reduce(function(a,b){return Math.max(a,b);});\n\
    \  for(var i = 0;i < arr.length;++i){\n    if(arr[i] < n){\n      return i;\n\
    \    }\n  }\n  return -1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpuxh2fcgk.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuxh2fcgk.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max_index=-1;\n    var last_index=0;\n\
    \    for (var i=0;i<arr.length;i++){\n        if(arr[i]>=arr[last_index]){\n \
    \           max_index=last_index;\n        }\n        last_index=arr[i];\n   \
    \ }\n    return max_index;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n-1\n    at test (/tmp/tmpzogqz7yg.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzogqz7yg.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: -1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\t// Base Case - If there are no numbers greater\
    \ than or equal to\n\t// each other return -1\n\tif(arr.length === 0 || arr.length\
    \ === 1){\n\t\treturn -1;\n\t}\n\t\n\t// Search and return the max index of an\
    \ element which is not\n\t// greater than or equal to the element immediately\
    \ preceeding it\n\tlet max_index = arr.length - 1;\n\tfor(let i = 1; i < arr.length;\
    \ i++){\n\t\tif(arr[i] > arr[max_index]){\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\
    \n\treturn max_index;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpofhnxqsu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpofhnxqsu.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  for(let i = 1; i < arr.length; i++) {\n\
    \    if(arr[i] > arr[i - 1] && arr[i] != 0) {\n      return i;\n    }\n  }\n \
    \ return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmplt96ai91.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmplt96ai91.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    // Your code here!\n    let maxIndex =\
    \ -1;\n    let lastIndex = 0;\n    arr.forEach((el,index) => {\n        if(index\
    \ <= lastIndex) {\n            console.log('Index cannot have duplicate', index,\
    \ lastIndex);\n            return;\n        }\n        if(el > arr[lastIndex])\
    \ {\n            maxIndex = index;\n            lastIndex = index;\n        }\n\
    \    });\n    return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: "Index cannot have duplicate 0 0\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmplwbdf7fj.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmplwbdf7fj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let maxIndex = arr.findIndex(x => x >\
    \ 0);\n    if(maxIndex === -1){\n        return -1;\n    }else{\n        let result\
    \ = arr[0] === arr[1] && arr[0] === arr[2] && arr[0] === arr[3] ? 0 : (arr[0]\
    \ <= arr[maxIndex] ? maxIndex : -1);\n        return result > -1 ? result : -1;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp3ci1fd_3.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3ci1fd_3.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  //Find the largest index of an element not\
    \ greater than or equal to the\n  //element immediately preceding it. \n  var\
    \ maxIndex = 0;\n  for(var i =0; i < arr.length; i++){\n    if(arr[i] < arr[i-1])\n\
    \      maxIndex = i;\n  }\n  if(maxIndex == arr.length-1){\n    return -1;\n \
    \ }\n  return maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n-1\n    at test (/tmp/tmpzax9vy_c.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzax9vy_c.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: -1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i = arr.length - 1; i >= 0; i--){\n\
    \t\tif(arr[i] >= arr[i-1]){\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn arr.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp4ijletji.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ijletji.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxVal = arr[0], minVal = arr[0];\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= maxVal){\n   \
    \         maxVal = arr[i];\n        }\n        else if(arr[i] <= minVal){\n  \
    \          minVal = arr[i];\n        }\n    }\n    return -1*minVal;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpjjk7kqc8.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjjk7kqc8.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var len = arr.length;\n  var largest = -1;\n\
    \n  for(var i=0; i<len; i++){\n    var left = arr[i+1] || 0;\n    var right =\
    \ arr[i-1] || 0;\n\n    if (left>=right){\n      largest = i;\n    }\n  }\n  return\
    \ largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n-1\n    at test (/tmp/tmpt4vnztcr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt4vnztcr.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: -1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  arr.sort();\n  var last = arr[0];\n  var\
    \ maxIndex = -1;\n  var index = 0;\n  for(var i = 1; i < arr.length; i++){\n \
    \   if(arr[i] != last)\n      return index;\n    if(arr[i] > last){\n      index\
    \ = i;\n      last = arr[i];\n    }\n  }\n  return maxIndex;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp050gryuc.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp050gryuc.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let index = arr.length-1;\n  while (index\
    \ >= 0){\n    if (arr[index] <= arr[index-1]){\n      index--;\n    } else {\n\
    \      return index;\n    }\n  }\n  return -1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpqq7sjzq1.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqq7sjzq1.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet maxIndex = arr.indexOf(Math.max.apply(Math,\
    \ arr));\n\twhile(maxIndex > 0){\n\t\tlet index = arr.indexOf(arr[maxIndex-1]);\n\
    \t\tif(index > maxIndex) maxIndex = -1;\n\t\telse break;\n\t}\n\treturn maxIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpklmb1vbg.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpklmb1vbg.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i = 1; i < arr.length; i++){\n\t\
    \tif(arr[i] > arr[i - 1]){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpbbtjlqid.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbbtjlqid.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let maxI = -1, maxJ = -1;\n    let l =\
    \ 0;\n\n    for (let i = 1; i < arr.length; i++){\n        let tempI = i;\n  \
    \      let found = false;\n        for (let j = i; j < arr.length; j++){\n   \
    \         if (arr[j] < arr[tempI]){\n                tempI = j;\n            }\n\
    \        }\n        if(tempI !== i){\n            arr[i] = arr[tempI];\n     \
    \       l++;\n            maxI = i;\n            maxJ = tempI;\n        }\n  \
    \  }\n    return maxI;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpol2o4g8i.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpol2o4g8i.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i = 0; i < arr.length; i++) {\n\t\
    \tif(arr[i] >= arr[i-1]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n3\n    at test (/tmp/tmpqre4uvc2.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqre4uvc2.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    return arr.slice(0, arr.length).reduce(function(max,x){return\
    \ Math.max(max,x);},-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpd3aqeoqh.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd3aqeoqh.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar l = arr.length,\n\t\tmaxIndex = 0,\n\
    \t\tmaxVal = arr[0],\n\t\tminVal = arr[0],\n\t\ti, j, tmp;\n\tfor(i=1; i<l; i++){\n\
    \t\tmaxVal = Math.max(maxVal, arr[i]);\n\t\tminVal = Math.min(minVal, arr[i]);\n\
    \t}\n\tfor(i=1; i<l; i++){\n\t\tfor(j=i; j<l; j++){\n\t\t\tif(arr[j] < minVal){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(arr[j] > maxVal){\n\t\t\t\tj = j - 1;\n\t\t\t\
    }\n\t\t\ttmp = arr[j];\n\t\t\tarr[j] = arr[i];\n\t\t\tarr[i] = tmp;\n\t\t}\n\t\
    }\n\treturn maxIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmpecgam3oj.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpecgam3oj.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let max = arr[0]\n  let min = arr[0]\n \
    \ for(let i = 1; i < arr.length; i++){\n    if(max < arr[i]){\n      max = arr[i]\n\
    \    }\n    if(min > arr[i]){\n      min = arr[i]\n    }\n  }\n  return arr.length\
    \ - max + min - 1\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp_cngwjqc.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_cngwjqc.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tif (arr === null || arr.length === 0) return\
    \ -1;\n\tlet largestIndex = 0;\n\tfor (let i = 1; i < arr.length; i++) {\n\t\t\
    if (arr[i] >= arr[largestIndex]) largestIndex = i;\n\t}\n\treturn largestIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp0uhn8wp8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0uhn8wp8.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var highest = -1,\n        highest_index;\n\
    \n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] <= arr[highest +\
    \ 1]){\n            highest = i;\n            highest_index = highest + 1;\n \
    \       }\n    }\n    return highest_index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpr3ppe0wo.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr3ppe0wo.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var length = arr.length;\n  var max_val\
    \ = 0;\n  for (var i = 0; i < length-1; i++){\n    if (arr[i] >= arr[i+1])\n \
    \     max_val = arr[i];\n  }\n  return max_val;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp_pch3dk7.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_pch3dk7.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(let i = 1; i < arr.length; i++){\n\t\
    \tlet index = arr.indexOf(arr[i]);\n\t\tif(index > 0 && (index === arr.lastIndexOf(arr[i-1])\
    \ || arr[i-1] === arr[index]))\n\t\t\treturn -1;\n\t}\n\treturn arr.length - 1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpizt7z8lr.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpizt7z8lr.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max_val = 0;\n    var max_index =\
    \ -1;\n\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] <= arr[i\
    \ - 1]){\n            max_index = i;\n        }\n        if(max_index != -1){\n\
    \            max_val = arr[i - 1];\n        }\n    }\n    return max_index;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let largest = arr[0];\n  let smallest =\
    \ arr[0];\n  let lastIdx = arr.length-1;\n  for (let i = 1; i < arr.length; i++){\n\
    \    if (arr[i] > arr[i-1]){\n      largest = arr[i];\n      lastIdx = i;\n  \
    \  } else if (arr[i] === arr[i-1]){\n      if (arr[i+1] > arr[i]){\n        largest\
    \ = arr[i];\n        lastIdx = i;\n      }\n    }\n    if (largest !== arr[i-1]){\n\
    \      smallest = arr[i-1];\n      break;\n    }\n  }\n  if (smallest === arr[lastIdx]){\n\
    \    smallest = arr[0];\n    largest = arr[0];\n    return lastIdx;\n  } else\
    \ {\n    return -1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpeh6zsgrk.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeh6zsgrk.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIndex = -1;\n    for(var i=0; i<arr.length;\
    \ i++){\n        for(var j=i; j<arr.length; j++){\n            if(arr[j]<=arr[j+1]){\n\
    \                break;\n            }\n            if(maxIndex < 0){\n      \
    \          maxIndex = j;\n            }\n        }\n    }\n    return maxIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmppgikmh_f.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmppgikmh_f.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let max = -1;\n    for (let i = 0; i <\
    \ arr.length; i++){\n        if (arr[i] > max){\n            max = arr[i];\n \
    \       }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmphrg4couq.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmphrg4couq.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largestIndex = arr.length - 1;\n  var\
    \ max = arr[0];\n\n  for(var i = 0; i < arr.length; i++){\n    if(max < arr[i]){\n\
    \      largestIndex = i;\n      max = arr[i];\n    }\n  }\n\n  return largestIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp4hn202ft.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4hn202ft.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var res = -1;\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] > res){\n      res = arr[i];\n    }\n  }\n  return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpp22vfqyb.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp22vfqyb.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = arr.shift();\n  return arr.indexOf(largest)\
    \ == -1 ? -1 : largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpan4n94ve.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpan4n94ve.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i=0; i<arr.length-1; i++){\n\t\t\
    if(arr[i+1] <= arr[i]){\n\t\t\treturn i+1;\n\t\t}\n\t}\n\treturn -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpygsk20by.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpygsk20by.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var len = arr.length;\n    if(len < 2){\n\
    \        return -1;\n    }\n    if(len == 2){\n        if(arr[0] == arr[1]){\n\
    \            return 0;\n        }\n        if(arr[0] > arr[1]){\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    for(var i = 1; i < len; i++){\n\
    \        var val = arr[i];\n        if(val > arr[i - 1] && val > arr[i + 1]){\n\
    \            return i;\n        }\n    }\n    return -1;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpt276wogf.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt276wogf.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var largest = -1;\n  for (var i = 0; i <\
    \ arr.length; i++){\n    if (arr[i] >= arr[largest]){\n      largest = i;\n  \
    \  }\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmpx_d4y1z9.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx_d4y1z9.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIndex = 0;\n    var currentIndex\
    \ = 0;\n    var currentValue = arr[0];\n    while (currentIndex < arr.length &&\
    \ currentValue <= arr[currentIndex]){\n        maxIndex = currentIndex;\n    \
    \    currentIndex++;\n        currentValue = arr[currentIndex];\n    }\n    if\
    \ (currentIndex < arr.length){\n        return -1;\n    }\n    return maxIndex;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpb2gstrap.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb2gstrap.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var maxIndex = 0;\n    var maxElem = arr[0];\n\
    \n    for (var i=1; i<arr.length; i++){\n        if (arr[i] >= maxElem){\n   \
    \         maxIndex = i;\n        }\n    }\n\n    return maxIndex;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpk4fasagc.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk4fasagc.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet max_index = -1;\n\tfor(let i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] <= arr[max_index]){\n\t\t\treturn -1;\n\t\t}\n\t\telse\
    \ if(arr[i] > arr[max_index]){\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn max_index;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-1\n\nshould equal\n\n3\n    at test (/tmp/tmp3fxt8c7t.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3fxt8c7t.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    let largest = 0;\n    let pos = 0;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= arr[largest]){\n\
    \            largest = pos;\n        }\n        pos++;\n    }\n    return largest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmp1ukol7hz.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1ukol7hz.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tvar max = arr[0];\n\tvar index = -1;\n\t\
    for (var i = 1; i < arr.length; i++){\n\t\tif (arr[i] > max){\n\t\t\tmax = arr[i];\n\
    \t\t\tindex = i;\n\t\t}\n\t}\n\treturn index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpip4w1w40.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpip4w1w40.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var l = arr.length;\n    var maxIdx =\
    \ -1, maxVal = -1;\n    for(var i = 0; i < l; ++i){\n        if(arr[i] < maxVal){\n\
    \            maxIdx = i;\n            maxVal = arr[i];\n        } else if(arr[i]\
    \ > maxVal){\n            maxVal = arr[i];\n        }\n    }\n    return maxIdx;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(!arr || arr.length === 0){\n      \
    \  return -1;\n    }\n\n    var maxIndex = 0; //The last index which is not greater\
    \ than arr[0]\n    var minIndex = 0;\n    var len = arr.length;\n    \n    for(var\
    \ i=0; i<len; i++){\n        if(arr[i] > arr[maxIndex]){\n            maxIndex\
    \ = i;\n        }\n        if(arr[i] < arr[minIndex]){\n            minIndex =\
    \ i;\n        }\n    }\n\n    return maxIndex + 1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpawj7ewpw.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpawj7ewpw.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  let maxIndex = -1\n  let maxElem = arr[0]\n\
    \  for(let i = 1; i < arr.length; i++){\n    if(arr[i] > maxElem){\n      maxElem\
    \ = arr[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n3\n    at test (/tmp/tmpz27xwufh.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz27xwufh.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var i, index, maxIndex;\n    for(i = 1;\
    \ i < arr.length; i++) {\n        index = arr.indexOf(arr[i]);\n        if(index\
    \ === -1) {\n            return -1;\n        }\n        if(i > index){\n     \
    \       index = arr.indexOf(arr[i-1]);\n        }\n        if(index > maxIndex)\
    \ {\n            maxIndex = index;\n        }\n    }\n    return maxIndex;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n3\n    at test\
    \ (/tmp/tmptvk5tftm.js:30:10)\n    at Object.<anonymous> (/tmp/tmptvk5tftm.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tfor(var i=0; i<arr.length-1; i++){\n\t\t\
    if(arr[i] > arr[i+1])\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpz8ck6z88.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz8ck6z88.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] > max && arr[i] != arr[i-1])\n        \
    \    max = arr[i];\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp59xw6ns9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp59xw6ns9.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    for(var i=0;i<arr.length;i++){\n     \
    \   if(i>0 && arr[i-1]>=arr[i])\n            return i-1;\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=0 tags=c,arrays |>\n<| a tags=c,arrays |>\n<code>\nint\
    \ arr[]={1,3,5,2,4,6,8,9};\n\nint maxIndex(int*arr,int size){\n\n    int i=0;\n\
    \    int max=0;\n\n    while(i<size){\n        if(arr[i]>arr[i+1]){\n        \
    \    max=i;\n        }\n        else{\n            i++;\n        }\n    }\n  \
    \  return max;\n\n}\n\nint main(){\n\n    int maxindex=maxIndex(arr,7);\n    printf(\"\
    %d\\n\",maxindex);\n\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include<stdio.h>\n\
    #include<stdlib.h>\n#include<conio.h>\n\nvoid main()\n{\nint arr[10]={1,4,7,4,2,8,0,9,6,5};\n\
    int max=arr[0];\nint i;\nfor(i=1;i<10;i++)\n{\n    if(arr[i]>max)\n    {\n   \
    \     max=arr[i];\n    }\n}\nprintf(\"%d\",max);\ngetch();\n}\n</code>\n<|/ a\
    \ dscore=0 tags=c,arrays |>\n<| c |>\nWelcome to Stack Overflow! Please don't\
    \ answer just with source code. Try to provide a nice description about how your\
    \ solution works. See: [How do I write a good answer?](https://stackoverflow.com/help/how-to-answer).\
    \ Thanks\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <string.h>\n\
    \nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n\n    char str[n];\n    scanf(\"\
    %s\", str);\n\n    int index = 0;\n    for(int i = 0; i < strlen(str); i++)\n\
    \    {\n        if(str[i] != '\\0')\n        {\n            index = i;\n     \
    \   }\n    }\n\n    int arr[n];\n    for(int i = 0; i < strlen(str); i++)\n  \
    \  {\n        arr[i] = str[i] - '0';\n    }\n\n    for(int i = 0; i < n; i++)\n\
    \    {\n        if(arr[i] > arr[index])\n        {\n            index = i;\n \
    \       }\n    }\n\n    printf(\"%d\", index);\n}\n</code>\n<|/ a tags=c,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n#include<stdio.h>\n#include<string.h>\nint main()\n\
    {\nint n, i;\nscanf(\"%d\", &n);\nchar arr[n];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0qamyf1s.js:15\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    var largest = arr[0];\n    for (var i=1;\
    \ i<arr.length; i++){\n        if(arr[i] >= largest){\n            largest = arr[i];\n\
    \        }\n    }\n    return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpkm08ors5.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkm08ors5.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    if(arr.length <= 1) return arr.length;\n\
    \    var biggest = arr[0];\n    for(var i = 1; i < arr.length; i++){\n       \
    \ if(arr[i] > biggest){\n            biggest = arr[i];\n        }\n    }\n   \
    \ return biggest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpwnrcotmc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwnrcotmc.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var maxIndex = 0;\n  for(var i=0; i< arr.length;\
    \ i++){\n    if(maxIndex < arr[i]){\n      maxIndex = i;\n    }\n  }\n  return\
    \ maxIndex+1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3,\
    \ 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmpjvt8feqg.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjvt8feqg.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    arr.forEach(function(ele){\n        var\
    \ index = arr.indexOf(ele);\n        if (index <= 0) {\n            index = arr.length-1;\n\
    \        } else {\n            while(index > 0) {\n                if (arr[index-1]\
    \ >= ele) {\n                    break;\n                }\n                index--;\n\
    \            }\n        }\n    });\n    return index;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphkj4zlrx.js:22\n    return index;\n    ^\n\nReferenceError: index\
    \ is not defined\n    at can_arrange (/tmp/tmphkj4zlrx.js:22:5)\n    at test (/tmp/tmphkj4zlrx.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmphkj4zlrx.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n    return Math.max.apply(Math, arr.slice(1).filter(function(elem,\
    \ i, arr){\n        return i != 0 && arr[i-1] < elem;\n    }))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI thought about this, but it is O(n^2) because you are\
    \ iterating the array twice.  It is possible to do it in O(n) by sorting the array\
    \ and finding the min and max values in O(n).\n<|/ c |>\n<| c |>\nTrue.  It turns\
    \ out that there is a solution in O(n) by finding the minimum and maximum element\
    \ of the array in O(n).  See my answer and let me know what you think.\n<|/ c\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0g_oqe1g.js:13\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n  var max = -1;\n  var maxIdx = 0;\n  for(var\
    \ i=0; i<arr.length-1; i++){\n    if(arr[i]>=arr[i+1]){\n      if(max==-1){\n\
    \        max = i;\n        maxIdx = i;\n      }\n      else{\n        if(arr[i]>max){\n\
    \          max = arr[i];\n          maxIdx = i;\n        }\n      }\n    }\n \
    \ }\n  if(max==-1){\n    max = arr.length;\n  }\n  return max;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n\
    \  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpme38m8pz.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpme38m8pz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function which returns the largest index of an element which\n\
    // is not greater than or equal to the element immediately preceding it. If\n\
    // no such element exists then return -1. The given array will not contain\n//\
    \ duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange(arr){\n\tlet largest = arr[0];\n\tfor (let i=1; i<arr.length;\
    \ i++){\n\t\tif (arr[i] > largest){\n\t\t\tlargest = arr[i];\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n\
    \  assert.deepEqual(candidate([]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n5\n\nshould equal\n\n3\n    at test (/tmp/tmp_zi7saoe.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_zi7saoe.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
