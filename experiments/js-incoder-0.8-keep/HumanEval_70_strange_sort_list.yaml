name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([])\
  \ == []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["\treturn lst.sort(function(a, b){\n\t\treturn a-b;\n\t});\n}\n", " \
    \   var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\n    for(var\
    \ i= min; i<=max;i++){\n        var temp=lst[i];\n        for(var j=i;j<lst.length;j++){\n\
    \            if(lst[j] < temp){\n                lst[j]=temp;\n            }\n\
    \        }\n    }\n    return lst;\n}\n", "    for(var i=lst.length-1;i>0;i--){\n\
    \        if(lst[i-1]>lst[i]){\n            lst[i]=lst[i-1];\n            lst[i-1]=lst[i];\n\
    \        }\n    }\n    return lst;\n}\n</code>\n<|/ a tags=javascript,arrays dscore=0\
    \ |>\n<| a tags=javascript,arrays dscore=0 |>\nIt can be done in 2 steps:\n\n\
    Sort array: arr.sort();\nLoop array from last to first: for(var i = arr.length\
    \ - 1; i >= 0; i--) {}.\n\nDemo:\n\n<code>\nvar arr = [5, 4, 3, 2, 1];\n", " \
    \ if(lst.length < 2) return lst;\n  var max_val = Math.max(...lst);\n  var min_val\
    \ = Math.min(...lst);\n  var first_max_idx = 0;\n  var first_min_index = 0;\n\
    \  var second_max_idx = lst.length - 1;\n  var second_min_index = lst.length -\
    \ 1;\n  var swap;\n\n  while(first_max_idx < lst.length && second_max_idx >= lst.length){\n\
    \    if(lst[first_max_idx] === max_val){\n      swap = first_max_idx;\n      first_max_idx++;\n\
    \      lst[swap] = lst[second_max_idx];\n      second_max_idx--;\n    }\n    else{\n\
    \      swap = second_max_idx;\n      second_max_idx--;\n    }\n    if(second_min_index\
    \ < lst.length - 1 && lst[second_min_index] === min_val){\n      lst[second_min_index]\
    \ = lst[first_min_index];\n      lst[first_min_index] = max_val;\n      first_min_index++;\n\
    \    }\n    else{\n      lst[second_min_index] = lst[first_min_index];\n     \
    \ lst[first_min_index] = min_val;\n      first_min_index++;\n    }\n  }\n  while(first_min_index\
    \ < lst.length && second_min_index >= lst.length){\n    if(lst[second_min_index]\
    \ === min_val){\n      swap = second_min_index;\n      second_min_index--;\n \
    \     lst[swap] = lst[first_min_index];\n      first_min_index++;\n    }\n   \
    \ else{\n      swap = first_min_index;\n      first_min_index++;\n    }\n    if(first_max_idx\
    \ < lst.length - 1 && lst[first_max_idx] === max_val){\n      lst[first_max_idx]\
    \ = lst[second_max_idx];\n      lst[second_max_idx] = min_val;\n      second_max_idx--;\n\
    \    }\n    else{\n      lst[first_max_idx] = lst[second_max_idx];\n      lst[second_max_idx]\
    \ = max_val;\n      second_max_idx--;\n    }\n  }\n  return lst;\n}\n", "    for(var\
    \ i=lst.length; i-- > 0;)\n    for(var j = lst.length; j < i; j++)\n        for(var\
    \ k = i; k > j; k--){\n            var temp=lst[k];\n            lst[k]=lst[j];\n\
    \            lst[j]=temp;\n        }\n    return lst;\n}\n", "    var sorted_lst\
    \ = []\n    sorted_lst = lst.sort(function(a,b){\n        return a-b\n    })\n\
    \    return sorted_lst\n}\n", "\tvar result = lst;\n\tvar len = result.length;\n\
    \t\n\twhile(len > 0){\n\t\tvar min = Math.min(result[len-1], result[len-2]);\n\
    \t\tvar max = Math.max(result[len-1], result[len-2]);\n\t\t\n\t\tfor(var i = len-2;\
    \ i > 0; i--){\n\t\t\tif((min < result[i-1]) && (result[i-1] < max)){\n\t\t\t\t\
    max = result[i-1];\n\t\t\t}\n\t\t\t\n\t\t\tif((max > result[i-1]) && (result[i-1]\
    \ < min)){\n\t\t\t\tmin = result[i-1];\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult.splice(1,\
    \ 0, min);\n\t\tresult.splice(0, 0, max);\n\t\tlen--;\n\t}\n\t\n\treturn result;\n\
    }\n", "\t// return null if list is empty\n\tif(lst.length < 1) return [];\n\t\
    // get the minimum element\n\tvar min = lst[0];\n\tfor(var i = 1, len = lst.length;\
    \ i < len; i++){\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\t//\
    \ remove minimum element from list\n\tlst = lst.filter(function(val){\n\t\treturn\
    \ val !== min;\n\t});\n\t// sort the remaining elements\n\treturn lst.sort(function(a,\
    \ b){\n\t\treturn a-b;\n\t});\n}\n", "    var len = lst.length\n    var minValue\
    \ = lst[0]\n    var maxValue = lst[len-1]\n    var res = []\n\n    for(var i =\
    \ len-1; i > 0; i--){\n        if(lst[i] < minValue){\n            minValue =\
    \ lst[i]\n        }\n        if(lst[i] > maxValue){\n            maxValue = lst[i]\n\
    \        }\n    }\n\n    for(var i = len-1; i > 0; i--){\n        res.push(minValue)\n\
    \        res.push(maxValue)\n        minValue = lst[i]\n        maxValue = lst[i]\n\
    \    }\n\n    res.push(minValue)\n    res.push(maxValue)\n    return res\n}\n",
  "  lst.sort(function(a, b) {\n    return a < b ? -1 : (a > b ? 1 : 0);\n  });\n\
    \  return lst;\n}\n", "  if(lst.length === 0) return lst;\n  if(lst.length ===\
    \ 1) return lst;\n  var minimum = lst[0];\n  var maximum = lst[0];\n  for(var\
    \ i=1;i<lst.length; i++){\n    if(lst[i] < minimum){\n      minimum = lst[i];\n\
    \    }\n    else if(lst[i] > maximum){\n      maximum = lst[i];\n    }\n  }\n\
    \  var new_lst = [];\n  new_lst.push(minimum);\n  new_lst.push(maximum);\n  for(var\
    \ i=2;i<lst.length; i++){\n    if(lst[i]<minimum){\n      new_lst.push(minimum);\n\
    \      minimum = lst[i];\n    }\n    else if(lst[i]>maximum){\n      new_lst.push(maximum);\n\
    \      maximum = lst[i];\n    }\n  }\n  new_lst.push(minimum);\n  new_lst.push(maximum);\n\
    \  return new_lst;\n}\n", "    let newList = [];\n    for(let i=0; i<lst.length;\
    \ i++){\n        let min = Math.min(...lst);\n        let max = Math.max(...lst);\n\
    \        newList.push(min);\n        newList.push(max);\n    }\n    return newList;\n\
    }\n", "    // if list is empty, return empty list\n    if(lst.length < 1){ return\
    \ []; }\n    var minIndex = Math.min(lst.length, lst.length / 2); //index of min\
    \ value \n    var maxIndex = Math.max(lst.length, lst.length / 2); //index of\
    \ max value \n    var tmpArr = []; //temporary array for swapping\n    for(var\
    \ i = 0; i < lst.length; i++){\n        // swap current value to minimum of remaining\
    \ list \n        tmpArr[i] = lst[minIndex + i]; \n        lst[minIndex + i] =\
    \ lst[i]; \n        lst[i] = tmpArr[i]; \n    }\n    return lst; \n}\n", "  //\
    \ Sort first by last number\n  var sorted_list = lst.sort((a, b) => {\n    return\
    \ b - a\n  })\n  // Sort second by first number\n  sorted_list = sorted_list.sort((a,\
    \ b) => {\n    return a - b\n  })\n  return sorted_list\n}\n", "\tvar new_lst\
    \ = lst;\n\tvar sorted_lst = [];\n\tfor(var i=0;i<lst.length;i++){\n\t\tnew_lst\
    \ = sort_list(new_lst);\n\t}\n\tfor(var i=0;i<lst.length;i++){\n\t\tsorted_lst.push(new_lst[i]);\n\
    \t}\n\treturn sorted_lst;\n}\n", "\tif(lst.length == 0){\n\t\treturn lst\n\t}\n\
    \t\n\tvar min = lst[0];\n\tvar max = lst[lst.length-1];\n\t\n\t// Get the first\
    \ and last elements of the sorted list\n\tvar first_element = lst[lst.length/2-1];\n\
    \tvar last_element = lst[lst.length/2];\n\t\n\tvar tmp;\n\t\n\tfor(var i = 0;\
    \ i < lst.length; i++){\n\t\tif(lst[i] > max){\n\t\t\ttmp = max;\n\t\t\tmax =\
    \ lst[i];\n\t\t\tlst[i] = tmp;\n\t\t}\n\t\tif(lst[i] < min){\n\t\t\ttmp = min;\n\
    \t\t\tmin = lst[i];\n\t\t\tlst[i] = tmp;\n\t\t}\n\t\tif(lst[i] > first_element){\n\
    \t\t\ttmp = first_element;\n\t\t\tfirst_element = lst[i];\n\t\t\tlst[i] = tmp;\n\
    \t\t}\n\t\tif(lst[i] < last_element){\n\t\t\ttmp = last_element;\n\t\t\tlast_element\
    \ = lst[i];\n\t\t\tlst[i] = tmp;\n\t\t}\n\t}\n\t\n\tconsole.log(lst);\n\treturn\
    \ lst;\n}\n", "  var min = Math.min(...lst);\n  var max = Math.max(...lst);\n\
    \  var list = lst.slice();\n  list.sort((a, b) => a - b - max - min);\n  return\
    \ list;\n}\n", "  return lst.sort((a, b) => (a - b))\n}\n", "  if(lst.length <\
    \ 2) return lst;\n  return strange_sort_list(\n    [Math.min(...lst), Math.max(...lst),\
    \ lst[0], lst[1]]\n  );\n}\n", "  var new_lst = lst;\n  new_lst.sort(function(current,\
    \ next){\n    return current - next;\n  });\n  return new_lst;\n}\n", "  var sorted\
    \ = []\n  lst = lst.sort(function(a, b){\n    return a - b\n  })\n  var i = 0;\n\
    \  for(i = 0; i < lst.length; i++){\n    sorted.push(lst[i])\n  }\n  return sorted\n\
    }\n", "  var copy_list = lst.slice();\n  return copy_list.sort(function(a,b){\n\
    \    return a - b;\n  }).reverse();\n}", "    let sortedArr = []\n    let sortedArr\
    \ = lst.sort(function(a,b){\n        return a - b\n    })\n    return sortedArr\n\
    }\n", "  let length = lst.length;\n  if(length == 0){\n    return [];\n  }\n \
    \ let minimum = lst[0];\n  let maximum = lst[0];\n  for(let i=1; i<length; i++){\n\
    \    if(minimum >= lst[i]){\n      minimum = lst[i];\n    }\n    if(maximum <=\
    \ lst[i]){\n      maximum = lst[i];\n    }\n  }\n  let sorted_list = lst.slice();\n\
    \  let index_of_min_value = minimum;\n  let index_of_max_value = maximum;\n  for(let\
    \ i=1; i<length; i++){\n    if(minimum >= lst[i]){\n      index_of_min_value =\
    \ i;\n    }\n    if(maximum <= lst[i]){\n      index_of_max_value = i;\n    }\n\
    \  }\n  for(let j=0; j<length; j++){\n    while(sorted_list[j] > minimum){\n \
    \     sorted_list.splice(j, 0, sorted_list[j]);\n      index_of_min_value++;\n\
    \    }\n    while(sorted_list[j] < maximum){\n      sorted_list.splice(j, 0, sorted_list[j]);\n\
    \      index_of_max_value++;\n    }\n  }\n  return sorted_list.slice(0, length);\n\
    }\nstrange_sort_list([1]);\nstrange_sort_list([1,2]);\nstrange_sort_list([2,1]);\n\
    strange_sort_list([2,1,3]);\nstrange_sort_list([3,2,1]);\nstrange_sort_list([3,4,1]);\n\
    strange_sort_list([4,1,3]);\nstrange_sort_list([4,2,1]);\nstrange_sort_list([5,4,1]);\n\
    strange_sort_list([5,3,1]);\nstrange_sort_list([5,4,2]);\nstrange_sort_list([5,5,3]);\n\
    strange_sort_list([6,5,3,1]);\nstrange_sort_list([6,5,4,1]);\nstrange_sort_list([7,5,4,1]);\n\
    strange_sort_list([8,5,4,1]);\nstrange_sort_list([9,5,4,1]);\nstrange_sort_list([10,5,4,1]);\n\
    strange_sort_list([11,5,4,1]);\nstrange_sort_list([12,5,4,1]);\nstrange_sort_list([13,5,4,1]);\n\
    strange_sort_list([14,5,4,1]);\nstrange_sort_list([15,5,4,1]);\nstrange_sort_list([16,5,4,1]);\n\
    strange_sort_list([17,5,4,1]);\nstrange_sort_list([18,5,4,1]);\nstr", "\tif(lst.length\
    \ <= 1) return lst;\n\tlst.sort(function(a, b){return b-a});\n\treturn strange_sort_list(lst.slice(0,\
    \ lst.length-1));\n}\n", "  \n  // Set up a loop to find min and max integers\n\
    \  var max = lst[0];\n  var min = lst[0];\n\n  for(var i=1; i<lst.length; i++){\n\
    \    if(lst[i] > max){\n      max = lst[i];\n    }\n    if(lst[i] < min){\n  \
    \    min = lst[i];\n    }\n  }\n  \n  // Set up loop to go through each element\
    \ of list and swap it with max integer\n  for(var i=0; i<lst.length; i++){\n \
    \   if(lst[i] > max){\n      swap(lst[i], max);\n      max = lst[i];\n    }\n\
    \  }\n  // Set up loop to go through each element of list and swap it with min\
    \ integer\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] < min){\n      swap(lst[i],\
    \ min);\n      min = lst[i];\n    }\n  }\n  // Return updated list\n  return lst;\n\
    }\n", "\tvar i,\n\t\tlen = lst.length,\n\t\tswap;\n\n\tfor(i = 0; i < len; i++){\n\
    \t\tswitch(i % 3){\n\t\t\tcase 0:\n\t\t\t\tswap = lst[i];\n\t\t\t\tlst[i] = lst[i+1];\n\
    \t\t\t\tlst[i+1] = swap;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tswap = lst[i];\n\
    \t\t\t\tlst[i] = lst[i+1];\n\t\t\t\tlst[i+1] = swap;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 2:\n\t\t\t\tswap = lst[i];\n\t\t\t\tlst[i] = lst[i+1];\n\t\t\t\tlst[i+1] = swap;\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lst;\n}\n", "  if(lst.length == 0) return\
    \ lst;\n  var min = lst[0];\n  var max = lst[0];\n  for(var i = 1; i < lst.length;\
    \ i++){\n    var elem = lst[i];\n    if(elem < min){\n      min = elem;\n    }\
    \ else if(elem > max){\n      max = elem;\n    }\n  }\n  var tmp;\n  tmp = min;\n\
    \  min = max;\n  max = tmp;\n  for(var i = 0; i < lst.length; i++){\n    lst[i]\
    \ = min + (max - min)/2;\n  }\n  return(lst);\n}\n", "\tvar max_num = Math.max.apply(Math,lst);\n\
    \tvar min_num = Math.min.apply(Math,lst);\n\tvar min_val = Math.floor(min_num);\n\
    \tvar max_val = Math.ceil(max_num);\n\tvar new_lst = [];\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tvar new_val = lst[i];\n\t\tif(new_val>max_val){\n\t\t\tnew_val = max_val;\n\
    \t\t}\n\t\telse if(new_val<min_val){\n\t\t\tnew_val = min_val;\n\t\t}\n\t\tnew_lst.push(new_val);\n\
    \t}\n\treturn new_lst;\n}\n", "  var sorted = [];\n  \n  lst.forEach(function(x){\n\
    \    if (sorted[x] == undefined){\n      sorted.push(x);\n    } else {\n     \
    \ sorted.splice(sorted.indexOf(x), 0, x);\n    }\n  });\n  \n  return sorted;\n\
    }\n", "    return lst\n}", "  if (lst.length === 0) {\n    return [];\n  }\n\n\
    \  return lst.sort(function (a, b) {\n    // Sort the list so that smaller numbers\
    \ are in the beginning\n    if (a < b) {\n      return -1;\n    }\n    if (a >\
    \ b) {\n      return 1;\n    }\n\n    // If the two numbers match, sort in reverse\
    \ order\n    return 0;\n  });\n}\n", "    if(lst.length == 0){\n        return\
    \ lst;\n    }\n    var minIndex = lst.indexOf(Math.min(lst));\n    var maxIndex\
    \ = lst.indexOf(Math.max(lst));\n    var midIndex = (minIndex + maxIndex) / 2;\n\
    \n    var leftHalf = lst.slice(0, minIndex);\n    var rightHalf = lst.slice(maxIndex+1,\
    \ lst.length);\n    return strange_sort_list(leftHalf).concat(rightHalf).concat(strange_sort_list(rightHalf));\n\
    }\n", "    let sorted = [];\n    for(let i = 0;i<lst.length;i++){\n        sorted.push(lst[i]);\n\
    \    }\n    for(let i = 1;i<lst.length;i++){\n        while(sorted[sorted.length-1]\
    \ > lst[i]){\n            sorted.pop();\n        }\n    }\n    return sorted;\n\
    }\n", "    var ret = [];\n    var min = lst[0];\n    var max = lst[0];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n\
    \        }\n        if(lst[i] < min){\n            min = lst[i];\n        }\n\
    \    }\n    for(var j = 0; j < lst.length; j++){\n        var temp;\n        if(lst[j]\
    \ < min){\n            temp = min;\n            min = lst[j];\n            lst[j]\
    \ = temp;\n        }\n        if(lst[j] > max){\n            temp = max;\n   \
    \         max = lst[j];\n            lst[j] = temp;\n        }\n    }\n    ret.push(min);\n\
    \    ret.push(max);\n    for(var i = 0; i < lst.length; i++){\n        lst[i]\
    \ = lst[i] - min;\n    }\n    for(var i = 0; i < lst.length; i++){\n        lst[i]\
    \ %= 10;\n    }\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] <\
    \ 10){\n            ret.push(\"0\" + lst[i]);\n        } else {\n            ret.push(lst[i]);\n\
    \        }\n    }\n    return ret;\n}\n\n", "    var sorted_lst = [];\n    while(lst.length\
    \ > 0){\n        var min_int = lst[0];\n        var max_int = lst[0];\n      \
    \  for (var i = 1; i < lst.length; i++){\n            if(lst[i] < min_int){\n\
    \                min_int = lst[i];\n            }\n            if(lst[i] > max_int){\n\
    \                max_int = lst[i];\n            }\n        }\n        sorted_lst.push(min_int);\n\
    \        sorted_lst.push(max_int);\n        sorted_lst.unshift(min_int);\n   \
    \     sorted_lst.unshift(max_int);\n        lst = lst.slice(1);\n    }\n    return\
    \ sorted_lst;\n}\n", "    var len = lst.length;\n    // If length of list is zero\
    \ or one, return empty\n    if(len <= 1 || len > 2)\n        return [];\n    //\
    \ If list length is greater than 1, do recursion\n    return recursive_sort(lst,\
    \ 0, len - 1);\n}\n", "  let new_lst = [];\n  for (let i=0;i<lst.length;i++){\n\
    \    for(let j=0;j<lst.length-i-1;j++){\n      if(lst[j]>lst[j+1]){\n        let\
    \ temp = lst[j];\n        lst[j] = lst[j+1];\n        lst[j+1] = temp;\n     \
    \ }\n    }\n  }\n  return new_lst;\n}\n", "  var i, j, n, tmp;\n  n = lst.length;\n\
    \  if(n === 1){\n    return lst;\n  }\n  tmp = lst[0];\n  j = n - 1;\n  for(i\
    \ = 0; i < n; i++){\n    if(lst[i] > tmp){\n      for(; j > 0; j--){\n       \
    \ lst[j] = lst[j-1];\n      }\n      lst[0] = tmp;\n      tmp = lst[i];\n    \
    \  i = i - 1;\n    }\n  }\n  return lst;\n}\n", "    var lst2 = [];\n    for (var\
    \ i = 1; i < lst.length; i++){\n        lst2.push(lst[i-1]);\n    }\n    for (var\
    \ j = 1; j < lst.length; j++){\n        lst2.push(lst[j-1]);\n    }\n    for (var\
    \ k = 1; k < lst.length; k++){\n        lst2.push(lst[k-1]);\n    }\n    for (var\
    \ l = 1; l < lst.length; l++){\n        lst2.push(lst[l-1]);\n    }\n    return\
    \ lst2;\n}", "  // Your code here\n  var sortedList = lst.sort(function(x, y)\
    \ { return x - y; });\n  console.log(sortedList);\n  return sortedList;\n}\n",
  "    var maxIndex = 0;\n    var min = lst[0];\n    var max = 0;\n\n    for(var i\
    \ = 1; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n\
    \            maxIndex = i;\n        }\n        if(lst[i] < min){\n           \
    \ min = lst[i];\n        }\n    }\n    var newList = [];\n    newList.push(min);\n\
    \    for(var i = 1; i < maxIndex; i++){\n        newList.push(lst[i]);\n    }\n\
    \    newList.push(max);\n\n    return newList;\n}\n</code>\n<|/ a dscore=0 tags=javascript\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n<code>\nlet strangeArray\
    \ = [5,10,8,2,6,9,1,3,7,4,5,6,7,8,9,2,4,6,8,1,3,5,9,2,5,4,7,8,7,3,9,1,6,2,8,3,6,1,9,5,5,7,4,3,8,9,2,5,7,8,7,6,4,2,9,6,2,8,9,5,7,5,8,6,7,4,2,9,5,5,7,8,4,6,2,8,9,1,3,7,4,5,6,7,8,9,2,4,6,8,1,3,5,9,2,5,4,7,8,7,3,9,1,6,2,8,3,6,1,9,5,5,7,4,3,8,9,2,5,7,8,7,6,4,2,9,6,2,8,9,5,7,5,8,6,7,4,2,9,5,5,7,8,4,6,2,8,9,1,3,7,4,5,6,7,8,9,2,4,6,8,1,3,5,9,2,5,4,7,8,7,3,9,1,6,2,8,3,6,1,9,5,5,7,4,3,8,9,2,5,7,8,7,6,4,2,9,6,2,8,9,5,7,5,8,6,7,4,2,9,5,5,7,8,4,6,2,8,9,1,3,7,4,5,6,7,8,9,2,4,6,8,1,3,5,9,2,5,4,7,8,7,3,9,1,6,2,8,3,6,1,9,5,5,7,4,3,8,9,2,5,7,8,7,6,4,2,9,6,2,8,9,5,7,5,8,6,7,4,2,9,5,5,7,8,4,6,2,8,9,1,3,7,4,5,6,7,8,9,2,4,6,8,1,3,5,9,2,5,4,7,8,7,3,9,1,6,2,8,3,6,1,9,5,5,7,4,3,8,9,2,5,7,8,7,6,4,2,9,6,2,8,9,",
  "  lst.sort();\n  var result = [];\n  while(lst.length > 0){\n    result.push(lst.shift());\n\
    \  }\n  return result;\n}\n", "  var lstCopy = lstCopy.concat(lst);\n\n  return\
    \ lstCopy.sort(function(x, y) {\n    return x - y;\n  });\n}\n</code>\nThen we\
    \ call the function in the html element to have the list sorted\n<code>\n<p id=\"\
    demo\"></p>\n\n<p id=\"demo1\"></p>\n</code>\nThe function strange_sort_list takes\
    \ in the list lstCopy, adds it as a parameter, and returns it as strange order\
    \ list.\nThe variable 'lstCopy' is declared in the function as var lstCopy = lstCopy.concat(lst);\
    \ where it takes in the list 'lst' and concats it to the list 'lstCopy'.\n<|/\
    \ a |>\n<| a tags=sorting,javascript |>\nThis can be done in one line\n\n<code>\n\
    let list = ['5', '4', '3', '2', '1']\n\nlet sorted_list = list.sort((a,b) => +b\
    \ - +a)\n", "\tvar len = lst.length;\n\tvar min = lst[0];\n\tvar max = lst[0];\n\
    \t\n\tfor (var i=1; i < len; i++){\n\t\tif (lst[i] < min){\n\t\t\tmin = lst[i];\n\
    \t\t}\n\t\tif (lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\t\n\t\n\tvar\
    \ sorted_list = [];\n\t\n\tvar swapped;\n\tfor (var i=0; i < len; i++){\n\t\t\
    swapped = false;\n\t\tfor (var j = 0; j < len; j++){\n\t\t\tif (lst[j] > max &&\
    \ lst[j] < min){\n\t\t\t\tswap(sorted_list, j, i-1);\n\t\t\t\tswapped = true;\n\
    \t\t\t}\n\t\t}\n\t\tif (!swapped){\n\t\t\tswap(sorted_list, i, len-1);\n\t\t}\n\
    \t}\n\t\n\t\n\t\n\treturn sorted_list;\n}", "    var lst2 = [];\n    for(var i=0;\
    \ i<lst.length; i++){\n        if(i % 2 == 0){\n            lst2.push(lst[i]);\n\
    \        }\n        else if(i % 2 != 0){\n            lst2.push(lst[lst2.length-1]);\n\
    \        }\n    }\n    return lst2;\n}\n", "\tlet arr = [];\n\tlet temp = []\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\ttemp.push(lst[i]);\n\t}\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tfor(let j = i + 1; j < lst.length; j++){\n\
    \t\t\tlet a = Number(temp[i]);\n\t\t\tlet b = Number(temp[j]);\n\t\t\tif(a > b){\n\
    \t\t\t\tarr.push(a);\n\t\t\t\tarr.push(b);\n\t\t\t\tlet temp2 = [];\n\t\t\t\t\
    temp2.push(a);\n\t\t\t\ttemp2.push(b);\n\t\t\t\ttemp.splice(i,1,temp2);\n\t\t\t\
    \ti--;\n\t\t\t\tj--;\n\t\t\t}else if(a < b){\n\t\t\t\tarr.push(b);\n\t\t\t\tarr.push(a);\n\
    \t\t\t\tlet temp2 = [];\n\t\t\t\ttemp2.push(b);\n\t\t\t\ttemp2.push(a);\n\t\t\t\
    \ttemp.splice(i,1,temp2);\n\t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return arr;\n}\n", "\t\n\t// Check list for non empty list.\n\tif(lst.length ==\
    \ 0){\n\t\treturn lst;\n\t}\n\t\n\t// Get the minimum value in the list.\n\tvar\
    \ min = lst[0];\n\t\n\t// If the list is empty, return empty list.\n\tif(lst.length\
    \ == 1){\n\t\treturn [];\n\t}\n\t\n\t// For each element in the list.\n\tfor(var\
    \ i = 1; i < lst.length; i++){\n\t\t// Compare with minimum value.\n\t\tif(lst[i]\
    \ < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\t\n\t// Swap the minimum value with\
    \ the first element.\n\tlst[0] = min;\n\t\n\t// Now that we have the minimum value\
    \ in the first position,\n\t// repeat the process for rest of the elements.\n\t\
    for(var i = 0; i < lst.length - 1; i++){\n\t\tvar swap = lst[i];\n\t\tvar current\
    \ = lst[i + 1];\n\t\tvar min = lst[0];\n\t\t\n\t\t// If the list is not empty,\
    \ compare with minimum value.\n\t\tif(lst[i] > min){\n\t\t\tmin = lst[i];\n\t\t\
    }\n\t\t\n\t\t// If current element is smaller than minimum, swap it with minimum\
    \ element.\n\t\tif(current < min){\n\t\t\tlst[i + 1] = min;\n\t\t\tlst[i] = current;\n\
    \t\t}\n\t}\n\t\n\treturn lst;\n}\n", "    let sortedList = [];\n    let minIndex\
    \ = -1;\n    let maxIndex = -1;\n    for (let i = 0; i < lst.length; i++){\n \
    \       if (i == 0){\n            minIndex = i;\n        } else if (lst[i] < lst[minIndex]){\n\
    \            minIndex = i;\n        }\n        if (i == lst.length-1){\n     \
    \       maxIndex = i;\n        } else if (lst[i] > lst[maxIndex]){\n         \
    \   maxIndex = i;\n        }\n    }\n    for (let i = minIndex+1; i <= maxIndex;\
    \ i++){\n        sortedList.push(lst[i]);\n    }\n    return sortedList;\n}\n",
  "    if (lst.length === 0) {\n        return [];\n    }\n\n    let min = lst[0];\n\
    \    let max = lst[lst.length - 1];\n    let tmpMin = min;\n    let tmpMax = max;\n\
    \n    // Iterate through the list while min and max are changing.\n    for (let\
    \ i = 1; i < lst.length; i++){\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n        } else if (lst[i] < min) {\n            min = lst[i];\n   \
    \     } else {\n            // min and max are not equal, so swap them and remove\
    \ the element from list.\n            lst[i] = min > max ? tmpMin : tmpMax;\n\
    \            lst = lst.filter((e, index) => index !== i);\n            // If the\
    \ element has been removed from the list, break from the loop.\n            if\
    \ (lst.length === 0) {\n                break;\n            }\n        }\n   \
    \ }\n\n    return lst;\n}\n", "\tvar res = [], i, j, l = lst.length, m = Math.pow(2,l-1),\
    \ k;\n\n\tfor (i = 1; i < m; i++) {\n\t\tk = i.toString(2);\n\t\twhile (k.length\
    \ < l) {\n\t\t\tk = '0' + k;\n\t\t}\n\t\tj = Number(k);\n\t\twhile (j > 0) {\n\
    \t\t\tres.push(lst[j % l]);\n\t\t\tj = Math.floor(j / 2);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "    if(!lst.length) return lst;\n    const len = lst.length;\n\
    \    const sorted = new Array(len).fill('');\n    for(let i = 0; i < len; i++){\n\
    \        sorted[len-i-1] = lst[i];\n    }\n    return sorted;\n}\n", "\tif (lst.length\
    \ == 0)\n\t\treturn lst;\n\t\n\tvar minimum = lst[0];\n\tvar maximum = lst[0];\n\
    \tfor (var i = 1; i < lst.length; ++i){\n\t\tif (lst[i] < minimum)\n\t\t\tminimum\
    \ = lst[i];\n\t\tif (lst[i] > maximum)\n\t\t\tmaximum = lst[i];\n\t}\n\t\n\tvar\
    \ new_lst = [minimum, maximum, lst[lst.length-1], lst[0]];\n\t\n\treturn strange_sort_list(new_lst);\n\
    }\n", "  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length;\
    \ i++){\n    if (lst[i] < min){\n      min = lst[i];\n    }\n    if (lst[i] >\
    \ max){\n      max = lst[i];\n    }\n  }\n\n  let arr = [];\n  for (let i = min;\
    \ i < max; i++){\n    arr.push(i);\n  }\n\n  let result = [];\n  \n  for (let\
    \ i = 0; i < lst.length; i++){\n    for (let j = 0; j < arr.length; j++){\n  \
    \    if (lst[i] == arr[j]){\n        result.push(lst[i]);\n        arr.splice(j,\
    \ 1);\n        break;\n      }\n    }\n  }\n  \n  return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return lst\n    }\n    var largest = Math.max.apply(null, lst)\n\
    \    var smallest = Math.min.apply(null, lst)\n    var sorted_list = []\n    var\
    \ current_list = []\n    var index = 0\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] != largest){\n            current_list.push(lst[index])\n \
    \       }\n        else if(sorted_list.length == 0){\n            sorted_list\
    \ = current_list\n        }\n        else if(lst[i] != smallest){\n          \
    \  current_list.push(lst[index])\n            sorted_list = current_list\n   \
    \     }\n        else if(sorted_list.length != 0){\n            sorted_list =\
    \ current_list\n        }\n        index++\n    }\n    return sorted_list\n}\n",
  "\tlst.sort();\n\tvar tmp = [];\n\tfor(var i=0;i<lst.length;i++){\n\t\ttmp.push(lst[i]);\n\
    \t}\n\treturn tmp;\n}\n", "    var ret = [];\n    var minVal = lst[0];\n    var\
    \ maxVal = lst[0];\n\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > maxVal){\n            maxVal = lst[i];\n        }\n        else if(lst[i]\
    \ < minVal){\n            minVal = lst[i];\n        }\n    }\n\n    ret.push(minVal);\n\
    \    ret.push(maxVal);\n\n    for(var i = 2; i < lst.length; i++){\n        if(lst[i]\
    \ > maxVal){\n            ret.push(maxVal);\n            maxVal = lst[i];\n  \
    \      }\n        else if(lst[i] < minVal){\n            ret.push(minVal);\n \
    \           minVal = lst[i];\n        }\n        else{\n            ret.push(lst[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "\tlst.sort(function(a, b){\n\t\treturn\
    \ b-a;\n\t});\n\treturn lst;\n}\n", "   var i = lst.length\n   while(i--){\n \
    \     for(var j=i-1;j>=0;j--){\n         var a = lst[j]\n         var b = lst[j-1]\n\
    \         if(a>b){\n            lst[j-1] = a\n         }else{\n            lst[j-1]\
    \ = b\n         }\n      }\n   }\n   return lst\n}\n</code>\n<|/ a |>\n<| a tags=javascript\
    \ |>\n<code>", "  return lst.sort((a, b) => {\n    if(a == b){\n      return 0;\n\
    \    }\n    if(a > b){\n      return -1;\n    }\n    if(a < b){\n      return\
    \ 1;\n    }\n  });\n}\n", "    var len = lst.length;\n    if (len <= 1)\n    \
    \    return lst;\n\n    var first = lst[0];\n    for (var i = 1; i < len; i++)\n\
    \        if (lst[i] < first)\n            first = lst[i];\n    for (var i = len\
    \ - 1; i >= 1; i--)\n        if (lst[i] > first)\n            lst[i] = lst[i -\
    \ 1];\n    return lst;\n}\n", "    // Sort the list in the descending order.\n\
    \    lst = lst.sort(function(a, b){\n        return b - a\n    })\n\n    // If\
    \ the list has no elements, just return the original list.\n    if (lst.length\
    \ == 0) return lst\n\n    // Get the minimum and maximum of the list.\n    //\
    \ If the list is empty (no elements), return it.\n    var min_val = lst[0]\n \
    \   var max_val = lst[0]\n    for (var i = 1; i < lst.length; i++){\n        if\
    \ (lst[i] < min_val){\n            min_val = lst[i]\n        } else if (lst[i]\
    \ > max_val){\n            max_val = lst[i]\n        }\n    }\n\n    // We have\
    \ now the min/max values.\n    // Sort the list in the ascending order.\n    lst\
    \ = lst.sort(function(a, b){\n        return a - b\n    })\n\n    // Reverse the\
    \ list from the min/max values.\n    for (var i = lst.length - 1; i > 0; i--){\n\
    \        lst.unshift(lst.pop())\n    }\n\n    // Return the list in the original\
    \ order.\n    return lst\n}\n", "\tvar minInd = lst.indexOf(Math.min(...lst));\n\
    \tvar maxInd = lst.indexOf(Math.max(...lst));\n\t\n\tif(minInd == -1) {\n\t\t\
    return lst;\n\t}\n\t\n\tvar minValue = lst[minInd];\n\t\n\tvar maxValue = lst[maxInd];\n\
    \t\n\tvar newList = [];\n\t\n\tfor(var i = minInd; i < maxInd; i++) {\n\t\tnewList.push(lst[i]);\n\
    \t}\n\t\n\tfor(var i = maxInd; i > minInd; i--) {\n\t\tnewList.push(lst[i]);\n\
    \t}\n\t\n\tfor(var i = minInd; i < maxInd; i++) {\n\t\tnewList.push(lst[i]);\n\
    \t}\n\t\n\tfor(var i = maxInd; i > minInd; i--) {\n\t\tnewList.push(lst[i]);\n\
    \t}\n\t\n\tfor(var i = minInd; i < maxInd; i++) {\n\t\tnewList.push(lst[i]);\n\
    \t}\n\t\n\treturn newList;\n}\n\n", "\tvar sortedList = lst;\n\tsortedList.reverse();\n\
    \tvar min = sortedList[0];\n\tvar max = sortedList[0];\n\tfor(var i = sortedList.length\
    \ - 1; i >= 0; i--){\n\t\tif(min > sortedList[i]){\n\t\t\tmin = sortedList[i];\n\
    \t\t}\n\t\tif(max < sortedList[i]){\n\t\t\tmax = sortedList[i];\n\t\t}\n\t}\n\t\
    sortedList = sortedList.slice(min, max + 1);\n\treturn sortedList;\n}\n", "\t\
    return lst.sort(function(a, b){\n\t\ta = a - b;\n\t\tb = b - a;\n\t\ta = a - b;\n\
    \t\tb = b - a;\n\t\treturn -a - ( b + a );\n\t});\n}\n<|/ file ext=.js filename=tasks_controller.js\
    \ source=github dstars=0 |>", "\tvar tmp, min;\n\tif(!lst)return lst;\n\tmin =\
    \ lst[0] || 0;\n\tfor(var i = 1; i < lst.length; i++){\n\t\ttmp = lst[i];\n\t\t\
    if(tmp < min){\n\t\t\tmin = tmp;\n\t\t}\n\t}\n\tfor(var j = lst.length; j > 0;\
    \ j--){\n\t\ttmp = lst[j];\n\t\tif(tmp > min){\n\t\t\tlst[j] = tmp;\n\t\t}\n\t\
    }\n\treturn lst.slice(0, lst.length);\n}\n", "  for(var i = lst.length; i--;)\n\
    \    for(var j = i; j--;)\n      if(lst[i] > lst[j])\n        swap(lst[i], lst[j]);\n\
    \  return lst;\n}\n", "    let min = -10000\n    let max = 10000\n    for(let\
    \ i = lst.length-1; i >= 0; i--){\n        if(lst[i] < min){\n            min\
    \ = lst[i]\n        } else if(lst[i] > max){\n            max = lst[i]\n     \
    \   }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n\
    \            lst.splice(i, 1)\n        } else {\n            lst.splice(i, 0,\
    \ max)\n        }\n    }\n    return lst\n}\n</code>\n<|/ a dscore=0 tags=algorithm,arrays,sorting,javascript,sorting\
    \ |>\n<| c |>\nThis does not work if you call `strange_sort_list([2, 2, 2, 5])`,\
    \ which returns `[2, 2, 2, 5]`, whereas this should return `[2, 5, 2, 2]`.\n<|/\
    \ c |>\n<| c |>\n`strange_sort_list([2, 2, 2, 5])` would return `[2, 2, 2, 5]`\
    \ because `max` is `2` and `5` is not greater than `2`. The second value `2` would\
    \ be moved to the end of the array.\n<|/ c |>\n<| c |>\nYes, you're right. My\
    \ mistake, sorry.\n<|/ c |>\n<| a tags=algorithm,arrays,sorting,javascript,sorting\
    \ |>\n<code>\nvar array = [10, 3, 2, 1];", "   var min = Math.min(...lst),\n \
    \  max = Math.max(...lst);\n   var result = [];\n   for (var i = min; i <= max;\
    \ i++) {\n     result.push(i);\n   }\n   return result;\n}\n", "  lst = lst.sort();\n\
    \  for(var i=1;i<lst.length;i++){\n    var temp = lst[i];\n    lst[i] = lst[i-1];\n\
    \    lst[i-1] = temp;\n  }\n  return lst;\n}\n", "  var result = [];\n  var min\
    \ = null;\n  for(var i=0;i<lst.length;i++){\n    var current = lst[i];\n    if(!min\
    \ || current<min) min = current;\n  }\n  for(var i=0;i<lst.length;i++){\n    var\
    \ current = lst[i];\n    if(current<min){\n      var temp = min;\n      min =\
    \ current;\n      result.push(temp);\n    }\n    else result.push(current);\n\
    \  }\n  return result;\n}\n", "  if(lst.length < 2){\n    return lst;\n  }\n \
    \ var min = lst[0];\n  var max = lst[0];\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < min){\n      min = lst[i];\n    }\n    if(lst[i] > max){\n  \
    \    max = lst[i];\n    }\n  }\n  var result = [];\n  for(var i = min; i < max;\
    \ i++){\n    result.push(lst[i]);\n  }\n  result.sort(function(a, b){\n    return\
    \ (a - b);\n  });\n  for(var i = min; i < max; i++){\n    result.push(lst[i]);\n\
    \  }\n  return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nthanks for your\
    \ reply and it works in most cases but it is not working with some cases as in\
    \ the following example\n<|/ c |>\n<| c |>\n[2,4,6] ==> [2, 4, 6]\n[5,2,3,1] ==>\
    \ [5, 2, 3, 1]\n[4, 3, 2] ==> [4, 3, 2]\n<|/ c |>\n<| c |>\n[4,3,2] ==> [4,3,2]\n\
    [5,3,1,2] ==> [5,3,1,2]\n[2,4,6] ==> [2, 4, 6]\n<|/ c |>\n<| c |>\n[5,2,3,1] ==>\
    \ [5, 2, 3, 1]\n[4,3,2] ==> [4,3,2]\n<|/ c |>\n<| c |>\nI added a new answer which\
    \ has `O(n*log(n))` complexity\n<|/ c |>\n<| a tags=sorting,javascript |>\n<code>",
  "  if(lst.length <= 1) {\n    return lst;\n  }\n  let minimum = lst[0];\n  let maximum\
    \ = lst[0];\n  let middleIndex = 0;\n  for(let i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < minimum){\n      minimum = lst[i];\n    }\n    if(lst[i] > maximum){\n\
    \      maximum = lst[i];\n    }\n  }\n  middleIndex = lst.length / 2;\n  \n  return\
    \ strange_sort_list(lst.splice(middleIndex, 1)\n                             \
    \ .concat(lst.slice(0, middleIndex))\n                              .concat(strange_sort_list(lst.slice(middleIndex\
    \ + 1))));\n}", "\tvar res = [];\n\tfor(var i = 0, len = lst.length; i < len;\
    \ i++){\n\t\tvar min = Math.min(lst[i]);\n\t\tres.push(min);\n\t\tfor(var j =\
    \ 0, jLen = lst.length; j < jLen; j++){\n\t\t\tif(lst[j] == min){\n\t\t\t\tres.push(lst[j]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n", "  if(lst.length == 0) return []\n \
    \ \n  var min = lst[0]\n  var max = lst[0]\n  var min_idx = 0\n  var max_idx =\
    \ 0\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] < min) min = lst[i]\n \
    \   if(lst[i] > max) max = lst[i]\n  }\n  \n  while(min_idx < lst.length){\n \
    \   var temp = lst[min_idx]\n    lst[min_idx] = max\n    max   = min\n    min\
    \   = temp\n    \n    temp = lst[min_idx]\n    lst[min_idx] = min\n    min   =\
    \ max\n    max   = temp\n    \n    min_idx++\n  }\n  \n  while(max_idx < lst.length){\n\
    \    var temp = lst[max_idx]\n    lst[max_idx] = min\n    min   = max\n    max\
    \   = temp\n    \n    temp = lst[max_idx]\n    lst[max_idx] = max\n    max   =\
    \ min\n    min   = temp\n    \n    max_idx++\n  }\n  \n  return lst\n}\n", "\t\
    var i, j, sorted = [], curr;\n\tfor(i = 0; i < lst.length - 1; i++){\n\t\tcurr\
    \ = [];\n\t\tfor(j = 0; j < lst.length - 1 - i; j++){\n\t\t\tcurr.push(lst[j]);\n\
    \t\t}\n\t\tsorted.push(curr);\n\t}\n\treturn sorted;\n}", "    \n    // Initialise\
    \ some variables\n    var result = [];\n    var temp;\n    \n    // For each element\
    \ in the list...\n    lst.forEach(function(element) {\n        // Add it to the\
    \ result\n        result.push(element);\n        // And remove it from the list\n\
    \        lst.splice(lst.indexOf(element),1);\n    });\n    // Return result\n\
    \    return result;\n}\n", "\tvar l=lst.length,\n\t\ti,\n\t\tj,\n\t\tmin,\n\t\t\
    temp,\n\t\tswap;\n\t\n\tfor(i = 0; i < l; i++){\n\t\tmin = i;\n\t\tfor(j = i +\
    \ 1; j < l; j++){\n\t\t\tif(lst[j] < lst[min]){\n\t\t\t\tmin = j;\n\t\t\t}\n\t\
    \t}\n\t\ttemp = lst[i];\n\t\tlst[i] = lst[min];\n\t\tlst[min] = temp;\n\t}\n\t\
    return lst;\n}\n", "\tvar sorted = [];\n\tsorted = sorted.concat(lst);\n\tsorted.sort();\n\
    \tvar len = lst.length;\n\tfor (var i = len; i>0; i--){\n\t\tvar min = sorted[i-1];\n\
    \t\tfor (var j = i; j<len; j++){\n\t\t\tif (sorted[j] < min){\n\t\t\t\tsorted\
    \ = sorted.concat([sorted[j]]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\n", "  var res = [];\n  var min = 0;\n  var max = lst.length - 1;\n\
    \  while(min < max){\n    while(min < max && lst[min] <= lst[max]){\n      min++;\n\
    \    }\n    while(min < max && lst[max] <= lst[min]){\n      max--;\n    }\n \
    \   if(min < max){\n      res.push(lst[min]);\n      min++;\n      max--;\n  \
    \  }\n  }\n  return res;\n}\n</code>\n<|/ a tags=sorting,algorithm,javascript,arrays\
    \ |>\n<| c |>\nCan you explain how `strange_sort_list([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]`? It looks like it just reverses the entire list.\n<|/ c |>\n<| c |>\n\
    It doesn't reverse the whole list. It only reverses the sublist `[5, 5]`.\n<|/\
    \ c |>\n<| c |>\nI see. I got confused by the wording which reads as `sort a list\
    \ of integers in the strange order` but in actual fact, it just reverses the sublist.\n\
    <|/ c |>\n<| c |>\nI updated my post to explain how `strange_sort_list([5, 5,\
    \ 5, 5])` returns `[5, 5, 5, 5]`\n<|/ c |>\n<| a |>\n<code>", "    var swap =\
    \ function(index1, index2){\n        var tmp = lst[index1];\n        lst[index1]\
    \ = lst[index2];\n        lst[index2] = tmp;\n    };\n    for(var i = 0; i < lst.length;\
    \ i++){\n        var min = i;\n        for(var j = i + 1; j < lst.length; j++){\n\
    \            if(lst[j] < lst[min]){\n                min = j;\n            }\n\
    \        }\n        swap(i, min);\n    }\n    return lst;\n}\n", "\tlet result\
    \ = [];\n\tlet min_value = lst[0]\n\tlet max_value = lst[0]\n\tfor (let i = 0;\
    \ i < lst.length; i++){\n\t\tmin_value = Math.min(min_value, lst[i])\n\t\tmax_value\
    \ = Math.max(max_value, lst[i])\n\t}\n\twhile(max_value < min_value){\n\t\tresult.unshift(min_value)\n\
    \t\tmin_value++\n\t}\n\twhile(max_value > min_value){\n\t\tresult.push(max_value)\n\
    \t\tmax_value--\n\t}\n\twhile(min_value <= max_value){\n\t\tresult.unshift(min_value)\n\
    \t\tmin_value++\n\t}\n\twhile(min_value >= max_value){\n\t\tresult.push(max_value)\n\
    \t\tmax_value--\n\t}\n\treturn result\n}\n", "  var res = [];\n  var min = Math.min(...lst);\n\
    \  var max = Math.max(...lst);\n  for(var i of lst){\n    res.push(i);\n    for(var\
    \ j of lst){\n      if(j != i && j == min && i != max && i != j){\n        res.push(j);\n\
    \      }\n    }\n  }\n  return res;\n}\n", "\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tconst x = lst[i];\n\t\t\t\
    const y = lst[j];\n\t\t\tif(x < y){\n\t\t\t\tconst temp = lst[i];\n\t\t\t\tlst[i]\
    \ = lst[j];\n\t\t\t\tlst[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn lst;\n}\n",
  "  var list = lst\n  var result = []\n  var lowest = Number.MAX_SAFE_INTEGER\n \
    \ var highest = Number.MIN_SAFE_INTEGER\n  for(var i=0; i<list.length; i++){\n\
    \    lowest = Math.min(lowest, lst[i])\n    highest = Math.max(highest, lst[i])\n\
    \  }\n  var current = lowest\n  while(current <= highest){\n    var index = list.indexOf(current,\
    \ 0)\n    result.push(list.splice(index, 1)[0])\n    current = current + 1\n \
    \ }\n  return result\n}\n\n", "  return lst.sort((a,b)=>{\n    if(a>b)return 1;\n\
    \    if(a<b)return -1;\n    return 0;\n  });\n}\n\n", "    var sorted = [lst[0]];\n\
    \    var counter = 1;\n    for(var i = 1; i < lst.length; i++){\n        if(sorted[i-1]\
    \ > sorted[i]){\n            counter++;\n        }\n        sorted.push(lst[i]);\n\
    \        if(counter == 3){\n            sorted.push(sorted[counter-1]);\n    \
    \        counter = 1;\n        }\n    }\n    return sorted;\n}\n</code>\n<|/ a\
    \ tags=algorithm,arrays,javascript,sorting dscore=1 |>\n<| c |>\nAhh I see, sorry\
    \ I missed the part where you said you were not allowed to use any sorting algorithm\
    \ and only had to do this with arrays and conditionals. My bad, I thought you\
    \ were allowed to do that. Sorry for the misunderstanding\n<|/ c |>\n<| c |>\n\
    No worries. Thanks for taking your time to help me.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript,sorting\
    \ dscore=1 |>\nIf you have access to the functions like sort, reverse and push,\
    \ you can try the following approach\n\n<code>\nvar arr = [4, 8, 5, 2, 6, 7, 3,\
    \ 9, 1, 0];\n\narr.sort(function(a, b) {\n  return a - b;\n});\n\nvar arr2 = [];\n\
    \narr.forEach(function(item, index) {\n  arr2.push(item);\n});\n\narr2.reverse();\n\
    \nvar result = [];\n\narr2.forEach(function(item, index) {\n  if (item != arr2[0])\
    \ {\n    result.push(item);\n  }\n});\n", "  lst.sort(function(a, b){\n    if\
    \ (a > b) return 1;\n    if (b > a) return -1;\n    return 0;\n  });\n  return\
    \ lst;\n}", "  var newList = [];\n  var min = lst[0];\n  var max = lst[0];\n \
    \ for(var i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n\
    \    }\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    newList.push(lst[i]);\n  }\n  newList.push(min);\n\
    \  newList.push(max);\n  while(newList.length < lst.length){\n    newList.push(min);\n\
    \  }\n  while(newList.length > lst.length){\n    newList.pop();\n  }\n  return\
    \ newList;\n}\n", "  // Sort the array.\n  lst.sort((a,b) => a - b);\n  let result\
    \ = []\n  for(let i = 0; i < lst.length; i++){\n    result.push(lst[i]);\n  }\n\
    \  return result;\n}\n", "\tif(lst.length == 0){\n\t\treturn [];\n\t}\n\n\tvar\
    \ min = lst[0];\n\tvar max = lst[0];\n\tvar min_pos = 0;\n\tvar max_pos = 0;\n\
    \n\tfor(var i = 1; i < lst.length; i++){\n\t\tmin = Math.min(min, lst[i]);\n\t\
    \tmax = Math.max(max, lst[i]);\n\n\t\tmin_pos = i;\n\t\tmax_pos = i;\n\n\t\tif(min\
    \ == max){\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor(var i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == min){\n\t\t\tvar temp = lst[i];\n\t\t\tlst[i] = lst[min_pos];\n\
    \t\t\tlst[min_pos] = temp;\n\t\t}else if(lst[i] == max){\n\t\t\tvar temp = lst[i];\n\
    \t\t\tlst[i] = lst[max_pos];\n\t\t\tlst[max_pos] = temp;\n\t\t}\n\t}\n\n\treturn\
    \ lst;\n}\n", "    // create temp list of numbers\n    var tmp = lst.slice();\n\
    \    // Sort from smallest to largest\n    tmp.sort();\n    // Return copy to\
    \ avoid mutating original list\n    return tmp.slice();\n}\n", "    // Sort the\
    \ list first, then reverse the list.\n    // This ensures consistent order for\
    \ integers, floats, strings, etc.\n    lst.sort();\n    lst.sort();\n    lst.reverse();\n\
    \    return lst;\n}\n", "  const listLength = lst.length\n  if(listLength ===\
    \ 0) {\n    return lst\n  }\n\n  // Sort list from minimum to maximum\n  const\
    \ minIndex = Math.trunc(listLength / 2)\n  const maxIndex = listLength - minIndex\n\
    \  lst[minIndex], lst[maxIndex] = lst[maxIndex], lst[minIndex]\n\n  // Sort list\
    \ by swapping adjacent elements if necessary\n  for(let i = 0; i < listLength\
    \ - 1; i++){\n    for(let j = i + 1; j < listLength; j++){\n      if(lst[i] >\
    \ lst[j]){\n        const tmp = lst[i]\n        lst[i] = lst[j]\n        lst[j]\
    \ = tmp\n      }\n    }\n  }\n\n  return lst\n}\n", "    var min_value = lst[0];\n\
    \    for(var i = 1; i < lst.length; i++){\n        if (lst[i] < min_value){\n\
    \            min_value = lst[i];\n        }\n    }\n\n    var max_value = lst[0];\n\
    \    for(var i = 1; i < lst.length; i++){\n        if (lst[i] > max_value){\n\
    \            max_value = lst[i];\n        }\n    }\n\n    var lst2 = [min_value,\
    \ max_value, min_value, max_value, min_value, max_value, min_value, max_value];\n\
    \    return lst2.slice().sort();\n}\n", "    let strange_lst = []\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        strange_lst.push(lst[i])\n    }\n\n \
    \   for (let i = 0; i < lst.length; i++) {\n        let min_idx = strange_lst.indexOf(Math.min.apply(null,\
    \ strange_lst))\n        let max_idx = strange_lst.indexOf(Math.max.apply(null,\
    \ strange_lst))\n        strange_lst[min_idx] = Math.min.apply(null, strange_lst)\n\
    \        strange_lst[max_idx] = Math.max.apply(null, strange_lst)\n    }\n\n \
    \   return strange_lst\n}\n</code>\n<|/ a tags=arrays,sorting,javascript,sorting\
    \ |>\n<| a dscore=1 |>\nYou could sort with a custom callback for getting the\
    \ wanted value.\n\n<code>", "    let result = [];\n    const minValue = Math.min(...lst);\n\
    \    let maxValue = Math.max(...lst);\n    let minIndex = 0;\n    let maxIndex\
    \ = lst.length - 1;\n    for(;;){\n        // console.log(minIndex, maxIndex,\
    \ minValue, maxValue);\n        if(minIndex == maxIndex){\n            result.push(minValue)\n\
    \        }else if(lst[minIndex] < lst[maxIndex]){\n            result.push(lst[minIndex++]);\n\
    \        }else{\n            result.push(lst[maxIndex--]);\n        }\n    }\n\
    \    return result;\n}\n", "    return lst.reverse();\n}\nexports.strange_sort_list\
    \ = strange_sort_list;\n\n", "    return lst.sort((a, b) => a - b);\n}\n", "\t\
    let min= lst[0];\n\tlet max= lst.pop();\n\tfor(let i=0;i<lst.length;i++){\n\t\t\
    let el= lst[i];\n\t\tif(min>el){\n\t\t\tmin= el;\n\t\t}\n\t\tif(max<el){\n\t\t\
    \tmax= el;\n\t\t}\n\t}\n\tfor(let i=0;i<lst.length;i++){\n\t\tlet el= lst[i];\n\
    \t\tif(min>el){\n\t\t\tmin= el;\n\t\t}\n\t\tif(max<el){\n\t\t\tmax= el;\n\t\t\
    }\n\t}\n\tfor(let i=0;i<lst.length;i++){\n\t\tlet el= lst[i];\n\t\tif(min>el){\n\
    \t\t\tmin= el;\n\t\t}\n\t\tif(max<el){\n\t\t\tmax= el;\n\t\t}\n\t}\n\treturn lst;\n\
    }", "  var min = lst[0];\n  var max = lst[0];\n  for (var i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] > max){\n      max = lst[i];\n    }\n    if (lst[i] <\
    \ min){\n      min = lst[i];\n    }\n  }\n  \n  min = Math.max(min, 1);\n  max\
    \ = Math.min(max, 1);\n\n  var res = [];\n  for (var i = 0; i < lst.length; i++){\n\
    \    if (lst[i] >= min && lst[i] <= max){\n      res.push(lst[i]);\n    }\n  }\n\
    \n  return res;\n}", "  var sorted_lst = [];\n  sorted_lst.push(lst[0]); //Push\
    \ first element to sorted list.\n  for(var i = 1; i < lst.length; i++){\n    if\
    \ (lst[i] > sorted_lst[sorted_lst.length - 1]){ //If current element is bigger\
    \ than last element of list.\n      sorted_lst.push(lst[i]); //Push current element\
    \ to sorted list.\n    }\n  }\n  return sorted_lst;\n}\n", "    const min_index\
    \ = get_min_index(lst);\n    const max_index = get_max_index(lst, min_index);\n\
    \    const min_value = lst[min_index];\n    const max_value = lst[max_index];\n\
    \    for(i = min_index; i < max_index; i++)\n    {\n        const temp = lst[i];\n\
    \        lst[i] = lst[i-1];\n        lst[i-1] = temp;\n    }\n    return [min_value,\
    \ max_value, min_value, max_value, min_value, max_value, min_value, max_value];\n\
    }", "  const [min, max] = min_max_list(lst);\n  return sort_list(lst, min, max);\n\
    }\n", "  const arr = [];\n  lst.sort((a,b) => a-b);\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i != 0){\n      arr.push(lst[i]);\n    }\n  }\n  return arr;\n\
    }\n", "    let lst = lst.slice().sort((a,b) => a > b);\n    for (let i = 1; i\
    \ < lst.length; i++){\n        let temp = lst[i];\n        lst[i] = lst[i-1];\n\
    \        lst[i-1] = temp;\n    }\n    return lst;\n}", "  lst.sort((a, b) => {\n\
    \    if (a === b) return 0;\n    return a < b ? 1 : -1;\n  })\n  return lst;\n\
    }\n", "  for(let i = 0, n = lst.length; i < n; i++){\n    if(i !== n-1){\n   \
    \   let min_i = Math.min(i, n-1);\n      let max_i = Math.max(i, n-1);\n     \
    \ let tmp = lst[min_i];\n      lst[min_i] = lst[max_i];\n      lst[max_i] = tmp;\n\
    \    }\n  }\n  return lst;\n}", "    var lst2 = [];\n    lst2.push(lst[0]);\n\
    \    lst2.push(lst[lst.length-1]);\n    for(var i = 1;i < lst.length - 1;i++)\n\
    \    {\n        lst2.push(lst[i]);\n    }\n    for(var i = 0;i < lst.length /\
    \ 2;i++)\n    {\n        lst2.push(lst[i]);\n    }\n    return lst2;\n}", "\t\
    // create sorted list\n\tvar sorted_list = []\n\tsorted_list = lst.sort(function(a,\
    \ b){\n\t\t// find min\n\t\tvar min = a\n\t\tvar max = b\n\t\twhile(min<max){\n\
    \t\t\tmin = min+max\n\t\t}\n\t\tmax = max-min\n\t\t// check values\n\t\tif(a<b){\n\
    \t\t\treturn -1\n\t\t}else if(a>b){\n\t\t\treturn 1\n\t\t}else{\n\t\t\treturn\
    \ 0\n\t\t}\n\t})\n\t// return list\n\treturn sorted_list\n}\n\n", "    let new_lst\
    \ = lst;\n    let max_elem = Math.max(...new_lst);\n    let min_elem = Math.min(...new_lst);\n\
    \    new_lst = arr.filter(e => e !== min_elem && e !== max_elem);\n    new_lst.unshift(min_elem);\n\
    \    new_lst.push(max_elem);\n    return new_lst;\n}", "    let max = 0;\n   \
    \ let min = lst[0];\n    let res = [];\n    for(let i=1; i<lst.length; i++){\n\
    \        if(max < lst[i]) max = lst[i];\n        else if(min > lst[i]) min = lst[i];\n\
    \    }\n    for(let i=0; i<lst.length; i++){\n        res.push(max+min);\n   \
    \     max = lst[i];\n        min = lst[i];\n    }\n    return res;\n}\n", "  \
    \  let result = lst.slice();\n    let len = result.length;\n    let min = result[0];\n\
    \    let max = result[len-1];\n    for(let i = 1; i<len; i++){\n        while(min\
    \ < result[len-i] && result[len-i] < max){\n            result[len-i]--;\n   \
    \         i++;\n        }\n        while(min > result[len-i] && result[len-i]\
    \ > max){\n            result[len-i]++;\n            i++;\n        }\n       \
    \ while(min < result[len-i] && result[len-i] < max){\n            result[len-i]++;\n\
    \            i++;\n        }\n        while(min > result[len-i] && result[len-i]\
    \ > max){\n            result[len-i]--;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n", "  lst.sort(function(a, b){\n    return a - b\n  })\n\
    \  return lst\n}\n\n", "\tlet new_lst = [];\n\tlet temp_max_value = 0;\n\tfor(let\
    \ index = 0; index < lst.length; index++){\n\t\tnew_lst.push(lst[index]);\n\t\t\
    if(new_lst[index] > temp_max_value){\n\t\t\ttemp_max_value = new_lst[index];\n\
    \t\t}\n\t}\n\n\tlet temp_min_value = temp_max_value;\n\tfor(let index = 0; index\
    \ < lst.length; index++){\n\t\tnew_lst[index] = temp_min_value;\n\t\tif(new_lst[index]\
    \ < temp_min_value){\n\t\t\ttemp_min_value = new_lst[index];\n\t\t}\n\t}\n\n\t\
    return new_lst;\n}\n", "   let sortedList = [];\n   for (let index = 0; index\
    \ < lst.length; index++) {\n      for (let j=index+1; j < lst.length; j++) {\n\
    \         if (lst[j] < lst[index]) {\n            sortedList.unshift(lst[j]);\n\
    \            j--;\n         }\n      }\n      sortedList.unshift(lst[index]);\n\
    \   }\n   return sortedList;\n}\n", "  var sorted_lst = lst.slice();\n  var min\
    \ = sorted_lst.pop();\n  var max = sorted_lst.pop();\n  sorted_lst.push(min);\n\
    \  sorted_lst.push(max);\n  sorted_lst.sort();\n  return sorted_lst.concat(sorted_lst);\n\
    }\n", "    var lst = lst.slice();\n    var result = new Array();\n    var currentVal\
    \ = lst[0];\n    result.push(currentVal);\n    for (var i = 1; i < lst.length;\
    \ i++){\n        if (currentVal > lst[i]){\n            currentVal = lst[i];\n\
    \            result.push(currentVal);\n        }\n    }\n    return result;\n\
    }\n", "  if(lst.length <= 1){\n    return lst;\n  }\n  var n = lst.length, minIndex\
    \ = 0, maxIndex = n - 1;\n  while(maxIndex >= minIndex){\n    var minV = lst[minIndex];\n\
    \    var maxV = lst[maxIndex];\n    if(maxV < minV){\n      for(var i = maxIndex;\
    \ i >= minIndex; i--){\n        var t = lst[i];\n        lst[i] = lst[i-1];\n\
    \        lst[i-1] = t;\n      }\n      minIndex++;\n      maxIndex--;\n    } else\
    \ {\n      for(var i = minIndex; i <= maxIndex; i++){\n        var t = lst[i];\n\
    \        lst[i] = lst[i+1];\n        lst[i+1] = t;\n      }\n      maxIndex--;\n\
    \    }\n  }\n  return lst;\n}", "\t// Sort in descending order\n\tlst.sort(function(a,b){\n\
    \t\t// Sort in descending order\n\t\tif(b < a)\n\t\t\treturn -1;\n\t\telse if(b\
    \ > a)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn 0;\n\t});\n\t\n\t// Reverse order\n\
    \tlst.reverse();\n\treturn lst;\n}\n", "   var lst2 = lst.slice(0); //create copy\
    \ of list\n   var min = Math.min(...lst); //min value in list\n   var max = Math.max(...lst);\
    \ //max value in list\n   var i = lst.indexOf(min); //index of min value in list\n\
    \   var j = lst.indexOf(max); //index of max value in list\n   lst2.sort(); //sort\
    \ list\n   while(lst2.length && lst2.indexOf(lst2[0]) > -1) //find first value\
    \ greater than\n      lst2.shift(); //remove that value from list\n   while(lst2.length\
    \ && lst2.indexOf(lst2[lst2.length-1]) > -1) //find first value smaller than\n\
    \      lst2.pop();\n   if(lst2.length > 0){ //if list not empty\n      lst2.sort(function(a,b){\n\
    \         return a<b;\n      });\n   }\n   return lst2;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is not an answer to the question.\n<|/ c |>\n<| c |>\nWhat do you\
    \ mean by not an answer?\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\n\
    <|/ c |>\n<| c |>\nThis does not answer the question. It is a code snippet which\
    \ is not the answer to the question.\n<|/ c |>\n<| c |>\nPlease add some explanation\
    \ in your answer.\n<|/ c |>\n<| a |>\nFor anyone looking for a solution for JavaScript:\n\
    \n<code>\nconst myArr = ['5', '10', '20', '15', '5', '0', '15', '5', '15', '0',\
    \ '5', '10', '5', '15', '15', '20', '5', '5', '5', '5', '15', '20', '0', '10',\
    \ '15', '5', '15', '5', '0', '5', '10', '15', '0', '10', '0', '10', '5', '0',\
    \ '0', '20', '10', '5', '15', '20', '10', '15', '0', '20', '15', '5', '10', '0',\
    \ '15', '15', '5', '5', '10', '5', '10', '10', '10', '10', '10', '5', '5', '20',\
    \ '15', '10', '0', '10', '0', '10', '5', '5', '15', '0', '20', '5', '10', '15',\
    \ '5', '10', '5', '5', '5', '15', '0', '0', '0', '10', '5', '5', '15', '0', '0',\
    \ '20', '10', '0', '10', '0', '10', '0', '10', '0', '10', '5', '5', '5', '0',\
    \ '10', '15', '15', '5', '15', '0', '5', '10', '15', '0', '5', '5', '10', '5',\
    \ '10', '10', '15', '10', '0', '15', '15', '20', '5', '10', '5', '5', '5', '15',\
    \ '15', '5', '10', '", "    var newList = [];\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    for(var i=0; i<lst.length; i++){\n     \
    \   var index = Math.floor(min + (max - min) * (i / lst.length));\n        newList.push(lst[index]);\n\
    \    }\n    return newList;\n}\n", "  // TODO: Make this function faster\n  let\
    \ length = lst.length\n  let min_lst = lst[0]\n  let max_lst = lst[0]\n  for (let\
    \ i = 1; i < length; i++){\n    if (lst[i] < min_lst){\n      min_lst = lst[i]\n\
    \    }\n    if (lst[i] > max_lst){\n      max_lst = lst[i]\n    }\n  }\n  // console.log(min_lst,\
    \ max_lst)\n  let strange = []\n  for (let i = 0; i < length; i++){\n    if (lst[i]\
    \ < min_lst){\n      strange.push(lst[i])\n    } else if (lst[i] > max_lst){\n\
    \      strange.push(lst[i])\n    } else {\n      strange.push(min_lst)\n    }\n\
    \  }\n  strange.push(max_lst)\n  return strange\n}\n", "    let sorted_list =\
    \ []\n    let min_value = lst[0]\n    let max_value = lst[0]\n    for (let i =\
    \ 1; i < lst.length; i++){\n        if (lst[i] < min_value){\n            min_value\
    \ = lst[i]\n        } else if (lst[i] > max_value){\n            max_value = lst[i]\n\
    \        }\n        sorted_list.push(lst[i])\n    }\n    let final_values = [min_value,\
    \ max_value]\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] ==\
    \ max_value){\n            final_values = final_values.concat(sorted_list.slice(i\
    \ + 1, lst.length))\n            break\n        }\n    }\n    return final_values\n\
    }\n\n", "    let min_value = lst[0]\n    let max_value = lst[lst.length-1]\n\n\
    \    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < min_value){\n \
    \           min_value = lst[i]\n        }\n        if(lst[i] > max_value){\n \
    \           max_value = lst[i]\n        }\n    }\n\n    let sorted_list = []\n\
    \    for(let i = min_value; i < max_value; i++){\n        sorted_list.push(i)\n\
    \    }\n    return sorted_list\n}\n", "  let min_value = lst[0];\n  let max_value\
    \ = lst[lst.length-1];\n  let temp_lst = [];\n  for(let i = 1; i < lst.length;\
    \ i++){\n    temp_lst.push(lst[i]);\n  }\n  for(let i = 0; i < temp_lst.length;\
    \ i++){\n    for(let j = 0; j < temp_lst.length; j++){\n      if(temp_lst[i] >\
    \ temp_lst[j]){\n        let temp = temp_lst[i];\n        temp_lst[i] = temp_lst[j];\n\
    \        temp_lst[j] = temp;\n      }\n    }\n  }\n  return temp_lst.sort((a,b)\
    \ => a-b);\n}\n</code>\n<|/ a |>\n<| a tags=javascript,sorting |>\nHere is a solution\
    \ by sorting the list with merge sort. \nThe idea is to split the list into three\
    \ lists based on two criteria (min and max) where each list contains only values\
    \ with min < max and min is greater than or equal to max. Then we merge these\
    \ three lists.\n<code>\nconst mergeSort = (list) => {\n  const left = [];\n  const\
    \ right = [];\n  const sorted = [];\n  let minVal = null;\n  let maxVal = null;\n\
    \  let minIndex;\n  let maxIndex;\n\n  for (let i = 0; i < list.length; i++) {\n\
    \    if (minVal == null || list[i] < minVal) {\n      minVal = list[i];\n    \
    \  minIndex = i;\n    }\n\n    if (maxVal == null || list[i] > maxVal) {\n   \
    \   maxVal = list[i];\n      maxIndex = i;\n    }\n  }\n\n  if (minIndex < maxIndex)\
    \ {\n    for (let i = minIndex; i < maxIndex; i++) {\n      left.push(list[i]);\n\
    \    }\n    left = left.sort();\n    for (let i = maxIndex - 1; i >= minIndex;\
    \ i--) {\n      right.push(list[i]);\n    }\n    right = right.sort();\n    left\
    \ = left.concat(right);\n    sorted = sorted.concat(left);\n  }\n  return sorted;\n\
    };\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,sorting dscore=0 |>\nThis\
    \ answer works by grouping values with the same minimum and maximum together.\
    \ Afterwards, each group of values is sorted individually by the minimum of each\
    \ group and then merged with itself to create groups of sorted values.\n<code>",
  "    return lst.sort((a,b) => b-a);\n}\n\n", "    const max = lst.reduce((max,i)\
    \ => Math.max(max,i),0);\n    const min = lst.reduce((min,i) => Math.min(min,i),0);\n\
    \    \n    const strangeOrder = [];\n    for(let i = max; i > min; i--){\n   \
    \     strangeOrder.push(i);\n    }\n    \n    for(let i = max; i >= min; i--){\n\
    \        strangeOrder.unshift(i);\n    }\n    \n    return strangeOrder;\n}",
  "\tvar sorted_list = lst;\n\tvar min_value = lst[0];\n\tvar max_value = lst[0];\n\
    \tfor(var i = 1; i < lst.length; i++){\n\t\tmin_value = Math.min(lst[i], min_value);\n\
    \t\tmax_value = Math.max(lst[i], max_value);\n\t}\n\t\n\twhile(min_value != max_value){\n\
    \t\tsorted_list.push(min_value);\n\t\tmin_value = min_value * -1;\n\t\tmax_value\
    \ = max_value * -1;\n\t}\n\treturn sorted_list;\n}\n", "    if (lst.constructor\
    \ === Array){\n        // Create a copy of the list.\n        var lstCopy = lst;\n\
    \        lstCopy.sort(function(a,b){\n            return b - a;\n        });\n\
    \        return lstCopy;\n    }\n}\n</code>\n<|/ a tags=arrays,javascript |>\n\
    <| a dscore=3 |>\nJust for fun:\n<code>", "  var sorted_lst = lst.sort();\n  var\
    \ arr = [];\n  for(var i=0; i<sorted_lst.length; i++){\n    arr[i] = sorted_lst[i];\n\
    \  }\n  return arr;\n}\n", "  var result = [];\n  for(var i = 0, len = lst.length;\
    \ i < len; i++){\n    if(result.length && result[result.length - 1] < lst[i])\n\
    \      result.push(lst[i]);\n    else\n      result.push(lst[i]);\n  }\n  return\
    \ result;\n}\n", "    if (lst.length <= 1){\n        return lst\n    }\n    var\
    \ smallest = lst[0],\n        largest = lst[0],\n        smallestVal = smallest,\n\
    \        largestVal = largest\n    for (var i = 1; i < lst.length; i++){\n   \
    \     if (smallest > lst[i]){\n            smallestVal = lst[i]\n            smallest\
    \ = smallestVal\n        }\n        if (largest < lst[i]){\n            largestVal\
    \ = lst[i]\n            largest = largestVal\n        }\n    }\n    var newArr\
    \ = []\n    for (var i = smallest; i <= largest; i++){\n        newArr.push(i)\n\
    \    }\n    newArr.push(smallestVal)\n    newArr.push(largestVal)\n    return\
    \ strange_sort_list(newArr)\n}\n", "  if(lst.length == 0){\n    return [];\n \
    \ }\n\n  let min = lst[0];\n  let max = lst[0];\n  for(let i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] < min){\n      min = lst[i];\n    }\n    if(lst[i] > max){\n\
    \      max = lst[i];\n    }\n  }\n  let middle = Math.floor((min + max) / 2);\n\
    \  for(let i = min; i <= max; i++){\n    if(i > middle){\n      lst[i] = lst[middle];\n\
    \      lst[middle] = i;\n      middle = (middle + max) / 2;\n    }\n  }\n  return\
    \ lst;\n}\n", "    let output = []\n    for(let i = 0; i < lst.length; i++){\n\
    \        let min = Math.min(...lst)\n        let max = Math.max(...lst)\n    \
    \    let tmp = lst[i]\n        for(let j = 0; j < lst.length; j++){\n        \
    \    if(j == i) continue\n            let cur = lst[j]\n            if((cur ==\
    \ min) && (tmp > max)){\n                lst[j] = tmp\n                lst[i]\
    \ = min\n                break\n            }\n            if((cur == max) &&\
    \ (tmp < min)){\n                lst[j] = tmp\n                lst[i] = max\n\
    \                break\n            }\n        }\n    }\n    while(lst.length\
    \ > 0){\n        output.push(lst.pop())\n    }\n    return output\n}\n", "   \
    \ const swap = (list, x, y) => {\n        if(list[y] > list[x]){\n           \
    \ [list[y], list[x]] = [list[x], list[y]];\n        }\n    };\n    let index =\
    \ 0;\n    while (index < lst.length) {\n        swap(lst, index, index+1);\n \
    \       index++;\n    }\n    return lst;\n}\n", "  var sorted = [];\n  for(var\
    \ i = 0; i < lst.length; i++){\n    sorted.push(lst[i]);\n  }\n  sorted.sort();\n\
    \  for(var j = 0; j < sorted.length; j++){\n    lst[j] = sorted[j];\n  }\n  return\
    \ lst;\n}\n", "    for(var i = 0; i < lst.length; i++){\n        var min = i;\n\
    \        for(var j = i + 1; j < lst.length; j++){\n            if(lst[j] < lst[min]){\n\
    \                min = j;\n            }\n        }\n        var temp = lst[i];\n\
    \        lst[i] = lst[min];\n        lst[min] = temp;\n    }\n    return lst;\n\
    }\n", "    if(lst.sort){\n        return lst.sort((a, b) => (a < b ? 1 : a > b\
    \ ? -1 : 0)).slice();\n    }\n    let arr = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let n = lst[i];\n        for(let j = i; j > 0; j--){\n      \
    \      if(n < lst[j]){\n                arr.unshift(lst[j]);\n               \
    \ break;\n            }\n        }\n    }\n    return arr;\n}\n", "    return\
    \ lst.sort(function(a, b){\n        // First return value is the comparison\n\
    \        // Second return value is whether or not the element should be placed\
    \ before or after it\n        // If true then the element comes first\n      \
    \  // If false then the element comes last\n        // The third return value\
    \ determines whether the element will come before the other element\n        //\
    \ If true then the element comes before the other element\n        // If false\
    \ then the element comes after the other element\n        // Return values are\
    \ 1 through 3\n        return (a-b)>0 ? (a>b ? 1 : 2) : (a>b ? 3 : 4);\n    });\n\
    }\n", "    for(var i=0, len=lst.length; i<len; ++i){\n        for(var j=0; j<i;\
    \ ++j){\n            if(lst[j] > lst[i]){\n                var temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n}\n", "    var lst2 = [];\n    var length = lst.length;\n\
    \    for(var i=0; i < length; i++){\n        lst2.push(lst[i]);\n    }\n    lst2.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    return lst2;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=1 tags=javascript,sorting |>\nHere is a simple solution using ES6\
    \ sort, map and slice:\n\n<code>", "   var new_lst = [];\n   for(var i=0; i<lst.length;\
    \ i++){\n      new_lst[i] = (lst.length-i);\n   }\n   new_lst.sort(function(a,\
    \ b){\n      if(a<b) return 1;\n      if(a>b) return -1;\n      return 0;\n  \
    \ })\n   return new_lst;\n}\n</code>\n<|/ a tags=arrays,sorting,javascript,sorting\
    \ dscore=5 |>\n<| a dscore=4 |>\n<code>", "\tvar i, j, tmp;\n\tvar n = lst.length;\n\
    \n\t// If the array is empty...\n\tif (n == 0){\n\t\treturn [];\n\t}\n\n\t// Loop\
    \ through the array backwards.\n\tfor (i = n - 1; i >= 0; i--){\n\t\tfor (j =\
    \ 0; j < i; j++){\n\t\t\t// If they are equal...\n\t\t\tif (lst[j] > lst[j + 1]){\n\
    \t\t\t\ttmp = lst[j];\n\t\t\t\tlst[j] = lst[j + 1];\n\t\t\t\tlst[j + 1] = tmp;\n\
    \t\t\t}\n\t\t}\n\t}\n\n\treturn lst;\n}\n", "  var min = lst[0], max = lst[0];\n\
    \  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n\
    \    }\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  var arr = [min,\
    \ max];\n  while(min < max){\n    min++;\n    arr.push(min);\n    arr.push(max);\n\
    \    max--;\n  }\n  return arr;\n}\n", "    if(lst.length == 0) return [];\n \
    \   let min = lst[0], max = lst[0];\n    for(let i = 1; i < lst.length; i++){\n\
    \        if(lst[i] < min) min = lst[i];\n        if(lst[i] > max) max = lst[i];\n\
    \    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == min){\n\
    \            for(let j = i; j < lst.length; j++){\n                lst[j - 1]\
    \ = lst[j];\n            }\n            lst[lst.length - i - 1] = lst[i];\n  \
    \      }\n        if(lst[i] == max){\n            for(let j = i - 1; j >= 0; j--){\n\
    \                lst[j] = lst[j + 1];\n            }\n            lst[0] = lst[i];\n\
    \        }\n    }\n    return lst;\n}\n", "  var res = [];\n  lst.reduce(function(prev,\
    \ cur){\n    if(prev == undefined || prev < cur){ //If current is lower than previous,\
    \ add cur to res\n      res.push(cur);\n    }else{\n      res.push(prev);\n  \
    \  }\n    return cur;\n  }, undefined);\n  return res;\n}", "  var sortedlist\
    \ = lst.slice();\n  var minindex = sortedlist.indexOf(Math.min(sortedlist));\n\
    \  var maxindex = sortedlist.indexOf(Math.max(sortedlist));\n  var length = sortedlist.length;\n\
    \  var loopcounter = 0;\n  while (minindex !== maxindex) {\n    sortedlist[minindex]\
    \ = sortedlist[maxindex];\n    sortedlist[maxindex] = sortedlist[loopcounter];\n\
    \    loopcounter++;\n    minindex--;\n    maxindex--;\n  }\n  return sortedlist;\n\
    }", "  var new_lst = []\n  for(var i = lst.length -1; i >=0; i--){\n    new_lst.push(lst[i])\n\
    \  }\n  new_lst.reverse()\n  return new_lst\n}\n", "    var min = lst[0];\n  \
    \  var max = lst[lst.length-1];\n    var middle = Math.floor((lst.length+1)/2);\n\
    \    for(var i=0;i<middle-1;i++){\n        for(var j=0;j<middle-i-1;j++){\n  \
    \          if(lst[j]>lst[j+1]){\n                var temp=lst[j];\n          \
    \      lst[j]=lst[j+1];\n                lst[j+1]=temp;\n            }\n     \
    \   }\n    }\n    for(var i=0;i<middle-1;i++){\n        for(var j=0;j<middle-i-1;j++){\n\
    \            if(lst[j]<lst[j+1]){\n                var temp=lst[j];\n        \
    \        lst[j]=lst[j+1];\n                lst[j+1]=temp;\n            }\n   \
    \     }\n    }\n    return lst;\n}", "  var new_lst = [];\n  for(var i = 0; i\
    \ < lst.length; i++){\n    new_lst[i] = lst[i];\n  }\n  new_lst.sort(function(a,\
    \ b){\n    var a_min = Math.min(a, b);\n    var b_min = Math.min(a, b);\n    return\
    \ a_min - b_min;\n  });\n  for(var i = 0; i < lst.length; i++){\n    new_lst[i]\
    \ = lst[i];\n  }\n  return new_lst;\n}\n", "  if(lst.length <= 1)\n    return\
    \ lst;\n\n  const minLst = getMinLst(lst);\n  const maxLst = getMaxLst(lst);\n\
    \  const minVal = minLst[0];\n  const maxVal = maxLst[maxLst.length - 1];\n\n\
    \  const minIndex = findIndexOf(minLst, minVal);\n  const maxIndex = findIndexOf(maxLst,\
    \ maxVal);\n\n  const sortedList = [];\n  for(let i = minIndex; i <= maxIndex;\
    \ i++){\n    sortedList.push(lst[i]);\n  }\n\n  return sortedList;\n}\n", "\t\
    return lst.sort(function(a, b){\n\t\tif(a < b){\n\t\t\treturn -1;\n\t\t}\n\t\t\
    if(a > b){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n", "  var min = Math.min(...lst);\n\
    \  var max = Math.max(...lst);\n  if(min === max)\n    return [min];\n  \n  var\
    \ sorted = [];\n  for(var i = min; i < max; i++)\n    sorted.push(lst[i]);\n \
    \ return sorted;\n}\n", "    let minI = lst[0];\n    let minV = lst[0];\n\n  \
    \  for (let i = 1; i < lst.length; i++){\n        let temp = minI;\n        minI\
    \ = lst[i];\n        minV = lst[temp];\n\n        let temp = minV;\n        minV\
    \ = lst[i];\n        minI = lst[temp];\n    }\n    return [minI, minV];\n}\n",
  "    for(var i = 0; i < lst.length; i++){\n        var j = lst.length - 1 - i;\n\
    \        var tmp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = tmp;\n\
    \    }\n}\n", "    \n    var swapped;\n\n    if (lst.length <= 1) return lst;\n\
    \    swapped = false;\n\n    for (var i = 0, len = lst.length; i < len; i++){\n\
    \        if (i % 2 == 0){\n            if (lst[i] < lst[i+1]){\n             \
    \   swap(lst[i], lst[i+1]);\n                swapped = true;\n            }\n\
    \        } else {\n            if (lst[i] > lst[i+1]){\n                swap(lst[i],\
    \ lst[i+1]);\n                swapped = true;\n            }\n        }\n    }\n\
    \n    if (swapped == false) return lst;\n    return strange_sort_list(lst.filter(function(elem){\n\
    \        return elem != undefined;\n    }));\n}\n", "    let strangeList = lst.reduce(function\
    \ (acc, cur) {\n        let nextMinimum = Math.min(...acc) + 1;\n        let nextMaximum\
    \ = Math.max(...acc) + 1;\n        return acc.map(function (item, i) {\n     \
    \       if (i == 0) {\n                return cur\n            }\n           \
    \ else if (cur < item) {\n                return cur;\n            }\n       \
    \     else if (nextMinimum > item) {\n                return nextMinimum;\n  \
    \          }\n            else if (nextMaximum < item) {\n                return\
    \ nextMaximum;\n            }\n            else if (nextMinimum == item) {\n \
    \               return nextMaximum;\n            }\n            else if (nextMaximum\
    \ == item) {\n                return nextMinimum;\n            }\n           \
    \ else {\n                return item;\n            }\n        })\n    }, []);\n\
    \    return strangeList;\n}\n", "    let lst_sorted = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        let min = Math.min(lst[i],lst[lst.length-i-1]);\n\
    \        let max = Math.max(lst[i],lst[lst.length-i-1]);\n        let num = lst[lst.length-i-1];\n\
    \        let remove_index = lst.indexOf(num);\n        lst_sorted.push(min);\n\
    \        lst_sorted.push(max);\n        lst.splice(remove_index, 1);\n    }\n\
    \    for(let i = lst.length-1; i > 0; i--){\n        let min = Math.min(lst[i],lst[i-1]);\n\
    \        let max = Math.max(lst[i],lst[i-1]);\n        let num = lst[i-1];\n \
    \       let remove_index = lst.indexOf(num);\n        lst_sorted.push(min);\n\
    \        lst_sorted.push(max);\n        lst.splice(remove_index, 1);\n    }\n\
    \    return lst_sorted;\n}\n", "\tif(lst.length === 0){\n\t\treturn lst;\n\t}\n\
    \tvar min_num = Math.min(...lst);\n\tvar max_num = Math.max(...lst);\n\tlst.sort((a,b)\
    \ => {\n\t\tif(a<b){ return -1; }\n\t\tif(a>b){ return 1; }\n\t\treturn 0;\n\t\
    });\n\treturn lst.map(num => num===min_num? min_num: num===max_num? max_num: num);\n\
    }\n", "    var n = lst.length;\n    if(n < 2){\n        return lst;\n    }\n\n\
    \    //Get min and max value\n    var min = 0;\n    var max = n - 1;\n\n    var\
    \ mid = Math.floor((min+max)/2);\n\n    while (min <= max){\n        if (lst[mid]\
    \ < lst[min]){\n            min++;\n        }else if (lst[mid] < lst[max]){\n\
    \            max = mid;\n        }else{\n            min = mid+1;\n        }\n\
    \        mid = Math.floor((min+max)/2);\n    }\n    var res = new Array();\n \
    \   res.push(lst[min]);\n    while (min <= max){\n        res.push(lst[max]);\n\
    \        min++;\n        max--;\n    }\n    res.push(lst[min]);\n    return res;\n\
    }\n", "    return lst.sort(function(a, b){\n        return a>b ? 1 : a<b ? -1\
    \ : 0\n    })\n}\n</code>\n<|/ a |>\n<| c |>\nIt should be noted that while this\
    \ is a nice trick, it only works well for positive integers.  For example, `strange_sort_list([1,\
    \ 2, -1, -4])` returns `[1, -1, -4, 2]`, which is not quite what the question\
    \ asked for.\n<|/ c |>\n<| c |>\nGood point.  I changed the code to incorporate\
    \ that as a requirement.\n<|/ c |>\n<| a tags=javascript,algorithm |>\nYou can\
    \ sort in two stages. First sort the numbers in ascending order, then sort them\
    \ again in descending order. Here is a working example in javascript:\n\n<code>",
  "    var new_lst = [];\n    for (var i = 0;i<lst.length;i++){\n        new_lst[i]\
    \ = lst[i];\n    }\n    var min = new_lst[0];\n    for (var j = 1;j<new_lst.length;j++){\n\
    \        if (new_lst[j]<min){\n            min = new_lst[j];\n        }\n    }\n\
    \    min = new_lst[0];\n    for (var j = 1;j<new_lst.length;j++){\n        if\
    \ (new_lst[j]>min){\n            new_lst[j] = min;\n        }\n    }\n    return\
    \ new_lst;\n}", "  let len = lst.length;\n  let res = [];\n  let current = lst[0];\n\
    \  let minimum = current;\n  let maximum = current;\n  for(let i = 1; i < len;\
    \ i++){\n    current = lst[i];\n    minimum = Math.min(current, minimum);\n  \
    \  maximum = Math.max(current, maximum);\n  }\n  for(let i = minimum; i <= maximum;\
    \ i++){\n    res.push(i);\n  }\n  return res;\n}\n", "  let sorted_lst = [];\n\
    \n  for (let i = lst.length - 1; i >= 0; i--){\n    let current = lst[i];\n  \
    \  let smallest = i;\n    for (let j = i; j < lst.length; j++){\n      if (current\
    \ < lst[j]){\n        smallest = j;\n        break;\n      }\n    }\n    sorted_lst.push(current.splice(smallest,\
    \ 1)[0]);\n  }\n  return sorted_lst;\n}\n", "    var min = lst[0];\n    var max\
    \ = lst[0];\n    for (var i=1; i<lst.length; i++){\n        if (lst[i] < min){\n\
    \            min = lst[i];\n        } else if (lst[i] > max){\n            max\
    \ = lst[i];\n        }\n    }\n    var swaps = [];\n    for (var i=1; i<lst.length;\
    \ i++){\n        if (lst[i] < min && lst[i] > max){\n            swaps.push(i);\n\
    \        } else if (lst[i] < min || lst[i] > max){\n            swaps.push([i,\
    \ lst[i]])\n        }\n    }\n    for (var i=0; i<swaps.length; i++){\n      \
    \  var temp = swaps[i];\n        var temp = swaps[i];\n        swaps[i] = [swaps[i][1],\
    \ swaps[i][0]];\n        swaps[i] = [swaps[i][0], swaps[i][1]];\n    }\n    return\
    \ swaps;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,javascript |>\n<| a |>\n<code>\n\
    let arr=[1,2,3,4,5,6,7];\nlet reversedArr = arr.map(function(item){\n    return\
    \ item;\n}).reverse();", "  if(lst.length == 1){\n    return lst;\n  }\n  var\
    \ i = lst.length - 1;\n  for(let j = lst.length - 1; j > 0; j--){\n    let min\
    \ = Math.min(lst[i], lst[j]);\n    lst[i] = min;\n    lst[j] = lst[j];\n  }\n\
    \  return lst;\n}\n</code>\n<|/ a tags=sorting,algorithm |>\n<| c |>\nYou have\
    \ a bug in `strange_sort_list`. Instead of calling `swap_list` with `arr[i]` and\
    \ `arr[j]` you call it with `arr[j]` and `arr[i]`.\n<|/ c |>\n<| c |>\nI see that\
    \ `arr[i]` and `arr[j]` are swapped, but `arr[j]` and `arr[i]` are not. Why is\
    \ that?\n<|/ c |>\n<| c |>\nIf you're referring to the second `swap_list` call,\
    \ I fixed my answer to reflect your comment\n<|/ c |>\n<| c |>\nYes, you did fix\
    \ it. I guess I missed that.\n<|/ c |>\n<| a dscore=5 |>\nSince you asked for\
    \ the most efficient way, I have some code I made for this\n(It is written in\
    \ JavaScript)\n<code>", "    // Create empty string for result.\n    let res =\
    \ \"\";\n    // Get initial minimum.\n    let min_value = Math.min(...lst);\n\
    \    // Start with that minimum.\n    res += min_value;\n    // For remaining\
    \ values, add minimum to last item and sort\n    // according to that item.\n\
    \    for (let i=1;i<lst.length;i++){\n        res += \",\"+min_value;\n      \
    \  min_value = Math.min(min_value, lst[i]);\n    }\n    res += min_value;\n  \
    \  return res;\n}\n", "    lst = lst.slice();\n    lst.sort(function(a,b){\n \
    \       return a - b;\n    });\n    return lst;\n}\n", "    if(lst.length < 2){\n\
    \        return lst;\n    }\n    const sorted_lst = [lst[0]]; //Initialize sorted\
    \ list.\n    let lastVal = lst[0];\n    let minVal = lst[0];\n    lst.forEach((val)\
    \ => {\n        if(val < minVal){\n            minVal = val;\n        }\n    \
    \    if(val > lastVal){\n            lastVal = val;\n        }\n        sorted_lst.push(val);\n\
    \    });\n    sorted_lst.sort((a, b) => {\n        if(a < b) return -1;\n    \
    \    if(b < a) return 1;\n        return 0;\n    });\n    return sorted_lst.concat(sorted_lst.splice(1,\
    \ sorted_lst.length));\n}\n", "    var newlst = [];\n    var minval = lst[0];\n\
    \    var maxval = lst[lst.length-1];\n    for (var i = 1; i < lst.length; i++){\n\
    \        if (lst[i] > maxval){\n            newlst.push(maxval);\n           \
    \ maxval = lst[i];\n        } else if (lst[i] < minval){\n            newlst.push(minval);\n\
    \            minval = lst[i];\n        }else{\n            newlst.push(lst[i]);\n\
    \        }\n    }\n    newlst.push(minval);\n    newlst.push(maxval);\n    return\
    \ newlst;\n}\n\n", "    return lst.sort(function(a, b){\n        var a_reversed\
    \ = a * -1;\n        var b_reversed = b * -1;\n        if(a_reversed > b_reversed){\n\
    \            return 1;\n        }else if(a_reversed < b_reversed){\n         \
    \   return -1;\n        }else{\n            return 0;\n        }\n    });\n}",
  "    var i, j, sorted;\n    if (lst.length === 0){\n        return lst;\n    }\n\
    \    i = lst[0];\n    j = lst[lst.length-1];\n    sorted = [];\n    for (j; j\
    \ >= i; j--){\n        sorted.push(i);\n        i = lst[j];\n    }\n    sorted.push(j);\n\
    \    return sorted;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\nHere\
    \ you go\n<code>", "    var sorted_lst = [];\n    var min = Math.min(lst);\n \
    \   var max = Math.max(lst);\n    for(var i = 0; i < lst.length; i++){\n     \
    \   sorted_lst.push(lst[i]);\n    }\n    for(var i = min; i < max + 1; i++){\n\
    \        for(var j = 0; j < lst.length; j++){\n            if(sorted_lst[j] ==\
    \ i){\n                sorted_lst.splice(j, 1);\n                j--;\n      \
    \      }\n        }\n    }\n    return sorted_lst.sort(function(a, b){\n     \
    \   return a - b;\n    });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code\
    \ will also delete all elements except the first and last.\n<|/ c |>\n<| c |>\n\
    Yes, I have mentioned that in the post. But I guess it's an edge case that won't\
    \ be the case.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "\tlet min = lst[0];\n\t\
    let max = lst[0];\n\tfor (let i = 0; i < lst.length; i++){\n\t\tif (lst[i] < min){\n\
    \t\t\tmin = lst[i];\n\t\t}\n\t\tif (lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t\
    }\n\t}\n\tlet ret = [];\n\tfor (let i = 0; i < lst.length; i++){\n\t\tlet temp\
    \ = [];\n\t\tif (lst[i] < min){\n\t\t\ttemp.push(min);\n\t\t}\n\t\tif (lst[i]\
    \ > max){\n\t\t\ttemp.push(max);\n\t\t}\n\t\ttemp.push(lst[i]);\n\t\tret.push(temp);\n\
    \t}\n\treturn ret;\n}\n", "  let max_value = Math.max(...lst);\n  let min_value\
    \ = Math.min(...lst);\n  let new_list = [min_value];\n\n  for(let i = min_value+1;\
    \ i < max_value; i++){\n    new_list.push(i);\n  }\n\n  for(let i = min_value+1;\
    \ i > max_value; i--){\n    new_list.unshift(i);\n  }\n\n  return new_list;\n\
    }\n", "  var sorted = [];\n  for(var i=0; i<lst.length; i++){\n    sorted.push(lst[i]);\n\
    \  }\n  sorted = sorted.concat(sorted.sort(function(a, b){return a-b}));\n  sorted\
    \ = sorted.concat(sorted.sort(function(a, b){return b-a}));\n  return sorted;\n\
    }\n", "    let min;\n    let max;\n    let i;\n    for(i = 0; i<lst.length; i++){\n\
    \        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    for(i = 0; i<lst.length;\
    \ i++){\n        let j = i;\n        for(j = i; j<lst.length; j++){\n        \
    \    if(lst[j] < min){\n                lst[j] = min;\n            }\n       \
    \     if(lst[j] > max){\n                lst[j] = max;\n            }\n      \
    \  }\n    }\n    return lst;\n}\n", "\tlet newList = lst;\n\tlet minValue = Math.min(...newList);\n\
    \tnewList.forEach((element, index, arr) => {\n\t\tnewList[index] = minValue;\n\
    \t});\n\n\tlet maxValue = Math.max(...newList);\n\tnewList.forEach((element, index,\
    \ arr) => {\n\t\tnewList[index] = maxValue;\n\t});\n\n\treturn newList;\n}\n\n",
  "  lst.sort(function(a,b){return b-a});\n  for(var i=0;i<lst.length;i++){\n    lst[i]=lst[i].toString();\n\
    \  }\n  return lst;\n}\n", "  var len = lst.length;\n  if(len === 0) return [];\n\
    \  var sorted_lst = [lst[0]];\n  for(var i = 1; i < len; i++){\n    var min_val\
    \ = sorted_lst[i-1];\n    var max_val = sorted_lst[i-1];\n    for(var j = 0; j\
    \ < i; j++){\n      if(lst[j] < min_val){\n        min_val = lst[j];\n      }\n\
    \      if(lst[j] > max_val){\n        max_val = lst[j];\n      }\n    }\n    sorted_lst.push(min_val);\n\
    \    sorted_lst.push(max_val);\n  }\n  return sorted_lst;\n}\n", "    var len\
    \ = lst.length;\n    var result = [];\n    for (var i=0; i<len; i++){\n      \
    \  for (var j = i+1; j<len; j++){\n            var min = Math.min(lst[i], lst[j]);\n\
    \            var max = Math.max(lst[i], lst[j]);\n            result.push(max);\n\
    \            result.push(min);\n            result.push(max);\n        }\n   \
    \ }\n    return result;\n}\n", "    var arr=[];\n    for(var i=lst.length-1;i>=0;i--){\n\
    \        arr.push(lst[i]);\n    }\n    return arr;\n}\n", "    let newLst = [];\n\
    \    for(let item of lst){\n        let index = newLst.indexOf(item);\n      \
    \  if(index == -1){\n            newLst.push(item);\n        }\n    }\n    return\
    \ newLst;\n}", "    var min_val = Math.min(...lst);\n    var max_val = Math.max(...lst);\n\
    \    var sorted = [];\n\n    for(var i = min_val; i < max_val; i++){\n       \
    \ sorted.push(i);\n    }\n\n    for(var j = 0; j < lst.length; j++){\n       \
    \ var index = sorted.indexOf(lst[j]);\n        sorted.splice(index, 1);\n    }\n\
    \n    return sorted;\n}\n", "\tlet minimum = lst.sort((a,b) => a-b);\n\tlet maximum\
    \ = lst.sort((a,b) => b-a); \n\treturn minimum.concat(maximum);\n}\n", "  return\
    \ lst.sort((a,b)=>{\n    if (a<b) return -1;\n    if (a>b) return 1;\n    return\
    \ 0;\n  });\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThis solution has\
    \ a problem in that it does not handle negative numbers.\n<|/ c |>\n<| c |>\n\
    This solution has a problem in that it does not handle negative numbers. Check\
    \ this [answer](https://stackoverflow.com/a/60652938/14075709) out for a solution\
    \ which can handle negative numbers.\n<|/ c |>\n<| a dscore=2 |>\nThis is a simple\
    \ solution that just sorts the array and then returns the values in an array.\
    \ \n\n<code>", "    let sortedList = lst.slice();\n    sortedList.sort((a,b) =>\
    \ a - b);\n    return sortedList;\n}\n", "    return lst.sort(function(a,b){\n\
    \        return a - b;\n    });\n}\n", "    for(let i = 0; i < lst.length-1; i++){\n\
    \        for(let j = i+1; j < lst.length; j++){\n            if(lst[i] > lst[j]){\n\
    \                let temp = lst[i]\n                lst[i] = lst[j]\n        \
    \        lst[j] = temp\n            }\n        }\n    }\n    return lst\n}\n",
  "    var len = lst.length;\n    var mid = Math.floor((len-1)/2);\n    \n    for(var\
    \ i=0; i<mid; i++){\n        for(var j=len-1; j>i; j--){\n            if(lst[j]>lst[j-1]){\n\
    \                var temp = lst[j];\n                lst[j] = lst[j-1];\n    \
    \            lst[j-1] = temp;\n            }\n        }\n    }\n    \n    return\
    \ lst;\n}\n", "  if(lst.length===0) return lst;\n  let min=lst[0];\n  let max=lst[0];\n\
    \  lst.forEach((itm) => {\n    if(itm<min) min=itm;\n    if(itm>max) max=itm;\n\
    \  });\n  lst.sort((a,b) => a-b);\n  lst.sort((a,b) => b-a);\n  lst.sort((a,b)\
    \ => a-b);\n  return lst;\n}\n", "  let min_value = Math.min(...lst);\n  let max_value\
    \ = Math.max(...lst);\n  let min_pos = lst.indexOf(min_value);\n  let max_pos\
    \ = lst.indexOf(max_value);\n  let temp_value;\n  let temp_pos;\n  let new_lst\
    \ = [];\n  while (min_pos >= 0 && max_pos >= 0){\n    temp_value = lst[min_pos];\n\
    \    temp_pos = lst.indexOf(temp_value);\n    new_lst.push(temp_value);\n    lst.splice(min_pos,\
    \ 1);\n    lst.splice(max_pos, 1);\n    min_pos = lst.indexOf(temp_value);\n \
    \   max_pos = lst.indexOf(temp_value);\n  }\n  if (min_pos >= 0){\n    new_lst.push(min_value);\n\
    \  }\n  if (max_pos >= 0){\n    new_lst.push(max_value);\n  }\n  return new_lst;\n\
    }\n", "    // Sort the array by descending order\n    var sorted = lst.slice().sort(function(a,\
    \ b){\n        return b - a;\n    });\n\n    // Start with the minimum value\n\
    \    sorted.unshift(sorted[0]);\n\n    // While the current value is smaller than\
    \ the previous one,\n    // add the new value to the beginning of the array,\n\
    \    // and remove it from the end of the array\n    while(sorted[0] < sorted[sorted.length\
    \ - 1]){\n        sorted.unshift(sorted[sorted.length - 1]);\n        sorted.pop();\n\
    \    }\n\n    return sorted;\n}\n", "  let new_list = lst;\n  while(new_list.length\
    \ > 0){\n    new_list = new_list.sort((a,b)=>a-b);\n  }\n  return new_list;\n\
    }\n", "  lst.sort((a,b)=>{\n    let min = a;\n    let max = b;\n    if(min > max){\n\
    \      min = b;\n      max = a;\n    }\n    return max>min?max-min:min>max?max-min:min;\n\
    \  });\n  return lst;\n}\n", "    let sort = [];\n    for(let i=0; i<lst.length;\
    \ i++){\n        let min = i;\n        for(let j=i+1; j<lst.length; j++){\n  \
    \          if(lst[j] < lst[min]){\n                min = j;\n            }\n \
    \       }\n        sort.push(lst[min]);\n        lst[min] = lst[i];\n    }\n \
    \   return sort;\n}\n", "    if (lst.length == 0){\n        return [];\n    }\n\
    \    var min = lst[0];\n    for (var i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    var max =\
    \ lst[0];\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    var sorted = [];\n    var\
    \ length = lst.length;\n    var swap = function (i, j){\n        var tmp = lst[i];\n\
    \        lst[i] = lst[j];\n        lst[j] = tmp;\n    };\n    for (var j = 0;\
    \ j < length - 1; j++) {\n        if (lst[j] > max) {\n            swap(j + j,\
    \ j);\n        }\n        else if (lst[j] < min) {\n            swap(j + j, j);\n\
    \        }\n        else {\n            swap(j + j, j + 1);\n        }\n    }\n\
    \    return sorted;\n}", "  let min;\n  let max;\n  let temp;\n\n  min = lst[0];\n\
    \  max = lst[lst.length-1];\n\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]\
    \ < min){\n      min = lst[i];\n    } else if(lst[i] > max){\n      max = lst[i];\n\
    \    }\n  }\n\n  temp = min;\n  min = max;\n  max = temp;\n\n  for(let i=0;i<lst.length;\
    \ i++){\n    lst[i] = lst[i] - min;\n  }\n\n  return lst;\n}\n", "\tlet min =\
    \ Math.min(...lst);\n\tlet max = Math.max(...lst);\n\tlet range = [min, max];\n\
    \tlet result = [];\n\tfor(let i=range[0]; i<=range[1]; i++){\n\t\tfor(let j=lst.length-1;\
    \ j>=0; j--){\n\t\t\tif(!(i in lst[j])){\n\t\t\t\tlet k = j-1;\n\t\t\t\twhile(k\
    \ in lst){\n\t\t\t\t\tresult.push(lst[k]);\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t\t\
    result.push(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
