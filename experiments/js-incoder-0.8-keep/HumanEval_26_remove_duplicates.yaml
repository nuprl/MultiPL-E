name: HumanEval_26_remove_duplicates
language: js
prompt: "//From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1,\
  \ 4, 5]);\n}\n\ntest();"
completions: ["\tvar new_nums = [],\n\t\toutput = [];\n\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(new_nums.indexOf(numbers[i]) === -1){\n\t\t\tnew_nums.push(numbers[i]);\n\
    \t\t}\n\t}\n\tfor (var i = 0; i < new_nums.length; i++){\n\t\toutput.push(new_nums[i]);\n\
    \t}\n\n\treturn output;\n}\n", "\tvar result = [];\n\t\n\tfor (var i=0; i < numbers.length;\
    \ i++){\n\t\tvar number = numbers[i];\n\t\tvar index = result.indexOf(number);\n\
    \t\t\n\t\tif (index >= 0){\n\t\t\tresult.splice(index, 1);\n\t\t}\n\t\t\n\t\t\
    if (result.indexOf(number) === -1){\n\t\t\tresult.push(number);\n\t\t}\n\t}\n\t\
    \n\treturn result;\n}\n", "    return numbers.filter((item, index, self) => self.indexOf(item)\
    \ === index);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays,unique\
    \ |>\nIt can be done in O(n) by using a hashmap.\n<code>\nlet input = [1,2,3,4,4];\n\
    let map = {};\nfor (let i = 0; i < input.length; i++) {\n    map[input[i]] = true;\n\
    }\nlet output = [];\nfor (let i = 0; i < input.length; i++) {\n    if (map[input[i]])\
    \ {\n        delete map[input[i]];\n    } else {\n        output.push(input[i]);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe OP is asking for array as\
    \ output.\n<|/ c |>\n<| c |>\nThis does not remove the duplicates, which is what\
    \ the OP is looking for.\n<|/ c |>\n<| c |>\nThe OP asked for unique numbers,\
    \ not unique numbers in the array.\n<|/ c |>\n<| a dscore=0 |>\nThis code will\
    \ take array as an input and give unique element of array as output.\n<code>",
  "\tvar new_numbers = new Array();\n\tfor(var i = 0; i < numbers.length; i++){\n\t\
    \tfor(var j = 0; j < numbers.length; j++){\n\t\t\tif(numbers[i] == numbers[j]){\n\
    \t\t\t\t//If there are elements equal to the number already in the list, remove\
    \ this number\n\t\t\t\tif(j < i){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnew_numbers.push(numbers[i]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn new_numbers;\n}\n", "  const len\
    \ = numbers.length;\n\n  for (let i = 0; i < len; i++){\n    for (let j = i +\
    \ 1; j < len; j++){\n      if (numbers[i] === numbers[j]){\n        numbers.splice(j,\
    \ 1);\n      }\n    }\n  }\n\n  return numbers;\n}\n", "  var copy = [];\n  for\
    \ (var i = 0; i < numbers.length; i++){\n    if (copy.indexOf(numbers[i]) ===\
    \ -1) {\n      copy.push(numbers[i]);\n    }\n  }\n  return copy;\n}\n", "   \
    \ numbers = array_helper(numbers);\n    return unique_numbers(numbers);\n}\n",
  "    numbers = numbers.sort();\n    var ret = [];\n    var hash = {};\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(hash[numbers[i]]) ret.push(numbers[i]);\n\
    \        else hash[numbers[i]] = true;\n    }\n    return ret;\n}\n</code>\n<|/\
    \ a tags=jquery,javascript |>\n<| c |>\nThat is true, but I was trying to avoid\
    \ that complexity by using a hash of some kind.\n<|/ c |>\n<| c |>\nIt's still\
    \ a nested loop, but it's more concise and probably faster. I'll update my answer\
    \ to reflect that.\n<|/ c |>\n<| a |>\nThis should do the trick:\n<code>\nvar\
    \ newArray = [];\nvar uniqueArray = [];\nfor(var i=0; i<numbers.length; i++) {\n\
    \    if(uniqueArray.indexOf(numbers[i]) == -1) {\n        uniqueArray.push(numbers[i]);\n\
    \        newArray.push(numbers[i]);\n    }\n}\n</code>\n<|/ a dscore=0 tags=jquery,javascript\
    \ |>\n<| a |>\n<code>\nvar numbers = [1, 2, 3, 4, 5, 1, 3, 2];\n\nvar newArray\
    \ = numbers.filter(function(item) {\n    return numbers.indexOf(item) == -1;\n\
    });\n", "\tlet output = [];\n\tnumbers.sort((a, b) => a - b);\n\tfor (let i =\
    \ 0; i < numbers.length; i++){\n\t\tif (output.includes(numbers[i])){\n\t\t\t\
    numbers.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn output.sort((a,b) => a\
    \ - b);\n}\n", "    let unique_numbers = [];\n    numbers.forEach(function(num){\n\
    \        if(unique_numbers.indexOf(num) == -1){\n            unique_numbers.push(num);\n\
    \        }\n    });\n    return unique_numbers;\n}\n", "  let uniqueNumbers =\
    \ [];\n  let uniqueNumberCounts = {};\n  for (let i=0; i<numbers.length; i++)\
    \ {\n    const num =numbers[i];\n    if (!uniqueNumberCounts[num]) {\n      uniqueNumbers.push(num);\n\
    \      uniqueNumberCounts[num] = 1;\n    } else {\n      uniqueNumberCounts[num]++;\n\
    \    }\n  }\n  return uniqueNumbers;\n}\n", "  var result = []\n  var seen = {}\n\
    \  for(var i = 0; i < numbers.length; i++){\n    var num = numbers[i]\n    if(seen.hasOwnProperty(num)){\n\
    \      continue\n    }\n    seen[num] = true\n    result.push(num)\n  }\n  return\
    \ result\n}\n", "\tvar len = numbers.length;\n\tvar new_array = new Array(len);\n\
    \tfor(var i=0; i<len; i++){\n\t\tvar val = numbers[i];\n\t\tfor(var j=i+1; j<len;\
    \ j++){\n\t\t\tif(numbers[i] == numbers[j]){\n\t\t\t\tnumbers[j] = 0;\n\t\t\t\
    }\n\t\t}\n\t\tnew_array[i] = val;\n\t}\n\treturn new_array;\n}\n", "    return\
    \ numbers.reduce((acc, cur)=>{\n        if(acc[cur] === undefined){\n        \
    \    acc[cur] = 1;\n        }else{\n            acc[cur] += 1;\n        }\n  \
    \      return acc;\n    }, {});\n}\n", "  return numbers.filter(function(e, i,\
    \ a){\n      return a.indexOf(e) === i;\n  });\n}\n", "    var output = [];\n\
    \    numbers = sort_numbers(numbers);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] in output){\n            numbers[i].count--;\n\
    \        }else{\n            output.push(numbers[i]);\n            numbers[i].count\
    \ = 1;\n        }\n    }\n    return output;\n}\n", "  var map = {};\n  var output\
    \ = [];\n  \n  numbers.forEach(function(number){\n    \n    map[number] = true;\n\
    \    \n  });\n  \n  numbers.forEach(function(number){\n    if(map[number] !==\
    \ undefined){\n      output.push(number);\n    }\n  });\n  \n  return output;\n\
    }\n", "  numbers = numbers.sort(function(a, b){return a-b;}); // Sort from lowest\
    \ to highest because we remove dupes\n\n  var i, j, last_number, current;\n  for(i\
    \ = 0; i < numbers.length; i++){\n    current = numbers[i]; // Set the current\
    \ number equal to the current element\n    last_number = numbers[i - 1];\n   \
    \ if(last_number != current){\n      numbers[i] = current;\n    }\n  }\n  return\
    \ numbers;\n}\n", "\treturn remove_duplicate_numbers(numbers, true);\n}\n", " \
    \ var output = [];\n  var seen = {};\n  numbers.forEach(function(number){\n  \
    \  if (seen.hasOwnProperty(number)){\n      seen[number]++;\n    } else {\n  \
    \    seen[number] = 1;\n      output.push(number);\n    }\n  });\n  return output;\n\
    }", "  numbers = numbers.slice();\n  numbers.sort();\n  var uniques = [];\n  var\
    \ j;\n  var current;\n  var length = 0;\n  for(j = 0; j < numbers.length; j++){\n\
    \    current = numbers[j];\n    if(uniques.indexOf(current) === -1){\n      uniques.push(current);\n\
    \      length++;\n    }\n  }\n  var result = [];\n  for(i = 0; i < length; i++){\n\
    \    result.push(uniques[i]);\n  }\n  return result;\n}", "  var output = [];\n\
    \  for(var i = 0; i < numbers.length; i++){\n    if(numbers.indexOf(numbers[i])\
    \ > -1){\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n",
  "\tvar index = {};\n\tnumbers.forEach(function(val, i){\n\t\tindex[val] = i;\n\t\
    });\n\tvar res = [];\n\tfor(var val in index){\n\t\tif(index.hasOwnProperty(val)){\n\
    \t\t\tres.push(val);\n\t\t}\n\t}\n\treturn res;\n}\n", "   var output = [];\n\
    \   for(var i = 0; i < numbers.length; i++){\n      if(numbers.indexOf(numbers[i])\
    \ == i)\n         continue;\n      output.push(numbers[i]);\n   }\n   return output;\n\
    }\n", "  var new_numbers = []\n  \n  for(var i = 0; i < numbers.length; i++){\n\
    \    var num\n    for(var j = 0; j < i; j++){\n      if(numbers[j] === numbers[i]){\n\
    \        num = numbers[j]\n        break\n      }\n    }\n    new_numbers.push(num)\n\
    \  }\n  \n  return new_numbers\n}\n", "  var hash = {}, result = [];\n  for (var\
    \ i = 0; i < numbers.length; i++) {\n    var key = numbers[i];\n    if (!hash[key])\n\
    \      hash[key] = true;\n    else\n      result.push(key);\n  }\n  return result;\n\
    }\n", "  var hash = {}\n  var nums = []\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var num = numbers[i]\n    if(hash[num]){\n      nums.push(num)\n\
    \      hash[num] -= 1\n    }else{\n      hash[num] = 1\n      nums.push(num)\n\
    \    }\n  }\n  return nums\n}\n", "  return numbers.filter((number, index, self)\
    \ =>\n    index == self.findIndex(n => n === number)\n  )\n}\n</code>\nI didn't\
    \ test the code above (but if it works), you can find more information on Array.prototype.filter\
    \ and Array.prototype.findIndex.\n<|/ a dscore=0 |>\n<| c |>\nThe OP wants to\
    \ remove duplicates, not keep only the first one. The function `remove_duplicates`\
    \ is probably not the best name for this operation, but it's not clear what it\
    \ does.\n<|/ c |>\n<| c |>\nYes, this is true. Thank you!\n<|/ c |>\n<| c |>\n\
    The code is not quite working for me.\n<|/ c |>\n<| a tags=javascript,duplicates,arrays,ecmascript-6\
    \ |>\n<code>", "    const new_array = numbers.filter((value, index, self) => {\n\
    \        return self.indexOf(value) === index;\n    });\n    return new_array;\n\
    }\n", "  numbers = numbers.filter(function(v, i, a){\n    return a.indexOf(v)\
    \ == i;\n  });\n  numbers = numbers.sort(function(a,b){\n    return a-b;\n  });\n\
    \  numbers = numbers.map(function(v, i, a){\n    return i;\n  });\n  return numbers;\n\
    }\n", "  let nums = numbers.map((num) => Number(num))\n  nums = nums.filter((num,\
    \ index) => {\n    if(nums.indexOf(num) == index)\n      return false\n    else\n\
    \      return true\n  })\n  return nums\n}\n", "    let uniques = [];\n    let\
    \ counts = {};\n    for(let i of numbers){\n        if (counts[i] === undefined){\n\
    \            uniques.push(i);\n            counts[i] = 1;\n        } else {\n\
    \            counts[i]++;\n        }\n    }\n    return uniques;\n}\n", "    var\
    \ output = [];\n    var hash_map = {};\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(!hash_map[numbers[i]]){\n            hash_map[numbers[i]]\
    \ = true;\n            output.push(numbers[i]);\n        }\n    }\n    return\
    \ output;\n}\n", "  const uniqueNumbers = []; //The unique numbers that we will\
    \ return.\n  const originalNumbersLength = numbers.length;\n  for(let i = 0; i\
    \ < originalNumbersLength; i++){\n    if(numbers.includes(i)) //If this number\
    \ already exists in the unique array, skip it.\n      continue;\n    uniqueNumbers.push(i);\
    \ //Add to unique array.\n  }\n  return uniqueNumbers;\n}\n", "    var result\
    \ = [],\n        map = {}, //Used to check if number has been seen already in\
    \ the result set\n        i;\n        \n    for (i=0; i < numbers.length; i++)\
    \ {\n        //If a number has already been seen, remove it from the result set\
    \ and move to the next number.\n        if (!map[numbers[i]]) {\n            result.push(numbers[i]);\n\
    \            map[numbers[i]] = true;\n        }\n    }\n    return result;\n}\n\
    </code>\nThe output is:\n<code>\n[\n  1, \n  3, \n  2\n]\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\nYou can try the following: \n\n<code>", "  var output = [];\n \
    \ numbers.forEach(function(number){\n    var count = 1;\n    var index;\n    for(var\
    \ i=0; i < output.length; i++){\n      if(output[i] === number){\n        count++;\n\
    \        if(count > 1){\n          index = i;\n        }\n      }\n    }\n   \
    \ output.splice(index, 1);\n  });\n  return output;\n}\n", "  return _.reduce(numbers,\
    \ function(a, b) {\n    if (a.indexOf(b) < 0) {\n      a.push(b);\n    }\n   \
    \ return a;\n  }, []);\n}\n\nmodule.exports = {\n    parse: parse,\n    parse_number:\
    \ parse_number,\n    parse_date: parse_date,\n    parse_time: parse_time,\n  \
    \  parse_datetime: parse_datetime,\n    parse_json: parse_json,\n    parse_percent:\
    \ parse_percent,\n    parse_human_readable: parse_human_readable,\n    parse_relative_time:\
    \ parse_relative_time,\n    parse_with_relative_start: parse_with_relative_start,\n\
    \    array_from_csv: array_from_csv,\n    guess_json_class: guess_json_class,\n\
    \    handle_js_error: handle_js_error,\n    array_to_csv: array_to_csv,\n    parse_value:\
    \ parse_value,\n    convert_js_args_to_csv: convert_js_args_to_csv,\n    interpolate_js_arg:\
    \ interpolate_js_arg,\n    DateRollover: DateRollover,\n    time_range: time_range,\n\
    \    relative_start: relative_start,\n    fail_request: fail_request,\n    api_url:\
    \ api_url,\n    api_get_route: api_get_route,\n    api_post_route: api_post_route,\n\
    \    api_post_json_route: api_post_json_route,\n    api_post_csv_route: api_post_csv_route,\n\
    \    api_post_many_route: api_post_many_route,\n    api_post_many_csv_route: api_post_many_csv_route,\n\
    \    api_post_many_json_route: api_post_many_json_route,\n    api_post_many_girl_route:\
    \ api_post_many_girl_route,\n    api_put_route: api_put_route,\n    api_put_json_route:\
    \ api_put_json_route,\n    api_put_csv_route: api_put_csv_route,\n    api_put_many_route:\
    \ api_put_many_route,\n    api_put_many_csv_route: api_put_many_csv_route,\n \
    \   api_put_many_json_route: api_put_many_json_route,\n    api_put_many_girl_route:\
    \ api_put_many_girl_route,\n    api_delete_route: api_delete_route,\n    api_delete_json_route:\
    \ api_delete_json_route,\n    api_delete_csv_route: api_delete_csv_route,\n  \
    \  api_delete_many_route: api_delete_many_route,\n    api_delete_many_csv_route:\
    \ api_delete_many_csv_route,\n    api_delete_many_json_route: api_delete_many_json_route,\n",
  "  numbers = numbers.filter(function(value, index, arr){\n    return arr.indexOf(value)\
    \ === index;\n  });\n\n  var uniqueNumbers = [];\n  for(var i=0; i < numbers.length;\
    \ i++){\n    if (uniqueNumbers.indexOf(numbers[i]) === -1){\n      uniqueNumbers.push(numbers[i]);\n\
    \    }\n  }\n\n  return uniqueNumbers;\n}\n", "\tvar counter = {};\n\tfor(var\
    \ i=0; i< numbers.length; i++){\n\t\tif(counter[numbers[i]] === undefined){\n\t\
    \t\tcounter[numbers[i]] = 1;\n\t\t} else {\n\t\t\tcounter[numbers[i]]++;\n\t\t\
    }\n\t}\n\tvar result = [];\n\tfor(var key in counter){\n\t\tresult.push(key);\n\
    \t}\n\treturn result;\n}\n", "    var output = [];\n    var seen = [];\n    for(var\
    \ i = 0, l = numbers.length; i < l; i++){\n        if(seen.indexOf(numbers[i])\
    \ !== -1){\n            continue;\n        }\n        seen.push(numbers[i]);\n\
    \        output.push(numbers[i]);\n    }\n    return output;\n}\n", "   var i,\
    \ \n       l = numbers.length,\n       result = [];\n\n   for (i = 0; i < l; i++)\
    \ {\n      if (numbers.indexOf(numbers[i]) == i) {\n         result.push(numbers[i]);\n\
    \      }\n   }\n\n   return result;\n}\n", "  numbers = numbers.filter(function\
    \ (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n \
    \ return numbers;\n}\n", "  var result = [],\n      hash = {},\n      i, k;\n\n\
    \  for (i = 0; i < numbers.length; i++) {\n    k = numbers[i];\n    if (!(hash[k]))\
    \ {\n      result.push(k);\n    }\n    hash[k] = true;\n  }\n  return result;\n\
    }\n", "    var result = [];\n    var seen = {};\n    \n    for(var i = 0; i <\
    \ numbers.length; i++){\n        if(seen[numbers[i]] === undefined){\n       \
    \     seen[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n\
    \    }\n    return result;\n}\n", "  var output = [];\n  \n  for(var i = 0; i\
    \ < numbers.length; i++){\n    if(numbers[i] !== numbers[i-1]) output.push(numbers[i]);\n\
    \  }\n  \n  return output;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks a lot. I am\
    \ new to javascript and was stuck on this for a long time. I was able to implement\
    \ it with a couple of lines of code. Thanks a lot for your help!\n<|/ c |>\n<|\
    \ a tags=javascript,arrays dscore=2 |>\nIn Javascript you can do that with .filter()\n\
    <code>\nvar nums = [1, 2, 2, 2, 4, 5];\nvar result = nums.filter(function(x){return\
    \ x===x});\n</code>\nresult = [1, 2, 4, 5]\nIf you don't want to mutate the original\
    \ array then you can .slice() it first\n<code>\nvar nums = [1, 2, 2, 2, 4, 5];\n\
    var result = nums.slice(0).filter(function(x){return x===x});\n</code>\nresult\
    \ = [1, 2, 4, 5]\n<|/ a |>\n<| c |>\nThis mutates the original array, which is\
    \ bad.\n<|/ c |>\n<| a tags=javascript,arrays dscore=2 |>\nYou can use Array.prototype.filter()\
    \ to filter out duplicate items (reference):\n<code>\nconst arr = [1, 2, 2, 2,\
    \ 4, 5];\nconst arrFiltered = arr.filter((item, index) => arr.indexOf(item) ===\
    \ index)\n</code>\n<|/ a |>\n<| c |>\nThis mutates the original array, which is\
    \ bad.\n<|/ c |>\n<| c |>\nthanks for noticing that! I've updated the code snippet\
    \ to use `Array.prototype.slice()` instead.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nOne Liner:\n<code>", "\tconst output = [];\n\tnumbers.forEach((el)=>{\n\t\
    \tif (!output.includes(el)){\n\t\t\toutput.push(el);\n\t\t}\n\t})\n\treturn output;\n\
    }\n\n", "    var numbers_set = {}\n    for(var i =0; i < numbers.length; i++){\n\
    \        numbers_set[numbers[i]] = true\n    }\n    return Object.keys(numbers_set).sort().map(function(number){\
    \ return numbers[numbers_set[number]] })\n}\n", "    for(let i of numbers){\n\
    \        for(let j of numbers){\n            if(j != i && j > i){\n          \
    \      numbers.splice(numbers.indexOf(i), 1);\n            }\n        }\n    }\n\
    \    return numbers;\n}\nconst numbers = [1, 2, 3, 2, 4];\nconst result = remove_duplicates(numbers);",
  "    var seen = [];\n    return numbers.filter(function(n){ return seen.indexOf(n)\
    \ < 0 && seen.push(n); });\n}\n", "  numbers = numbers.map(function(i){\n    return\
    \ i;\n  });\n  var output = [];\n  for(var i=0;i<numbers.length;i++){\n    for(var\
    \ j=0;j<numbers.length;j++){\n      if(numbers[i] === numbers[j]){\n        numbers.splice(j,\
    \ 1);\n      }\n    }\n  }\n  return numbers.filter(function(i){\n    return output.indexOf(i)<0;\n\
    \  });\n}\n", "  var index = {};\n  return numbers.filter(function(num){\n   \
    \ return !index[num] && (index[num] = true);\n  });\n}\n", "  var ret = [];\n\
    \  var len = numbers.length;\n  var j = 0;\n  for (var i = 0; i < len; i+=1) {\n\
    \    var num = numbers[i];\n    if (ret.indexOf(num) > -1) {\n      continue;\n\
    \    }\n    ret.push(num);\n  }\n  return ret;\n}\n", "  var i, new_numbers;\n\
    \n  new_numbers = numbers.filter(function(elem, index, arr){\n    return index\
    \ === arr.indexOf(elem);\n  });\n  return new_numbers;\n}\n", "  numbers = _.toArray(numbers);\n\
    \  numbers = _.uniq(numbers);\n  numbers = _.toArray(numbers);\n  return numbers;\n\
    }\n", "    var output = [];\n    var seen = [];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        var number = numbers[i];\n        if (seen.indexOf(number) ===\
    \ -1){\n            output.push(number);\n            seen.push(number);\n   \
    \     }\n    }\n    return output;\n}", "\tvar out = [];\n\tvar seen = [];\n\t\
    var j = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tseen[numbers[i]] =\
    \ true;\n\t\tif(!out[j]){\n\t\t\tout[j++] = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ out;\n}\n", "  var hash = {},\n      result = [];\n\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    var number = numbers[i];\n    if (!hash[number]) {\n      hash[number]\
    \ = true;\n      result.push(number);\n    }\n  }\n\n  return result;\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| a tags=javascript dscore=1 |>\nJust use filter:\n\
    <code>\nvar myArray = [1,2,2,2,2,3,4]\nmyArray = myArray.filter(function(value,\
    \ index, self) {\n    return index == self.indexOf(value);\n});\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for the answer, but can you explain what \"self\" is?\n\
    <|/ c |>\n<| c |>\n`self` is the entire array in which the function is being called.\
    \ I could have written `myArray.filter(function(value, index, self) {` and then\
    \ referenced the same variable as the other answers.\n<|/ c |>\n<| c |>\n- self\
    \ is actually the object being iterated over.  In this case, it's the array that\
    \ you are iterating over, `[1, 2, 2, 2, 2, 3, 4]`\n<|/ c |>\n<| c |>\nNo, you\
    \ are passing in 3 arguments to the `filter` function. The function gets called\
    \ per item with the current value of the array, the index of the item, and the\
    \ entire array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar myArray = [1,2,2,2,2,3,4]\n\
    var output = [];\nvar unique = myArray.filter(function(value, index, arr) {\n\
    \    if (output.indexOf(value) === -1) {\n        output.push(value);\n    }\n\
    });\n</code>\n<|/ a tags=javascript |>\n<| c |>\nYou really don't need to loop\
    \ through `myArray` twice if you use the index to check for duplicates.  Just\
    \ use `indexOf` in the callback instead.\n<|/ c |>\n<| a dscore=0 |>\nHere's a\
    \ quick way to do it with ES6:\n<code>\nconst uniques = [...new Set([1, 2, 2,\
    \ 2, 2, 3, 4, 5])];\n</code>\n...which will return:\n<code>\n[ 1, 2, 3, 4, 5 ]\n\
    </code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\nThe most efficient way is\
    \ to use ES6 Set - https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set\n\
    <code>\nlet unique = new Set([1, 2, 2, 2, 2, 3, 4, 5]);\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nES6 Set is ES2016, and isn't supported in all browsers.\n<|/ c\
    \ |>\n<| a |>\nI got this working with this code, also using ES6 syntax:\n<code>\n\
    const removeDups = ", "    var newArr = [];\n    var uniqueNumbers = [];\n   \
    \ for(var i = 0, len = numbers.length; i < len; i++){\n        var curNum = numbers[i];\n\
    \        if(uniqueNumbers.indexOf(curNum) < 0){\n            uniqueNumbers.push(curNum);\n\
    \            newArr.push(curNum);\n        }\n    }\n    return newArr;\n}\n",
  "  var result = [];\n  var hash = {};\n  for (var i = 0; i < numbers.length; i++){\n\
    \    if (hash[numbers[i]]) continue;\n    hash[numbers[i]] = true;\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  var obj = {},\n      len = numbers.length;\n\n\
    \  for(var i = 0; i < len; i++){\n    if(obj[numbers[i]]) delete obj[numbers[i]];\n\
    \    obj[numbers[i]] = 1;\n  }\n\n  var result = [];\n  for(var number in obj){\n\
    \    result.push(number);\n  }\n  return result;\n}\n", "  // Make a copy of the\
    \ input list.\n  var numbers_copy = numbers.slice();\n\n  // Map the numbers to\
    \ an array.\n  var numbers_map_to_array = [];\n  for(var i = 0; i < numbers_copy.length;\
    \ i++){\n    var numbers_map_to_array_i = numbers_copy[i];\n    numbers_map_to_array.push(numbers_map_to_array_i);\n\
    \  }\n  // Sort map by value.\n  numbers_map_to_array = numbers_map_to_array.sort(function(a,b){\n\
    \    return a - b;\n  });\n\n  // Use a map to count the number of each number\
    \ in the input list.\n  var numbers_map_to_array_counter = {};\n  for(var i =\
    \ 0; i < numbers_map_to_array.length; i++){\n    var number = numbers_map_to_array[i];\n\
    \    numbers_map_to_array_counter[number] = numbers_map_to_array_counter[number]\
    \ ? numbers_map_to_array_counter[number]+1 : 1;\n  }\n\n  // Use a map to store\
    \ the unique numbers in the input list.\n  var numbers_map_to_array_unique = [];\n\
    \  for(var key in numbers_map_to_array_counter){\n    if(numbers_map_to_array_counter.hasOwnProperty(key)){\n\
    \      var number = key;\n      numbers_map_to_array_unique.push(number);\n  \
    \  }\n  }\n\n  // Convert the unique numbers to an array.\n  var numbers_map_to_array_unique_to_array\
    \ = [];\n  for(var i = 0; i < numbers_map_to_array_unique.length; i++){\n    var\
    \ numbers_map_to_array_unique_to_array_i = numbers_map_to_array_unique[i];\n \
    \   numbers_map_to_array_unique_to_array.push(numbers_map_to_array_unique_to_array_i);\n\
    \  }\n  // Sort the unique numbers by value.\n  numbers_map_to_array_unique_to_array\
    \ = numbers_map_to_array_unique_to_array.sort(function(a,b){\n    return a - b;\n\
    \  });\n\n  // Convert the map to an array.\n  var numbers_map_to_array_unique_to_array_to_array\
    \ = [];\n  for(var i = 0; i < numbers_map_to_array_unique_to_array.length; i++){\n\
    \    var numbers_map_to_array_unique_to_array_to_array_i = numbers_map_to_array_unique_to_array[i];\n\
    \    numbers_map_to_array_unique_to_array_to_array.push(numbers_map_to_array_unique_to_array_to_i);\n\
    \  }\n\n  // Return the sorted result.\n  return numbers_map_to_array_unique_to_array_to_array;\n\
    }\n", "    var i, j, hash = {}, newarray = [];\n    for(i = 0; i < numbers.length;\
    \ ++i){\n        j = numbers.indexOf(i, hash);\n        if(j > -1) {\n       \
    \     hash[j] = true;\n        }\n        else {\n            newarray.push(i);\n\
    \        }\n    }\n    return newarray;\n}\n", "  var result = [];\n  var map\
    \ = {};\n  for(var i = 0, len = numbers.length; i < len; i++){\n    var number\
    \ = numbers[i];\n    if(map[number]){\n      continue;\n    }\n    map[number]\
    \ = true;\n    result.push(number);\n  }\n  return result;\n}\n", "  var hash\
    \ = {};\n  numbers.forEach(function(element) {\n    hash[element] = element;\n\
    \  });\n\n  return numbers.filter(function(element) {\n    return !(hash[element]\
    \ in hash);\n  });\n}\n", "  var seen = {};\n  var result = [];\n  for(var i =\
    \ 0, len = numbers.length; i < len; i++){\n    var num = numbers[i];\n    if(seen[num]){\n\
    \      result.push(num);\n    } else {\n      seen[num] = true;\n    }\n  }\n\
    \  return result;\n}\n", "  var result = [];\n  var seen = {};\n  for(var i =\
    \ 0; i < numbers.length; i++){\n    var number = numbers[i];\n    if(seen.hasOwnProperty(number)){\n\
    \      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n\
    \  }\n  return result;\n}\n", "  var seen = {},\n    result = [];\n\n  numbers.forEach(function(x){\n\
    \    if (seen[x]) { return; }\n    seen[x] = true;\n    result.push(x);\n  });\n\
    \n  return result;\n}\n", "  return numbers.filter(function(elem, pos, self) {\n\
    \    return self.indexOf(elem) == pos;\n  });\n}", "    var seen = {};\n    var\
    \ new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n        var\
    \ num = numbers[i];\n        if (seen[num]) continue;\n        seen[num] = 1;\n\
    \        new_numbers.push(num);\n    }\n    return new_numbers;\n}\n</cell>\n\
    <cell>", "    var i=0;\n    var result = [];\n    var numbers_length = numbers.length;\n\
    \    while (i<numbers_length){\n        var number = numbers[i];\n        if (result.indexOf(number)===-1){\n\
    \            result.push(number);\n        } else {\n            i++;\n      \
    \  }\n    }\n    return result;\n}", "  const newList = [];\n  let newVal;\n\n\
    \  for(const i of numbers){\n    for(const j of newList){\n      if(j === i){\n\
    \        continue;\n      }\n      if(j > i){\n        break;\n      }\n    }\n\
    \    if(j > i){\n      newVal = i;\n      newList.push(newVal);\n    }\n  }\n\
    \  return newList;\n}\n", "    var output = [];\n    var outputNums = [];\n  \
    \  for(var i = 0, j = numbers.length; i < j; i++){\n        var number = numbers[i];\n\
    \        if(outputNums.indexOf(number) === -1){\n            outputNums.push(number);\n\
    \            output.push(number);\n        }\n    }\n    return output;\n}\n",
  "  return numbers.filter((n, index, self) => {\n    return self.indexOf(n) === index;\n\
    \  });\n}\n", "  var hash = {}\n  var result = []\n  numbers.forEach(function(n){\n\
    \    hash[n] = true\n  })\n  \n  numbers.forEach(function(n){\n    if(hash[n]){\n\
    \      result.push(n)\n      hash[n] = false\n    }\n  })\n  \n  return result\n\
    }\n</code>\n<|/ a tags=sorting,list,javascript |>\n<| c |>\nThis is not working\
    \ with big arrays like this `[274, 342, 343, 344, 344, 346, 347, 348, 349, 350,\
    \ 351, 351, 352, 352, 354, 354, 358, 358, 359, 360, 361, 362, 362, 363, 363, 365,\
    \ 365, 366, 366, 367, 370, 371, 371, 374, 375, 375, 376, 377, 378, 378, 379, 380,\
    \ 381, 381, 382, 383, 383, 384, 384, 385, 386, 386, 387, 388, 389, 390, 390, 392,\
    \ 392, 393, 393, 394, 395, 395, 396, 396, 398, 398, 399, 400, 400, 401, 402, 403,\
    \ 403, 404, 405, 405, 406, 407, 408, 409, 410, 411, 412, 412, 413, 413, 414, 414,\
    \ 416, 417, 417, 418, 418, 419, 419, 420, 421, 421, 422, 423, 423, 424, 425, 426,\
    \ 427, 428, 429, 430, 431, 432, 433, 434, 434, 435, 435, 436, 436, 437, 438, 438,\
    \ 439, 440, 441, 442, 443, 444, 445, 445, 446, 447, 447, 448, 449, 450, 451, 452,\
    \ 452, 453, 453, 454, 455, 456, 456, 457, 458, 458, 459, 459, 460, 460, 461, 461,\
    \ 462, 462, 463, 464, 464, 465, 466, 466, 467, 468, 469, 469, 470, 471, 472, 472,\
    \ 473, 474, 475, 475, 476, 477, 477, 478, 479, 480, 480, 481, 482, 483, 484, 484,\
    \ 485, 486, 487, 487, 488, 489, 490, 491, 491, 492, 493, 494, 495, 495, 496, 497,\
    \ 498, 499, 499, 500, 501, 502, 503, 503, 504, 50", "  var i=0;\n  var len=numbers.length;\n\
    \  var result = [];\n  var values = [];\n  while (i<len){\n    var val = numbers[i];\n\
    \    if (values.indexOf(val)===-1){\n      result.push(val);\n      values.push(val);\n\
    \    }\n    i++;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    What if one value is repeating twice in the array?\n<|/ c |>\n<| c |>\n, It will\
    \ still be there, just not shown.\n<|/ c |>\n<| c |>\nThis is not very efficient\
    \ - O(n^2)\n<|/ c |>\n<| c |>\nThis is not efficient as well.\n<|/ c |>\n<| c\
    \ |>\nWhat do you mean by efficient and what do you mean by not efficient? The\
    \ code above is O(n^2), what do you think is inefficient?\n<|/ c |>\n<| a tags=arrays,javascript\
    \ |>\nYou can use this function  \n<code>\nvar myArray = [1,2,2,2,4,5,5,5,6,7]\
    \ ;\nvar arr = [] ;\n", "  let num_counts = {};\n  for(const number of numbers){\n\
    \    if (num_counts[number] === undefined){\n      num_counts[number] = 1;\n \
    \   } else {\n      num_counts[number] += 1;\n    }\n  }\n  return Array.from(num_counts).sort();\n\
    }\n", "    let uniques= new Set();\n    for(let i in numbers){\n        if(uniques.has(numbers[i])){\n\
    \            numbers.splice(i, 1);\n        }\n        uniques.add(numbers[i]);\n\
    \    }\n    return numbers;\n}", "    var result = [];\n    var seen = {};\n \
    \   for(var i = 0; i < numbers.length; i++){\n        if(seen[numbers[i]]){\n\
    \            result.push(numbers[i]);\n        } else {\n            seen[numbers[i]]\
    \ = true;\n        }\n    }\n    return result;\n}\n", "  const seen = {};\n \
    \ return numbers.filter(number => {\n    if(seen[number]){\n      return false;\n\
    \    }\n    seen[number] = true;\n    return true;\n  });\n}\n", "\tvar map =\
    \ {};\n\tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar\
    \ num = numbers[i];\n\t\tvar isIn = map[ num ];\n\t\tif( !isIn ){\n\t\t\tmap[\
    \ num ] = true;\n\t\t\tresult.push(num);\n\t\t}\n\t}\n\treturn result;\n}\n",
  "    var output = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(output.indexOf(numbers[i])\
    \ == -1){\n            output.push(numbers[i]);\n        }\n    }\n    return\
    \ output;\n}\n", "\tvar result = [];\n\tvar seen = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(seen.indexOf(numbers[i]) != -1) continue;\n\t\tresult.push(numbers[i]);\n\
    \t\tseen.push(numbers[i]);\n\t}\n\treturn result;\n}\n", "  return numbers.filter((e,i)=>{\n\
    \    var found = numbers.indexOf(e)\n    return found >= 1 ? (found === i ? false\
    \ : true) : true\n  })\n}\n", "  var hash = {},\n    hash_list = [],\n    i,\n\
    \    len=numbers.length;\n\n  for(i = 0; i < len; i++){\n    if (hash[numbers[i]])\
    \ {\n      hash_list.push(numbers[i]);\n      delete hash[numbers[i]];\n    }\n\
    \    else{\n      hash[numbers[i]] = 1;\n    }\n  }\n  return hash_list;\n}\n\
    },{\"./is_valid_json\":13}],13:[function(require,module,exports){", "  if(numbers.length\
    \ == 0) return [];\n  var result = [];\n  var counter = {};\n  for(var i=0; i<numbers.length;\
    \ i++){\n    if(counter[numbers[i]]) continue;\n    counter[numbers[i]] = 1;\n\
    \    result.push(numbers[i]);\n  }\n  return result;\n}\n", "  const result =\
    \ [];\n  numbers.forEach(element => {\n    if (result.indexOf(element) == -1)\
    \ result.push(element);\n  });\n  return result;\n}\n", "  return numbers.reduce(function(prev,\
    \ current) {\n    return prev.concat(current.filter(function(num){ return numbers.indexOf(num)\
    \ < numbers.lastIndexOf(num); }))\n  }, [])\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ dscore=0 |>\n<| c |>\nThis is really not the answer that should be posted here\
    \ because it is homework related.\n<|/ c |>\n<| c |>\nWhile this may well be a\
    \ homework problem, it is still a valid question for Stack Overflow.\n<|/ c |>\n\
    <| c |>\nWhile this does solve the problem it isn't a good answer. Your teacher\
    \ shouldn't be asking you to do this. It is a very simple question and you should\
    \ be able to figure out how to do it without asking here.\n<|/ c |>\n<| c |>\n\
    I agree, I'm just pointing out a potential downfall to this solution for future\
    \ readers of this thread.\n<|/ c |>\n<| c |>\nIt isn't a homework problem, it\
    \ is a learning problem. I'm just not able to wrap my head around how to do this.\
    \ I'll give it a try and see if it works. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n\
    You can use a combination of Array.prototype.filter() and Array.prototype.indexOf()\
    \ to achieve this.\n\n<code>\nconst array = [1, 2, 3, 3, 4, 5];\n\nlet result\
    \ = array.filter((value, index) => array.indexOf(value) === index);", "  // first\
    \ create an object whose keys correspond to the values in the given list\n  const\
    \ duplicates = {};\n  \n  numbers.forEach((num) => {\n    // if the key already\
    \ exists, add 1 to the value \n    // otherwise, create it and give it the value\
    \ 1\n    duplicates[num] = (duplicates[num] || 0) + 1;\n  });\n  \n  // once we've\
    \ finished with all the numbers, filter out any numbers that are in the list more\
    \ than once\n  // this can be achieved using .reduce with a mapping of the numbers\
    \ to a boolean value which tells us whether\n  // or not the given number has\
    \ already been seen\n  return Object.keys(duplicates)\n    .reduce((result, num)\
    \ => {\n      if (duplicates[num] > 1) result[num] = true;\n      return result;\n\
    \    }, {});\n}\n", "  var unique = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "    var obj = {};\n\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        if(numbers[i] in obj){\n            obj[numbers[i]].times_used++;\n\
    \        } else {\n            obj[numbers[i]] = new Array(numbers[i]);\n    \
    \        obj[numbers[i]].times_used = 0;\n        }\n    }\n    var result = [];\n\
    \    for (var prop in obj) {\n        result.push([prop, obj[prop]])\n    }\n\
    \    return result;\n}\n", "\tvar output = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tvar count = 0;\n\t\tfor(var j=0;j<output.length;j++){\n\t\t\tif(numbers[i]\
    \ == output[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1){\n\t\t\t\
    output.push(numbers[i]);\n\t\t}\n\t}\n\treturn output;\n}\n", "\tvar seen = {};\n\
    \treturn numbers.filter(function(num){\n\t\tif(seen[num]){\n\t\t\treturn false;\n\
    \t\t}\n\t\tseen[num] = true;\n\t\treturn true;\n\t});\n}\n", "  var output = [];\n\
    \  for (var i = 0; i < numbers.length; i++){\n    if (numbers.indexOf(numbers[i])\
    \ != numbers.lastIndexOf(numbers[i])){\n      output.push(numbers[i]);\n    }\n\
    \  }\n  return output;\n}", "    var obj = {};\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        obj[numbers[i]] = numbers[i];\n    }\n    var newArray = [];\n\
    \    for(var i in obj){\n        newArray.push(obj[i]);\n    }\n    return newArray;\n\
    }\n", "\tnumbers.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\t\n\tvar currentValue\
    \ = numbers[0]\n\tvar toRemove = [];\n\tvar toRetain = [];\n\t\n\tfor (var i =\
    \ 0; i < numbers.length; i++){\n\t\tif (numbers[i] === currentValue){\n\t\t\t\
    toRemove.push(i);\n\t\t}\n\t\telse if (numbers[i] < currentValue){\n\t\t\ttoRetain.push(numbers[i]);\n\
    \t\t}\n\t\t\n\t\tcurrentValue = numbers[i];\n\t}\n\t\n\t//Reverse toRetain to\
    \ be in same order as toRemove.\n\ttoRetain.reverse();\n\t\n\ttoRetain.forEach(function(value){\n\
    \t\tnumbers.splice(toRemove.indexOf(value), 1);\n\t});\n\t\n\treturn numbers;\n\
    }\n", "  var new_arr = []\n  var uniqs = []\n  var unique = true\n  var new_number\n\
    \n  for (var i = 0; i < numbers.length; i++) {\n    unique = true\n    if (uniqs.indexOf(numbers[i])\
    \ > -1){\n      unique = false\n    }\n    if (unique){\n      uniqs.push(numbers[i])\n\
    \      new_number = numbers[i]\n    }\n\n    new_arr.push(new_number)\n  }\n \
    \ return new_arr\n}\n", "\tnumbers = numbers.filter(function(element, index, array){\n\
    \t\treturn array.indexOf(element) == index;\n\t});\n\treturn numbers;\n}\n", " \
    \   let result = [];\n    numbers.forEach((num)=>{\n        let found = false;\n\
    \        for(let index = 0; index < result.length; index++){\n            if(result[index]\
    \ == num){\n                found = true;\n                break;\n          \
    \  }\n        }\n        if(!found){\n            result.push(num);\n        }\n\
    \    });\n    return result;\n}\n", "  var seen = [];\n  return numbers.filter(function(number)\
    \ {\n    if(seen.indexOf(number) == -1) {\n      seen.push(number);\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  });\n}\n", "  var out = [];\n\
    \  var seen = [];\n  for (var i = 0; i < numbers.length; i++){\n    if (seen.indexOf(numbers[i])\
    \ == -1){\n      seen.push(numbers[i]);\n      out.push(numbers[i]);\n    }\n\
    \  }\n  return out;\n}\nvar is_prime = function(n){\n  n = parseInt(n);\n  for\
    \ (var i = 2; i*i <= n; i++) {\n    if (n % i == 0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\nvar is_even = function(n){\n  n = parseInt(n);\n\
    \  return (n % 2) === 0;\n}\nvar is_divisible_by_ten = function(n){\n  n = parseInt(n);\n\
    \  if (n % 10 === 0){\n    return false;\n  }\n  return true;\n}\nvar is_divisible_by_three\
    \ = function(n){\n  n = parseInt(n);\n  if (n % 3 === 0){\n    return false;\n\
    \  }\n  return true;\n}\nvar is_five_digit = function(n){\n  n = parseInt(n);\n\
    \  return is_integer(n) && n % 10 === 0;\n}\nvar is_less_than_ten_digit = function(n){\n\
    \  n = parseInt(n);\n  return is_integer(n) && n < 10;\n}\nvar is_less_than_three_digits\
    \ = function(n){\n  n = parseInt(n);\n  return is_integer(n) && n < 100;\n}\n\
    var is_less_than_five_digits = function(n){\n  n = parseInt(n);\n  return is_integer(n)\
    \ && n < 1000;\n}\nvar is_integer = function(n){\n  n = parseInt(n);\n  return\
    \ !isNaN(parseInt(n));\n}\nvar is_odd = function(n){\n  n = parseInt(n);\n  return\
    \ !isNaN(parseInt(n)) && n & 1;\n}\nvar is_less_than_one_hundred = function(n){\n\
    \  n = parseInt(n);\n  return !isNaN(parseInt(n)) && n <= 100;\n}\nvar is_less_than_one_hundred_thousand\
    \ = function(n){\n  n = parseInt(n);\n  return !isNaN(parseInt(n)) && n <= 1000;\n\
    }\nvar is_odd_or_zero = function(n){\n  n = parseInt(n);\n  return !isNaN(parseInt(n))\
    \ && n === 0 || n & 1;\n}\nvar is_less_than_ten_thousand = function(n){\n  n =\
    \ parseInt(n);\n  return !isNaN(parseInt(n)) && n <= 1000;\n}\nvar is_less_than_one_hundred_thousand\
    \ = function(n){\n  n = parseInt(n);\n  return !isNaN(parseInt(n)) && n <= 1000;\n\
    }\nvar is_less_than_three_thousand = function(n){\n  n = parseInt(n);\n  return\
    \ !isNaN(parseInt(n)) && n <= 3000;\n", "    var i=0, len=numbers.length;\n  \
    \  for(;i<len;i++){\n        var cnt=0;\n        for(var j=i+1;j<len;j++){\n \
    \           if(numbers[i] === numbers[j])\n                cnt++;\n        }\n\
    \        if(cnt==1){\n            numbers.splice(i,1);\n            i--;\n   \
    \         len--;\n        }\n    }\n    return numbers;\n}\n</code>\nThe first\
    \ part (find_duplicates) is a bit complex, so I will try to explain it step by\
    \ step. Let's take an array [1, 2, 3, 2, 4] as an example.\n\nWe will first sort\
    \ the array in ascending order, so that the initial array will become [2, 1, 3,\
    \ 4].\nNext we start from the first element (in this case, it's 1) that has occurred\
    \ in the array so far (cnt = 1). On each step we compare the next element (number\
    \ 2) against number 1 (which we already know it's duplicate).\nWe see that cnt\
    \ = 1, so we proceed to the next element (number 3) and compare it with number\
    \ 2 (which is already there) and we see that cnt = 1, so we proceed to the next\
    \ element (number 4) and compare it with number 3 (which is already there) and\
    \ we see that cnt = 2, so we proceed to the next element (number 2) and compare\
    \ it with number 4 (which is already there) and we see that cnt = 1, so we continue\
    \ to the next element (number 4), where we already know that cnt = 2 and we see\
    \ that cnt = 1, so we proceed to the next element (number 3) and compare it with\
    \ number 4 (which is already there) and we see that cnt = 1, so we continue to\
    \ the next element (number 2) and compare it with number 3 (which is already there)\
    \ and we see that cnt = 1, so we proceed to the next element (number 2), where\
    \ we already know that cnt = 1 and we see that cnt = 1, so we proceed to the next\
    \ element (number 4), where we already know that cnt = 1 and we see that cnt =\
    \ 1, so we proceed to the next element (number 5), where we already know that\
    \ cnt = 1 and we see that cnt = 1, so we proceed to the next element (number 6),\
    \ where we already know that cnt = 1 and we see that cnt = 1, so we proceed to\
    \ the next element (number 7), where we already know that cnt = 1 and we see that\
    \ cnt = 1, so we proceed to the next element (number 8), where we already know\
    \ that cnt = 1 and we see that cnt = 1, so we proceed to the next element (number\
    \ 9), where we already know that cnt = 1 and we see that cnt = 1, so we proceed\
    \ to the next element (number 10), where we already know that cnt = 1 and we see\
    \ that cnt = 1, so we proceed to the next element (number 11), where we already\
    \ know that cnt = 1 and we ", "    var sorted = numbers.slice().sort(function(a,b){\n\
    \        return a-b;\n    });\n    return sorted.filter(function(elem, index,\
    \ self){\n        return self.indexOf(elem) == index;\n    });\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThanks for that answer. I'm trying to understand what\
    \ it does but it doesn't make much sense. Can you please elaborate?\n<|/ c |>\n\
    <| c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nThis answer is much better\
    \ than the one from jimbojw because I didn't know about the 'filter' method so\
    \ I learned something new today. Thanks!\n<|/ c |>\n<| c |>\nI find it helpful\
    \ to break down the function into smaller chunks. Then you can see which steps\
    \ each one is doing so you can see what is happening. Here is a good website to\
    \ learn about arrays: http://www.w3schools.com/js/js_arrays.asp\n<|/ c |>\n<|\
    \ c |>\n+1 for the good description of remove_duplicates, I did not know that.\
    \ Very elegant way of doing this\n<|/ c |>\n<| a tags=jquery,javascript |>\nHere\
    \ is a simple solution using lodash. \n<code>\nvar arr = [1, 2, 3, 2, 4];\nvar\
    \ unique = _.uniq(arr);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`uniq()` will remove\
    \ all the duplicates, while OP is looking to keep them in sequence.\n<|/ c |>\n\
    <| c |>\nThanks for that, I'd never heard of this library before. I think I'll\
    \ try to use it to see what it can do to me. I know my way around JQuery but I'm\
    \ not a master at Lodash.\n<|/ c |>\n<| c |>\nYeah lodash is really handy when\
    \ working with arrays. It has some very nice utility functions :)\n<|/ c |>\n\
    <| c |>\nI've been working with lodash but haven't been able to get used to it.\
    \ I think it's a really nice library and I love the way they describe their API\
    \ as much as I do. I still have to try to figure out how to use them in a way\
    \ that makes sense to me, but I'm starting to get the hang of it. Thanks for the\
    \ feedback!\n<|/ c |>\n<| c |>\nJust to let you know I did get it working. It's\
    \ a little hacky but works. I decided to go with this answer since it's really\
    \ simple and does the same thing as my original code. Thanks again, everyone!\n\
    <|/ c |>\n<|", "\tvar unique = [];\n\tfor(var i = 0; i < numbers.length; i++)\n\
    \t\tfor(var j = i+1; j < numbers.length; j++)\n\t\t\tif(numbers[i] === numbers[j]){\n\
    \t\t\t\tnumbers.splice(j, 1);\n\t\t\t\tj--;\n\t\t\t}\n\treturn unique;\n}", "\t\
    var map = {}, i, len = numbers.length;\n\tfor(i = 0; i < len; i += 1) {\n\t\t\
    var num = numbers[i];\n\t\tif(map[num] !== undefined){\n\t\t\tnumbers.splice(i,\
    \ 1);\n\t\t\ti -= 1;\n\t\t\tlen -= 1;\n\t\t}\n\t\telse map[num] = 1;\n\t}\n\t\
    return numbers;\n}\n\n", "  const hash = {};\n  return numbers.filter(function(number){\n\
    \    if (hash[number] == undefined){\n      hash[number] = true;\n      return\
    \ true;\n    }\n  });\n}\n</cell>\n<text>\nThe filter method returns a new array:\n\
    \n\n</text>\n<cell>\nremove_duplicates([1, 2, 3, 2, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns an array of all words in the\
    \ string\n\n\n</text>\n<cell>", "  var hash = {};\n  var output = [];\n  \n  for(var\
    \ i = 0; i < numbers.length; i++){\n    var element = numbers[i];\n    var current_hash\
    \ = hash[element];\n    if(current_hash === undefined){\n      hash[element] =\
    \ true;\n      output.push(element);\n    } else {\n      hash[element] = current_hash\
    \ + 1;\n    }\n  }\n  return output;\n}\n</code>\n<|/ a tags=unique,sorting,javascript\
    \ |>\n<| a |>\nHere is what I came up with. Not sure if it's the most efficient\
    \ solution but it's a great starting point for me to learn, so I thought I'd post\
    \ it anyway.\n<code>\nvar numbers = [1,1,2,4,4,4,5,6,6,7,8,9,9,9];\nvar unique\
    \ = numbers.filter(function(value, index, self) {\n    return self.indexOf(value)\
    \ == index;\n});", "  var unique = [];\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    if (unique.indexOf(numbers[i]) == -1){\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n", "  var numberSet = make_set();\n  for(var\
    \ i in numbers){\n    numberSet.insert(numbers[i]);\n  }\n  var numbers = [];\n\
    \  for(var i of numberSet.iter()){\n    numbers.push(i);\n  }\n  return numbers;\n\
    }\n", "  var uniques = [];\n\n  // Remove duplicates.\n  for (var i = numbers.length\
    \ - 1; i >= 0; i--){\n    if (numbers.indexOf(numbers[i]) == i){\n      uniques.push(numbers[i]);\n\
    \      numbers.splice(i, 1);\n    }\n  }\n\n  return uniques;\n};\n\n", "    const\
    \ uniques = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i])\
    \ == -1){\n            uniques.push(numbers[i]);\n        }\n    }\n    return\
    \ uniques;\n}", "    var result = [];\n    var hash = {};\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        var current = numbers[i];\n        if(hash[current]\
    \ === undefined){\n            hash[current] = true;\n            result.push(current);\n\
    \        }\n    }\n    return result;\n}", "  var output = [];\n  for(var i=numbers.length-1;\
    \ i>=0; i--){\n    if(numbers.indexOf(numbers[i])===i){\n      output.push(numbers[i]);\n\
    \      numbers.splice(i,1);\n    }\n  }\n  return output;\n}\n\n", "\tvar i, duplicates\
    \ = [];\n\t\n\tfor (i = 0; i < numbers.length; i++){\n\t\tduplicates.push(i);\n\
    \t}\n\t\n\twhile (duplicates.length){\n\t\tvar toRemove = duplicates.shift();\n\
    \t\t\n\t\tfor (i = 0; i < numbers.length; i++){\n\t\t\tif (numbers[i] === toRemove){\n\
    \t\t\t\tduplicates.push(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ numbers.filter(function(elem, pos, arr){\n\t\treturn arr.indexOf(elem) == pos;\n\
    \t});\n}\n", "    var result = [];\n    for(var i=0; i<numbers.length; i++){\n\
    \        if(numbers.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\n\
    For those who need an example with Node.js\n<code>\nvar numbers = [];\nconst filter\
    \ = (arr) => {\n  return arr.filter((value, index, arr) => {\n    return arr.indexOf(value)\
    \ === index;\n  });\n};\n\nconst arr = [1,2,2,3,3,3,4,4,4];\n\nconst unique =\
    \ arr => {\n  const filtered = filter(arr);\n  const unique = [...new Set(filtered)];\n\
    \  return unique;\n}\n", "  const results = [];\n\n  let num = 0;\n  while (num\
    \ < numbers.length){\n    let exists = false;\n    for (let i = 0; i < results.length;\
    \ i++){\n      if (results[i] === num){\n        exists = true;\n      }\n   \
    \ }\n\n    if (!exists){\n      results.push(num);\n    }\n\n    num++;\n  }\n\
    \n  return results.sort(function(a, b){return a - b})\n}\n", "  let temp = {};\n\
    \  numbers.map(function(num){ temp[num] = true;});\n  let array = [];\n  for(let\
    \ key in temp)\n    if(temp.hasOwnProperty(key))\n      array.push(parseInt(key));\n\
    \  return array;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou could use some array\
    \ methods:\n\n<code>\nconst removeDuplicates = arr => arr.filter((item, pos, arr)\
    \ => arr.indexOf(item) == pos).sort((a,b) => a - b);\nconst arr = [1, 2, 3, 2,\
    \ 4];\nconst res = removeDuplicates(arr);", "    var uniques = [];\n\n    numbers.forEach(function(num){\n\
    \        if(uniques.indexOf(num) === -1) uniques.push(num);\n    });\n\n    return\
    \ uniques;\n}\n</code>\n<|/ a |>\n<| a |>\nA little simpler and more efficient\
    \ for big arrays. I added a method to remove the duplicates with custom comparator.\n\
    <code>", "  var i, j, current, newList, num;\n  newList = [];\n  for(i=0, num=numbers.length;\
    \ i<num; i++){\n    current = numbers.indexOf(i+1);\n    newList.push(numbers[current]);\n\
    \  }\n  return newList;\n}", "  return numbers.reduce(function(accum, num){\n\
    \    if(accum.indexOf(num) == -1){\n      accum.push(num);\n    }\n    return\
    \ accum;\n  }, []);\n}\n", "\tvar result = [];\n\tfor (var i = 0; i < numbers.length;\
    \ i++) {\n\t\tvar count = numbers.filter(function(x){ return x == numbers[i];\
    \ }).length;\n\t\tif (count > 1){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\
    \treturn result;\n}", "  var counter = {};\n  return numbers.filter(function(value){\n\
    \    counter[value] = counter[value] ? counter[value]+1 : 1;\n    return counter[value]\
    \ > 1;\n  });\n}\n\nmodule.exports = remove_duplicates;\n\n},{}],12:[function(require,module,exports){\n\
    var isSameDate = function(date1, date2){\n  var m = moment(date1);\n  var m2 =\
    \ moment(date2);\n  return m.isSame(m2);\n};\n\nvar isSameMonth = function(date1,\
    \ date2){\n  var m = moment(date1);\n  var m2 = moment(date2);\n  return m.isSame(m2,\
    \ 'month');\n};\n\nvar isSameYear = function(date1, date2){\n  var m = moment(date1);\n\
    \  var m2 = moment(date2);\n  return m.isSame(m2, 'year');\n};\n\nvar isSameHour\
    \ = function(date1, date2){\n  var m = moment(date1);\n  var m2 = moment(date2);\n\
    \  return m.isSame(m2, 'hour');\n};\n\nvar isSameMinute = function(date1, date2){\n\
    \  var m = moment(date1);\n  var m2 = moment(date2);\n  return m.isSame(m2, 'minute');\n\
    };\n\nvar isSameSecond = function(date1, date2){\n  var m = moment(date1);\n \
    \ var m2 = moment(date2);\n  return m.isSame(m2, 'second');\n};\n\nvar isSameWeek\
    \ = function(date1, date2, isThisWeek){\n  var m = moment(date1);\n  var m2 =\
    \ moment(date2);\n  var weeks = m.day('weeks');\n  if(isThisWeek){ // isThisWeek\
    \ defaults to true if no argument\n    weeks = m.day('isoWeek'); // if isThisWeek\
    \ not passed as argument, use default isoWeek\n  }\n  return m.isSame(m2, {weeks:\
    \ weeks});\n};\n\nvar isSameDay = function(date1, date2, isThisMonth){\n  var\
    \ m = moment(date1);\n  var m2 = moment(date2);\n  var month = m.month();\n  var\
    \ year = m.year();\n  var day = m.day();\n  if(isThisMonth){ // isThisMonth defaults\
    \ to true if no argument\n    month = m.month(); // if isThisMonth not passed\
    \ as argument, use default month\n  }\n  return m.isSame(m2, {months: month, years:\
    \ year, days: day});\n};\n\nvar isSameHour = function(date1, date2){\n  var m\
    \ = moment(date1);\n  var m2 = moment(date2);\n  return m.isSame(m2, 'hour');\n\
    };\n\nvar isSameMinute = function(date1, date2){\n  var m = moment(date1);\n \
    \ var m2 = moment(", "  var output = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(numbers[i] !== numbers[i-1] && numbers[i] !== numbers[i+1]){\n\
    \      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "    var\
    \ newArr = [];\n    \n    numbers.forEach(function(item){\n        if(newArr.indexOf(item)\
    \ === -1){\n            newArr.push(item);\n        }\n    });\n    \n    return\
    \ newArr;\n}\n", "  var output = [];\n  for(var i = 0, l = numbers.length; i <\
    \ l; i++){\n    if(output.indexOf(numbers[i]) === -1){\n      output.push(numbers[i]);\n\
    \    }\n  }\n  return output;\n}\n</code></pre>\n<p>Let&#39;s now see how we can\
    \ use <code>remove_duplicates</code> to solve our previous problem!</p>\n<div\
    \ class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode js\"><code class=\"\
    sourceCode javascript\"><a class=\"sourceLine\" id=\"cb38-1\" data-line-number=\"\
    1\"><span class=\"kw\">function</span> <span class=\"at\">remove_duplicates</span>(numbers)<span\
    \ class=\"op\">{</span></a>\n<a class=\"sourceLine\" id=\"cb38-2\" data-line-number=\"\
    2\">  <span class=\"co\">// Return the input if there are no duplicates </span></a>\n\
    <a class=\"sourceLine\" id=\"cb38-3\" data-line-number=\"3\">  <span class=\"\
    kw\">if</span> (<span class=\"va\">numbers</span>.<span class=\"at\">length</span>\
    \ <span class=\"op\">==</span> <span class=\"dv\">0</span>) <span class=\"kw\"\
    >return</span> <span class=\"va\">numbers</span>;</a>\n<a class=\"sourceLine\"\
    \ id=\"cb38-4\" data-line-number=\"4\">  <span class=\"co\">// Use remove_duplicates\
    \ to remove all duplicate elements </span></a>\n<a class=\"sourceLine\" id=\"\
    cb38-5\" data-line-number=\"5\">  <span class=\"va\">remove_duplicates</span>\
    \ = <span class=\"at\">remove_duplicates</span>(numbers)</a>\n<a class=\"sourceLine\"\
    \ id=\"cb38-6\" data-line-number=\"6\">  <span class=\"co\">// Return the result\
    \ if there are no elements left in numbers </span></a>\n<a class=\"sourceLine\"\
    \ id=\"cb38-7\" data-line-number=\"7\">  <span class=\"kw\">if</span> (<span class=\"\
    va\">numbers</span>.<span class=\"at\">length</span> <span class=\"op\">==</span>\
    \ <span class=\"dv\">0</span>) <span class=\"kw\">return</span> <span class=\"\
    va\">remove_duplicates</span>;</a>\n<a class=\"sourceLine\" id=\"cb38-8\" data-line-number=\"\
    8\">  <span class=\"co\">// Find all the elements in the array that are the same\
    \ </span></a>\n<a class=\"sourceLine\" id=\"cb38-9\" data-line-number=\"9\"> \
    \ <span class=\"kw\">var</span> duplicates = <span class=\"va\">remove_duplicates</span>.<span\
    \ class=\"at\">filter</span>(<span class=\"kw\">function</span>(n) <span class=\"\
    op\">{</span> <span class=\"co\">// Filter elements out of the array</span></a>\n\
    <a class=\"sourceLine\" id=\"cb38-10\" data-line-number=\"10\">    <span class=\"\
    kw\">return</span> <span class=\"va\">numbers</span>.<span class=\"at\">indexOf</span>(n)\
    \ <span class=\"op\">!==</span> <span class=\"dv\">-1</span>; });</a>\n<a class=\"\
    sourceLine\" id=\"cb38-11\" data-line-number=\"11\">  <span class=\"co\">// Return\
    \ array without duplicates</span></a>\n<a class=\"sourceLine\" id=\"cb38-12\"\
    \ data-line-number=\"12\">  <span class=\"co\">// If there are elements in the\
    \ duplicates array, then keep elements that occur ", "  var counter = {}, output\
    \ = [];\n  for(var i = 0, len = numbers.length; i < len; i++){\n    counter[numbers[i]]\
    \ = 1;\n  }\n  for(var num in counter){\n    if(counter.hasOwnProperty(num)){\n\
    \      output.push(num);\n    }\n  }\n  return output;\n}\n", "  numbers = numbers.sort();\n\
    \  numbers.forEach(function(e,i,a){\n    if (i>0 && numbers.lastIndexOf(e) ==\
    \ i)\n      numbers.splice(numbers.lastIndexOf(e),1)\n  });\n  return numbers;\n\
    }\n\n", "  var result = [];\n  var seen = {};\n  \n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    var number = numbers[i];\n    if (seen[number]){\n      continue;\n\
    \    }\n    \n    seen[number] = true;\n    result.push(number);\n  }\n  \n  return\
    \ result;\n}\n\nvar removeDuplicates_1 = remove_duplicates;\n", "\tvar output\
    \ = [];\n\tvar index = {};\n\tvar len = numbers.length;\n\tfor(var i = 0; i <\
    \ len; i++){\n\t\tif(index[numbers[i]] == null){\n\t\t\toutput.push(numbers[i]);\n\
    \t\t\tindex[numbers[i]] = 1;\n\t\t}else{\n\t\t\tindex[numbers[i]] += 1;\n\t\t\
    }\n\t}\n\treturn output;\n}", "\tvar output = [];\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\tif (!output.includes(numbers[i])){\n\t\t\toutput.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn output;\n}\n", "    var ret = [];\n    var seen = {};\n \
    \   for(var i = 0; i < numbers.length; i++){\n        if(seen[numbers[i]]) continue;\n\
    \        ret.push(numbers[i]);\n        seen[numbers[i]] = 1;\n    }\n    return\
    \ ret;\n}\n", "  var hash = {};\n  var result = [];\n  for(var i in numbers){\n\
    \    if(hash[numbers[i]]) continue;\n    hash[numbers[i]] = true;\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n};\n", "    var n = 0;\n    for(var i=0; i<numbers.length;\
    \ i++){\n        if(numbers[i] != numbers[n]){\n            numbers[n] = numbers[i];\n\
    \            n++;\n        }\n    }\n    return numbers.slice(0, n);\n}\n</code>\n\
    I hope this helps!\n<|/ a dscore=0 tags=javascript,algorithm |>\n<| a tags=javascript,algorithm\
    \ |>\nI think the most efficient way would be to keep an array sorted and use\
    \ a binary search to find duplicates. In Java it would be something like this.\n\
    <code>\npublic static int[] removeDuplicates(int[] arr) {\n    ArrayList<Integer>\
    \ arr = new ArrayList<Integer>(Arrays.asList(arr));\n    Collections.sort(arr);\n\
    \    int index = Collections.binarySearch(arr, (new Integer(arr[arr.length-1]));\n\
    \    while(index != -1){\n        arr.remove(index);\n        arr.add(index);\n\
    \        index = Collections.binarySearch(arr, (new Integer(arr[arr.length-1]));\n\
    \    }\n    return arr.toArray();\n}\n</code>\nThis works by using an ArrayList\
    \ to sort and binarySearch to find the first duplicate, removes it then searches\
    \ again until there are no more duplicates.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nA faster approach\nThe other answer does not take into account that the\
    \ arrays may be huge. The reason is that you always have to check every entry\
    \ in the array. You could optimize it by doing the following algorithm:\n\nSort\
    \ the array into ascending order.\nSearch for the first element of the array.\
    \ Compare it with the rest of the array. If they are equal, you know that the\
    \ element occurs once and you can discard it. Otherwise, you keep on comparing\
    \ the array until you find a second identical element. Repeat this process until\
    \ you run out of elements.\n\nHere is an implementation in Java:\n<code>\npublic\
    \ static int[] removeDuplicates(int[] arr) {\n    int len = arr.length;\n    Arrays.sort(arr);\n\
    \n    for (int i = 0; i < len; i++) {\n        for (int j = i + 1; j < len; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                arr[j] = 0;\n      \
    \          len--;\n            }\n        }\n    }\n\n    int[] result = new int[len];\n\
    \    for (int i = 0; i < len; i++)\n        result[i] = arr[i];\n\n    return\
    \ result;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| a |>\nI implemented\
    \ a simple approach, where I simply count the unique elements in the array. After\
    \ I sorted the array, I check the first element. If it is the same as my current\
    \ element, I skipped it. If it different I add the element to my array. After\
    \ that I just check the rest of the elements.\n<code>", "  var output = []\n \
    \ for(var i = 0; i < numbers.length; i++){\n    if(output.indexOf(numbers[i])\
    \ == -1) output.push(numbers[i])\n  }\n  return output\n}\n", "    var counts\
    \ = {};\n    var filtered_numbers = numbers.filter(function(elem){\n        counts[elem]\
    \ = counts[elem]||0;\n        if(counts[elem] > 1){\n            return false;\n\
    \        }\n        counts[elem]++;\n        return true;\n    });\n    return\
    \ filtered_numbers;\n}\n", "  var output = [];\n  var hash = {};\n  \n  for(var\
    \ i = 0; i < numbers.length; i++){\n    var numString = numbers[i];\n    if(hash[numString]\
    \ === undefined){\n      output.push(numString);\n    }\n    hash[numString] =\
    \ 1;\n  }\n\n  return output;\n}\n</code>\n<|/ a |>\n<| c |>\nYour code is working\
    \ but there is one problem,it removes the numbers which have same occurrence.\
    \ Like in [1,10,3,2,4,5] it removes 3 and 2 which have same occurrence.\n<|/ c\
    \ |>\n<| a |>\nIf you just want to remove the duplicates, you can use array.filter\
    \ \n<code>\nvar nums = [1, 2, 3, 2, 4];\nvar uniqNums = nums.filter((e, i, a)\
    \ => a.indexOf(e) === i);", "  var output = [];\n  var seen   = {};\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    var num = numbers[i];\n    if(seen[num]\
    \ === true){\n      continue;\n    }\n    seen[num] = true;\n    output.push(num);\n\
    \  }\n  return output;\n}\n", "  const arr = [];\n  numbers.forEach(number =>\
    \ {\n    if (arr.indexOf(number) === -1) {\n      arr.push(number);\n    }\n \
    \ });\n  return arr;\n}\n", "    var output = [];\n    var seen = {};\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(seen[numbers[i]]){\n          \
    \  continue;\n        }\n        seen[numbers[i]] = true;\n        output.push(numbers[i]);\n\
    \    }\n    return output;\n}\n", "\tvar results = [];\n\tvar seen = {};\n\tvar\
    \ i, l;\n\n\tfor(i = 0, l = numbers.length; i < l; i++){\n\t\tvar num = numbers[i];\n\
    \t\tif(!seen[num]){\n\t\t\tseen[num] = true;\n\t\t\tresults.push(num);\n\t\t}\n\
    \t}\n\n\treturn results;\n}\n\n", "  const set = new Set(numbers);\n  return [...set];\n\
    }\n", "\tif(!Array.isArray(numbers)) throw new Error('remove_duplicates: numbers\
    \ need to be an array.');\n\tnumbers.sort(function(a, b){return a-b});\n\tlet\
    \ result = [];\n\tlet found = {};\n\tfor(let i = 0; i < numbers.length; i++){\n\
    \t\tif(found[numbers[i]]) continue;\n\t\tfound[numbers[i]] = true;\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "\tvar result = [];\n\tvar len = numbers.length;\n\
    \tfor(var i=0; i<len; i+=1){\n\t\tvar val = numbers[i];\n\t\tif(!result.includes(val)){\n\
    \t\t\tresult.push(val);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var i, n, seen\
    \ = [], out = [];\n  for(i = 0, n = numbers.length; i < n; i++){\n    if (seen.indexOf(numbers[i])\
    \ < 0){\n      seen.push(numbers[i]);\n      out.push( numbers[i] );\n    }\n\
    \  }\n  return out;\n}\n", "  var result = [];\n  var seen = [];\n\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(seen.indexOf(numbers[i]) == -1){\n\
    \      seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "    var output = [];\n    var seen = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        seen.push(numbers[i]);\n    }\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(seen.indexOf(numbers[i]) == -1){\n\
    \            output.push(numbers[i]);\n        }\n    }\n    return output;\n}",
  "  var result = [];\n  for(var i = 0, l = numbers.length; i < l; i++){\n    var\
    \ j = result.indexOf(numbers[i]);\n    if(j > -1){\n      result.splice(j, 1);\n\
    \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "\tvar output = [];\n\tnumbers.forEach(function(num){ \n\t\tif(output.indexOf(num)<0){\n\
    \t\t\toutput.push(num);\n\t\t}\n\t});\n\treturn output;\n}\n", "  var results\
    \ = [];\n  var seen = [];\n  for(var i = 0, len = numbers.length; i < len; i++)\
    \ {\n    if(seen.indexOf(numbers[i]) !== -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n\
    \    results.push(numbers[i]);\n  }\n  return results;\n}\n", "  var i, j, k;\n\
    \n  numbers = numbers.slice(0);\n  numbers.sort();\n\n  // Iterate through all\
    \ pairs of numbers, skipping any that have\n  // already been seen\n  for(i =\
    \ 1; i < numbers.length; i++){\n    j = i - 1;\n    k = i;\n    while(j >= 0){\n\
    \      if(numbers[j] === numbers[k]){\n        // Swap the two\n        numbers[j]\
    \ = numbers[j + 1];\n        numbers[j + 1] = numbers[k];\n        // And leave\
    \ the k/v entry as is\n        k = j;\n      }\n      j--;\n    }\n  }\n  return\
    \ numbers;\n}\n", "    var i = numbers.length;\n    while(i--){\n        var j\
    \ = numbers[i];\n        if(numbers.indexOf(j) > -1){\n            numbers.splice(numbers.indexOf(j),\
    \ 1);\n        }\n    }\n    return numbers;\n}", "  let unique = [...new Set(numbers)];\n\
    \  return unique;\n}\n\n", "\tnumbers = toList(numbers);\n\tnumbers = remove_duplicates_(numbers);\n\
    \treturn remove_duplicates_(numbers);\n}", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    var index = result.indexOf(number);\n    if(index > -1){\n      result.splice(index,\
    \ 1);\n    } else {\n      result.push(number);\n    }\n  });\n  return result;\n\
    }\n", "    var newArray = [];\n    for (var i = 0; i < numbers.length; i++) {\n\
    \        if(newArray.indexOf(numbers[i]) == -1) {\n            newArray.push(numbers[i]);\n\
    \        }\n    }\n    return newArray;\n}\n", "    var obj = {};\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n        if(obj[num])\n\
    \            numbers = numbers.slice(0,i).concat(numbers.slice(i+1));\n      \
    \  else\n            obj[num] = true;\n    }\n    return numbers;\n}\n", "  var\
    \ hash = {};\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n\
    \    if(hash[numbers[i]] === undefined){\n      hash[numbers[i]] = true;\n   \
    \   result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=arrays,sorting,javascript |>\n<code>", "\tvar seen =\
    \ {};\n\tvar unique = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    var num = numbers[i];\n\t\tif(seen[num]){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t\
    seen[num] = true;\n\t\tunique.push(num);\n\t}\n\t\n\treturn unique;\n}\n", "\t\
    var output = [];\n\tvar seen = {};\n\tfor (var i = 0; i < numbers.length; i++){\n\
    \t\tvar num = numbers[i];\n\t\tif (seen.hasOwnProperty(num)) {\n\t\t\tcontinue;\n\
    \t\t} else {\n\t\t\tseen.hasOwnProperty(num) || output.push(num);\n\t\t}\n\t}\n\
    \treturn output;\n}\n\n", "  let newArray = []\n  for(let i = numbers.length -\
    \ 1; i >= 0; i--){\n    if(numbers.indexOf(newArray[i]) === -1){\n      newArray.push(numbers[i])\n\
    \    }\n  }\n  return newArray\n}\n", "   var output = [];\n   for(var i=0, len=numbers.length;\
    \ i < len; i++){\n      var number = numbers[i];\n      if(output.indexOf(number)\
    \ == -1) output.push(number);\n   }\n   return output;\n}\n</code>\n<|/ a dscore=0\
    \ tags=arrays,javascript,sorting |>\n<| a tags=arrays,javascript,sorting dscore=0\
    \ |>\n<code>\nvar array = [1, 2, 3, 2, 4, 4, 4, 3, 2, 3, 4, 2, 3, 4, 4];\n", "\t\
    var new_numbers = [];\n\tvar seen = [];\n\tfor (var i=0;i<numbers.length;i++){\n\
    \t\tif (seen.indexOf(numbers[i]) == -1){\n\t\t\tnew_numbers.push(numbers[i]);\n\
    \t\t\tseen.push(numbers[i]);\n\t\t}\n\t}\n\treturn new_numbers;\n}\n", "\tvar\
    \ sorted_numbers=numbers.sort();\n\tvar uniques={};\n\tfor(var i=0;i<sorted_numbers.length;i++){\n\
    \t\tuniques[sorted_numbers[i]]=true;\n\t}\n\treturn sorted_numbers.filter(function(number){\n\
    \t\treturn !uniques[number];\n\t});\n}\n", "    var output = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) > -1)\
    \ output.push(numbers[i]);\n    }\n    return output;\n}\n", "  var result = [];\n\
    \  for(var i = 0, len = numbers.length; i < len; i++){\n    var num = numbers[i];\n\
    \    if(result.indexOf(num) === -1){\n      result.push(num);\n    }\n  }\n  return\
    \ result;\n}\n", "  var result = [];\n  var hash = {};\n  for(var i=0, l=numbers.length;\
    \ i < l; i++){\n    hash[numbers[i]] = 1;\n  }\n  for(i=0, l=numbers.length; i\
    \ < l; i++){\n    if(hash[numbers[i]]) result.push(numbers[i]);\n  }\n  return\
    \ result;\n}\n", "\tlet obj = {}\n\tfor(let i = 0; i < numbers.length; i++)\n\t\
    \tif(!obj[numbers[i]])\n\t\t\tobj[numbers[i]] = true\n\tlet arr = []\n\tfor(let\
    \ key in obj) {\n\t\tarr.push(key)\n\t}\n\treturn arr\n}\n\n", "   let noRepetitions\
    \ = {};\n   numbers.forEach(function(number){\n      if(noRepetitions[number]\
    \ === undefined){\n         noRepetitions[number] = true;\n      }\n   });\n \
    \  return Object.keys(noRepetitions);\n}", "  var result = [];\n  for (var i =\
    \ 0; i < numbers.length; i++){\n    if (numbers.indexOf(numbers[i]) == i){\n \
    \     result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n", "  var unique\
    \ = unique_arr(numbers);\n  return unique_arr(unique);\n}\n", "  return _.reduce(numbers,\
    \ function(memo, num){\n    if (memo.indexOf(num) < 0){\n      memo.push(num);\n\
    \    }\n    return memo;\n  }, []);\n}\n", "  numbers = numbers.slice();\n  for(var\
    \ i=numbers.length-1; i>=0; i--){\n    var num = numbers[i];\n    for(var j=i+1;\
    \ j < numbers.length; j++){\n      if(num === numbers[j]){\n        numbers.splice(j,\
    \ 1);\n      }\n    }\n  }\n  return numbers;\n}\n", "  var new_array = [];\n\
    \  for (var i = 0; i < numbers.length; i++) {\n    if (new_array.indexOf(numbers[i])\
    \ < 0) {\n      new_array.push(numbers[i]);\n    }\n  }\n  return new_array;\n\
    }", "    var output = [];\n    numbers.forEach(function(number){\n        if (output.indexOf(number)===-1){\n\
    \            output.push(number);\n        }\n    });\n    return output;\n}\n",
  "  var uniques = [];\n  var seen = {};\n  var length = 0;\n  for(var i=0, length\
    \ = numbers.length; i < length; i++){\n    var current = numbers[i];\n    if(seen[current]){\n\
    \      continue;\n    }\n    seen[current] = true;\n    uniques.push(current);\n\
    \  }\n  return uniques;\n}", "\tlet set = new Set();\n\tfor(let num of numbers){\n\
    \t\tif(set.has(num)){\n\t\t\tset.delete(num);\n\t\t}else{\n\t\t\tset.add(num);\n\
    \t\t}\n\t}\n\treturn Array.from(set);\n}\n", "  let output = [];\n  for (let i\
    \ = 0; i < numbers.length; i++){\n    if (numbers.indexOf(numbers[i]) === i){\n\
    \      continue;\n    }\n    output.push(numbers[i]);\n  }\n  return output;\n\
    }\n", "  var counts = {};\n  for(var i = 0; i < numbers.length; i++){\n    counts[numbers[i]]\
    \ = (i in counts ? counts[i] : 0);\n  }\n  var unique = [];\n  for(var key in\
    \ counts){\n    if(counts[key] > 1){\n      unique.push(Number(key));\n    }\n\
    \  }\n  return unique;\n}\n", "    var i, j, k, tmp, num;\n    var out = [];\n\
    \    for(i = 0; i < numbers.length; i++){\n        for(j = i + 1; j < numbers.length;\
    \ j++){\n            if(numbers[i] === numbers[j]){\n                tmp = numbers.slice(i,\
    \ j+1);\n                for(k = i - 1; k > j; k--){\n                    numbers[k\
    \ - 1] = tmp[k];\n                }\n                for(k = i + 1; k > j + 1;\
    \ k++){\n                    numbers[k - 1] = tmp[k];\n                }\n   \
    \             j = k - 1;\n            }\n        }\n    }\n    for(i = numbers.length\
    \ - 1; i >= 0; i--){\n        num = numbers[i];\n        if(out.indexOf(num) ===\
    \ -1){\n            out.push(num);\n        }\n    }\n    return out;\n}\n", "\t\
    var new_arr = [];\n\tfor(var i = 0; i < numbers.length; i++)\n\t\tfor(var j =\
    \ i+1; j < numbers.length; j++)\n\t\t\tif(numbers[i] === numbers[j])\n\t\t\t\t\
    new_arr.push(numbers[i]);\n\treturn new_arr;\n}\n", "\tlet sorted_numbers = numbers.sort((a,b)\
    \ => a - b);\n\tlet last_value = sorted_numbers[0];\n\tlet result = [];\n\tfor(let\
    \ i = 1; i < sorted_numbers.length; i++){\n\t\tif(sorted_numbers[i] != last_value){\n\
    \t\t\tresult.push(last_value);\n\t\t\tlast_value = sorted_numbers[i];\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "\tvar numbers_hash = {};\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar n = numbers[i];\n\t\tif (!numbers_hash[n]){\n\t\t\tnumbers_hash[n]\
    \ = true;\n\t\t} else {\n\t\t\tfor(var j = i; j > 0; j--){\n\t\t\t\tif (numbers[j]\
    \ === n){\n\t\t\t\t\tnumbers.splice(j, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn numbers;\n}\n", "  return numbers.filter(function(elem,\
    \ index, self) {\n    return self.indexOf(elem) == index;\n  });\n}\n", "  var\
    \ o = {};\n  var uniques = [];\n\n  for(var i = 0; i < numbers.length; i++){\n\
    \    uniques.push(numbers[i]);\n  }\n\n  for(var j=0; j<numbers.length; j++){\n\
    \    if(!numbers[j] in o){\n      o[numbers[j]] = true;\n    }else{\n      delete\
    \ o[numbers[j]];\n    }\n  }\n  var uniquesArray = [];\n  for(var key in o){\n\
    \    uniquesArray.push(key);\n  }\n  return uniquesArray;\n}\n</code>\n<|/ a tags=sorting,javascript,arrays\
    \ |>\n<| c |>\nOk this seems like the best solution for most cases. But in my\
    \ case I have an array that includes strings as well as integers. How can I make\
    \ that array into a new array without the duplicates?\n<|/ c |>\n<| c |>\nThank\
    \ you so much for the help. I ended up using something similar to what you posted.\
    \ Will I be able to keep my strings and integers in the original array and have\
    \ them move to the new array with the only change being the integers being sorted\
    \ and strings left alone?\n<|/ c |>\n<| c |>\nThanks again for the help. I ended\
    \ up using something similar to what you posted. Will I be able to keep my strings\
    \ and integers in the original array and have them move to the new array with\
    \ the only change being the integers being sorted and strings left alone?\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nvar arr = [1,3,4,5,4,3,2,5,4,4,2];", "  var\
    \ output = [];\n  var seen = {};\n  for (var i = 0; i < numbers.length; i++) {\n\
    \    var key = numbers[i];\n    if (seen.hasOwnProperty(key)) {\n      continue;\n\
    \    }\n    seen[key] = 1;\n    output.push(key);\n  }\n  return output;\n}\n\
    */\n\nvar hashCode = function(string) {\n  var hash = 0,\n      i,\n      chr;\n\
    \  if (string.length === 0) return hash;\n  for (i = 0; i < string.length; i++)\
    \ {\n    chr = string.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n\
    \    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n};\n\nvar objectToString\
    \ = function(obj) {\n  var seen = [];\n  return JSON.stringify(obj, function(key,\
    \ val) {\n    val = JSON.stringify(val);\n    if (seen.indexOf(val) >= 0) return\
    \ \"[Circular]\";\n    seen.push(val);\n    return val;\n  });\n};\n\n", "   \
    \ return _.filter(_.uniq(numbers), function(elem, index, arr){\n        return\
    \ index == arr.indexOf(elem);\n    });\n}\n", "  var hash = {}; //Hash table for\
    \ looking up each of the unique values.\n  var uniques = []; //Array to contain\
    \ each of the unique values.\n  for(var i = 0; i < numbers.length; i++){\n   \
    \ if(hash.hasOwnProperty(numbers[i])){\n      hash[numbers[i]] += 1;\n    } else\
    \ {\n      hash[numbers[i]] = 1;\n      uniques.push(numbers[i]);\n    }\n  }\n\
    \  return uniques;\n}\n</code>\n<|/ a |>\n<| c |>\nI don't see how this answers\
    \ the question. Your code doesn't take into account the fact that there might\
    \ not be any duplicates.\n<|/ c |>\n<| c |>\nIt does take into account the fact\
    \ that there might not be any duplicates. It's a solution for that problem: there\
    \ are no duplicates in the original array. The only thing that could possibly\
    \ be a problem is if the original array contained duplicates that weren't in the\
    \ input array.\n<|/ c |>\n<| c |>\nI guess I should clarify. The original array\
    \ could have duplicates in it, but there might not be duplicates in the input\
    \ array.\n<|/ c |>\n<| c |>\nThe code doesn't have any \"duplication\". It's just\
    \ removing duplicate values.\n<|/ c |>\n<| c |>\nOh, I thought you meant that\
    \ there are duplicates in the input array. I'm confused. Oh well, just use my\
    \ solution :)\n<|/ c |>\n<| a tags=javascript,arrays,unique |>\nJust a little\
    \ bit of maths:\n<code>", "  var output = [];\n  numbers.forEach(function(item)\
    \ {\n    var match = output.indexOf(item);\n    if(match > -1){\n      output.splice(match,\
    \ 1);\n    } else {\n      output.push(item);\n    }\n  });\n  return output;\n\
    }\n", "  var output = [];\n  \n  for(var i = 0; i < numbers.length; i++){\n  \
    \  if(output.indexOf(numbers[i]) == -1){\n      output.push(numbers[i]);\n   \
    \ }\n  }\n  \n  return output;\n}\n</cell>\n<cell>\nremove_duplicates([1, 2, 3,\
    \ 2, 4])\n</cell>\n<cell>", "\tvar seen = [];\n\tnumbers.forEach(function(val){\n\
    \t\tif (seen.indexOf(val) == -1) seen.push(val);\n\t});\n\treturn seen.slice();\n\
    }\n\n", "  var set = new Set()\n  var filteredNumbers = []\n  numbers.forEach(function(number){\n\
    \    if(!set.has(number)){\n      filteredNumbers.push(number)\n      set.add(number)\n\
    \    }\n  })\n  return filteredNumbers\n}\n\n", "  var ns = numbers.map(Number);\n\
    \  var counts = {};\n  var i, n;\n  var len = ns.length;\n  for (i=0; i<len; i++)\
    \ {\n    n = ns[i];\n    if (counts[n] === undefined) counts[n] = 0;\n    counts[n]++;\n\
    \  }\n  var result = [];\n  for (i in counts) {\n    if (counts.hasOwnProperty(i)\
    \ && counts[i] == len) result.push(i);\n  }\n  return result;\n};\n", "  var result\
    \ = []\n  numbers.forEach(function(num){\n    if(result.indexOf(num) < 0){\n \
    \     result.push(num)\n    }\n  })\n  return result\n}\n", "    var result =\
    \ [];\n    numbers = numbers.sort(function(a,b){\n        return a - b;\n    });\n\
    \    for(var i=0; i<numbers.length; i++){\n        if(result.indexOf(numbers[i])\
    \ > -1){\n            continue;\n        }\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n", "  var counter = {};\n  return numbers.filter(function(num){\n\
    \    return (counter[num] ? false : (counter[num] = 1));\n  });\n}\n", "  var\
    \ nums = numbers.slice(0);\n  var length = nums.length;\n  \n  if(length === 0)\
    \ return [];\n\n  for(var i = 1; i < length; i++){\n    if(nums.indexOf(nums[i])\
    \ > -1){\n      nums.splice(nums.indexOf(nums[i]), 1);\n    }\n  }\n\n  return\
    \ nums;\n}\n", "  var sorted_numbers = numbers.slice().sort();\n  var unique =\
    \ [];\n  for (var i = 0; i < sorted_numbers.length; i++){\n    if (unique.indexOf(sorted_numbers[i])\
    \ == -1){\n      unique.push(sorted_numbers[i]);\n    }\n  }\n  return unique;\n\
    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nYou cannot use .slice in\
    \ this case. Because slice is creating a new array, not the one you want to work\
    \ with.\n<|/ c |>\n<| a tags=javascript,arrays |>\nThe simplest thing I can think\
    \ of is sorting it then removing the duplicates.\n<code>\nvar arr = [5, 2, 2,\
    \ 4, 1, 6, 5, 7, 3, 7];\n\narr.sort(); \n\nvar arr2 = [];\nfor (var i = 1; i <\
    \ arr.length; i++) {\n    if (arr[i-1] != arr[i]) {\n        arr2.push(arr[i-1]);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar arr = [5,\
    \ 2, 2, 4, 1, 6, 5, 7, 3, 7];\narr = arr.sort(); //or arr.sort(function(a,b) {\
    \ return a-b; });\n\nvar arr2 = [];\nfor (var i = 1; i < arr.length; i++) {\n\
    \    if (arr[i-1] != arr[i]) {\n        arr2.push(arr[i-1]);\n    }\n}\n</code>\n\
    <|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\nA simple solution\
    \ is to use the sort function:\n<code>\nvar arr = [5, 2, 2, 4, 1, 6, 5, 7, 3,\
    \ 7];\n\nvar arr2 = arr.sort();\n\nvar arr3 = [];\nfor(var i in arr2){\n    if(arr3.indexOf(arr2[i])\
    \ == -1){\n        arr3.push(arr2[i]);\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question (`removeDuplicates`), it merely makes\
    \ it possible to sort the array and then remove the duplicates (`arr3`).\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "  var seen = [];\n  numbers.map(function(num){\n\
    \    if (seen.indexOf(num) == -1){\n      seen.push(num);\n    }\n  });\n  return\
    \ seen;\n}", "  var newArray = [];\n  var numberCount = {};\n  for(var i = 0;\
    \ i < numbers.length; i++){\n    if (numberCount[numbers[i]]) {\n      newArray.push(numbers[i]);\n\
    \    }else{\n      numberCount[numbers[i]] = 1;\n    }\n  }\n  return newArray;\n\
    }", "    var results = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(seen.hasOwnProperty(numbers[i])){\n            delete seen[numbers[i]];\n\
    \            continue;\n        }\n        results.push(numbers[i]);\n       \
    \ seen[numbers[i]] = 1;\n    }\n    return results;\n}\n", "  var result = [];\n\
    \  numbers.forEach(function(val){\n    if(result.indexOf(val) >= 0){\n      return;\n\
    \    }\n    result.push(val);\n  });\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
