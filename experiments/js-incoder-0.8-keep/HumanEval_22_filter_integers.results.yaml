name: HumanEval_22_filter_integers
language: js
results:
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === 'number' && isFinite(value)\n  })\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmphwfr4sk2.js:19:10)\n    at Object.<anonymous> (/tmp/tmphwfr4sk2.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var intValues = values.filter(function(val){\n\
    \    return typeof val===\"number\" && isFinite(val);\n  });\n  return intValues;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp14h5w2bb.js:20:10)\n    at Object.<anonymous> (/tmp/tmp14h5w2bb.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => {\n\
    \    return typeof value === 'number' && isFinite(value);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpw1mgap4g.js:18:10)\n    at Object.<anonymous> (/tmp/tmpw1mgap4g.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(isInteger);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5h3kdqvq.js:7\n  return values.filter(isInteger);\n           \
    \            ^\n\nReferenceError: isInteger is not defined\n    at filter_integers\
    \ (/tmp/tmp5h3kdqvq.js:7:24)\n    at test (/tmp/tmp5h3kdqvq.js:14:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp5h3kdqvq.js:19:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    values = filter(values, function(x){\n\
    \        return typeof x === 'number' && !isNaN(x) && isFinite(x);\n    });\n\
    \    return values;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfitzwqns.js:7\n    values = filter(values, function(x){\n    ^\n\
    \nReferenceError: filter is not defined\n    at filter_integers (/tmp/tmpfitzwqns.js:7:5)\n\
    \    at test (/tmp/tmpfitzwqns.js:18:20)\n    at Object.<anonymous> (/tmp/tmpfitzwqns.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(item){\n\
    \t\treturn typeof item == 'number' && isFinite(item);\n\t});\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpzo0tffdl.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzo0tffdl.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return typeof value === 'number' && isFinite(value)\n    })\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp042kmivp.js:18:10)\n    at Object.<anonymous> (/tmp/tmp042kmivp.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return (typeof value === 'number') && isInteger(value);\n    });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppm1tbxbx.js:8\n        return (typeof value === 'number') && isInteger(value);\n\
    \                             ^\n\nReferenceError: isInteger is not defined\n\
    \    at /tmp/tmppm1tbxbx.js:8:30\n    at Array.filter (<anonymous>)\n    at filter_integers\
    \ (/tmp/tmppm1tbxbx.js:7:19)\n    at test (/tmp/tmppm1tbxbx.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmppm1tbxbx.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    return isInteger(val); \n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8nymg_c2.js:8\n    return isInteger(val); \n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmp8nymg_c2.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmp8nymg_c2.js:7:17)\n    at test\
    \ (/tmp/tmp8nymg_c2.js:18:20)\n    at Object.<anonymous> (/tmp/tmp8nymg_c2.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (item){\n\
    \    return typeof item === 'number' && isInteger(item);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0e37q4vw.js:8\n    return typeof item === 'number' && isInteger(item);\n\
    \                       ^\n\nReferenceError: isInteger is not defined\n    at\
    \ /tmp/tmp0e37q4vw.js:8:24\n    at Array.filter (<anonymous>)\n    at filter_integers\
    \ (/tmp/tmp0e37q4vw.js:7:17)\n    at test (/tmp/tmp0e37q4vw.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0e37q4vw.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0, len = values.length; i < len; i++){\n    if(isInteger(values[i])){\n  \
    \    filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp480an7wz.js:9\n    if(isInteger(values[i])){\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at filter_integers (/tmp/tmp480an7wz.js:9:5)\n\
    \    at test (/tmp/tmp480an7wz.js:22:20)\n    at Object.<anonymous> (/tmp/tmp480an7wz.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values\n        .filter(function(n){\n\
    \            return typeof n === 'number' && n % 1 === 0;\n        });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return _.isNumber(value) && value % 1 === 0;\n  });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkjn1_em_.js:8\n    return _.isNumber(value) && value % 1 === 0;\n\
    \    ^\n\nReferenceError: _ is not defined\n    at /tmp/tmpkjn1_em_.js:8:5\n \
    \   at Array.filter (<anonymous>)\n    at filter_integers (/tmp/tmpkjn1_em_.js:7:17)\n\
    \    at test (/tmp/tmpkjn1_em_.js:18:20)\n    at Object.<anonymous> (/tmp/tmpkjn1_em_.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(x){\
    \ return (typeof x === 'number') ? !isNaN(x) : null })\n}\n</code>\nThis filter_integers\
    \ function just checks if value is a number or not. If not, we return null, which\
    \ means this item is not included into filtered list. \nThen, you need to filter\
    \ and sort the filtered array by the key you need:\n<code>\nvar filtered = filter(data,\
    \ function(x) { return x[key] === searchValue; }).sort(function(a, b){ \n  return\
    \ a[orderBy] - b[orderBy]\n})\n</code>\nIt would be better to refactor the above\
    \ code to have a function which would return sorted array, and accept a key name.\
    \ This way, you would be able to do like this:\n<code>\nvar sorted = sort_array(data,\
    \ searchKey, orderBy)\n</code>\n<|/ a tags=javascript,arrays,multidimensional-array\
    \ dscore=1 |>\n<| c |>\nI do need to order by the 'rating' key. I actually do\
    \ have a function that gets the sorted array already with your code.\n<|/ c |>\n\
    <| c |>\nOkay, but you haven't mentioned about sorting in question. Anyway, I've\
    \ updated my answer with sorting by rating key, please check!\n<|/ c |>\n<| c\
    \ |>\nYes, I did mention that. My bad. I forgot to mention that I have to order\
    \ by the 'rating' key. I will edit my question to reflect this.\n<|/ c |>\n<|\
    \ c |>\nI've updated my answer with sorting by rating key, please check!\n<|/\
    \ c |>\n<| c |>\nI actually used the filter function to filter the unwanted data\
    \ then sorted it with the sort_array function. Thanks for your help and your time!\n\
    <|/ c |>\n<| a dscore=0 |>\nIt looks like you're looking for the JavaScript filter\
    \ function, which filters an array for only those elements where the function\
    \ returns true. \n<code>\nvar newArray = data.filter(function(val){\n   //Only\
    \ return if val.rating is > 3\n   return val.rating > 3;\n})\n</code>\n<|/ a tags=javascript,arrays,multidimensional-array\
    \ |>\n<| c |>\nI do need to filter the data by the 'rating' key. The 'rating'\
    \ key can have values greater than 3, but some values will have values like -5,\
    \ -6, and so on.\n<|/ c |>\n<| a tags=javascript,arrays,multidimensional-array\
    \ dscore=0 |>\nI believe this would work:\n<code>\ndata.filter(function(item){\n\
    \  return item.rating > 3;\n}).sort(function(a, b){\n  return a.rating - b.\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf5eyhb2h.js:9\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return !isInteger(value);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplywdu3sj.js:8\n    return !isInteger(value);\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmplywdu3sj.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmplywdu3sj.js:7:17)\n    at test\
    \ (/tmp/tmplywdu3sj.js:18:20)\n    at Object.<anonymous> (/tmp/tmplywdu3sj.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value)\
    \ {\n        var valid = (value === undefined || value === null);\n\n        return\
    \ (valid && typeof value === \"number\" && !isNaN(value));\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 4, 9 ]\n    at test\
    \ (/tmp/tmpklggr40r.js:20:10)\n    at Object.<anonymous> (/tmp/tmpklggr40r.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof(value) === 'number'\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp21l75fzy.js:18:10)\n    at Object.<anonymous> (/tmp/tmp21l75fzy.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  const ints = [];\n  for(let i =\
    \ 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n      ints.push(values[i]);\n\
    \    }\n  }\n  return ints;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp95pqohy8.js:22:10)\n    at Object.<anonymous> (/tmp/tmp95pqohy8.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\
    \ return !isNaN(value); });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 23.2, 9 ]\n\nshould equal\n\n[\
    \ 4, 9 ]\n    at test (/tmp/tmpp6i3ru2a.js:16:10)\n    at Object.<anonymous> (/tmp/tmpp6i3ru2a.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return typeof v === 'number' && !isNaN(v);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp42dpmyg_.js:18:10)\n    at Object.<anonymous> (/tmp/tmp42dpmyg_.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn _(filter([_.isInteger], values)).value()\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7en_93in.js:7\n\treturn _(filter([_.isInteger], values)).value()\n\
    \t^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp7en_93in.js:7:2)\n\
    \    at test (/tmp/tmp7en_93in.js:15:20)\n    at Object.<anonymous> (/tmp/tmp7en_93in.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i=0,\
    \ len = values.length; i < len; i++){\n    if(typeof(values[i]) != 'number') continue;\n\
    \    filtered.push(values[i]);\n  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp_hj3zqul.js:21:10)\n    at Object.<anonymous> (/tmp/tmp_hj3zqul.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var integers = []\n  for (var i\
    \ = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n \
    \     integers.push(values[i])\n    }\n  }\n  return integers\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpevoodm2p.js:22:10)\n    at Object.<anonymous> (/tmp/tmpevoodm2p.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    return typeof val === 'number' && !isNaN(val);\n  });\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpnyd43rfx.js:19:10)\n    at Object.<anonymous> (/tmp/tmpnyd43rfx.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return _.isNumber(value) && !_.isNaN(value)\n    })\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplgwoa9n7.js:8\n        return _.isNumber(value) && !_.isNaN(value)\n\
    \        ^\n\nReferenceError: _ is not defined\n    at /tmp/tmplgwoa9n7.js:8:9\n\
    \    at Array.filter (<anonymous>)\n    at filter_integers (/tmp/tmplgwoa9n7.js:7:19)\n\
    \    at test (/tmp/tmplgwoa9n7.js:18:20)\n    at Object.<anonymous> (/tmp/tmplgwoa9n7.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(v => Number.isInteger(v))\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return typeof value === 'number' && !isNaN(value) && isFinite(value)\n\
    \    })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpixyvbgg1.js:18:10)\n    at Object.<anonymous> (/tmp/tmpixyvbgg1.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    let ints = [];\n    for(let value\
    \ of values){\n        if(isNaN(value)){\n            continue;\n        }\n \
    \       if(typeof(value)==='number'){\n            ints.push(value);\n       \
    \ }\n    }\n    return ints;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmppit65m34.js:25:10)\n    at Object.<anonymous> (/tmp/tmppit65m34.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i=0;\
    \ i < values.length; i++){\n    if(typeof values[i] === \"number\")\n      filtered.push(values[i]);\n\
    \  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpt_58pjvo.js:21:10)\n    at Object.<anonymous> (/tmp/tmpt_58pjvo.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return _.filter(_.compact(_.castArray(values)),\
    \ _.isInteger);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe72whmg0.js:7\n  return _.filter(_.compact(_.castArray(values)),\
    \ _.isInteger);\n  ^\n\nReferenceError: _ is not defined\n    at filter_integers\
    \ (/tmp/tmpe72whmg0.js:7:3)\n    at test (/tmp/tmpe72whmg0.js:15:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpe72whmg0.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  let output = [];\n  for(let i =\
    \ 0, len = values.length; i < len; i++){\n    if (typeof(values[i]) === \"number\"\
    ) output.push(values[i]);\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpvzfb9v4c.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvzfb9v4c.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar integers = [];\n\tfor (var i\
    \ = 0; i < values.length; i++){\n\t\tvar value = get(values[i]);\n\t\tif (isInteger(value))\n\
    \t\t\tintegers.push(value);\n\t}\n\treturn integers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5hb0n67a.js:9\n\t\tvar value = get(values[i]);\n\t\t          \
    \  ^\n\nReferenceError: get is not defined\n    at filter_integers (/tmp/tmp5hb0n67a.js:9:15)\n\
    \    at test (/tmp/tmp5hb0n67a.js:22:20)\n    at Object.<anonymous> (/tmp/tmp5hb0n67a.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  const out = [];\n  for(let i = 0;\
    \ i < values.length; i++){\n    if(!(values[i] in INTEGERS)){\n      out.push(values[i]);\n\
    \    }\n  }\n  return out;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr3bc7vm4.js:9\n    if(!(values[i] in INTEGERS)){\n            \
    \          ^\n\nReferenceError: INTEGERS is not defined\n    at filter_integers\
    \ (/tmp/tmpr3bc7vm4.js:9:23)\n    at test (/tmp/tmpr3bc7vm4.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpr3bc7vm4.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var output = [];\n  for(var i =\
    \ 0, len = values.length; i < len; i++){\n    if(typeof values[i] === 'number'){\n\
    \      output.push(values[i]);\n    }\n  }\n  return output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmps55nnh6a.js:22:10)\n    at Object.<anonymous> (/tmp/tmps55nnh6a.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  values = _.filter(values, function(x){\n\
    \    return x % 1 === 0;\n  });\n  return values.length ? values : false;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5101c5ix.js:7\n  values = _.filter(values, function(x){\n  ^\n\n\
    ReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp5101c5ix.js:7:3)\n\
    \    at test (/tmp/tmp5101c5ix.js:18:20)\n    at Object.<anonymous> (/tmp/tmp5101c5ix.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function\
    \ (value) {\n        return typeof value == 'number';\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp158g7coz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp158g7coz.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn _.filter(values, function(x){\n\
    \t\treturn _.isInteger(x);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8pjjudu7.js:7\n\treturn _.filter(values, function(x){\n\t^\n\n\
    ReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp8pjjudu7.js:7:2)\n\
    \    at test (/tmp/tmp8pjjudu7.js:17:20)\n    at Object.<anonymous> (/tmp/tmp8pjjudu7.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === 'number' && !isNaN(value)\n  })\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp9ltq1iyz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp9ltq1iyz.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(item){\n\
    \        return typeof item === 'number' && !isNaN(item);\n    });\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp7e0gr06h.js:19:10)\n    at Object.<anonymous> (/tmp/tmp7e0gr06h.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(x){\n\
    \t\treturn isInteger(x);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt4l13zvn.js:8\n\t\treturn isInteger(x);\n\t\t^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmpt4l13zvn.js:8:3\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmpt4l13zvn.js:7:16)\n    at test\
    \ (/tmp/tmpt4l13zvn.js:18:20)\n    at Object.<anonymous> (/tmp/tmpt4l13zvn.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  for(var i = 0, l = values.length;\
    \ i < l; i++){\n    if(!is_integer(values[i])){\n      values.splice(i, 1);\n\
    \      i--;\n      l--;\n    }\n  }\n  return values;\n};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplupt_w5i.js:8\n    if(!is_integer(values[i])){\n    ^\n\nReferenceError:\
    \ is_integer is not defined\n    at filter_integers (/tmp/tmplupt_w5i.js:8:5)\n\
    \    at test (/tmp/tmplupt_w5i.js:23:20)\n    at Object.<anonymous> (/tmp/tmplupt_w5i.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(val){\n\
    \t\treturn isInteger(val)\n\t})\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplwvoxuy_.js:8\n\t\treturn isInteger(val)\n\t\t^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmplwvoxuy_.js:8:3\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmplwvoxuy_.js:7:16)\n    at test\
    \ (/tmp/tmplwvoxuy_.js:18:20)\n    at Object.<anonymous> (/tmp/tmplwvoxuy_.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return isInteger(value);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphwso0vov.js:8\n    return isInteger(value);\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmphwso0vov.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmphwso0vov.js:7:17)\n    at test\
    \ (/tmp/tmphwso0vov.js:18:20)\n    at Object.<anonymous> (/tmp/tmphwso0vov.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => typeof\
    \ value === 'number');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmplh178i67.js:16:10)\n    at Object.<anonymous> (/tmp/tmplh178i67.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (x){\n\
    \    return typeof x === \"number\" && isFinite(x);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpe8ip0t8g.js:18:10)\n    at Object.<anonymous> (/tmp/tmpe8ip0t8g.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(n){\n\
    \t\treturn ((typeof n === 'number') && (!isNaN(n)));\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpiqyuv_6u.js:18:10)\n    at Object.<anonymous> (/tmp/tmpiqyuv_6u.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar filtered = [];\n\tfor(var i=0;\
    \ i<values.length; i++){\n\t\tif(!isNaN(values[i]) && !isNumber(values[i])){\n\
    \t\t\tfiltered.push(values[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaf4vl7nc.js:9\n\t\tif(!isNaN(values[i]) && !isNumber(values[i])){\n\
    \t\t    ^\n\nReferenceError: isNumber is not defined\n    at filter_integers (/tmp/tmpaf4vl7nc.js:9:7)\n\
    \    at test (/tmp/tmpaf4vl7nc.js:22:20)\n    at Object.<anonymous> (/tmp/tmpaf4vl7nc.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n\n  for (var\
    \ i = 0; i < values.length; i++){\n    var value = values[i];\n    \n    if (typeof\
    \ value === 'number' && isFinite(value)){\n      filtered.push(value);\n    }\n\
    \  }\n\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp5eg7ge62.js:26:10)\n    at Object.<anonymous> (/tmp/tmp5eg7ge62.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(elm){\n\
    \        return typeof elm === 'number' && isFinite(elm);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpoi9kr1ev.js:18:10)\n    at Object.<anonymous> (/tmp/tmpoi9kr1ev.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return _.filter(values, function(value){\n\
    \    return _.isNumber(value) && _.isInteger(value);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpicys_ojt.js:7\n  return _.filter(values, function(value){\n  ^\n\
    \nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmpicys_ojt.js:7:3)\n\
    \    at test (/tmp/tmpicys_ojt.js:17:20)\n    at Object.<anonymous> (/tmp/tmpicys_ojt.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value)\
    \ {\n        return typeof value === 'number' && isInteger(value);\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4zkwwud4.js:8\n        return typeof value === 'number' && isInteger(value);\n\
    \                            ^\n\nReferenceError: isInteger is not defined\n \
    \   at /tmp/tmp4zkwwud4.js:8:29\n    at Array.filter (<anonymous>)\n    at filter_integers\
    \ (/tmp/tmp4zkwwud4.js:7:19)\n    at test (/tmp/tmp4zkwwud4.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp4zkwwud4.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return _.filter(_.map(values,\
    \ function(v){ return typeof(v) === 'number' && isFinite(v); }),\n           \
    \         function(num){ return isFinite(num); });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzxna9isl.js:7\n    return _.filter(_.map(values, function(v){ return\
    \ typeof(v) === 'number' && isFinite(v); }),\n    ^\n\nReferenceError: _ is not\
    \ defined\n    at filter_integers (/tmp/tmpzxna9isl.js:7:5)\n    at test (/tmp/tmpzxna9isl.js:16:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzxna9isl.js:21:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(x => x ===\
    \ parseInt(x, 10));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(isInteger)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0qwrjp9q.js:7\n  return values.filter(isInteger)\n            \
    \           ^\n\nReferenceError: isInteger is not defined\n    at filter_integers\
    \ (/tmp/tmp0qwrjp9q.js:7:24)\n    at test (/tmp/tmp0qwrjp9q.js:15:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0qwrjp9q.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return _filter(values, 'isInteger');\n\
    }\nexports.filter_integers = filter_integers;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5qconb3p.js:7\n  return _filter(values, 'isInteger');\n  ^\n\n\
    ReferenceError: _filter is not defined\n    at filter_integers (/tmp/tmp5qconb3p.js:7:3)\n\
    \    at test (/tmp/tmp5qconb3p.js:16:20)\n    at Object.<anonymous> (/tmp/tmp5qconb3p.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(val){\n\
    \        return typeof val === 'number' && !Number.isNaN(val);\n    })\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmptd5ix99s.js:19:10)\n    at Object.<anonymous> (/tmp/tmptd5ix99s.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => Number.isInteger(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  for(var i = 0, len = values.length;\
    \ i < len; i++){\n    if(typeof values[i] === 'number'){\n      values.splice(i--,\
    \ 1);\n    }\n  }\n  return values;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, [], 'adasd' ]\n\nshould equal\n\n\
    [ 4, 9 ]\n    at test (/tmp/tmp31ahkibx.js:21:10)\n    at Object.<anonymous> (/tmp/tmp31ahkibx.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ {}, [], 'adasd' ],\n  expected: [ 4, 9\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var i, newArray = [];\n  for (i\
    \ = 0; i < values.length; i++){\n    if (values.hasOwnProperty(i) && typeof values[i]\
    \ === 'number'){\n      newArray.push(values[i]);\n    }\n  }\n  return newArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp7tuvex8x.js:22:10)\n    at Object.<anonymous> (/tmp/tmp7tuvex8x.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(val => isNaN(val)\
    \ === false);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 23.2, 9 ]\n\nshould equal\n\n[\
    \ 4, 9 ]\n    at test (/tmp/tmpwdxtnxp3.js:16:10)\n    at Object.<anonymous> (/tmp/tmpwdxtnxp3.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar new_values = []\n\tfor(var i\
    \ = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && values[i]\
    \ % 1 === 0){\n\t\t\tnew_values.push(values[i])\n\t\t}\n\t}\n\treturn new_values\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(isInteger);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm39jxel7.js:7\n  return values.filter(isInteger);\n           \
    \            ^\n\nReferenceError: isInteger is not defined\n    at filter_integers\
    \ (/tmp/tmpm39jxel7.js:7:24)\n    at test (/tmp/tmpm39jxel7.js:15:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpm39jxel7.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(n){\n\
    \t\treturn isNumeric(n) && isInteger(n);\n\t});\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp28sr7k1v.js:8\n\t\treturn isNumeric(n) && isInteger(n);\n\t\t^\n\
    \nReferenceError: isNumeric is not defined\n    at /tmp/tmp28sr7k1v.js:8:3\n \
    \   at Array.filter (<anonymous>)\n    at filter_integers (/tmp/tmp28sr7k1v.js:7:16)\n\
    \    at test (/tmp/tmp28sr7k1v.js:19:20)\n    at Object.<anonymous> (/tmp/tmp28sr7k1v.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return typeof v == 'number' && isInteger(v);\n  });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpci7p74_o.js:8\n    return typeof v == 'number' && isInteger(v);\n\
    \                    ^\n\nReferenceError: isInteger is not defined\n    at /tmp/tmpci7p74_o.js:8:21\n\
    \    at Array.filter (<anonymous>)\n    at filter_integers (/tmp/tmpci7p74_o.js:7:17)\n\
    \    at test (/tmp/tmpci7p74_o.js:18:20)\n    at Object.<anonymous> (/tmp/tmpci7p74_o.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    values = _.values(values);\n \
    \   return _.filter(_.map(values, Number), _.isInteger);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwusove9l.js:7\n    values = _.values(values);\n    ^\n\nReferenceError:\
    \ _ is not defined\n    at filter_integers (/tmp/tmpwusove9l.js:7:5)\n    at test\
    \ (/tmp/tmpwusove9l.js:16:20)\n    at Object.<anonymous> (/tmp/tmpwusove9l.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(typeof values[i] === 'number'){\n\
    \            result.push(values[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmptqxe5z7g.js:22:10)\n    at Object.<anonymous> (/tmp/tmptqxe5z7g.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  var integers\
    \ = [];\n  for(var i = 0, l = values.length; i < l; i++){\n    var x = values[i];\n\
    \    if(typeof x === 'number' && x % 1 === 0){\n      integers.push(x);\n    }\
    \ else {\n      filtered.push(x);\n    }\n  }\n  return filtered.concat(integers);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, [], 23.2, 'adasd', 4, 9 ]\n\nshould\
    \ equal\n\n[ 4, 9 ]\n    at test (/tmp/tmpijekctc6.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpijekctc6.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ {}, [],\
    \ 23.2, 'adasd', 4, 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values(filter(nativeIsInteger,\
    \ values))\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwwg_99nc.js:7\n  return values(filter(nativeIsInteger, values))\n\
    \  ^\n\nReferenceError: filter is not defined\n    at filter_integers (/tmp/tmpwwg_99nc.js:7:3)\n\
    \    at test (/tmp/tmpwwg_99nc.js:15:20)\n    at Object.<anonymous> (/tmp/tmpwwg_99nc.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(item){\n\
    \    return typeof item === 'number' && isFinite(item);\n  });\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpe10ha30g.js:19:10)\n    at Object.<anonymous> (/tmp/tmpe10ha30g.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    return typeof val === 'number' && isFinite(val);\n  });\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmphjyc1714.js:19:10)\n    at Object.<anonymous> (/tmp/tmphjyc1714.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  for(var i in values){\n    if(typeof\
    \ values[i] != number){\n      values[i] = parseInt(values[i], 10);\n    }\n \
    \ }\n  return values;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9qt184hj.js:8\n    if(typeof values[i] != number){\n          \
    \                 ^\n\nReferenceError: number is not defined\n    at filter_integers\
    \ (/tmp/tmp9qt184hj.js:8:28)\n    at test (/tmp/tmp9qt184hj.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9qt184hj.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return isInteger(v);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc471p8c6.js:8\n    return isInteger(v);\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmpc471p8c6.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmpc471p8c6.js:7:17)\n    at test\
    \ (/tmp/tmpc471p8c6.js:18:20)\n    at Object.<anonymous> (/tmp/tmpc471p8c6.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(i)\
    \ {\n    return typeof i === 'number' && isFinite(i);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpsqiy3wax.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsqiy3wax.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar result = []\n\tvalues.forEach(function(v){\n\
    \t\tif(Number.isInteger(v)){\n\t\t\tresult.push(v)\n\t\t}\n\t})\n\treturn result\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(value =>\
    \ typeof value === 'number' && isFinite(value))\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpc50qptqg.js:17:10)\n    at Object.<anonymous> (/tmp/tmpc50qptqg.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        switch(values[i]){\n            case\
    \ null:\n            case undefined:\n            case false:\n            case\
    \ true:\n            case 0:\n            case 1:\n            case 2:\n     \
    \       case 3:\n            case 4:\n            case 5:\n            case 6:\n\
    \            case 7:\n            case 8:\n            case 9:\n            case\
    \ 10:\n            case 11:\n            case 12:\n            case 13:\n    \
    \        case 14:\n            case 15:\n            case 16:\n            case\
    \ 17:\n            case 18:\n            case 19:\n            case 20:\n    \
    \        case 21:\n            case 22:\n            case 23:\n            case\
    \ 24:\n            case 25:\n            case 26:\n            case 27:\n    \
    \        case 28:\n            case 29:\n            case 30:\n            case\
    \ 31:\n            case 32:\n            case 33:\n            case 34:\n    \
    \        case 35:\n            case 36:\n            case 37:\n            case\
    \ 38:\n            case 39:\n            case 40:\n            case 41:\n    \
    \        case 42:\n            case 43:\n            case 44:\n            case\
    \ 45:\n            case 46:\n            case 47:\n            case 48:\n    \
    \        case 49:\n            case 50:\n            case 51:\n            case\
    \ 52:\n            case 53:\n            case 54:\n            case 55:\n    \
    \        case 56:\n            case 57:\n            case 58:\n            case\
    \ 59:\n            case 60:\n            case 61:\n            case 62:\n    \
    \        case 63:\n            case 64:\n            case 65:\n            case\
    \ 66:\n            case 67:\n            case 68:\n            case 69:\n    \
    \        case 70:\n            case 71:\n            case 72:\n            case\
    \ 73:\n            case 74:\n            case 75:\n            case 76:\n    \
    \        case 77:\n            case 78:\n            case 79:\n            case\
    \ 80:\n            case 81:\n            case 82:\n            case 83:\n    \
    \        case 84:\n            case 85:\n            case 86:\n            case\
    \ 87:\n            case 88:\n            case 89:\n            case 90:\n    \
    \        case 91:\n            case 92:\n            case 93:\n            case\
    \ 94:\n            case 95:\n            case 96:\n            case 97:\n    \
    \        case 98:\n            case 99:\n            case 100:\n            case\
    \ 101:\n            case 102:\n            case 103:\n            case 104:\n\
    \            case 105:\n            case 106:\n            case 107:\n       \
    \     case 108:\n            case 109:\n            case 110:\n            case\
    \ 111:\n            case 112:\n            case 113:\n            case 114:\n\
    \            case 115:\n            case 116:\n            case 117:\n       \
    \     case 118:\n            case 119:\n            case 120:\n            case\
    \ 121:\n            case 122:\n            case 123:\n            case 124:\n\
    \            case 125:\n            case 12\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy_on245u.js:141\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    return typeof val === 'number' && val%1 === 0;\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filter = [];\n\n    for(var\
    \ i = 0; i < values.length; i++){\n        var val = values[i];\n\n        if(typeof\
    \ val === 'number'){\n            filter.push(val);\n        }\n    }\n\n    return\
    \ filter;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpc7_z9i3v.js:26:10)\n    at Object.<anonymous> (/tmp/tmpc7_z9i3v.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(x){\n\
    \    return typeof x === 'number' && !isNaN(x)\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp9jvf_vdz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp9jvf_vdz.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(parseInt(values[i]) == values[i]){\n \
    \     filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for (var i\
    \ = 0; i < values.length; i++) {\n    if(parseInt(values[i])){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmppbg9bw9z.js:22:10)\n    at Object.<anonymous> (/tmp/tmppbg9bw9z.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for (var i\
    \ = 0; i < values.length; i++){\n    var value = values[i];\n    if (typeof(value)\
    \ == 'number'){\n      filtered.push(value);\n    }\n  }\n  return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpw8dxtxvd.js:23:10)\n    at Object.<anonymous> (/tmp/tmpw8dxtxvd.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn _.reduce(values, function(result,\
    \ value){\n\t\t\n\t\t// if value is a number\n\t\tif( _.isNumber(value) ){\n\t\
    \t\t// add it to the result\n\t\t\tresult.push(value);\n\t\t}\n\n\t\t// if value\
    \ is a string, we consider it to be an object\n\t\tif( _.isString(value) ){\n\t\
    \t\t// if value is empty, we add it to the result array\n\t\t\tif( value.length\
    \ === 0 ){\n\t\t\t\tresult.push(value);\n\t\t\t}\n\t\t\t\n\t\t\t// else we filter\
    \ it for integers\n\t\t\telse{\n\t\t\t\t\n\t\t\t\t// we split it for integers\n\
    \t\t\t\tvar splitted = value.split(\".\");\n\n\t\t\t\t// if there's an integer\
    \ in the string\n\t\t\t\tif( splitted.length > 1 ){\n\t\t\t\t\t\n\t\t\t\t\t//\
    \ we add it to the result\n\t\t\t\t\tresult.push(parseInt(value, 10));\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if the given value is not an object/array/string,\
    \ we consider it to be a plain value\n\t\telse{\n\t\t\t// if value is empty, we\
    \ add it to the result\n\t\t\tif( value.length === 0 ){\n\t\t\t\tresult.push(value);\n\
    \t\t\t}\n\t\t\t\n\t\t\t// else we consider it to be a plain value\n\t\t\telse{\n\
    \t\t\t\t\n\t\t\t\t// we filter it for integers\n\t\t\t\tif( _.isNumber(value)\
    \ ){\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//\
    \ we filter it for floats\n\t\t\t\tif( _.isBoolean(value) ){\n\t\t\t\t\tresult.push(value);\n\
    \t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// we filter it for strings\n\t\t\t\telse{\n\
    \t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\
    \t}, []);\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3topxn5p.js:7\n\treturn _.reduce(values, function(result, value){\n\
    \t^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp3topxn5p.js:7:2)\n\
    \    at test (/tmp/tmp3topxn5p.js:76:20)\n    at Object.<anonymous> (/tmp/tmp3topxn5p.js:81:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  values.forEach(function(v)\
    \ {\n    if (typeof v === 'number'){\n      filtered.push(v);\n    }\n  });\n\
    \  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp24sh0q3i.js:22:10)\n    at Object.<anonymous> (/tmp/tmp24sh0q3i.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(item){\n\
    \        return typeof item === 'number' && !isNaN(item);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp6y44unw_.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6y44unw_.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (value){\n\
    \    if(typeof value === 'number'){\n      return !isNaN(value)\n    }\n  })\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp7oda_5pr.js:20:10)\n    at Object.<anonymous> (/tmp/tmp7oda_5pr.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === 'number' && !isNaN(value);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpndhetoxi.js:18:10)\n    at Object.<anonymous> (/tmp/tmpndhetoxi.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    return typeof val === \"number\" && val % 1 === 0;\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for (var\
    \ i = 0; i < values.length; i++){\n        if (typeof values[i] === \"number\"\
    ){\n            filtered.push(values[i])\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpldy4zzxg.js:22:10)\n    at Object.<anonymous> (/tmp/tmpldy4zzxg.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0, len = values.length; i < len; i++){\n        if(!isNaN(parseInt(values[i],\
    \ 10))){\n            filtered.push(values[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpk9thbq48.js:22:10)\n    at Object.<anonymous> (/tmp/tmpk9thbq48.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter( function(i)\
    \ {\n    return typeof(i) === \"number\";\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp68ysvh14.js:18:10)\n    at Object.<anonymous> (/tmp/tmp68ysvh14.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i=0;i<values.length;i++){\n\
    \    if(isInteger(values[i])){\n      filtered.push(values[i])\n    }\n  }\n \
    \ return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoftculi3.js:9\n    if(isInteger(values[i])){\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at filter_integers (/tmp/tmpoftculi3.js:9:5)\n\
    \    at test (/tmp/tmpoftculi3.js:22:20)\n    at Object.<anonymous> (/tmp/tmpoftculi3.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  if(Array.isArray(values)){\n   \
    \ return values.filter(function(value) {\n      if(typeof value === 'number'){\n\
    \        return Number.isInteger(value);\n      }\n      return true;\n    });\n\
    \  }else{\n    return [];\n  }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, {}, [], 9, 'adasd' ]\n\nshould equal\n\
    \n[ 4, 9 ]\n    at test (/tmp/tmp1libu7v7.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1libu7v7.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, {}, [],\
    \ 9, 'adasd' ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => typeof\
    \ value === 'number');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpjcbh1wlf.js:16:10)\n    at Object.<anonymous> (/tmp/tmpjcbh1wlf.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    values = $.grep(values, function(value){\n\
    \        return is_integer(value);\n    });\n    return values;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv9xinzk0.js:7\n    values = $.grep(values, function(value){\n \
    \   ^\n\nReferenceError: $ is not defined\n    at filter_integers (/tmp/tmpv9xinzk0.js:7:5)\n\
    \    at test (/tmp/tmpv9xinzk0.js:18:20)\n    at Object.<anonymous> (/tmp/tmpv9xinzk0.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(i){\
    \ return typeof(i)===\"number\" });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpaf5434qm.js:16:10)\n    at Object.<anonymous> (/tmp/tmpaf5434qm.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return filter(function (value){\n\
    \        return typeof value === 'number' && !isNaN(value);\n    }, values);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprbwmn0db.js:7\n    return filter(function (value){\n    ^\n\nReferenceError:\
    \ filter is not defined\n    at filter_integers (/tmp/tmprbwmn0db.js:7:5)\n  \
    \  at test (/tmp/tmprbwmn0db.js:17:20)\n    at Object.<anonymous> (/tmp/tmprbwmn0db.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var i, value, output = []\n  for(i\
    \ in values){\n    value = check_integer(values[i])\n    if(value !== false){\n\
    \      output.push(value)\n    }\n  }\n  return output\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp65vri6q9.js:9\n    value = check_integer(values[i])\n    ^\n\n\
    ReferenceError: check_integer is not defined\n    at filter_integers (/tmp/tmp65vri6q9.js:9:5)\n\
    \    at test (/tmp/tmp65vri6q9.js:23:20)\n    at Object.<anonymous> (/tmp/tmp65vri6q9.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => typeof(value)\
    \ === \"number\" && Math.floor(value) == value);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value == 'number' && isFinite(value)\n  })\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpkqw8wm1w.js:18:10)\n    at Object.<anonymous> (/tmp/tmpkqw8wm1w.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return typeof value == 'number' && isFinite(value)\n    })\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmphr27wil8.js:18:10)\n    at Object.<anonymous> (/tmp/tmphr27wil8.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === \"number\" && (value | 0) === value\n  })\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (item){\n\
    \    return typeof item === 'number' && !Number.isNaN(item)\n  })\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp42rkpbus.js:18:10)\n    at Object.<anonymous> (/tmp/tmp42rkpbus.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(value){\n\
    \t\treturn typeof(value) === 'number' && !isNaN(value) && isFinite(value);\n\t\
    });\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpebxigta3.js:19:10)\n    at Object.<anonymous> (/tmp/tmpebxigta3.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  if(Array.isArray(values)){\n   \
    \ return values.filter(function(val){\n      return val%1 === 0;\n    });\n  }\
    \ else {\n    return [];\n  }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 9 ]\n\nshould equal\n\n[ 4, 9 ]\n\
    \    at test (/tmp/tmpqgmot4un.js:21:10)\n    at Object.<anonymous> (/tmp/tmpqgmot4un.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 9 ],\n  expected: [ 4, 9 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === 'number' && !isNaN(value);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpjeujjjog.js:18:10)\n    at Object.<anonymous> (/tmp/tmpjeujjjog.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return filter(values, function(value){\n\
    \        return isInteger(value);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptfmpt_uu.js:7\n    return filter(values, function(value){\n   \
    \ ^\n\nReferenceError: filter is not defined\n    at filter_integers (/tmp/tmptfmpt_uu.js:7:5)\n\
    \    at test (/tmp/tmptfmpt_uu.js:17:20)\n    at Object.<anonymous> (/tmp/tmptfmpt_uu.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  let output = [];\n  values.forEach(value\
    \ => {\n    if(typeof value === 'number'){\n      output.push(value)\n    }\n\
    \  });\n  return output\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpw54y_kl1.js:22:10)\n    at Object.<anonymous> (/tmp/tmpw54y_kl1.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(isNumeric(values[i])){\n       \
    \     filtered.push(values[i]);\n        }\n    }\n\n    return filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf9dfgq55.js:10\n        if(isNumeric(values[i])){\n        ^\n\n\
    ReferenceError: isNumeric is not defined\n    at filter_integers (/tmp/tmpf9dfgq55.js:10:9)\n\
    \    at test (/tmp/tmpf9dfgq55.js:24:20)\n    at Object.<anonymous> (/tmp/tmpf9dfgq55.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var output = [];\n  \n  for (var\
    \ i = 0; i < values.length; i++){\n    if (typeof values[i] === 'number'){\n \
    \     output.push(values[i]);\n    }\n  }\n  \n  return output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmppg47fou6.js:24:10)\n    at Object.<anonymous> (/tmp/tmppg47fou6.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value)\
    \ {\n        return isInteger(value);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwulolxy4.js:8\n        return isInteger(value);\n        ^\n\n\
    ReferenceError: isInteger is not defined\n    at /tmp/tmpwulolxy4.js:8:9\n   \
    \ at Array.filter (<anonymous>)\n    at filter_integers (/tmp/tmpwulolxy4.js:7:19)\n\
    \    at test (/tmp/tmpwulolxy4.js:18:20)\n    at Object.<anonymous> (/tmp/tmpwulolxy4.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value === 'number'\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpu2vrh5qa.js:18:10)\n    at Object.<anonymous> (/tmp/tmpu2vrh5qa.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values(filter(isInteger,\
    \ values));\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using `Array.prototype.some()`\
    \ vs `Array.prototype.filter()` vs `Array.prototype.map()`\n<|/ c |>\n<| c |>\n\
    It's not about how much more performant it is but about how simple it is to write\
    \ and understand. Especially for beginners that want to understand how it works.\
    \ I always choose the simplest solution that works best for me.\n<|/ c |>\n<|\
    \ c |>\nI agree. Sometimes I prefer simple solutions that convey the meaning I\
    \ want, but sometimes I prefer complex solutions that I understand and can understand\
    \ easily.\n<|/ c |>\n<| c |>\nWhy are you using `filter` in the first place? `some`\
    \ is exactly what you need. You should know that `.filter` is an array method\
    \ and that `.some` only exists on an object.\n<|/ c |>\n<| c |>\n`filter` works\
    \ on an `array` as well, it just returns a new array. `some` works on `objects`\
    \ that inherit from `Array.prototype`.\n<|/ c |>\n<| a tags=arrays,javascript,javascript-objects\
    \ |>\n<code>\nvar myList = ['a', 3, 'b', 4];\nvar newList = [];\nmyList.forEach(function(item){\n\
    \    if(typeof item == 'number'){\n        newList.push(item);\n    }\n});\n</code>\n\
    This will create a new array that contains the numbers only. To filter out the\
    \ objects, you can change it to a for loop (since forEach isn't supported by all\
    \ browsers)\n<|/ a dscore=5 |>\n<| c |>\nWhat is the downside of using .forEach\
    \ rather than for(var i = 0; i < myList.length; i++)\n<|/ c |>\n<| c |>\nThe downside\
    \ is that it doesn't work in IE8 and below. `forEach` was introduced with IE9\n\
    <|/ c |>\n<| c |>\nThat's not really an issue since you can polyfill it or just\
    \ use the old for loop instead.\n<|/ c |>\n<| c |>\nYeah, I figured that out after\
    \ I posted this... But thanks for sharing!\n<|/ c |>\n<| c |>\nIf you use ES6\
    \ you can use Array.protoype.filter():\n\n`newList = myList.filter(item => typeof\
    \ item === 'number');`\n<|/ c |>\n<| a dscore=5 tags=arrays,javascript,javascript-objects\
    \ |>\nJust another way:\n<code>\nvar myList = ['a', 3, 'b', 4];\nvar new\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp09hzvszx.js:9\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n    \
    \  filtered.push(values[i])\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp_sjh5cgu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp_sjh5cgu.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn _filter(values, function(){\n\
    \t\treturn this.type === NUMBER_TYPE;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphthgkb4l.js:7\n\treturn _filter(values, function(){\n\t^\n\nReferenceError:\
    \ _filter is not defined\n    at filter_integers (/tmp/tmphthgkb4l.js:7:2)\n \
    \   at test (/tmp/tmphthgkb4l.js:17:20)\n    at Object.<anonymous> (/tmp/tmphthgkb4l.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var value_list = [];\n    for\
    \ (var i = 0; i < values.length; i++) {\n        // We use '==' here, but we would\
    \ like to also accept NaN,\n        // and there is some concern that '==' may\
    \ do something weird with\n        // objects where NaN != NaN, but NaN == NaN.\n\
    \        if (values[i] != +values[i]){\n            value_list.push(values[i]);\n\
    \        }\n    }\n    return value_list;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, 'adasd' ]\n\nshould equal\n\n[ 4,\
    \ 9 ]\n    at test (/tmp/tmpdocwbg31.js:26:10)\n    at Object.<anonymous> (/tmp/tmpdocwbg31.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ {}, 'adasd' ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(typeof values[i] === 'number')\n     \
    \ filtered.push(values[i]);\n  }\n  return filtered;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpe9r6eo97.js:22:10)\n    at Object.<anonymous> (/tmp/tmpe9r6eo97.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar newValues = [];\n\tfor(var i=0;\
    \ i < values.length; i++){\n\t\tif(typeof values[i] != 'number'){\n\t\t\tnewValues.push(values[i]);\n\
    \t\t}\n\t}\n\treturn newValues;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, [], 'adasd' ]\n\nshould equal\n\n\
    [ 4, 9 ]\n    at test (/tmp/tmpomx1sybm.js:22:10)\n    at Object.<anonymous> (/tmp/tmpomx1sybm.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ {}, [], 'adasd' ],\n  expected: [ 4, 9\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return _.filter(_.castArray(values),\
    \ function(v){\n        return _.isNumber(v);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp15mze9mg.js:7\n    return _.filter(_.castArray(values), function(v){\n\
    \    ^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp15mze9mg.js:7:5)\n\
    \    at test (/tmp/tmp15mze9mg.js:17:20)\n    at Object.<anonymous> (/tmp/tmp15mze9mg.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(i){\n\
    \        return typeof i === 'number' && isFinite(i);\n    });\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpn3zb6nto.js:19:10)\n    at Object.<anonymous> (/tmp/tmpn3zb6nto.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0, len = values.length; i < len; i++){\n    if(typeof values[i] !== 'number'){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, [], 'adasd' ]\n\nshould equal\n\n\
    [ 4, 9 ]\n    at test (/tmp/tmpl5v8nex0.js:22:10)\n    at Object.<anonymous> (/tmp/tmpl5v8nex0.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ {}, [], 'adasd' ],\n  expected: [ 4, 9\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var value = [], value;\n    for(var\
    \ i=0, len = values.length; i < len; i++){\n        value = values[i];\n     \
    \   if(isInteger(value)){\n            value.push(i);\n        }\n    }\n    return\
    \ value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptin46v4k.js:10\n        if(isInteger(value)){\n        ^\n\nReferenceError:\
    \ isInteger is not defined\n    at filter_integers (/tmp/tmptin46v4k.js:10:9)\n\
    \    at test (/tmp/tmptin46v4k.js:23:20)\n    at Object.<anonymous> (/tmp/tmptin46v4k.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return _.compact(_.map(values, function(value){\n\
    \    if(_.isNumber(value) && isFinite(value)) return value;\n  }));\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1ihnbiis.js:7\n  return _.compact(_.map(values, function(value){\n\
    \  ^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp1ihnbiis.js:7:3)\n\
    \    at test (/tmp/tmp1ihnbiis.js:17:20)\n    at Object.<anonymous> (/tmp/tmp1ihnbiis.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return v===Math.trunc(v);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(val){\n\
    \        return Number(val) == val;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 23.2, 9 ]\n\nshould equal\n\n[\
    \ 4, 9 ]\n    at test (/tmp/tmp6kqhl80g.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6kqhl80g.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return _.filter(_.map(values,\
    \ _.identity), _.identity).filter(_.identity);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkd0354uz.js:7\n    return _.filter(_.map(values, _.identity), _.identity).filter(_.identity);\n\
    \    ^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmpkd0354uz.js:7:5)\n\
    \    at test (/tmp/tmpkd0354uz.js:16:20)\n    at Object.<anonymous> (/tmp/tmpkd0354uz.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(val => val\
    \ % 1 === 0)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 9 ]\n\nshould equal\n\n[ 4, 9 ]\n\
    \    at test (/tmp/tmppz3z0ivl.js:16:10)\n    at Object.<anonymous> (/tmp/tmppz3z0ivl.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 9 ],\n  expected: [ 4, 9 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(typeof values[i] === 'number'){\n\
    \            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpc6odkjra.js:22:10)\n    at Object.<anonymous> (/tmp/tmpc6odkjra.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar out = [];\n\tvalues.forEach(function(value){\n\
    \t\tif(isInteger(value)){\n\t\t\tout.push(value);\n\t\t}\n\t});\n\treturn out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi1dj222c.js:9\n\t\tif(isInteger(value)){\n\t\t^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmpi1dj222c.js:9:3\n    at Array.forEach\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmpi1dj222c.js:8:9)\n    at test\
    \ (/tmp/tmpi1dj222c.js:22:20)\n    at Object.<anonymous> (/tmp/tmpi1dj222c.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return !isNaN(value)\n  })\n}\n},{}],10:[function(require,module,exports){\n\
    var filter = require('../util/filter');\nvar filter_integers = require('./filter_integers');\n\
    var filter_floats = require('./filter_floats');\nvar filter_booleans = require('./filter_booleans');\n\
    var filter_objects = require('./filter_objects');\nvar filter_strings = require('./filter_strings');\n\
    var filter_colors = require('./filter_colors');\nvar filter_none = require('./filter_none');\n\
    \nmodule.exports = function filterAll(values){\n  var filtered = values([]);\n\
    \  for(var i in values){\n    filtered = filter_strings(filtered, filter_integers(values[i]));\n\
    \    filtered = filter(filtered, filter_floats(values[i]));\n    filtered = filter_booleans(filtered);\n\
    \    filtered = filter_objects(filtered, filter(values[i]));\n    filtered = filter_colors(filtered,\
    \ values[i]);\n    filtered = filter_none(filtered, values[i]);\n  }\n  return\
    \ filtered;\n};\n},{\"../util/filter\":12,\"./filter_integers\":8,\"./filter_floats\"\
    :9,\"./filter_booleans\":11,\"./filter_objects\":12,\"./filter_strings\":13,\"\
    ./filter_colors\":14,\"./filter_none\":15}],11:[function(require,module,exports){\n\
    var filter = require('../util/filter');\nvar filter_integers = require('./filter_integers');\n\
    var filter_floats = require('./filter_floats');\nvar filter_booleans = require('./filter_booleans');\n\
    var filter_objects = require('./filter_objects');\n\nmodule.exports = function\
    \ filter_booleans(filtered){\n  return filter(filtered, filter_booleans);\n};\n\
    },{\"../util/filter\":12,\"./filter_integers\":8,\"./filter_floats\":9,\"./filter_booleans\"\
    :11}],12:[function(require,module,exports){\nvar filter = require('./filter');\n\
    var values = require('../values');\n\nmodule.exports = function filter(array,\
    \ test){\n  var result = [];\n  var filtered = values(array);\n  for(var i in\
    \ filtered){\n    if(test(filtered[i], i)){\n      result.push(filtered[i]);\n\
    \    }\n  }\n  return result;\n};\n},{\"../values\":16,\"./filter\":13}],13:[function(require,module,exports){\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpghgkmgq8.js:11\n},{}],10:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var n = [];\n  var v = [];\n  for(var\
    \ i = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n  \
    \    n.push(values[i]);\n    }else{\n      v.push(values[i]);\n    }\n  }\n  if(n.length\
    \ > 0){\n    n = n.sort(function(a, b){return a - b;});\n    return n;\n  }else{\n\
    \    return v;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 9, 23.2 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp985fsgej.js:30:10)\n    at Object.<anonymous> (/tmp/tmp985fsgej.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 9, 23.2 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar int_values = values.filter(isIntegral);\n\
    \treturn int_values;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpouiyvy5v.js:7\n\tvar int_values = values.filter(isIntegral);\n\t\
    \                               ^\n\nReferenceError: isIntegral is not defined\n\
    \    at filter_integers (/tmp/tmpouiyvy5v.js:7:33)\n    at test (/tmp/tmpouiyvy5v.js:16:20)\n\
    \    at Object.<anonymous> (/tmp/tmpouiyvy5v.js:21:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return isInteger(v);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl5ewbro8.js:8\n    return isInteger(v);\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmpl5ewbro8.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmpl5ewbro8.js:7:17)\n    at test\
    \ (/tmp/tmpl5ewbro8.js:18:20)\n    at Object.<anonymous> (/tmp/tmpl5ewbro8.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = []\n    for(var\
    \ i=0; i < values.length; i++){\n        if(!isNaN(values[i]) && parseInt(values[i],\
    \ 10) == values[i]){\n            filtered.push(values[i])\n        }\n    }\n\
    \    return filtered\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(i){\n\
    \    return types.is_integer(i);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj6izq2nf.js:8\n    return types.is_integer(i);\n    ^\n\nReferenceError:\
    \ types is not defined\n    at /tmp/tmpj6izq2nf.js:8:5\n    at Array.filter (<anonymous>)\n\
    \    at filter_integers (/tmp/tmpj6izq2nf.js:7:17)\n    at test (/tmp/tmpj6izq2nf.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpj6izq2nf.js:22:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for (var i\
    \ = 0; i < values.length; i++){\n    if (!isNaN(values[i])){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 23.2, 9 ]\n\nshould equal\n\n[\
    \ 4, 9 ]\n    at test (/tmp/tmpx0q1w9py.js:22:10)\n    at Object.<anonymous> (/tmp/tmpx0q1w9py.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  if(typeof(values) === 'undefined')\
    \ return []\n  var filtered = []\n  for(var i = 0; i < values.length; i++){\n\
    \    if(typeof values[i] === 'number') filtered.push(values[i])\n  }\n  return\
    \ filtered\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpljkav2rm.js:21:10)\n    at Object.<anonymous> (/tmp/tmpljkav2rm.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  values = values.map(function(x){\n\
    \    if (typeof x === 'number'){\n      return x;\n    }\n  });\n  return values;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, undefined, undefined, 23.2, 9, undefined\
    \ ]\n\nshould equal\n\n[ 4, 9 ]\n    at test (/tmp/tmpab26r8cu.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpab26r8cu.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, undefined,\
    \ undefined, 23.2, 9, undefined ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return filter(values, is_integer)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0bab2okq.js:7\n  return filter(values, is_integer)\n  ^\n\nReferenceError:\
    \ filter is not defined\n    at filter_integers (/tmp/tmp0bab2okq.js:7:3)\n  \
    \  at test (/tmp/tmp0bab2okq.js:15:20)\n    at Object.<anonymous> (/tmp/tmp0bab2okq.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  _.each(values,\
    \ function(value){\n    if(isNumber(value)){\n      filtered.push(value);\n  \
    \  }\n  });\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4lsspf6y.js:8\n  _.each(values, function(value){\n  ^\n\nReferenceError:\
    \ _ is not defined\n    at filter_integers (/tmp/tmp4lsspf6y.js:8:3)\n    at test\
    \ (/tmp/tmp4lsspf6y.js:21:20)\n    at Object.<anonymous> (/tmp/tmp4lsspf6y.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return typeof value == 'number' &&\n      isFinite(value) &&\n      Math.floor(value)\
    \ === value\n  })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function\
    \ (val){\n        return (typeof val === 'number' && isInteger(val))\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0xuh7z99.js:8\n        return (typeof val === 'number' && isInteger(val))\n\
    \                           ^\n\nReferenceError: isInteger is not defined\n  \
    \  at /tmp/tmp0xuh7z99.js:8:28\n    at Array.filter (<anonymous>)\n    at filter_integers\
    \ (/tmp/tmp0xuh7z99.js:7:19)\n    at test (/tmp/tmp0xuh7z99.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0xuh7z99.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(val){\n\
    \        return typeof val === 'number' && isFinite(val);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmplhb7vgld.js:18:10)\n    at Object.<anonymous> (/tmp/tmplhb7vgld.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(is_integer(values[i])){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7kemswiq.js:9\n    if(is_integer(values[i])){\n    ^\n\nReferenceError:\
    \ is_integer is not defined\n    at filter_integers (/tmp/tmp7kemswiq.js:9:5)\n\
    \    at test (/tmp/tmp7kemswiq.js:22:20)\n    at Object.<anonymous> (/tmp/tmp7kemswiq.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    values = values.filter(function(i){\n\
    \        return typeof i === 'number' && !isNaN(i)\n    })\n    return values\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp2q_gx84z.js:19:10)\n    at Object.<anonymous> (/tmp/tmp2q_gx84z.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for (var i\
    \ = 0; i < values.length; i++){\n    if (values[i].constructor === Number)\n \
    \     filtered.push(values[i]);\n  }\n  return filtered;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpzofx_hg1.js:21:10)\n    at Object.<anonymous> (/tmp/tmpzofx_hg1.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar rv = [];\n\tfor(var i = 0, len\
    \ = values.length; i < len; i++){\n\t\tif(!isInt(values[i])){\n\t\t\trv[rv.length]\
    \ = values[i];\n\t\t}\n\t}\n\treturn rv;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpab26685c.js:9\n\t\tif(!isInt(values[i])){\n\t\t^\n\nReferenceError:\
    \ isInt is not defined\n    at filter_integers (/tmp/tmpab26685c.js:9:3)\n   \
    \ at test (/tmp/tmpab26685c.js:22:20)\n    at Object.<anonymous> (/tmp/tmpab26685c.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n    \
    \  filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpzsaqytew.js:22:10)\n    at Object.<anonymous> (/tmp/tmpzsaqytew.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(n){\n\
    \    return typeof n === 'number' && !isNaN(n);\n  });\n}\nmodule.exports = filter_integers;\n\
    \n},{}],30:[function(require,module,exports){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk5stq4r3.js:13\n},{}],30:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(v => typeof(v)\
    \ === 'number' && isInteger(v));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppxkm6sfv.js:7\n  return values.filter(v => typeof(v) === 'number'\
    \ && isInteger(v));\n                                      ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmppxkm6sfv.js:7:39\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmppxkm6sfv.js:7:17)\n    at test\
    \ (/tmp/tmppxkm6sfv.js:16:20)\n    at Object.<anonymous> (/tmp/tmppxkm6sfv.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n\
    \        return typeof value == 'number' && !isNaN(value);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpyez123sr.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyez123sr.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar rv = [];\n\tfor (var i = 0,\
    \ len = values.length; i < len; i++){\n\t\tvar type = typeof values[i];\n\t\t\
    if (type === 'string' || type === 'number'){\n\t\t\trv.push(values[i]);\n\t\t\
    }\n\t}\n\treturn rv;\n}\n\t\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9, 'adasd' ]\n\nshould equal\n\
    \n[ 4, 9 ]\n    at test (/tmp/tmpwripn4kl.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwripn4kl.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9, 'adasd' ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for (var\
    \ i = 0; i < values.length; i++){\n        if (values[i] === Math.floor(values[i])){\n\
    \            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ in values){\n    if(typeof values[i] === \"number\" && !isNaN(values[i])){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp1a4hvtfb.js:22:10)\n    at Object.<anonymous> (/tmp/tmp1a4hvtfb.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (value)\
    \ {\n    return isInteger(value);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpowu9migl.js:8\n    return isInteger(value);\n    ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmpowu9migl.js:8:5\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmpowu9migl.js:7:17)\n    at test\
    \ (/tmp/tmpowu9migl.js:18:20)\n    at Object.<anonymous> (/tmp/tmpowu9migl.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(val){\n\
    \    var integer = parseInt(val);\n    return !isNaN(integer);\n  });\n}\n</code>\n\
    <|/ a dscore=3 tags=javascript,function,arrays,object |>\n<| a dscore=2 |>\nHere's\
    \ a solution using Array.filter, which creates a new array based on the old one.\
    \ \nThe callback function takes two parameters, the first one is the item and\
    \ the second one is an index.\nThe index is 0 based, meaning the first item is\
    \ at index 0.\nThis solution will keep all items that don't satisfy the callback,\
    \ but it will not modify the original array.\n\n<code>\nconst myArray = [{\n \
    \ field1: 'abc',\n  field2: 'def',\n  field3: 'ghi'\n}, {\n  field1: 'abc',\n\
    \  field2: 'def',\n  field3: 'def',\n}, {\n  field1: 'abc',\n  field2: 'ghi',\n\
    \  field3: 'def'\n}, {\n  field1: 'abc',\n  field2: 'ghi',\n  field3: 'def'\n\
    }];\n\nconst myCallback = function(item, index) {\n  return item.field2 !== 'def';\n\
    }\n\nconst filtered = myArray.filter(myCallback);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo6qeibn_.js:12\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\
    \ \n    return !isNaN(value) && \n    (!isFinite(value) || value % 1 === 0) \n\
    \  })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 9 ]\n\nshould equal\n\n[ 4, 9 ]\n\
    \    at test (/tmp/tmpfbisyf6y.js:19:10)\n    at Object.<anonymous> (/tmp/tmpfbisyf6y.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 9 ],\n  expected: [ 4, 9 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(item){\n\
    \    return item instanceof Number;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 4, 9 ]\n    at test\
    \ (/tmp/tmp5f841dne.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5f841dne.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(val => {\n\
    \    if(typeof val == \"string\"){\n      return val.match(/^[+-]?[0-9]+$/);\n\
    \    }else{\n      return Number.isInteger(val);\n    }\n  })\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(!isNaN(values[i]) && parseInt(values[i],\
    \ 10) == values[i]){\n            filtered.push(values[i]);\n        }\n    }\n\
    \    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n\n    for\
    \ (var i = 0; i < values.length; i++){\n        var value = values[i];\n     \
    \   if (typeof(value) == 'number' && isInt(value)){\n            filtered.push(value);\n\
    \        }\n    }\n\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp92beo_03.js:11\n        if (typeof(value) == 'number' && isInt(value)){\n\
    \                          ^\n\nReferenceError: isInt is not defined\n    at filter_integers\
    \ (/tmp/tmp92beo_03.js:11:27)\n    at test (/tmp/tmp92beo_03.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp92beo_03.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(v){\n\
    \        return !isNaN(v);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, [], 23.2, 9 ]\n\nshould equal\n\n[\
    \ 4, 9 ]\n    at test (/tmp/tmpixoa2c02.js:18:10)\n    at Object.<anonymous> (/tmp/tmpixoa2c02.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn values.filter(function(value){\n\
    \t\treturn typeof(value)==='number'&&isFinite(value)&&value%1===0;\n\t});\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tlet filtered_values = []\n\tfor(let\
    \ val of values){\n\t\tif(typeof(val) == 'number'){\n\t\t\tfiltered_values.push(val)\n\
    \t\t}\n\t}\n\treturn filtered_values\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp3jb9xbt3.js:22:10)\n    at Object.<anonymous> (/tmp/tmp3jb9xbt3.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n    \
    \  filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp6a6pj794.js:22:10)\n    at Object.<anonymous> (/tmp/tmp6a6pj794.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n    \
    \  filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpmky9xyz0.js:22:10)\n    at Object.<anonymous> (/tmp/tmpmky9xyz0.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar filtered_values = [];\n\tfor(var\
    \ i in values){\n\t\tif(values[i].constructor == Number) filtered_values.push(values[i]);\n\
    \t}\n\treturn filtered_values;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpoekfbjeb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpoekfbjeb.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var out = [];\n  for(var i = 0;\
    \ i < values.length; i++){\n    if(typeof(values[i]) !== 'number'){\n      out.push(values[i]);\n\
    \    }\n  }\n  return out;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ {}, [], 'adasd' ]\n\nshould equal\n\n\
    [ 4, 9 ]\n    at test (/tmp/tmp41qe2avf.js:22:10)\n    at Object.<anonymous> (/tmp/tmp41qe2avf.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ {}, [], 'adasd' ],\n  expected: [ 4, 9\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(i){\n\
    \        return typeof(i) == 'number';\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpzrz9lhsr.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzrz9lhsr.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  const int_values = values.filter(val\
    \ => Number.isInteger(val));\n  if(int_values.length>0){\n    return int_values\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[]\n    at\
    \ test (/tmp/tmp252hcnid.js:18:10)\n    at Object.<anonymous> (/tmp/tmp252hcnid.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var filtered = [];\n  for(var i\
    \ = 0, len = values.length; i < len; i++){\n    if(typeof values[i] === \"number\"\
    )\n      filtered.push(values[i]);\n  }\n  return filtered;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpzy4ntisw.js:22:10)\n    at Object.<anonymous> (/tmp/tmpzy4ntisw.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(val){\n\
    \      return typeof val === 'number';\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpmop2awmi.js:18:10)\n    at Object.<anonymous> (/tmp/tmpmop2awmi.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(typeof values[i] === 'number'){\n\
    \            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpiw4yf2lr.js:22:10)\n    at Object.<anonymous> (/tmp/tmpiw4yf2lr.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return typeof v === 'number' && !isNaN(v);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmps0deholk.js:18:10)\n    at Object.<anonymous> (/tmp/tmps0deholk.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var newValues = []\n    for(var\
    \ i=0;i<values.length;i++){\n        if(typeof(values[i])===\"number\")\n    \
    \        newValues.push(values[i])\n    }\n    return newValues\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpowm7llpe.js:21:10)\n    at Object.<anonymous> (/tmp/tmpowm7llpe.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var filtered = [];\n    for(var\
    \ i = 0, len = values.length; i < len; i++){\n        var val = values[i];\n \
    \       if(typeof val === 'number'){\n            filtered.push(val);\n      \
    \  }\n    }\n    return filtered;\n}\n\n},{\"./utils\":22}],17:[function(require,module,exports){\n\
    module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp62435l9a.js:17\n},{\"./utils\":22}],17:[function(require,module,exports){\n\
    ^\n\nSyntaxError: Unexpected token '}'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (v){\n\
    \    return typeof v === 'number' && isFinite(v)\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpyd06_5xs.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyd06_5xs.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return _.filter(values, function(num){\n\
    \        return _.isInteger(num);\n    });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5douzirh.js:7\n    return _.filter(values, function(num){\n   \
    \ ^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmp5douzirh.js:7:5)\n\
    \    at test (/tmp/tmp5douzirh.js:18:20)\n    at Object.<anonymous> (/tmp/tmp5douzirh.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  var integers = [];\n  for(var i\
    \ = 0; i < values.length; i++){\n    var value = values[i];\n    if(typeof value\
    \ == 'number'){\n      integers.push(value);\n    } else if(isIterable(value)){\n\
    \      integers = integers.concat(filter_integers(value));\n    } else {\n   \
    \   integers.push(parseInt(value));\n    }\n  }\n  return integers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn3xh8ux_.js:12\n    } else if(isIterable(value)){\n           ^\n\
    \nReferenceError: isIterable is not defined\n    at filter_integers (/tmp/tmpn3xh8ux_.js:12:12)\n\
    \    at test (/tmp/tmpn3xh8ux_.js:27:20)\n    at Object.<anonymous> (/tmp/tmpn3xh8ux_.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var res = [];\n    values.forEach(function(value)\
    \ {\n      if(typeof value === 'number' && value % 1 === 0){\n        res.push(value);\n\
    \      }\n    });\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\tvar rv = []\n\tfor(var i=0; i<values.length;\
    \ i++){\n\t\tif(!isInteger(values[i])){\n\t\t\trv[rv.length] = values[i]\n\t\t\
    }\n\t}\n\treturn rv\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxa1zrlk8.js:9\n\t\tif(!isInteger(values[i])){\n\t\t^\n\nReferenceError:\
    \ isInteger is not defined\n    at filter_integers (/tmp/tmpxa1zrlk8.js:9:3)\n\
    \    at test (/tmp/tmpxa1zrlk8.js:22:20)\n    at Object.<anonymous> (/tmp/tmpxa1zrlk8.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  values = values.filter(function(item){\n\
    \    if(item.constructor === Number || item.constructor === String){\n      return\
    \ item % 1 === 0;\n    }\n    return item;\n  });\n  return values;\n}\n},{\"\
    ../util\":36}],20:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar util\
    \ = _dereq_('../util');\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjw0o735l.js:15\n},{\"../util\":36}],20:[function(_dereq_,module,exports){\n\
    ^\n\nSyntaxError: Unexpected token '}'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return _.filter(_.map(values,\
    \ function(x){\n        if ((_.isNumber(x) && (x % 1 === 0) && (x !== 0)) || (_.isString(x)\
    \ && (x === ''))) {\n            return x;\n        }\n    }));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoq421gm9.js:7\n    return _.filter(_.map(values, function(x){\n\
    \    ^\n\nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmpoq421gm9.js:7:5)\n\
    \    at test (/tmp/tmpoq421gm9.js:19:20)\n    at Object.<anonymous> (/tmp/tmpoq421gm9.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return _.filter(values, Number.isInteger)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsc320dnd.js:7\n  return _.filter(values, Number.isInteger)\n  ^\n\
    \nReferenceError: _ is not defined\n    at filter_integers (/tmp/tmpsc320dnd.js:7:3)\n\
    \    at test (/tmp/tmpsc320dnd.js:15:20)\n    at Object.<anonymous> (/tmp/tmpsc320dnd.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(x){\
    \ return isFinite(x) && parseInt(x) === x; });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return Number.isInteger(value);\n  });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(v){\n\
    \    return (typeof v === \"number\");\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmp_wpt03bs.js:18:10)\n    at Object.<anonymous> (/tmp/tmp_wpt03bs.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(value => isInteger(value))\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi_4w2655.js:7\n  return values.filter(value => isInteger(value))\n\
    \                                ^\n\nReferenceError: isInteger is not defined\n\
    \    at /tmp/tmpi_4w2655.js:7:33\n    at Array.filter (<anonymous>)\n    at filter_integers\
    \ (/tmp/tmpi_4w2655.js:7:17)\n    at test (/tmp/tmpi_4w2655.js:16:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpi_4w2655.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return Number.isInteger(value);\n  });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n\treturn filter(is_integer, values);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_riynnnz.js:7\n\treturn filter(is_integer, values);\n\t^\n\nReferenceError:\
    \ filter is not defined\n    at filter_integers (/tmp/tmp_riynnnz.js:7:2)\n  \
    \  at test (/tmp/tmp_riynnnz.js:14:20)\n    at Object.<anonymous> (/tmp/tmp_riynnnz.js:19:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(item){\n\
    \        return isInteger(item);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprjvkgm6j.js:8\n        return isInteger(item);\n        ^\n\nReferenceError:\
    \ isInteger is not defined\n    at /tmp/tmprjvkgm6j.js:8:9\n    at Array.filter\
    \ (<anonymous>)\n    at filter_integers (/tmp/tmprjvkgm6j.js:7:19)\n    at test\
    \ (/tmp/tmprjvkgm6j.js:18:20)\n    at Object.<anonymous> (/tmp/tmprjvkgm6j.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function\
    \ (item){\n        return typeof item === 'number' && !isNaN(item);\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpf7jx2wj3.js:18:10)\n    at Object.<anonymous> (/tmp/tmpf7jx2wj3.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(is_integer)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfx0m2qsk.js:7\n    return values.filter(is_integer)\n         \
    \                ^\n\nReferenceError: is_integer is not defined\n    at filter_integers\
    \ (/tmp/tmpfx0m2qsk.js:7:26)\n    at test (/tmp/tmpfx0m2qsk.js:15:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpfx0m2qsk.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function (value)\
    \ {\n    return typeof value === 'number' && !isNaN(value) && isFinite(value);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpsz6_q_ci.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsz6_q_ci.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter( isInteger\
    \ );\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmydpzx9n.js:7\n  return values.filter( isInteger );\n         \
    \               ^\n\nReferenceError: isInteger is not defined\n    at filter_integers\
    \ (/tmp/tmpmydpzx9n.js:7:25)\n    at test (/tmp/tmpmydpzx9n.js:15:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmydpzx9n.js:20:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(val){\n\
    \        return typeof val === 'number' && isFinite(val);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpjswnykwf.js:18:10)\n    at Object.<anonymous> (/tmp/tmpjswnykwf.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n\
    \    return isNumber(value) && value%1 === 0;\n  });\n}\n},{\"./is-number\":8}],8:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nmodule.exports = function isObject(value)\
    \ {\n  return !!(value && isObject(value));\n};\n},{\"./is-object\":9}],9:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nmodule.exports = function isObjectLike(value)\
    \ {\n  return !!(value && typeof value === 'object');\n};\n},{\"./is-object\"\
    :9}],10:[function(require,module,exports){\nvar isLength = require('./is-length');\n\
    \nmodule.exports = function isStringLike(value) {\n  return isLength(value.length);\n\
    };\n},{\"./is-length\":11}],11:[function(require,module,exports){\nmodule.exports\
    \ = function isLength(value) {\n  return typeof value == 'number' && value > -1\
    \ && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n};\n\n},{}],12:[function(require,module,exports){\n\
    var each = require('./each');\nvar some = require('./some');\nvar isObject = require('./is-object');\n\
    var contains = require('./contains');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\
    \nmodule.exports = {\n  each: each,\n  some: some,\n  isObject: isObject,\n  contains:\
    \ contains,\n  hasOwn: hasOwn\n};\n\n},{\"./each\":4,\"./is-object\":9,\"./contains\"\
    :10,\"./some\":13}],13:[function(require,module,exports){\nvar isArray = require('./is-array');\n\
    \nmodule.exports = function isArray(arg) {\n  return isArray(arg) || (arg && typeof\
    \ arg.length === 'number');\n};\n},{\"./is-array\":12}],14:[function(require,module,exports){\n\
    var isFunction = require('./is-function');\n\nmodule.exports = function isFunction(value)\
    \ {\n  return typeof value == 'function' || false;\n};\n},{\"./is-function\":15}],15:[function(require,module,exports){\n\
    module.exports = function isFunctional(value) {\n  return typeof value != 'undefined'\
    \ && value.length != undefined;\n};\n},{}],16:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nvar is = isObject({});\n\nmodule.exports\
    \ = function keys(obj) {\n  if (!isObject(obj)) return [];\n  var keys = [];\n\
    \  for (var key in obj) if (has(obj, key)) keys.push(key);\n  return keys;\n};\n\
    \nvar has = require('./has');\n},{\"./is-object\":9,\"./has\":17}],17:[function(require,module,exports){\n\
    module.exports = function has(obj, key) {\n  return obj != null && Object.prototype.hasOwnProperty.call(obj,\
    \ key);\n};\n},{}],18:[\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfzmwwl1q.js:11\n},{\"./is-number\":8}],8:[function(require,module,exports){\n\
    ^\n\nSyntaxError: Unexpected token '}'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n  return values.filter(val => {\n\
    \    return typeof val === 'number' && !Number.isNaN(val)\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpg0ih14ak.js:18:10)\n    at Object.<anonymous> (/tmp/tmpg0ih14ak.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\"\
    ){\n            result.push(values[i]);\n        }\n    }\n    return result;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpt8duxlov.js:23:10)\n    at Object.<anonymous> (/tmp/tmpt8duxlov.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
