name: HumanEval_143_words_in_sentence
language: js
prompt: "//You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example\
  \ 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\"\
  );\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"\
  there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"\
  Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"\
  ),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"\
  here is\"),\"is\");\n}\n\ntest();"
completions: ["    const result = [];\n    let num = 0;\n    const primes = [];\n\
    \    for(let i = 0; i < sentence.length; i++){\n        if(/[a-z]/g.test(sentence[i])){\n\
    \            primes.push(sentence[i]);\n            num++;\n        }\n    }\n\
    \    for(let i = 1; i < primes.length; i++){\n        for(let j = i; j < primes.length;\
    \ j++){\n            if(primes[i] !== primes[j] && primes[i] * primes[j] === num){\n\
    \                result.push(primes[i]);\n                result.push(primes[j]);\n\
    \            }\n        }\n    }\n    return result.join(\" \");\n}\n", "    //\
    \ Write your code here\n    let result=\"\";\n    for(let i=0;i<sentence.length;i++){\n\
    \        let letter=sentence[i];\n        if(i%2===0){\n            result+=letter;\n\
    \        }\n    }\n    return result;\n}\nwords_in_sentence(\"lets go for swimming\"\
    )\nwords_in_sentence(\"This is a test\")\nwords_in_sentence(\"Lets go for swimming\"\
    );\nwords_in_sentence(\"Lets go for swimming\");\nwords_in_sentence(\"Lets go\
    \ for swimming test\");\nwords_in_sentence(\"Lets go for swimming test\");\nwords_in_sentence(\"\
    Lets go for swimming test\");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\nwords_in_sentence(\"Lets go for swimming test \"\
    );\nwords_in_sentence(\"Lets go for swimming test \");\nwords_in_sentence(\"Lets\
    \ go for swimming test \");\n", "  var primes = [];\n  var result = \"\";\n  for(var\
    \ i=0;i<sentence.length;i++){\n    if(primes.includes(sentence[i])){\n      continue;\n\
    \    }\n    primes.push(sentence[i]);\n    for(var j=i;j<sentence.length;j++){\n\
    \      if(primes.includes(sentence[j])){\n        continue;\n      }\n      if(primes.includes(sentence[i]\
    \ + sentence[j])){\n        continue;\n      }\n      if(primes.includes(sentence[j]\
    \ + sentence[i])){\n        continue;\n      }\n      if(primes.includes(sentence[j]\
    \ - sentence[i])){\n        continue;\n      }\n      if(primes.includes(sentence[i]\
    \ - sentence[j])){\n        continue;\n      }\n      primes.pop();\n      result\
    \ += \" \" + sentence[i] + \" \" + sentence[j];\n    }\n  }\n  result = result.replace(/\\\
    s+$/,\"\").trim();\n  result = result.replace(/\\s+/g,\" \").trim();\n  return\
    \ result;\n}\n", "  const primes = Array.from(new Set(sentence.split(\" \").filter(s\
    \ => !isNaN(s)).map(s => Number.parseInt(s, 10))))\n  return primes.map(i => sentence.split(\"\
    \ \").filter(s => !isNaN(s).includes(i)).join(\" \")).join(\" \")\n}\n", "   \
    \ const map = new Map();\n    for(let word of sentence.split(\" \")){\n      \
    \  if(map.has(word)){\n            map.set(word,map.get(word)+1)\n        }else{\n\
    \            map.set(word,1)\n        }\n    }\n    for(let [key, value] of map){\n\
    \        if(value !== 1 && value!==Math.pow(2,map.get(key))){\n            return\
    \ key;\n        }\n    }\n}", "    let words = [...sentence.split(' ')];\n   \
    \ let result = \"\";\n    for(let i of words){\n        let j = i;\n        for(let\
    \ j of words){\n            if(isPrime(j) && i != j){\n                j++;\n\
    \            }\n        }\n        result += i;\n        result += \" \" + j +\
    \ \" \";\n    }\n    return result.trim();\n}\n", "    const set = new Set(sentence.split(\"\
    \ \").map(word => word.toLowerCase()))\n    \n    for(let i = 0; i < (Math.pow(2,sentence.length+1)-1);i++){\n\
    \        if(i === 0)\n            continue\n        let isPrime = true\n     \
    \   for(let j = 0;j < sentence.length;j++){\n            if((i & (1 << j)) ==\
    \ 0){\n                isPrime = false\n                break\n            }\n\
    \        }\n        if(isPrime){\n            let str = \"\"\n            for(let\
    \ j = 0;j < sentence.length;j++){\n                if((i & (1 << j)) == 0){\n\
    \                    str += \" \"+sentence[j]\n                }\n           \
    \ }\n            set.add(str)\n        }\n    }\n    let res = []\n    for(let\
    \ i = 0;i < set.size;i++){\n        if(set.has(i))\n            res.push(set.delete(i))\n\
    \    }\n    return res.join(\" \")\n}\n", "    const primes=[];\n    for(let i=2;i<100;i++){\n\
    \        const flag=true;\n        for(let j=0;j<primes.length;j++){\n       \
    \     if(primes[j]*i%primes[j]===0){\n                flag=false;\n          \
    \      break;\n            }\n        }\n        if(flag){\n            primes.push(i);\n\
    \        }\n    }\n    let result=[];\n    for(let i=0;i<primes.length;i++){\n\
    \        for(let j=0;j<sentence.length;j++){\n            if(sentence[j]===' '){\n\
    \                for(let k=0;k<primes.length;k++){\n                    if(k===i){\n\
    \                        result.push(sentence[j]);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result.join(\" \");\n}\nwords_in_sentence(\"lets go for swimming\"\
    )//\"go for\"\nwords_in_sentence(\"This is a test\")//\"is\"\nwords_in_sentence(\"\
    Lets go to swimming\")//\"go to\"\nwords_in_sentence(\"Lets go for swimming in\
    \ class\")//\"go for\"\nwords_in_sentence(\"Lets go for swimming in class\")//\"\
    go for\"\nwords_in_sentence(\"Lets go for swimming in class\")//\"go for\"\nwords_in_sentence(\"\
    Let's go for swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go for\
    \ swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go to swimming in\
    \ class\")//\"go to\"\nwords_in_sentence(\"Let's go to swimming in class\")//\"\
    go to\"\nwords_in_sentence(\"Let's go to swimming in class\")//\"go to\"\nwords_in_sentence(\"\
    Let's go for swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go for\
    \ swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go for swimming\
    \ in class\")//\"go for\"\nwords_in_sentence(\"Let's go for swimming in class\"\
    )//\"go for\"\nwords_in_sentence(\"Let's go for swimming in class\")//\"go for\"\
    \nwords_in_sentence(\"Let's go for swimming in class\")//\"go for\"\nwords_in_sentence(\"\
    Let's go for swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go for\
    \ swimming in class\")//\"go for\"\nwords_in_sentence(\"Let's go for swimming\
    \ in class\")//\"go for\"\nwords_in_sentence(\"Let's go for swimming in ", " \
    \   let arr=sentence.split(\" \");\n    arr.sort((a,b)=>a.length-b.length);\n\
    \    arr.map((v,i)=>{\n        if(isPrime(v))\n        return v;\n    })\n   \
    \ return arr.join(\" \")\n}\n", "    // Your code here\n}\nwords_in_sentence(\"\
    Let's go for swimming\")", "    let str = sentence.split(' ')\n    let arr = []\n\
    \    for(let i = 0; i < str.length; i++){\n        for(let j = i + 2; j < str.length;\
    \ j++){\n            if(str[i].length == str[j].length && str[i].indexOf(str[j])\
    \ >= 0){\n                arr.push(str[j])\n            }\n        }\n    }\n\
    \    console.log(arr)\n    return arr.join(' ')\n}\n\nwords_in_sentence('lets\
    \ go for swimming')\n</code>\n<|/ a |>\n<| a |>\nHere's a solution with some optimisation.\n\
    The first thing we notice is that it can be beneficial to only loop over the original\
    \ string once. With each iteration we only need to check if any word from the\
    \ current index+1 is prime. That's what we accomplish in the second loop. After\
    \ that we can use regex to find any words that are prime numbers and use those\
    \ to remove the letters from the original string.\n<code>", "    // Write your\
    \ code here\n    sentence.split(\" \").filter( (word) => word.length == 2 && word\
    \ != \"\" ).forEach( (word) => { \n        if( isPrimeNumber(word.length) ){\n\
    \            console.log(word)\n        }\n    })\n}\n", "    // write your code\
    \ here\n    if(sentence == null){\n        return \"null\"\n    }\n    var words\
    \ = []\n    for(var i = 0;i<sentence.length;i++){\n        if(words[words.length\
    \ - 1].len % i == 0){\n            words[words.length - 1].len++\n        }else{\n\
    \            var word = {\n                len: 1,\n                word: sentence[i]\n\
    \            }\n            words.push(word)\n        }\n    }\n    var output\
    \ = []\n    for(var i = 0;i<words.length;i++){\n        var newArray = []\n  \
    \      for(var j = 0;j<i;j++){\n            if(words[i].len % j == 0){\n     \
    \           newArray.push(words[j].word)\n            }\n        }\n        output.push(newArray.join(\"\
    \ \"))\n    }\n    return output.join(\" \")\n}\n\nvar words_in_sentence2 = function(sentence)\
    \ {\n    var words = [];\n    for (var i = 0; i <= sentence.length; i++) {\n \
    \       words.push({\n            len: 1,\n            word: sentence[i]\n   \
    \     });\n    }\n    var output = [];\n    for (var i = 0; i <= words.length;\
    \ i++) {\n        var newArray = [];\n        for (var j = 0; j <= i; j++) {\n\
    \            if (words[j].len % i == 0) {\n                newArray.push(words[j].word);\n\
    \            }\n        }\n        output.push(newArray.join(\" \"));\n    }\n\
    \    return output.join(\" \");\n};\n", "    if(sentence.length<=1) return sentence;\n\
    \    var result = '';\n    for(i=0;i<sentence.length;i++){\n        let temp =\
    \ sentence.substr(i,1)\n        let resultArray = temp.match(/\\b[a-z]{2,}\\b/ig)\n\
    \        resultArray.map(e=>result+=e)\n    }\n    return result.trim()\n}\n\n\
    words_in_sentence(\"lets\")\n\nwords_in_sentence(\"Let's go for swimming\")\n\n\
    words_in_sentence(\"lets\")\n\nwords_in_sentence(\"Let's go for swimming\")\n\n\
    words_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"lets go for\
    \ swimming\")\n\nwords_in_sentence(\"lets\")\n\nwords_in_sentence(\"Let's go for\
    \ swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets\")\n\nwords_in_sentence(\"\
    Let's go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nwords_in_sentence(\"lets go for swimming\")\n\nwords_in_sentence(\"\
    lets go for swimming\")\n\nword", "\tlet str = sentence.split(' ')\n\tlet res\
    \ = []\n\tfor(let i = 0; i < str.length; i++){\n\t\tlet temp = [str[i]]\n\t\t\
    for(let j = i; j < str.length; j++){\n\t\t\tif(!isPrime(str[j])){\n\t\t\t\ttemp.push(str[j])\n\
    \t\t\t}\n\t\t}\n\t\tres.push(temp.join(' '))\n\t}\n\treturn res\n}\n", "    return\
    \ sentence.split(' ').filter(function(word) {\n        return /^\\d+$/.test(word);\n\
    \    }).join(' ');\n}\n", "    // write code here\n    sentence = sentence.split(\"\
    \ \");\n    let result = \"\";\n    for (let i=0;i<sentence.length;i++){\n   \
    \     if(isPrime(i)){\n            result += (sentence.slice(0,i+1) + \" \");\n\
    \        }\n    }\n    return result.trim();\n}\n", "    let result = \"\";\n\
    \    const primes = new Array(100001).fill(false);\n    for(let i = 0; i < sentence.length;\
    \ i++){\n        primes[sentence[i]] = true;\n    }\n    for(let i = 0; i < primes.length;\
    \ i++){\n        if(!primes[i]){\n            continue;\n        }\n        const\
    \ j = 0;\n        while(j < sentence.length && primes[j]){\n            primes[j]\
    \ = false;\n            j++;\n        }\n        if(j == sentence.length){\n \
    \           result += sentence[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=javascript,string dscore=0 |>\n<| a dscore=0 tags=javascript,string\
    \ |>\nYou just need to iterate over the string and check for prime numbers in\
    \ your string. \nSince you have the string, the problem will be easy, just check\
    \ each word and if it is prime, then concatenate the string with the word.\n<code>",
  "    const arr = sentence.split(\" \");\n    let ret = \"\";\n    for(let i = 1;\
    \ i < arr.length; i++){\n        let count = 0;\n        for(let j = 0; j < i;\
    \ j++){\n            if(arr[j].indexOf(arr[i]) == 0){\n                count++;\n\
    \            }\n        }\n        if(count != 0){\n            ret += arr[i]\
    \ + \" \";\n        }\n    }\n    return ret.replace(/^\\s+|\\s+$/g,\"\");\n}",
  "\tlet words = [];\n\tfor(let i=0; i<sentence.length; i++){\n\t\tif(sentence.charAt(i)===\"\
    \ \"){\n\t\t\tlet s = sentence.replace(/\\s+/g,' ').split(\" \")\n\t\t\tfor(let\
    \ j=0; j<s.length; j++){\n\t\t\t\tif(isPrime(s[j])){\n\t\t\t\t\twords.push(s[j])\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\twords.push(sentence.charAt(i))\n\t\t}\n\t\
    }\n\treturn words.join(\" \")\n}\n", "    const re = new RegExp(/\\s+/);\n   \
    \ const arr = sentence.split(re).filter(word => word.length > 1);\n    let i =\
    \ 0;\n    let result = '';\n    while(i < arr.length){\n        while(result ===\
    \ '') result = arr[i] + ' ';\n        if(isPrime(result.length)){\n          \
    \  result = result.trim();\n            result = result.split(' ').map(word =>\
    \ word[0]) + result.split(' ').map(word => word[1]);\n        }\n        i++;\n\
    \    }\n    return result.trim();\n}\n", "    var primes = [],\n        prime\
    \ = 0,\n        primeCount = 2; // 2 is a prime number\n    for (var i = 0; i\
    \ < primeCount; i++){\n        primes.push(true);\n    }\n\n    for (var i = 0;\
    \ i < sentence.length; i++){\n        if (primes[prime]){\n            if (prime){\n\
    \                primeCount++;\n            }\n            primes[prime] = false;\n\
    \        }\n        prime = prime % primeCount;\n        primes[prime] = true;\n\
    \    }\n\n    return sentence.split(' ').filter(function(word){\n        return\
    \ primes[word];\n    }).join(' ');\n}\n", "    let result = [];\n    for(let word\
    \ of sentence.split(' ')) {\n        result.push(...prime_numbers(word.length));\n\
    \    }\n    return result.join(' ');\n}\n", "  // write your code here\n  var\
    \ outputArray = new Array();\n  for(var i=0; i<sentence.length; i++){\n    if(isPrime(sentence.length-i)){\n\
    \      outputArray.push(sentence.substring(i, i+1));\n    }\n  }\n  return outputArray.join(\"\
    \ \");\n}\n", "\tconst strArr = sentence.split(' ');\n\tlet res = [];\n\tlet lengthArr\
    \ = strArr.map(str => str.length);\n\tlengthArr.forEach((len) => {\n\t\tif(res.includes(len)\
    \ && len%2 === 1){\n\t\t\treturn\n\t\t} else {\n\t\t\tres.push(len);\n\t\t}\n\t\
    });\n\treturn strArr.map(str => str.split('')).reduce((prev, curr) => {\n\t\t\
    return prev.concat(curr);\n\t}, []);\n}\n", "    const dictionary = {};\n    for(const\
    \ word of sentence.split(\" \")){\n        if(word.length >= 2 && dictionary.hasOwnProperty(word))\
    \ {\n            dictionary[word]++;\n        } else {\n            dictionary[word]\
    \ = 1;\n        }\n    }\n    \n    for(let i = 2; true; i++) {\n        if(!dictionary.hasOwnProperty(i.toString())){\n\
    \            break;\n        }\n    }\n    \n    let result = \"\";\n    for(let\
    \ i = 1; i < i; i++){\n        if(dictionary.hasOwnProperty(i.toString())){\n\
    \            result += i.toString();\n            delete dictionary[i];\n    \
    \    }\n    }\n    \n    return result;\n}\n", "    let re = new RegExp(\"(^|\\\
    \\s)([a-z]{3,9})(\\\\s|$)\", \"g\");\n    let arr = sentence.match(re);\n    return\
    \ arr.map((el)=>{\n        return el.replace(/\\s/g,\"\");\n    });\n}\n", " \
    \   var word_list = [],\n        chars = sentence.split(' ');\n    for (var i\
    \ = 0; i < chars.length; i++){\n        var chars0 = chars[i].split('');\n   \
    \     var chars1 = chars0.map((char) => char.charCodeAt(0));\n        for(var\
    \ j = 0; j < chars1.length; j++){\n            if(chars1[j] > 43 && chars1[j]\
    \ < 65){\n                chars0.splice(j, 1);\n                j--;\n       \
    \     }\n        }\n        for(var k = 0; k < chars0.length; k++){\n        \
    \    var number = ((chars1[k] - 33)%26) + 1;\n            if(!word_list.includes(number)){\n\
    \                word_list.push(number);\n            }\n        }\n    }\n  \
    \  word_list.sort();\n    return word_list.join(' ');\n}\n", "    if(sentence.length\
    \ == 0) return null;\n    let arr = sentence.split(' ').sort();\n    return arr.reduce((a,\
    \ b) => a.concat(b), []).filter(function(item, index, arr) {\n        return arr.indexOf(item)\
    \ == index;\n    }).join(' ');\n}\n\nmodule.exports = {\n  words_in_sentence:\
    \ words_in_sentence\n};\n\n},{}],6:[function(require,module,exports){", "    let\
    \ arr = sentence.split(\" \");\n    let arr2 = [...arr];\n    for(let i of arr2){\n\
    \        if(i.length%2===0){\n            arr.splice(i,1)\n        }\n    }\n\
    \    return arr2.join(\" \")\n}\n", "    // Solution 1 using recursion\n    function\
    \ isPrime(number, result){\n        if(number==0){\n            return true;\n\
    \        }\n        if(number<=0){\n            return false;\n        }\n   \
    \     if(number%2==0){\n            return isPrime(number/2, result);\n      \
    \  }\n        return isPrime(number/2, result) || (isPrime(number, result) &&\
    \ isPrime(number-1, result));\n    }\n    function getPrimes(number){\n      \
    \  if(number<=0){\n            return [];\n        }\n        if(number<2){\n\
    \            return [number];\n        }\n        let result = [];\n        for(let\
    \ i=2; i<number; i++){\n            if(isPrime(number, result)){\n           \
    \     result.push(i);\n            }\n        }\n        return result;\n    }\n\
    \    // Solution 1 using map()\n    \n    // Solution 1 using recursion and reduce()\n\
    \    function isPrime(number){\n        if(number==0){\n            return true;\n\
    \        }\n        if(number<=0){\n            return false;\n        }\n   \
    \     if(number%2==0){\n            return isPrime(number/2, true);\n        }\n\
    \        return isPrime(number/2, true) || (isPrime(number, true) && isPrime(number-1,\
    \ true));\n    }\n    \n    function getPrimes(number){\n        if(number<=0){\n\
    \            return [];\n        }\n        if(number<2){\n            return\
    \ [number];\n        }\n        let result = [];\n        for(let i=2; i<number;\
    \ i++){\n            if(isPrime(number, true)){\n                result.push(i);\n\
    \            }\n        }\n        return result;\n    }\n    // Solution 1 using\
    \ filter()\n    let primesFound = [];\n    let primes = sentence.split(\" \");\n\
    \    for (let i = 0; i < primes.length; i++) {\n        if(getPrimes(primes[i]).length==1){\n\
    \            primesFound.push(primes[i]);\n        }\n    }\n    \n    return\
    \ primesFound.join(\" \");\n    \n    // Solution 2 using filter()\n    let primes\
    \ = sentence.split(\" \").filter(function(n){\n        return getPrimes(n).length==1;\n\
    \    });\n    return primes.join(\" \");\n}\n", "    // Split sentence by space\n\
    \    let arr = sentence.split(\" \");\n\n    // Filter out only prime numbers\
    \ (not whole numbers)\n    let primeArr = arr.filter(n => !isNaN(n));\n\n    //\
    \ Order of words must be same as original sentence\n    return primeArr.join(\"\
    \ \");\n}\n<|/ file dstars=1 ext=.js |>\n<| c |>\nAh, I didn't think of that.\
    \ That's a great idea!\n<|/ c |>\n<| a dscore=2 |>\nI wrote a short javascript\
    \ algorithm to achieve that with linear complexity.\n<code>\nconst prime = n =>\
    \ {\n  if(n<2) return false;\n  let i = 3, nPrime = 2, found = false;\n  while(i*i\
    \ <= n) {\n    found = false;\n    for(let j = 2; j < i; j++) {\n      if((i*j)%n\
    \ === 0) found = true;\n    }\n    if(found) nPrime = i;\n    i += 1;\n  }\n \
    \ return nPrime;\n}\n</code>\nThe above function will return all the prime factors\
    \ up to a number. It will be faster than using the sieve of Eratosthenes.\nThen\
    \ use these prime numbers to form the word sequence.\n<code>\nconst getWords=\
    \ (sentence) => {\n  let primes = prime(sentence.length);\n  let words = sentence.split(\"\
    \ \");\n  let result = [];\n  for(let i = 0; i < primes.length; i++) {\n    result.push(words[primes[i]]);\n\
    \  }\n  return result.join(\" \");\n}\n", "\tconst letters = sentence.split('').map(char\
    \ => char.charCodeAt(0));\n\tlet primes = [];\n\tlet prime = 1;\n\n\tfor (let\
    \ i = 0; i < letters.length; i++) {\n\t\tprime = Math.sqrt(letters[i] + 1);\n\t\
    \tif (primes.includes(prime)) continue;\n\t\tprimes.push(prime);\n\t}\n\n\treturn\
    \ letters.join('').split(``).reduce((res, char, i) => {\n\t\tif (primes[i] ==\
    \ prime) res.push(char);\n\t\treturn res;\n\t}, []);\n}\n", "    var result =\
    \ \"\";\n    var words = sentence.toLowerCase().split(\" \");\n    var primes\
    \ = new Array();\n    for(var i =0;i<words.length;i++){\n        if(isPrime(words[i].length)){\n\
    \            primes.push(words[i].length);\n        }\n    }\n    for(var j=0;j<primes.length;j++){\n\
    \        for(var k=0;k<words.length;k++){\n            if(primes[j] === words[k].length){\n\
    \                result = result + \" \" + words[k];\n            }\n        }\n\
    \    }\n    console.log(result);\n    return result;\n}", "    // write code here\n\
    \    console.log(sentence.length)\n    let newStr=''\n    for(let i=0; i<sentence.length;\
    \ i++){\n        newStr+=sentence[i]\n        for(let j=i+1; j<sentence.length;\
    \ j++){\n            for(let k=1; k<(Math.sqrt(sentence.length)-1); k++){\n  \
    \              if(j%k==0){\n                    newStr+=' '\n                \
    \    break\n                }\n            }\n            newStr+=sentence[j]+'\
    \ '\n        }\n    }\n    return newStr\n}\n\nwords_in_sentence('is')\nwords_in_sentence('lets')\n\
    words_in_sentence('let\\'s go')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimming')\nwords_in_sentence('lets\
    \ go for swimming')\nwords_in_sentence('lets go for swimm", "\tlet arr = sentence.split(\"\
    \ \");\n\tlet res = \"\";\n\tfor(let i = 0; i < arr.length; i++){\n\t\tlet prime\
    \ = true;\n\t\tfor(let j = 1; j <= arr[i].length; j++){\n\t\t\tif(arr[i].charAt(j)\
    \ !== arr[i].charAt(j-1)){\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif(prime){\n\t\t\tres += \" \" + arr[i];\n\t\t}\n\t}\n\treturn res.replace(/^\\\
    s+|\\s+$/g,\"\");\n}\n", "    let arr = sentence.split(' ')\n    arr.sort((a,b)=>a-b)\n\
    \    let result = []\n    for(let i=0;i<arr.length;i++){\n        if(isPrime(arr[i])){\n\
    \            result.push(arr[i])\n        }\n    }\n    return result.join(' ')\n\
    }\n", "\tlet regex = /\\w+/g;\n\tlet arr = sentence.match(regex);\n\tlet ans =\
    \ [];\n\tfor(let i=0;i<arr.length;i++){\n\t\tlet count = 0;\n\t\tlet temp = arr[i];\n\
    \t\twhile(temp.includes(\"_\")){\n\t\t\ttemp = temp.replace(/_/g, \" \");\n\t\t\
    \tcount += 1;\n\t\t}\n\t\tif(count%1 === 0){\n\t\t\tans.push(arr[i]);\n\t\t}\n\
    \t}\n\treturn ans.join(\" \");\n}\n\nwords_in_sentence(\"The dog jumped over the\
    \ runway.\");\nwords_in_sentence(\"A man, a plan, a canal: Panama\");\nwords_in_sentence(\"\
    The dog ate my homework\");\nwords_in_sentence(\"swimming is a great place\");\n",
  "    // code here\n};\n\n", "    if(sentence.length <= 0){\n        return 'No words\
    \ in the sentence'\n    }\n\n    let wordArr = [];\n    let word = '';\n    let\
    \ length = 0;\n\n    for(let i = 0; i < sentence.length; i++){\n        word =\
    \ sentence[i];\n        length = sentence[i].length\n\n        if(wordArr.some(w\
    \ => w.startsWith(word))){\n            wordArr.push(word)\n        }\n      \
    \  else if(word.length == length){\n            wordArr.push(word)\n        }\n\
    \        else if(word.length < length){\n            for(let j = 0; j < length;\
    \ j++){\n                let newWord = word.substring(0, j)\n                let\
    \ newLength = length-1\n                if(newWord !== wordArr.find(w=>w.startsWith(newWord))){\n\
    \                    wordArr.push(newWord)\n                }\n            }\n\
    \        }\n    }\n\n    let sortedArr = wordArr.sort();\n\n    let newWord =\
    \ '';\n    for(let j = 0; j < sortedArr.length; j++){\n        newWord = newWord\
    \ + sortedArr[j] + ' '\n    }\n\n    return newWord.trim();\n}\n\nlet sentence\
    \ = \"lets go for swimming\"\nlet result = words_in_sentence(sentence)", "  const\
    \ strArr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0;i<strArr.length;i++){\n\
    \    primes.push(i);\n  }\n  let newStr = \"\";\n  for (let i = 0;i<primes.length;i++){\n\
    \    newStr += strArr[primes[i]];\n  }\n  return newStr;\n}\n", "    const map\
    \ = new Map();\n    sentence.split(\" \").forEach( word => {\n        let number\
    \ = map.get(word);\n        if (number === undefined) {\n            number =\
    \ 2;\n        } else {\n            number++;\n        }\n        map.set(word,number);\n\
    \    });\n    \n    sentence = sentence.toLowerCase();\n    const primes = new\
    \ Array(Math.ceil(Math.sqrt(sentence.length)));\n    for (let i = 0; i < primes.length;\
    \ i++){\n        primes[i] = 0;\n    }\n    \n    sentence.split(\" \").forEach(\
    \ word => {\n        primes[map.get(word)] = primes[map.get(word)]+1;\n    });\n\
    \    \n    let res = \"\";\n    for (let i = 1; i <= primes.length; i++){\n  \
    \      if (primes[i] === 0){\n            break;\n        } else {\n         \
    \   res += \" \" + i;\n        }\n    }\n    \n    res = res.trim();\n    \n \
    \   if (sentence.length !== res.length){\n        res = \"\"\n    }\n    return\
    \ res;\n}\n", "    let arr = [];\n    for(let i = 0; i < sentence.length; i++){\n\
    \        arr.push(sentence.slice(i,i+1));\n    }\n    let arr2 = [];\n    for\
    \ (let i = 0; i < arr.length; i++){\n        let count = 0;\n        for (let\
    \ j = 0; j < arr[i].length; j++) {\n            for (let k = 0; k < arr.length;\
    \ k++) {\n                if(arr[i][j] == arr[k][j]){\n                    count++;\n\
    \                }\n            }\n        }\n        if(count == arr[i].length){\n\
    \            arr2.push(arr[i]);\n        }\n    }\n    return arr2.join(' ');\n\
    }\n", "    let arr = sentence.split(\" \");\n    let new_arr = arr.map((e,i)=>{\n\
    \        let new_e = e.split(\"\");\n        let n = new_e.map(e=>{\n        \
    \    return (e%2==0 ? \"#\" : \"\") + e;\n        });\n        return new_e.join(\"\
    \ \")\n    });\n    let new_s = new_arr.join(\" \")\n    let primes = new Set(new_s.split(\"\
    \ \").map(e=>parseInt(e))\n    let result = []\n    for (let e of primes){\n \
    \       let arr = new_s.split(\" \").map(e=>parseInt(e))\n        arr.push(e)\n\
    \        let new_arr = arr.map((e,i)=>{\n            let new_e = e.split(\"\"\
    );\n            let n = new_e.map(e=>{\n                return (e%2==0 ? \"#\"\
    \ : \"\") + e;\n            });\n            return new_e.join(\" \")\n      \
    \  })\n        new_s = new_arr.join(\" \")\n        result.push(new_s)\n    }\n\
    \    return result.join(\"\\n\").trim()\n}\n", "    sentence = sentence.split(\"\
    \ \");\n    let result = [];\n    let maxLength = 0;\n    \n    for(let i in sentence){\n\
    \        let word = sentence[i];\n        let length = word.length;\n        if(length\
    \ != 0){\n            while(Math.sqrt(length) < maxLength){\n                maxLength\
    \ += 2;\n            }\n            if(result.includes(word)){\n             \
    \   continue;\n            }\n            for(let j = 1; j < maxLength; j++){\n\
    \                let primeCheck = true;\n                for(let k = 0; k < j;\
    \ k++){\n                    if(j % Math.pow(2, k) == 0){\n                  \
    \      primeCheck = false;\n                    }\n                }\n       \
    \         if(primeCheck){\n                    result.push(word);\n          \
    \      }\n            }\n        }\n    }\n    \n    let finalResult = \"\";\n\
    \    for(let i in result){\n        finalResult += result[i];\n        if(i !=\
    \ result.length - 1){\n            finalResult += \" \";\n        }\n    }\n \
    \   return finalResult;\n}\n", "    var newArray=[];\n    sentence.split(\" \"\
    ).map(e=>{\n        var arr=e.split(\"\").map(e=>e.charCodeAt(0));\n        var\
    \ prime=arr.filter(e=>!isNaN(e)).length;\n        if(prime%2===1){\n         \
    \   newArray.push(e);\n        }\n    });\n    return newArray.join(\" \");\n\
    };\nwords_in_sentence(\"This is a test\");", "    var n = sentence.split(' ').length;\n\
    \    var str = \"\";\n    for(var i=0;i<=n;i++){\n        for(var j=1;j<=n;j+=i){\n\
    \            if(i!=j && str.length>0){\n                str += \" \";\n      \
    \      }\n            if(i==j && str.length>0){\n                str += i;\n \
    \           }\n        }\n    }\n    return str\n}\n", "    let letters = sentence.split(\"\
    \ \");\n    let newWords = [];\n    for (let i = 0; i < letters.length; i++) {\n\
    \        if (primeNumber.test(letters[i].length)) {\n            newWords.push(letters[i]);\n\
    \        }\n    }\n    return newWords.join(\" \");\n}\n", "\tlet words = sentence.split('\
    \ ').map(s => s.toLowerCase());\n\tlet wordsInOrder = [];\n\tlet primes = [];\n\
    \tlet index = 0;\n\tlet prime = true;\n\twhile(prime){\n\t\tlet primes = findPrime(index\
    \ + 1, words.length);\n\t\tif(primes.indexOf(words[index])!=-1){\n\t\t\tprime\
    \ = true;\n\t\t}else{\n\t\t\tprime = false;\n\t\t}\n\t\tprimes.push(words[index]);\n\
    \t\tindex++;\n\t}\n\tlet wordsInOrder = [];\n\tfor(let i=0; i<words.length; i++){\n\
    \t\tlet num = 0;\n\t\tlet index = 0;\n\t\tfor(let j=0; j<primes.length; j++){\n\
    \t\t\tif(words[i].toUpperCase() === primes[j].toUpperCase()){\n\t\t\t\tindex++;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(primes[index]){\n\t\t\twordsInOrder.push(words[i]);\n\
    \t\t}\n\t}\n\treturn wordsInOrder.join(' ');\n}\n", "    var words=[];\n    sentence.split(\"\
    \ \").forEach(function(word){\n        var len=word.length;\n        if(len%2==1){\n\
    \            words.push(word);\n        }\n    });\n    return words.join(\" \"\
    );\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<| c |>\nHow would you\
    \ use that to check whether the word length is prime or not?\n<|/ c |>\n<| c |>\n\
    A simple for loop is sufficient. Use a boolean variable to determine whether the\
    \ word is prime or not. In the loop, you need to check whether the length of the\
    \ word is prime or not. Do you understand what I mean?\n<|/ c |>\n<| c |>\nSorry,\
    \ I was referring to the `len%2==1` part. What are you checking for then?\n<|/\
    \ c |>\n<| c |>\nThat will determine whether the word length is even or odd. If\
    \ it is even, then the word is not prime and if it is odd, then the word is prime.\
    \ You can read more about how this condition works here: https://en.wikipedia.org/wiki/Primality_test\n\
    <|/ c |>\n<| a tags=string,javascript,arrays |>\nIf all you need to know if the\
    \ word is prime or not, you could use String.prototype.match to find all of the\
    \ words in the string:\n\n<code>", "    let arr1 = [];\n    let arr2 = [];\n \
    \   let lengths = [];\n    for (let i = 0; i < sentence.length; i++){\n      \
    \  if (sentence[i] === \" \"){\n            arr2.push(arr1);\n            arr1\
    \ = [];\n        } else {\n            arr1.push(sentence[i]);\n        }\n  \
    \  }\n    arr2.push(arr1);\n    arr2.forEach( (arr) => lengths.push(arr.length)\
    \ );\n    \n    console.log(lengths);\n\n    let newArr = [];\n    for (let i\
    \ = 0; i < lengths.length; i++){\n        for (let j = 0; j < lengths.length;\
    \ j++){\n            if (j !== i && (i !== j && lengths[j] === lengths[i])){\n\
    \                newArr.push([i, j]);\n            }\n        }\n    }\n\n   \
    \ let res = \"\";\n    for (let i = 0; i < newArr.length; i++){\n        res +=\
    \ sentence[newArr[i][0]] + \" \";\n        res += sentence[newArr[i][1]];\n  \
    \  }\n\n    console.log(res);\n    return res;\n}\nwords_in_sentence(\"lets go\
    \ for swimming\");</code>\n<|/ a tags=javascript,primes,algorithm,string |>\n\
    <| c |>\nThanks for the help!\n<|/ c |>\n<| a tags=javascript,primes,algorithm,string\
    \ |>\nHere is a solution which does not use recursion.\n\n<code>", "  let res\
    \ = \"\";\n  \n  for (let i = 2; i <= Math.sqrt(sentence.length); i++) {\n   \
    \ if (sentence === res.trim()) return res;\n    \n    for (let j = 1; j <= sentence.length;\
    \ j+=i) {\n      if (sentence[j] === \" \") {\n        res += \" \" + sentence[j-1];\n\
    \      }\n    }\n  }\n  \n  return res;\n}\n", "\tlet arr = sentence.split(' ');\n\
    \tlet res = [];\n\tlet len = arr.length;\n\tfor (let i = 1; i < len; i++) {\n\t\
    \tlet count = 0;\n\t\tlet curr = arr[i];\n\t\tlet prec = arr[i-1];\n\t\tfor (let\
    \ j = i; j < len; j++) {\n\t\t\tif (curr !== prec && curr.includes(arr[j])){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 2 || count === 3) {\n\t\t\t\
    res.push(curr);\n\t\t}\n\t}\n\treturn res.join(' ');\n}\n", "  let word_array1\
    \ = sentence.split(' ').map(function(e){\n    return e.trim();\n  });\n  let newArray\
    \ = [];\n  for (let i=0; i<word_array1.length; i++){\n    for (let j=1; j<word_array1.length;\
    \ j++){\n      if(j % word_array1[i].length == 0){\n        if(j > word_array1[i].length){\n\
    \          newArray.push(word_array1[i]);\n        }\n      }\n    }\n  }\n  return\
    \ newArray.join(' ');\n}\n", "    // return string\n}\n\nmodule.exports.words_in_sentence\
    \ = words_in_sentence;\n</cell>\n<cell>", "    let arr = sentence.split(\" \"\
    );\n    let len = arr.length;\n    let res = [];\n    for(let i = 1; i < len;\
    \ i++){\n        if(checkPrimeNum(arr[i])) {\n            res.push(arr[i]);\n\
    \        }\n    }\n    return res.join(\" \");\n}\n", "    const result = []\n\
    \    const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n    sentence.split(\"\
    \ \").forEach(word => {\n        if (primes.has(word.length)){\n            result.push(word)\n\
    \        }\n    })\n    return result.join(\" \")\n}\n", "    if(sentence.length\
    \ == 0){\n        return sentence;\n    }\n    const arr = sentence.split(\" \"\
    );\n    \n    let prime = [];\n    let primeIndex = 0;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        const charArr = arr[i].split(\"\");\n        if(charArr.length\
    \ == 1){\n            prime[primeIndex] = charArr[0];\n            primeIndex++;\n\
    \        }\n        else{\n            for(let j = charArr.length-1; j >= 0; j--){\n\
    \                const isPrime = true;\n                for(let k = 0; k < primeIndex;\
    \ k++){\n                    if(charArr.charAt(j) == prime[k].charAt(j)){\n  \
    \                      isPrime = false;\n                        break;\n    \
    \                }\n                }\n                if(isPrime){\n        \
    \            prime[primeIndex] = charArr.charAt(j);\n                    primeIndex++;\n\
    \                }\n            }\n        }\n    }\n    prime = prime.filter(function(val){return\
    \ val.length > 0 && val.length <= 100;});\n    let newString = \"\";\n    for(let\
    \ i = 0; i < prime.length; i++){\n        newString += prime[i];\n    }\n    return\
    \ newString;\n}\n", "  let words = []\n  let chars = sentence.split('')\n  chars.forEach(char\
    \ => {\n    let char = char.split('')\n    if(char.length ==  3){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  4){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  5){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  6){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  7){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  8){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  9){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  10){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  11){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  12){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  13){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  14){\n      char.forEach(c\
    \ => {\n        if(chars.indexOf(c) ==  -1){\n          words.push(char.join(''))\n\
    \        }\n      })\n    }\n    if(char.length ==  15){", "    let arr = sentence.split('\
    \ ');\n    let n = arr.reduce((acc,item)=>{\n        return acc*item.length;\n\
    \    },1);\n    for(let i=2;i<n;i++){\n        if(arr.filter((item) => (item.length%i)).length===0)\n\
    \            break;\n    }\n    let result = arr.filter((item) => (item.length%i)).join(\"\
    \ \");\n    return result;\n}", "    let strArr = sentence.split(\" \");\n   \
    \ \n    let str = \"\";\n    for(let i = 0;i < strArr.length;i++){\n        let\
    \ flag = true;\n        for(let j = 0;j < strArr.length;j++){\n            if(i!=j\
    \ && strArr[j].length>strArr[i].length){\n                flag = false;\n    \
    \        }\n        }\n        if(flag){\n            str += strArr[i] + \" \"\
    ;\n        }\n    }\n    return str;\n}", "    return sentence.split(\" \").reduce((words,word)\
    \ => {\n        if(words.length%word.length===0) return words;\n        if(words.includes(word))\
    \ return;\n        if(words.includes(word.toUpperCase())) return  words;\n   \
    \     if(words.includes(word.toLowerCase())) return  words;\n        let tempArray\
    \ = word.toUpperCase().split(\"\").reduce((temp,i)=>{\n            if(i<temp.length)\
    \ return i;\n            return temp;\n        },0)\n        if(tempArray===word.length)\
    \ return words;\n        tempArray = word.toLowerCase().split(\"\").reduce((temp,i)=>{\n\
    \            if(i<temp.length) return i;\n            return temp;\n        },0)\n\
    \        if(tempArray===word.length) return words;\n        tempArray = word.split(\"\
    \").reduce((temp,i)=>{\n            if(i<temp.length) return i;\n            return\
    \ temp;\n        },0)\n        if(tempArray===word.length) return words;\n   \
    \ },[]);\n}", "    var result = ''\n    var primes = []\n    sentence.split(\"\
    \ \").map(word => {\n        primes.push(parseInt(word))\n    })\n    primes.map(\
    \ prime => {\n        if (prime*2 != prime) {\n            var nums = []\n   \
    \         for (var i = prime - 2; i <= prime; i++) {\n                nums.push(i)\n\
    \            }\n            nums.map( n => {\n                result += sentence\
    \ + ' '\n            })\n        }\n    })\n    return result\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis answer doesn't answer the OP's question (I realize: OP's\
    \ question isn't well worded, but \"I have to return an array\" is not an answerable\
    \ question.)\n<|/ c |>\n<| c |>\nI realized that after I saw the second example.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    const n = sentence.split('\
    \ ').length;\n    for(let i = 1; i <= Math.sqrt(n); i++){\n        let count =\
    \ 0;\n        let index = -1;\n        for(let j = 0; j < n; j++){\n         \
    \   index = sentence.indexOf(sentence[j], index + 1);\n            if(index ===\
    \ -1) break;\n            if(index%i === 0){\n                count++;\n     \
    \       }\n        }\n        if(count%i === 0) return sentence.slice(index+1);\n\
    \    }\n}\n", "    // Write your code here\n    \n}\n", "    var result = [];\n\
    \    \n    var current = '';\n    var prime = false;\n    var i = 0;\n    \n \
    \   while (i < sentence.length){\n        current = sentence.charAt(i);\n    \
    \    prime = true;\n        \n        while (prime){\n            current = sentence.charAt(i);\n\
    \            if (current === \" \") prime = false;\n            i++;\n       \
    \ }\n        \n        if (result.indexOf(current) < 0) result.push(current);\n\
    \        i++;\n    }\n    \n    return result.join(\" \");\n};\n", "    const\
    \ str = sentence.toLowerCase().split(\" \");\n    \n    let str2 = str.map(word\
    \ => word.length);\n    let primes = primeFactors(str2);\n    \n    return str.filter(\
    \ word => primes.includes(word.length) ).join(\" \");\n}\n", "    // Write your\
    \ code here\n    var result = \"\";\n    var arr = sentence.split(\" \");\n  \
    \  for(var i = 0; i < arr.length; i++){\n        var count = 0;\n        for(var\
    \ j = i+1; j < arr.length; j++){\n            if(parseInt(arr[i]) == parseInt(arr[j])){\n\
    \                count++;\n            }\n        }\n        if(count % 2 != 0){\n\
    \            result += arr[i] + \" \";\n        }\n    }\n    return result;\n\
    }\nwords_in_sentence(\"This is not a test\");\nwords_in_sentence(\"lets go for\
    \ swimming\");\n", "    let result = \"\";\n    for(let word of sentence.split('\
    \ ')){\n        if(isPrimeNumber(word.length)){\n            result += word;\n\
    \        }\n    }\n    return result.trim();\n}\n", "  var re = new RegExp(/\\\
    s+/);\n  var words = sentence.split(re);\n  var result = [];\n\n  words.forEach(function(word)\
    \ {\n    if(is_prime(word.length)) {\n      result.push(word);\n    }\n  });\n\
    \n  return result.join(' ');\n}\n", "    if(sentence.length <= 0)\n        return\
    \ \"\";\n\n    var primes = [];\n    for(var i = 0; i <= 100; i++) {\n       \
    \ primes.push(i);\n    }\n\n    var ans = \"\";\n    var len = sentence.length;\n\
    \    var lastChar = sentence[len - 1];\n\n    for(var i = 0; i <= len; i++){\n\
    \        primes = primes.filter(function(value){\n            if(value == i){\n\
    \                return false;\n            }\n        });\n        if(primes.includes(i)){\n\
    \            ans = ans + \" \" + sentence.substr(i, 1);\n        }\n    }\n  \
    \  if(ans.includes(lastChar)){\n        ans = ans.substr(0, ans.indexOf(lastChar)\
    \ + 1);\n    }\n    return ans;\n}\n", "    return sentence.split(\" \").filter(w\
    \ => w.match(/[a-z]/i))\n        .map( w => {\n            if((w.match(/\\d/))\
    \ || (parseInt(w) > 11 || parseInt(w) < 1)){\n                return \"is\"\n\
    \            }else{\n                return w\n            }\n        })\n}\n",
  "    const str = sentence.trim();\n    const words = str.split(' ');\n\n    // return\
    \ the first character in each string that is a prime number\n    const primes\
    \ = words\n        .map(w => w.charCodeAt(0))\n        .filter(c => c.toString().indexOf('.')\
    \ == -1) // not integer\n        .filter(c => c.toString().indexOf('.') === -1\
    \ && c >= 48 && c <= 57)\n        .filter(c => c % 2 === 0 && (c % 3 === 0 ||\
    \ c % 5 === 0)); // not a multiple of 3 or 5\n\n    const result = primes.map(p\
    \ => String.fromCharCode(p)).join(' ');\n    return result;\n}\n", "    return\
    \ sentence.split(\" \")\n}\nvar words_in_sentence_2 = function(sentence) {\n \
    \   let arr = sentence.split(\" \");\n    let result = \"\";\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        result += (arr[i]).split(\"\").filter(e =>\
    \ e.match(/\\d/)).join(\" \")\n    }\n    return result;\n}\n", "    // write\
    \ your code here\n    // Write your code here\n    if(sentence.length<1){\n  \
    \      return [];\n    }\n    let res = [];\n    for(let i=0;i<sentence.length;i++){\n\
    \        let temp = sentence.split(\" \");\n        let temp2 = [];\n        for(let\
    \ j=0;j<temp.length;j++){\n            if(temp[j].length>=2){\n              \
    \  if(temp[j]!=temp[j].split(\"\").reverse().join(\"\")){ \n                 \
    \   temp2.push(temp[j]);\n                }\n            }\n        }\n      \
    \  if(temp2.length!=0){\n            res.push(temp2[0]);\n            for(let\
    \ j=1;j<temp2.length;j++){\n                res.push(temp2[j]);\n            }\n\
    \        }\n    }\n    return res;\n}\n", "\tvar res = \"\";\n\tfor(var i = 1\
    \ ; i < sentence.length ; i++){\n\t\tvar str = sentence.split(\" \").filter(function(e){\n\
    \t\t\treturn e == i;\n\t\t})\n\t\tvar new_str = str.filter(function(e){\n\t\t\t\
    return e.length !== 1 && ! /^[a-z]/.test(e);\n\t\t})\n\t\tres = new_str.join(\"\
    \ \")\n\t}\n\treturn res\n}\n", "    let numPrimes = calculatePrimes(sentence);\n\
    \    let newWords = \"\";\n    for(let i = 0; i <= numPrimes.length; i++){\n \
    \       newWords += sentence.slice(0,i+1) + \" \";\n    }\n    return newWords;\n\
    }", "\tlet words=sentence.split(\" \");\n\treturn words.filter(word=>word.length===Math.sqrt(word.length));\n\
    }\n", "    // code here\n    let words = sentence.split(' ')\n    let newString\
    \ = ''\n    for(let i=0;i<words.length;i++){\n        let str = words[i]\n   \
    \     let num = str.length\n        for(let j=0;j<num;j++){\n            let check\
    \ = str.charAt(j);\n            for(let x=0;x<newString.length;x++){\n       \
    \         if(newString.charAt(x) == check){\n                    newString +=\
    \ str.charAt(j)\n                }\n            }\n        }\n    }\n    \n  \
    \  return newString.replace(/\\s+/g, '');\n}\n", "    let words = sentence.split(\"\
    \ \");\n    let result = \"\";\n    for (let i=0; i< words.length; i++){\n   \
    \     if (is_prime_number(words[i].length)){\n            result += words[i];\n\
    \        }\n    }\n    return result + \" \";\n}\n", "    let arr = sentence.split(\"\
    \ \");\n    let strArr = arr.map(e => e.trim());\n    let isPrime = new Array(Math.sqrt(strArr.length)).fill(true);\n\
    \    for(let i = 1; i < strArr.length; i++){\n        if(isPrime[i]){\n      \
    \      isPrime[i] = false;\n        }\n    }\n    let resArr = strArr.filter(e\
    \ => isPrime[strArr.indexOf(e)]);\n    return resArr.join(\" \");\n}\n", "   \
    \ // Your code here\n    \n    let arr = [];\n    for (let i = 0; i<sentence.length;i++){\n\
    \        if (sentence.charAt(i) === \" \"){\n            let word = '';\n    \
    \        while (sentence.charAt(i) !== \" \"){\n                word += sentence.charAt(i)\n\
    \                i++;\n            }\n            arr.push(word);\n        }\n\
    \    }\n    \n    let result = \"\";\n    \n    for (let i = 0;i<arr.length;i++){\n\
    \        for (let j = i+1;j<arr.length;j++){\n            let num = Math.pow(arr[i].length,arr[j].length);\n\
    \            if (num%1 === 0){\n                result += arr[i] + ' ';\n    \
    \            arr[j] = \"\";\n            }\n        }\n    }\n    \n    return\
    \ result;\n}\n\nwords_in_sentence(\"this is a test\");\n</cell>\n<text>\nImplement\
    \ the second function which checks if the given number is prime or not?\n\n\n\
    </text>\n<cell>", "    let arr = sentence.split(\" \");\n    let newArr = [];\n\
    \    for(let i=0;i<arr.length;i++){\n        let length = arr[i].length;\n   \
    \     for(let j=0;j<Math.sqrt(length);j++){\n            if(Math.pow(length,j)\
    \ === parseInt(Math.pow(length,j))){\n                newArr.push(arr[i]);\n \
    \           }\n        }\n    }\n    return newArr.join(\" \");\n}\n", "    let\
    \ words_list = sentence.split(\" \");\n    let prime_numbers = [];\n\n    for\
    \ (let i = 0; i < words_list.length; i++){\n        if (is_prime(words_list[i].length)){\n\
    \            prime_numbers.push(words_list[i].length);\n        }\n    }\n\n \
    \   prime_numbers = prime_numbers.sort((a,b) => a-b);\n    let new_sentence =\
    \ \"\";\n\n    for (let i = 0; i < prime_numbers.length; i++){\n        new_sentence\
    \ += words_list[i] + \" \";\n    }\n\n    return new_sentence.trim();\n}\n", " \
    \   // 1. Find the length of words\n    let arr = sentence.split(\" \");\n   \
    \ let arrLen = arr.length;\n    // 2. Get all prime numbers\n    let primeArr\
    \ = getPrime(arrLen);\n    \n    // 3. Construct the return string\n    let ret\
    \ = \"\";\n    for(let i=0; i<arrLen; i++){\n        let primeInd = primeArr.indexOf(i);\n\
    \        ret = ret + \" \" + arr[primeInd];\n    }\n\n    return ret;\n}\n", " \
    \   let newArray = sentence.split(\" \")\n    let primes = []\n    let newSentence\
    \ = \"\"\n    for(let i =0; i < newArray.length; i++){\n        primes.push(newArray[i].length)\n\
    \        for(let j = 0; j < primes.length; j++){\n            if(newArray[i].length\
    \ % primes[j] === 0){\n                break\n            }\n        }\n    }\n\
    \    for(let i = 0; i < primes.length; i++){\n        newSentence += newArray[i]\n\
    \    }\n    return newSentence\n}\n", "    let arr = sentence.split(\" \");\n\
    \    let strArr = arr.map(x=>x.split(\"\").filter(x=>x.charCodeAt()>97 && x.charCodeAt()<101));\n\
    \    for(let i=0;i<strArr.length;i++){\n        let arr1 = strArr[i].filter(x=>x==1)\n\
    \        let arr2 = strArr[i].filter(x=>x==0)\n        let sum = arr1.reduce((acc,item)=>acc+=item)\n\
    \        for(let j=0;j<arr2.length;j++){\n            if(arr2[j]==1 && sum%arr1[j]==0){\n\
    \                strArr.splice(i, 1)\n                i--\n                sum-=arr1[j]\n\
    \            }\n        }\n    }\n    let finalArr = strArr.join(\" \")\n    return\
    \ finalArr;\n}\n", "  let words = sentence.split(\" \");\n  let n = words.length;\n\
    \  let str = \"\";\n  for(let i = 0;i < n;i++)\n  for(let j = n;j > i;j--)\n \
    \ if(words[i].length == words[j].length){\n    if(words[i].toLowerCase() == words[j].toLowerCase()){\n\
    \      str = str + words[i] + \" \";\n      words.splice(i, 1);\n      n--;\n\
    \    }\n  }\n  return str;\n}\n", "    const splittedSentence = sentence.split(\"\
    \ \")\n    const res = []\n    for(let i=0; i<splittedSentence.length; i++){\n\
    \        res.push(splittedSentence[i])\n    }\n    let primeString = \"\"\n  \
    \  for(let j=1; j<res.length; j++){\n        primeString += res[j] + \" \"\n \
    \   }\n    return primeString\n}\n", "\tlet str_array = sentence.split(\" \").filter(x\
    \ => x.length > 0).sort();\n\tlet result = [];\n\tlet count = 1;\n\tfor (let i\
    \ = 0; i < str_array.length; i++){\n\t\tlet val = str_array[i];\n\t\twhile (val.length\
    \ % count !== 0){\n\t\t\tcount++;\n\t\t}\n\t\tif (count--){\n\t\t\tresult.push(val);\n\
    \t\t}\n\t}\n\treturn result.join(\" \");\n}\n", "    const numPrimes = []\n  \
    \  for(let i = 0; i<sentence.length; i++){\n        let n = true\n        for(let\
    \ j = i + 2; j < sentence.length; j++){\n            if(n % j == 0){\n       \
    \         n = false\n                break\n            }\n        }\n       \
    \ if(n && numPrimes.indexOf(n) == -1){\n            numPrimes.push(n)\n      \
    \  }\n    }\n    let result = ''\n    for(let i = 0; i<numPrimes.length; i++){\n\
    \        if(sentence.length == i){\n            return sentence\n        }\n \
    \       if(numPrimes[i] > 0){\n            result += sentence[i]\n        }\n\
    \    }\n    return result\n}\n", "    // write your code here\n    let wordsArr=\
    \ sentence.split(\" \");\n    let result = \"\";\n    for(let i =0;i<wordsArr.length;i++){\n\
    \        let word = wordsArr[i]\n        if (word.length == 2){\n            result\
    \ += word;\n        }\n        else if (word.length != 2 && isPrime(word)){\n\
    \            result += word;\n        }\n    }\n    return result;\n}\n", "  const\
    \ isPrime = new Array(1001).fill(false);\n  sentence = sentence.toLowerCase();\n\
    \  let prime = parseInt(sentence.length);\n  let pos = 0;\n  let first = 0;\n\
    \  let last = parseInt(Math.sqrt(prime));\n  let firstLetter = sentence.charAt(0);\n\
    \  let lastLetter = sentence.charAt(prime-1);\n\n  while(pos<prime){\n    if(isPrime[prime]){\n\
    \      first++;\n      last = parseInt(Math.sqrt(prime));\n      firstLetter =\
    \ sentence.charAt(first);\n      lastLetter = sentence.charAt(last);\n      isPrime[firstLetter]\
    \ = true;\n      isPrime[lastLetter] = true;\n      prime++;\n    }\n    pos++;\n\
    \  }\n\n  let result = '';\n  while(pos<prime){\n    if(isPrime[pos]){\n     \
    \ result += sentence.slice(pos, prime) + ', ';\n      pos++;\n    }\n  }\n  result\
    \ += sentence.slice(prime);\n  return result;\n}\n", "    let splitted = sentence.split('\
    \ ').map(x => x.trim());\n    let newArr = splitted.filter(x => !isNaN(x)).map(x\
    \ => x.split('').sort().join(''));\n    let result = \"\";\n    for(let i = 0\
    \ ; i < newArr.length; i++){\n        let num = \"\";\n        for(let j = 0 ;\
    \ j < newArr[i].length; j++){\n            if(num.length == 0){\n            \
    \    num = newArr[i][j];\n            }else{\n                if(num != newArr[i][j]){\n\
    \                    num += \"*\";\n                }\n            }\n       \
    \ }\n        result +=num;\n    }\n    return result;\n}\n", "    // Write your\
    \ code here\n    if(sentence.length < 2) return sentence;\n    let newSentence\
    \ = [];\n    for(let i = 0; i < sentence.length; i++){\n        for(let j = i+1;\
    \ j < sentence.length; j++){\n            if(isPrimeNumber(j - i) && isPrimeNumber(j\
    \ - i)){\n                newSentence.push(sentence[i]);\n                newSentence.push(sentence[j]);\n\
    \            }\n        }\n    }\n    return newSentence.join(\" \");\n}\n", " \
    \ let words = sentence.split(\" \");\n  let new_words = new Array(words.length);\n\
    \n  for(let i = 0; i < words.length; i++){\n    let length = 2;\n    while(length\
    \ < words[i].length){\n      length++;\n    }\n    for(let j = length - 1; j >=\
    \ 0; j--){\n      let index = words[i].indexOf(words[i].charAt(j))\n      if(index\
    \ >= 0){\n        new_words.push(words[i].substr(0, index));\n        break;\n\
    \      }\n    }\n  }\n  return new_words.join(\" \");\n}\n", "    const wordsCountMap\
    \ = {};\n    for (let words of sentence.split(' ')) {\n        if (!wordsCountMap.hasOwnProperty(words))\
    \ {\n            wordsCountMap[words] = 1;\n        } else {\n            wordsCountMap[words]++;\n\
    \        }\n    }\n    \n    for(let words of Object.values(wordsCountMap)) {\n\
    \        if(words % 2 !== 0) {\n            return words;\n        }\n    }\n\
    }\n", "    const dictionary = {};\n    const result = sentence.split(\" \").map((word)\
    \ => dictionary[word] = true);\n    return result.filter((val) => val);\n}\n",
  "  const result = [];\n  const arr = sentence.split(\" \");\n  let prime = true;\n\
    \  for (let i = 0; i < arr.length; i++){\n    if (arr[i].search(/^\\d./) != -1)\
    \ prime = false;\n  }\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i].search(/^\\\
    d./) == -1) result.push(arr[i]);\n  }\n  if (prime) return result.join(\" \");\n\
    \  for (let i = 0; i < result.length; i++){\n    while (result.length > 1 && result[result.length\
    \ - 1] == result[i]) result.pop();\n  }\n  return result.join(\" \");\n}\n\nwords_in_sentence(\"\
    lets go for swimming\")\n", "  let result = [];\n  for (let word of sentence.split(\"\
    \ \")){\n    let prime = PrimeNumbers(word.length);\n    if (!prime){\n      return\
    \ \"Invalid Input\";\n    }\n    result.push(word);\n  }\n  return result.join(\"\
    \ \");\n}\n", "  return sentence.match(/\\b\\w+\\b/g).filter(x => !x.includes(\"\
    -\"));\n}\n", "  let charArr = sentence.split(' ');\n  let hash = {};\n  charArr.forEach(char\
    \ => {\n    hash[char] = true;\n  });\n  let res = [];\n  for(let i = 1; i <=\
    \ Math.sqrt(charArr.length); i++){\n    if(hash[charArr[i - 1]]){\n      res.push(charArr[i\
    \ - 1]);\n      hash[charArr[i - 1]] = false;\n    }\n  }\n  return res.join('\
    \ ');\n}\n", "    // write your code here\n    var result = [];\n    var index\
    \ = 0;\n    for(var i=0;i<sentence.length;i++){\n        var word = sentence.split(\"\
    \ \");\n        for(var j=0;j<word.length;j++){\n            if(index%word[j]===0){\n\
    \                result.push(word[j]);\n            }\n        }\n        index++;\n\
    \    }\n    return result.join(\" \");\n}\n", "    // Your code here\n    return\
    \ sentence.split(\" \").reduce((acum, item) => {\n        let found = false;\n\
    \        for(let i = 0; i < item.length; i++){\n            for(let j = 0; j <\
    \ item.length; j++){\n                for(let k = 0; k < item.length; k++){\n\
    \                    for(let l = 0; l < item.length; l++){\n                 \
    \       if(acum === item[i] && acum === item[j] && acum === item[k] && acum ===\
    \ item[l]){\n                            found = true;\n                     \
    \       break;\n                        }\n                    }\n           \
    \         if(found){\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        if(!found){\n          \
    \  acum += item;\n        }\n        return acum;\n    },\"\");\n};\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"lets go for swimming\");\nwords_in_sentence(\"\
    leetcode\");\nwords_in_sentence(\"I love leetcode\");\nwords_in_sentence(\"leetcode\
    \ contest\");\nwords_in_sentence(\"leetcode contest is awesome\");\n", "    let\
    \ words = sentence.split(' ');\n    let result = '';\n    let prime = 1;\n   \
    \ for(let i=0; i<words.length; i++){\n        if(words[i].length%prime === 0){\n\
    \            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n\
    }\n", "    // Your code here\n    let arr = sentence.split(' ');\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        let isPrime = true;\n\
    \        for(let j = 2; j <= Math.sqrt(arr.length); j++){\n            if(arr[i]\
    \ % j == 0){\n                isPrime = false;\n                break;\n     \
    \       }\n        }\n        if(isPrime){\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result.join(' ');\n}\n", "    // Your code here\n\
    \    if(sentence.length == 0){\n        return \"\";\n    }\n    \n    var result\
    \ = [];\n    for(var i = 0; i<sentence.length;i++){\n        var num = Math.floor(Math.sqrt(sentence.length));\n\
    \        while(num > 1){\n            if(sentence[i] == \" \"){\n            \
    \    num -= 1;\n            }else{\n                break;\n            }\n  \
    \      }\n        if(num == 1){\n            result.push(sentence.slice(0,i));\n\
    \        }\n    }\n    var newResult = result.join(' ');\n    return newResult;\n\
    }\n", "    let pattern = /[a-zA-Z]+/g;\n    let result = sentence.replace(pattern,\"\
    \");\n    let newResult = result.match(/.{1,2}/g).join(\" \").replace(/\\s+/g,\"\
    \ \");\n    let wordsInSentence = sentence.split(\" \").filter((word) => word.length);\n\
    \    return wordsInSentence.map((word) => newResult);\n}", "    let regex = /\\\
    b\\w+\\b/g;\n    let sentenceArr = sentence.split(regex).sort((a,b)=>b.length-a.length);\n\
    \    for(let i = 0; i < sentenceArr.length; i++){\n        if(isPrime(sentenceArr[i].length))\n\
    \            sentenceArr.splice(i, 0, sentenceArr[i].substr(0,1));\n    }\n  \
    \  return sentenceArr.join(' ');\n}\n", "  const arr=sentence.split(\" \").map(v=>{\n\
    \    if(Number(v)*Number(v)===v){\n      return v\n    }\n  })\n  return arr.filter(v=>v.length%2===0).join(\"\
    \ \")\n}\n", "  let nums = [];\n  for (let i = 0;i<sentence.length;i++){\n   \
    \ if (nums.includes(parseInt(sentence[i]))){\n      continue;\n    }\n    let\
    \ newNum = findPrimeNumber(sentence[i]);\n    nums.push(newNum);\n  }\n  return\
    \ nums;\n}\n", "  console.log(sentence);\n  let map = new Map();\n  let len =\
    \ sentence.length;\n  for(let i = 0; i < sentence.length; i++){\n    map.set(sentence[i],\
    \ len);\n  }\n  \n  let result = [];\n  for(let [key, value] of map){\n    if((value\
    \ % 2 === 0) && (value+1) % 2 === 0){\n      result.push(key);\n    }\n  }\n \
    \ return result.join(' ');\n}\n", "    let prime_numbers = []\n    let arr = sentence.split(\"\
    \ \")\n    for(let i=0;i<arr.length;i++){\n        let prime = true\n        for(let\
    \ j=0;j<prime_numbers.length;j++){\n            if(arr[i].length > prime_numbers[j]){\n\
    \                prime = false\n                break\n            }\n       \
    \ }\n        if(prime){\n            prime_numbers.push(arr[i].length)\n     \
    \   }\n    }\n    let result = \"\"\n    for(let i=0;i<prime_numbers.length;i++){\n\
    \        for(let j=0;j<prime_numbers.length;j++){\n            if(j>i){\n    \
    \            if(prime_numbers[i] != prime_numbers[j]){\n                    result\
    \ = result + \" \" + arr[i]\n                }\n            }\n        }\n   \
    \ }\n    return result\n}\n", "\tsentence = sentence.toUpperCase().replace(/[^a-z]/gi,'');\n\
    \tlet words_in_sentence = Array(sentence.length);\n\tlet prime = new Array(sentence.length);\n\
    \tlet n = 1;\n\t\n\tlet counter = 0;\n\t\n\tfor (let i=0; i<words_in_sentence.length;\
    \ i++){\n\t\tprime[i] = i;\n\t\tif (i==0){\n\t\t\twords_in_sentence[i] = 0;\n\t\
    \t}\n\t\telse{\n\t\t\tlet counter = 1;\n\t\t\tfor (let j=i+1; j<words_in_sentence.length;\
    \ j++){\n\t\t\t\tif (prime[j] > 1 && isPrime(j) && isPrime(prime[j])){\n\t\t\t\
    \t\twords_in_sentence[i] +=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (words_in_sentence[i]\
    \ == sentence.length){\n\t\t\tprime[n] = words_in_sentence[i]-1;\n\t\t\tn++;\n\
    \t\t}\n\t}\n\t\n\tlet sorted_prime = Array.from(prime).sort((a, b) => a-b);\n\t\
    \n\tlet str = '';\n\t\n\tsorted_prime.forEach(x => {\n\t\tlet y = x + 1;\n\t\t\
    while (words_in_sentence[y] == words_in_sentence[x] && y > 0 && isPrime(y)){\n\
    \t\t\tstr+=sentence[y];\n\t\t\ty--;\n\t\t}\n\t});\n\t\n\tstr = str.replace(/\\\
    s/g,'');\n\treturn str;\n};\n", "    if(sentence.length < 1){\n        return\
    \ \"error\";\n    }\n    let arr = sentence.split(\" \");\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(checkPrimeNumber(arr[i].length) === false){\n\
    \            return \"error\";\n        }\n    }\n    return arr;\n}\n\nlet result\
    \ = words_in_sentence(\"lets go for swimming\");", "    \n    \n}\n", "    //\
    \ code here\n    words = sentence.split(\" \");\n    wordLength = words.length;\n\
    \    for (i=1;i<=wordLength;i++){\n        if (wordLength%i===0){\n          \
    \  primeLength=i;\n            break;\n        }\n    }\n    console.log(primeLength);\n\
    \    wordsInSentence = words.filter(item => item.length <= primeLength);\n   \
    \ console.log(wordsInSentence);\n}\n\nwords_in_sentence(\"This is a test\");\n\
    words_in_sentence(\"lets go for swimming\");\nwords_in_sentence(\"This is another\
    \ test\");</code>\n\nUpdated Solution:\nA recursive approach\n\n<code>", "   \
    \ const pattern = /\\b\\S+\\b/g;\n    sentence = sentence.split(pattern).join(\"\
    \ \");\n    const result = sentence\n        .split(\" \")\n        .map((word)\
    \ => {\n            let prime = true;\n            let i = 2;\n            while\
    \ (i <= Math.sqrt(word.length)) {\n                if (word % i === 0) {\n   \
    \                 prime = false;\n                    break;\n               \
    \ }\n                i++;\n            }\n            return prime ? word : null;\n\
    \        })\n        .filter((word) => word !== null);\n    return result.join(\"\
    \ \");\n}\n", "    // write your code here\n    let splitted = sentence.split('\
    \ ')\n    let primes = []\n    for(let i=0; i<splitted.length; i++){\n       \
    \ for(let j=2; j*j<=splitted[i].length; j++){\n            if(splitted[i].substring(j,j+1).match(/[^a-zA-Z]/)\
    \ ){\n                primes.push(i)\n                break\n            }\n \
    \       }\n    }\n    return splitted[primes[0]]\n}\n\nwords_in_sentence(\"This\
    \ is a test\")\n</code>\n<|/ a dscore=0 tags=javascript,algorithm,string |>\n\
    <| a tags=javascript,algorithm,string |>\nMy solution is similar to the other\
    \ answers but uses no extra memory:\n\n<code>", "    let words = sentence.split('\
    \ ');\n    let result = new Set();\n    for (let word of words) {\n        if\
    \ (isPrimeNumber(word.length)) {\n            result.add(word);\n        }\n \
    \   }\n    \n    return Array.from(result).join(' ');\n}\n", "    const res =\
    \ [];\n    let words = sentence.split(' ');\n    \n    for(let i = 0; i < words.length;\
    \ i++){\n        const check = prime_factorize(words[i]);\n        if(check[0]\
    \ === check[1]){\n            if(check[0] !== 0){\n                res.push(words[i]);\n\
    \            }\n        }\n    }\n    return res.join(' ');\n}\n", "    if(sentence.length\
    \ == 0){\n        return \"\";\n    }\n    let words = sentence.replace(/\\s+/ig,\
    \ \" \").split(\" \");\n    let result = [];\n    for(let i=0;i<words.length;i++){\n\
    \        if(isPrimeNumber(words[i].length)){\n            result.push(words[i]);\n\
    \        }\n    }\n    return result.join(\" \");\n}\n", "  return sentence.split('\
    \ ').sort().filter(n => {\n    if(!isPrime(n)) return false\n    return true\n\
    \  }).join(' ')\n}\n", "    // write your code here\n    let ret = new Array(sentence.length).fill(0).map(()=>1).reduce((acc,cur)=>{\n\
    \        for(let i=0;i<sentence.length;i++){\n            let curr = sentence[i].toLowerCase();\n\
    \            if(curr.charCodeAt(0)===13||curr.charCodeAt(0)===32)ret[i]++;\n \
    \           if(ret[i]>acc){\n                acc=ret[i];\n            }\n    \
    \    }\n        return acc;\n    },0);\n    return sentence.split(' ').filter(x=>ret[x]).join('\
    \ ');\n};\n", "    // Write your code here\n    \n    return sentence;\n}\n",
  "  let prime = [];\n  for(let i in sentence){\n    let word = sentence[i];\n   \
    \ if(prime && prime.length <= word.length){\n      for(let j = 0;j < prime.length;j++){\n\
    \        if(prime[j] == word.length){\n          let index = i - prime[j];\n \
    \         let str = \"\";\n          while(word.length > 0 && index > 0){\n  \
    \          str += word[--index];\n          }\n          return str;\n       \
    \ }\n      }\n    }\n    if(prime){\n      for(let j = 0; j < prime.length; j++){\n\
    \        if(prime[j] == word.length){\n          let index = i - prime[j];\n \
    \         let str = \"\";\n          while(word.length > 0 && index > 0){\n  \
    \          str += word[--index];\n          }\n          return str;\n       \
    \ }\n      }\n    }\n    for(let j = 0;j < prime.length;j++){\n      if(prime[j]\
    \ == word.length){\n        let index = i - prime[j];\n        let str = \"\"\
    ;\n        while(word.length > 0 && index > 0){\n          str += word[--index];\n\
    \        }\n        return str;\n      }\n    }\n    for(let j = 0;j < prime.length;j++){\n\
    \      if(prime[j] == word.length){\n        let index = i - prime[j];\n     \
    \   let str = \"\";\n        while(word.length > 0 && index > 0){\n          str\
    \ += word[--index];\n        }\n        return str;\n      }\n    }\n    prime\
    \ = prime.reduce((p, c) => p + [c], []);\n  }\n}\n", "    return sentence.split(\"\
    \ \").filter(function(word) {\n        return !isNaN(parseInt(word));\n    }).join(\"\
    \ \");\n}\n", "    \n\n}\nwords_in_sentence(\"this is a test string\")\nwords_in_sentence(\"\
    Let's go to swimming\")\nwords_in_sentence(\"this is a test string with spaces\"\
    )\nwords_in_sentence(\"This is, a test string, with spaces\")\nwords_in_sentence(\"\
    Lets, Go, For, Swim, Eat\")\nwords_in_sentence(\"Lets, Go, For, Swim,Eat\")\n\
    words_in_sentence(\"This is another, one word sentence\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"\
    Let, s, Go, For, S, Wim, Eat\")\nwords_in_sentence(\"Let, s, Go, For, S, Wim,\
    \ Eat\")\nwords_in_sentence(\"Let, ", "    var n = sentence.length,\n        primes\
    \ = new Array(n);\n    for(var i=0;i<primes.length;i++){\n        var is_prime\
    \ = true;\n        for(var j=0;j<n;j++){\n            if(j % primes[i] == 0 &&\
    \ primes.indexOf(j) == -1){\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if(is_prime)\n            primes.push(i);\n\
    \    }\n    var res = [];\n    for(var i=0;i<n;i++){\n        var new_str = sentence;\n\
    \        for(var j=0;j<primes[i];j++){\n            var index = new_str.indexOf(\"\
    \ \");\n            new_str = new_str.slice(0, index) + \" \" + new_str.slice(index\
    \ + 1);\n        }\n        res.push(new_str);\n    }\n    return res.join(\"\
    \ \");\n}\n", "    let words = sentence.split(' ')\n    console.log(words)\n \
    \   let result = []\n    for(let i = 0; i < words.length; i++){\n        result.push(words[i])\n\
    \    }\n    console.log(result)\n    for(let i = 0; i < result.length; i++){\n\
    \        let number = primeNumber(result[i].length)\n        for(let j = 0; j\
    \ < number; j++){\n            let x = result[i].substr(0,j+1)\n            if(!result.includes(x)){\n\
    \                result.push(x)\n            }\n        }\n    }\n    console.log(result)\n\
    \    for(let i = 0; i < result.length; i++){\n        if(!result.includes(result[i])){\n\
    \            result.splice(i, 1)\n        }\n    }\n    console.log(result)\n\
    \    return result\n}\n", "    // write your code here\n    let temp=sentence.split(\"\
    \ \");\n    for(let i=0;i<temp.length;i++){\n        if(temp[i].length===0){\n\
    \            temp.splice(i,1);\n        }\n    }\n    let primes=[];\n    for(let\
    \ i=0;i<temp.length;i++){\n        if(!primes.includes(temp[i].length)){\n   \
    \         primes.push(temp[i].length);\n        }\n    }\n    let final=[];\n\
    \    for(let i=0;i<temp.length;i++){\n        if(primes.includes(temp[i].length)){\n\
    \            final.push(temp[i]);\n        }\n    }\n    return final.join(\"\
    \ \");\n}\n", "    //Split sentence into words\n    let words = sentence.split(\"\
    \ \");\n    \n    //Check if all words are letters, if yes, return empty string\n\
    \    if(words.every(word => !/^[a-zA-Z]+$/.test(word))){\n        return \"\"\
    ;\n    }\n    \n    //Create an empty array for result\n    let result = [];\n\
    \    \n    //Iterate over each word\n    for(let word of words){\n        //Remove\
    \ all non-letter characters from word\n        let letters = word.split(\"\").filter(char\
    \ => /[a-z]/i.test(char));\n        \n        //Check if there are any remaining\
    \ letters, if yes, push word onto result array\n        if(letters.length > 0){\n\
    \            result.push(word);\n        }\n    }\n    \n    //Return join all\
    \ words together\n    return result.join(\" \");\n}\n", "    const map = {\n \
    \       map: {},\n        get: function(key){\n            return this.map[key];\n\
    \        },\n        set: function(key, val){\n            this.map[key] = val;\n\
    \        },\n        has: function(key){\n            return this.map[key] !==\
    \ undefined;\n        }\n    };\n    let map1 = new Map();\n    let map2 = new\
    \ Map();\n    for (let word of sentence.split(\" \")){\n        if (word.includes(\"\
    :\")){\n            let arr = word.split(\":\");\n            if (arr.length ===\
    \ 2){\n                map1.set(arr[0], arr[1]);\n            } else {\n     \
    \           map2.set(arr[0], arr[1]);\n            }\n        } else {\n     \
    \       map1.set(word, word);\n            map2.set(word, word);\n        }\n\
    \    }\n    for (let [key, val] of map2.entries()){\n        if (map1.has(key)){\n\
    \            let val2 = map1.get(key);\n            for (let i = 0; i < val2.length;\
    \ i++){\n                if (!map2.has(val2[i])){\n                    map2.set(val2[i],\
    \ val2[i]);\n                }\n            }\n        }\n    }\n    return map2.get(\"\
    s\").join(\" \");\n}\n", "    var new_sentence = sentence.split(' ')\n    var\
    \ prime = []\n    \n    var n = 1\n    \n    for(var i=0;i<new_sentence.length;i++){\n\
    \        if(new_sentence[i].length > 1){\n            if(isPrime(n)){\n      \
    \          prime[n-1] = new_sentence[i]\n            }\n            n++\n    \
    \    }\n    }\n    \n    return prime.join(\" \")\n}\n", "    let result = [];\n\
    \    for (let word of sentence.split(\" \")) {\n        let charArray = word.split(\"\
    \");\n        let str = \"\";\n        for (let i = 0; i < charArray.length; i++)\
    \ {\n            if (is_prime(charArray.length)) {\n                if (charArray[i]\
    \ != \" \") {\n                    str += charArray[i]\n                }\n  \
    \          }\n        }\n        result.push(str);\n    }\n    return result;\n\
    }\n", "    // Only 3 lines. Convenient for loop structure in JavaScript.\n   \
    \ let length = Math.sqrt(sentence.length);\n    let primes = Array();\n    for\
    \ (let i = 2; i <= length; i++) {\n        if (sentence.split(\" \").filter((x)\
    \ => !primes.includes(x)).length == 0){\n            primes.push(i);\n       \
    \ }\n    }\n\n    // Return the words from the sentence\n    // but they should\
    \ be the length of the prime numbers, not just \"length\".\n    // Example 1:\n\
    \    // Input: sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example\
    \ 2:\n    // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\
    \n    return sentence.split(\" \").filter((x) => !primes.includes(x)).join(\"\
    \ \");\n}\n", "    let arr = sentence.split(\" \");\n    let primeArr = [];\n\
    \    let newArr = [];\n    arr.forEach(function(word){\n        let prime = true;\n\
    \        let len = word.length;\n        for(let i = 0; i < primeArr.length; i++){\n\
    \            if((primeArr[i] + 1) === len){\n                prime = false;\n\
    \            }\n        }\n        if(prime){\n            primeArr.push(len);\n\
    \            newArr.push(word);\n        }\n    });\n    return newArr.join(\"\
    \ \");\n};\n", "    let result = []\n    for(let i=0; i<sentence.length; i++){\n\
    \        if(is_prime(sentence[i])){\n            result.push(sentence[i])\n  \
    \      }\n    }\n    return result.join(\" \")\n}\n", "    const primeLengths\
    \ = primeLengthsOfString(sentence);\n    const result = primeLengths.map((primeLength)\
    \ => sentence.slice(0, primeLength));\n    const resultString = result.join('\
    \ ');\n    return resultString;\n}\n", "    let arr = sentence.split(' ');\n \
    \   let arr2 = arr.map(v => v.split(''));\n    arr2.map(v => {\n        v.sort();\n\
    \        let maxLength = Math.max.apply(null, v);\n        v.forEach(word => {\n\
    \            for(let i = 1; i <= maxLength; i++){\n                let s = v.toString().split(\"\
    \").map(v => v);\n                let count = s.filter(v => v === word).length;\n\
    \                if(count === i){\n                    v.splice(v.indexOf(word),\
    \ 1);\n                }\n            }\n        });\n    });\n    let str = arr2.map(v\
    \ => v.join(\"\"));\n    str = str.join(' ');\n    return str;\n}", "    return\
    \ sentence.split(\" \")\n        .filter(x => x.length > 1)\n        .sort((a,\
    \ b) => a.length - b.length)\n        .map(x => x.substr(0, x.length / 2))\n \
    \       .join(\" \");\n}\n", "    // code here\n}\n\nwords_in_sentence(\"This\
    \ is a test\");\nwords_in_sentence(\"lets go for swimming\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"\
    This is a test", "  //your code here\n  let arr = sentence.split(\" \");\n  let\
    \ result = \"\";\n  for(let i = 0; i <= arr.length; i++){\n    let prime = true;\n\
    \    for(let j = 0; j <= arr.length; j++){\n      if(arr[j] === arr[i]){\n   \
    \     prime = false;\n      }\n    }\n    if(prime){\n      result += arr[i] +\
    \ \" \";\n    }\n  }\n  return result;\n}\n\nwords_in_sentence(\"lets go for swimming\"\
    );\n", "    const primes = [];\n    for (let i = 0; i < 100; i++) {\n        if(primes.indexOf(i)<0){\n\
    \            primes.push(i)\n        }\n    }\n    const result = primes.join(\"\
    \ \")\n    console.log(primes)\n    return result.split(\" \")\n}\n", "\tconst\
    \ primes = [];\n\tlet found = false;\n\tfor(let i = 0; i < sentence.length; i++){\n\
    \t\tif(primes.includes(sentence[i].length)){\n\t\t\tprimes[primes.length-1]++;\n\
    \t\t}else{\n\t\t\tprimes.push(sentence[i].length);\n\t\t}\n\t\tlet j = i;\n\t\t\
    while(j < sentence.length && primes.includes(sentence[j].length)){\n\t\t\tprimes[primes.length-1]++;\n\
    \t\t\tj++;\n\t\t}\n\t}\n\tlet maxPrimeIndex = 0;\n\tlet maxLen = 0;\n\tfor(let\
    \ i = 0; i < primes.length; i++){\n\t\tif(primes[i] > maxLen){\n\t\t\tmaxLen =\
    \ primes[i];\n\t\t\tmaxPrimeIndex = i;\n\t\t}\n\t}\n\t\n\tlet output = \"\";\n\
    \tlet current = \"\";\n\tfor(let i = 0; i < sentence.length; i++){\n\t\tif(primes.includes(sentence[i].length)){\n\
    \t\t\tcurrent += sentence[i];\n\t\t\tfor(let j = 0; j < maxPrimeIndex; j++){\n\
    \t\t\t\toutput += sentence[j];\n\t\t\t}\n\t\t}else{\n\t\t\toutput += sentence[i];\n\
    \t\t}\n\t}\n\treturn output;\n}\nmodule.exports.words_in_sentence = words_in_sentence;\n",
  "    let words = [...sentence.split(' ')];\n    let primes = [];\n    let result\
    \ = '';\n    for(let i=0; i<words.length; i++){\n        if(primes.includes(words[i].length)){\n\
    \            primes.push(words[i].length);\n        }\n    }\n    for(let i=0;\
    \ i<primes.length; i++){\n        let flag = true;\n        let index = -1;\n\
    \        for(let j=0; j<words.length; j++){\n            if(!primes.includes(words[j].length)){\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag){\n            result += words[index];\n        }\n    }\n\
    \    return result;\n}\n", "    let reg = /./g;\n    for(let i=0;i<sentence.length;i++)\n\
    \        for(let j=i;j<sentence.length;j++)\n            if(reg.test(sentence[i]+sentence[j])){\n\
    \                let str1 = sentence[i];\n                let str2 = sentence[j];\n\
    \                let str3 = str1+str2;\n                let str4 = str3.split(\"\
    \");\n                let count = 1;\n                for(let i=0;i<str4.length;i++){\n\
    \                    if(str4[i]===str3[i]){\n                        count++;\n\
    \                        if(count === 2){\n                            let temp\
    \ = str3.split(\"\");\n                            if(temp.length<str4.length)\n\
    \                                str4.push(temp[temp.length-1]);\n           \
    \             }\n                        break;\n                    }\n     \
    \               count = 1;\n                }\n                \n            \
    \    str4 = str4.join(\"\");\n                str4 = str4+str3;\n            \
    \    str4 = str4.split(\"\");\n                let count = 0;\n              \
    \  for(let i=0;i<str4.length;i++){\n                    if(str4[i]===str3[i]){\n\
    \                        count++;\n                        if(count === 2){\n\
    \                            let temp = str3.split(\"\");\n                  \
    \          if(temp.length<str4.length)\n                                str4.push(temp[temp.length-1]);\n\
    \                        }\n                        break;\n                 \
    \   }\n                    count = 1;\n                }\n                \n \
    \               str4 = str4.join(\"\");\n                str4 = str4+str3;\n \
    \               str4 = str4.split(\"\");\n                let count = 0;\n   \
    \             for(let i=0;i<str4.length;i++){\n                    if(str4[i]===str3[i]){\n\
    \                        count++;\n                        if(count === 2){\n\
    \                            let temp = str3.split(\"\");\n                  \
    \          if(temp.length<str4.length)\n                                str4.push(temp[temp.length-1]);\n\
    \                        }\n                        break;\n                 \
    \   }\n                    count = 1;\n                }\n                \n \
    \               str4 = str4.join(\"\");\n                str4 = str4+str3;\n \
    \               str4 = str4.split(\"\");\n                \n                let\
    \ prime = true;\n                for(let i=0;i<str4.length;i++){\n           \
    \         if(str4[i]===str3[i]){\n                        prime = false;\n   \
    \                 }\n                }\n                if(prime){\n         \
    \           return str4;\n                }\n            }\n    return \"NOT FOUND\"\
    ;\n}\n", "\tlet result = [];\n\tlet wordsArray = sentence.split(\" \");\n\tfor(let\
    \ i of wordsArray){\n\t\tlet wordLength = getWordLength(i);\n\t\tif(checkPrime(wordLength)){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result.join(\" \");\n}\n", "  //This\
    \ array stores the length of the words in each sentence.\n  const result = [];\n\
    \  //Split the sentence into an array of words.\n  const wordArray = sentence.split('\
    \ ');\n  //Iterate through the words in the original array and store their length.\n\
    \  wordArray.forEach(function(word){\n    result.push(word.length);\n  });\n \
    \ \n  //Iterate through the words in the new array and find the prime numbers.\n\
    \  for(let i = 0; i < result.length; i++){\n    //Store the prime numbers in a\
    \ set.\n    const primeNumbers = new Set(result);\n    //Filter out the non-prime\
    \ numbers from the set and store them in another array.\n    const filteredResult\
    \ = primeNumbers.filter(x => x%1 === 0);\n    //If there is no non-prime number\
    \ left, then the word is prime.\n    if(!filteredResult.length) result.push(i);\n\
    \  }\n  \n  //Iterate through the words in the new array and reverse them.\n \
    \ for(let i = 0; i < result.length; i++){\n    result.splice(i, 0, result[result.length\
    \ - 1 - i]);\n  }\n\n  return result.join(' ');\n}\n", "    // Write your code\
    \ here\n    var res = \"\";\n    var len = sentence.length;\n    for(var i=0;i<len;i++){\n\
    \        var s = sentence.split(\" \");\n        for(var j=0;j<s.length;j++){\n\
    \            for(var x=0;x<j;x++){\n                if(s[j] == s[x+1])\n     \
    \               s[j] = s[j].substr(0,s[j].length-1);\n                else\n \
    \                   break;\n            }\n        }\n        res += s.join(\"\
    \ \");\n        res += \" \";\n    }\n    return res.replace(/(^\\s+)|(\\s+$)/g,\"\
    \");\n}", "\t\n\tconst primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \t\n\tconst primes_set = primes.filter(prime => prime >= 2);\n\t\n\treturn primes.filter(prime\
    \ => primes_set.includes(prime)).join(' ');\n\t\n}\n", "    let charMap = {};\n\
    \    let output = [];\n    sentence.split(\" \").forEach(function(word){\n   \
    \     if(charMap[word]) charMap[word]++;\n        else charMap[word] = 1;\n  \
    \  });\n    for(let c in charMap){\n        if(charMap[c] > 1){\n            charMap[c]--;\n\
    \        }\n        else{\n            output.push(c);\n        }\n    }\n   \
    \ return output.join(\" \");\n}\n", "  var newWords = [];\n  sentence.split(\"\
    \ \").forEach(function(word){\n    if(isPrime(word.length)){\n      newWords.push(word);\n\
    \    }\n  });\n  return newWords.join(\" \");\n}\n", "    return sentence.replace(/\
    \ /g,\"\").split(\"\").filter(function(v,i,a){return !isNaN(v) && a.indexOf(v)===i})\n\
    }\n", "    // Write your code here\n}\n\nwords_in_sentence('This is a test')\n",
  "    let primes = []\n    for(let i = 0; i < sentence.length; i++){\n        if(!primes.includes(parseInt(sentence[i],\
    \ 10))){\n            primes.push(parseInt(sentence[i], 10))\n        }\n    }\n\
    \    let result = primes.join(\" \")\n    return result\n}\n", "    // write your\
    \ code here\n    return null;\n}\n", "    // Write your code here\n    let strArray\
    \ = sentence.split(\" \");\n    let strArrayPrime = [], strArrayPrimeLength =\
    \ [];\n    let strArrayNew = [];\n    for (let i = 0; i < strArray.length; i++){\n\
    \        if (strArray[i].length ==  2) {\n            strArrayPrime.push(i);\n\
    \            strArrayPrimeLength.push(strArray[i].length);\n        }\n    }\n\
    \    strArrayPrimeLength.sort((a,b)=>{return b-a});\n    for (let i = 0; i < strArrayPrimeLength.length;\
    \ i++){\n        let j = 0;\n        while (j < strArrayPrime.length){\n     \
    \       if (strArrayPrime[j] >= strArrayPrimeLength[i]){\n                strArrayPrimeNew\
    \ = strArrayPrime.splice(j, 0, strArray[i]);\n                strArrayNew.push(strArrayPrimeNew[0]);\n\
    \                j++;\n            }\n            else j++;\n        }\n    }\n\
    \    return strArrayNew.join(\" \");\n}\n", "  let map = new Map();\n  let arr\
    \ = sentence.split(\" \");\n  arr.forEach((val) => {\n    if(map.has(val)){\n\
    \      let index = map.get(val);\n      index.push(val); \n      map.set(val,\
    \ index);\n    } else {\n      map.set(val, [val]);\n    }\n  });\n  let res =\
    \ \"\";\n  map.forEach((val, key) => {\n    let count = 0;\n    val.forEach((val2,\
    \ key2) => {\n      if(val == val2){\n        count++;\n      }\n    });\n   \
    \ if(count > 1){\n      res += key;\n    }\n  });\n  return res;\n}\n", "    let\
    \ arr = sentence.split(\" \");\n    let len = arr.length;\n    let primes = [];\n\
    \    let res= \"\";\n    for(let i=0;i<len;i++){\n        if(primes.indexOf(arr[i])==-1){\n\
    \            primes.push(arr[i]);\n        }\n        else{\n            while(primes.indexOf(arr[i])!=-1){\n\
    \                primes.push(arr[i]);\n            }\n        }\n    }\n    for(let\
    \ i=0;i<primes.length;i++){\n        res = res.concat(primes[i]);\n    }\n   \
    \ return res;\n}\n", "    // code here\n}\n\nmodule.exports.words_in_sentence\
    \ = words_in_sentence;\n", "    let arr = sentence.split(' ')\n    let res = []\n\
    \    let isPrime = true\n    for(let i=0;i<arr.length;i++){\n        let l = arr[i].length\n\
    \        if(!isPrime(l)){\n            isPrime = false\n        }\n    }\n   \
    \ if(!isPrime){\n        return 'not prime'\n    }\n    for(let i=0;i<arr.length;i++){\n\
    \        let l = arr[i].length\n        for(let j=l;j<arr.length;j++){\n     \
    \       if(arr[i].includes(arr[j])){\n                arr.splice(j,1)\n      \
    \      }\n        }\n        for(let j=l+1;j<arr.length;j++){\n            if(arr[i].includes(arr[j])){\n\
    \                arr.splice(j,1)\n            }\n        }\n        res.push(arr[i])\n\
    \    }\n    return res.join(' ')\n}\n", "    const length = sentence.length\n\
    \    let str = ''\n    for( let i = 0; i < length; i++){\n        if(isPrime(length)\
    \ && length < 100){\n            str += sentence[i]\n        }\n    }\n    return\
    \ str\n}\n", "    const words = sentence.trim().split(' ');\n    let primes =\
    \ [];\n    for(let i = 0; i < words.length; i++){\n        if(words[i].length\
    \ % 2 === 0){\n            primes.push(i);\n        }\n    }\n    return primes.join('\
    \ ');\n}\n", "    // your code here\n    for(var i=1;i<=sentence.length;i++){\n\
    \        for(var j=i;j<sentence.length;j++){\n            if(sentence[i].charCodeAt(0)!=sentence[j].charCodeAt(0)){\n\
    \                break;\n            }\n        }\n        if(j==sentence.length){\n\
    \            if(i%2==0){\n                return sentence;\n            }\n  \
    \      }\n        else{\n            for(var k=0;k<j;k++){\n                if((sentence[k].charCodeAt(0)%2)!==0){\n\
    \                    break;\n                }\n            }\n            if(k==j){\n\
    \                return sentence.slice(0,k+1);\n            }\n        }\n   \
    \ }\n    \n}\n", "    var results = [];\n    var pattern = /\\w/;\n    var result;\n\
    \    var num;\n    var start = 0;\n    while(result = pattern.exec(sentence)){\n\
    \        num = parseInt(result[0]);\n        if(num > 1){\n            if(num\
    \ % 2 === 0){\n                start += 2;\n            }else{\n             \
    \   start += 1;\n            }\n        }\n    }\n    for(var i = 0; i < sentence.length;\
    \ i++){\n        if(!(num % 2)){\n            results.push(sentence.substring(start,\
    \ start + i));\n        }\n    }\n    return results.join(\" \");\n}", "    let\
    \ words = sentence.split(\" \");\n    let str = \"\";\n    let n = words.length;\n\
    \    let primes = new Array(n).fill(true);\n    let result = [];\n    for(let\
    \ i = 0; i < n; i++){\n        let len = words[i].length;\n        if(primes[i]){\n\
    \            str = str.concat(words[i]);\n        }\n        for(let j = i; j\
    \ < n; j++){\n            if(words[i].length % j === 0){\n                primes[j]\
    \ = false;\n            }\n        }\n        result.push(str);\n        str =\
    \ \"\";\n    }\n    return result;\n}\n", "    const words = sentence.split(\"\
    \ \");\n    let primes = new Set();\n    const output = [];\n    const isPrime\
    \ = (num) => {\n        for (let i = 2; i <= num; i++) {\n            if (num\
    \ % i === 0) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    for (let i = 0; i < words.length; i++) {\n     \
    \   if (!primes.has(words[i].length)) {\n            output.push(words[i]);\n\
    \            primes.add(words[i].length);\n        }\n    }\n    return output.join(\"\
    \ \");\n}\n", "    const primes = new Array();\n    for (let i = 0; i <= 100;\
    \ i++){\n        if (i%2 === 0){\n            primes.push(i);\n        }\n   \
    \ }\n    return sentence.split(\" \").map(function(word){\n        if (primes.indexOf(word.length)\
    \ !== -1){\n            return word;\n        }\n        return \"\";\n    }).join(\"\
    \ \");\n}\nwords_in_sentence(\"This is a test\");\nwords_in_sentence(\"lets go\
    \ for swimming\");\nwords_in_sentence(\"Lets go for swimming\");\nwords_in_sentence(\"\
    Lets go for swimming dog\");\nwords_in_sentence(\"Lets go for swimming dogs\"\
    ); //wrong output \nwords_in_sentence(\"Lets go for swimming dogs and cats\");\
    \ //wrong output\nwords_in_sentence(\"Lets go for swimming dogs and cats and rabbits\
    \ and snakes\"); //wrong output \nwords_in_sentence(\"Lets go for swimming dogs\
    \ and cats and rabbits and snakes and turtles\"); // wrong output\nwords_in_sentence(\"\
    Lets go for swimming dogs and cats and rabbits and snakes and turtles and hamsters\
    \ and goats and pigs\") // wrong output\nwords_in_sentence(\"Lets go for swimming\
    \ dogs and cats and rabbits and snakes and turtles and hamsters and goats and\
    \ pigs and snakes and hammers\") // wrong output \nwords_in_sentence(\"Lets go\
    \ for swimming dogs and cats and rabbits and snakes and turtles and hamsters and\
    \ goats and pigs and snakes and hammers and pigs and hammers\") // wrong output\
    \ \nwords_in_sentence(\"Lets go for swimming dogs and cats and rabbits and snakes\
    \ and turtles and hamsters and goats and pigs and snakes and hammers and pigs\
    \ and hammers and pigs and hammers\") // wrong output \nwords_in_sentence(\"Lets\
    \ go for swimming dogs and cats and rabbits and snakes and turtles and hamsters\
    \ and goats and pigs and snakes and hammers and pigs and hammers and pigs and\
    \ hammers and pigs and hammers\") // wrong output \nwords_in_sentence(\"Lets go\
    \ for swimming dogs and cats and rabbits and snakes and turtles and hamsters and\
    \ goats and pigs and snakes and hammers and pigs and hammers and pigs and hammers\
    \ and pigs and hammers and pigs and hammers and pigs and ", "    if (sentence\
    \ === \"\") return sentence;\n\n    // find all words in sentence separated by\
    \ space\n    const words = sentence.split(\" \");\n\n    // get all prime numbers\
    \ less than or equal to length of the sentences\n    const primes = words.map(word\
    \ => Math.sqrt(word.length));\n    primes.push(primes[primes.length - 1]);\n\n\
    \    // sort all words in alphabetical order\n    words.sort();\n\n    // create\
    \ a string\n    let words_in_sentence = \"\";\n    for (let i = 0; i < primes.length;\
    \ i++){\n        // for each prime number\n        for (let j = 0; j < words.length;\
    \ j++){\n            // check if the length of the word is prime and if it is\
    \ equal to the current prime number\n            if (Math.sqrt(words[j].length)\
    \ === primes[i]){\n                words_in_sentence += `${words[j]}${\" \"}`;\n\
    \            }\n        }\n    }\n\n    return words_in_sentence;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI did a recursive approach too and it's working too. Thanks!\n\
    <|/ c |>\n<| c |>\nI ran your solution and it didn't pass all the test cases (more\
    \ than 30 to 40 cases). But still thank you for taking your time to help me.\n\
    <|/ c |>\n<| a |>\nYou can use recursive approach for this. Try this\n\n<code>",
  "    return sentence.split(\" \").filter(function(word){\n        return /^[\u0430\
    -\u044F]{2}$/.test(word);\n    }).join(\" \");\n}\n", "    // Write your code\
    \ here\n    if(sentence.length==0){\n        return \"\";\n    }\n    let arr=sentence.split(\"\
    \ \");\n    let map=[];\n    for(let i=0;i<arr.length;i++){\n        map[i]=true;\n\
    \    }\n    for(let i=2;i<Math.sqrt(arr.length)+1;i++){\n        if(map[i]){\n\
    \            for(let j=2;j<Math.sqrt(arr.length);j++){\n                if(map[j]*arr[i]!=map[i]){\n\
    \                    map[j]=false;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    let result=\"\";\n    for(let i=0;i<arr.length;i++){\n\
    \        if(map[i]){\n            result+=arr[i]+\" \";\n        }\n    }\n  \
    \  \n    if(result==\"\"){\n        result=\"Nothing\";\n    }\n    return result;\n\
    }\nlet sentence=\"lets go for swimming\";", "    // Write your code here\n   \
    \ var arr = sentence.split(' ');\n    \n    var newArr = new Array();\n    for(var\
    \ i=0; i<arr.length; i++){\n        for(var j=1; j<arr.length; j++){\n       \
    \     if(arr[i]!=arr[j]){\n                for(var k=i; k<=j; k++){\n        \
    \            if(arr[k]==arr[i]){\n                        break;\n           \
    \         }\n                }\n                newArr.push(arr[i]);\n       \
    \         for(var l=i; l<=j; l++){\n                    if(arr[k]==arr[l]){\n\
    \                        break;\n                    }\n                }\n  \
    \              newArr.push(arr[j]);\n                for(var k=i; k<=j; k++){\n\
    \                    if(arr[k]==arr[k+1]){\n                        break;\n \
    \                   }\n                }\n                newArr.push(arr[j]);\n\
    \            }\n        }\n    }\n    return newArr.join(' ');\n}\n\nwords_in_sentence(\"\
    lets go for swimming\")", "    // Write your code here\n    let words = sentence.split(\"\
    \ \");\n    let n = words.length;\n    let str = \"\";\n    for(let i = 0; i <\
    \ n; i++){\n        let temp = \"\";\n        for(let j = 0; j < n; j++){\n  \
    \          temp += words[j]\n            if(str.indexOf(words[j]) == -1) str +=\
    \ \" \" + words[j];\n        }\n    }\n    return str.trim()\n}\n", "    let wordsInSentence\
    \ = [];\n    let result = '';\n    for(let word of sentence.split(\" \")){\n \
    \       if(primeWordLength(word)){\n            wordsInSentence.push(word);\n\
    \        }\n    }\n    for(let word of wordsInSentence){\n        result = result\
    \ + word + \" \";\n    }\n    result = result.slice(0, result.length - 1);\n \
    \   return result;\n}\n", "    \n    let primeArr = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47];\n    \n    function findPrimes(str){\n        let\
    \ primeArr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];\n     \
    \   for(let i = 0; i < primeArr.length; i++){\n            primeArr[i] = primeArr[i]*primeArr[i];\n\
    \        }\n        str = str.replace(/\\s+/g,\"\");\n        let primeStr = str.split('').filter(x=>primeArr.includes(parseInt(x)));\n\
    \        return primeStr;\n    }\n    \n    let newStr = findPrimes(sentence).join('\
    \ ');\n    return newStr;\n    \n}\n</cell>\n<cell>", "    \n}\n", "    let words=sentence.split(\"\
    \ \");\n    let result=[];\n    for(let i=0;i<words.length;i++){\n        let\
    \ nums=getPrimeNums(words[i].length);\n        for(let j=0;j<words[i].length;j++){\n\
    \            for(let k=0;k<nums.length;k++){\n                if(words[i][j].trim()==nums[k].trim()){\n\
    \                    if(j+1<words[i].length){\n                        result.push(words[i]);\n\
    \                    }\n                    for(let l=j+1;l<words[i].length;l++){\n\
    \                        if(words[i][l].trim()==nums[k].trim()){\n           \
    \                 result.push(words[i]);\n                            break;\n\
    \                        }\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result.join(\"\
    \ \");\n}\n", "  return sentence.split(\" \").map(s => s.split(\"\").filter(w\
    \ => /^[aeiou]{2,}$/i.test(w)).join(\"_\")).join(\" \");\n}\n", "  return getPrimeWords(sentence);\n\
    }\n", "    let words = sentence.split(' ');\n    let primes = prime_numbers(words.length);\n\
    \    let sortedWords = words;\n    sortedWords.sort(function(x, y){\n        return\
    \ primes.indexOf(y) - primes.indexOf(x);\n    });\n    return sortedWords.join('\
    \ ');\n};\n\nlet sentence = \"lets go for swimming\";", "    const map = new Map()\n\
    \    const words = []\n\n    for(let i=0; i<sentence.length; i++){\n        if(map.has(sentence[i])){\n\
    \            words.push(sentence[i])\n        }else{\n            let prime =\
    \ true\n            let currentValue = map.get(sentence[i])\n            while(prime){\n\
    \                prime = isPrime(currentValue)\n                currentValue +=\
    \ 1\n            }\n            words.push(currentValue)\n            map.set(sentence[i],\
    \ currentValue)\n        }\n    }\n\n    return words.join(' ')\n}\n", "  if(sentence.includes('\
    \ ')){\n    return \"No solution\"\n  }\n  let words = new Set(sentence.split(\"\
    \ \").filter(x => x != ' '))\n  for(let i = 2; i < Math.sqrt(words.size); i++){\n\
    \    if(!words.has(`${i}`)){\n      continue;\n    }\n    let temp = words.delete(`${i}`);\n\
    \    words.forEach(x => words.delete(x))\n    words.forEach(x => words.set(x,\
    \ `${i}`))\n    return words.filter(x => x != ``).join(\" \")\n  }\n  return \"\
    No solution\"\n}\n", "    // Write your code here\n    \n    let arr = sentence.split('\
    \ ');\n    arr.sort();\n    \n    let str = \"\";\n    \n    let primes = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(!primes.includes(arr[i].length)){\n\
    \            primes.push(arr[i].length);\n        }\n    }\n    primes.sort();\n\
    \    primes.shift();\n    \n    for(let i = 0; i < primes.length; i++){\n    \
    \    str += arr[primes[i] - 1];\n    }\n    \n    return str;\n}\n\nwords_in_sentence(\"\
    This was a great movie!\");\n</code>\n<|/ a |>\n<| c |>\nWelcome to Stack Overflow!\
    \ Thank you for this code snippet, which might provide some limited short-term\
    \ help.  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its long-term value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with other, similar questions.\
    \  Please [edit] your answer to add some explanation, including the assumptions\
    \ you've made.\n<|/ c |>\n<| a dscore=0 tags=algorithm,data-structures,javascript\
    \ |>\n<code>", "    let newString = \"\";\n    sentence.split(\" \").forEach((word)\
    \ => {\n        if(!isPrimeNumber(word.length)){\n            newString += word\
    \ + \" \";\n        }\n    });\n    return newString.trim();\n}\n", "    let str=sentence.replace(/^\\\
    s+|\\s+$/g,\"\")\n    if(str.length<=0) return \"\";\n    \n    let newStr=str.replace(/\\\
    s+/g,\" \").split(\" \");\n    let result=[];\n    for(let i=0;i<newStr.length;i++){\n\
    \        if(!newStr[i].match(/^[0-9]+$/)){\n            result.push(newStr[i])\n\
    \        }\n    }\n    return result.join(\" \");\n    \n    \n}\n", "    \n \
    \   \n    //Solution 1 \n    let result = sentence.match(/.+?\\s+/g).filter((word)\
    \ => {\n        \n        \n        //Solution 2\n        //let result = sentence.split(\"\
    \ \").filter(word => {\n        return isPrime(word.length);\n    });\n\n    return\
    \ result;\n}\n", "    let ans = \"\";\n    let arr = sentence.split(' ');\n  \
    \  for(let i = 0;i<arr.length;i++){\n        if(prime(arr[i].length)){\n     \
    \       ans += arr[i]+\" \";\n        }\n    }\n    return ans.trim();\n}\n\n\
    <|/ file filename=words.js |>\n<| c |>\n[tag:algorithm] tag is for questions on\
    \ algorithms; please do not use it here. Use [tag:programming] instead. Thanks!\n\
    <|/ c |>\n<| a dscore=0 |>\nA very simple approach would be to create a HashMap\
    \ with the key being each letter of the sentence and the value being a boolean\
    \ telling if the letter is a prime or not. From there you can check each character\
    \ in the sentence and check to see if the key in the hashmap has the letter. If\
    \ it does, then check if the value associated with the letter is true (meaning\
    \ it is a prime number) or false (meaning it is not prime). \nThe function should\
    \ return a boolean indicating if the sentence is a Prime or not, which you can\
    \ then return from the main function.\n<|/ a tags=algorithm,javascript |>\n<|\
    \ a dscore=0 |>\nHere is another possible solution that does not use any extra\
    \ space (assuming the input doesn't exceed 20 characters):\n\n<code>\nvar isPrime\
    \ = n => \n  [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    .every(x => n % x === 0)\n  ;\n  \nvar isWord = s => \n  isPrime(s.length)\
    \ ? s.split('').every(x => x === 'a' || x === 'e' || x === 'i' || x === 'o' ||\
    \ x === 'u') : false\n  ;\n  \nvar isSentence = s => \n  s.split(' ').every(isWord)\n\
    \  ;\n  \nvar isPrimeSentence = s => \n  s.split(' ').every(isPrime)\n  ;\n  \n\
    var primeSentence = s => \n  s.split(' ').map(isPrimeSentence).join(' ')\n  ;\n\
    \  \nvar primeSentence = s => \n  s.split(' ').map(x => primeSentence(x)).join('\
    \ ')\n  ;\n\nvar primeSentence = s => \n  s.split(' ').map(x => primeSentence(x)).join('\
    \ ')\n  ;\n\nvar primeSentence = s => \n  s.split(' ').map(x => primeSentence(x)).join('\
    \ ')\n  ;\n\nvar primeSentence = s => \n  s.split(' ').map(x => prime", "    let\
    \ map = new Map();\n    let strArr = sentence.split(\" \");\n    strArr.forEach(word\
    \ => {\n        let len = word.length;\n        if(len > 2){\n            let\
    \ exist = map.get(len);\n            if(exist){\n                exist.add(word)\n\
    \            }else{\n                map.set(len, new Set([word]));\n        \
    \    }\n        }\n    })\n    let result = strArr.filter(item => {\n        let\
    \ len = item.length;\n        return map.has(len)\n    })\n    return result.join(\"\
    \ \")\n}\n", "    //Return the answer here\n}\nwords_in_sentence('This is a test');\n\
    words_in_sentence('Lets go for swimming');\nwords_in_sentence('Lets go for swimming\
    \ by winter');\nwords_in_sentence('Lets go for swimming by summer');\nwords_in_sentence('Lets\
    \ go for swimming by autumn');\nwords_in_sentence('Lets go for swimming by winter\
    \ spring');\nwords_in_sentence('Lets go for swimming by winter spring');\nwords_in_sentence('Lets\
    \ go for swimming by winter spring rain');\nwords_in_sentence('Lets go for swimming\
    \ by winter spring rain');\nwords_in_sentence('Lets go for swimming by winter\
    \ spring rain');\nwords_in_sentence('Lets go for swimming by winter spring rain\
    \ today');\nwords_in_sentence('Lets go for swimming by winter spring rain today');\n\
    words_in_sentence('Lets go for swimming by winter spring rain today');\nwords_in_sentence('Lets\
    \ go for swimming by winter spring rain today');\nwords_in_sentence('Lets go for\
    \ swimming by winter spring rain today');\nwords_in_sentence('Lets go for swimming\
    \ by winter spring rain today');\nwords_in_sentence('Lets go for swimming by winter\
    \ spring rain today is');\nwords_in_sentence('Lets go for swimming by winter spring\
    \ rain today is');\nwords_in_sentence('Lets go for swimming by winter spring rain\
    \ today is');\nwords_in_sentence('Lets go for swimming by winter spring rain today\
    \ is');\nwords_in_sentence('Lets go for swimming by winter spring rain today is');\n\
    words_in_sentence('Lets go for swimming by winter spring rain today is');\nwords_in_sentence('Lets\
    \ go for swimming by winter spring rain today is');\nwords_in_sentence('Lets go\
    \ for swimming by winter spring rain today is');\nwords_in_sentence('Lets go for\
    \ swimming by winter spring rain today is');\n", "    let new_sentence = '';\n\
    \    \n    for(let word of sentence.split(' ')){\n        let new_word = word;\n\
    \        if(is_prime(word.length)){\n            new_sentence = `${new_sentence}\
    \ ${new_word}`;\n        }\n    }\n\n    return new_sentence;\n}\n", "    let\
    \ arr = sentence.split(\" \");\n    let result = '';\n    let len = arr.length;\n\
    \    for (let i = 0; i < len; i++){\n        if(!isPrime(parseInt(arr[i]))){\n\
    \            result += arr[i]+\" \";\n        }\n    }\n    return result;\n}\n",
  "    if(sentence.length<=1)\n        return \"-1\";\n    let arr = sentence.split(\"\
    \ \");\n    for(let i=1;i<arr.length;i++){\n        if(arr[i].length!=arr[i-1].length)\n\
    \            return \"-1\";\n    }\n    return arr;\n}\n", "  //This is where\
    \ you write your code\n  let result = []\n  let str = sentence.split(' ')\n  for(let\
    \ i = 0; i < str.length; i++){\n    if((Math.pow(2,str.length-i).indexOf(str[i])\
    \ > -1)){\n      result.push(str[i])\n    }\n  }\n  return result.join(\" \")\n\
    }\n", "    const words = sentence.split(' ');\n    words.map(word => checkIfPrime(word));\n\
    \    return words.join(' ');\n}\n", "    // write your code here\n    \n    let\
    \ map = sentence.split(' ').map((e) => {\n        let [str, num] = [e.split('').reverse().join(''),\
    \ Number.parseInt(e.split('').reverse().join(''))]\n        let [firstChar, secondChar]\
    \ = [str.charAt(0), str.charAt(str.length - 1)]\n        return [str, num, [firstChar,\
    \ secondChar]]\n    })\n    \n    return map.filter((e) => {\n        let [str,\
    \ num, firstChar, secondChar] = e\n        return (!Number.isNaN(num) && num %\
    \ 1 === 0 && firstChar === secondChar)\n    }).map((e) => {\n        let [str,\
    \ num, firstChar, secondChar] = e\n        let arr = [firstChar, secondChar]\n\
    \        let finalStr = str.replace(firstChar, secondChar)\n        return arr.map((e)\
    \ => {\n            let [firstChar, secondChar] = e\n            return finalStr.replace(firstChar,\
    \ secondChar)\n        })\n    }).reduce((e, a) => a.join('') + e, sentence)\n\
    }\n", "    const arr = sentence.split(\" \");\n    let primeArr = arr.filter((val)\
    \ => {\n        return isPrimeNumber(Number(val));\n    })\n    return primeArr.join(\"\
    \ \");\n}\n", "    if(sentence.length <= 0)\n        throw \"empty string\"\n\n\
    \    const re = /^[a-z]+/\n    const list = sentence.match(re)\n\n    return list.filter(item\
    \ => !isPrime(item).length).join(\" \")\n}\n\nconst isPrime = item => {\n    if(item.length\
    \ <= 1)\n        return true\n\n    const re = /^[a-z]+/\n    const list = item.match(re)\n\
    \n    return list.filter(item => !isPrime(item).length).length === 0\n}\n</code>\n\
    <|/ a tags=string,primes,javascript |>\n<| a tags=string,primes,javascript |>\n\
    <code>", "  // code here\n};\n\nmodule.exports = {\n  words_in_sentence,\n  test_words_in_sentence\n\
    };\n\n},{}],130:[function(require,module,exports){", "    let words = sentence.split(\"\
    \ \");\n    for(let i=0;i<words.length;i++){\n        let prime = true;\n    \
    \    for(let j=0;j<words.length;j++){\n            if(Math.abs(j-i) == 1){\n \
    \               prime = false;\n                break;\n            }\n      \
    \  }\n        if(prime){\n            words[i] = words[i].trim();\n        }\n\
    \    }\n    return words.join(\" \");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
