name: HumanEval_133_sum_squares
language: js
prompt: "//You are given a list of numbers.\n// You need to return the sum of squared\
  \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
  \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
  \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be\
  \ 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
  \ the output should be 6\nfunction sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0,\
  \ 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    // initialize result\n    var result = 0;\n    //loop through each\
    \ element in the list\n    for(var i=0;i<lst.length;i++){\n        //calculate\
    \ square of current element\n        result+=Math.pow(lst[i],2);\n        //Round\
    \ the square to the closest integer\n        result=Math.ceil(result)\n    }\n\
    \    \n    return result;\n}", "  var squares = lst.map(x => Math.ceil(x*x))\n\
    \  return squares.reduce((a, b) => a + b, 0)\n}\n", "  let sum = 0;\n  for (let\
    \ i of lst) {\n    sum += Math.round(i*i);\n  }\n  return sum;\n}\n", "  var sum\
    \ = 0;\n  lst.map(function(n){\n    sum += Math.pow(Math.ceil(n),2);\n  });\n\
    \  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    let res\
    \ = 0;\n    for(let i of lst){\n        let squared = Math.pow(i,2);\n       \
    \ res = res + squared;\n    }\n    return Math.round(res);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x * x)).reduce((a,b)=>a+b);\n}", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++){\n    sum += lst[i]*lst[i];\n  }\n  return\
    \ Math.round(sum);\n}\n", "    var sum=0;\n    for(var i=0;i<lst.length;i++)\n\
    \        sum+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n    return sum;\n}\n", " \
    \   let total = 0;\n    for(let i = 0; i < lst.length; i++){\n        total +=\
    \ Math.ceil(lst[i] * lst[i]);\n    }\n    return total;\n}\n", "    \n    let\
    \ result = 0;\n    for(let item of lst){\n        result += (Math.round(Math.ceil(item)-Math.floor(item)));\n\
    \    }\n    return result;\n}\n", "    let res = []\n    let l = lst.length\n\
    \    for(let i = 0;i < l;i++){\n        let n = Math.ceil(lst[i])\n        res.push(n*n)\n\
    \    }\n    return sum(res)\n}", "  lst.sort((a,b)=>{return Math.floor(Math.ceil(a))-Math.ceil(Math.ceil(b));});\n\
    \  let sum = 0;\n  for (let i=0; i<lst.length; i++){\n    sum+=Math.pow(lst[i],\
    \ 2);\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  let total = 0;\n  lst.map(item => {\n    let round = Math.ceil(item)\n    total\
    \ += round * round * item\n  });\n  return Math.round(total);\n}\n\nsum_squares([1,2,3])",
  "    var res = [];\n    for(var i = 0; i < lst.length; i++)\n        res.push(Math.ceil(lst[i]*lst[i]));\n\
    \    return res;\n}", "    let sum = 0;\n    let roundTo = Math.ceil(lst[0]);\n\
    \    for(let i = 1; i<lst.length; i++){\n        sum += Math.round(lst[i]*lst[i])*roundTo;\n\
    \    }\n    return sum;\n}\n", "    let newLst = []\n    for (let i = 0; i < lst.length;\
    \ i++){\n        newLst.push(Math.ceil(lst[i] * lst[i]));\n    }\n    return newLst.reduce((a,\
    \ b) => a + b, 0);\n}\nvar result = sum_squares([1.4, 4.2, 0]);", "    return\
    \ lst.reduce(function(a, b){\n      return Math.ceil(a) + Math.ceil(b);\n    });\n\
    }", "    \n    let lst2 = lst.map(x => Math.ceil(Math.sqrt(x)));\n    let sum\
    \ = 0;\n    for(let i = 0; i < lst2.length; i++){\n        sum += lst2[i]*lst2[i];\n\
    \    }\n    console.log(sum);\n    return sum;\n}\n\nsum_squares([-1.2,-2.3,3.3]);\
    \ //-3\nsum_squares([1,-2,-3]); //2\nsum_squares([2,4,-3]); //3\nsum_squares([0,1.5,-3]);\
    \ //1.5\nsum_squares([-1,-5,-3]); //5\nsum_squares([2,4,-4,-3,-2,-1,0,3,-5,-4]);\
    \ //15\nsum_squares([1,-2,-3]); //2\nsum_squares([2,4,-3]); //3\nsum_squares([0,1.5,-3]);\
    \ //1.5\nsum_squares([-1.2,-2.3,3.3]); //-3\nsum_squares([0,1.5,-3]); //1.5\n\
    sum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-3]); //5\nsum_squares([1,-2,-3]);\
    \ //2\nsum_squares([2,4,-3]); //3\nsum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-3]);\
    \ //5\nsum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-3]); //5\nsum_squares([0,1.5,-3]);\
    \ //1.5\nsum_squares([-1.2,-2.3,3.3]); //-3\nsum_squares([0,1.5,-3]); //1.5\n\
    sum_squares([-1,-5,-3]); //5\nsum_squares([1,-2,-3]); //2\nsum_squares([2,4,-3]);\
    \ //3\nsum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-3]); //5\nsum_squares([1,-2,-3]);\
    \ //2\nsum_squares([2,4,-3]); //3\nsum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-3]);\
    \ //5\nsum_squares([0,1.5,-3]); //1.5\nsum_squares([-1,-5,-", "\tvar sum = 0;\n\
    \tvar len = lst.length;\n\tfor(var i=0; i < len; i++){\n\t\tvar num = Math.round(lst[i]*Math.pow(10,\
    \ len));\n\t\tsum += num;\n\t}\n\treturn sum;\n}\n", "  return Math.pow(lst.reduce((a,\
    \ b) => a + Math.ceil(b)), 2)\n}\n", "    let total = 0;\n    let i = 0;\n   \
    \ while(i < lst.length){\n        total += Math.ceil(lst[i]*lst[i]);\n       \
    \ i++;\n    }\n    return Math.round(total);\n}\n", "    var sum=0;\n    var num=0;\n\
    \    for(var i=0;i<lst.length;i++){\n        num=(lst[i]*lst[i]);\n        sum+=num;\n\
    \    }\n    return Math.ceil(sum);\n}\n</code>\n<|/ a tags=javascript,math,algorithm,rounding,ceil\
    \ |>\n<| c |>\nHi, I used your solution and it works except for the first and\
    \ last elements. I did this `var sum=Math.ceil(sum);\n    \n    if(sum<0){\n \
    \       sum=0;\n    }`\n<|/ c |>\n<| c |>\nYes exactly...The first and last element\
    \ would return 0.\n<|/ c |>\n<| a dscore=0 |>\nIn JavaScript, Math.ceil(number)\
    \ is exactly the same as Math.ceil(number*1000) / 1000, but for integers:\n<code>",
  "    var total = 0;\n    for (var i=0; i<lst.length; i++) {\n        total+=Math.pow(lst[i],2);\n\
    \    }\n    return Math.ceil(total);\n}\n</code>\n<|/ a tags=javascript |>\n<|\
    \ a tags=javascript dscore=0 |>\nAs stated here:\n\"The Math.pow() function can\
    \ be used with any base and will return the correct number. However, the exponent\
    \ needs to be an integer.\"\nSo, Math.pow(2,5) will return 16, but Math.pow(2,2.3)\
    \ will return 16.333\n<|/ a |>\n<| a tags=javascript dscore=0 |>\nI tested the\
    \ function in chrome console:\n\n<code>", "  \n  var len = lst.length\n  if(len\
    \ == 0){\n    return 0\n  }\n  \n  if(len == 1){\n    return lst[0]\n  }\n  \n\
    \  if(lst[0] > 0){\n    var mid = Math.ceil(len/2)\n    var sum = 0\n    for(var\
    \ i=0;i<mid;i++){\n      sum += Math.pow(lst[i],2)\n    }\n    return sum\n  }\n\
    \  \n  if(lst[len-1] > 0){\n    var mid = Math.ceil(len/2)\n    var sum = 0\n\
    \    for(var i=0;i<mid;i++){\n      sum += Math.pow(lst[i],2)\n    }\n    return\
    \ sum\n  }\n  \n  var mid = Math.ceil(len/2)\n  var sum = 0\n  for(var i=0;i<mid;i++){\n\
    \    sum += Math.pow(lst[i],2)\n  }\n  return sum\n}\n", "    var sum = 0;\n \
    \   for(var i = 0; i < lst.length; i++){\n        if(lst[i] !== 0){\n        \
    \    sum += Math.ceil(lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\n",
  "  let sum = 0;\n  for(let i=0; i<lst.length; i++){\n    sum = sum + Math.pow(lst[i],2);\n\
    \  }\n  return Math.round(sum);\n}\n", "\tlet sum = 0;\n\tfor (let i = 0; i <\
    \ lst.length; i++) {\n\t\tsum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\t}\n\
    \treturn sum;\n}\n", "    \n    // Your code here\n    var sum = 0;\n    for(var\
    \ i in lst)\n        sum += Math.ceil(lst[i])*Math.ceil(lst[i]);\n    return sum;\n\
    }\n", "\tvar result = 0\n\tfor(var i in lst){\n\t\tif(lst[i] != null && lst[i].length\
    \ > 0){\n\t\t\tresult += Math.ceil(lst[i]*lst[i])\n\t\t}\n\t}\n\treturn result\n\
    }\n", "   let sum = 0;\n   for(let i=0; i<lst.length; i++){\n     sum+=Math.ceil(lst[i]*lst[i]);\n\
    \   }\n   return sum;\n}\n", "    if(lst.length==0){\n        return 0;\n    }\n\
    \    let sum_sq = 0;\n    for(let i=0; i<lst.length; i++){\n        sum_sq +=\
    \ lst[i]*lst[i];\n    }\n    return Math.ceil(sum_sq);\n}\n", "    var ret = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n         \
    \   ret += Math.ceil(lst[i]*lst[i])\n        }\n    }\n    return ret;\n}\n",
  "  var sum = 0;\n  for(var i=0; i< lst.length; i++){\n    var x = Math.ceil(lst[i]);\n\
    \    sum+=x*x;\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=1 tags=arrays,javascript,list\
    \ |>\n<| a dscore=1 |>\n<code>", "  if(lst.constructor === Array){\n    return\
    \ lst.map(e=>Math.round(e*e)); //return Math.round(e*e) //Math.round(e*e).toFixed(0)\
    \ //return Math.round(Math.pow(e,2))\n  }\n  else{\n    throw \"List is not an\
    \ array\";\n  }\n}\n", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n \
    \       sum+=Math.ceil(lst[i]);\n    }\n    return sum*sum;\n}", "    var sum=0;\n\
    \    for (var i=0; i<lst.length; i++){\n        sum += Math.ceil(lst[i]*lst[i]);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI doubt that \"lst.length\"\
    \ will give the right answer.\n<|/ c |>\n<| c |>\nIt will give the correct answer\
    \ based on the example he provided. I've tested it and I'm getting 14 for lst\
    \ = [1, 2, 3] and 6 for lst = [1, 4, 9] etc.\n<|/ c |>\n<| c |>\nThe right answer\
    \ is 14.\n<|/ c |>\n<| c |>\nThe right answer should be 14.  I've tested it with\
    \ the example he provided. I'm getting 14 for lst = [1, 2, 3] and 6 for lst =\
    \ [1, 4, 9] etc.\n<|/ c |>\n<| c |>\nPlease check the example I've posted.\n<|/\
    \ c |>\n<| a |>\n<code>", "  var ans = lst.reduce((a, b) => a + Math.round(b));\n\
    \  return Math.round(ans);\n}\n", "    var sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n\
    }\n", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n        sum+=Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n\
    <| a dscore=0 tags=javascript,arrays |>\n<code>", "\tlet ans = 0;\n\tfor (let\
    \ i = 0; i < lst.length; i++) {\n\t\tans += Math.ceil(lst[i]*lst[i]); //Math.ceil\
    \ rounds the number up and Math.floor() rounds it down\n\t}\n\treturn ans;\n}\n\
    let res = sum_squares([2,4,-5,7.6,-3,-9,-7.4,1,8,3.5,8]);", "\tlet sum = 0;\n\t\
    for (let i=0; i<lst.length; i++) {\n\t\tsum += Math.pow(lst[i], 2);\n\t}\n\treturn\
    \ Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i=0; i<lst.length; i++){\n\
    \    sum += Math.ceil(lst[i]);\n    sum += Math.ceil(lst[i]);\n    sum += Math.ceil(lst[i]);\n\
    \    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n}\n", "    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++)\n        sum += lst[i]*lst[i];\n    return\
    \ Math.ceil(sum);\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=arrays,javascript,node.js\
    \ |>\nTry this, I hope this will help you :)\n\n<code>\nlet arr = [1.4, 4.2, 0,\
    \ -5, 3];\n", "  let new_lst = lst.map(x =>{\n    return Math.ceil(Math.sqrt(x))\n\
    \  })\n  let sum = 0\n  new_lst.forEach(x => {\n    sum += x\n  })\n  return sum\n\
    }\n", "\tlet total = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet a = Math.ceil(lst[i]);\n\
    \t\tlet b = Math.floor(lst[i]);\n\t\ttotal += a * b;\n\t}\n\treturn total;\n}\n",
  "    let numArray = lst.map(Math.round)\n    let sum = 0\n    for(let i of numArray){\n\
    \        sum = sum + i\n    }\n    return sum\n}", "  let sum = 0; \n  for (let\
    \ i = 0; i < lst.length; i++) { \n    sum = sum + lst[i]*lst[i];\n  } \n  return\
    \ Math.ceil(sum)\n}\n", "\tconst n = lst.length;\n\tlet sum = 0;\n\tfor (let i\
    \ = 0; i < n; i++){\n\t\tsum += Math.ceil(lst[i] * lst[i]);\n\t}\n\treturn sum;\n\
    }", "    if(!lst.length) return 0;\n    let total = 0;\n    for(let i=0; i< lst.length;\
    \ i++){\n        let square = Math.pow(lst[i], 2);\n        total = total + square;\n\
    \    }\n    return Math.round(total);\n}\n", "  var total = 0;\n  for(var i=0;i<lst.length;i++){\n\
    \    var square = lst[i]*lst[i];\n    total += Math.round(square);\n  }\n  return\
    \ Math.round(total);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.ceil(sum);\n\
    }", "    let sum = 0;\n    lst.map(elem => {\n        sum += Math.ceil(elem);\n\
    \    });\n    return sum;\n}", "    if (lst.length <= 0) {\n        throw new\
    \ Error('Not a valid list');\n    }\n    // console.log(lst);\n    var newlist\
    \ = [];\n    for (var j = 0; j < lst.length; j++) {\n        var elem = lst[j];\n\
    \        // console.log(elem);\n        newlist.push(Math.floor(elem*elem));\n\
    \    }\n    // console.log(newlist);\n    return newlist.reduce(function(accumulator,\
    \ current) {\n        return accumulator + current;\n    });\n}\n\nvar arr = [1.4,4.2,0,-2.4,1,1];\n\
    var result = sum_squares(arr);", "    var sum = 0 ;\n    for(var i = 0 ; i < lst.length\
    \ ; i ++){\n        sum += Math.pow(lst[i], 2) ;\n    }\n    return Math.round(sum)\
    \ ;\n}", "  var sum = 0;\n  lst.map(function(n){\n    sum+=Math.pow(n,2);\n  });\n\
    \  return Math.round(sum);\n}", "    let num = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n        num += Math.ceil(lst[i] * lst[i]);\n    }\n    return num;\n\
    }\n", "    var total = 0;\n    for (var i = 0; i < lst.length; i++){\n       \
    \ total += Math.pow(lst[i],2);\n    }\n    return Math.round(total);\n}\n</code>\n\
    <|/ a dscore=0 tags=javascript |>\n<| a tags=javascript |>\n<code>", "  var result\
    \ = 0;\n  var temp = 0;\n  for (var i = 0; i < lst.length; i++)\n  {\n    temp\
    \ = lst[i] * lst[i];\n    result += (Math.round(temp));\n  }\n  return result;\n\
    }", "    let sum = 0;\n    for (let i = lst.length - 1; i>= 0; i--) {\n      \
    \  let squared = lst[i]*lst[i];\n        sum = sum + squared;\n    }\n    return\
    \ Math.round(sum);\n}\n", "    if(lst.length == 0) return 0;\n    var sum = 0;\n\
    \    var squared = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > 0)\n            squared += lst[i] * lst[i];\n        else if(lst[i] < 0)\n\
    \            squared += -lst[i] * lst[i];\n        else\n            continue;\n\
    \        sum += Math.ceil(squared);\n        squared = 0;\n    }\n    return sum;\n\
    }\n", "    return lst.map( n => Math.round(n*n)+n).reduce((a,b) => a+b);\n}\n",
  "\tlst.sort((a, b) => Math.ceil(a) - Math.ceil(b));\n\tvar sum = 0;\n\tfor(var i=0;\
    \ i<lst.length; i++){\n\t\tsum += Math.pow(lst[i], 2);\n\t}\n\treturn sum;\n}\n",
  "\tvar sum = 0;\n\tfor(var i=0;i<lst.length;i++){\n\t\tsum += Math.pow(lst[i],2);\n\
    \t}\n\treturn Math.round(sum);\n}\n", "  var sum = 0;\n  lst.forEach(function(v){\n\
    \    sum+=Math.ceil(Math.sqrt(v))*Math.ceil(Math.sqrt(v));\n  });\n  return sum;\n\
    }\n", "    var sum=0;\n    var arr=[];\n    for(let i=0;i<lst.length;i++)\n  \
    \  {\n        arr.push(Math.round(lst[i]*lst[i]));\n    }\n    for(let i=0;i<arr.length;i++)\n\
    \    {\n        sum+=arr[i];\n    }\n    return sum;\n}\n", "    var sum_of_squares\
    \ = 0;\n    for(var i = 0, len = lst.length; i < len; i++){\n        sum_of_squares\
    \ += lst[i] * lst[i];\n    }\n    return Math.ceil(sum_of_squares);\n}\n", " \
    \ if(lst.length == 0){\n    return 0;\n  }\n  let min = lst[0];\n  let max = 0;\n\
    \  for(let i = 0; i < lst.length; i++){\n    let temp = lst[i];\n    max = Math.max(temp,\
    \ max);\n    min = Math.min(temp, min);\n  }\n  let sum = 0;\n  for(let i = min;\
    \ i <= max; i++){\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n}\nsum_squares([1.4,4.2,0]);\n\
    </cell>\n<cell>", "  var sum = 0;\n  for(var i=0; i< lst.length; i++){\n    sum\
    \ += lst[i]*lst[i];\n  }\n  return Math.round(Math.ceil(sum));\n}\n", "    //Your\
    \ code here\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    sum += lst[i]*lst[i]\n    }\n    return Math.ceil(sum);\n}\n", "  if (lst.length\
    \ < 1) return 0;\n  lst.sort();\n  return lst.reduce((x,y)=>x+Math.pow(y*y,2),0);\n\
    }", "  return lst.map(x => Math.ceil(x*x).valueOf()).reduce((a, b) => a + b)\n\
    }\n", "\tvar sum_squares = lst.reduce(function(acc, val){\n\t\treturn acc + val*val;\n\
    \t}, 0);\n\treturn Math.round(sum_squares);\n}", "  var sum = 0;\n  for(var i=0;\
    \ i < lst.length; i++){\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n",
  "    let sum=0;\n    for(let i=0;i<lst.length;i++){\n        sum+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}\n", "  var sum=0;\n  lst.map(function(i){\n    sum+=Math.round(i*i)\n\
    \  })\n  return sum;\n}\n</cell>\n<cell>\n# Write a Python program to find the\
    \ largest prime factor of a given number.\n# Input:\n# n = 324\n# Output: 7\n\
    import math\ndef largest_prime_factor(n):\n    i = 2\n    while i*i <= n:\n  \
    \      if n%i == 0:\n            return int(n/i)\n        i = i+1\n    return\
    \ n\n\nprint(largest_prime_factor(24))\nprint(largest_prime_factor(25))\nprint(largest_prime_factor(100))\n\
    print(largest_prime_factor(1000))\n</cell>\n<text>\n3. Mathematical Functions\n\
    \n</text>\n<text>\n3.1 Addition and Subtraction\n\n</text>\n<text>\nThe sum of\
    \ two integers is a common operation in many fields. For example, the sum of the\
    \ numbers 7 and 5 is 12. However, addition and subtraction are often performed\
    \ differently.\n\nAddition involves adding the numbers up. In the above example,\
    \ the sum of 5 and 7 is 12. Similarly, we can add up to two numbers as follows:\n\
    \n7 + 12 = 22\n12 + 5 = 37\n\nSubtraction involves subtracting the first number\
    \ from the second number. In the above example, the result of subtracting the\
    \ number 7 from the number 5 is 3.\n\nAddition and subtraction are performed in\
    \ different ways depending on the operands and result. For example:\n\na + b =\
    \ a + b + a + b + ...\na + b = (a * b) + (a * b) + a + b + ...\na + b = a + (a\
    \ * b) + b + a + b + ...\n\nThe second expression looks more complicated; it is\
    \ more similar to the addition operation that we learned about in school. The\
    \ first expression is the same, but we now have to add parentheses around the\
    \ terms. In parentheses we group terms, and then we add them up. The difference\
    \ between the second and third expressions is in order of operation: the parentheses\
    \ change the order of operation. This makes the first expression much more difficult\
    \ to understand.\n\nTo avoid this problem, we need to understand the difference\
    \ between the operators, operands, and results. Operator is the math function\
    \ that performs the operation on the operands. Operands are the numbers we wish\
    \ to operate on. In the second expression a is both an operand and a operator;\
    \ however, in the first expression a * b is only an operand. Similarly, in the\
    \ third expression a + (a * b) is only an operand.\n\nThe addition operation is\
    \ performed as follows: we add up the two operands using the operation we selected\
    \ (addition), and then we add the sums together. To find the sum of two numbers,\
    \ you can just add them up as ", "\tlst.forEach(function(x) { x = Math.floor(x);\
    \ });\n\treturn lst.reduce((a,b)=>a+b,0);\n}\n", "    let sum = 0\n    let l =\
    \ lst.length\n    for(let i=l-1; i>=0; i--){\n        sum += Math.pow(lst[i],2)\n\
    \    }\n    return Math.round(sum)\n}\n", "    // write your code here\n    return\
    \ lst.map(x => Math.round(x * x)).reduce((a,b) => a + b);\n}\n", "    for(let\
    \ i = 0; i < lst.length; i++)\n    {\n        lst[i] = Math.ceil(lst[i]);\n  \
    \  }\n    console.log(lst);\n    return lst.reduce((a,b)=>{\n        return a+b\n\
    \    }, 0);\n}\n</code>\n<|/ a tags=for-loop,javascript,rounding,arrays |>\n<|\
    \ a |>\nThis is my solution:\n<code>", "  if(lst.length == 0){\n    return 0\n\
    \  }\n  \n  lst.forEach((el, i) => {\n    lst[i] = Math.ceil(el)\n  })\n\n  return\
    \ lst.map(el => el * el).reduce((a, b)=>a+b)\n}\n", "\tvar sum = 0;\n\tfor (var\
    \ i = 0; i < lst.length; i++) {\n\t\tvar sq = Math.round(Math.ceil(lst[i]*lst[i]));\n\
    \t\tsum += sq;\n\t}\n\treturn sum;\n}\n", "  var sum = 0;\n  lst.forEach(function(x){\n\
    \    sum += Math.round(x * x)\n  })\n  return sum\n}\n", "    var sum = 0;\n \
    \   var sqrSum = 0;\n    for(var i=0;i<lst.length;i++){\n        sum = sum+lst[i]*lst[i];\n\
    \        sqrSum = sqrSum+Math.round(Math.pow(lst[i],2));\n    }\n    return Math.round(Math.sqrt(sqrSum));\n\
    }\n", "  return lst.map(x=>Math.ceil(x*x)).reduce((a,b)=>a+b)\n}\n", "    let\
    \ result = 0;\n    let ceiling = Math.ceil(lst[0]);\n    for(let i = 0; i < lst.length;\
    \ i++){\n        result += Math.pow(lst[i], 2);\n        result += ceiling * (lst[i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nGood answer, but what\
    \ if list contain negative value?\n<|/ c |>\n<| a dscore=1 tags=sum,javascript,square,ceil\
    \ |>\nHere is my attempt using simple for loop:\n\n<code>\nconst sumOfSquares\
    \ = list => {\n  let sumOfSquares = 0;\n  for (let i = 0; i < list.length; i++)\
    \ {\n    const square = list[i] * list[i];\n    sumOfSquares += square;\n  }\n\
    \  return sumOfSquares;\n};\n", "  lst.sort();\n  \n  var sum = 0;\n  for (var\
    \ i = 0; i < lst.length; i++) {\n    sum += lst[i]*lst[i];\n  }\n  return Math.round(sum);\n\
    }\n", "  return Math.ceil(lst.map(n => Math.pow(n,2)).reduce((a,b)=>a+b));\n}",
  "\tconst round = (x) =>{\n\t\tlet y = Math.ceil(x);\n\t\tlet z = (x - y)\n\t\treturn\
    \ z\n\t}\n\tlet result = Math.pow(lst.reduce((p,c) => p + c,0),2)\n\treturn Math.round(result)\n\
    }", "\tvar sum = 0;\n\tfor(var i = 0;i < lst.length;i++){\n\t\tvar temp = Math.ceil(lst[i]*lst[i]);\n\
    \t\tsum += temp;\n\t}\n\treturn sum;\n}", "  let sum = 0;\n  for(let i of lst){\n\
    \    sum += Math.ceil(i) * Math.ceil(i);\n  }\n  return sum;\n}\n", "    \n  \
    \  var sum = 0;\n    for (var i=0; i<lst.length; i++){\n        sum += Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}\n", "    \n    let sum = 0;\n    \n    for(let item\
    \ of lst){ //iterate the array and add the squares of the items to the sum\n \
    \       sum += Math.pow(item,2);\n    }\n    \n    return Math.round(sum)\n  \
    \  \n}\nsum_squares([-1.2, 4.3, 3.2])\n</cell>\n<cell>", "    var sq=0;\n    for(let\
    \ item of lst){\n        if(isNaN(item)){\n            continue;\n        }\n\
    \        sq+=Math.pow(item,2);\n    }\n    return Math.round(Math.ceil(Math.sqrt(sq)));\n\
    }\nsum_squares([1,2,3]); // 14\nsum_squares([1,4,9]); // 98\nsum_squares([1,3,5,7]);\
    \ // 84\nsum_squares([1.4,4.2,0]); // 29\nsum_squares([-2.4,1,1]); // 6\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=javascript |>\nI prefer to do something like this\
    \ (use Math.pow for squaring):\n\n<code>\nvar lst = [1, 2, 3];\n", "    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        var item = lst[i]\n\
    \        sum += item * item;\n    }\n    return Math.round(sum);\n}\n", "    var\
    \ sum=0;\n    for(i=0; i<lst.length; i++){\n        sum = sum + lst[i] * lst[i];\n\
    \    }\n    return Math.round(sum);\n}\n</code>\n<|/ a tags=arrays,javascript\
    \ |>\n<| c |>\nPlease add an explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| c |>\nPlease explain your code, so that other users can\
    \ understand why and how it works.\n<|/ c |>\n<| c |>\nI thought my explanation\
    \ was clear. I think its clear now\n<|/ c |>\n<| c |>\nHow come `Math.round()`\
    \ works on `sum` but not on `arr1`? Is it because `sum` already is a rounded integer\
    \ value? If so, why does `Math.round()` work on `arr1`?\n<|/ c |>\n<| a tags=arrays,javascript\
    \ |>\n<code>\nvar list = [1, 4, 9, 3, 7, 5];\nvar arr1 = [];\nvar arr2 = [];\n\
    \nfor (i = 0; i < list.length; i++) {\n    arr1.push(Math.ceil(list[i]));\n  \
    \  arr2.push(Math.ceil(list[i]));\n}\n", "    for(var i=0;i<lst.length;i++){\n\
    \        var s = lst[i]*lst[i]\n        s = Math.ceil(s);\n        s = Math.round(s);\n\
    \        s += i\n    }\n    return s\n}", "    let sum = 0;\n    for(let i of\
    \ lst){\n        sum += Math.ceil(i*i);\n    }\n    return sum;\n}\n", "  var\
    \ sum=0;\n  var count=0;\n  for(var i=0;i<lst.length;i++){\n    sum=sum+lst[i]*lst[i];\n\
    \    count=count+1;\n  }\n  return Math.ceil(sum/Math.pow(count,0.5));\n}\n</code>\n\
    <|/ a tags=algorithm,javascript |>\n<| a dscore=2 |>\nAnother way to do it would\
    \ be to use reduce to get the sum of squares up to the number you want.\n<code>",
  "    let result = 0;\n    for(let item of lst){\n      result = Math.ceil(Math.pow(item,\
    \ 2))+result;\n    }\n    return result\n}", "    let sum = 0;\n    lst.map(ele\
    \ => sum += Math.round(ele*ele)); \n    return sum;\n}\n\nvar sum_of_squares =\
    \ sum_squares([1.4, 4.2, 0]); //29", "    \n    // Using reduce function\n   \
    \ let result = lst.reduce((acc,num) => acc+=num*num,0)\n    \n    // Using for\
    \ loop\n    let sum_squares = 0;\n    for(let i=0;i<lst.length;i++){\n       \
    \ sum_squares+= lst[i]*lst[i]\n    }\n    \n    // Using while loop\n    let sum_squares_while\
    \ = 0;\n    while(lst.some(x => x>0)){\n        let tmp = lst.pop()\n        sum_squares_while+=\
    \ tmp*tmp\n    }\n    \n    console.log(`result = ${result}, sum_squares= ${sum_squares},\
    \ sum_squares_while= ${sum_squares_while}`)\n    \n    \n}\n\nsum_squares([1,4,9,-4,8,2,-6])\n\
    \nsum_squares([1,4,9,-4,8,2,-6])\n\nsum_squares([1,3,5,7,9,4,1])\n\nsum_squares([1.4,4.2,0])\n\
    \nsum_squares([-2.4,1,1])\n\nsum_squares([1,2,3])\n\nsum_squares([0.8,2.8,3.4])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,-3,4])\n\nsum_squares([1,2,3])\n\n\
    sum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,0.8,2.8,3.4])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\nsum_squares([1,2,3])\n\
    \nsum_squares([", "  if(lst.constructor === Array){\n    lst.forEach(function(val){\n\
    \      val = Math.ceil(val);\n      val = val*val;\n      val = Math.round(val);\n\
    \      lst = lst.reduce(function(acc, val){\n        if(val == val) return acc;\n\
    \        if(val > val) return acc+val;\n        return acc;\n      }, 0);\n  \
    \  })\n    return lst;\n  }\n}\nsum_squares([1.4, 4.2, 0]);\n", "    var sum =\
    \ 0;\n    var l = lst.length;\n    for(var i=0; i<l; i++){\n        if(lst[i]>0){\n\
    \            sum += Math.ceil(lst[i]);\n        }\n        else{\n           \
    \ sum += Math.floor(lst[i]);\n        }\n    }\n    return sum;\n}\n", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n      sum += lst[i] * lst[i]\n\
    \    }\n    return Math.round(sum);\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        let square = Math.ceil(lst[i]*lst[i]);\n\
    \        sum += square;\n    }\n    return sum;\n}\n", "  let sum = 0;\n  let\
    \ square;\n  let i;\n  let arr = [];\n\n  for (i = 0; i < lst.length; i++) {\n\
    \    arr.push(Math.ceil(lst[i]));\n  }\n  for (i = 0; i < arr.length; i++) {\n\
    \    square = arr[i] * arr[i];\n    sum += square;\n  }\n  return sum;\n}\n",
  "    var sum_squares = 0;\n    var l = lst.length;\n    for(var i = 0; i < l; i++){\n\
    \        sum_squares += lst[i]*lst[i];\n    }\n    return Math.round(sum_squares);\n\
    }\n", "\tvar sum = 0;\n\tfor(var i=0; i<lst.length; i++){\n\t\tsum += Math.pow(lst[i],\
    \ 2);\n\t}\n\treturn Math.ceil(sum);\n}\n", "    // your code here\n\t\n\treturn\
    \ 0;\n}\n\nsum_squares([1.5,4.2,0]); // 29\nsum_squares([-2.4,1,1]); // 6\n",
  "  var sum = 0;\n  var len = lst.length;\n\n  for (var i=0; i<len; i++) {\n    sum\
    \ += lst[i]*lst[i];\n  }\n\n  return Math.ceil(sum);\n}\n", "  var sum = 0;\n\
    \  lst.forEach(function(num){\n    sum += Math.ceil(num * num);\n  });\n  return\
    \ sum;\n}\nsum_squares([1,2,3]);//14\nsum_squares([1,4,9]);//98\nsum_squares([1,3,5,7]);//84\n\
    sum_squares([1.4,4.2,0]);//29\nsum_squares([-2.4,1,1]);//6\nsum_squares([1.6,\
    \ 3.2, 9.3]);//4\nsum_squares([-1.6, 3.4, 9.1]);//1\nsum_squares([1,3,7,5,9,11,13,15]);//49\n\
    sum_squares([1,3.3,5,7,11,13,15,17,19]);//86\nsum_squares([1.6,3.2,9.3,7.1,5,9,11,13,15]);//47\n\
    sum_squares([-1,3.4,9.1,7.2,5,11,13,15,17,19]);//83\nsum_squares([1,-3,5.5,7,11,13,15,17,19]);//-84\n\
    sum_squares([-1,-3,5.5,7,11,13,15,17,19]);//-84\nsum_squares([1,3,5,7,11,13,15,17,19]);//-84\n\
    sum_squares([-1.6,3.2,9.3,7.1,5,9,11,13,15]);//-47\nsum_squares([1,-3.4,9.1,7.2,5,11,13,15,17,19]);//-86\n\
    sum_squares([1,-3,5.5,7,11,13,15,17,19]);//-84\nsum_squares([-1,-3,5.5,7,11,13,15,17,19]);//-84\n\
    sum_squares([-1.6,3.2,9.3,7.1,5,9,11,13,15]);//-47\nsum_squares([1,3.3,5,7,11,13,15,17,19]);//86\n\
    sum_squares([1,3.3,-5,-7,11,13,15,17,19]);//86\nsum_squares([-1.6,3.2,9.3,7.1,5,9,11,13,15]);//-47\n\
    sum_squares([1,3.3,-5,-7,11,13,15,17,19]);//86\nsum_squares([1,-3.4,9.1,7.2,5,11,13,15,17,19]);//-86\n\
    sum_squares([1,3.3,-5,-7,11,13,15,17,19]);//86\nsum_squares([1,-3.4,9.1,7.", " \
    \ var sum = 0;\n  for(var i=0;i<lst.length;i++){\n    sum+=lst[i]*lst[i];\n  }\n\
    \  return Math.round(sum)\n}\n", "    let sum=0;\n    for (let i=0;i<lst.length;i++){\n\
    \        sum+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n    }\n    return sum;\n}",
  "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let x = lst[i]\n  \
    \  sum += Math.pow(Math.ceil(x), 2)\n  }\n  return sum;\n}", "    var arr = [];\n\
    \    for (var i=0; i<lst.length; i++){\n       arr.push(Math.round(lst[i]*lst[i]))\n\
    \    }\n    return Math.pow(arr.reduce(function(a,b){return a+b}),2);\n}", " \
    \   for(let i = 0; i < lst.length; i++){\n        lst[i] = Math.round(lst[i]);\n\
    \    }\n    return lst.reduce((prev, cur) => prev + cur*cur, 0);\n}\n", "    let\
    \ sum = 0;\n    for(let i=0;i<lst.length;i++){\n        sum += Math.pow(lst[i],2)\n\
    \    }\n    return Math.round(sum);\n}\n", "  for(var i=0;i<lst.length;i++){\n\
    \    lst[i]=Math.ceil(lst[i]);\n  }\n  return lst.map(function(x){\n    return\
    \ x*x;\n  }).reduce(function(a,b){\n    return a+b;\n  });\n}\n", "    let sum=0;\n\
    \    for(let i=0;i<lst.length;i++){\n        sum=sum+lst[i]*lst[i];\n    }\n \
    \   return Math.ceil(sum)\n}\n", "    lst = lst.map(x=>Math.ceil(x*x))\n    var\
    \ sum = 0;\n    for(i = 0; i < lst.length; i++){\n        sum += lst[i];\n   \
    \ }\n    return sum;\n}\n", "  if (lst.length===0){\n    return 0;\n  }\n\n  let\
    \ result = Math.ceil(lst[0]*lst[0]);\n  let sum = 0;\n\n  for (let i = 1; i<lst.length;\
    \ i++){\n    sum += Math.ceil(lst[i]*lst[i])*lst[i];\n  }\n\n  return result+sum;\n\
    }\n", "  let sum = 0\n  for(let el of lst)\n    sum += el * el\n\n  return Math.round(sum)\n\
    }\n", "  var res = [];\n  for(var i=0;i<lst.length;i++){\n    res.push(Math.ceil(lst[i]*lst[i]));\n\
    \  }\n  return Math.pow(res.reduce(function(x,y) { return x+y; }), 0.5);\n}\n\n\
    sum_squares([1, 4, 9]);\nsum_squares([1, 3, 5, 7]);\nsum_squares([1.4, 4.2, 0]);\n\
    sum_squares([-2.4, 1, 1]);\nsum_squares([2, 4, 4, 4]);\nsum_squares([1, 1, 1,\
    \ 1, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\nsum_squares([0,\
    \ 4, -8, 1]);\nsum_squares([0, 4, -8, 1]);\n", "    const result = lst.map(item\
    \ => Math.round(item*item)).reduce((a,b) => a+b, 0);\n    return result;\n}\n\
    </code>\n<|/ a dscore=4 tags=arrays,algorithm,javascript,sorting |>\n<| c |>\n\
    `Math.round()` will round up to the nearest integer value, not to the nearest\
    \ integer.\n<|/ c |>\n<| c |>\nIt will be like Math.round(x+0.5)\n<|/ c |>\n<|\
    \ c |>\nIt does not work well, try this: `Math.round(-7.4999999999) + Math.round(-7.4999999999)`,\
    \ you get `-8.`\n<|/ c |>\n<| c |>\nThe correct way is `Math.round(Math.ceil(item*item))`\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nvar arr = [1.3,2.4,3.7];\nvar sum = arr.reduce((a,\
    \ b) => a + b, 0);\n</code>\n<|/ a tags=arrays,algorithm,javascript,sorting |>\n\
    <| c |>\nYou missed the part that requires that the numbers are rounded to the\
    \ nearest integer.\n<|/ c |>\n<| c |>\nThis answer does not round the number to\
    \ the nearest integer.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript,sorting\
    \ |>\nThe best way is to use Array.prototype.reduce(). Here's a code example:\n\
    \n<code>\nlet arr = [1.3,2.4,3.7];\n\nconst result = arr.reduce((accumulator,\
    \ currentValue) => accumulator + currentValue, 0);\n", "  let sum = 0;\n  for(let\
    \ i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i])*Math.ceil(lst[i]);\n\
    \  }\n  return sum;\n}", "    \n    for (let i = lst.length; i--; ){\n       \
    \ lst[i] = Math.ceil(lst[i]); //change to ceiling\n    }\n    \n    let sum =\
    \ 0;\n    for (let i = 0; i < lst.length; i++){\n        sum += lst[i] * lst[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nMy Solution\
    \ :\n<code>", "    var sum = 0;\n    for (var i=0; i<lst.length; i++){\n     \
    \   sum += lst[i]*lst[i]\n    }\n    return Math.round(sum);\n}\n", "    for(var\
    \ i=0; i<lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n    }\n    var\
    \ sum = 0;\n    for(var i=0;i<lst.length;i++){\n        sum+=lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        var num = Math.round(lst[i]*100)/100;\n        sum += num*num;\n\
    \    }\n    return sum;\n}", "  let sum = 0\n  for(let i=0;i<lst.length;i++){\n\
    \    sum += Math.ceil(lst[i])*Math.ceil(lst[i])\n  }\n  return sum\n}", "  let\
    \ len = lst.length;\n  let sum = 0;\n  let tmp = 0;\n  for(let i = 0; i < len;\
    \ i++){\n    tmp = Math.ceil(lst[i]);\n    sum += tmp * tmp;\n  }\n  return sum;\n\
    }", "  var sum = 0;\n  for(var i=0;i<lst.length;i++)\n  sum += lst[i]*lst[i];\n\
    \  return Math.round(sum);\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c\
    \ |>\nThis is a good idea, but does not round the numbers to `Math.round`, just\
    \ truncates it instead.\n<|/ c |>\n<| a dscore=4 tags=arrays,javascript |>\nUsing\
    \ ES6 you can do like this\n<code>\nlet array = [10, 20, 30];\nlet result = array.map(Math.round);",
  "    let sum = 0;\n    lst.map((x) => sum += Math.pow(Math.round(x),2));\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,javascript |>\nYou\
    \ can use the pow() function to simplify your code.\n<code>", "    var result\
    \ = 0;\n    for(var i =0; i< lst.length; i++){\n        result += (lst[i]* lst[i]);\n\
    \    }\n    return Math.ceil(Math.sqrt(result));\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a |>\nWe can use Array.reduce() method.\n\n<code>", "  var sum = 0;\n\
    \  for (var i=0; i<lst.length; i++){\n    sum = sum + Math.pow(lst[i], 2);\n \
    \ }\n  return Math.round(sum);\n}\n", "\tlet sum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++)\n\t\tsum += Math.pow(lst[i], 2);\n\treturn Math.ceil(sum);\n}\n", "\tvar\
    \ res = 0; //sum of squares\n\tfor(var i=0; i<lst.length; i++){\n\t\tres = Math.ceil(res+lst[i]*lst[i])\n\
    \t}\n\treturn res;\n}\n", "    const min = Math.min.apply(null, lst);\n    const\
    \ max = Math.max.apply(null, lst);\n    let sum = 0;\n    for(let i=min;i<=max;i++){\n\
    \        sum += Math.pow(i,2);\n    }\n    return sum;\n}", "  var sum=0\n  lst.forEach(function(num){\n\
    \    sum+=Math.ceil(num*num)\n  })\n  return sum\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++){\n    let temp = lst[i];\n    sum += Math.pow(temp,\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "\tlet result = 0;\n\tfor (let i\
    \ = 0; i < lst.length; i++){\n\t\tresult = result + (lst[i]*lst[i]);\n\t}\n\t\
    return Math.round(result + 0.5);\n}\n", "    var res = 0\n    for(var i=0;i<lst.length;i++){\n\
    \        var a = Math.ceil(lst[i]); //Math.ceil() will round it up\n        res\
    \ += a * a \n    }\n    return res\n}\n</code>\nThe above solution takes O(n)\
    \ time O(1) space which comes at a cost of O(n).\nUsing a for loop takes O(n)\
    \ time, O(n) space which comes at a cost of O(n).\nUsing Array.prototype.map takes\
    \ O(n) time, O(1) space which comes at a cost of O(n).\n<|/ a tags=loops,javascript,for-loop,nested,algorithm\
    \ |>\n<| a tags=loops,javascript,for-loop,nested,algorithm dscore=3 |>\nThis is\
    \ an interesting question. As you already know a for loop is a really bad idea\
    \ when it comes to code readability, performance and maintainability. So I wrote\
    \ a sample code to show the pros and cons of the different solutions, even though\
    \ I personally wouldn't use them in production.\nFirst the code itself:\n<code>",
  "    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        sum += Math.pow(lst[i],\
    \ 2);\n    }\n    return Math.round(sum);\n}\n", "  let arr = [];\n  let sqsum\
    \ = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] >= 0){\n      arr.push(lst[i]);\n\
    \    } else {\n      arr.push(Math.round(lst[i]*100));\n    }\n  }\n  for(let\
    \ i = 0; i < arr.length; i++){\n    sqsum = sqsum + (Math.pow(arr[i], 2));\n \
    \ }\n  return Math.round(sqsum);\n}\n", "  let sum=0;\n  for (let i=0;i<lst.length;i++){\n\
    \    sum+=Math.ceil(lst[i]*lst[i]);\n  }\n  return sum;\n}\n</code>\n<|/ a |>\n\
    <| a tags=javascript,function |>\nHere is a function that does the job you are\
    \ looking for.\nThe function takes three arguments: first is the list to search,\
    \ second is the number to round up and third is the number to round down.\nThe\
    \ function returns all occurrences up to but not including the first one (or the\
    \ last one if rounding down is desired) and the sum of squares of all occurrences.\n\
    The function uses recursion.\n<code>", "  lst.forEach((num) => {\n    const num\
    \ = Math.round(num);\n    sum += num * num;\n  });\n  return Math.round(sum);\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>", "    var sum = 0;\n    for(var i=0; i<lst.length;i++){\n\
    \        sum += Math.ceil(lst[i])*Math.ceil(lst[i]);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,javascript,list,math |>\n<| a dscore=0\
    \ |>\n<code>\nconst sumSquares = arr => arr.reduce((acc, cur) => acc + Math.pow(cur,2),\
    \ 0)\n</code>\n<|/ a tags=arrays,javascript,list,math |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a |>\n<code>\nvar sumSquared=function(list){\n  var sum=0;\n  for(var\
    \ i=0;i<list.length;i++){\n    sum+=Math.pow(list[i],2);\n  }\n  return Math.round(sum);\n\
    }", "  if(lst.length===0){\n    return 0\n  }\n\n  let sum=0;\n  for (let i=0;i<lst.length;i++){\n\
    \    sum+=lst[i]*lst[i]\n  }\n  sum=Math.round(sum)\n  return sum;\n}\n", "  if\
    \ (lst.length === 0)\n    return 0;\n  var sum = 0;\n  var len = lst.length;\n\
    \  var cur = lst[0];\n  for (var i = 0; i < len; i++){\n    cur = Math.ceil(cur);\n\
    \    sum += cur * cur;\n    cur = lst[i];\n  }\n  return sum;\n}", "    let sum\
    \ = 0;\n    for(let i of lst){\n        sum += Math.round(i*i)*Math.round(i*i)\n\
    \    }\n    return sum;\n}", "    var sum_of_squares=0;\n    for(var i=0;i<lst.length;i++){\n\
    \        sum_of_squares += Math.ceil(lst[i] * lst[i]);\n    }\n    return sum_of_squares;\n\
    }\n", "  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n      sum += lst[i]*lst[i];\n\
    \  }\n  return Math.round(sum);\n}\n", "  let nums = []\n  lst.forEach((num) =>\
    \ {\n    num = Math.ceil(num)\n    nums.push(num)\n  });\n\n  nums = nums.reduce((x,\
    \ y) => x + y, 0);\n  return nums;\n}\n", "    return lst.map(function(v){return\
    \ Math.ceil(Math.sqrt(v))}).reduce(function(a,b){return a+b})\n}\n", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Math.round(lst[i]*Math.pow(lst[i],2));\n\
    \        sum += num;\n    }\n    return sum;\n}\n", "    var sum = 0;\n    for\
    \ (var i = 0; i < lst.length; i++)\n    {\n        sum += lst[i] * lst[i];\n \
    \   }\n    return Math.round(sum);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=function,javascript,loops\
    \ |>\n<code>\nvar sumOfSquares = function (input) {\n    var sum = 0;\n    for\
    \ (var i = 0; i < input.length; i++) {\n        sum += Math.pow(Math.round(input[i]),\
    \ 2);\n    }\n    return sum;\n};\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\nvar sumOfSquares = function(arr) {\n    var result = 0;\n    for(var i\
    \ = 0; i < arr.length; i++)\n    {\n        result += arr[i] * arr[i];\n    }\n\
    \    return Math.round( result );\n};\n</code>\n<|/ a tags=function,javascript,loops\
    \ |>\n<| a tags=function,javascript,loops |>\n<code>\nvar sumOfSquares = function(input)\
    \ {\n    var sum = 0;\n    for (var i = 0; i < input.length; i++) {\n        sum\
    \ += Math.pow(Math.round(input[i]), 2);\n    }\n    return sum;\n};\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=function,javascript,loops dscore=1 |>\n<code>\nvar\
    \ sumOfSquares = function (input) {\n  var sum = 0;\n  for (var i = 0; i < input.length;\
    \ i++) {\n    sum += Math.pow(input[i], 2);\n  }\n  return Math.round(sum);\n\
    };\n</code>\n<|/ a |>\n<| c |>\nPlease provide some explanation of your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=function,javascript,loops\
    \ dscore=1 |>\n<code>\nvar sumOfSquares = function(input) {\n    var sum = 0;\n\
    \    for (var i = 0; i < input.length; i++) {\n        sum += Math.pow(Math.round(input[i]),\
    \ 2);\n    }\n    return sum;\n};\n</code>\n<|/ a |>\n<| c |>\nWelcome to StackOverflow!\
    \ Code only answers are discouraged because they don't explain why they work or\
    \ how they work.\n<|/ c |>\n<| c |>\nThis was the only answer I could find that\
    \ was even able to calculate the sum of squares of integers from 1 - 10 (including\
    \ multiples of 10).  This answer was very easy to understand and implement.  I'd\
    \ be interested in knowing why it's discouraged?  Thanks.\n<|/ c |>\n<| a tags=function,javascript,loops\
    \ dscore=0 |>\n<code>", "  var res = [];\n  var sum = 0;\n  for (var i = lst.length\
    \ - 1; i >= 0; i--) {\n    var num = Math.ceil(lst[i]);\n    sum = sum + num *\
    \ num;\n    res.push(sum);\n  }\n  return res.length;\n}\n</code>\n<|/ a tags=arrays,javascript\
    \ dscore=1 |>\n<| c |>\nI added an explanation to the code.  If you have any questions\
    \ about the code, feel free to ask.\n<|/ c |>\n<| c |>\nThanks for the solution.\
    \ I will go through this code soon and try to understand it.\n<|/ c |>\n<| a tags=arrays,javascript\
    \ |>\nThe easiest and shortest way is to use reduce (from ES6) which does exactly\
    \ what you need:\n<code>", "\tvar sum = 0;\n\t\n\tfor(var i = 0; i < lst.length;\
    \ i++)\n\t\tsum += lst[i]*lst[i];\n\t\n\treturn Math.round(sum);\n}\n", "    if\
    \ (lst.length == 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let\
    \ item of lst) {\n        sum += Math.pow(item, 2);\n    }\n    return Math.round(sum);\n\
    }\n", "\tfor(var i=0; i<lst.length; i++){\n\t\tlst[i] = Math.ceil(lst[i]);\n\t\
    }\n\treturn lst.reduce((a, b) => a + b, 0);\n}\n", "    let sum=0;\n    for (let\
    \ i=lst.length-1; i>=0; i--){\n        sum+=lst[i]*lst[i];\n    }\n    return\
    \ Math.round(sum);\n}\n", "  let square_sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    square_sum += Math.round(lst[i]*lst[i]);\n  }\n  return square_sum;\n\
    }\n", "    if(lst.length < 1) return 0\n\n    return lst.reduce((a, b)=>Math.ceil(a+b)*Math.ceil(a+b))\n\
    }\n", "\tlst = lst.map(function(val){\n\t\tif(typeof val === \"number\"){\n\t\t\
    \treturn Math.round(val*val)\n\t\t}\n\t\telse{\n\t\t\treturn val\n\t\t}\n\t})\n\
    \treturn lst.reduce(function(a,b){\n\t\treturn a+b\n\t})\n}\n", "    var sum =\
    \ 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]\
    \ * lst[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript,algorithm,sum,arrays,sorting\
    \ dscore=0 |>\n<| a dscore=0 |>\nI have tried your code, but didn't get proper\
    \ answer for some input values.\nHere is my working code. Hope this helps. \n\
    <code>", "  \n}\n\nvar arr = [-6, 0, 3, -9, 5]\n", "    var sum = 0;\n    for\
    \ (var i of lst){\n        sum += Math.ceil(i)*Math.ceil(i);\n    }\n    return\
    \ sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++){\n \
    \       let num = Math.ceil(lst[i]*lst[i]);\n        sum += num;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| a |>\nUsing reduce() you can do it as:\n\n<code>",
  "    var sum = 0;\n    var rounded_lst = lst.map(function(item){\n        return\
    \ Math.ceil(item)\n    }).map(function(item){\n        return Math.pow(item, 2);\n\
    \    });\n    return rounded_lst.reduce(function(a, b){\n        return a + b;\n\
    \    });\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=javascript,arrays |>\n<code>",
  "  let result = lst.reduce((acc,cur) => {\n    if (cur > Math.ceil(lst.shift())){\n\
    \      acc += Math.pow(cur,2);\n      lst.shift();\n    } else {\n      acc +=\
    \ cur * cur;\n    }\n    return acc;\n  }, 0);\n  return result;\n}\n\nvar n =\
    \ [1,4,9,16,25,36,49,64,81,100];", "   let res = 0\n   for (let i = 0; i< lst.length;\
    \ i++){\n   res +=  Math.ceil(lst[i]*lst[i]) //Math.ceil to round the element\n\
    \   }\n   return res;\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++)\n        sum += Math.pow(lst[i],2);\n    return Math.round(sum);\n}\n</code>\n\
    <|/ a dscore=1 tags=javascript |>\n<| c |>\n`Math.pow(4,2)` is not equal to 8.\n\
    <|/ c |>\n<| a |>\nThe Math.pow method doesn't work for numbers, only for floating\
    \ point numbers. To round the numbers in your example, you'll have to write your\
    \ own logic for rounding. There's a question here that explains how to do it:\
    \ Rounding to an n decimal place in JavaScript\n<|/ a tags=javascript dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "  let sum = 0;\n  for(let i=0; i<lst.length;\
    \ i++){\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n", "    var sum=0;\n\
    \    for(var i=0;i<lst.length;i++){\n        sum+=Math.pow(lst[i],2);\n    }\n\
    \    return Math.round(sum);\n}\n</code>\n<|/ a tags=javascript,math |>\n<| a\
    \ tags=javascript,math dscore=0 |>\nHere is a recursive solution.\n<code>", " \
    \   let result = 0;\n    for (let element of lst){\n        result = result +\
    \ Math.ceil(element * element);\n    }\n    return result;\n}\n</code></pre>\n\
    \        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"\
    index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"HTTP.html\">HTTP</a></li><li><a\
    \ href=\"Magister.html\">Magister</a></li><li><a href=\"Session.html\">Session</a></li><li><a\
    \ href=\"Session.Appointment.html\">Appointment</a></li></ul><h3>Namespaces</h3><ul><li><a\
    \ href=\"Magister.html\">Magister</a></li><li><a href=\"Session.html\">Session</a></li></ul>\n\
    </nav>\n\n<br class=\"clear\">\n\n<footer>\n    Documentation generated by <a\
    \ href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.5.5</a> on Tue Jan 14 2018\
    \ 12:02:04 GMT+0800 (GMT+08:00)\n</footer>\n\n<script> prettyPrint(); </script>\n\
    <script src=\"scripts/linenumber.js\"> </script>\n</body>\n</html>\n\n<|/ file\
    \ filename=Magister.html |><|endofmask|><|endofmask|>ext=.html source=github |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
  "  var sum = 0;\n  \n  for(var i of lst){\n    sum += Math.round(i*i)*Math.round(i*i);\n\
    \  }\n\n  return sum;\n}\n\nvar sum_sqrs_test = [\n  {\n    \"name\": \"should\
    \ return 14\",\n    \"lst\": [ 1, 2, 3 ],\n    \"exp\": 14\n  },\n  {\n    \"\
    name\": \"should return 98\",\n    \"lst\": [ 1, 4, 9 ],\n    \"exp\": 98\n  },\n\
    \  {\n    \"name\": \"should return 84\",\n    \"lst\": [ 1, 3, 5, 7 ],\n    \"\
    exp\": 84\n  },\n  {\n    \"name\": \"should return 29\",\n    \"lst\": [ 1.4,\
    \ 4.2, 0 ],\n    \"exp\": 29\n  },\n  {\n    \"name\": \"should return 6\",\n\
    \    \"lst\": [-2.4, 1, 1 ],\n    \"exp\": 6\n  },\n  {\n    \"name\": \"should\
    \ return 0\",\n    \"lst\": [ 0, 0 ],\n    \"exp\": 0\n  }\n];\n\nTest.runTests(sum_sqrs_test);\n",
  "  let sum = 0\n  for( let i=0; i<lst.length; i++){\n    sum += Math.pow(lst[i],\
    \ 2)\n  }\n  return Math.round(sum)\n}\n", "  lst.sort((a, b) => Math.ceil(a)\
    \ - Math.ceil(b));\n  lst.map(num => Math.ceil(num))\n  return lst.reduce((acc,\
    \ num) => acc + Math.pow(num, 2), 0)\n}", "    let answer = 0;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        answer += lst[i]*lst[i]\n    }\n    return\
    \ Math.round(answer);\n}\nvar lst = [3.1, 2.9, 4.5, -1.2];", "    var sum = 0;\n\
    \    var sum = 0;\n    for(var i = 0, len = lst.length; i < len; i++){\n     \
    \   var num = Math.round(lst[i] * Math.pow(10, len));\n        sum += num;\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1\
    \ tags=javascript,arrays |>\nThis is my solution:\n<code>", "  let arr = []\n\
    \  lst.map(v=>{\n    return Math.round(Math.ceil(v*v))\n  }).map(v=>{\n    arr.push(v)\n\
    \  })\n  let sum = 0\n  for (let i=0;i<arr.length;i++){\n    sum+=arr[i]*arr[i]\n\
    \  }\n  return Math.round(sum)\n}\n\n<|/ file filename=functions_array.js |>\n\
    <| c |>\nHi Jonathan could you please explain me why is this not working as I\
    \ expect it to? The function is supposed to return an answer of 14 for all the\
    \ list examples I gave in the question. I don't understand why the function returns\
    \ the wrong answers.\n<|/ c |>\n<| c |>\nI've updated my answer\n<|/ c |>\n<|\
    \ a tags=arrays,javascript |>\nJust to show that one can do this, here is a more\
    \ advanced version where the inner function is used to get the squared values\
    \ and each of the returned values are summed:\n\n<code>", "  var answer = 0;\n\
    \  for (var i = 0; i < lst.length; i++){\n      answer = answer + Math.ceil(lst[i]\
    \ * lst[i]);\n  }\n  return answer;\n}\n<|/ file filename=math_questions.js source=github\
    \ |>\n<| a |>\nThere are a number of issues with your code.  Firstly, you are\
    \ trying to use Math.ceil which doesn't exist.  It should be Math.round.  Secondly,\
    \ you are not using the result of Math.round, which is why you get that random\
    \ number.\n<code>", "\tvar sum = 0;\n\t\n\tlst.forEach(function(item) {\n\t\t\
    sum += Math.round(item*item);\n\t});\n\t\n\treturn sum;\n}", "    let num = 0;\n\
    \    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        num += Math.ceil(lst[i]);\n\
    \        sum += num;\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't round the numbers to the upper int first.\n<|/ c |>\n<| a dscore=0\
    \ tags=javascript |>\nThis is my solution:\n<code>", "    for(var i in lst){\n\
    \        lst[i] = Math.ceil(lst[i]);\n    }\n    lst = lst.map(Math.pow);\n  \
    \  console.log(lst);\n    var sum = 0;\n    for(var i in lst){\n        sum +=\
    \ lst[i];\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for(let element\
    \ of lst){\n        sum += Math.pow(element, 2);\n    }\n    return Math.round(sum);\n\
    }\n", "  // Your code here\n  var total = 0;\n  for(var i=0; i<lst.length; i++){\n\
    \    total += Math.ceil(lst[i]*lst[i]);\n  }\n  return total;\n}", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n\
    \  }\n  sum += lst[lst.length - 1];\n  return Math.round(sum);\n}\n", "    let\
    \ sum = 0;\n    for(let i of lst){\n        sum += Math.round(i*i).toString(10)*Math.round(i*i).toString(10);\n\
    \    }\n    return sum;\n}\n", "  \n  if(lst.length < 1)\n    return 0\n\n  var\
    \ sum = 0\n  for (var i = 0; i < lst.length; i++)\n  {\n    var sqrNum = Math.ceil(lst[i]*lst[i]);\
    \ //round the number to the upper int\n    sum += sqrNum\n  }\n  \n  return sum\n\
    }\n\nsum_squares([1,2,3]) // 14\nsum_squares([1,4,9]) // 98\nsum_squares([1,3,5,7])\
    \ //84\nsum_squares([1.4,4.2,0]) //29\nsum_squares([-2.4,1,1]) //6</code>\n\n\
    Hope this helps !\n<|/ a tags=algorithm,javascript,math |>\n<| a dscore=0 |>\n\
    Try this code\n<code>", "  lst.sort();\n  var sum = 0;\n  lst.map((n)=>{\n   \
    \ sum += Math.ceil(Math.pow(n,2));\n  });\n  return sum;\n}\n</code>\n<|/ a tags=javascript,function,list,average\
    \ |>\n<| a |>\nFor a more mathematical solution, I think this is the easiest one:\n\
    \n<code>", "    let sum_sq=0;\n    for (let i=0;i<lst.length;i++){\n        sum_sq+=lst[i]*lst[i];\n\
    \    }\n    return Math.ceil(sum_sq);\n}\n", "\tvar sum = 0;\n\tfor(var i = 0;\
    \ i < lst.length; i++){\n\t\tsum += Math.ceil(lst[i] * lst[i]);\n\t}\n\treturn\
    \ sum;\n}\n", "  var sum = 0;\n  for(var i =0; i < lst.length; i++){\n    sum\
    \ += lst[i]*lst[i];\n  }\n  return Math.ceil(sum);\n}\n", "  return lst.map(v=>Math.ceil(v*v)).reduce((a,b)=>a+b,0)\n\
    }\n</code>\n<|/ a tags=javascript,ecmascript-6,arrays dscore=3 |>\n<| a |>\nI\
    \ liked Joy's answer, but wanted to expand on it.\nThis answer takes advantage\
    \ of the fact that the function Math.ceil is already available.\nThe Math.ceil\
    \ function returns the largest integer less than or equal to a given number.\n\
    In other words, the ceiling function is a function that \"rounds a value up to\
    \ the nearest integer\".  It is a built-in function in some programming languages,\
    \ including the javascript language.  It can also be called as a custom function.\
    \  \nWe can make use of the Math.ceil function like so:\n<code>\nconst ceilToNine\
    \ = Math.ceil;\n</code>\nAnd then we can use it like this:\n<code>\nceil(9.0)\
    \ // 9\n\nceil(10.0) // 10\n\nceil(11.0) // 11\n</code>\nWe can write our function\
    \ like this:\n<code>", "    if(lst == null || lst.length < 2)\n        return\
    \ 0\n    \n    \n    \n    \n    \n    \n    var sum = 0\n    \n    for(var i=0;\
    \ i< lst.length; i++){\n        sum += Math.ceil(lst[i] * lst[i])\n    }\n   \
    \ \n    \n    return sum\n}\n\n", "    // Write your code here\n  for(var i=0;i<lst.length;i++)\n\
    \  {\n    var sqrd = Math.ceil(lst[i]*lst[i]);\n    lst[i]=Math.ceil(lst[i]*lst[i]);\n\
    \    lst[i]=Math.ceil(lst[i]*lst[i]);\n    lst[i]=Math.ceil(lst[i]*lst[i]);\n\
    \    \n    lst[i]+=sqrd;\n  }\n  return lst;\n}\n", "  var sum=0;\n  for(i=0;i<lst.length;i++){\n\
    \    sum+=lst[i]*lst[i];\n  }\n  return sum;\n}\n", "  var sum=0;\n  for(var i\
    \ in lst){\n    sum += Math.pow(lst[i],2);\n  }\n  return Math.round(sum);\n}\n",
  "  var result = 0;\n  lst.forEach(element => {\n    result = result + Math.ceil(element*element);\n\
    \  });\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
