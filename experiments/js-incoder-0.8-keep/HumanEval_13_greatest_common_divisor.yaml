name: HumanEval_13_greatest_common_divisor
language: js
prompt: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
  \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
  \ b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
  \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
  \ 60),12);\n}\n\ntest();"
completions: ["    if(b === 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    // Euclidian algorithm\n    if(a <= b){\n        return\
    \ a;\n    }\n    if(a < 0){\n        return b;\n    }\n    return gcd(b, a%b);\n\
    }\n</code>\n<|/ a tags=javascript dscore=3 |>\n<| c |>\n`greatest_common_divisor`\
    \ is still a recursive function\n<|/ c |>\n<| c |>\nNo. It doesn't use recursion.\n\
    <|/ c |>\n<| c |>\nThe first line in the function is `if (a <= b) return a;` and\
    \ that's recursive too.\n<|/ c |>\n<| c |>\nBut that doesn't stop it from being\
    \ recursive, as the condition is checked before calling the function. Otherwise\
    \ it would be infinitely recursive, right?\n<|/ c |>\n<| c |>\n`greatest_common_divisor(3,\
    \ 5)` returns 1, not 5.\n<|/ c |>\n<| a |>\nThis code will work for any number\n\
    <code>\nvar a = [4,5,6,8,10,20,100]\nvar b = [2,3,5,6,8,10,12]\nvar c = 0\n\n\
    while(true) {\n    var t = a.slice();\n    while (t.length && t.pop() % 2 ===\
    \ 0)\n        t = t.concat(t.pop())\n    if (t.length >= b.length)\n        break;\n\
    \    t.push(b[t.length])\n    c++;\n}", "    a = parseInt(\"0x\" + a);\n    b\
    \ = parseInt(\"0x\" + b);\n    if (a > b)\n        return a;\n    return b;\n\
    }\n", "  return a % b || Math.abs(a - b) % b;\n}", "    while(a % b){\n      \
    \  a = b\n        b -= a%b\n    }\n    return b\n}\n", "  return a / greatest_common_divisor(b,\
    \ a % b);\n}\n", "  var m = a;\n  var n = b;\n  while (true){\n    if (m % n ===\
    \ 0) break;\n    n -= 1;\n    if (n > 0) m /= n;\n    else break;\n  }\n  return\
    \ m;\n}\n", "  return (Math.abs(a) > (Math.abs(b) ? b : a))\n    ? (Math.abs(a)\
    \ > Math.abs(b) ? a : b)\n    : (Math.abs(b) > Math.abs(a) ? b : a)\n}\n", " \
    \ return Math.abs(a - b) % Number.MAX_SAFE_INTEGER === 0 ? a : b;\n}\n", "  if(b\
    \ == 0) return a;\n  return greatest_common_divisor(b, a % b);\n}\n<|/ file source=github\
    \ dstars=1 |>\n<cell>\n#export\ndef gcd_list(a, b):\n  '''\n  Given two lists\
    \ return a list containing the greatest common divisors between the two\n  lists.\n\
    \  '''\n  gcd_result = [a % b]\n  while(b != 0):\n    gcd_result.append(b % gcd_result[-1])\n\
    \    b //= gcd_result[-1]\n  return gcd_result\n</cell>\n<cell>\n#hide\nfrom nbdev.export\
    \ import notebook2script\nnotebook2script()\n</cell>\n<cell>\n#export\ndef gcd_list_fast(a,\
    \ b):\n  '''\n  Given two lists return a list containing the greatest common divisors\
    \ between the two\n  lists.\n  '''\n  d = a\n  c = [a % b]\n  while b != 0:\n\
    \    d *= b\n    c += [b % d]\n    b //= d\n  return c\n</cell>\n<cell>\n#export\n\
    def gcd_list_fast2(a, b):\n  '''\n  Given two lists return a list containing the\
    \ greatest common divisors between the two\n  lists.\n  '''\n  d = a\n  c = [a\
    \ % b]\n  while b != 0:\n    d *= b\n    c.append(b % d)\n    b //= d\n  return\
    \ c\n</cell>\n<cell>\n#export\ndef gcd(a, b):\n  return gcd_list_fast2(a, b)[-1]\n\
    </cell>\n<text>\nTests\n\n</text>\n<cell>\n#export\n# Test greatest common divisors\n\
    assert gcd(5, 5) == 1, '5 is not a common divisor'\nassert gcd(5, 15) == 1, '5\
    \ is not a common divisor'\nassert gcd(15, 5) == 1, '5 is not a common divisor'\n\
    assert gcd(15, 15) == 1, '15 is not a common divisor'\nassert gcd(25, 15) == 5,\
    \ '25 is a common divisor'\nassert gcd(100, 5) == 15, '100 is not a common divisor'\n\
    assert gcd(1000, 5) == 500, '1000 is not a common divisor'\nassert gcd(5000, 5)\
    \ == 10500, '5000 not a common divisor'\nassert gcd(1000, 500) == 10000, '1000\
    \ not a common divisor'\nassert gcd(1000, 1000) == 1, '1 not a common divisor'\n\
    assert gcd(100000, 50000) == 50000, '100000 not a common divisor'\nassert gcd(500000,\
    \ 50000) == 100", "  var t;\n  if(b === 0) return a;\n  if(b !== 0 && ((t = a\
    \ % b)) !== 0) return t;\n  for(a = b; a; a = a / b){\n    t = a\n  }\n  return\
    \ a\n};\n", "  a = a|0;b = b|0;\n  if(b == 0)\n    return a;\n  if(b == 1)\n \
    \   return a;\n  for(var __i__=a|0;__i__;__i__/=2){\n    if(__i__ % b == 0)\n\
    \      return __i__;\n  }\n  return a;\n}", "\treturn Math.abs(a * b) / Math.pow(b\
    \ || a, Math.floor(a / b));\n}\n", "  return Math.abs(a % b + b) % b;\n}\n", "\t\
    a = parseInt(''+a);\n\tb = parseInt(''+b);\n\n\tif (b === 0) {\n\t\tthrow new\
    \ Error('Cannot compute GCD for an even and an odd number');\n\t}\n\t\n\tif (a\
    \ === b) {\n\t\treturn 1;\n\t}\n\t\n\tif (b === 1) {\n\t\treturn a;\n\t}\n\t\n\
    \twhile (b) {\n\t\tb = b % a;\n\t\ta = a;\n\t}\n\t\n\treturn Math.abs(a);\n}\n\
    \ ", "  a = Math.abs(a)\n  b = Math.abs(b)\n  // Return greatest common divisor\
    \ of positive integers\n  if (a > 0 && b > 0) {\n    if (a % b === 0){\n     \
    \ return b\n    } else {\n      return a % b\n    }\n  } else if (a === 0 && b\
    \ === 0){\n    return 0\n  }\n}", "  return Math.abs(a * b) / Math.round((a+b)/Math.abs(a*b));\n\
    }\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n  \n  var rDivisor = 1;\n  var\
    \ iDivisor = 1;\n  \n  while(b > 0){\n    if(b % a == 0){\n      rDivisor = a;\n\
    \      break;\n    } else {\n      a *= b;\n      iDivisor ++;\n    }\n    b--;\n\
    \  }\n  \n  return rDivisor / iDivisor;\n}\n", "  return a%b===0 ? a / b : greatest_common_divisor(b,\
    \ a % b);\n};\n\nmodule.exports = greatest_common_divisor;\n\n},{}],126:[function(require,module,exports){\n\
    'use strict';\n\nvar random_float = require('../random_float');\n", "    if(!a\
    \ || !b)\n        return 0;\n    var c = a % b;\n    a = b;\n    b = c;\n    while\
    \ (true) {\n        if (a%a == 0) {\n            return a;\n        }\n      \
    \  a = a % b;\n    }\n}\n", "    var x = a % b;\n    while (x === 0) x = -b;\n\
    \    return x;\n}\n\nvar GC_Divisors;", "  return a / greatest_common_divisor(b,\
    \ a % b);\n};\n", "\tvar c;\n\tvar p = a;\n\twhile (p != 0){\n\t\tc = (p * b)\
    \ / a;\n\t\tp = a % b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;\n}\n", "  //\
    \ Euclid's algorithm\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  while(a != 0){\n    var remainder = a % b;\n    a = b;\n    b = remainder;\n\
    \  }\n  return b;\n}\n", "  // Find Greatest Common Divisor of a and b\n  var\
    \ g = a/g;\n  var h = b/g;\n  return g == h ? g : gcd(h,g);\n}\nmodule.exports\
    \ = greatest_common_divisor;\n},{}],102:[function(require,module,exports){\nvar\
    \ baseProperty = require('./baseProperty');\nvar basePropertyDeep = require('./basePropertyDeep');\n\
    var isKey = require('./isKey');\nvar toKey = require('./toKey');\n", "    return\
    \ !(b%a) && (a-b) / a | 0;\n}", "  if(a > b) return a;\n  if(a < b) return b;\n\
    \  while(b > 0){\n    var c = a % b;\n    a = b;\n    b = c;\n  }\n  return a;\n\
    }\n", "  return a === 0 ? b : greatest_common_divisor(b, a % b);\n}\n", "\treturn\
    \ b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    return Math.abs(a/greatest_common_divisor(b))\
    \ % b || 1;\n};\n", "  if (b === 0) return a;\n  if (b > a) return b;\n  var m\
    \ = a%b, d = a/gcd(a,b), f = 0, w = gcd_b(b);\n  while (a) {\n    w = gcd(w,a);\n\
    \    a = m % a;\n    f = gcd(f,w);\n    m = f;\n  }\n  return m;\n}\n", "    return\
    \ a/greatest_common_divisor(b,a);\n}", "  return !a ? b : greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if(b === 0) {\n    return a;\n  }\n  var d = greatest_common_divisor(b,\
    \ a % b);\n  return Math.abs(a) > Math.abs(d) ? a : d;\n}", "  return Math.abs(a\
    \ / b) % 1 == 0 ? a / b : Math.ceil(a / b)\n}\n", "  if(a < b){\n    while(b %\
    \ a != 0) a += b;\n  }\n  return a;\n}\n", "  a = Math.abs(a)\n  b = Math.abs(b)\n\
    \  var r = []\n  var g = a%b\n  while(g>0){\n    r[r.length] = g%b\n    g = parseInt(g/b);\n\
    \  }\n  if(a<b) r[r.length] = a%b;\n  return r;\n}\n", "  if (b === 0) return\
    \ a;\n  if (!a || b < 0) return b;\n  var c = a % b;\n  for(var x = a; x > b;\
    \ x = x/b){\n    if (x % b === 0) return x;\n  }\n  return c;\n}\n\n},{}],36:[function(require,module,exports){",
  "\tif(b === 0) {\n\t\treturn a;\n\t}\n\t\n\tif(b % a === 0) {\n\t\treturn b;\n\t\
    }\n\t\n\treturn greatest_common_divisor(b, a % b);\n}\n", "\tif (a === 0){\n\t\
    \treturn b;\n\t} else if (b === 0){\n\t\treturn a;\n\t}\n\tvar c;\n\twhile(b){\n\
    \t\tc = (a%b), a = b;\n\t\tb = c;\n\t}\n\treturn a;\n}", "  return Math.abs(a\
    \ - b) % b === 0 ? b : (a * b) / gcd(a, b);\n}\n", "    // if second argument\
    \ is not present, return a\n    if (b === undefined) {\n        return a;\n  \
    \  }\n\n    if (typeof(b) !== 'number') {\n        b = parseInt(b);\n    }\n\n\
    \    return greatest_common_divisor_number(a, b);\n}\n", "    if(!a || !b) return\
    \ 0;\n    var g = a/g;\n    if(g*g < b) return g;\n    return b;\n}\n", "  return\
    \ !a ? b : greatest_common_divisor_helper(b, a%b);\n};\n", "    a = Math.abs(a);\n\
    \    b = Math.abs(b);\n    var t = a>b? a:b;\n    if(t!==0){\n        var q =\
    \ a/t;\n        a = Math.abs(a-q*b);\n        b = Math.abs(b-q*a);\n    }\n  \
    \  t = a>b? b:a;\n    if(t!==0){\n        var q = a/t;\n        a = Math.abs(a-q*b);\n\
    \        b = Math.abs(b-q*a);\n    }\n    return b>a? b:a;\n}\n\n\n<|/ file source=github\
    \ filename=ec.js dstars=3 |>\n'use strict';\n\nvar curve = require('./curve');\n\
    var elliptic = require('../../elliptic');\nvar BN = require('bn.js');\nvar inherits\
    \ = require('inherits');\nvar Base = curve.base;\n\nvar assert = elliptic.utils.assert;\n",
  "  if(b == 0) return a;\n  if(b == 1) return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\nvar primes = {};", "    if (b && !a) {\n        return b;\n  \
    \  }\n    if (!b && a) {\n        return a;\n    }\n    if (a > b) {\n       \
    \ return a;\n    }\n    return b;\n}", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    while (b != 0){\n        var temp = b;\n        b = a % b;\n        a = temp;\n\
    \    }\n    return a;\n}\n</code>\n<|/ a tags=javascript,function,math dscore=2\
    \ |>\n<| c |>\nThat's a really nice solution! I didn't think about using modulus\
    \ for this.\n<|/ c |>\n<| a |>\nI believe that this is a more mathematical way\
    \ of doing it by taking advantage of the fact that multiplication and division\
    \ are commutative and associative. The solution is then just\n<code>\nvar gcd(a,\
    \ b) { return (a*a + b*b - 1) / (a*a + b*b); }\n</code>\nThis approach is basically\
    \ the Euclid's algorithm. The advantage of this approach is that it works regardless\
    \ of the argument types and it only requires one multiplication and one division.\n\
    <|/ a tags=javascript,function,math dscore=2 |>\n<| c |>\nThis was my first thought\
    \ too but it's not commutative and associative. Try this with gcd(1,2) and gcd(2,1).\n\
    <|/ c |>\n<| c |>\nThanks for pointing out my mistake, it's fixed.\n<|/ c |>\n\
    <| a |>\nYou can make a small modification to the solution from Kevin Rudolph.\n\
    <code>", "  if (b !== 0)\n  {\n    return greatest_common_divisor_fast(a, b);\n\
    \  }\n  else\n  {\n    return greatest_common_divisor_fast(b, a);\n  }\n}\n",
  "    if (b === 0) {\n        return a;\n    }\n    while (b !== 0) {\n        var\
    \ q = Math.floor(a / b);\n        a = b;\n        b = q;\n    }\n    return a;\n\
    }\n", "    if (b===0){\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if(typeof a == 'undefined' || typeof b == 'undefined') return\
    \ NaN;\n  if(a === 0 || b === 0) return Math.abs(a) > Math.abs(b) ? a : b;\n \
    \ if(Math.abs(Math.abs(a) - Math.abs(b)) % 2 != 0) return Math.abs(a) > Math.abs(b)\
    \ ? b : a;\n  var c = Math.abs(a) - Math.abs(b), d = Math.abs(b) - Math.abs(a),\
    \ g = Math.min(c, d)\n  return Math.abs(g) === Math.abs(c) ? (c > 0 ? b : a) :\
    \ (g > 0 ? a : b);\n};\n", "    if(a === 0) return b;\n    if(a === 1) return\
    \ b;\n    if(a === -1 || b === -1 || b === 1) return NaN;\n    if(a < 0){\n  \
    \      if(b < 0){\n            if(b === 0) return -1;\n            if(b === 1)\
    \ return 1;\n            return NaN;\n        }\n        else{\n            a\
    \ = Math.abs(a);\n            b = Math.abs(b);\n        }\n    }\n    b -= a;\n\
    \    while (b){\n        var d = a % b;\n        a = b;\n        b = d;\n    }\n\
    \    return a;\n}\n", "    while (a % b != 0){\n        a = b\n        b -= 1\n\
    \    }\n    return b\n}\n", "  if (b == 0) return a;\n  if (a % b == 0) return\
    \ b;\n  return greatest_common_divisor(b, a % b);\n}\n\nvar is_arguments = $.isArguments(arguments);\n",
  "    if(!b) return a;\n    if(!a) return b;\n    if(b == 0) return a;\n    if(a%b\
    \ == a) return b;\n    if(b%a == b) return a;\n    while(b > a){\n        var\
    \ c = b;\n        b = a%b;\n        a = c;\n    }\n    return b;\n}\n", "    if\
    \ (b === 0) {\n        return a;\n    }\n    if (a === 0) {\n        return b;\n\
    \    }\n    while (1) {\n        var m = a % b;\n        if (m === 0) {\n    \
    \        return b;\n        }\n        a = b;\n        b = m;\n    }\n}\n},{}],12:[function(require,module,exports){\n\
    var base = require('./base.js');\nvar big = require('./big');\n\nvar digits =\
    \ '0123456789abcdef';\nvar digits_length = digits.length;", "  if(b === 0) return\
    \ 0;\n  else if(b%a === 0) return b;\n  else return greatest_common_divisor(b%a,\
    \ a);\n}\n", "  var t;\n  if(b == 0) return a;\n  if(a < b) return a;\n  if(a\
    \ > b) return b;\n  while(1) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\
    \  return a;\n}\n", "    return a % b ? gcd(a, b) : b;\n}", "    return b ===\
    \ 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "  return b === 0 ? a : greatest_common_divisor_helper(a,\
    \ greatest_common_divisor(b, a % b));\n}\n", "  // make sure all inputs are positive\
    \ integers\n  if (a===0 || b===0) \n    return a;\n  else if (b===0) \n    return\
    \ a;\n  else if (a===0)\n    return b;\n\n  var gcd;\n  if(a%b===0) \n    return\
    \ a;\n  else if(b%a===0)\n    return b;\n  else \n    gcd = greatest_common_divisor(b,\
    \ a % b);\n  \n  return gcd;\n}\n", "    if(a < b){\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n    return a;\n}\n\n", "    if (b===0)\n        return a;\n\
    \    if (a===0)\n        return b;\n    var ret = a;\n    while (true) {\n   \
    \     if (b%a===0)\n            return ret;\n        a++;\n        if (a===b)\n\
    \            break;\n        ret = a/b;\n    }\n    return ret;\n}", "    if(b\
    \ === 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n\
    \nvar is_integer = function(x){\n    // parseInt will convert floats to ints,\
    \ whereas Math.floor\n    // will give them an accurate int\n    return Math.round(x)\
    \ === x && x !== x | 0;\n};\n\nvar sort_numerically = function(obj){\n    for(var\
    \ key in obj){\n        if(is_integer(obj[key]))\n            continue;\n    \
    \    var is_date = (obj.constructor === Date);\n        var val = parseFloat(obj[key]);\n\
    \        if(val == 0)\n            continue;\n        var is_numeric = is_integer(val);\n\
    \        var val = parseFloat(obj[key]);\n        if(is_numeric){\n          \
    \  if(is_date)\n                val = val.getTime();\n            else\n     \
    \           val = Math.round(val);\n        }\n        obj[key] = val;\n    }\n\
    \    return obj;\n};\n\nvar extend = function(obj){\n    for(var i = 1; i < arguments.length;\
    \ ++i){\n        var source = arguments[i];\n        for(var k in source){\n \
    \           if(source.hasOwnProperty(k)){\n                obj[k] = source[k];\n\
    \            }\n        }\n    }\n    return obj;\n};\n\nvar getQueryParams =\
    \ function(qs){\n    var params = {};\n    var pairs = (qs || '').split('&');\n\
    \    for(var i = 0; i < pairs.length; ++i){\n        var pair = pairs[i].split('=');\n\
    \        params[pair[0]] = decodeURIComponent(pair[1]);\n    }\n    return params;\n\
    };\n\nvar querystring = function(params){\n    params = extend(extend({}, params),\
    \ getQueryParams(window.location.search));\n    if(params.constructor !== Array)\
    \ params = [params];\n    var qs = '';\n    for(var i = 0; i < params.length;\
    \ ++i){\n        var k = params[i][0];\n        qs += '&' + encodeURIComponent(k)\
    \ + '=' + encodeURIComponent(params[i][1]);\n    }\n    return qs.substr(1);\n\
    };\n\nvar querystring_list = function(params){\n    params = extend(extend({},\
    \ params), getQueryParams(window.location.search));\n    if(params.constructor\
    \ !== Array) params = [params];\n    var qs = '';\n    for(var i = 0; i < params.length;\
    \ ++i){\n        var k = params[i][0];\n        qs += '&' + encodeURIComponent(k)\
    \ + '=' + encodeURIComponent(params[i][1]);\n    }\n    return qs;\n};\n\nvar\
    \ set_location = function(url, new_state){\n    var old_state = window.location.href;\n\
    \    if(new_state.constructor !== Object){\n        var new_state = new_state.split('?');\n\
    \        new_state = new_state[0];\n    }\n    state = extend(extend({}, getQueryParams(window.location.search)),\
    \ new_state);\n    if(state.constructor === Array) state = state[0];\n    params\
    \ = extend(extend({}, getQuery", "  return Math.abs(a * b) >>> 0;\n}\n", "  var\
    \ t;\n  if(b == 0) return a;\n  if(a < b){\n    t = a;\n    a = b;\n    b = t;\n\
    \  }\n  while(b !== 0){\n    if(a % b === 0) return b;\n    b = b >> 1;\n  }\n\
    \  return a;\n};\n\n},{}],38:[function(require,module,exports){\nvar utils = exports;\n\
    var inherits = require('inherits');\n", "  if (b === 0){\n    return a;\n  } else\
    \ {\n    return greatest_common_divisor(b, a % b);\n  }\n}\n", "  a = Math.abs(a)\n\
    \  b = Math.abs(b)\n  \n  if (a == 0) return b\n  if (b == 0) return a\n  \n \
    \ while (b != 0){\n    var temp = a\n    a = b\n    b = temp%b\n  }\n  \n  return\
    \ a\n}\n", "    if(a === 0) return b;\n    if(a > b) return greatest_common_divisor(b,\
    \ a % b);\n    return b;\n}\n", "  if(b === 0) {\n    return a;\n  } else {\n\
    \    return greatest_common_divisor(b, a % b);\n  }\n}\n", "    if(a <= 0) return\
    \ b;\n    if(b <= 0) return a;\n    if(a > b) var temp = a; a = b; b = temp;\n\
    \    while(b !== 0){\n        var r = a % b;\n        a = b;\n        b = r;\n\
    \    }\n    return a;\n}\n", "  if(a === 0)\n    return b;\n  if(b === 0)\n  \
    \  return a;\n  if(b === a)\n    return 1;\n  if(a < b)\n    return greatest_common_divisor(b,a%b);\n\
    \  else \n    return greatest_common_divisor(a,b%a);\n}\n</code>\nNow it works\
    \ with negative numbers too!\n<|/ a tags=primes,java,math dscore=1 |>\n<| a |>\n\
    This is how I came up with the solution in Java\n<code>\nprivate static boolean\
    \ isPrime(int n) {\n    return Arrays.stream(Primes).anyMatch(p->p%n==0);\n}\n\
    private static boolean isPrime2(int n) {\n    return Arrays.stream(Primes).anyMatch(p->p%n!=0);\n\
    }\n\nprivate static boolean isPrime3(int n) {\n    boolean prime = true;\n   \
    \ for(int i = 2; i <= Math.sqrt(n); i++) {\n        if(n % i == 0) {\n       \
    \     prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=primes,java,math dscore=1 |>\n<| c |>\nPlease add an explanation\
    \ of your code to the answer.\n<|/ c |>\n<| a tags=primes,java,math |>\nJust use\
    \ the square root of a! And if x is divisable by a! then x is not prime\n<|/ a\
    \ dscore=0 |>\n<| c |>\nNo, `x` might not be a divisor of `a!`.\n<|/ c |>\n<|\
    \ c |>\nYou need `!` not `~`\n<|/ c |>\n<| a |>\n<code>\nboolean isPrime(int n)\n\
    {\n   for (int i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i == 0) {\n   \
    \      return false;\n      }\n   }\n   return true;\n}\n</code>\n<|/ a dscore=0\
    \ tags=primes,java,math |>\n<| c |>\nAnd how would you go about checking for factors\
    \ besides 2 ?\n<|/ c |>\n<| c |>\nBy making sure that i > 1 and i < n.\n<|/ c\
    \ |>\n<| c |>\nHe is asking about *primes*, not factors.\n<|/ c |>\n<| c |>\n\
    Primes are 2 and 3, not 1 and 5.\n<|/ c |>\n<| c |>\nHe said \"divisors of n\"\
    \ so I assumed that he meant factors. But you are right, of course.\n<|/ c |>\n",
  "  if(a === 0) return b;\n  if(b === 0) return a;\n  if(b === 1) return a;\n  if(a%b\
    \ === 0) return a;\n  if(b%a === 0) return b;\n  return greatest_common_divisor(b,a%b);\n\
    }\n", "    if (b === 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n};", "    return a != b ? Math.floor(Math.greatest(a, b) / b) : a;\n\
    }\n", "    a = a || 1;\n    b = b || 0;\n    if(b === 0)\n        return a;\n\
    \    a = a % b;\n    while(b > 0){\n        b = a % b;\n        a = b;\n    }\n\
    \    return a;\n}\n</code>\nAnd this is what my solutions looks like:\n<code>",
  "    while (b !== 0){\n        var temp = b;\n        b = a % b;\n        a = temp;\n\
    \    }\n    return a;\n}\n\nvar vnodeId = 0;", "    if(a === 0) return b;\n  \
    \  if(b === 0) return a;\n    if(a > b) return greatest_common_divisor(b, a %\
    \ b);\n    return greatest_common_divisor(a, b % a);\n}\n</code>\nThis method\
    \ is recursive and can be implemented using loops.\n<code>", "\treturn b ? gcd(b,\
    \ a % b) : a\n}\n", "  if (a === 0) return b;\n  if (b === 0) return a;\n  if\
    \ (a > b) return a;\n  if (b > a) return b;\n  \n  while (--b){\n    if (a % b\
    \ === 0) return b;\n  }\n  \n  while (++a){\n    if (b % a === 0) return a;\n\
    \  }\n  \n  return a;\n}\n},{}],34:[function(require,module,exports){\nvar MAX_UINT8\
    \ = 32768, MAX_INT16 = 32767, MAX_INT32 = 32768;\nvar MIN_INT8 = -128, MIN_INT16\
    \ = -32768;\nvar MIN_INT32 = Number.MIN_SAFE_INTEGER || -0x80000000;\nvar isArray\
    \ = Array.isArray;", "    if(!isNumber(a) || !isNumber(b)){\n        throw new\
    \ Error('greatest_common_divisor: parameters must be numbers');\n    }\n    if(a\
    \ === 0 && b === 0){\n        return 0;\n    }\n    \n    if(!isInt(a) || !isInt(b)){\n\
    \        throw new Error('greatest_common_divisor: parameters must be integers');\n\
    \    }\n    \n    return Math.floor(a/b);\n}\n", "    return Math.abs(a / b) >=\
    \ 1 ? a : b\n}\n", "    return Math.abs(a) === Math.abs(b) ?\n        Math.max(a,\
    \ b) :\n        Math.abs(a) > Math.abs(b) ? a : b\n}", "  if(b===0)\n    return\
    \ a;\n  if(a === 0)\n    return b;\n  while(true){\n    a = a % b;\n    if(a ===\
    \ 0)\n      return b;\n    b = b > 0 ? b : -b;\n  }\n}\n", "    a = Number(a);\n\
    \    b = Number(b);\n    if (a !== 0){\n        a = a % b;\n        if (a ===\
    \ 0){\n            return b;\n        }\n    }\n    if (a < 0 && b !== 0){\n \
    \       return 1;\n    }\n    return b;\n}\n", "    var g = a%b, b = g;\n    while\
    \ (true) {\n        if (b === 0) return g;\n        g = b%a;\n        b = g;\n\
    \    }\n}\n</code>\n<|/ a tags=c,algorithm dscore=2 |>\n<| a tags=c,algorithm\
    \ |>\n<code>\nint gcd(int a, int b) \n{\n    int tmp = a;\n    while (true)\n\
    \    {\n        if (b == 0) return a;\n        else tmp = a % b;\n    }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe question is about C not C++. Also gcd is not defined\
    \ for negative numbers.\n<|/ c |>\n<| a dscore=1 |>\nThe simplest way to solve\
    \ this is to subtract the smallest value from both of them.\nExample:\n<code>\n\
    gcd(6, 10) = 10\n6 - 10 = 6 \ngcd(3, 2) = 2\n3 - 2 = 1\n</code>\n<|/ a tags=c,algorithm\
    \ |>\n<| c |>\nThis doesn't work if either number is negative.\n<|/ c |>\n<| c\
    \ |>\nOh. How about if (6 < 10){\n    tmp = 6\n} else {\n    tmp = 10 \n}\n<|/\
    \ c |>\n<| a dscore=1 tags=c,algorithm |>\nThis is my implementation\n<code>\n\
    int gcd(int a, int b)\n{\n    int result;\n    if(b < 0){\n        result =  -\
    \ abs(b) gcd(b, a);\n    } else {\n        result = abs(b);\n    }\n    while(result\
    \ != 0){\n        if(a > result){\n           result = a - result;\n        }\
    \ else {\n           result = result - a;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nint gcd_two_no(int a, int b)\n\
    {\n    if(a < b)\n    {\n        int tmp = a;\n        a = b;\n        b = tmp;\n\
    \    }\n    int result = a;\n    while(b > 0)\n    {\n        if(b % 2 == 1)\n\
    \        {\n            result = result - 1;\n        }\n        b = b / 2;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c,algorithm |>\n<| c |>\nThis\
    \ fails when b is negative. b is negative after you set a\n<|/ c |>\n<| c |>\n\
    You do not take this into account when you have `int a = INT_MIN;` and `int b\
    \ = INT_MAX;`\n<|/ c |>\n<| c |>\nYou don't need to set tmp to a, just set b to\
    \ a\n<|/ c |>\n<| c |>\n`", "  return Math.abs(a % b) / Math.abs(b) % a;\n}\n",
  "    return a/gcd(a, b);\n}", "  return Math.abs(a % b + b) % b;\n}\n\nmodule.exports\
    \ = greatest_common_divisor;\n\n},{}],3:[function(require,module,exports){\n'use\
    \ strict'\n\nvar primes = require('./primes.json')\n\nvar crypto = require('crypto')\n",
  "  return gcd(a, b) * greatest_common_divisor(b, a % b);\n}\n", "  a = Math.abs(a);\n\
    \  b = Math.abs(b);\n  return !(b === 0) ? a : Math.abs(a % b + !(b % b)); //\
    \ Thanks Eric!\n}\n", "  if(!a && !b) return a;\n  if(a == b) return a;\n  if(a\
    \ > b) a = b;\n  if(a < b) b = a;\n  for(a; b > 0; b--){\n    if(a % b == 0) return\
    \ b;\n  }\n  return a;\n}\n", "\ta = +a;\n\tb = +b;\n\tif (b == 0) {\n\t\treturn\
    \ a;\n\t} else if (a === 0) {\n\t\treturn b;\n\t} else if (a > b) {\n\t\twhile\
    \ (b !== 0) {\n\t\t\tb = b % a;\n\t\t\ta = a;\n\t\t}\n\t} else {\n\t\twhile (a\
    \ !== 0) {\n\t\t\ta = a % b;\n\t\t\tb = b;\n\t\t}\n\t}\n\treturn Math.abs(a -\
    \ b);\n}\n", "\ta = Math.abs(a);\n\tb = Math.abs(b);\n\treturn b - Math.floor(b\
    \ / a) || 1;\n}\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n  while(b !== 0){\n\
    \    var newb = Math.floor(a / b);\n    a = b;\n    b = newb;\n  }\n  return a;\n\
    }\n", "\tvar c = abs(a);\n\tvar d = abs(b);\n\twhile(c && d){\n\t\tif(a%c == 0\
    \ && b%c == 0){\n\t\t\treturn c;\n\t\t}\n\t\tc = c/10;\n\t\td = d/10;\n\t}\n\t\
    return 1;\n}\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n  var d = a>b? a : b;\n\
    \  return d%b==0? d : a%b==0? a : a%b;\n}\n", "  return a < b ? greatest_common_divisor(b,\
    \ a % b) : a;\n}\n", "\tif(b == 0) return a;\n\telse if(b%a == 0) return b;\n\t\
    else return greatest_common_divisor(a%b, b);\n}\n", "\treturn b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n\nvar _ = require(\"underscore\");\n", "    if(!a) return b;\n \
    \   if(!b) return a;\n    if(a > b) return greatest_common_divisor(b, a % b);\n\
    \    return a;\n}", "  return b ? gcd(b, a % b) : a ? gcd(a, Math.abs(a)) : 1;\n\
    }\n", "\tif(b == 0) {\n\t\treturn a;\n\t}\n\telse {\n\t\tif(b == a)\n\t\t\treturn\
    \ a;\n\t\telse {\n\t\t\t//Euclid's algorithm\n\t\t\tvar x = a;\n\t\t\tvar y =\
    \ b;\n\t\t\twhile(y != 0){\n\t\t\t\tvar t = y;\n\t\t\t\ty = x % y;\n\t\t\t\tx\
    \ = t;\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\t}\n}\n", "  if(b === 0)\n    return\
    \ a;\n  else\n    return greatest_common_divisor(b, a % b);\n}\n", "  return a\
    \ === 0 && b === 0 ? a : gcd(b, a % b);\n}\n\n},{}],51:[function(require,module,exports){\n\
    'use strict';\n\nvar alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n",
  "  // return a if a == 0\n  if(a<1){\n    return a;\n  }\n\n  // b if b == 0\n \
    \ if(b<1){\n    return b;\n  }\n\n  for(var i = 1;i<b;i++){\n    if(b % i == 0){\n\
    \      return i;\n    }\n  }\n\n  return b;\n}\n\n", "  return a === b ? a : greatest_common_divisor_cached(a,\
    \ b);\n}\n", "    return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n",
  "    if(!isInteger(a) || !isInteger(b)) {\n        return null;\n    }\n\n    //\
    \ Euclidian algorithm\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \    // The gcd is not used because of its slow performance\n    // see http://en.wikipedia.org/wiki/Euclidean_algorithm#Failure_analysis\n\
    \    var r = null, t = null, old_r = null, old_t = null, old_m = null, m = Math.max(a,b),\
    \ temp = a;\n    while (true) {\n        old_r = r;\n        old_t = t;\n    \
    \    m = old_m*old_m + b;\n        if (m === 0) {\n            break;\n      \
    \  }\n        temp /= old_m;\n        t = old_t;\n        r = old_r;\n       \
    \ if (temp >= m) {\n            break;\n        }\n        old_m = m;\n    }\n\
    \    if (old_t == 0) {\n        return old_r;\n    }\n    if (old_t === 1) {\n\
    \        return old_m;\n    }\n    while (true) {\n        if (old_t * (b / old_t)\
    \ < 0) {\n            return old_r;\n        }\n        old_t /= old_t;\n    \
    \    old_r = r;\n        r = old_r + t * old_t;\n    }\n}\n", "    return Math.max(a,\
    \ ~~(b/a));\n}\n", "  if(a<0){a=-a;} // Make sure b is positive\n  if(b<0){b=-b;}\
    \ // Make sure a is positive\n  if(b==0){return a;}\n  if(a==0){return b;}\n \
    \ if(a==b){return 1}\n  var c;\n  var d=a%b; // If b is a factor of a\n  if(b%a==0){\n\
    \    // If d is also a factor of a\n    c=d%a;\n    // a must be divisible by\
    \ b\n    return c==0?1:c;\n  }\n  d=(b-d)%a;\n  return d==0?a:d;\n}\n", "\treturn\
    \ b - a > 0 ? greatest_common_divisor(b, a%b) : a;\n}\n", "\tif(!a) return b;\n\
    \tif(!b) return a;\n\treturn Math.floor(Math.acos(Math.max(-1, Math.min(1, (a\
    \ / b) * (b / a))) / Math.PI * 0.5) * 2);\n}\n\n", "  return (b === 0) ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n},{}],40:[function(_dereq_,module,exports){\nmodule.exports = intersect;\n",
  "    while (a != b) {\n        if (a > b) a-=1;\n        if (a < b) b-=1;\n    }\n\
    \    return a;\n}\n</code>\n<|/ a tags=python,algorithm,math dscore=0 |>\n<| c\
    \ |>\nThis only works for positive numbers; `greatest_common_divisor(100, -1)`\
    \ returns `1` instead of `-1`.\n<|/ c |>\n<| c |>\nI believe that would depend\
    \ on how the remainder is handled. For example if I have `5 - 1` then I can take\
    \ the remainder `5` and `subtract` it to get `4`. If I then subtract `4` from\
    \ `1` then I should get `0`.\n<|/ c |>\n<| c |>\nIf you do `5 - 1 - 4`, then `(5\
    \ - 1) - (4)` is `4 - 1`, which is `4`. I think you should be able to see that\
    \ `(5 - 1) - (4) = (5 - 1) - 4 = (5 - 1) - (5) = 5`.\n<|/ c |>\n<| c |>\nYes,\
    \ that is what I meant. My point was that that code returns wrong results for\
    \ negative numbers. For example, it returns `3` instead of `-1`.\n<|/ c |>\n<|\
    \ c |>\nAh yes, I see what you're saying. I've updated the answer to handle the\
    \ negative numbers.\n<|/ c |>\n<| a tags=python,algorithm,math dscore=0 |>\nFor\
    \ non-negative integers a and b, you can find the greatest common divisor d by\
    \ dividing a by b. Then, divide b by d to find the gcd of c and d, then subtract\
    \ c from d. The final gcd is c, and the rest of it is d which you can then divide\
    \ by c. \n<code>\ndef greatest_common_divisor(a, b):\n    gcd = b\n    while gcd\
    \ > 1:\n        gcd //= a\n    return gcd if gcd else 1\n\ndef gcd(a, b):\n  \
    \  return b if a == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b /\
    \ gcd(a, b)\n\ndef gcd(a, b):\n    return b if a == 0 else gcd(b, a % b)\n\ndef\
    \ lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcdOfCandD(a, b):\n    return\
    \ gcd(gcd(b, a), a)\n\ndef gcdOfCandD(a, b):\n    return gcd(gcd(b, a), a)\n\n\
    def gcd_lcm(a, b):\n    return lcm(lcm(a, b), a) if a else lcm(a, b)\n\ndef gcd_lcm(a,\
    \ b):\n    return lcm(lcm(a, b), a", "  return !b ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "\tif (b === 0) {\n\t\treturn a;\n\t}\n\tif (a === 0) {\n\t\t\
    return b;\n\t}\n\n\twhile (b !== 0) {\n\t\ta = a % b;\n\t\tb = b;\n\t}\n\n\treturn\
    \ a;\n}\n", "    if(!a) return b;\n    if(!b) return a;\n    if(a === 0) return\
    \ b;\n    if(b === 0) return a;\n    if(b === 1) return a;\n    if(a === 1) return\
    \ b;\n    if(b === 1) return b;\n    if(a === 0) return 1;\n    if(a === -1) return\
    \ -1;\n    if(b === -1) return 1;\n    var i = Math.max(Math.abs(a), Math.abs(b));\n\
    \    return (i === 0) ? (Math.abs(a % b) === 0) : ((Math.abs(a % b) === 1) ? i\
    \ : 1);\n}\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n  if(b > a) return b;\n\
    \  return a;\n}\n", "  // use SI or NI form for b\n  // SI form means divide by\
    \ 100\n  // NI form means subtract 100\n  // So SI form == NI form\n  if(b ==\
    \ 0){\n    return a;\n  }\n  if(a == 0){\n    return b;\n  }\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n", "\tif(b==0)\n\t\treturn a;\n\tif(a==0)\n\t\treturn b;\n\treturn\
    \ greatest_common_divisor(b, a % b);\n}\n", "  return b == 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "    a = Math.abs(a)\n    b = Math.abs(b)\n    if (a % b ===\
    \ 0 && b != 0) return b\n    if (b%a === 0){\n        a = a / b\n        if (a\
    \ === Math.floor(a))\n            return a\n        if (a === Math.ceil(a))\n\
    \            return b\n        var c = a + b\n        if (c === Math.ceil(c) &&\
    \ c != 0)\n            return c\n        else\n            return a\n    }\n \
    \   return a // a is neither in an odd or even division\n}", "    while (b) {\n\
    \        var newb = Math.floor(b / 2);\n        a = b;\n        b = newb;\n  \
    \  }\n    return a;\n}\n", "    var f = a%b;\n    for (var i = 1; i <= (b - f)/a;\
    \ i++){\n        if (a%i==0) return i;\n    }\n    return b;\n}\n", "    a = Math.abs(a);\n\
    \    b = Math.abs(b);\n    while (b != 0){\n        a/= b;\n        b = a % b;\n\
    \    }\n    return Math.abs(a);\n}\n", "    if(a === 0) return b;\n    if(a <\
    \ b) \n        return greatest_common_divisor(b, a % b);\n    return a;\n}\nvar\
    \ greatest_common_divisor_1 = greatest_common_divisor;\n", "    return b == 0\
    \ ? a : greatest_common_divisor(b, a % b);\n}\n", "    if (a < b){\n        while\
    \ (b < a) {\n            a -= b;\n        }\n        while (b > 0) {\n       \
    \     b--;\n        }\n    }\n    return a;\n}\n\nvar current_year = current_year\
    \ || {\n  year: new Date().getFullYear()\n};\n", "    return !b ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "\tif (Math.abs(b) > Math.abs(a))\n\t\treturn greatest_common_divisor(b,\
    \ a % b);\n\treturn Math.abs(a) > Math.abs(b) ? Math.abs(a) : Math.abs(b);\n}\n\
    \t", "    return a%b===0 ? a : gcd(b, a%b);\n}\n", "    return Math.abs(a) ===\
    \ Math.abs(b) && a > 0 ? a%b : Math.abs(a) > Math.abs(b) ? b%a : a%b;\n}", " \
    \   return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "  if(a < b)\n\
    \    return greatest_common_divisor(b, a);\n  if(b % a === 0){\n    var r = a\
    \ % b;\n    while(r !== 0){\n      r = b % a;\n      a = b;\n      b = r;\n  \
    \  }\n    return b;\n  }\n  if(b <= a % b)\n    return a;\n  while(b >= b){\n\
    \    var r = a % b;\n    a = b;\n    b = r;\n  }\n  return b;\n}\n", "  a = Math.abs(a);\n\
    \  b = Math.abs(b);\n  if(b == 0)\n    return a;\n  while(b != 0){\n    var tmp\
    \ = a%b;\n    a = b;\n    b = tmp;\n  }\n  return a;\n}\n", "    return b ===\
    \ 0 ? a : Math.abs(a % b)\n}\n\n", "  if(b == 0)\n    return a;\n  if(b == 1)\n\
    \    return a;\n  if(a%b == 0)\n    return greatest_common_divisor(b, a % b);\n\
    \  return greatest_common_divisor(b, a % b + b%a);\n}\n", "  return Math.abs(b\
    \ - a % Math.floor(b / a));\n}\n", "    if(!b || b == 0){\n        return a;\n\
    \    }\n    return greatest_common_divisor(b, a % b);\n}\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;", "  if(typeof a === \"number\" && typeof b === \"\
    number\"){\n    return gcd(a, b);\n  }\n\n  if(typeof a === \"string\" && typeof\
    \ b === \"string\"){\n    return greatest_common_divisor_of_string_length(a, b);\n\
    \  }\n\n  if(a.constructor === Array && b.constructor === Array){\n    return\
    \ greatest_common_divisor_of_array(JSON.parse(JSON.stringify(a)), JSON.parse(JSON.stringify(b)));\n\
    \  }\n\n  throw new Error(\"Can not find the greatest common divisor\");\n}\n",
  "\treturn (Math.abs(a) > Math.abs(b)) ? (Math.abs(a) > a ? a : b) : Math.abs(b)\
    \ > a ? b : a;\n}\n", "  return Math.abs(a - b) / (a * b)\n}\n\n", "  return Math.abs(a\
    \ * b / greatest_common_divisor_abs(a, b));\n}\n", "  return (b !== 0) ? a : gcd(b,\
    \ a % b);\n}\n", "    if(Math.abs(a-b) > 1) return greatest_common_divisor(b,\
    \ a % b);\n    else return a / b;\n}\n", "\treturn b == 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "    var t = 0; //the result of the division\n    for(var i =\
    \ 1; i <= a; i++){\n        if(a % i == 0){\n            b = b % i;\n        \
    \    if(a == b){\n                return i;\n            }\n            else{\n\
    \                return i;\n            }\n        }\n    }\n    return t;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThe above code didn't work for me because I kept getting\
    \ zero as a result of the division, and this seemed to be the best solution I\
    \ found for a similar problem.\n<|/ c |>\n<| c |>\nThis code works well but with\
    \ some minor changes. Instead of checking for `a % i == 0`, you need to check\
    \ for `i % a == 0` because when `a` is zero, `a%i == 0` is equal to zero. This\
    \ will ensure that `i` is even.\n<|/ c |>\n<| c |>\nThis code works great. But\
    \ i want to make it more efficient as it is getting O(NlogN) complexity. Can anyone\
    \ suggest me some better algorithm for this problem?\n<|/ c |>\n<| c |>\nyou can\
    \ find faster algorithms on http://en.wikipedia.org/wiki/Binary_GCD_algorithm\n\
    <|/ c |>\n<| a dscore=5 |>\nAnother solution is using modulo, that is a great\
    \ solution when you need to use modular arithmetic very frequently, for example,\
    \ to calculate factorial (for large numbers factorial = 2^(n*(n-1))... (n!)\n\
    <code>\nlet result = 1;\nwhile(n > 1) {\n    result = result % n;\n    n /= 2;\n\
    }\n</code>\n<|/ a tags=math,algorithm,java |>\n<| c |>\nThis is the best answer\
    \ IMO. Simple and concise. No recursion or ternary operators.\n<|/ c |>\n<| a\
    \ tags=math,algorithm,java dscore=5 |>\nIf you use recursion, you can calculate\
    \ the gcd very fast, like in this answer:\n<code>", "    if(!b) return a;\n  \
    \  if(!a) return b;\n    return greatest_common_divisor(b%a, a);\n}", "  if(b\
    \ == 0){\n    return a;\n  }\n  if(b > a){\n    return b;\n  }\n  var r = [];\n\
    \  var rem;\n  var q = 0;\n  while(a != 0){\n    rem = a % b;\n    r.push(rem);\n\
    \    a = b;\n    b = rem;\n  }\n  while(b != 0){\n    rem = b % a;\n    r.push(rem);\n\
    \    b = a;\n    a = rem;\n  }\n  if(b == 0){\n    return a;\n  }\n  if(r.length\
    \ < r[r.length-1])\n    r.push(b);\n  return r.length;\n}\n", "    if(a === 0)\n\
    \        return b;\n    if(b === 0)\n        return a;\n    var r, reminder;\n\
    \    r = a % b;\n    reminder = a - (r * b) / a;\n    return r + greatest_common_divisor(reminder,\
    \ b);\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,math,javascript |>\n<code>",
  "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;\n", "  if(b === 0) return a;\n  if(a === 0) return\
    \ b;\n  if(b === a) return b;\n  var c = a % b;\n  if(c < 60){\n    return c;\n\
    \  }\n  var d = Math.round(b/a);\n  if(d === 1) return a;\n  return greatest_common_divisor(b,\
    \ d);\n}\n", "\treturn b == 0 ? a : greatest_common_divisor(b, a % b);\n}", " \
    \ return !a || !b ? 0 : a === b ? a : Math.abs( ( a % b ) + 1 ) \n}\n\n<|/ file\
    \ ext=.js dstars=1 source=github |>", "    while (a != 0){\n        var t = b;\n\
    \        b = a % t;\n        a = t;\n    }\n    return a;\n}\n<|/ file ext=.js\
    \ filename=math.js |>", "    if(a === 0 || b === 0){\n        return 0;\n    }\n\
    \    if(a < b){\n        var tmp = a;\n        a = b;\n        b = tmp;\n    }\n\
    \    while (b !== 0){\n        var rem = a % b;\n        a = b;\n        b = rem;\n\
    \    }\n    return a;\n}\n", "  var t= 0; while(t <= a){\n    if( b%t==0 ) return\
    \ t;\n    t++\n  }\n  return b;\n}\n", "  return !a ? b : greatest_common_divisor_helper(a,\
    \ b);\n}\n", "  return a === b ? a : Math.abs(a) > Math.abs(b) ? a : b;\n}\n\n\
    exports.greatest_common_divisor = greatest_common_divisor;\n},{}],36:[function(require,module,exports){\n\
    'use strict';\n\nvar createHash = require('create-hash/browser');\n", "    //\
    \ Cache for b/a to avoid expensive division\n    if(!greatest_common_divisor.result){\n\
    \        greatest_common_divisor.result = [a, b];\n    }\n    if(greatest_common_divisor.result[1]\
    \ > a){\n        greatest_common_divisor.result[1] = a;\n    }\n    if(greatest_common_divisor.result[0]\
    \ > b){\n        greatest_common_divisor.result[0] = b;\n    }\n    return greatest_common_divisor.result[0]\
    \ / greatest_common_divisor.result[1];\n}\n</code>\n<|/ a tags=javascript |>\n\
    <| c |>\nThis is great and I learned something new about javascript :)\n<|/ c\
    \ |>\n<| a dscore=3 |>\nAs a matter of fact, there's a great JavaScript library\
    \ which solves this problem: Math.imul and Math.imulh. \nAs you may know, multiplying\
    \ a number by itself always gives you the same result. \nMath.imul does just that,\
    \ with even higher performance.\nMath.hi also does the same, but with even more\
    \ performance. \nFor a detailed explanation, you may read this excellent article:\
    \ http://jsperf.com/math-imul-vs-math-imulh/3\n<|/ a tags=javascript |>\n<| a\
    \ dscore=3 |>\n<code>\nvar greatestCommonDivisor = function(x, y) {\n    var lcm\
    \ = x * y;\n    return y / lcm;\n};\n</code>\n<|/ a tags=javascript |>\n<| c |>\n\
    Not sure why it was downvoted. `greatestCommonDivisor` is short and clear.\n<|/\
    \ c |>\n<| c |>\nYour `return y/greatestCommonDivisor(x, y)` should read  `return\
    \ lcm/greatestCommonDivisor(x, y)` because `greatestCommonDivisor(x, y)` should\
    \ be the greatest common divisor of `x` and `y`. Otherwise your code is wrong.\n\
    <|/ c |>\n<| a dscore=2 tags=javascript |>\nHere is one that works for positive\
    \ integers:\n<code>", "    if(a === 0){\n        return b;\n    } else if(a >\
    \ b){\n        return greatest_common_divisor(a % b, a);\n    } else {\n     \
    \   return greatest_common_divisor(a, b % a);\n    }\n}\n", "    return b ===\
    \ 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "  return Math.abs(a * b)\
    \ / Math.round((a|0)*(b|0)/gcd(Math.abs(a), Math.abs(b)));\n}\n", "    return\
    \ Math.abs(a / b) % 1 == 0 ? a / b : Math.ceil(a / b);\n}\n", "\treturn Math.abs(Math.round(a/greatest_common_divisor_divisor(b))-1);\n\
    }\n", "  return a === 0 || b === 0 ? a : greatest_common_divisor_helper(a, b);\n\
    }\n", "  var m = Math.max(a, b);\n  return Math.floor(a/m % m)*m;\n}\n\n\nvar\
    \ index = {\n  abs:abs,\n  sqrt:sqrt,\n  mod:mod,\n  pow:pow,\n  minus_mod:minus_mod,\n\
    \  min_value:min_value,\n  max_value:max_value,\n  min: min,\n  max: max,\n  sum:\
    \ sum,\n  mean: mean,\n  median: median,\n  variance: variance,\n  stdev: stdev,\n\
    \  stdevp: stdevp,\n  smin: smin,\n  smax: smax,\n  product: product,\n  variancep:\
    \ variancep,\n  medianp: medianp,\n  modep: modep,\n  smedianp: smedianp,\n  smodep:\
    \ smodep,\n  modes: modes,\n  smodes: smodes,\n  sump: sump,\n  log: log,\n  logp:\
    \ logp,\n  log2p: log2p,\n  log1p: log1p,\n  sqrtp: sqrtp,\n  powp: powp,\n  square:\
    \ square,\n  cube: cube,\n  difference: difference,\n  differencep: differencep,\n\
    \  sum: sum,\n  cumsum: cumsum,\n  mean: mean,\n  average: average,\n  count:\
    \ count,\n  min: min,\n  max: max,\n  product: product,\n  sump: sump,\n  minp:\
    \ minp,\n  maxp: maxp,\n  meanp: meanp,\n  median: median,\n  mode: mode,\n  modes:\
    \ modes,\n  modep: modep,\n  smode: smode,\n  smodes: smodes,\n  smodep: smodep,\n\
    \  smean: smean,\n  smedian: smedian,\n  variance: variance,\n  variancep: variancep,\n\
    \  medianp: medianp,\n  std: std,\n  stdev: stdev,\n  stdevp: stdevp,\n  sums:\
    \ sums,\n  means: means,\n  meanp: meanp,\n  sum: sum,\n  sums: sums,\n  min:\
    \ min,\n  mins: mins,\n  max: max,\n  maxs: maxs,\n  range: range,\n  ranges:\
    \ ranges,\n  quantile: quantile,\n  quantiles: quantiles,\n  quantilep: quantilep,",
  "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n},{}],11:[function(_dereq_,module,exports){\n\
    \"use strict\";\n\nexports.array = {};\n\nexports.array.compare = function (a,\
    \ b) {\n\n  // If the arrays are different lengths, a higher index will indicate\
    \ more differences.\n  if(a.length !== b.length){\n    return a.length > b.length\
    \ ? -1 : 1;\n  }\n\n  // Otherwise the indexes of the elements in the arrays indicate\
    \ which elements may be missing from the longer array.\n  else{\n    var a_count\
    \ = 0;\n    var b_count = 0;\n\n    for(var i = 0; i < a.length; i++){\n     \
    \ if(a[i] !== b[i]){\n        return a[i] > b[i] ? -1 : 1;\n      }\n      a_count++;\n\
    \    }\n\n    for(var i = 0; i < b.length; i++){\n      if(a[a_count] !== b[i]){\n\
    \        return a[a_count] > b[i] ? -1 : 1;\n      }\n      b_count++;\n    }\n\
    \n    return a_count > b_count ? -1 : 1;\n  }\n\n};\n", "  while(a % b){\n   \
    \ a = b;\n    b = a % b;\n  }\n  return b;\n}\n", "    if (b===0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "    return a % b;\n\
    }\n<|/ file dstars=0 ext=.js |>", "\treturn !b ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n\t\n\t// Returns a random integer between min and max (both inclusive)\n\
    \t// Using Math.round() will give you a non-uniform distribution!\n\t// - ex:\
    \ var rnd = Math.random()\n\t// - ex: rnd < 0.5 returns true\n\trandom_between:\
    \ function(min, max){\n\t\tvar diff = max - min,\n\t\t\trnd = min + Math.floor(Math.random()\
    \ * diff);\n\t\t\n\t\treturn rnd;\n\t},\n\t\n\t// Returns a random integer between\
    \ min and max (both inclusive)\n\t// Using Math.ceil() will give you a uniform\
    \ distribution!\n\t// - ex: var rnd = Math.random()\n\t// - ex: rnd < 0.5 returns\
    \ false\n\trandom_between_int: function(min, max){\n\t\tvar diff = max - min,\n\
    \t\t\trnd = min + Math.floor(Math.random() * diff);\n\t\t\n\t\treturn rnd;\n\t\
    },\n\t\n\t// Returns a random float between min and max (both inclusive)\n\t//\
    \ - ex: var rnd1 = Math.random()\n\t// - ex: rnd1 < 0.5 returns true\n\trandom_between_real:\
    \ function(min, max){\n\t\tvar diff = max - min,\n\t\t\trnd = min + Math.random()\
    \ * (diff);\n\t\t\n\t\treturn rnd;\n\t},\n\t\n\t// Returns a random boolean value\n\
    \t// - ex: var rnd2 = Math.random() < 0.5\n\t// - ex: rnd2 returns true\n\trandom_bool:\
    \ function(){\n\t\treturn Math.random() < 0.5;\n\t},\n\t\n\t// Returns a random\
    \ integer from 0 to max (both inclusive)\n\t// - ex: var rnd3 = Math.random()\n\
    \t// - ex: rnd3 < 0.5 returns true\n\trandom_int: function(max){\n\t\treturn Math.floor(Math.random()\
    \ * max);\n\t},\n\t\n\t// Returns a random real value between min and max (both\
    \ inclusive)\n\t// - ex: var rnd4 = Math.random()\n\t// - ex: rnd4 < 0.5 returns\
    \ false\n\trandom_real: function(min, max){\n\t\tvar diff = max - min,\n\t\t\t\
    rnd = min + Math.random() * (diff);\n\t\t\n\t\treturn rnd;\n\t},\n\t\n\t// Returns\
    \ a random string with length n that contains only ascii alphanumeric\n\t// characters\
    \ from a..z and A..Z\n\t// - ex: var rnd5 = random_string(\"abcd\", 6)\n\t// -\
    \ ex: rnd5 == \"abbC\"\n\t// - ex: rnd5 == \"abCB\"\n\trandom_string: function(n,\
    \ alphabet){\n\t\tif(!alphabet){\n\t\t\talphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJK",
  "    a = Math.abs(a);\n    b = Math.abs(b);\n    if (a < b){\n        return a;\n\
    \    }\n    return b;\n}\n\n", "  if(a === 0)\n    return b;\n  if(b === 0)\n\
    \    return a;\n  if(b === a)\n    return 0;\n  if(b % a === 0)\n    return b;\n\
    \  var q = Math.floor(b/a);\n  return a + greatest_common_divisor(b-a*q, a);\n\
    }\n", "  return a === b? a : greatest_common_divisor(b, a % b);\n}\n\nvar index$41\
    \ = {\n  name: \"math\",\n  version: \"6.2.2\",\n  description: \"JavaScript mathematical\
    \ functions\",\n  homepage: \"http://www.mathjax.org\",\n  tags: [\"numbers\"\
    , \"bignumber\", \"string\", \"format\"],\n  author: \"Wolfram Research, Inc.\"\
    ,\n  contributors: [\n    {\n      name: \"WolframScript\",\n      url: \"http://research.sun.com/projects/mathematica/download/sdk.html\"\
    \n    },\n    {\n      name: \"Mike Hamburge\",\n      url: \"http://mikehillyer.name/mathematica/download.html\"\
    \n    },\n    {\n      name: \"Tom De Angelis\",\n      url: \"http://math-deangelis.de/de/download.html\"\
    \n    },\n    {\n      name: \"Dominic Barth\",\n      url: \"http://www.mathjax.org\"\
    \n    }\n  ],\n  license: \"MIT\",\n  bugs: [\"url\"],\n  dependencies: {\n  \
    \  natural: [\"2\"],\n    matrix: [],\n    provisional: [],\n    linalg: [],\n\
    \    complex: []\n  }\n};\n\nvar index$42 = {\n  name: \"math.cbrt\",\n  category:\
    \ \"Number\",\n  syntax: ['cbrt(x)'],\n  description: 'Compute the cubic root\
    \ value. If x = y * y * y, then y is the cubic root of x. When the cubic root\
    \ of x is expected to be equal to y, then y can be returned without any loss of\
    \ precision. **Implementation note**: cbrt() is only needed to compute cbrt(x)\
    \ and not to compute cbrt(x + y) whereas cbrt() could do either. cbrt() implementations\
    \ should ensure they return the correctly rounded result up to 15 significant\
    \ digits.',\n  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)'],\n  seealso: ['square',\
    \ 'sqrt', 'cube', 'multiply']\n};\n\nvar index$43 = {\n  name: 'math.cube',\n\
    \  category: 'Number',\n  syntax: ['cube(x)'],\n  description: 'Compute the cube\
    \ of a value. The cube of x is x * x * x.',\n  examples: ['cube(2)', '2^3', '2\
    \ * 2 * 2'],\n  seealso: ['multiply', 'square', 'pow']\n};\n\nvar index$44 = {\n\
    \  name: 'math.invariant',\n  category: 'Relational',\n  syntax: ['in", "    return\
    \ a/greatest_common_divisor(b);\n}\n", "  return Math.abs(a/greatest_common_divisor(b,b))\
    \ | 0;\n}", "  a = Math.abs(a)\n  b = Math.abs(b)\n  if(a < b)\n    return a\n\
    \  else if(b == 0)\n    return a\n  else\n    return b\n}\n", "    // return a\
    \ - greatest_common_divisor(b, a % b) + b;\n    return b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if(a % b == 0){\n    return b;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n", "  if(a === 0)\n    return b;\n  if(b === 0)\n    return\
    \ a;\n  if(b === a || b === 0)\n    return b;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n  var r = 1;\n  if(a\
    \ < b)\n    while(a && b)\n      r = a % b, a = Math.floor(a/b), b = r;\n  return\
    \ r;\n}\n\n", "  if(b == 0) return a;\n  if(a == 0) return b;\n  if(a > b) return\
    \ greatest_common_divisor(b, a % b);\n  return greatest_common_divisor(a, a %\
    \ b);\n}\n", "  return a / greatest_common_divisor_helper(b, a % b);\n}\n", " \
    \ if(a % b === 0) return b;\n  return greatest_common_divisor(b, a % b);\n};\n\
    \n", "    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    return\
    \ b == 0 ? a : Math.abs(a % b);\n}\n</script>\n    </head>\n    <body>\n     \
    \   <div class=\"test\">\n            <div id=\"div1\">\n                <span\
    \ id=\"span1\"> 1 </span>\n            </div>\n            <div id=\"div2\">\n\
    \                <span id=\"span2\"> 2 </span>\n            </div>\n        </div>\n\
    \        <script>\n            assert(document.getElementById(\"span1\").innerHTML\
    \ != \"\");\n            assert(document.getElementById(\"span2\").innerHTML !=\
    \ \"\");\n            assert(greatest_common_divisor(1, 1) == 1);\n          \
    \  assert(greatest_common_divisor(2, 2) == 2);\n            assert(greatest_common_divisor(3,\
    \ 3) == 1);\n            assert(greatest_common_divisor(5, 5) == 1);\n       \
    \     assert(greatest_common_divisor(8, 8) == 2);\n            assert(greatest_common_divisor(9,\
    \ 9) == 1);\n            assert(greatest_common_divisor(10, 10) == 1);\n     \
    \       assert(greatest_common_divisor(11, 11) == 1);\n            assert(greatest_common_divisor(12,\
    \ 12) == 1);\n            assert(greatest_common_divisor(25, 15) == 5);\n    \
    \        assert(greatest_common_divisor(26, 15) == 5);\n            assert(greatest_common_divisor(30,\
    \ 15) == 5);\n            assert(greatest_common_divisor(30, 30) == 5);\n    \
    \        assert(greatest_common_divisor(30, 50) == 10);\n            assert(greatest_common_divisor(50,\
    \ 50) == 10);\n        </script>\n    </body>\n</html>\n</code>\n<|/ a |>\n<|\
    \ c |>\nThe thing is I don't want to use JavaScript, I'm currently using Selenium\
    \ to run tests on my site. I want to be able to check what the current value of\
    \ the span is. I'll probably try implementing the JavaScript solution when I get\
    \ home and see if it works.\n<|/ c |>\n<| c |>\nI added an HTML example to my\
    \ answer. Your question was not clear about the fact that you are not using JavaScript\
    \ :)\n<|/ c |>\n<| c |>\nYeah that example is exactly what I was looking for.\
    \ Didn't know you can execute JavaScript with Selenium until today. Thanks for\
    \ the help!\n<|/ c |>\n<| a dscore=1 |>\nThis is not possible with Selenium alone.\
    \ You need to use some kind of tool that can run the JavaScript as part of the\
    \ test. That tool, probably the Selenium IDE, can do that. You may have to install\
    \ that as well. Some instructions here: http://seleniumhq.github.io/selenium-ide/docs/02_Getting_Started.html#getting-started\n\
    <|/ a tags=html,selenium,selenium-webdriver |>\n<| c |>\nThanks, ", "    if(a\
    \ < b) a = b;\n    if(a % b === 0) return b;\n    if(a < 1) return a;\n    while(b\
    \ > 0){\n        var c = a % b;\n        a = b;\n        b = c;\n    }\n    return\
    \ a;\n}\n\nvar numeral = require(\"../../numeral\");\nnumeral.language('it-it',\
    \ require('../../../locale/languages/it-it'));\n\nexports['language:it-it'] =\
    \ {\n    tearDown: function(){\n        numeral.language('en');\n    }\n};\n},{\"\
    ../../../locale/languages/it-it\":377,\"../../numeral\":202}],178:[function(require,module,exports){\n\
    'use strict';\n\nvar assert = require('assert');\n", "  return Math.abs(a - b)\
    \ / Math.max(a, a);\n}\n", "  return b ? gcd(a, b) : a\n}\n", "    return !b?a:greatest_common_divisor(b,\
    \ a % b);\n}\nvar hmacsha256 = (function(s){\n    var hash = \"\";\n    for (var\
    \ i = 0, n = s.length; i < n; i++) {\n        var b = s.charCodeAt(i);\n     \
    \   hash += (b & 0xff).toString(16).slice(-2);\n    }\n    return sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(hash));\n\
    });\n\nvar vfs = require(\"virtual-fs\");\nvar path = require(\"path\");\nvar\
    \ http = require(\"http\");\nvar events = require(\"events\");\nvar url = require(\"\
    url\");\n\nvar SJCL = require(\"sjcl\");\n\nvar mime = require(\"mime\");\nvar\
    \ crypto = require(\"crypto\");\n\nvar util = require(\"util\");\nvar btoa = require(\"\
    btoa\");\nvar from64 = require(\"from64\");\nvar to64 = require(\"to64\");\n\n\
    var debug = require(\"debug\")(\"static-http\");\n\nexports.serve = function(opts){\n\
    \    opts = opts || {};\n    var mime_types = opts.mime_types || {};\n    var\
    \ serve_options = opts.serve_options || {};\n    var static_root = opts.static_root\
    \ || \"static\";\n    var http_server = http.createServer(http_handler);\n\n \
    \   http_server.on(\"error\", function(e){\n        console.error(\"Error listening\
    \ for incoming requests: \" + e);\n    });\n\n    http_server.on(\"listening\"\
    , function(e){\n        debug(\"Static http server listening on %s:%s\",opts.host,\
    \ opts.port);\n    });\n\n    http_server.on(\"request\", function(req,res){\n\
    \        handleRequest(req, res);\n    });\n\n    function http_handler(req, res){\n\
    \        var uri = url.parse(req.url);\n        var base = path.join(static_root,\
    \ uri.pathname);\n        debug(\"Request: \\n  %s %s\\n\", req.method, uri.href);\n\
    \        if (uri.pathname === \"/static\") {\n            serveStatic(req, res);\n\
    \            return;\n        }\n        else if (uri.pathname === \"/js\") {\n\
    \            serveJs(req, res, base);\n            return;\n        }\n      \
    \  else if (uri.pathname === \"/css\") {\n            serveCss(req, res, base);\n\
    \            return;\n        }\n        else if (uri.pathname === \"/\") {\n\
    \            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.write(\n\
    \                \"<html><head><title>Static HTTP Server</title></head><body>\"\
    \ +\n                \"<h1>Static HTTP Server</h1><p>The static HTTP server has\
    \ started. \" +\n                \"To view the file, go to the \" +\n        \
    \        \"<a href='/js'>/js</a> or \" +\n                \"<a href='/css'>/css</a>\
    \ pages.</p>\" +\n                \"<iframe src='/' id='app'></iframe", "    a\
    \ = Math.abs(a);\n    b = Math.abs(b);\n    while (b > 0) {\n        var temp\
    \ = a;\n        a = b;\n        b = temp%b;\n    }\n    return a\n}\n},{}],5:[function(require,module,exports){\n\
    module.exports = intersect;\n", "  if (b === 0) {\n    return a;\n  } else {\n\
    \    return greatest_common_divisor(b, a % b);\n  }\n}\n", "\tif (a < b){\n\t\t\
    a = b;\n\t}\n\telse if (b < 0){\n\t\ta = Math.abs(b);\n\t\tb = 0;\n\t}\n\tvar\
    \ t = a % b;\n\tif (t > 0){\n\t\tb = b;\n\t\tt = b;\n\t}\n\telse if (t < 0){\n\
    \t\ta = Math.abs(a);\n\t\tt = a;\n\t}\n\treturn t;\n}\n", "  //Get the max value\
    \ for all integers\n  let max_a = Math.abs(a);\n  let max_b = Math.abs(b);\n \
    \ //Now get all the integers from 0 to max_a\n  let zeros_a = max_a%b;\n  //Get\
    \ the number of zeros\n  let zeros_count = zeros_a + Math.floor((max_a%b)/b);\n\
    \  //Now get all the integers from 0 to max_b\n  let zeros_b = max_b%a;\n  //Get\
    \ the number of zeros\n  let zeros_count_b = zeros_b + Math.floor((max_b%a/a));\n\
    \  //If there is no common divisor or if the common divisor is the greatest possible\
    \ one\n  if(max_a == max_b || zeros_count == zeros_count_b){\n    return max_a;\n\
    \  }\n  //If there is a common divisor\n  else{\n    return greatest_common_divisor(max_a,\
    \ b);\n  }\n}\n", "  return Math.abs(a * b) / gcd(a, b);\n};\n\nmodule.exports\
    \ = greatest_common_divisor;\n},{}],160:[function(require,module,exports){\n'use\
    \ strict';\n\nvar isArray = require('isarray');\n\nvar arrProto = Array.prototype;\n\
    var slice = arrProto.slice;\nvar map = arrProto.map;\nvar pop = arrProto.pop;\n\
    var push = arrProto.push;\nvar splice = arrProto.splice;\nvar unshift = arrProto.unshift;\n\
    \nvar utils = require('./utils');\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    if(a < b) {\n        return a;\n    }\n    return b;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
