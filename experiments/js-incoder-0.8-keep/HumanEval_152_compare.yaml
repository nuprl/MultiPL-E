name: HumanEval_152_compare
language: js
prompt: "//I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  function compare(game, guess){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0,\
  \ 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0,\
  \ 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2,\
  \ -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2,\
  \ 0, 0, 1]);\n}\n\ntest();"
completions: ["    let result = [];\n    for(let i = 0; i < game.length; i++){\n \
    \       if(guess[i] != game[i]){\n            result.push(Math.abs(guess[i] -\
    \ game[i]));\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nYou beat me by seconds on that one!\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ another solution (this one uses a for loop and a temporary variable):\n<code>",
  "  var result = [];\n  game.forEach(function(v, i) {\n    var diff = Math.abs(guess\
    \ - v);\n    var result = game.length - result.length;\n    if(result) \n    \
    \  result.push(result);\n  });\n  console.log(result);\n  return result;\n}\n\n\
    var game = [0,5,0,0,0,4];\nvar guess = [4,1,1,0,0,-2];\n", "    const length =\
    \ Math.min(game.length, guess.length);\n    let best = [];\n    let bestDiff =\
    \ Number.MAX_VALUE;\n    let currentDiff = 0;\n    let curr = 0;\n    let i;\n\
    \    for (i = 0; i < length; i++){\n        curr = Math.abs(game[i] - guess[i]);\n\
    \        currentDiff += curr\n        if(bestDiff > curr){\n            bestDiff\
    \ = curr;\n            best = [];\n        }\n        best.push(curr);\n    }\n\
    \    return best;\n}\n", "  var gameLength = game.length, guessesLength = guess.length;\n\
    \  var result = [];\n  for(var i=0; i<guessesLength; i++){\n    var score = 0;\n\
    \    for(var j=0; j<gameLength; j++){\n      if(game[j] == guess[i])\n       \
    \ score++;\n    }\n    result.push(score);\n  }\n  return result;\n}\n", "   \
    \ var result = [0,0,0,0,0,0,0,0,0];\n    var count = 0;\n    for (var i = 0; i\
    \ < game.length; i++){\n        if (game[i] == guess[i]){\n            count++;\n\
    \            result[i] = 0;\n        }else{\n            result[i] = Math.abs(game[i]\
    \ - guess[i]);\n        }\n        if (count === guess.length){\n            break;\n\
    \        }\n    }\n    return result;\n}", "   const answer=game.slice(0);\n \
    \  const guessed=guess.slice(0);\n   \n   for(let i = 0; i < guessed.length; i++){\n\
    \      if(guessed[i] !== answer[i]){\n         const dif=Math.abs(guessed[i] -\
    \ answer[i])\n         return [dif, guessed[i]]\n      }\n   }\n\n   return [-guessed[0],\
    \ guessed[0]]\n}\n", "    let score = [0, 0, 0, 0, 0, 0];\n    for(let i = 0;\
    \ i < guess.length; i++){\n        if(game[i] === guess[i]){\n            score[i]\
    \ = 0;\n        }else{\n            score[i] = Math.abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return score;\n}\n\nconst scores = [\n    [1, 2, 3, 4,\
    \ 5],\n    [1, 2, 3, 4, 2],\n    [0, 0, 0, 0]\n];\n\nconst guesses = [\n    [1,\
    \ 2, 3, 4, 2],\n    [1, 2, 3, 4, 5],\n    [0, 0, 0, 0]\n];\n", "  let result =\
    \ [];\n  game.forEach((value,index)=>{\n    let index = game.length;\n    for(let\
    \ i=0;i<index-1;i++){\n      if(value===guess[i]){\n        result.push(i-index);\n\
    \      }\n      if(i===0){\n        result.push(i-index);\n      }\n    }\n  });\n\
    \  return result;\n}\n", "\t// Your code goes here\n}", "  var guesses = guess;\n\
    \  var scores = game;\n\n  var result = new Array(guesses.length);\n  for (var\
    \ i = 0; i < guesses.length; i++) {\n    var score = scores[i];\n    var diff\
    \ = guesses[i] - score;\n    result[i] = Math.abs(diff);\n  }\n  return result;\n\
    }\n", "    let gameScore = game.sort((a,b) => b - a)\n    let guessScore = guess.sort((a,b)\
    \ => b - a)\n    let gameScoreLength = gameScore.length\n    let guessScoreLength\
    \ = guessScore.length\n    let guessedCorrectly = 0\n    let differences = []\n\
    \    for (let i = 0; i < gameScoreLength; i++){\n        if (gameScore[i] ===\
    \ guessScore[i]){\n            guessedCorrectly++\n        }\n        differences.push(Math.abs(gameScore[i]\
    \ - guessScore[i]))\n    }\n    if (guessedCorrectly === gameScoreLength){\n \
    \       return [guessedCorrectly, ...differences]\n    } else {\n        return\
    \ [guessedCorrectly, ...differences.map(e => Math.abs(e))]\n    }\n}\n", "  var\
    \ result = [];\n  var scores = [0, 1, 2, 3, 4];\n  var guesses = [0, 1, 2, 3,\
    \ -4];\n  \n  for (var i = 0; i < game.length; i++){\n    var scoreDiff = Math.abs(scores[i]-guess[i]);\n\
    \    if (game[i] == guess[i]){\n      result.push(0);\n    }\n    else{\n    \
    \  result.push(scoreDiff);\n    }\n  }\n\n  return result;\n}\n", "  // initialize\
    \ our results to an empty array\n  var result = [];\n  for (var i = 0; i < game.length;\
    \ i++){\n    result[i] = 0;\n  }\n  // for every possible guess, find its matching\
    \ game number\n  for (var i = 0; i < guess.length; i++){\n    var match = false;\n\
    \    for (var j = 0; j < game.length; j++){\n      if (game[j] == guess[i]){\n\
    \        result[j] += 1;\n        match = true;\n      }\n    }\n    // if we\
    \ don't match it means we guessed wrong\n    if (!match){\n      result[i] +=\
    \ Math.abs(guess[i]-game[i]);\n    }\n  }\n  return result;\n}\n", "  \n  //Your\
    \ code here\n  var scores = [...game, ...guess];\n  var results = [];\n  \n  for(var\
    \ i=0;i<scores.length;i++){\n    results.push(Math.abs(scores[i] - guess[i]));\n\
    \  }\n  \n  return results;\n}\n", "    var result = [];\n    for(var i=0;i<guess.length;i++){\n\
    \        var d = Math.abs(guess[i]-game[i]);\n        if(d<0){\n            d\
    \ = Math.abs(guess[i]-game[i]);\n            result.push(d);\n        }\n    \
    \    else{\n            result.push(0);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you, i will try it soon!\n<|/ c |>\n<| c\
    \ |>\nIt's working as you said, but i need to print it as i showed in the example.\
    \ Can you help me with that?\n<|/ c |>\n<| a tags=javascript dscore=1 |>\nA simple\
    \ solution:\n<code>\nvar result = [];\nfor (var i = 0; i < guess.length; i++)\
    \ {\n    result.push(Math.abs(guess[i] - game[i]));\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you, i will try it soon!\n<|/ c |>\n<| a dscore=1 |>\nTry this solution:\n\
    <code>\nvar compare = function(game, guess) {\n  var result = [];\n  for (var\
    \ i = 0; i < guess.length; ++i) {\n    result.push(Math.abs(guess[i] - game[i]));\n\
    \  }\n  return result;\n}\n</code>\n<|/ a tags=javascript |>\n<| a |>\nThis should\
    \ work for you:\n<code>", "  var score = new Array(game.length);\n  var guess\
    \ = new Array(guess.length);\n  for(var i = 0 ; i < game.length ; i++){\n    score[i]\
    \ = Math.abs(game[i] - guess[i]);\n  }\n  return score;\n}\n", "  let result =\
    \ [];\n  for (let i=0; i<guess.length;i++){\n    let diff = Math.abs(guess[i]-game[i])\n\
    \    if (guess[i] != game[i]) result.push(diff)\n  }\n  return result\n}\n", " \
    \ var guesses = [];\n  for (var i = 0; i < guess.length; i++){\n    var diff =\
    \ guess[i] - game[i];\n    guesses.push(diff > 0 ? diff : Math.abs(diff));\n \
    \ }\n  return guesses;\n}\n", "    \n    var result = [];\n    \n    game.forEach(item\
    \ => {\n        result.push(guess[item]-game[item]);\n    })\n    \n    return\
    \ result.map(function(item) {\n        return item < 0 ? Math.abs(item) : item;\n\
    \    })\n}\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]);", "    let result = [];\n\
    \    for (let i = 0; i < game.length; i++) {\n        if (game[i] != guess[i])\
    \ {\n            result.push((Math.abs(game[i] - guess[i])));\n        }\n   \
    \ }\n    return result\n}\n", "  // your code\n}\n", "    let result = [];\n \
    \   game.forEach((score, index) => {\n        if(guess[index] === score){\n  \
    \          result.push(0);\n        } else {\n            result.push(Math.abs(guess[index]\
    \ - score));\n        }\n    });\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ dscore=1 |>\n<| a tags=javascript,arrays |>\nI agree with the other answers\
    \ that I believe you would be best off creating a dictionary of the scores. \n\
    <code>\nscores = [\n     {\n        \"game\": \"1-2-3\",\n        \"score\": \"\
    1\"\n     },\n     {\n        \"game\": \"1-2-3\",\n        \"score\": \"2\"\n\
    \     },\n     {\n        \"game\": \"1-2-3\",\n        \"score\": \"3\"\n   \
    \  }\n]\n</code>\nWith that you would be able to easily get the score for a specific\
    \ game by calling\n<code>\nscores[game]\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=javascript,arrays |>\nYou can create an array with guesses and scores indexed\
    \ by the game name. The key will be the game name, the value will be a map of\
    \ guesses and scores that match the game.\n<code>\nconst scores = [\n    {\n \
    \       game: '1-2-3',\n        guesses: [\n            { guess: '1', score: 1\
    \ },\n            { guess: '2', score: 2 },\n            { guess: '3', score:\
    \ 3 },\n        ]\n    },\n    {\n        game: '4-5-6',\n        guesses: [\n\
    \            { guess: '4', score: 4 },\n            { guess: '5', score: 5 },\n\
    \            { guess: '6', score: 6 },\n        ]\n    }\n]\n</code>\nThen, iterate\
    \ over each game and find the guesses that match it.\n<code>\nconst gameScores\
    \ = {}\nscores.forEach(score => {\n    const game = score.game\n    const guesses\
    \ = score.guesses\n    guesses.forEach(guess => {\n        if (gameScores[game])\
    \ {\n            gameScores[game].guesses.push(guess)\n        } else {\n    \
    \        gameScores[game] = {\n                game,\n                guesses:\
    \ [guess]\n            }\n        }\n    })\n})\n</code>\nFinally, calculate the\
    \ score\n<code>\nObject.keys(gameScores).forEach(gameName => {\n    const { guesses\
    \ } = gameScores[gameName]\n    let score = 0\n    guesses.forEach(guess => {\n\
    \        score += Math.abs(parseInt(guess.guess, 10) - parseInt(guess.score, 10))\n\
    \    })\n    gameScores[gameName].score = score\n})\n\ngame", "  let correct =\
    \ game.slice(0); //slice makes a copy of the original array\n  let result = [];\n\
    \  guess = guess.sort((a,b) => a-b);\n  for (let i = 0; i < guess.length; i++){\n\
    \    let match = false;\n    for (let j = 0; j < correct.length; j++){\n     \
    \ if (correct[j] === guess[i]){\n        match = true;\n      }\n    }\n    if(match){\n\
    \      result.push(0);\n    } else {\n      result.push(Math.abs(correct[i] -\
    \ guess[i]));\n    }\n  }\n  return result;\n}\n", "    const len1 = game.length;\n\
    \    const len2 = guess.length;\n    const result = [];\n    for (let i = 0; i<len1;i++){\n\
    \        if(game[i]>guess[i]) result.push(Math.abs(game[i]-guess[i]));\n     \
    \   else result.push(Math.abs(guess[i]-game[i]));\n    }\n    for (let i=0;i<len2;i++){\n\
    \        if(game[i]>guess[i]) result.push(Math.abs(game[i]-guess[i]));\n     \
    \   else result.push(Math.abs(guess[i]-game[i]));\n    }\n    return result;\n\
    }", "\tvar result = [];\n\t\n\tfor(var i=0;i<game.length;i++){\n\t\tvar scoreDiff\
    \ = guess[i] - game[i];\n\t\tif(scoreDiff != 0){\n\t\t\tresult.push(Math.abs(scoreDiff));\n\
    \t\t}else{\n\t\t\tresult.push(0);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nvar\
    \ game = [10,13,14,10,16,8,9,9,12];\nvar guess = [4,10,15,4,16,3,9,10,12];\nvar\
    \ result = compare(game,guess);\n", "  var score = [0, 0, 0, 0];\n  game.forEach(function\
    \ (val,i){\n    var diff = val - guess[i];\n    if (diff === 0)\n      score[i]\
    \ = 0;\n    else\n      score[i] = Math.abs(diff);\n  });\n  return score;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis works, however, if the score array is empty the\
    \ method will still return an array with zeroes. I suppose I could check if the\
    \ score array is empty and return an array.fill() array instead\n<|/ c |>\n<|\
    \ c |>\nYes, that would also work. I think it might make more sense to return\
    \ a different value from that method. `undefined` or `null` are valid return values\
    \ so I think returning an empty array is better than the `undefined` value that\
    \ would happen otherwise.\n<|/ c |>\n<| c |>\nYou could also return an empty array\
    \ if the array is empty and fill it if the array is not empty before returning.\n\
    <|/ c |>\n<| a |>\nA little bit more complex but you can improve the performance\
    \ by using a Map object. It will map the items from the guesses with the score\
    \ from the game. \n<code>", "  let finalArray = []\n  game.forEach((item, index)=>{\n\
    \    let difference = Math.abs(guess[index] - item)\n    finalArray.push(difference)\n\
    \  })\n  return finalArray\n}\n", "  let guessesSum=guess.length\n  let sum=game.length\n\
    \  let result=[]\n  if (guessesSum>sum)\n    guessesSum=sum\n  if(sum>guessesSum)\n\
    \    sum=guessesSum\n  for(let i=0;i<sum;i++)\n  {\n    result.push((guess[i]-game[i])>0?(guess[i]-game[i]):(Math.abs(guess[i]-game[i])-game[i]))\n\
    \  }\n  return result\n}", "    let correct = 0;\n    let distance = [];\n   \
    \ game.map((val, i) => {\n        let diff = guess[i] - val;\n        if (diff\
    \ === 0){\n            correct++;\n        } else {\n            distance.push(Math.abs(diff));\n\
    \        }\n    })\n    return distance;\n}\n\nlet gameScore = [1,2,3,4,5,1,-1,2,-2,3,-3,-4,-5,-6,-7,8,-9,-8,9,-10,-10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-10,10,-",
  "    let difference = [];\n    game.forEach((currentVal, index) => {\n        guess[index]\
    \ = Math.abs(game[index] - guess[index]);\n        if(currentVal === guess[index]){\n\
    \            difference[index] = 0;\n        } else {\n            difference[index]\
    \ = Math.abs(currentVal - guess[index]);\n        }\n    });\n    return difference;\n\
    }\n", "    let result = [];\n    for(let i = 0; i<guess.length; i++){\n      \
    \  let index = game.findIndex(e => e == guess[i]);\n        if(index == -1)\n\
    \            result.push(-guess[i]);\n        else\n            result.push(Math.abs(guess[i]-game[index]));\n\
    \    }\n    return result;\n}", "    for(let i = 0; i < game.length; i++){\n \
    \       if(game[i] !== guess[i]){\n            return [Math.abs(game[i] - guess[i]),\
    \ i];\n        }\n    }\n    \n    return [-9999];\n}\n", "    let correctGuesses\
    \ = 0;\n    let guessesPerGuess = guess.length / game.length;\n    let diffs =\
    \ [];\n    for (let i = 0; i < game.length; i++){\n        if (guess[i] === game[i]){\n\
    \            correctGuesses += 1;\n        } else {\n            let diff = Math.abs(guess[i]\
    \ - game[i]);\n            diffs.push(diff);\n        }\n    }\n    return [correctGuesses,\
    \ guessesPerGuess, diffs];\n}\n", "  var wrong = [], correct = [], match = 0;\n\
    \  for(var i=0;i<guess.length;i++){\n    guess[i] = parseInt(guess[i]);\n    game[i]\
    \ = parseInt(game[i]);\n    if (game[i] != guess[i]) {\n      wrong [i]++;\n \
    \   } else {\n      match++;\n    }\n  }\n  wrong.sort();\n  correct.sort();\n\
    \  var result = [];\n  for(var i=0;i<guess.length;i++){\n    result[i] = Math.abs(guess[i]-game[i]);\n\
    \  }\n  if(match==guess.length){\n    return result;\n  }\n  return wrong;\n}\n",
  "    const result = [];\n    for(let i = 0; i < guess.length; i++){\n        result[i]\
    \ = game[i]-guess[i];\n        result[i] = result[i] > 0 ? 0 : Math.abs(result[i]);\n\
    \    }\n    return result;\n}\n", "\tlet scores = [...game].reduce((total,n)=>{\n\
    \t\ttotal += n;\n\t\treturn total;\n\t},0);\n\tlet guesses = [...guess].reduce((total,n)=>{\n\
    \t\ttotal += n;\n\t\treturn total;\n\t},0);\n\tlet diffs = [];\n\tfor(let g of\
    \ guesses){\n\t\tlet score = 0;\n\t\tfor(let g of game){\n\t\t\tif(g === g){\n\
    \t\t\t\tscore++;\n\t\t\t}\n\t\t}\n\t\tlet diff = score - g;\n\t\tdiffs.push(diff);\n\
    \t}\n\treturn diffs;\n}", "    //code goes here\n    let total = 0;\n    let distance\
    \ = [];\n    game.forEach(element => {\n        if(guess == element){\n      \
    \      distance.push(0);\n        }\n        else{\n            distance.push(Math.abs(guess\
    \ - element));\n        }\n    });\n    return distance;\n}\n", "  var result\
    \ = [],\n      len = game.length,\n      i = 0;\n      \n  for (i=0; i<len; i++){\n\
    \    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n",
  "    var result = [];\n    var i = 0;\n    var j = 0;\n    var guessVal;\n    var\
    \ gameVal = 0;\n    var diff = 0;\n\n    while(i < game.length && j < guess.length){\n\
    \        guessVal = guess[j];\n        gameVal = game[i];\n\n        if(gameVal\
    \ < guessVal){\n            diff += Math.abs(guessVal - gameVal);\n          \
    \  i++;\n        }else if(gameVal > guessVal){\n            diff += Math.abs(gameVal\
    \ - guessVal);\n            j++;\n        }else{\n            i++;\n         \
    \   j++;\n        }\n    }\n\n    //This just makes sure we dont go past the length\
    \ of the arrays\n    if(i < game.length){\n        for(i = i; i < game.length;\
    \ i++){\n            gameVal = game[i];\n            result.push(0);\n       \
    \ }\n    }\n\n    if(j < guess.length){\n        for(j = j; j < guess.length;\
    \ j++){\n            guessVal = guess[j];\n            result.push(Math.abs(guessVal\
    \ - gameVal));\n        }\n    }\n    return result;\n}", "  let gameScore = new\
    \ Array(game.length);\n  let guessScore = new Array(guess.length);\n  \n  for\
    \ (let i = 0; i < game.length; i++){\n    gameScore[i] = game[i] * -1;\n    guessScore[i]\
    \ = guess[i] * -1;\n  }\n  \n  for (let i = 0; i < guess.length; i++){\n    if\
    \ (guess[i] !== gameScore[i]){\n      return Math.abs(guess[i] - gameScore[i]);\n\
    \    }\n  }\n  \n  return [];\n}\n", "  game = game.sort((a,b) => a-b);\n  guess\
    \ = guess.sort((a,b) => a-b);\n  const scores = [...game,...guess];\n  let maxScore\
    \ = scores[0];\n  let minScore = scores[0];\n  for (let i = 1; i < scores.length;\
    \ i++){\n    if (scores[i] > maxScore){\n      maxScore = scores[i];\n    }\n\
    \    if (scores[i] < minScore){\n      minScore = scores[i];\n    }\n  }\n  let\
    \ diffs = Array(guess.length).fill(0);\n  for (var i = 0; i < scores.length; i++){\n\
    \    if (scores[i] === maxScore){\n      diffs[i] = Math.abs(guess[i] - maxScore);\n\
    \    }\n  }\n  return diffs;\n}\n", "\tlet result = [],\n\t\tgameLen = game.length,\n\
    \t\tguessLen = guess.length;\n\n\tif(gameLen === guessLen){\n\t\tfor(let i=0;i<gameLen;i++){\n\
    \t\t\tif(game[i] === guess[i]) result.push(0)\n\t\t\telse result.push(Math.abs(guess[i]-game[i]))\n\
    \t\t}\n\t}\n\telse {\n\t\tconsole.log(\"Game and guess do not have the same length.\"\
    )\n\t\treturn null;\n\t}\n\treturn result;\n}\n", "    //sort the game by score\
    \ to get the first highest numbers in order from high to low\n    game.sort(function(x,y){return\
    \ y-x;});\n\n    //compare each guess to the game\n    for(let i = 0; i < game.length;\
    \ i++){\n        let guessor = Math.abs(guess[i] - game[i]);\n        if(guessor===0){\n\
    \            //the game result was already correct, return all 0\n           \
    \ return new Array(game.length).fill(0);\n        }else{\n            //the game\
    \ result was not correct, return all guesses, minus the already guessed ones\n\
    \            return new Array(game.length).fill().concat(-guess[i]);\n       \
    \ }\n    }\n}\n", "    if (game.length != guess.length){\n        throw \"Your\
    \ guesses and your scores aren't the same size\";\n    }\n    let gameScore =\
    \ 0;\n    let guessesScore = 0;\n    for (let i = 0; i < game.length; i++){\n\
    \        if (game[i] == guess[i]){\n            gameScore++;\n        }\n    }\n\
    \    for (let i = 0; i < guess.length; i++){\n        if (guess[i] == game[i]){\n\
    \            guessesScore++;\n        }\n    }\n    \n    let returnValue = [];\n\
    \    for (let i = 0; i < guess.length; i++){\n        if (game[i] == guess[i]){\n\
    \            returnValue[i] = 0;\n        }\n        else if (Math.abs(game[i]\
    \ - guess[i]) == guessesScore){\n            returnValue[i] = Math.abs(game[i]\
    \ - guess[i]);\n        }\n        else if (Math.abs(game[i] - guess[i]) == gameScore){\n\
    \            returnValue[i] = 0;\n        }\n    }\n    return returnValue;\n\
    }\n", "    \n    let guesses = [];\n    for (let i = 0; i < guess.length; i++){\n\
    \        guesses.push(guess[i]);\n    }\n    \n    let scores = [];\n    for (let\
    \ i = 0; i < game.length; i++){\n        scores.push(game[i]);\n    }\n    \n\
    \    let result = [];\n    for (let i = 0; i < guesses.length; i++){\n       \
    \ result.push(Math.abs(guesses[i] - scores[i]));\n    }\n    \n    return result;\n\
    }\n", "\tguess = guess.sort((a,b)=>a-b)\n\tgame = game.sort((a,b)=>a-b)\n\tlet\
    \ result = []\n\tlet correct = 0\n\tlet wrong = 0\n\tfor(let i = 0; i < guess.length;\
    \ i++){\n\t\tlet index = game.indexOf(guess[i])\n\t\tif(index == -1){\n\t\t\t\
    wrong++\n\t\t\tresult.push(wrong)\n\t\t}else{\n\t\t\tcorrect++\n\t\t\tlet score\
    \ = game[index]\n\t\t\tlet diff = Math.abs(score - guess[i])\n\t\t\tresult.push(diff)\n\
    \t\t}\n\t}\n\tresult.push(correct)\n\treturn result\n}", "  let score = 0;\n \
    \ let guesses = 0;\n  game.forEach((value, index) => {\n    if (value == guess[index]){\n\
    \      score++;\n      guesses++;\n    }\n  });\n  return [score, guesses];\n\
    }\n", "   //we compare the length of the two arrays.\n   //if the lengths are\
    \ different, throw an error\n   if (game.length !== guess.length){\n      throw\
    \ Error('length of both arrays are not the same');\n   }\n   //we now have to\
    \ define our result\n   let result = [];\n   //we now start looping through the\
    \ array and comparing the element of array with the element of guess. \n   //We\
    \ need to loop through both arrays at the same time, so we loop through either\
    \ of them.\n   //the for loop is a javascript feature which starts at 0, and loops\
    \ to the length of the array minus 1.\n   for (let i=0; i< game.length; i++){\n\
    \     //the if statement tests if we already found a match, if not, we start comparing\
    \ the next element of the two arrays\n     if (i === guess.length){\n       //if\
    \ the element of array i is equal to element of guess, we push the difference\
    \ between array i and guess to the result array\n       result.push((game[i] -\
    \ guess[i]))\n     } else if (game[i] === guess[i]){\n       //if the element\
    \ of array i is equal to element of guess, we push the difference between array\
    \ i and guess to the result array\n       result.push((game[i] - guess[i]));\n\
    \     } else {\n       //if the element of array i does not equal element of guess,\
    \ we push -1 to result array\n       result.push(-1);\n     }\n   }\n   return\
    \ result;\n}\n", "\tlet gameLength = game.length\n\tlet guessLength = guess.length\n\
    \tlet differenceArray = new Array(guessLength)\n\n\tfor(let i = 0; i < guessLength;\
    \ i++){\n\t\tlet difference = Math.abs(guess[i] - game[i])\n\t\tdifferenceArray[i]\
    \ = difference\n\t}\n\treturn differenceArray\n}\n", "  if(game.length != guess.length){\n\
    \    console.log(\"Your game and your guess are not of the same length\");\n \
    \   return false;\n  }\n  \n  var gameScore = 0,\n      guessedScore = 0;\n  \n\
    \  for(var i=0; i< game.length; i++){\n    if(game[i] != guess[i]){\n      gameScore\
    \ += Math.abs(guess[i]-game[i]);\n    }else{\n      guessedScore += game[i];\n\
    \    }\n  }\n  \n  return [gameScore, guessedScore];\n}\n", "    // ...\n}\n</cell>\n\
    <cell>", "    return game.map(function(value, index){ return Math.abs(guess-value)});\n\
    }\n</code>\n<|/ a tags=javascript,arrays dscore=2 |>\n<| c |>\nthanks, I've updated\
    \ my code. I tried your solution and it returns all 0's at the end. [1,2,3,4,5,1]\
    \ should return [0,0,0,0,3,3] but i get [0,0,0,0,3,0]\n<|/ c |>\n<| c |>\nI guess\
    \ you're missing something in your code. `[1,2,3,4,5,1]` should return `[0,0,0,0,3,3]`\
    \ but I get `[0,0,0,0,3,0]`\n<|/ c |>\n<| c |>\nhmm, could you post the full code\
    \ that you're running or jsfiddle it please?\n<|/ c |>\n<| c |>\nIt works now\
    \ thanks to you and the guys who had helped me out. Thanks again!\n<|/ c |>\n\
    <| a tags=javascript,arrays |>\nThe other answers are correct in that your current\
    \ code is just calculating the differences between the two arrays.\nHowever, you\
    \ don't seem to have thought about how to compare the actual guesses against the\
    \ actual scores. It's easy to do that with nested for loops:\n<code>\nvar diffs\
    \ = [];\nfor (var i = 0; i < guesses.length; i++) {\n  for (var j = 0; j < games.length;\
    \ j++) {\n    if (games[j] === guesses[i]) {\n      diffs.push(0);\n    } else\
    \ {\n      var diff = games[j] - guesses[i];\n      diffs.push(diff);\n    }\n\
    \  }\n}\n</code>\nThis will also handle situations where someone gives you the\
    \ same score multiple times:\n<code>\nvar diffs = [];\nfor (var i = 0; i < guesses.length;\
    \ i++) {\n  var diff;\n  for (var j = 0; j < games.length; j++) {\n    if (games[j]\
    \ === guesses[i]) {\n      diffs.push(0);\n    } else {\n      diff = games[j]\
    \ - guesses[i];\n      diffs.push(diff);\n    }\n  }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=javascript,arrays |>\nI made this code\n\n<code>", "  let results\
    \ = [];\n  let score = 0;\n\n  // console.log(game,guess);\n  \n  let gameCopy\
    \ = [...game];\n  \n  for(let i = 0; i < guess.length; i++){\n    if(gameCopy[i]\
    \ < guess[i]){\n      score -= Math.abs(gameCopy[i] - guess[i]);\n      gameCopy[i]\
    \ = guess[i];\n    }\n    else gameCopy[i] = gameCopy[i] - guess[i];\n    results.push(score);\n\
    \  }\n  return results;\n}\n", "  var result = [];\n  for (var i = 0; i < game.length;\
    \ i++){\n    if (game[i] !== guess[i]){\n      result.push(-game[i]);\n    }else{\n\
    \      result.push(0);\n    }\n  }\n  return result;\n}", "\tvar result = [];\n\
    \t\n\tgame.forEach(function(score,index){\n\t\tresult.push(score-guess[index]);\n\
    \t});\n\t\n\treturn result;\n}\n", "   \n    guess = guess.sort();\n    \n   \
    \ // If one is a number, the other is an array, compare them.\n    if (guess.join()\
    \ == game.join()){\n        return [0]\n    }\n    // If one is an array, the\
    \ other is a number, compare the array\n    else if (game instanceof Array &&\
    \ guess instanceof Number){\n        let result = [];\n        \n        for (let\
    \ i = 0; i < game.length; i++) {\n            result.push(Math.abs(guess[i]-game[i]))\n\
    \        }\n        \n        return result;\n    }\n    // If one is an array,\
    \ the other is an array, compare them\n    else if (game instanceof Array && guess\
    \ instanceof Array){\n        let result = [];\n        \n        for (let i =\
    \ 0; i < game.length; i++) {\n            result.push(compare(game[i], guess[i]))\n\
    \        }\n        \n        return result;\n    }\n    \n}\n<|/ file dstars=0\
    \ source=github |>\n<| c |>\nIf your answer is not working, you can post your\
    \ code and I will try to fix it.  I really do hope that the code I posted is something\
    \ you wrote, not a copy and paste from somewhere else and your understanding of\
    \ how to solve the problem is correct.\n<|/ c |>\n<| c |>\nOkay I will try to\
    \ do that right now and share with you if it works\n<|/ c |>\n<| c |>\nYour code\
    \ works perfectly. Thank you so much for the help\n<|/ c |>\n<| c |>\nPlease mark\
    \ my answer as the accepted answer if it solved your issue\n<|/ c |>\n<| c |>\n\
    I did it but since I am a new user, it says that I cannot upvote your answer until\
    \ I have 15 reputation\n<|/ c |>\n<| a tags=arrays,javascript |>\nI have managed\
    \ to solve this problem in the following manner. \n<code>", "    let scores =\
    \ [];\n    for (let i=0; i<guess.length; i++){\n        if(guess[i] in game){\n\
    \            scores.push(game[guess[i]]);\n        }\n    }\n    for(let i=0;\
    \ i<guess.length; i++){\n        if(!guess[i] in game){\n            scores.push(Math.abs(guess[i]-game[guess[i]]));\n\
    \        }\n    }\n    return scores;\n}\n", "    let result = [];\n    let gameScore\
    \ = 0;\n    let guessScore = 0;\n    for(let i in game){\n        if(game.includes(i)){\n\
    \            gameScore += game[i];\n        }\n    }\n    for(let i in guess){\n\
    \        if(guess.includes(i)){\n            guessScore += guess[i];\n       \
    \ }\n    }\n    if(guessScore == gameScore){\n        result[0] = 0;\n    }else{\n\
    \        result[0] = Math.abs(guessScore - gameScore);\n    }\n    for(let i in\
    \ guess){\n        if(guess.includes(i)){\n            guessScore += guess[i];\n\
    \        }\n    }\n    for(let i in game){\n        if(game.includes(i)){\n  \
    \          gameScore += game[i];\n        }\n    }\n    if(guessScore == gameScore){\n\
    \        result[1] = 0;\n    }else{\n        result[1] = Math.abs(guessScore -\
    \ gameScore);\n    }\n    return result;\n}\n", "  const matchScore = game.reduce((sum,\
    \ score) => sum + score, 0);\n  const gameSum = game.reduce((sum, score) => sum\
    \ + score, 0);\n  const gameDiff = gameSum - matchScore;\n  const guessesSum =\
    \ guess.reduce((sum, score) => sum + score, 0);\n  const guessesDiff = guessesSum\
    \ - matchScore;\n\n  if(gameDiff === 0)\n    return guessesDiff;\n  else\n   \
    \ return Math.abs(guessesDiff);\n}\n", "  if(game.length !== guess.length){\n\
    \    throw new Error(\"guess and game lengths are not equal\");\n  }\n  var result\
    \ = [];\n  game.forEach(function(gameScore, index){\n    var guessedGuess = guess[index];\n\
    \    if(typeof guessedGuess === 'undefined'){\n      guessedGuess = 0;\n    }\n\
    \    if(typeof gameScore === 'undefined'){\n      gameScore = 0;\n    }\n    if(guessedGuess\
    \ !== gameScore){\n      var absDiff = Math.abs(guessedGuess - gameScore);\n \
    \     result.push(absDiff);\n    } else {\n      result.push(0);\n    }\n  });\n\
    \  return result;\n}\n\nvar result = compare([1,2,3,4,5,1], [1,2,3,4,2,-2]);",
  "  var result = [];\n  game.forEach(function(value, index){\n    var index = Math.max(index,\
    \ guess.indexOf(index));\n    if(index != -1){\n      var difference = Math.abs(value\
    \ - guess[index]);\n      result.push(difference * difference);\n    }\n  });\n\
    \  return result;\n}\n", "    const result = game.filter(e => guess[e])\n    let\
    \ resultArray = result.map(e => Math.abs(guess[e] - e));\n    return resultArray;\n\
    }\n", "    var bestDiff = Number.MAX_VALUE;\n    var bestIndex = -1;\n    for(var\
    \ i=0; i<guess.length; i++){\n        var diff = abs(game[i]-guess[i]);\n    \
    \    if (diff < bestDiff) {\n            bestDiff = diff;\n            bestIndex\
    \ = i;\n        }\n    }\n    return [bestDiff, bestIndex];\n}\n", "    // Your\
    \ code here\n    var gameScore = 0;\n    var guessedScore = 0;\n    for(var i\
    \ = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n           \
    \ gameScore++;\n        }else{\n            guessedScore++;\n        }\n    }\n\
    \    var correct = gameScore - guessedScore;\n    var result = [];\n    for(var\
    \ x = 0; x < game.length; x++){\n        var numCorrect = 0;\n        if(game[x]\
    \ === guess[x]){\n            numCorrect++;\n        }\n        result.push(Math.abs(game[x]\
    \ - guess[x]) - numCorrect);\n    }\n    return result;\n}", "    var returnArray\
    \ = new Array(guess.length);\n    \n    for(var i=0; i<guess.length; i++){\n \
    \       if(guess[i]==0){\n            guess[i]=1;\n        }\n        \n     \
    \   returnArray[i]=Math.abs(game[i]-guess[i]);\n    }\n    \n    return returnArray;\n\
    }\n\n", "  var results = []\n  game.forEach(function(score, index){\n    var guess\
    \ = guess[index]\n    if(guess === score){\n      results.push(guess)\n    }else{\n\
    \      results.push(Math.abs(guess - score))\n    }\n  })\n  return results\n}",
  "    //the length of the arrays are the same\n    if(game.length == guess.length){\n\
    \        for(let i = 0; i < game.length; i++){\n            //if there is a match\
    \ in the arrays, \n            //the value at that index is the difference between\
    \ the scores and guess at that index\n            if(game[i] != guess[i]){\n \
    \               return Math.abs(game[i] - guess[i]);\n            }\n        \
    \    //otherwise the values match and the difference is zero\n        }\n    }\n\
    \    //otherwise the length of arrays does not match\n    return null;\n}\n",
  "  var diff = [];\n  for (var i = 0; i < game.length; i++){\n    diff.push(Math.abs(game[i]\
    \ - guess[i]));\n  }\n  return diff;\n}\n", "    \n    var i = 0;\n    var score\
    \ = 0;\n    var answer = [];\n    \n    while (i < game.length && score < 0){\n\
    \        if (game[i] == guess[i]){\n            score += 1;\n        }\n     \
    \   answer[i] = score;\n        i += 1;\n    }\n    \n    while (i < game.length\
    \ && score >= 0){\n        if (game[i] != guess[i]){\n            score = Math.abs(guess[i]\
    \ - game[i]);\n        }\n        answer[i] = score;\n        i += 1;\n    }\n\
    \    \n    return answer;\n}\n</code>\n<|/ a |>\n<| c |>\nIt returns 0 when the\
    \ input is 0 also\n<|/ c |>\n<| c |>\nIt returns 0 when the input is 0 also\n\
    <|/ c |>\n<| c |>\nThis doesn't work correctly. Try `compare([0,5,0,0,0,4],[0,4,1,1,0,-2])`\
    \ and compare to the expected output. It will return `[4,4,1,0,0,6]` but should\
    \ be `[4,4,1,0,0,4]`.\n<|/ c |>\n<| c |>\nIt doesn't do that in my test, even\
    \ when I add some extra zeros to make up for mistakes\n<|/ c |>\n<| c |>\nI've\
    \ added a more detailed description for you to test it out and understand how\
    \ the function works. Let me know if you have any questions.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\nI think that the fastest way is to create a mapping from input score to\
    \ output score.\n<code>\nconst map = [\n  [0, 0],\n  [1, 1],\n  [2, 2],\n  [3,\
    \ 3],\n  [4, 4],\n  [5, 5],\n];\n</code>\nThen you can look up each input score\
    \ in the map and get the corresponding output score. Assuming that all input scores\
    \ are non-negative you can simply use Math.max:\n<code>", "  let differences =\
    \ [];\n  game.forEach((score, index) => {\n    guess[index] === score ? differences.push({index:\
    \ index, value: 0}) : differences.push({index: index, value: Math.abs(score -\
    \ guess[index])});\n  });\n  differences.sort((a,b) => a.value < b.value);\n \
    \ return differences;\n}\n", "    // Write your code here\n\n    game.map((elem,i)\
    \ => {\n        guess.map((ele,j) => {\n            if (i === j) {\n         \
    \       game[i] = 0;\n                game[j] = ele;\n            }\n        });\n\
    \    });\n\n    let arr = [];\n\n    for (var i = 0; i < game.length; i++) {\n\
    \        arr.push(game[i] - guess[i]);\n    }\n\n    return arr;\n}\n", "  let\
    \ correctCount = 0;\n  for (let i = 0; i<game.length; i++){\n    if (game[i] ==\
    \ guess[i]){\n      correctCount += 1;\n    } else {\n      correctCount = 0\n\
    \    }\n  }\n  return Math.abs(correctCount - game.length) / guess.length;\n}\n\
    const tests = [\n  [ [1,2,3,4], [3,4,1,2] ],\n  [ [0,5,0,0,0], [4,1,1,0,-2] ],\n\
    \  [ [0,0,0,0], [2,2,0,0] ],\n  [ [0,0,0,0,0], [2,2,2,2] ],\n  [ [0,0,0,0,3,3],\
    \ [0,0,0,0,0,6] ]\n]\ntests.forEach(test => console.log(compare(test[0],test[1])));</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI think you missed the point. The problem is that\
    \ this solution does not work for the first test in the OPs question. The result\
    \ should be `[0,0,0,0,3,3]`, but your solution gives me `[0,0,0,0,0,3]`\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I've updated my answer based on my interpretation\
    \ of your question.\n<|/ c |>\n<| a dscore=0 |>\nThis solution is based on my\
    \ interpretation of your question. The code is commented for you so you should\
    \ be able to understand what's going on.\n\n<code>\nvar compare = function(game,\
    \ guess){\n  // Iterate through each element in guess\n  for (var i = 0; i < guess.length;\
    \ i++)\n  {\n    // If a guess that doesn't match the current score is found\n\
    \    if (guess[i] !== game[i])\n    {\n      // Store the distance between the\
    \ guess and the correct guesses in a new array\n      var distance = []\n    \
    \  \n      // Iterate through each element in guess\n      for (var j = 0; j <\
    \ guess.length; j++)\n      {\n        // If one of the two scores is the same,\
    \ store the distance as 0, otherwise store the difference\n        if (guess[j]\
    \ === game[j])\n        {\n          distance.push(0)\n        }\n        else\n\
    \        {\n          distance.push(Math.abs(game[j] - guess[j]))\n        }\n\
    \      }\n      \n      // Add the difference between the guess and the correct\
    \ guesses to the new array\n      for (var k = 0; k < distance.length; k++)\n\
    \      {\n        distance.push(distance[k])\n      }\n      \n      // Return\
    \ the difference between the guess and the correct guesses\n      return distance;\n\
    \    }\n  }\n}\n\nvar tests = [\n  [ [1,2,3,4], [3,4,1,2] ],\n  [ [0,5,0,0,0],\
    \ [4,1,1,0,-2] ],\n  [ [0,0,0,0], [2,2,0,0] ],\n  [ [0,0,0,0,0], [2,2,2,2] ],\n\
    \  [ [0,0,0,0,3,3], [0,0,0,0,0,6] ]\n]\n\ntests.forEach(function(test){\n  console.log(compare(test",
  "  var results = [];\n  for(var i=0; i< game.length; i++){\n    results[i] = game[i]\
    \ -guess[i];\n  }\n  return results;\n}\n", "  var diff = [];\n  for(var i=0;i<guess.length;i++){\n\
    \    diff[i] = Math.abs(guess[i] - game[i]);\n  }\n  return diff;\n}\n", "   \
    \ // TODO: Your code here\n    return game;\n}\n</code>\n<|/ a |>\n<| a |>\nSo\
    \ I worked out a solution, here is what I have so far:\n\n<code>\nvar gameScores\
    \ = [1, 3, 2, 3, 5, 1];\nvar guesses = [1, 2, 3, 4, 2, -2];\n", "    var newGuess\
    \ = [],\n        correctGuess = [];\n    for(var i = 0; i < guess.length; i++){\n\
    \        if(guess[i] === game[i]){\n            newGuess.push(0);\n          \
    \  correctGuess.push(guess[i]);\n        }else{\n            newGuess.push(Math.abs(guess[i]\
    \ - game[i]));\n            correctGuess.push(guess[i]);\n        }\n    }\n \
    \   return [newGuess, correctGuess];\n}\n", "    game = game.sort((a, b) => a\
    \ - b);\n    guess = guess.sort((a, b) => a - b);\n    let result = [];\n    let\
    \ scoreDiff = 0;\n    for(let i = 0; i < game.length; i++){\n        let index\
    \ = game.indexOf(guess[i]);\n        if(index > -1){\n            let score =\
    \ game[index];\n            scoreDiff = Math.max(scoreDiff, Math.abs(score-guess[i]));\n\
    \            result[i] = scoreDiff;\n        }\n    }\n    return result.sort((a,\
    \ b) => a-b);\n}\n\nvar game = [1,2,3,4,5,1];\nvar guess = [1,2,3,4,2,-2];", " \
    \   let arr = game.slice(0)\n    for(let i=0;i<guess.length;i++){\n        if(guess[i]===arr[i]){\n\
    \            continue\n        }else{\n            return arr-i\n        }\n \
    \   }\n}\n", "  var result = [];\n  game.forEach(function(el){\n    guess.forEach(function(g){\n\
    \      if(el === g)\n        result.push(0);\n      else \n        result.push(Math.abs(el\
    \ - g));\n    });\n  });\n  return result;\n}\n", "    // Your code here\n   \
    \ // return game.length - guess.length;\n    return game.filter( (item,index)\
    \ => item === guess[index]).length;\n}\n", "    \n    let results = []\n\n   \
    \ game.forEach((value, index) => {\n        if(value === guess[index]){\n    \
    \        results[index] = 0\n        }else{\n            results[index] = Math.abs(value\
    \ - guess[index])\n        }\n    });\n\n    return results;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI feel like you deserve a +1 in this one. I was struggling\
    \ with this for awhile, after finally finding another question that pointed me\
    \ to my error. Thanks! I hope it's helpful to others!\n<|/ c |>\n<| a dscore=1\
    \ |>\nFor those who struggle with the wrong output format. Here is an optimized\
    \ version that outputs the correct order in which the array was compared.\n\n\
    <code>", "    \n    let gameNum = game.length;\n    let guessesNum = guess.length;\n\
    \    \n    let correctGuesses = 0;\n    \n    let gameScore = 0;\n    let guessedScore\
    \ = 0;\n    \n    //First loop through the guess\n    for (let i=0; i< guessesNum;\
    \ i++){\n        let guess = guess[i];\n        \n        guessedScore += Math.abs(guess\
    \ - game[i]);\n        \n        //Check if guess is correct\n        if (guess\
    \ === game[i]){\n            correctGuesses++;\n            gameScore += guess;\n\
    \        }\n    }\n    \n    let gameScoreDiff = gameScore - guessedScore;\n \
    \   \n    //If guesses don't match up with the correct number of guesses\n   \
    \ if(gameNum != guessesNum){\n        let diffOfGuess = Math.abs(gameScoreDiff\
    \ / gameNum);\n        let diffOfGuesses = Math.abs(correctGuesses / gameNum);\n\
    \        \n        let numOfGuesses = gameNum - guessesNum;\n        let numOfGuessesDiff\
    \ = numOfGuesses * (numOfGuesses * gameNum);\n        \n        let numOfGuessesDiffDiff\
    \ = numOfGuessesDiff + numOfGuessesDiff - gameScoreDiff;\n        \n        let\
    \ newArray = [];\n        for (let i=0; i< guessesNum; i++){\n            newArray.push(diffOfGuesses);\n\
    \        }\n        \n        \n        newArray.push(Math.abs(diffOfGuesses -\
    \ gameScoreDiff));\n        \n        return newArray;\n    }else{\n        //If\
    \ correct amount of guesses are found\n        let newArray = [];\n        for\
    \ (let i=0; i< guessesNum; i++){\n            newArray.push(diffOfGuesses);\n\
    \        }\n        \n        \n        newArray.push(Math.abs(gameScoreDiff -\
    \ correctGuesses));\n        return newArray;\n    }\n}\n", "    let result =\
    \ game.map((x, i) => x === guess[i] ? 0 : Math.abs(x - guess[i]));\n    return\
    \ Array.from({ length: result.length });\n}\n", "    var correct = false, guessed\
    \ = false, score;\n    for(var i=0;i<game.length;i++){\n        if(guess[i]==game[i]){\n\
    \            guessed=true;\n        }\n        else{\n            if(!guessed){\n\
    \                score=0;\n            }\n            else{\n                score=Math.abs(guess[i]-game[i]);\n\
    \            }\n            if(!correct){\n                correct=score==0;\n\
    \            }\n            else{\n                if(score>0){\n            \
    \        correct=false;\n                    break;\n                }\n     \
    \           else{\n                    correct=true;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return [correct,score];\n\
    }\n", "  const arr = [];\n  for (let i = 0; i < game.length; i++){\n    if (game[i]\
    \ === guess[i]){\n      arr.push(0);\n    } else {\n      arr.push(Math.abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return arr;\n}\n", "    // write your comparison\
    \ code here\n    return guess;\n}", "  var gameScore = game.map(function(x){return\
    \ Math.abs(x)});\n  var guessScore = guess.map(function(x){return Math.abs(x)});\n\
    \  var result = [];\n  for(var i=0; i<guess.length; i++){\n    if(game[i]===guess[i]){\n\
    \      result[i] = 0;\n    }else{\n      result[i] = Math.abs(game[i] - guess[i]);\n\
    \    }\n  }\n  return result;\n}", "  var score = 0;\n  for(var i=0; i< game.length;\
    \ i++){\n    var dif = Math.abs(guess[i]-game[i]);\n    if(dif == 0){\n      score+=0;\n\
    \    }\n    else if(dif < 0){\n      score+=dif;\n    }\n    else{\n      score+=dif*2;\n\
    \    }\n  }\n  return score;\n}\n", "    const len = game.length\n    let arr\
    \ = []\n    for(let i=0; i<len; i++){\n        let score = Math.abs(game[i] -\
    \ guess[i])\n        if(game[i] === guess[i]){\n            arr.push(0) //Correct\
    \ answer\n        } else{\n            arr.push(score) //Wrong answer\n      \
    \  }\n    }\n    return arr\n}\n\nvar array1 = [5,10,15,30,35]\nvar array2 = [5,10,15,30,35]\n\
    var array3 = [-5,-10,-15,-30,-35]\n", "\tlet score = new Array(game.length).fill(0);\n\
    \tlet index = new Array(game.length).fill(-1);\n\tlet correct = 0;\n\n\tfor(let\
    \ i = 0; i < game.length; i++){\n\t\tif(game[i] === guess[i]){\n\t\t\tscore[i]\
    \ = 0;\n\t\t\tindex[i] = game[i];\n\t\t\tcorrect++;\n\t\t} else {\n\t\t\tscore[i]\
    \ = Math.abs(game[i] - guess[i]);\n\t\t\tindex[i] = game[i];\n\t\t}\n\t}\n\n\t\
    return {score, index};\n}\n<|/ file source=github |>\n<| c |>\nI'm going to be\
    \ upfront about my apologies. My question was \"How to solve this problem\", and\
    \ I chose Javascript because that is my natural language, and a language I have\
    \ little knowledge of. The answers given were helpful, but I chose to use Javascript\
    \ because I felt that my Javascript was more advanced than my current skills.\
    \ Thanks for your help though, and I do apologize that my question wasn't clear.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere is a solution in javascript:\n<code>\nlet compare\
    \ = function (game, guess) {\n  let score = new Array(game.length).fill(0);\n\
    \  let index = new Array(game.length).fill(-1);\n  let correct = 0;\n  for (let\
    \ i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      score[i]\
    \ = 0;\n      index[i] = game[i];\n      correct++;\n    } else {\n      score[i]\
    \ = Math.abs(game[i] - guess[i]);\n      index[i] = game[i];\n    }\n  }\n\n \
    \ return {score, index};\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=1\
    \ |>\nHere's a solution without using for-loop\n<code>\nlet compare = function(game,\
    \ guess){\n  let score = new Array(game.length).fill(0);\n  let index = new Array(game.length).fill(-1);\n\
    \  let correct = 0;\n  score.forEach((v,i)=>{\n    if(game[i] === guess[i]){\n\
    \      index[i] = game[i];\n      score[i] = 0;\n      correct++;\n    } else\
    \ {\n      score[i] = Math.abs(game[i] - guess[i]);\n      index[i] = game[i];\n\
    \    }\n  })\n\n  return {score, index};\n}\n</code>\n<|/ a tags=arrays,javascript\
    \ |>\n<| a tags=arrays,javascript |>\nI think this would be a good use case for\
    \ reduce and filter.\n\n<code>\nlet game = [0,5,0,0,0,4],\n    guess = [4,1,1,0,0,-2],\n\
    \    result = game.map((v,i) => v !== guess[i] ? Math.abs(v - guess[i]) : guess[i]);\n",
  "   \n    \n    var answerArray=[];\n    var difference=[];\n    for (var i=0; i<game.length;\
    \ i++){\n        \n        if (game[i] == guess[i]){\n            answerArray.push(game[i])\n\
    \            difference.push(0)\n        }\n        else{\n            answerArray.push(Math.abs(game[i]-guess[i]))\n\
    \            difference.push(Math.abs(game[i]-guess[i]))\n        }\n        \n\
    \    }\n    return answerArray\n}\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\n\
    </cell>\n<text>\nTest\n\n</text>\n<cell>\n# run test cell\nfrom test import Test\n\
    \nTest.assertEquals(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]), [0,0,0,0,3,3], \"Wrong\
    \ result\")\nTest.assertEquals(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]), [4,4,1,0,0,6],\
    \ \"Wrong result\")\n</cell>\n<text>\nAcademic\nThis assignment is to research\
    \ and apply what we have learned about probability and statistics. We are given\
    \ a collection of mathematical formulas that can solve problems such as finding\
    \ the median or the highest number in a list. The formula is as follows: $\\displaystyle\
    \ f(x)={\\frac {a}{b}}\\cdot x$. Write a program that takes in a list and a number.\
    \ The program will run through each element in the list and calculate the formula\
    \ for the given number, and output the result. The program should then output\
    \ the number with the highest value of the formula.\n\nThis will be your first\
    \ programming assignment! You'll write code to solve the problem using the functions\
    \ we learned about above. Thus, there are only three sections to complete for\
    \ this assignment. You may find the following links useful:\n\nFunction definitions\
    \ and docstrings \nLoops\nInput and output instructions\n\n\n</text>\n<text>\n\
    Part 1: Problem Analysis\nInputs:\n\nA set of 5 numbers: 2 4 8 9 10\n\nOutputs:\n\
    \nThe median of the numbers in the set: 8\nThe number that occurs the most in\
    \ the set: 10\n\n\n</text>\n<cell>\n# run the following code to answer the questions\n\
    def median(lst):\n    '''\n    INPUT:\n    lst: a set of numbers\n    \n    OUTPUT:\n\
    \    returns the median of the numbers in the list\n    '''\n    \n    \n    #\
    \ put your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    var bestDistance = Number.POSITIVE_INFINITY;\n    game.forEach(function(score){\n\
    \        guess.forEach(function(guess){\n            var absDifference = Math.abs(guess\
    \ - score);\n            if (absDifference > bestDistance){\n                bestDistance\
    \ = absDifference;\n            }\n        });\n    });\n\n    return bestDistance;\n\
    };\n", "    let result = []\n    game.forEach((score,index) => {\n        guess[index]\
    \ && guess[index] > score ? result.push(0) : result.push(Math.abs(guess[index]\
    \ - score))\n    })\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I ran your function and it returned the wrong result: [7,4,3,5,7,7,5,4,3,5,7,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,7,7,5,4,3,5,",
  "    var scores = []; // array of scores\n    for(var i = 0, len = game.length;\
    \ i < len; i++){\n        scores.push((game[i] - guess[i]) ** 2)\n    }\n    return\
    \ scores.map(function(score){\n        if(score < 0){\n            return Math.sqrt(score);\n\
    \        }else{\n            return score;\n        }\n    });\n}\n", "    return\
    \ game.map((score,i) => {\n        if (i===guess.length-1) return  (score-guess[i])\n\
    \        return Math.abs(score-guess[i])\n    })\n}\n", "    for(var i=0;i<game.length;\
    \ i++){\n        if(game[i] != guess[i]){\n            var diff = Math.abs(game[i]-guess[i]);\n\
    \            if(diff<10) return [diff];\n            else return [diff, diff];\n\
    \        }\n    }\n}", "  var arr = [];\n  var i; var j; var a; var b; var arr2\
    \ = [];\n  for(i = 0; i < game.length; i++){\n    a = game[i];\n    for(j = 0;\
    \ j < guess.length; j++){\n      b = guess[j];\n      if(a === b){ arr2[i] = 0;}\n\
    \      else{\n        arr2[i] = Math.abs(a-b);\n      }\n    }\n  }\n  for(i =\
    \ 0; i < game.length; i++){\n    a = game[i];\n    for(j = 0; j < guess.length;\
    \ j++){\n      b = guess[j];\n      if(a === b){ arr[i] = 0;}\n      else{\n \
    \       arr[i] = Math.abs(a-b);\n      }\n    }\n  }\n  return arr2;\n}\n\nvar\
    \ game = [1,2,3,4,5,1];\nvar guess = [1,2,3,4,2,-2];", "  var results = [];\n\
    \  for (var i=0; i<guess.length; i++){\n    var index = 0;\n    for (var j=0;\
    \ j<game.length; j++){\n      if (game[j] == guess[i])\n        index = j;\n \
    \   }\n    results[i] = Math.abs(game[index] - guess[i]);\n  }\n  return results;\n\
    }\n", "  var differences = [];\n\n  game.forEach(function(score, index){\n   \
    \ if(guess[index]){\n      differences[index] = 0;\n    }else{\n      var difference\
    \ = Math.abs(guess - score);\n      differences[index] = difference;\n    }\n\
    \  });\n\n  return differences;\n}\n", "    var result = [];\n    for(var i =\
    \ 0; i < guess.length; i++){\n        if(guess[i] == game[i]){\n            result.push(0);\n\
    \        } else {\n            var result = Math.abs(guess[i] - game[i]);\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks so much for your answer! The only thing that I didn't figure out is what\
    \ the return statement of the compare function means. I thought it was the difference\
    \ in scores but I don't see how that translates to a difference in guesses. Could\
    \ you explain that part please?\n<|/ c |>\n<| c |>\nOh I see. I had to think and\
    \ compare it with my teacher's code. Thanks so much!\n<|/ c |>\n<| c |>\nNo problem\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\nThis is an answer that I've found after having\
    \ struggled with it for a while. I tried and tried and finally got it. If you're\
    \ like me and trying to wrap your head around this question, check out this article.\
    \ Very helpful.\nhttps://www.freecodecamp.org/news/how-to-compare-arrays-in-javascript-c914b201bc14/\n\
    The gist of the article is: The return value of the compare function should be\
    \ an array, and each item of the array should be equal to the difference between\
    \ score and guess. Along with that item, you should also push 1 if it is the guess\
    \ that was correct, and 0 if they were not.\nSo the return statement for compare\
    \ would be something like:\n<code>\nreturn [score - guess, 1]\n</code>\nWhere\
    \ score is the score of the match, and guess is the score of the guess. In this\
    \ case, I needed to test two arrays of equal length and get their difference in\
    \ scores and guesses.\nI hope this helps someone who is trying to learn a little\
    \ bit of Javascript. The article I referenced does a better job of explaining\
    \ why a return statement is necessary.\n<|/ a tags=javascript |>\n<| a |>\nI wanted\
    \ to add an answer because i was searching for an answer to this question in order\
    \ to help myself and others who may see this in future. \nThe return statement\
    \ is a way to get back to the main program from within a function that is inside\
    \ the function. \nThis answer may not be perfectly clear, but I wanted to help\
    \ anyone who was having this problem in the future understand more clearly how\
    \ return works. \nThe return statement is how a program can come back to the main\
    \ program from within a function that is inside the main program.\n<code>", " \
    \   const [score1, guesse1] = game;\n    const [score2, guesse2] = guess;\n  \
    \  const scoreDiff = score2 - score1;\n    const guesseDiff = guesse1 - guesse2;\n\
    \    const diffs = [];\n    \n    for(let i = 0; i < guesseDiff.length; i++){\n\
    \        diffs.push(Math.abs(scoreDiff - guesseDiff[i]));\n    }\n    return diffs;\n\
    }\n", "  let result = [];\n  for (let i=0; i<guess.length;i++){\n    let tempResult\
    \ = 0;\n    for (let j=0; j<game.length;j++){\n      if (guess[i]===game[j]){\n\
    \        tempResult = 0;\n        break;\n      }\n      tempResult += Math.pow(Math.abs(guess[i]-game[j]),2);\n\
    \    }\n    result.push(tempResult);\n  }\n  return result;\n}\n", "\tvar gameScore\
    \ = 0;\n\tvar guesses;\n\tvar matchScore;\n\tvar result = [];\n\tgame.forEach((item,index)=>{\n\
    \t\tif(item == guess[index]){\n\t\t\tgameScore += 1;\n\t\t}else{\n\t\t\tmatchScore\
    \ = Math.abs(guess[index] - item);\n\t\t}\n\t});\n\tguesses = game.filter(item=>{\n\
    \t\treturn guess[item] == item;\n\t});\n\t\n\tresult = guesses.map((item,index)=>{\n\
    \t\tif(!matchScore){\n\t\t\treturn 0;\n\t\t}else{\n\t\t\treturn Math.abs(item\
    \ - matchScore);\n\t\t}\n\t});\n\t\n\treturn result;\n}\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]);\
    \ //[0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]); //[4,4,1,0,0,6]\n\n",
  "    let scores = [...game];\n    let guesss = [...guess];\n    let result = new\
    \ Array(guess.length).fill(-1);\n    let lastGuessIndex = guess.length;\n\n  \
    \  for(let i = 0; i < guess.length; i++){\n        let index = 0;\n        let\
    \ guesses = 0;\n        for(let j = 0; j < guess.length; j++){\n            if(game[i]\
    \ == guess[j]){\n                guesses++;\n                index = j;\n    \
    \            break;\n            }\n        }\n\n        if(guesses === 0){\n\
    \            if(lastGuessIndex - index > 0){\n                result[i] = lastGuessIndex\
    \ - index;\n            }\n            else{\n                result[i] = 0;\n\
    \            }\n        }\n        else{\n            result[i] = Math.abs(guesses\
    \ - 1);\n        }\n\n        lastGuessIndex = index;\n    }\n\n    return result;\n\
    }\n", "  let results = []\n  for(let i = 0; i < game.length; i++){\n    if(guess[i]\
    \ != game[i]){\n      results.push(Math.abs(guess[i]-game[i]))\n    }\n  }\n \
    \ return results\n}\n", "    let result = [];\n    game.forEach((score, i) =>\
    \ {\n        let sum = 0;\n        let sum2 = 0;\n        let sum3 = 0;\n    \
    \    if(game[i] != guess[i]){\n            result.push(i);\n        }\n      \
    \  if(game[i] == guess[i]){\n            sum += guess[i];\n            sum2 +=\
    \ score;\n        }else{\n            sum3 += Math.abs(score - guess[i]);\n  \
    \      }\n    })\n    result.push(sum3 - sum);\n    result.push(sum2 - sum);\n\
    \    return result;\n}", "    const arr = game.slice();\n    for(let i=0; i<guess.length;\
    \ i++){\n        const guessIndex = arr.indexOf(guess[i]);\n        const index\
    \ = arr.indexOf(guess[i], i+1);\n        if(guessIndex === -1 || index === -1){\n\
    \            continue;\n        }\n        const scoreBefore = arr[i];\n     \
    \   const scoreAfter = arr[i+1];\n        const difference = scoreAfter - scoreBefore;\n\
    \        if(index > guessIndex){\n            arr[i] += difference;\n        \
    \    arr[guessIndex] -= difference;\n        }else{\n            arr[i] += difference;\n\
    \            arr[index] -= difference;\n        }\n    }\n    return arr;\n}\n",
  "    var result = new Array(guess.length);\n    for(var i=0; i<guess.length; i++){\n\
    \        result[i] = Math.abs(guess[i]-game[i]);\n    }\n    return result;\n\
    }\n", "    let results = [];\n    let difference = 0;\n    for (let i = 0; i <\
    \ guess.length; i++){\n        if(guess[i] === game[i]){\n            results.push(0);\n\
    \            difference = 0;\n        } else {\n            results.push(Math.abs(guess[i]-game[i]));\n\
    \            difference = Math.abs(guess[i]-game[i]);\n        }\n    }\n    return\
    \ results;\n}", "\t\n\tvar gameLen = game.length;\n\tvar guessedLen = guess.length;\n\
    \t\n\tvar difArr = []; \n\t\n\tfor(var i = 0; i < guessedLen; i++){\n\t\tdifArr[i]\
    \ = Math.abs(game[i] - guess[i]);\n\t}\n\t\n\treturn difArr;\n}\n", "  var scores\
    \ = [...game,...guess].sort((a,b)=>a-b);\n  return scores.map((score)=>Math.abs(score-guess[scores.indexOf(score)]));\n\
    }\n", "    let results = [];\n    let scores = [];\n    let score = 0;\n    for(let\
    \ i = 0; i < guess.length; i++){\n        for(let j = 0; j < game.length; j++){\n\
    \            if(game[j] == guess[i]){\n                scores.push(score);\n \
    \               score = 0;\n            }else{\n                score += Math.abs(guess[i]\
    \ - game[j]);\n            }\n        }\n        results.push(score);\n    }\n\
    \    return results;\n}\n", "  let a = []\n  game.map((e,i)=>a[i] = Math.abs(guess\
    \ - e))\n  a.forEach((e)=>e > 0 ? e = e : e = Math.abs(guess-e))\n  return a\n\
    }\n", "    let scores = [];\n    let i = 0;\n    let wrongguesses = [];\n    while\
    \ (i < game.length && i < guess.length){\n        scores.push((Math.abs(game[i]\
    \ - guess[i])) ?\n            Math.abs(game[i] - guess[i]) : Math.abs(guess[i]\
    \ - game[i]));\n        if (scores.length == guess.length){\n            i++;\n\
    \        }\n        else if (scores.length != guess.length){\n            wrongguesses.push(guess[i]);\n\
    \        }\n    }\n    return wrongguesses;\n}\n", "  var results = [];\n  for\
    \ (var i = 0; i < game.length; i++){\n    if (game[i] == guess[i])\n      results[i]\
    \ = 0;\n    else\n      results[i] = Math.abs(guess[i] - game[i]);\n  }\n  return\
    \ results;\n}\n", "    var score = game.length;\n    var diff = guess;\n    \n\
    \    for (var i = 0; i < game.length; i++){\n        for (var j = 0; j < guess.length;\
    \ j++){\n            diff[j] = Math.abs(diff[j] - game[i]);\n        }\n    }\n\
    \    return diff;\n}\n", "    var result = [];\n    var i = game.length;\n   \
    \ var j = guess.length;\n    while(i--) {\n        result[i] = Math.abs(game[i]\
    \ - guess[i]);\n    }\n    while(j--) {\n        result[i] = Math.abs(game[i]\
    \ - guess[j]);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\nI wanted to provide a simpler solution and this may be a good opportunity\
    \ to talk about a very important concept in computing: The \"Damerau-Levenshtein\
    \ Distance\". \nIn short, the difference between the two strings' \"distances\"\
    \ is equal to the number of edits to make one string equal to the other.\nThe\
    \ distance of two strings is the sum of all the edits needed to make one string\
    \ equal to the other.\nAn edit is one of inserting, deleting, or, in the case\
    \ of a substitution, the substitution of the character that is being replaced\
    \ by the character that is being added or removed.\nFor a string of length n,\
    \ there are 2^n edit operations needed to make the strings equal, where each edit\
    \ can either be to or from the start of the string. \nExample: The strings \"\
    ABA\" and \"ABB\" have distance 1, because you can make either one equal to the\
    \ other. There are 3 edits to make ABA equal ABB\nThe distance of two strings\
    \ is equal to the sum of the differences between the edits to the first string\
    \ and the edits to the second string.\nThe goal of the following code is to compute\
    \ the distance between two strings using the \"Damerau-Levenshtein Distance\"\
    . \nThe first part involves defining several helper functions which help the computation\
    \ of the distance. \nThe second part involves computing the \"Damerau-Levenshtein\
    \ Distance\" between the two strings and the outputting the result as an array.\
    \ \n<code>\nvar levenshtein = function(str1, str2, callback) {\n\nvar n = str1.length;\n\
    var m = str2.length;\n\nvar distances = Array(m + 1).fill(0);\n\nvar inserts =\
    \ Array(n + 1).fill(0);\n\nvar deletions = Array(n + 1).fill(0);\n\nvar substitutions\
    \ = Array(n + 1).fill(0);\n\nvar dist = 0;\n\nvar a = 0; // current length of\
    \ first string\n\nvar b = 0; // current length of second string\n\nvar c = 0;\
    \ // current number of edits\n\nvar i; // loop variable for first string\n\nvar\
    \ j; // loop variable for second string\n\nvar k;\nfor(i = 0; i < n; i++) {\n\
    \    dist = 0;\n    for(j = 0; j < m; j++) {\n        if(str1[j] === str2[i])\
    \ {\n            dist++;\n        }\n        else {\n            dist--;\n   \
    \         insertions[c]++;\n        }\n    }\n    distances[a] = dist;\n    a++;\n\
    }\n\na = 0; // reset current length of ", "    // write code here\n    let results\
    \ = [];\n    for (let i = 0; i < guess.length; i++) {\n        let diff = Math.abs(guess[i]\
    \ - game[i]);\n        results.push(diff);\n    }\n    return results;\n}\n",
  "  var result = [], guesses = [];\n  var scores = [];\n  game.map(function(score)\
    \ {\n    scores.push(score);\n  });\n  guess.map(function(guess) {\n    guesses.push(guess);\n\
    \  });\n  for (var i = 0; i < guesses.length; i++) {\n    result[i] = Math.abs(guesses[i]\
    \ - scores[i]);\n  }\n  return result;\n}\n", "  var result = [];\n  for (var\
    \ i = 0; i < guess.length; i++)\n  {\n    var diff = guess[i] - game[i];\n   \
    \ if (diff > 0){\n      result.push(diff);\n    }else{\n      result.push(Math.abs(diff));\n\
    \    }\n  }\n  return result;\n}\n", "    game.sort((a,b) => a-b);\n    guess.sort((a,b)\
    \ => a-b);\n    let result = [];\n    for (let i = 0; i < guess.length; i++){\n\
    \        let temp = guess[i];\n        result.push(Math.abs(guess[i]-game[i]));\n\
    \    }\n    result.sort((a,b) => b-a);\n    return result;\n}\n", "  var result\
    \ = [];\n  var scores = [];\n  for(var i = 0, len = game.length; i < len; i++){\n\
    \    result.push(Math.abs(game[i] - guess[i]));\n    scores.push(game[i]);\n \
    \ }\n  return result;\n}", "    // Write your solution here\n    let result =\
    \ [];\n    for(let i=0;i<game.length;i++){\n        if(game[i]===guess[i]){\n\
    \            result.push(i);\n        }else{\n            result.push(Math.abs(guess[i]-game[i]));\n\
    \        }\n    }\n    return result;\n}\n", "    // Your code here\n\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThe first code worked perfectly, thank you! I appreciate your\
    \ help :)\n<|/ c |>\n<| c |>\nGlad I could help, your welcome! If this answer\
    \ or any other one solved your issue, please mark it as accepted.\n<|/ c |>\n\
    <| a tags=arrays,javascript,algorithm |>\nUse a nested loop to go through the\
    \ game's length, and compare each index to the guesses' index.\n<code>", "   \
    \ let result = [];\n    game.forEach((score, index) => {\n        if (guess[index]\
    \ == score ){\n            result.push(0);\n        } else {\n            result.push(Math.abs(guess[index]\
    \ - score));\n        }\n    })\n    return result;\n}", "  var results = [];\n\
    \  var diffs = [];\n  var i = 0;\n  var j = 0;\n  var gameLength = game.length;\n\
    \  var guessLength = guess.length;\n  \n  while(i < guessLength && j < gameLength){\n\
    \    if(game[i] == guess[j]){\n      results.push(i);\n      i++;\n      j++;\n\
    \    }else{\n      results.push(Math.abs(guess[j]-game[i]));\n      diffs.push(Math.abs(guess[j]-game[i]));\n\
    \      i++;\n      j++;\n    }\n  }\n  return results;\n}\n\nvar game = [1,3,2,4,1,3,1];\n\
    var guess = [3,2];\nvar results = compare(game, guess);\n\nalert(results);</code>\n\
    <|/ a dscore=0 tags=jquery,javascript |>\n<| a dscore=0 |>\n<code>", "    var\
    \ difference = 0;\n    game.forEach(function(item, index, arr){\n        difference\
    \ += Math.abs(item - guess[index]);\n    });\n    console.log(difference);\n \
    \   return difference;\n}\n", "  let arr1 = game\n  let arr2 = guess\n  \n  let\
    \ result = [];\n  let counter = 0;\n  \n  for (let i = 0; i < arr1.length; i++)\
    \ {\n    if (arr1[i] == arr2[i]) {\n      counter++\n    } else {\n      result.push(Math.abs(arr1[i]\
    \ - arr2[i]))\n    }\n  }\n\n  if (counter === arr1.length){\n    result.push(0)\n\
    \  }\n  return result\n}\n", "    // your code here\n    \n    // First convert\
    \ score and guess to a number\n    score = game.map(function(e){return Number(e)})\n\
    \    guess = guess.map(function(e){return Number(e)})\n    // console.log(score,\
    \ guess)\n    \n    // Sum up the difference to determine if they have guessed\
    \ correctly\n    sum = 0\n    for (i = 0; i < guess.length; i++){\n        if(guess[i]\
    \ != game[i]){\n            sum += Math.abs(guess[i]-game[i])\n        }\n   \
    \ }\n    // console.log([sum])\n    // console.log(score)\n    return [sum, score]\n\
    }\n", "  var result = [];\n  // Loop through the game\n  for (var i = 0; i < game.length;\
    \ i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n\
    }\n", "  if(guess.length !== game.length){\n    console.log('guess.length !==\
    \ game.length');\n    return null;\n  }\n\n  var result = [];\n  for(var i = 0;\
    \ i < game.length; i++){\n    var diff = Math.abs(guess[i] - game[i]);\n    if(guess[i]\
    \ === game[i]){\n      result.push(0)\n    } else {\n      result.push(diff)\n\
    \    }\n  }\n\n  return result;\n}\n", "    let array = [];\n    for(let i = 0;\
    \ i < game.length; i++){\n      if(game[i] === guess[i]){\n        array.push(0);\n\
    \      } else if(game[i] > guess[i]){\n        array.push((Math.abs(game[i] -\
    \ guess[i])));\n      } else {\n        array.push((Math.abs(guess[i] - game[i])));\n\
    \      }\n    }\n    return array;\n}\n", "\tvar i = 0,\n\t\tguess = guess.sort(function(a,\
    \ b){return a-b}); // sorts guess into descending order\n\tgame = game.sort(function(a,\
    \ b){return b-a}); // sorts game into descending order\n\t\n\twhile( i < guess.length\
    \ && i < game.length && guess[i] < game[i] ){\n\t\ti++;\n\t}\n\t\n\tvar gameSum\
    \ = 0;\n\tvar sum = 0;\n\twhile(i < game.length){\n\t\tsum += Math.abs(game[i]\
    \ - guess[i]);\n\t\tgameSum += game[i];\n\t\ti++;\n\t}\n\t\n\treturn(sum/gameSum);\n\
    }\n", "    let score = 0;\n    \n    game.map((score, i) => {\n        if (guess[i]\
    \ === score) {\n            score = 0;\n        } else {\n            score =\
    \ Math.abs(guess[i] - score);\n        }\n    });\n    return score;\n}\n", " \
    \   let result = Array(guess.length).fill(0);\n    \n    game.forEach(function(el,\
    \ i){\n        result[i] = Math.abs(guess - el);\n    });\n    \n    \n    //\
    \ console.log(result);\n    return result;\n}", "    var score = game.slice();\n\
    \    for(var i = 0; i < guess.length; i++){\n        score[guess[i]-1] += 1;\n\
    \    }\n    return score;\n}\n", "    let scores = new Array(game.length).fill(0);\n\
    \    let misses = new Array(game.length).fill(0);\n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(guess[i] != game[i]) misses[i]++;\n        else scores[i]++;\n\
    \    }\n    return scores.map((score, i) => Math.abs(score - guess[i]) );\n}\n",
  "  if(game.every(e => e === guess[0])) //if they are already correct\n    return\
    \ 0;\n  if(game.every(e => e > guess[0])) return Math.abs(guess[0] - game[0])\n\
    \  if(game.every(e => e < guess[0])) return Math.abs(guess[0] - game[0])\n  return\
    \ Math.max(Math.abs(guess[0] - game[0]), Math.abs(guess[0] - game[game.indexOf(guess[0])]))\n\
    }\n", "    var result = [];\n    var diffs = [];\n    var diff = 0;\n    var diff2\
    \ = 0;\n    var i = game.length;\n    var j = guess.length;\n    var isMatch =\
    \ true;\n    while(i>0 || j>0){\n        if(!isMatch){\n            result.push(Math.abs(game[i]\
    \ - guess[j]));\n            i++;\n            j--;\n        }else if(game[i]==guess[j]){\n\
    \            i++;\n            j--;\n        }else{\n            diffs.push(Math.abs(game[i]\
    \ - guess[j]));\n            isMatch = false;\n            while(Math.abs(diffs[i])\
    \ > Math.abs(diff)){\n                i++;\n                diff=0;\n        \
    \    }\n            while(Math.abs(diff2) > Math.abs(diff)){\n               \
    \ j--;\n                diff2 = 0;\n            }\n            while(game[i]!=guess[j]){\n\
    \                i++;\n                j--;\n                diffs.push(Math.abs(game[i]\
    \ - guess[j]));\n                diff2 = 0;\n            }\n        }\n    }\n\
    \    return diffs;\n}\n", "\t\n\t// Your code here\n\tlet result = []\n\tgame.sort((a,\
    \ b) => b - a)\n\tguess.sort((a, b) => b - a)\n\tfor (let i = 0; i < game.length;\
    \ i++){\n\t\tguess[i] -= game[i]\n\t\tresult.push(game[i] - guess[i])\n\t}\n\t\
    result.sort((a, b) => b - a)\n\treturn result\n}\n", "    if (game.length != guess.length){\n\
    \        throw \"Invalid number of elements\"\n    }\n    var results = []\n \
    \   \n    var score = 0\n    for (var i = 0; i < game.length; i++){\n        if\
    \ (game[i] !== guess[i]){\n            score = Math.abs(game[i] - guess[i])\n\
    \        }\n        results.push(score)\n    }\n    return results\n}\n</code>\n\
    <|/ a tags=javascript,arrays,string |>\n<| c |>\nI appreciate your help. This\
    \ is my first JavaScript program and I really appreciate the explanation. Thanks\
    \ again.\n<|/ c |>\n<| a |>\nThis solution compares each word in the array with\
    \ the matching word in the second array.\n<code>\nlet game = [\"Hello\", \"Hi\"\
    , \"Hi2\", \"Hi3\"];\nlet guess = [\"Hi2\", \"Hi3\"];\nlet results = [];\n\ngame.forEach((word)\
    \ => {\n  guess.forEach((guessWord) => {\n    if(word === guessWord) {\n     \
    \ results.push(0);\n    } else {\n      results.push(Math.abs(word.length - guessWord.length));\n\
    \    }\n  });\n});\n", "    var result = new Array();\n    for(var i = 0; i <\
    \ game.length; i++){\n        var difference = Math.abs(game[i] - guess[i]);\n\
    \        if(difference == 0){\n            result[i] = 0;\n        }else{\n  \
    \          result[i] = difference;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 tags=javascript,arrays,compare |>\n<| c |>\nThank you\
    \ very much. This is exactly what I was looking for. I'm new to javascript, I've\
    \ only been using it for a few months. I appreciate your time answering the question!\n\
    <|/ c |>\n<| c |>\nI wish I could vote you up but I am a noob and it won't allow\
    \ me. Thank you though!\n<|/ c |>\n<| a |>\nTry to use this :\n<code>", "  var\
    \ scores = [];\n  var i = guess.length;\n  var j = 0;\n  var isCorrect = true;\n\
    \n  for(var k = 0; k < i; k++){\n    var tempScore = 0;\n    var numGuesses =\
    \ 0;\n    while(tempScore < guess[j] && numGuesses <= game.length){\n      tempScore\
    \ += game[numGuesses];\n      numGuesses++;\n    }\n    if(tempScore > guess[j]){\n\
    \      isCorrect = false;\n      scores.push(Math.abs(tempScore - guess[j]));\n\
    \    }else{\n      scores.push(0);\n    }\n    j++;\n  }\n  return scores;\n}\n",
  "    game = game.slice(0);\n    guess = guess.slice(0);\n    const length = guess.length;\n\
    \    let result = [];\n    for(let i=0;i<length;i++){\n        if(game[i] > guess[i]){\n\
    \            game.splice(i,1);\n            result.push(-game[i]);\n        }else{\n\
    \            result.push((game[i] - guess[i]));\n        }\n    }\n    return\
    \ result;\n}\n", "  var result = new Array(guess.length);\n  for (var i = 0; i\
    \ < guess.length; i++) {\n    var tempResult = 0;\n    for (var j = 0; j < game.length;\
    \ j++) {\n      if(guess[i]==game[j]){\n        tempResult++;\n      }\n    }\n\
    \    if (tempResult == game.length){\n      result[i] = 0;\n    }\n    else {\n\
    \      result[i] = Math.abs(guess[i]-game[i]);\n    }\n  }\n  return result;\n\
    }", "\tgame = game.slice();\n\tguess = guess.slice();\n\tvar gameLength = game.length;\n\
    \tvar guessLength = guess.length;\n\t\n\t// The longest possible score is equal\
    \ to the length of the array\n\t\n\tvar bestGame = 0;\n\tvar bestGuess = 0;\n\t\
    var bestDiff = 0;\n\tvar bestScore = 0;\n\t\n\t// Loop through the array of scores\
    \ \n\tfor (var i = 0; i < gameLength; i++){\n\t\t\n\t\t// For each element in\
    \ the game array, find the corresponding element in the guess array \n\t\tvar\
    \ gameMatch = game.indexOf(game[i]);\n\t\tvar guessMatch = guess.indexOf(guess[i]);\n\
    \t\t\n\t\t// If this score is closer to the guess, then update our best score\
    \ and best guesses\n\t\t\n\t\tif (Math.abs(gameMatch - guessMatch) < bestDiff){\n\
    \t\t\tbestGame = game[i];\n\t\t\tbestGuess = guess[i];\n\t\t\tbestDiff = Math.abs(gameMatch\
    \ - guessMatch);\n\t\t\tbestScore = gameMatch;\n\t\t}\n\t}\n\t\n\t// Return the\
    \ array of scores\n\treturn [bestGame, bestGuess, bestDiff, bestScore];\n}\n",
  "    let scores = new Array(game.length).fill(0);\n    let guesses = new Array(guess.length).fill(0);\n\
    \    let results = new Array(game.length).fill(0);\n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(guess[i] < game[i]){\n            scores[i] = 0;\n       \
    \     guesses[i] = guess[i];\n            results[i] = game[i];\n        }else{\n\
    \            scores[i] = Math.abs(guess[i] - game[i]);\n            guesses[i]\
    \ = guess[i];\n            results[i] = game[i];\n        }\n    }\n    for(let\
    \ i = 0; i < guess.length; i++){\n        if(guesses[i] != guess[i]){\n      \
    \      scores[i] = Math.abs(guesses[i] - guess[i]);\n        }\n    }\n    return\
    \ results;\n}\n", "    const results = [];\n    let score = 0;\n    let i = 0;\n\
    \    const guessLength = guess.length;\n    while(i < guessLength){\n        let\
    \ j = i;\n        while(j < guessLength){\n            const score = game[i] +\
    \ game[j];\n            if(guess === score){\n                results.push(0);\n\
    \                break;\n            }\n            if(guess < score){\n     \
    \           j++;\n            }else{\n                results.push(Math.abs(guess\
    \ - score));\n                j = guessLength;\n            }\n        }\n   \
    \     i++;\n    }\n    return results;\n}\n", "    var score = [],\n        len\
    \ = game.length,\n        len = guess.length,\n        i;\n    \n    for(i=0;\
    \ i<len; i++){\n        score.push(Math.abs(game[i]-guess[i]));\n    }\n    \n\
    \    return score;\n}\n", "    game.sort(function(a,b){return a-b})\n    guess.sort(function(a,b){return\
    \ a-b})\n    console.log(game, guess)\n    var gameArray = game\n    var guessArray\
    \ = guess\n    var guesses = 0\n    for(var i = 0; i<guesses.length; i++){\n \
    \       var difference = Math.abs(guessArray[i] - gameArray[i])\n        if(guessArray[i]\
    \ == gameArray[i]){\n            guesses += 1\n        }\n        gameArray[i]\
    \ = guessArray[i]\n        guessArray[i] = difference\n    }\n    console.log(gameArray,\
    \ guessArray, guesses)\n    return guessArray\n}\n", "    for(var i=0; i<game.length;\
    \ i++){\n        var temp = guess[i]\n        var temp2 = game[i]\n        var\
    \ temp3 = Math.abs(temp-temp2)\n        guess[i] = temp3\n    }\n    return guess\n\
    }\n", "    let scores = []\n    let differences = []\n    for (let i = 0; i <\
    \ guess.length; i++) {\n        if (guess[i] === game[i]) {\n            scores.push(game[i])\n\
    \        } else {\n            differences.push(Math.abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return scores\n}\n", "  game = game.sort((a, b) => a -\
    \ b);\n  guess = guess.sort((a, b) => a - b);\n  let gameLen = game.length;\n\
    \  let guessLen = guess.length;\n  let result = [];\n  for(let i = 0; i < gameLen;\
    \ i++){\n    result.push( Math.abs(guess[i]-game[i]) );\n  }\n  return result;\n\
    }\n", "    var gLen = game.length\n    var gSize = game[0]\n    var guesses =\
    \ guess.slice()\n    var ret = new Array(gLen).fill(0)\n    for(var i = 0; i <\
    \ gLen; i++){\n        var diff = guesses[i] - gSize\n        ret[i] = diff <\
    \ 0 ? -1 : diff > 0 ? +1 :\n            diff > 0 ? diff : -diff\n    }\n    return\
    \ ret\n}\n", "\tvar gameLen = game.length;\n\tvar guessLen = guess.length;\n\t\
    var answer = Array(guessLen);\n\tfor (var i = 0; i < guessLen; i++)\n\t\tanswer[i]\
    \ = Math.abs(guess[i] - game[i]);\n\treturn answer;\n}\n", "\tvar arr=game.slice(),//clone\
    \ the game array\n\t\tgarr=guess.slice();\n\tfor(var i=0;i<garr.length;i++){\n\
    \t\tarr.splice(garr[i],1);//remove from game the one guessed wrongly\n\t}\n\t\n\
    \tvar answer=[];\n\t\n\tfor(var i=0;i<arr.length;i++){\n\t\tanswer.push(Math.abs(arr[i]-guess[i]));\n\
    \t}\n\treturn answer;\n}", "\tlet results = [];\n\tfor(let i of game){\n\t\tif(guess[i]\
    \ > 0){\n\t\t\tresults.push(i);\n\t\t}\n\t}\n\treturn results;\n}\n", "  let result\
    \ = []\n  game.forEach((score, index) => {\n    let difference = abs(guess[index]\
    \ - score)\n    if (difference !== 0){\n      result.push(difference)\n    } else\
    \ {\n      result.push(0) // they have guessed correctly\n    }\n  })\n  return\
    \ result\n}\n\nlet game = [1,2,3,4,5,1];\nlet guess = [1,2,3,4,2,-2]", "  \n \
    \ let numMatches = game.length;\n  \n  let maxScore = Math.max(...game);\n  let\
    \ minScore = Math.min(...game);\n  \n  console.log(maxScore,minScore);\n  \n \
    \ let differenceArray = [];\n  let totalDifference = 0;\n  \n  for( let i = 0\
    \ ; i < game.length ; i++ ){\n    if( game[i] != guess[i] ){\n      totalDifference\
    \ = game[i] - guess[i];\n      differenceArray.push(totalDifference);\n    }\n\
    \  }\n  \n  console.log(differenceArray);\n  \n  let scoreResult = [];\n  let\
    \ currentScore = guess;\n  \n  for( let i = 0 ; i < game.length ; i++ ){\n   \
    \ \n    currentScore += differenceArray[i];\n    \n    scoreResult.push(currentScore);\n\
    \  }\n  \n  return scoreResult;\n}\n", "    var results = [];\n    var errors\
    \ = []\n    var totalGuesses = game.length;\n    game.map(function(score){\n \
    \       errors.push((guess-score));\n    })\n    guesses.forEach(function(guess,\
    \ i){\n        results.push(Math.max(0,(guess)-game[i]))\n    });\n    results.map(function(result){\n\
    \        if(result == 0){\n            errors.unshift(0);\n        }\n    })\n\
    \    errors.map(function(error){\n        if(error > 0){\n            total +=\
    \ Math.abs(error)\n        }\n    })\n    return total;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nvar score = [5, 8, 4, 2, 7, 5, 9, 5, 3];\nvar guess = [5,\
    \ 7, 0, 8, 9];\nvar compare = function(score,guess){\n var results=[];\n var errors=[];\n\
    \ var totalGuesses=score.length;\n score.map(function(score){\n     errors.push((guess-score));\n\
    \ })\n guesses.forEach(function(guess, i){\n     results.push(Math.max(0,(guess)-game[i]))\n\
    \ });\n results.map(function(result){\n     if(result==0){\n     errors.unshift(0);\n\
    \     }\n })\n errors.map(function(error){\n     if(error>0){\n     total += Math.abs(error);\n\
    \     }\n })\n return total;\n}", "  var out = [],\n      gameLength = game.length,\n\
    \      guessLength = guess.length,\n      max = gameLength > guessLength ? gameLength\
    \ : guessLength,\n      i = 0, j = 0, k = 0;\n  \n  while (i < gameLength || j\
    \ < guessLength){\n    if(i===gameLength && j===guessLength){\n      out.push(guess[k]\
    \ - game[k]);\n      i += 2;\n      j += 2;\n      k += 2;\n      continue;\n\
    \    }\n  \n    out.push(Math.abs(guess[k] - game[i]) + Math.abs(guess[j] - game[j]));\n\
    \    i += 1;\n    j += 1;\n    k += 1;\n  }\n  \n  return out;\n}\n", "    let\
    \ result = []\n    for(let i = 0; i < game.length; i++){\n        let score =\
    \ 0\n        for(let j = 0; j < guess.length; j++){\n            if(game[i] ===\
    \ guess[j]) score += 1\n        }\n        result.push(Math.abs(game[i] - score))\n\
    \    }\n    return result\n}\n", "  let a = [];\n  for (let i = 0; i < guess.length;\
    \ i++) {\n    let a = [];\n    let score = game[i];\n    let guess = guess[i];\n\
    \    for (let j = 0; j < guess.length; j++) {\n      let score = game[j];\n  \
    \    let guess = guess[j];\n      let diff = Math.abs(guess - score);\n      a.push(diff);\n\
    \    }\n    a.push(0);\n    a.sort();\n  }\n  return a;\n}\n", "\tgameArray =\
    \ game;\n\t\n\tguessArray = guess;\n\t\n\tguessedArray = [];\n\t\n\tguessedArray.push(0);\n\
    \t\n\tvar diff;\n\t\n\tfor(var j=guessArray.length-1;j>=0; j--){\n\t\tdiff = guessArray[j]\
    \ - gameArray[j];\n\t\t\n\t\tif(diff === 0){\n\t\t\tguessedArray.push(0);\n\t\t\
    }else{\n\t\t\tguessedArray.push(Math.abs(diff));\n\t\t}\n\t}\n\treturn guessedArray;\n\
    }\n", "    \n    // your code here\n    let matches = []\n    for (let i = 0;\
    \ i < guess.length; i++){\n        for (let j = 0; j < game.length; j++){\n  \
    \          let difference = guess[i]-game[j]\n            if(Math.abs(difference)\
    \ == 0){\n                matches.push(0)\n            }\n            else if(difference\
    \ > 0){\n                matches.push(difference)\n            }\n           \
    \ else{\n                matches.push(Math.abs(difference))\n            }\n \
    \       }\n    }\n    return matches\n}\n", "  var result = [];\n  game.forEach(function(score,index){\n\
    \    if(index === 0){\n      result[0] = 0;\n    }else{\n      result[index] =\
    \ Math.abs(guess[index] - score);\n    }\n  });\n  return result;\n}\n", "   \
    \ // Your code goes here\n    if (game.length != guess.length){\n        return\
    \ \"Wrong guess, wrong length\";\n    }\n    var gameScore = game.map(function(num){\n\
    \        return Math.abs(num - guess[num]);\n    });\n    return gameScore;\n\
    }\n</code>\nThe other thing you should look at is arrays and loops. If you don't\
    \ know what an array is or how to use loops to iterate over them, I really recommend\
    \ you to take some time to learn about them.\n<|/ a tags=arrays,javascript |>\n\
    <| c |>\nHi Amadan,\n\nI got it working thanks. I have one small question. What\
    \ if I wanted to return an array of all matches. How would I do that? I  tried\
    \ to change the return gameScore to a var and tried adding it to the return but\
    \ no luck.\n<|/ c |>\n<| c |>\nI believe you could do something like `return game.map(function(num){\
    \ return Math.abs(num - guess[num]); });`. What happened when you tried that?\n\
    <|/ c |>\n<| c |>\nYes, I was thinking about that and did something similar. I\
    \ just changed \"return gameScore\" to \"return gameScore.push(gameScore);\" and\
    \ it works.\n\nThanks\n<|/ c |>\n<| c |>\nWhat you were doing is returning an\
    \ array with the `gameScore` array, which was a nested array. Just `return gameScore;`\
    \ would return an array of the `gameScore` array which is what you are looking\
    \ for.\n<|/ c |>\n<| a dscore=1 tags=arrays,javascript |>\n<code>", "  const gameCopy\
    \ = game.slice();\n  const guessCopy = guess.slice();\n  let i = 0;\n  let j =\
    \ 0;\n  const ret = [];\n  while(i < game.length && j < guess.length){\n    if(game[i]\
    \ < guess[j]){\n      ret.push(game[i] - guess[j]);\n      i++;\n      continue;\n\
    \    }\n    \n    if(game[i] > guess[j]){\n      ret.push(guess[j] - game[i]);\n\
    \      j++;\n      continue;\n    }\n    \n    if(game[i] === guess[j]){\n   \
    \   ret.push(0);\n      i++;\n      j++;\n    }\n  }\n  \n  while(i < game.length){\n\
    \    ret.push(game[i] - guess[j]);\n    i++;\n    j++;\n  }\n  while(j < guess.length){\n\
    \    ret.push(guess[j] - game[i]);\n    j++;\n  }\n  return ret;\n}\n", "    let\
    \ result = new Array( game.length )\n    for(let i=0; i<game.length; i++){\n \
    \       result[i] = Math.abs( guess[i] - game[i] )\n    }\n    return result.map(Number)\n\
    }\n", "    var i = 0;\n    var answerArr = [];\n    var gameScore = [];\n    var\
    \ guessScore = [];\n    for(i = 0; i < game.length; i++){\n        gameScore.push(game[i]);\n\
    \    }\n    for(i = 0; i < guess.length; i++){\n        guessScore.push(guess[i]);\n\
    \    }\n    var gameScoreSum = 0;\n    for(i = 0; i < game.length; i++){\n   \
    \     gameScoreSum += gameScore[i];\n    }\n    var guessScoreSum = 0;\n    for(i\
    \ = 0; i < guess.length; i++){\n        guessScoreSum += guessScore[i];\n    }\n\
    \    console.log(gameScoreSum);\n    console.log(guessScoreSum);\n    for(i =\
    \ 0; i < guess.length; i++){\n        if(guessScore[i] != gameScore[i]){\n   \
    \         console.log(gameScore[i]);\n            console.log(guessScore[i]);\n\
    \            console.log(Math.abs(gameScore[i] - guessScore[i]));\n        }\n\
    \    }\n    for(i = 0; i < guess.length; i++){\n        console.log(gameScore[i]);\n\
    \        console.log(guessScore[i]);\n        if(guessScore[i] == gameScore[i]){\n\
    \            answerArr.push(i);\n        }\n    }\n    return answerArr;\n}\n",
  "    var scores = [],\n        guesses = [],\n        i, j, max = 0,\n        score\
    \ = 0, //the score is the absolute difference between the guess and the score\n\
    \        guess = guess.length,\n        game = game.length,\n        gameScore,\n\
    \        guessScore;\n\n    //loop through the guesses\n    for (i = 0; i < guess;\
    \ i++){\n        //loop through the game\n        for (j = 0; j < game; j++){\n\
    \            //check if the guess matches the score of the game\n            if\
    \ (game[j] == guess[i]){\n                gameScore = game[j];\n             \
    \   guessScore = guess[i];\n                //increment the score\n          \
    \      score++;\n            }\n        }\n        //if the guess was correct\n\
    \        if (guessScore == gameScore){\n            score = 0;\n        }\n  \
    \      //otherwise, increase the maximum score\n        else{\n            max\
    \ = game[j];\n        }\n    }\n    //if the max score is greater than 0, push\
    \ a zero to the score array\n    if (max > 0){\n        scores.push(max);\n  \
    \  }\n    //otherwise, push the absolute difference between the score and the\
    \ guess as the score\n    else{\n        scores.push(Math.abs(guesses.length-score));\n\
    \    }\n\n    //return the score array\n    return scores;\n}\n", "    var maxDiff\
    \ = 0,\n        diff = 0;\n    // loop through each element of guesses\n    for(var\
    \ i=0; i<guess.length; i++){\n        diff = Math.abs(game[i] - guess[i]);\n \
    \       if(diff > maxDiff) maxDiff = diff;\n    }\n    // return max differences\n\
    \    return maxDiff;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I'll\
    \ be sure to test it out.\n<|/ c |>\n<| c |>\nThis solution is very simple and\
    \ clean. I would love to see an example of how it compares performance-wise though.\n\
    <|/ c |>\n<| c |>\nI agree with you on how it works. I find it hard to believe\
    \ the answer was accepted. I'm sure the original question has more to do with\
    \ my own algorithm being too slow - but this answer just shows that it's actually\
    \ the right way to solve the problem.\n<|/ c |>\n<| c |>\nThe code doesn't have\
    \ to be efficient, but I think the code is easier to understand and more flexible\
    \ than what was presented in the question.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. The question is indeed about comparing scores given by some game. So\
    \ the scores will always be positive. I've made an edit to the question to make\
    \ it clear. Thanks again!\n<|/ c |>\n<| a tags=algorithm |>\nThis isn't a pure\
    \ mathematical problem - it's an algorithm question. \nAssuming that each game\
    \ is described by two arrays scores[] and guesses[] with n elements, and that\
    \ both arrays are sorted, the answer is simply a for loop that looks through the\
    \ scores array and compares it to the guesses[] array. If each score is less than\
    \ the corresponding guess, then the game was correct, and otherwise it was wrong.\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. The question is indeed about\
    \ comparing scores given by some game. So the scores will always be positive.\
    \ I've made an edit to the question to make it clear. Thanks again!\n<|/ c |>\n\
    <| a tags=algorithm dscore=1 |>\nI wrote a JavaScript solution for you:\n<code>",
  "  let result = [0,0,0,0,0,0];\n  let maxGame = 0;\n  let maxGuess = 0;\n  let gameIndex\
    \ = 0;\n  let guessedIndex = 0;\n  while (gameIndex < game.length && guessedIndex\
    \ < guess.length){\n    if (game[gameIndex] == guess[guessedIndex]){\n      result[guessedIndex]\
    \ = game[gameIndex];\n      gameIndex++;\n      guessedIndex++;\n      result[guessedIndex]\
    \ = 0;\n      result[guessedIndex] = Math.abs(guess[guessedIndex] - game[gameIndex]);\n\
    \      gameIndex++;\n      guessedIndex++;\n      result[guessedIndex] = 0;\n\
    \      result[guessedIndex] = Math.abs(guess[guessedIndex] - game[gameIndex]);\n\
    \      gameIndex++;\n      guessedIndex++;\n    }\n    else \n      if (game[gameIndex]\
    \ > guess[guessedIndex])\n        gameIndex++;\n      else\n        if (game[gameIndex]\
    \ < guess[guessedIndex])\n          gameIndex++;\n        else {\n          maxGame\
    \ = Math.max(maxGame, gameIndex);\n          maxGuess = Math.max(maxGuess, guessedIndex);\n\
    \          gameIndex++;\n          guessedIndex++;\n          result[guessedIndex]\
    \ = 0;\n          result[guessedIndex] = Math.abs(guess[guessedIndex] - game[gameIndex]);\n\
    \          gameIndex++;\n          guessedIndex++;\n          result[guessedIndex]\
    \ = 0;\n          result[guessedIndex] = Math.abs(guess[guessedIndex] - game[gameIndex]);\n\
    \          gameIndex++;\n          guessedIndex++;\n        }\n  }\n  result[maxGuess:]\
    \ = game[maxGame];\n  return result;\n}\n", "  const result = [];\n  \n  game.forEach((score,\
    \ index) => {\n    let currentGuess = guess[index];\n    if (score === 0) return;\
    \ //exit early if we don't know if the score is correct or not\n    let diff =\
    \ Math.abs(currentGuess - score);\n    result.push(diff);\n  });\n  \n  return\
    \ result;\n}\n", "    // Initialize our answer to 0\n    let answer = 0;\n   \
    \ // Initialize our current guess position to 0\n    let guessPosition = 0;\n\
    \    // Start our loop\n    for(let i = 0; i < guess.length; i++){\n        //\
    \ Our current guess has been correct\n        if(guess[i] == game[guessPosition]){\n\
    \            // increment our answer\n            answer += 1;\n            //\
    \ increment our position\n            guessPosition += 1;\n        }else{\n  \
    \          // Our current guess has incorrectly been guessed\n            answer\
    \ -= Math.abs(guess[i] - game[guessPosition]);\n            // reset our current\
    \ position\n            guessPosition = 0;\n        }\n    }\n    // Return our\
    \ answer\n    return answer;\n}\n", "  for(var i = 0; i<game.length; i++){\n \
    \   if(game[i] != guess[i]) \n      return Math.abs(game[i] - guess[i]);\n  }\n\
    \  \n  console.log(\"Game and guess are equal\");\n  \n  return 0;\n}\n\nvar game\
    \ = [1,2,3,4,5,1];\nvar guess = [1,2,3,4,2,-2]; \ncompare(game, guess);</code>\n\
    \nThe code below compares two objects and returns an array of all differences.\n\
    \n<code>", "  // your code here\n  var score = 0;\n  var array = [];\n  for (var\
    \ i = 0; i < game.length; i++){\n    var x = game[i];\n    var y = guess[i];\n\
    \    if(x != y){\n      score += Math.abs(x - y);\n    }\n  }\n  return array;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI actually need to get the index of the array where\
    \ each element was found. Like [1,2] and [2,2] should give me 1 and 2 as the index\
    \ they where found.\n<|/ c |>\n<| c |>\nI have updated the code, it will now return\
    \ an array of the indices and a score for each one. I hope it works as expected\
    \ now.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    let result = [];\n    game.sort((a,b)\
    \ => a-b);\n    guess.sort((a,b) => a-b);\n\n    for(let i = 0; i < game.length;\
    \ i++){\n        let temp = game[i] - guess[i];\n        if(temp){\n         \
    \   result.push(Math.abs(temp));\n        }\n        else{\n            result.push(0);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>", "    var result = [];\n    game.forEach(function(score, i){\n       \
    \ if(score == guess[i]){\n            result[i] = 0;\n        } else {\n     \
    \       result[i] = Math.abs(guess[i] - score);\n        }\n    });\n    return\
    \ result;\n}\n</code>\n<|/ a tags=javascript,loops,arrays dscore=1 |>\n<| a tags=javascript,loops,arrays\
    \ |>\nTry this solution:\n\n<code>", "  var result = [];\n  for (var i = 0; i\
    \ < game.length; i++){\n    if (game[i] === guess[i]) result.push(0);\n    else\
    \ result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "\t\
    game.sort(function(a,b){\n\t\tif(a>b){return -1;}\n\t\tif(a<b){return 1;}\n\t\t\
    return 0;\n\t});\n\tguess.sort(function(a,b){\n\t\tif(a>b){return -1;}\n\t\tif(a<b){return\
    \ 1;}\n\t\treturn 0;\n\t});\n\tvar result = [],\n\t\ti,j,\n\t\tguessesMatch =\
    \ false;\n\t\t\n\tfor(i=0;i<game.length;i++){\n\t\tguessesMatch = false;\n\t\t\
    \n\t\tfor(j=0;j<guess.length;j++){\n\t\t\tif(game[i]===guess[j]){\n\t\t\t\tguessesMatch\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(guessesMatch){\n\t\t\t\
    result.push(i);\n\t\t}\n\t}\n\treturn result;\n}", "  // Write code here\n  return\
    \ compare(game, guess)\n}\n", "\tlet result = new Array( guess.length );\n\tfor(\
    \ let i = 0; i < guess.length; ++i ){\n\t\tresult[i] = guess[i] < game[i] ? -1\
    \ : (guess[i] == game[i] ? 0 : Math.abs(game[i] - guess[i]));\n\t}\n\treturn result;\n\
    }\n", "  let gameLen = game.length\n  let guessLen = guess.length\n  let result\
    \ = []\n  for(let i = 0; i < guessLen; i++){\n    result.push(Math.abs(game[i]\
    \ - guess[i]))\n  }\n  \n  if(guessLen === gameLen){\n    for(let i = 0; i < guessLen;\
    \ i++){\n      result.push(0)\n    }\n  }\n  \n  return result\n}\n", "    var\
    \ result = [];\n    for(var i=0;i<game.length;i++){\n        result.push(Math.abs(guess[i]-game[i]));\n\
    \    }\n    return result;\n}\n", "    let scoreDiff = [];\n    for(let i = 0;\
    \ i < guess.length; i++){\n        scoreDiff.push(Math.abs(guess[i] - game[i]));\n\
    \    }\n    return scoreDiff;\n}\n", "    let scores = [...game];\n    let guesses\
    \ = [...guess];\n    let results = [];\n    \n    for(let i = 0; i < guesses.length;\
    \ i++){\n        for(let j = 0; j < scores.length; j++){\n            if (guesses[i]\
    \ === scores[j]){\n                results.push(0);\n            }\n         \
    \   else if(guesses[i] < scores[j]){\n                results.push(Math.abs(guesses[i]\
    \ - scores[j]));\n            }\n            else if(guesses[i] > scores[j]){\n\
    \                results.push(Math.abs(guesses[i] - scores[j]));\n           \
    \ }\n        }\n    }\n    return results;\n}\n\ncompare([2,3,5,7,9],[7,8,4,1,-2]);\n\
    </code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis works except when there\
    \ is negative numbers. Negative numbers are getting bigger when compared to the\
    \ number in the array. e.g. compare([2,3,5,7,9],[7,8,4,1,-2]) returns [4, 4, 1,\
    \ 0, 0, 6]\n<|/ c |>\n<| c |>\nOops, you are correct, sorry. Missed that. Edited.\n\
    <|/ c |>\n<| c |>\nThis is also great except when there is a tie. The answer should\
    \ be [0, 0, 0, 0, 0, 0]. I'm assuming this is because you are iterating through\
    \ each guesses and comparing them to the scores array. This also means if there\
    \ is a tie the first number in the array will be returned. Example: compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ should return [0,1,3,0,0,0] because you are comparing 1's with 1's and 3's with\
    \ 2's\n<|/ c |>\n<| c |>\nI edited it so that there are no ties in the game. Thanks\
    \ for catching that.\n<|/ c |>\n<| a |>\nI used the filter function on the scores\
    \ array to filter out all the scores which are not in the guesses array. \n\n\
    <code>", "   var myList= new Array();\n   var theList= new Array();\n   myList=\
    \ game\n   theList= guess\n   var results = new Array();\n   var counter = 0;\n\
    \   for (var i = 0; i < myList.length; i++) {\n    if ( theList[i]> myList[i]\
    \ ) {\n       counter++;\n    }\n    results[i] = counter;\n    counter=0;\n \
    \  } \n   return results;\n}\n", "    let correct = game.filter(e => e === guess[0]);\n\
    \    let wrong = game.filter(e => e !== guess[0]);\n    let difference = wrong.map(e\
    \ => Math.abs(e - guess[0]));\n    return correct;\n}\n", "    const scores =\
    \ [];\n    for (let i = 0; i < game.length; i++){\n        if (game[i] === guess[i])\
    \ \n            scores.push(0);\n        else\n            scores.push(Math.abs(guess[i]\
    \ - game[i]));\n    }\n    return scores;\n}\n", "    let correct = []\n    game.forEach((s,i)\
    \ => {\n        correct.push(Math.abs(s - guess[i]))\n    })\n    return correct\n\
    }\n", "    game = game.slice();\n    guess = guess.slice();\n    let results =\
    \ [];\n    let i = 0;\n    while(game.length && guess.length){\n        if(game[i]\
    \ < guess[i]){\n            i++;\n        } else {\n            guess[i] = Math.abs(game[i]\
    \ - guess[i]);\n            results.push(guess[i]);\n            game[i] = 0;\n\
    \            guess[i] = 0;\n        }\n    }\n    i = guess.length ? guess.length\
    \ : 0;\n    while(game.length){\n        if(game[i] < guess[i]){\n           \
    \ guess[i] = game[i] - guess[i];\n            results.push(guess[i]);\n      \
    \      game[i] = 0;\n        }\n        i++;\n    }\n    results = results.reverse();\n\
    \    return results;\n}\n", "    return guess(game).map((v, i) => Math.abs(v -\
    \ guess(game)[i]))\n}\n", "  var myScore = game.reduce(function(a,b){return a+=b;},0);\n\
    \  var theirScore = guess.reduce(function(a,b){return a+=b;},0);\n  var correctness\
    \ = [];\n  for (var i = 0; i < game.length; i++){\n    if (game[i] == guess[i]){\n\
    \      correctness.push(0);\n    } else {\n      correctness.push(Math.abs(myScore\
    \ - theirScore));\n    }\n  }\n  return correctness;\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\nHere's my take on it. This is JavaScript and has some comments in-line\
    \ that may help you to follow along. The function expects two arrays of the same\
    \ length and returns an array of the same length with the results. You don't need\
    \ to worry about what happens if they are both empty because they are both arrays\
    \ of length 0.\n<code>", "  console.log(\"game: \", game);\n  console.log(\"guess:\
    \ \", guess);\n  \n  let gameScores = [];\n  let guessScores = [];\n  let scoreDiff\
    \ = [];\n  let currentIndex;\n  let currentGameScore;\n  let currentGuessScore;\n\
    \  \n  for (let i = 0; i < guess.length; i++){\n    currentGameScore = game[i];\n\
    \    currentGuessScore = guess[i];\n    currentIndex = i;\n    gameScores.push(currentGameScore);\n\
    \    guessScores.push(currentGuessScore);\n    scoreDiff.push(Math.abs(currentGameScore\
    \ - currentGuessScore));\n  }\n  \n  return scoreDiff;\n}\n", "    var score =\
    \ 0;\n    game.forEach(function(value, index){\n        if(value == guess[index])\n\
    \            score++;\n    });\n    return score;\n}\n", "    return game.map((g,i)=>{\n\
    \        let score = Math.abs(g-guess[i])\n        if (score==0) return 0\n  \
    \      return score\n    })\n}\n", "  // TODO: Implement\n}\n", "    const gameScores\
    \ = game.sort((a, b) => a - b);\n    const guessesScores = guess.sort((a, b) =>\
    \ a - b);\n    const guessesArray = Array.from(guessesScores);\n    const guessIndexCount\
    \ = guessesArray.length; //find number of guesses\n    const gameIndexCount =\
    \ gameScores.length; //find number of scores\n    let result = [];\n    let index\
    \ = 0;\n    let guessesValue = 0;\n    let gameValue = 0;\n    while(index < gameIndexCount){\n\
    \        guessesValue+=gameScores[index];\n        gameValue+=guessesValues[index];\n\
    \        if(gameValue === guessesValue){\n            result.push(0);\n      \
    \  }else{\n            result.push(Math.abs(gameValue - guessesValue));\n    \
    \    }\n        index++;\n    }\n    return result;\n}", "  var result = []\n\
    \  var i = 0;\n  var j = 0;\n  for (i; i < game.length; i++) {\n    result.push(game[i]\
    \ === guess[j]);\n    j++;\n    if (j === guess.length){\n      j = 0;\n    }\n\
    \  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
