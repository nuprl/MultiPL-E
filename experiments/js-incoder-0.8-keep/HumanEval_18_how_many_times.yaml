name: HumanEval_18_how_many_times
language: js
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
  \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
  xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
  \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
completions: ["    // if the substring does not exist, return 0\n    if(!is_string(substring))\
    \ return 0;\n\n    // if the string is empty, return 0\n    if(is_string(string)\
    \ && string.length == 0) return 0;\n\n    // initialize current and previous char\n\
    \    let cur = string[0];\n    let prev = string[string.length - 1];\n\n    //\
    \ initialize number of character found so far\n    let count = 1;\n\n    // iterate\
    \ through string\n    for(let i = 0; i < string.length; i++){\n        // check\
    \ if the current char is a substring of the previous char\n        if(substring.indexOf(cur)\
    \ >= 0 && prev.indexOf(cur) < 0){\n            // increment count by 1\n     \
    \       count++;\n\n            // update the current and previous char\n    \
    \        cur = string[i];\n            prev = string[string.length - 1];\n   \
    \     }\n    }\n\n    return count;\n}\n", "\tvar count = 0;\n\tvar pos = 0;\n\
    \twhile(true){\n\t\tpos = string.indexOf(substring, pos);\n\t\tif(pos == -1){\n\
    \t\t\treturn count;\n\t\t}\n\t\tcount++;\n\t\tpos += substring.length;\n\t}\n}",
  "    let count = 0;\n    for (let i = 0; i < string.length; i++){\n        let currentChar\
    \ = string[i];\n        if (currentChar === substring[0]){\n            let foundSubstring\
    \ = true\n            for (let j = 0; j < substring.length; j++){\n          \
    \      if (currentChar !== substring[j]) {\n                    foundSubstring\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (foundSubstring){\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}", "    var count = 0, pos = 0;\n    for(var i\
    \ = 0; i < string.length; i++){\n        while(string.charAt(i) === substring.charAt(pos)){\n\
    \            count++;\n            pos++;\n        }\n        if(pos !== substring.substr(0,\
    \ i).length){\n            count = 0;\n        }\n    }\n    return count;\n}\n",
  "    var n = string.length;\n    var count = 0;\n    for(var i = 0; i < n; i++){\n\
    \        if(string.charAt(i) === substring.charAt(0)){\n            if(substring.charAt(1)\
    \ === string.charAt(i+1)){\n                count++;\n                i++;\n \
    \           }else if(substring.charAt(1) !== string.charAt(i+1)){\n          \
    \      count+=2;\n                i++;\n            }\n        }else if(string.charAt(i)\
    \ !== substring.charAt(0)){\n            count+=1;\n        }\n    }\n    return\
    \ count;\n}\n", "    string = string.split(substring);\n    for(var i = 0; i <\
    \ string.length; i++){\n        if(string.length > 1){\n            if(string[i]\
    \ !== string[string.length - 1])\n                return string.length - 1;\n\
    \        }\n    }\n    return 0;\n}\n", "    return string.match(new RegExp(substring,'g')).length;\
    \ //return the count of any match\n}", "  let count = 0;\n  \n  for (let i = 0;\
    \ i < string.length; i++){\n    let index = string.indexOf(substring, i);\n  \
    \  \n    if (index !== -1){\n      count++;\n      i = index;\n    }\n  }\n  \n\
    \  return count;\n}\n", "  let count_of_substring = 0;\n  for(let i=0; i<string.length;\
    \ i++){\n    if(string.substring(i, i + substring.length) == substring){\n   \
    \   count_of_substring++;\n    }\n  }\n  return count_of_substring;\n}\n", " \
    \ var count = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.substr(0,\
    \ i).indexOf(substring) !== -1){\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "    var count = 0;\n    for (var i=0; i<string.length; i++){\n        if\
    \ (string[i] === substring){\n            count++;\n        }\n        else if\
    \ (string.slice(0, i).indexOf(string) === 0 &&\n                 string.slice(i).indexOf(substring)\
    \ === 0 &&\n                 string.slice(i + 1).indexOf(string) === 0){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n\n", "    var count\
    \ = 0, index = 0, length = string.length;\n    while(index < length){\n      \
    \  if (string.substr(index, substring.length) === substring) count++;\n      \
    \  index++;\n    }\n    return count;\n}\n", "    var count = 0;\n    var start_index\
    \ = 0, end_index = 0;\n    for(var i = 0; i < string.length; i++){\n        start_index\
    \ = end_index;\n        end_index = i;\n        for(var j = 0; j < substring.length;\
    \ j++){\n            if(string[i + j] !== substring[j]){\n                end_index\
    \ = i;\n                break;\n            }\n        }\n        if(end_index\
    \ > start_index){\n            count++;\n            i = start_index;\n      \
    \  }\n    }\n    return count;\n}\n", "  var count = 0;\n  for(var i=0; i<string.length;\
    \ i++){\n    count += string.indexOf(substring, i) !== -1? 1 : 0\n  }\n  return\
    \ count\n}", "    return string.split(substring).length - 1;\n}\n", "  let substring_len\
    \ = 1\n  if (substring.includes('a')) {\n    substring_len = 2\n  } else if (substring.includes('b'))\
    \ {\n    substring_len = 3\n  } else if (substring.includes('c')) {\n    substring_len\
    \ = 4\n  } else if (substring.includes('d')) {\n    substring_len = 5\n  } else\
    \ if (substring.includes('e')) {\n    substring_len = 6\n  }\n  let substring_times\
    \ = 1\n  for (let i = 0; i < string.length; i++){\n    if (string.charAt(i) ==\
    \ substring.charAt(0)){\n      substring_times = substring_times + 1\n    }\n\
    \  }\n  return substring_times * substring_len\n}\n", "    if (string.length ==\
    \ 0) return 0;\n    if (substring == '') return 1;\n    var count = 0;\n    var\
    \ i = 0;\n    var j = string.length;\n    while (i < j) {\n        var k = i;\n\
    \        while (k <= j && string.charAt(k) == substring.charAt(i)) {\n       \
    \     ++k;\n        }\n        if (k >= j) {\n            if (k > j) {\n     \
    \           j = k;\n            }\n            count++;\n            i++;\n  \
    \      }\n    }\n    return count;\n}\n", "    var count = 0;\n    var start =\
    \ 0;\n    var end = string.length - substring.length;\n    while(start < string.length){\n\
    \        if(string.substr(start, substring.length) == substring)\n           \
    \ count += 1;\n        start += 1;\n    }\n    return count;\n}\n", "  var count\
    \ = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.indexOf(substring,\
    \ i) !== -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n", "  var count\
    \ = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.charAt(i) ==\
    \ substring.charAt(0))\n      if (string.charAt(i) == substring.charAt(1))\n \
    \       count++;\n    if (string.charAt(i) != substring.charAt(0))\n      count++;\n\
    \  }\n  return count;\n}\n", "\tvar i, count = 0\n\tfor(i=0; string.length > substring.length;\
    \ i++)\n\t\tif(string.substr(i, substring.length) === substring)\n\t\t\tcount++\n\
    \treturn count\n}\n", "    var count = 0;\n    for(var i=0; i<string.length; i++){\n\
    \        if(string[i] == substring[0])\n            count++;\n        else if(string[i]\
    \ != substring[0])\n            break;\n    }\n    return count;\n}\n", "  var\
    \ count = 0;\n  for(var i=0; i<string.length; i++){\n    var substring_length\
    \ = substring.length;\n    if(string.charAt(i) !== substring.charAt(i)){\n   \
    \   substring_length = 0;\n      count += 1;\n    } else if(string.charAt(i) ===\
    \ substring.charAt(i) && substring_length > 0){\n      count += 1;\n      substring_length--;\n\
    \    }\n  }\n  return count;\n}\n", "    var counter = 0;\n    for(var i = string.length-1;\
    \ i >= 0; i--){\n        if(string.charAt(i) == substring){\n            counter++;\n\
    \        }\n        if(string.charAt(i) == substring.toUpperCase()){\n       \
    \     counter++;\n        }\n        if(string.charAt(i) == substring.toLowerCase()){\n\
    \            counter++;\n        }\n    }\n    return counter;\n}\n", "    if(string\
    \ == null || substring == null){\n        return 0;\n    }\n    var count = 0;\n\
    \    for(var i = 0, len = string.length; i < len; i++){\n        if(string.substr(i,\
    \ substring.length) == substring){\n            count += 1;\n        }\n    }\n\
    \    return count;\n}\n", "  var occurrences = 0;\n  for (var i = 0; i < string.length;\
    \ i++){\n    if (string.substr(i, substring.length) === substring){\n      occurrences++;\n\
    \    }\n  }\n  return occurrences;\n}\n", "  // if the substring is not found\
    \ in the string\n  if (string.indexOf(substring) === -1){\n    // return 0\n \
    \   return 0;\n  }\n  // else return the length of the string\n  return string.length;\n\
    }\n", "    string = string.toLowerCase();\n    substring = substring.toLowerCase();\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string.substr(i, substring.length)\
    \ === substring){\n            return i;\n        }\n    }\n    return string.length;\n\
    }", "\tvar i = 0;\n\twhile ( i < string.length ){\n\t\tif( string.substr(i, substring.length)\
    \ === substring ){\n\t\t\ti++;\n\t\t}\n\t\telse break;\n\t}\n\treturn i;\n}\n",
  "    // Count overlapping occurrences of substring\n    if(!substring.length) return\
    \ 0;\n    if(!string.length) return 0;\n    var count = 0;\n    var j = 0;\n \
    \   while(j < string.length){\n        var i = string.lastIndexOf(substring, j);\n\
    \        if(i == -1) break;\n        j += substring.length;\n        count++;\n\
    \    }\n    return count;\n}\n", "    var len = string.length;\n    var count\
    \ = 0;\n    for(var i = 0; i < len; i++){\n        var char = string.charAt(i);\n\
    \        if(char == substring[0]){\n            count++;\n        }\n        if(char\
    \ == substring[1]){\n            count++;\n        }\n        if(char == substring[2]){\n\
    \            count++;\n        }\n        if(char == substring[3]){\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nvar count_overlaps =\
    \ how_many_times;\n\nvar is_valid_email = function(email){\n    var re = /^(([^<>()[\\\
    ]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\\
    .[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\
    \    return re.test(String(email).toLowerCase());\n}\n", "    var count = 0;\n\
    \    var l = string.length;\n    while(l > 0){\n        // Count the current character,\
    \ and how many times it occurs in the original string.\n        var current_char\
    \ = string.charAt(l-1);\n        count = substring.indexOf(current_char) + 1;\n\
    \        \n        // If the substring exists, increment the counter, otherwise\
    \ stop looping\n        if (count > 0){\n            l--;\n        } else {\n\
    \            break;\n        }\n    }\n    return count;\n}\n", "    for(var i\
    \ = 0, count = 0;; i++){\n        if(string.indexOf(substring, i) == i){\n   \
    \         count += 1;\n        }\n        if(count > substring.split(\"\").length){\n\
    \            return count;\n        }\n    }\n    return -1;\n}\n", "\tvar count\
    \ = 0;\n\tstring = string.toLowerCase();\n\tsubstring =substring.toLowerCase();\n\
    \t\n\tfor(var i=0; i < string.length; i++){\n\t\tif(string[i] == substring[i])\n\
    \t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\n<|/ file source=github dstars=2 filename=string_toolbox.js\
    \ |>", "    var count = 1;\n    for(var i=0; i<string.length; i++){\n        if(string.substr(i,\
    \ substring.length) == substring){\n            count++;\n        }\n    }\n \
    \   return count;\n}\n", "    if(string == '' || substring == '') return 0\n \
    \   \n    var count = 0, substring_index = 0\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.charAt(i) == substring.charAt(substring_index)){\n\
    \            substring_index++\n        }\n        else{\n            if(substring_index\
    \ > 0){\n                substring_index = 0\n                count++\n      \
    \      }\n        }\n    }\n    return count\n}\n", "    let count = 0\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === substring[0])\
    \ {\n            if (string[i - 1] === substring[1]) {\n                count++\n\
    \            }\n            else if (string[i - 1] === substring[2]) {\n     \
    \           count++\n                count++\n            }\n            else\
    \ if (string[i - 1] === substring[3]) {\n                count++\n           \
    \     count++\n                count++\n            }\n            else {\n  \
    \              return -1\n            }\n        }\n    }\n    return count\n\
    }\n", "    var count = 0;\n    var pos = 0;\n    while ((pos = string.indexOf(substring,\
    \ pos)) !== -1){\n        count++;\n        pos += substring.length;\n    }\n\
    \    return count;\n}\n", "    var count = 0;\n    var start_index;\n    for(var\
    \ i = 0; i <= string.length; i++){\n        if(string.substr(i, substring.length)\
    \ == substring){\n            count++;\n            start_index = i;\n       \
    \ }\n    }\n    return count;\n}\n", "  \n  var times = 0;\n  \n  for(var i =\
    \ 0; i <= string.length; i++){\n    \n    if(string.substr(0, i + sub_string.length)\
    \ == sub_string){\n      \n      times++;\n      \n      if(string.substr(i +\
    \ sub_string.length, string.length) == substring){\n        \n        times++;\n\
    \      }\n    }\n  }\n  return times;\n}\n", "    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.indexOf(substring, i) > -1){\n            return string.split(substring).length\
    \ - 1;\n        }\n    }\n    return 0\n}\n", "    return string.split(substring).length\
    \ - 1;\n}", "    var times = 0;\n    for(var i=0;i<string.length;i++){\n     \
    \   if(string.substr(i,substring.length) == substring) times++;\n    }\n    return\
    \ times;\n}", "\tvar count = 0,\n\t\tstart = 0,\n\t\tend = string.length;\n\t\n\
    \twhile(start <= end){\n\t\tcount += string.substring(start, end).search(substring);\n\
    \t\tstart = end + 1;\n\t\tend += 1;\n\t}\n\treturn count;\n}\n", "  // console.log('substring:\
    \ ' + substring);\n  // console.log('string: ' + string);\n  //Return the length\
    \ of substring in string, or 0 if substring is not in string\n  var count = 0;\n\
    \  var position = 0;\n  var start_position = -1;\n  var end_position = -1;\n \
    \ while (position < string.length) {\n    start_position = string.indexOf(substring,\
    \ position);\n    end_position = start_position;\n    position += start_position;\n\
    \    // console.log('start_position: ' + start_position);\n    // console.log('end_position:\
    \ ' + end_position);\n    count = (end_position - start_position) + 1;\n    //\
    \ console.log('count: ' + count);\n  }\n  // console.log('count: ' + count);\n\
    \  return count;\n}\n", "  return string.match(new RegExp(substring, 'g')) ||\
    \ [];\n}", "  return string.match(new RegExp(substring, 'g')) - 1;\n}", "  var\
    \ substring_length = substring.length;\n  var count_length = 0;\n  var index =\
    \ 0;\n  var count = 0;\n  while (index < string.length) {\n    if (string.substring(index,\
    \ index + substring_length) == substring) {\n      count_length++;\n    }\n  \
    \  index += substring_length;\n  }\n  return count;\n}\n", "\tvar count = 0;\n\
    \t\n\tfor (var i = 0; i < string.length; i++){\n\t\tif (string[i] == substring){\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (string[i].indexOf(substring) != -1){\n\t\t\
    \tcount += string[i].split(substring).length - 1;\n\t\t}\n\t}\n\t\n\treturn count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++){\n    \
    \    if (string.substring(i, i+substring.length) === substring){\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n", "\tvar count= 0;\n\tvar\
    \ i, j;\n\tfor(i = 0; i < string.length; i++){\n\t\tj = string.indexOf(substring,\
    \ i);\n\t\tif(j >= 0){\n\t\t\tcount++;\n\t\t\ti = j+1;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    var count = 0;\n    var index;\n    for(var i = 0; i < string.length;\
    \ i++){\n        index = string.indexOf(substring, i);\n        if(index != -1){\n\
    \            count++;\n            i = index + substring.length;\n        }else{\n\
    \            break;\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    for(var i=0; i<string.length; i++){\n        if(string.substr(0, i+1)\
    \ == substring)\n            count++;\n    }\n    return count;\n}\n\nvar search_template\
    \ = \"<ul style='list-style-type:none'><li class='search-result'><span class='search-result-title'>{title}</span><span\
    \ class='search-result-subtitle'>{subtitle}</span></li></ul>\";\n", "\tlet count\
    \ = 0;\n\tfor(let index = 0; index < string.length; index++){\n\t\tif(string.substring(index,\
    \ index + substring.length) === substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string.substr(i, substring.length) === substring){\n            count++;\n\
    \        }\n    }\n    return count;\n}", "    var substring_length = substring.length;\n\
    \    var string_length = string.length;\n    var count = 0;\n    var i = 0;\n\
    \    for(i=0;i<string_length;i++){\n        if(string[i] == substring[0]){\n \
    \           count++;\n        }\n        if(string[i] == substring[1]){\n    \
    \        count++;\n        }\n        if(string[i] == substring[2]){\n       \
    \     count++;\n        }\n        if(string[i] == substring[3]){\n          \
    \  count++;\n        }\n        if(string[i] == substring[4]){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    var result = 0;\n    var length\
    \ = string.length;\n    var index;\n    for(index = 0; index < length; ++index){\n\
    \        if(string.indexOf(substring, index) !== -1){\n            ++result;\n\
    \        }\n    }\n    return result;\n}\n", "\tvar len = string.length,\n\t \
    \   substring = substring.toLowerCase(),\n\t    count = 0;\n\t\n\tfor(var i =\
    \ 0, end = string.length; i < end; i++){\n\t\tif(string.charAt(i).toLowerCase()\
    \ === substring) count++;\n\t\telse if(!string.charAt(i).toLowerCase().endsWith(substring))\
    \ count--;\n\t}\n\treturn count;\n}\n\n", "  string = string.toLowerCase();\n\
    \  substring = substring.toLowerCase();\n  var count = 0;\n  if(string.indexOf(substring)\
    \ != -1)\n    count++;\n  for(var i = 0; i < substring.length; i++){\n    if(string.indexOf(substring.substr(0,\
    \ i + 1)) != -1)\n      count++;\n  }\n  return count;\n}\n", "  let n_times =\
    \ 0;\n  for (let i=0; i<string.length; i++){\n    if (string.substring(i, i +\
    \ substring.length) == substring) n_times++;\n  }\n  return n_times;\n}\n", " \
    \ var count = 0;\n  for (var i = 0, length = string.length; i < length; i++){\n\
    \    if (string.substr(i, substring.length) == substring){\n      count++;\n \
    \   }\n  }\n  return count;\n}\n", "  for(var i = 0; i < string.length; i++){\n\
    \    if(string.indexOf(substring, i) == i){\n      return i;\n    }\n  }\n  return\
    \ -1;\n}\n", "    // Create an array to hold our results\n    var times = 0;\n\
    \    // Iterate over each character in the string\n    for(var i = 0; i < string.length;\
    \ i++){\n        // If the substring is a substring of the current character,\
    \ count it!\n        if(string.indexOf(substring, i) > -1){\n            times++;\n\
    \        }\n    }\n    return times;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not answer OP's question. If your answer is the correct one, can you make it\
    \ more clear?\n<|/ c |>\n<| c |>\nThis does answer the OP's question as stated,\
    \ and it also works as expected on jsfiddle https://jsfiddle.net/q3zs7yq7/\n<|/\
    \ c |>\n<| c |>\nI agree with you that OP's question is not very clear but this\
    \ answer is very helpful as it explains how it works, thanks.\n<|/ c |>\n<| c\
    \ |>\nThis does not answer the question. `how_many_times('aba', 'c')` returns\
    \ 1, while it should return 2. See [my answer](http://stackoverflow.com/a/41135147/95735)\
    \ for the correct solution.\n<|/ c |>\n<| a tags=javascript,arrays dscore=5 |>\n\
    My understanding is that you are looking for a way to count the number of occurrences\
    \ of a substring in a string.\n<code>", "  var count = 0;\n  \n  if (string.length\
    \ == 0){\n    return 0\n  } \n  \n  if (substring.length == 0){\n    return string.length\n\
    \  } \n  \n  for (var i = 0; i < string.length; i++){\n    if (string[i] === substring[0]){\n\
    \      count += 1;\n      if (i < string.length-1){\n        for (var j = 0; j\
    \ < substring.length; j++){\n          if (string[i + j] === substring[j]){\n\
    \            count += 1;\n          }\n        }\n      }\n    }\n  }\n  \n  return\
    \ count;\n}\n", "  var count = 0;\n  for (var i=0; i<string.length; i++){\n  \
    \  if (string.indexOf(substring, i) > -1) count++;\n  }\n  return count;\n}\n",
  "    if (string == substring) return 1;\n    var i = 0;\n    while(i < string.length){\n\
    \        if (string.substr(i, substring.length) == substring) return i+1;\n  \
    \      ++i;\n    }\n    return 0;\n}\n", "    var cnt = 0;\n    var substr_length\
    \ = 0;\n    if (string == \"\"){\n        return 0;\n    }\n\n    //Handle the\
    \ case if only one character is given\n    if (string.length <= 1){\n        return\
    \ 0;\n    }\n\n    for(var i = 0; i < string.length; i++){\n        substr_length\
    \ = substring.length;\n        for(var j = 0; j < substr_length; j++){\n     \
    \       //If character at the current index is equal to the given substring's\
    \ character, increment the count\n            if(string.charAt(i) == substring.charAt(j)){\n\
    \                cnt += 1;\n            }\n        }\n    }\n    return cnt;\n\
    }\n", "\tlet count = 0, index = 0;\n\twhile(true){\n\t\tindex = string.indexOf(substring,\
    \ index + 1);\n\t\tif(index < 0) break;\n\t\tcount++;\n\t}\n\treturn count;\n\
    }\n", "  var count = 0;\n  var i = string.indexOf(substring);\n  if (i == -1){\n\
    \    return 0;\n  }\n  while (i != -1){\n    count++;\n    i = string.indexOf(substring,\
    \ i+1);\n  }\n  return count;\n}\n", "    var count = 0;\n    string = string.toLowerCase();\n\
    \    substring = substring.toLowerCase();\n    for(var i = 0 ;i < string.length\
    \ ;i++){\n        if((string.indexOf( substring , i ) === i )){\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n", "  var count = 0;\n  var start\
    \ = 0;\n  var end = string.length;\n\n  while(end > start && end > string.length)\
    \ {\n    count += string.indexOf(substring, start) - start;\n    start++;\n  }\n\
    \n  return count;\n}\n</code></pre>\n        </article>\n    </section>\n\n\n\n\
    \n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a\
    \ href=\"Fpjam.Calculator.html\">Calculator</a></li><li><a href=\"Fpjam.Keyboard.html\"\
    >Keyboard</a></li><li><a href=\"Fpjam.Options.html\">Options</a></li></ul><h3>Namespaces</h3><ul><li><a\
    \ href=\"Fpjam.html\">Fpjam</a></li></ul>\n</nav>\n\n<br class=\"clear\">\n\n\
    <footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Mon Oct 19 2018 11:09:06 GMT+0100 (Central European Standard\
    \ Time)\n</footer>\n\n<script> prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"\
    > </script>\n</body>\n</html>\n\n<|/ file source=github filename=Fpjam.html |><|endofmask|>ext=.html\
    \ dstars=0 |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    \            \n            \n                \n            \n            \n  \
    \          \n            \n            \n            \n            \n        \
    \    \n            \n            \n            \n            \n              \
    \  \n                    \n                        \n                        \n\
    \                        \n                        \n                        \n\
    \                        \n                        \n                        \n\
    \                        \n                            \n                    \
    \            \n                                    <a href=\"../classes/Fpjam.StateManager.html\"\
    >Fpjam.StateManager</a>\n                                \n                  \
    \          \n                        \n                    \n                \n\
    \                \n                \n\n            \n        \n    \n    <article\
    \ id=\"keybindings\" class=\"fp-content\">\n        <header aria-labelledby=\"\
    keybindings-title\">\n            <div class=\"fp-page-title\"> <span class=\"\
    fa fa-keyboard\"></span> Keyboard shortcuts </div>\n        </header>\n      \
    \  <div class=\"fp-box\">\n            <div class=\"fp-box-col\">\n          \
    \      <ul>\n                    \n                    \n                    \
    \    \n                    \n                    \n                        \n\
    \                        <li>\n                            <span class=\"fa fa-keyboard-o\"\
    \ aria-hidden=\"true\"></span>\n                            <span>Shortcut : </span>\n\
    \                            <span>Ctrl + B</span>\n                        </li>\n\
    \                    \n                    \n                        \n      \
    \                  <li>\n                            <span class=\"fa fa-keyboard-o\"\
    \ aria-hidden=\"true\"></span>\n                            <span>Shortcut : </span>\n\
    \                            <span>Ctrl + Shift + B</span>\n                 \
    \       </li>\n                    \n                    \n                  \
    \      \n                    \n                    \n                        \n\
    \                        <li>\n                            <span class=\"", " \
    \   if(string.length <= substring.length){\n        return 0;\n    }\n    var\
    \ count = 0; //The current count of how many times a given substring can be found\
    \ in the original string\n    for(var i = 0; i <= string.length - substring.length;\
    \ i++){\n        if(string.substring(i, i + substring.length) === substring){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var counter\
    \ = 0;\n    \n    for(var i = 0, len = string.length; i < len; i++){\n       \
    \ if(string.charAt(i) === substring.charAt(0)){\n            counter += 1;\n \
    \           \n            if(string.charAt(i) === substring.charAt(1)){\n    \
    \            counter += 1;\n            }\n        }\n    }\n    \n    return\
    \ counter;\n}\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"\
    a\", \"a\")\n</cell>\n<text>\nHow many times the word \"apple\" occurs?\n\n\n\
    </text>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"apple\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"pear\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"banana\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"app\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"ap\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"a\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"aple\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"aple\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"appl\"\
    )\n</cell>\n<code language=conda-env-exptt-py>\nhow_many_times(\"apple\", \"aples\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that will return a set of unique\
    \ words from a string of text.\n\nThe function should ignore all whitespace and\
    \ special characters. \nIt should return a list of unique words.\n\n>>> unique_words('Hello\
    \ world and Hello')\n['Hello', 'world']\n\n</text>\n<code language=conda-env-exptt-py>\n\
    def unique_words(string){\n    \n    unique = []\n    \n    for(var i = 0, len\
    \ = string.length; i < len; i++){\n        \n        var word = string.charAt(i).toLowerCase();\n\
    \        \n        if(unique.indexOf(word) === -1){\n            unique.push(word);\n\
    \        }\n    }\n    \n    return unique;\n}\n</cell>\n<code language=conda-env-exptt-py>\n\
    unique_words(\"Hello world and Hello\")", "    var foundCount = 0;\n    var index\
    \ = 0;\n    while(string[index] !== substring[index]){\n        if(string[index++]\
    \ === substring[index]){\n            foundCount++;\n        }else{\n        \
    \    foundCount = 0;\n        }\n    }\n    return foundCount;\n}\n", "    if\
    \ ( string == null || substring == null ) return 0;\n    return ( string.split(substring).length\
    \ - 1 );\n}\n", "  // Remove all instances of substring and return\n  string =\
    \ string.replace(substring, '');\n  return string.length;\n}\n", "  return string.split(substring).length\
    \ - 1;\n}\n", "    let counter = 0;\n    for(const char of string){\n        if(char\
    \ === substring){\n            counter++;\n        }\n    }\n    return counter;\n\
    }\n", "  var count = 0;\n  for(var i = 0; i< string.length; i++){\n    if(string.charAt(i)\
    \ == substring.charAt(0)){\n      if(string.charAt(i+1) == substring.charAt(1)){\n\
    \        if(string.charAt(i+2) == substring.charAt(2)){\n          if(string.charAt(i+3)\
    \ == substring.charAt(3)){\n            count++;\n          }\n        }\n   \
    \   }\n    }\n  }\n  return count;\n}\n", "    \n    if(string.length == 0) return\
    \ 0;\n    if(string.length == 1) return string.length; //If the string is length\
    \ 1, there is only 1 character in the string and we don't need to do anything.\n\
    \n    var count = 0, length = 0;\n    \n    //Loop through the string and find\
    \ all the possible substrings and how many times each one occurs. \n    for(var\
    \ i=0; i< string.length; i++){\n        if(string.substr(i, substring.length)\
    \ == substring){\n            count++;\n            length += string.length -\
    \ i; //Keep track of the total length of the substring\n        }\n    }\n   \
    \ \n    return length;\n}\n</cell>\n<cell>\nhow_many_times('', 'a');\n</cell>\n\
    <cell>\nhow_many_times('aaa', 'a');\n</cell>\n<cell>\nhow_many_times('aaaa', 'aa');\n\
    </cell>\n<text>\nProblem 3\nWrite a Python function that takes a string as input\
    \ and returns a new string with all the \"a\"s removed.\n\n>>> remove_all(\"aaaaaa\"\
    )\n\"aaaa\"\n>>> remove_all(\"aaaa\")\n\"a\"\n>>> remove_all(\"a\")\n\"\"\n>>>\
    \ remove_all(\"\")\n\"\"\n>>> remove_all(\"a\")\n\"\"\n>>> remove_all(\"bbbb\"\
    )\n\"b\"\n>>> remove_all(\"bbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbb\")\n\"b\"\
    \n>>> remove_all(\"bbbbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbbbbb\")\n\"b\"\n\
    >>> remove_all(\"bbbbbbbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbb\")\n\"\
    b\"\n>>> remove_all(\"bbbbbbbbbbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbb\"\
    )\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbbbb\"\
    )\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbbbbb\")\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbbbbbb\"\
    )\n\"b\"\n>>> remove_all(\"bbbbbbbbbbbbbbbbbbbb\")\n\"b\"\n>>> remove_all(\"aaaaa\"\
    )\n\"\"\n>>> remove_all(\"aaaa\")\n\"\"\n>>> remove_all(\"a\")\n\"\"\n>>> remove_all(\"\
    \")\n\"\"\n>>> remove_all(\"aaaaa\")\n\"\"\n>>> remove_all(\"a\")\n\"\"\n>>> remove_all(\"\
    \")\n\"\"\n>>> remove_all(\"aaaa\")\n\"\"\n>>> remove_all(\"a\")\n\"\"\n>>> remove_all(\"\
    \")\n\"\"\n>>> remove_all(\"aaaaa\")\n\"\"\n>>> remove_all(\"a\")\n\"\"\n>>> remove_",
  "    // Create array with all possible substrings\n    var substrings = Array.from(new\
    \ Set(string.split('')));\n    var result = 0;\n    for(var i = 0; i < substrings.length;\
    \ i++){\n        if(string.includes(substrings[i])){\n            result++;\n\
    \        }\n    }\n    return result;\n}\n", "\tvar matches = string.match(new\
    \ RegExp(substring));\n\treturn matches ? matches.length : 0;\n}\n", "\tvar count\
    \ = 0;\n\tfor (var i = 0; i < string.length; i++){\n\t\tvar c = string.charCodeAt(i);\n\
    \t\tvar d = substring.charCodeAt(0);\n\t\tif (c >= d){\n\t\t\tcount++;\n\t\t}\
    \ else if (c < d){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n", "  var\
    \ count = 0;\n  for(var i=0; i<string.length; i++){\n    if(string.indexOf(substring,\
    \ i) > -1){\n      count += 1;\n    }\n  }\n  return count;\n}\n\n", "  var count\
    \ = 0;\n  var index = 0;\n  while (index < string.length) {\n    if (string.substr(index,\
    \ substring.length) === substring) {\n      count++;\n    }\n    index++;\n  }\n\
    \  return count;\n}\n", "\tlet n = string.length;\n\tlet m = substring.length;\n\
    \tlet count = 0;\n\t\n\tlet i;\n\t\n\tfor(i = 0; i < m; i++){\n\t\tif(string.substr(0,\
    \ m) === substring){\n\t\t\tcount++;\n\t\t\tstring = string.substr(m);\n\t\t}\n\
    \t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn count;\n}\n", "\tlet count =\
    \ 0;\n\tlet stringArray = string.split('');\n\tlet substringArray = substring.split('');\n\
    \tfor( let i = 0; i < substringArray.length; ++i ){\n\t\tif( stringArray[i] !=\
    \ substringArray[i] ){\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}\n", " \
    \   var count = 0;\n    for(var i = string.length-1; i >= 0; i--){\n        if(string.substr(i,\
    \ substring.length) == substring){\n            count++;\n        }\n    }\n \
    \   return count;\n}\n", "  let count = 0;\n  for (let i=0; i<string.length; i++){\n\
    \    if (string.substring(0, i+1).includes(substring)){\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  var count = 0\n  for (var i = 0; i < (string.length\
    \ - substring.length); i++){\n    if (string[i + substring.length] === substring)\n\
    \      count++\n  }\n  return count\n}\n", "    var count = 0, i;\n    for (i\
    \ = 0; i <= string.length; i++){\n        count += string.indexOf(substring, i)\
    \ != -1;\n    }\n    return count;\n}\n", "    var count = 0;\n    var start =\
    \ 0;\n    var end = string.length;\n    while(start < end){\n        var middle\
    \ = start + Math.floor((end - start)/2);\n        if(string.substring(middle).search(substring)\
    \ != -1){\n            count++;\n            if(string.substring(middle+1).search(substring)\
    \ != -1){\n                count++;\n            }\n            start = middle+1;\n\
    \        }else{\n            start = middle;\n        }\n    }\n    return count;\n\
    }\n", "\treturn string.match(new RegExp('\\\\b'+substring+'\\\\b')) || 0;\n}\n",
  "    if(string == substring){\n        return 0;\n    }\n    let i = 0;\n    for(i\
    \ = 0; i < string.length; i++){\n        if(string[i] === substring[0]){\n   \
    \         if(string[i + 1] === substring[1]){\n                i++;\n        \
    \    }\n            else{\n                return i+1;\n            }\n      \
    \  }\n        else{\n            if((string.length - i) > substring.length){\n\
    \                return string.length - substring.length;\n            }\n   \
    \     }\n    }\n    return string.length;\n}\n", "\tlet result = 0\n\tfor (let\
    \ i = 0; i < string.length; i++){\n\t\tlet sub = string[i]\n\t\tif (sub === substring){\n\
    \t\t\tresult++\n\t\t}\n\t\tif (sub.length === substring.length){\n\t\t\tresult\
    \ += string.slice(i).indexOf(sub)\n\t\t}\n\t}\n\treturn result\n}\n", "\treturn\
    \ string.split(substring).length - 1;\n}\n", "  let count = 0;\n  let substringLen\
    \ = substring.length;\n  for(let i = 0; i < string.length; i++){\n    for(let\
    \ j = 0; j < substringLen; j++){\n      if(string.charCodeAt(i) == substring.charCodeAt(j)){\n\
    \        count += 1;\n      }\n    }\n  }\n  return count;\n}\n", "    var count\
    \ = 0;\n    var i = 0;\n    var original_string = string;\n\n    while(string){\n\
    \        if(string.length <= substring.length) break;\n        if(string.substring(i,\
    \ i+substring.length) == substring){\n            count++;\n            i += substring.length\
    \ - 1;\n        }\n        i++;\n        string = '' + string;\n    }\n\n    return\
    \ count;\n}\n", "    var times = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string.indexOf(substring, i) !== -1){\n            times++;\n    \
    \    }\n    }\n    return times;\n}\n", "    var sum = 0;\n    for(var i=0; i<string.length;\
    \ i++){\n        for(var j=0; j<substring.length; j++){\n            if(string[i]\
    \ == substring[j]){\n                sum++;\n                if(sum > substring.length){\n\
    \                    return sum;\n                }\n            }\n        }\n\
    \    }\n    return sum;\n}\n", "  if (string == null || string == \"\") return\
    \ 0;\n  if (substring == null || substring == \"\") return string;\n  //count\
    \ the number of times substring appears in the string\n  var count = 0;\n  for\
    \ (var i = 0; i < string.length; i++){\n    if (string.substr(i, substring.length)\
    \ == substring){\n      count++;\n    }\n  }\n  return count;\n}\n", "    var\
    \ count = 0;\n    for(var i=0; i < string.length; i++){\n        if(string.charAt(i)\
    \ == substring.charAt(0)){\n            count += how_many_times(string.substring(i+1),\
    \ substring);\n        }\n        if(string.charAt(i) != substring.charAt(0)){\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\n", "  var count_string\
    \ = 0,\n      count_substring = 0;\n  for (var i = 0; i < string.length; i++){\n\
    \    if (string.substring(i, i + substring.length) == substring){\n      count_substring++;\n\
    \    }\n    if (string.substring(0, i+substring.length) == substring){\n     \
    \ count_string++;\n    }\n  }\n  return count_string + count_substring;\n}\n",
  "    var letters = 0;\n    for(var i=0; i<string.length; i++){\n        if(string[i]\
    \ === substring[0]){\n            letters++;\n            if(string[i] === substring[1]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[2]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[3]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[4]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[5]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[6]){\n\
    \                letters++;\n            }\n            if(string[i] === substring[7]){\n\
    \                letters++;\n            }\n        }\n    }\n    return letters;\n\
    }\n", "    return string.split(substring).length - string.split(substring).indexOf(substring);\n\
    }\n\n", "    var count = 0, pos = 0;\n    while((pos = string.indexOf(substring,\
    \ pos)) >= 0){\n        pos += substring.length;\n        count += 1;\n    }\n\
    \    return count;\n}\n", "  var count = 0;\n  for (var i = 0; i < string.length;\
    \ i++){\n    if (string[i] == substring[0]){\n      count += substring.length;\n\
    \      for(var j = i + 1; j < string.length; j++){\n        if(string[j] == substring[1]){\n\
    \          count += substring.length;\n          i++;\n          j--;\n      \
    \  }\n      }\n    }\n  }\n  return count;\n}\n", "\tlet count = 0;\n\tlet pos\
    \ = 0;\n\twhile((pos = string.indexOf(substring, pos)) != -1){\n\t\tcount += 1;\n\
    \t\tpos += substring.length;\n\t}\n\treturn count;\n}\n", "    var count = 0;\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string.indexOf(substring,\
    \ i) != -1){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "\treturn string.length - string.replace(new RegExp(substring, 'gi'), '').length;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++){\n    \
    \    for (let j = 0; j < substring.length; j++){\n            if (string[i] ==\
    \ substring[j]){\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    string = str(string);\n    substring = str(substring);\n\
    \    return string.toLowerCase().split('').filter(function(letter){\n        return\
    \ letter.toLowerCase() == substring && letter != substring;\n    }).length;\n\
    }\n\n", "    if(string === substring) return 0;\n\n    var count_from_start =\
    \ 0;\n    var substring_index = 0;\n    var substring_length = substring.length;\n\
    \    \n    for(var i = 0; i < string.length; i++){\n        if(string[i] === substring[substring_index]){\n\
    \            count_from_start += 1;\n            substring_index += 1;\n     \
    \       if(substring_index === substring_length){\n                return count_from_start;\n\
    \            }\n        } else {\n            count_from_start += 1;\n       \
    \ }\n    }\n\n    return 0;\n}\n", "    var count = 0;\n    if(string == substring)\n\
    \        return 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.charAt(i)\
    \ == substring.charAt(0)){\n            if(string.charAt(i) == substring.charAt(1)){\n\
    \                count += 1;\n            }\n            count += how_many_times(string.substring(1,\
    \ i + 1), substring);\n        }\n    }\n    return count;\n}\n", "  let count\
    \ = 0;\n  string.split(substring).forEach(substr => {\n    count += string.split(substring).length\
    \ - 1;\n  });\n  return count;\n}\n", "  var count = 0;\n  for(var i=0; i<string.length;\
    \ i++){\n    count += string.indexOf(substring, i);\n    if(count >= substring.length)\
    \ break;\n  }\n  return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is\
    \ amazing solution!\n<|/ c |>\n<| a dscore=1 |>\nAs long as I understand your\
    \ question, this would work:\n<code>", "    var count = 0;\n    for(var i = 0;\
    \ i < string.length; i++){\n        var substring_index = string.indexOf(substring,\
    \ i);\n        if(substring_index != -1){\n            count++;\n            i\
    \ = substring_index;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    for(let i = string.length; i >= 0; i--){\n        if(string.substr(i,\
    \ substring.length) === substring){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "\tvar count = 0; //The number of times substring can\
    \ be found in string\n\t\n\tif (string == null || string == ''){\n\t\treturn count;\n\
    \t}\n\n\tif (substring == null || substring == ''){\n\t\treturn 0;\n\t}\n\t\n\t\
    if (string.indexOf(substring) > -1){\n\t\tcount++;\n\t\t\n\t\tstring = string.replace(substring,\
    \ ''); //Remove substring\n\t\t\n\t\tif (string == ''){\n\t\t\treturn count; \n\
    \t\t}\n\t\t\n\t\tcount = how_many_times(string, substring); //Recursion\n\t}\n\
    \t\n\treturn count;\n}\n", "    \n    var count = 0;\n    var index;\n\n    for(index\
    \ in string){\n        if(string.indexOf(substring, index + 1) >= 0){\n      \
    \      count++;\n        }\n    }\n\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ tags=arrays,javascript,string |>\n<| c |>\nThis is the best solution for me,\
    \ because it doesn't require you to import any libraries, and does not take O(n^2)\
    \ time (as some of the other solutions do)\n<|/ c |>\n<| a dscore=1 |>\nThis is\
    \ how I would approach it.\n<code>", "\tvar count = 0;\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tif(string.substring(0, i).includes(substring)){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  string = string.split(substring);\n  \n\
    \  var count = 0;\n  for(var i = 0;i < string.length; i++){\n    count = count\
    \ + string[i].split(substring).length - 1;\n  }\n  return count;\n}\n  ", "  let\
    \ count = 0;\n  for(let i = 0; i < string.length; i++){\n    count += string.indexOf(substring,\
    \ i) === i ? 1 : 0;\n  }\n  return count;\n}", "    var count = 0;\n    var substr_length\
    \ = string.length;\n    var substr_length_2 = substring.length;\n    var count\
    \ = 0;\n    var n = string.length;\n    var m = substring.length;\n    while(n\
    \ > m && n != 0){\n        if(string.charAt(n - 1) === substring.charAt(m - 1)){\n\
    \            n--;\n            m--;\n            count++;\n        }\n       \
    \ else{\n            n--;\n        }\n    }\n    return count;\n}", "    // console.log('how_many_times',\
    \ string, substring)\n    var times = 0\n    for(var i = 0, len = string.length;\
    \ i < len; i++){\n        var letter = string[i]\n        if(letter == substring[0])\
    \ times++\n        if(letter == substring[1]) times++\n        if(letter == substring[2])\
    \ times++\n        if(letter == substring[3]) times++\n        if(letter == substring[4])\
    \ times++\n        if(letter == substring[5]) times++\n        if(letter == substring[6])\
    \ times++\n        if(letter == substring[7]) times++\n    }\n    return times\n\
    }\n", "    var count = 1;\n    for(var i = 0; i <= string.length; i++){\n    \
    \    if(string.substr(0, i).indexOf(substring) > -1) count ++;\n    }\n    return\
    \ count;\n}\n", "  if (string.length < substring.length) return 0;\n  return string.toLowerCase().indexOf(substring.toLowerCase())\
    \ + 1;\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i < string.length; i++){\n\t\
    \tif (string.charAt(i) == substring.charAt(0)){\n\t\t\tif (substring.charAt(0)\
    \ == string.charAt(string.length - 1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tif (string.charAt(i) == substring.charAt(substring.length - 1)){\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string.indexOf(substring,\
    \ i) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    return string.split(substring).length - 1;\n}\n", "  return string.split(substring).length\
    \ - 1;\n}\n", "    if(string.length == 0) return 0;\n    if(string.length == substring.length)\
    \ return 0;\n    var start = 0;\n    var count = 0;\n    while(start + 1 < string.length){\n\
    \        if(string.substr(start, substring.length) == substring){\n          \
    \  count += 1;\n            start += substring.length;\n        }\n        start\
    \ += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ is great! The one issue with this solution is that it is case sensitive, so\
    \ you might want to add the `i` flag when you compare the strings.\n<|/ c |>\n\
    <| a dscore=2 |>\nThis is what i did using Javascript.\n<code>\nvar word = \"\
    This is a test\";\nvar char = \"is\";\nvar arr = [];\nvar count = 0;\nvar tempString\
    \ = \"\";\n\nfor(var i=0;i<word.length;i++)\n{\n    if(word.substr(i,1) == char)\
    \ //check if string starts with char\n    {\n        tempString = word.substr(0,i);\
    \ //get first char of string\n        arr.push(tempString); //push to arr\n  \
    \  }\n    else\n    {\n        arr.push(word.substr(i,1)); //push remaining chars\
    \ to arr\n    }\n}\n\nvar count = 0;\nfor(var i=0;i<arr.length;i++)\n{\n    for(var\
    \ j=0;j<word.length;j++)\n    {\n        if(arr[i] === word.substr(j,1))\n   \
    \     {\n            count += 1;\n        }\n    }\n}\n", "    var count = 0;\n\
    \    string.split(substring).forEach(function(el){\n        count += el.split('').length;\n\
    \    });\n    return count;\n}\n", "  var count = 0;\n  for(var i = 0, length\
    \ = string.length; i < length; i++){\n    if(string.charAt(i) == substring.charAt(0)){\n\
    \      count++;\n    }\n    else if(string.charAt(i) == substring.charAt(1)){\n\
    \      count++;\n      if(string.charAt(i + 1) == substring.charAt(1)){\n    \
    \    count++;\n      }\n    }\n  }\n  return count;\n}\n", "  let substring_count\
    \ = 0, last_occur = -1, index = 0;\n  while(index < string.length){\n    index\
    \ = string.indexOf(substring, last_occur + 1);\n    if(index === -1){\n      break;\n\
    \    }\n    last_occur = index;\n    substring_count++;\n  }\n  return substring_count;\n\
    }\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n     \
    \   if(string.indexOf(substring, i) !== -1){\n            count += 1;\n      \
    \  }\n    }\n    return count;\n}", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if (string.indexOf(substring, i) > -1){\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  let count = 0;\n  for(let i=0; i<string.length;\
    \ i++){\n    if(string[i] == substring){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    if(string.length == 0){\n        return 0;\n    }\n\n   \
    \ var count_overlaps = 0;\n\n    //First we check that the substring does not\
    \ occur anywhere else in the string\n    for(var i=0; i<string.length; i++){\n\
    \        var letter = string.charAt(i);\n        var next_letter = string.charAt(i+1);\n\
    \n        //Check if the next letter is the same as the previous letter\n    \
    \    if(next_letter == letter){\n            count_overlaps += 1;\n        }\n\
    \    }\n\n    //If the substring does occur more than once, then we check the\
    \ first letter again\n    //Since we already checked that there are no other occurences\
    \ of the substring, we already know that all letters before the first letter are\
    \ the same\n    for(var i=1; i<string.length; i++){\n        var letter = string.charAt(i);\n\
    \        var next_letter = string.charAt(i-1);\n\n        if(next_letter == letter){\n\
    \            count_overlaps += 1;\n        }\n    }\n\n    return count_overlaps;\n\
    }\n", "    \n    // Loop through all the letters in the substring.\n    for (var\
    \ i = 0; i < substring.length; i++) {\n    \n        // If this letter is equal\
    \ to the substring, return the number of times it occurs.\n        if (string.toLowerCase().indexOf(substring.toLowerCase())\
    \ == i){\n            return i;\n        }\n    }\n\n    // Otherwise return the\
    \ length of the substring.\n    return substring.length;\n}\n", "  let count =\
    \ 0;\n  const len_string = string.length;\n  const len_substring = substring.length;\n\
    \  while (string.indexOf(substring, count) !== -1) count++;\n  return count;\n\
    }\n", "    string = str(string)\n    substring = str(substring)\n    if(string.indexOf(substring)\
    \ == -1)\n        return 0\n    count = 0\n    str = string.split(substring)\n\
    \    for(var i = 0; i < str.length; i++){\n        if(str.lastIndexOf(str[i])\
    \ == str.length - 1)\n            count++\n        else\n            count++\n\
    \    }\n    return count\n}\n", "\tlet count = 0;\n\twhile(string.includes(substring))\n\
    \t{\n\t\tstring = string.replace(substring, \"\");\n\t\tcount++;\n\t}\n\treturn\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < string.length;i++){\n\
    \        if(string.startsWith(substring, i)){\n            count+=1;\n       \
    \ }\n    }\n    return count;\n}\n", "    var occurrences = 0;\n    \n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string.toLowerCase().indexOf(substring.toLowerCase(),\
    \ i) === 0){\n            occurrences++;\n        }\n    }\n    \n    return occurrences;\n\
    }\n", "    var counter = 0;\n    for(var i = 0; i < string.length; i++){\n   \
    \     if(string.indexOf(substring, i) !== -1){\n            counter++;\n     \
    \   }\n    }\n    return counter;\n}\n", "    var counter = 0;\n    for(var i\
    \ = 0; i < string.length; i++){\n        if(string.indexOf(substring, i) == i){\n\
    \            counter ++;\n        }\n    }\n    return counter;\n}\n", "  if(string.length\
    \ == substring.length) return 0;\n  var count = 0;\n  var len = string.length;\n\
    \  for(var i=0; i<len; i++){\n    if(string.charAt(i) == substring.charAt(i))\
    \ count++;\n    if(substring.charAt(i) == 'a') count++;\n    if(string.charAt(i)\
    \ == 'a' && substring.charAt(i) == 'a') count++;\n  }\n  return count;\n}\n",
  "    var count = 0;\n    for(var i=0; i<string.length; i++){\n        if(string.indexOf(substring,\
    \ i) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    if(string == null || substring == null) return 0;\n    var count = 0;\n   \
    \ for(var i = 0; i < string.length; i++){\n        if(string.indexOf(substring,\
    \ i) !== -1) count ++;\n    }\n    return count;\n}\n", "  var count = 0;\n  var\
    \ len = string.length;\n  var sublen = substring.length;\n  var i = 0;\n  while(i\
    \ < len){\n    if (string[i++] == substring[0]) count++;\n    if (string[i] ==\
    \ substring[1]) count++;\n    if (string[i++] == substring[0] && string[i] ==\
    \ substring[1]) count++;\n  }\n  return count;\n}\n", "\tvar count = 0;\n\tvar\
    \ index = 0;\n\tvar length = 0;\n\tfor(var i=0; i<string.length; i++){\n\t\tindex\
    \ = string.indexOf(substring, index);\n\t\tif(index != -1){\n\t\t\tcount++;\n\t\
    \t\tindex = index + substring.length;\n\t\t}else{\n\t\t\tindex = -1;\n\t\t}\n\t\
    }\n\treturn count;\n}\n", "    if(string == substring) return 0;\n    if(string\
    \ == null || substring == null || string.length == 0 || substring.length == 0)\
    \ return 0;\n    var cnt = 0;\n    for(var i=0; i< string.length; i++){\n    \
    \    for(var j=0; j<substring.length; j++){\n            if(string[i] == substring[j]){\n\
    \                cnt++;\n                if(cnt == substring.length) return substring.length;\n\
    \                if(string[i] != substring[j]) break;\n            }\n       \
    \ }\n    }\n    return cnt;\n}\n", "  var n = 0;\n  var o = 0;\n  var count =\
    \ 0;\n  while(string.length>0 && !string.includes(substring)){\n    string = string.slice(1);\n\
    \    o++;\n  }\n  while(string.length>0 && string.includes(substring)){\n    string\
    \ = string.slice(1);\n    n++;\n  }\n  if (o>0 && n>0){\n    return o * n;\n \
    \ }\n  else{\n    return -1;\n  }\n}\n", "  return string.length * string.split(substring).length\
    \ - string.length + string.split(substring).length;\n}\n", "  if(string.length\
    \ == 0){\n    return 0;\n  }\n  let count = 0;\n  for(let index = 0; index < string.length;\
    \ index++){\n    count += string.indexOf(substring, index) + 1;\n  }\n  return\
    \ count;\n}\n", "  var count = 0;\n  for (var i = 0, j = string.length; i < j;\
    \ i++){\n    if (string[i] === substring[0]){\n      var new_string = '' + string.substr(0,\
    \ i) + string.substr(i + 1);\n      count += how_many_times(new_string, substring);\n\
    \      i = j;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for(let\
    \ i=0; i < string.length; i++){\n    for(let j=0; j < substring.length; j++){\n\
    \      if(string[i] == substring[j]){\n        count++;\n      }\n    }\n  }\n\
    \  return count;\n}\n", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string.indexOf(substring, i) !== -1){\n      count++;\n      if(count\
    \ > substring.length) break;\n    }\n  }\n  return count;\n}\n", "    var count\
    \ = 0;\n    if (string == null || string == '') {\n        return 0;\n    }\n\
    \    \n    string = string.toLowerCase();\n    substring = substring.toLowerCase();\n\
    \    \n    var substringLength = substring.length;\n    \n    for (var i = 0;\
    \ i <= string.length; i++){\n        var char_count = 0;\n        \n        for\
    \ (var j = 0; j <= substringLength; j++){\n            if (string.charAt(i) ==\
    \ substring.charAt(j)) {\n                char_count++;\n            }\n     \
    \   }\n        \n        if (char_count == substringLength) {\n            count++;\n\
    \        }\n    }\n    \n    return count;\n}\n", "    var occurrences = 0;\n\
    \    for (var i = string.length-1; i >= 0; i--) {\n        if (string.charAt(i)\
    \ == substring){\n            occurrences++;\n            if (substring.length\
    \ == 1) {\n                break;\n            }\n        }\n    }\n    return\
    \ occurrences;\n}\n", "\treturn string.match(new RegExp(substring, 'g')) - 1;\n\
    }\n", "    var cnt = 0;\n    var strlen = string.length;\n    var sublen = substring.length;\n\
    \    for(var i = 0; i <= strlen; i++ ){\n        if( string.charAt(i) !== substring.charAt(i)\
    \ ) {\n            break;\n        }\n        cnt++;\n    }\n    return cnt;\n\
    }", "  if (string == null || substring == null){\n    return 0;\n  }\n  var counter\
    \ = 0;\n  for (var i = 0, length = string.length; i < length; i++){\n    if (string.substr(i,\
    \ substring.length) == substring){\n      counter++;\n    }\n  }\n  return counter;\n\
    }", "    return string.split(substring).length - 1;\n}\n", "  let result = 0;\n\
    \  if(string.indexOf(substring) == -1){\n    return -1;\n  }\n  substring = substring.split('');\n\
    \  let start = string.indexOf(substring[0]);\n  while(start != -1){\n    result\
    \ += 1;\n    start = string.indexOf(substring[0], start+1);\n  }\n  return result;\n\
    }\nlet count = how_many_times('aaaaa', 'aa');", "  if(string.indexOf(substring)\
    \ == -1){\n    return 0;\n  }\n  var count = 0;\n  for(var index = 0; index <\
    \ string.length; index++){\n    if(string.substr(index, substring.length) == substring){\n\
    \      count += 1;\n    }\n  }\n  return count;\n}", "  if(string == null){\n\
    \    return 0;\n  }\n  if(substring == null){\n    return 1;\n  }\n  var count\
    \ = 0;\n  for(var i = 0; i < string.length; i++){\n    if(string[i] == substring[0]){\n\
    \      count++;\n      for(var j = i; j < substring.length; j++){\n        if(string[j]\
    \ == substring[j]){\n          count++;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\n", "    var letters = string.toLowerCase(),\n        letters_count\
    \ = letters.length;\n    return letters_count - countLetters(string, substring,\
    \ letters_count);\n}\n", "  var count = 0;\n  for(var i=0;i<string.length;i++){\n\
    \    if(string[i] == substring[0]){\n      count += how_many_times(string.substring(1),substring);\n\
    \    }\n    else if(string[i] == substring[1]){\n      count += how_many_times(string.substring(0,i-1),substring);\n\
    \    }\n    else if(string[i] == substring[2]){\n      count += how_many_times(string.substring(0,i-1),substring);\n\
    \    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for (var i = 0; i < string.length;){\n\
    \    if (string[i] === substring[0]) count++;\n    if (string[i++] === substring[0])\
    \ count++;\n  }\n  return count;\n}\n", "  if (string.length < substring.length)\n\
    \    return 0;\n  var counter = 0;\n  for (var i = 0; i < substring.length; i++)\
    \ {\n    if (string.includes(substring[i]))\n      counter++;\n  }\n  return counter;\n\
    }\n", "  if (string.length == 0) return 0;\n  if (string.length == 1) return string.indexOf(substring);\n\
    \  var times = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.charAt(i)\
    \ == substring.charAt(0)){\n      times++;\n      if (string.charAt(i) == substring.charAt(substring.length-1)){\n\
    \        break;\n      }\n    } else {\n      break;\n    }\n  }\n  return times;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++){\n    \
    \    if (string[i] == substring[0]){\n            string[i] = substring[1];\n\
    \            count++;\n        }\n        if (string[i] == substring[1]){\n  \
    \          string[i] = substring[0];\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "\treturn string.split(substring).length - 1;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.indexOf(substring,\
    \ i) == i){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  var occurrences = 0\n  var index = 0\n  while((index = string.indexOf(substring,\
    \ index)) !== -1){\n    occurrences += 1\n    index++\n  }\n  return occurrences\n\
    }\n", "  let count = 0;\n  let pos = 0;\n  while (pos < string.length){\n    if\
    \ (string.substr(pos, substring.length) === substring){\n      count++;\n    \
    \  pos += substring.length;\n    } else {\n      pos++;\n    }\n  }\n  return\
    \ count;\n}\n", "    var num_subs = 0;\n    \n    if(substring == ''){\n     \
    \   return 0;\n    }\n    \n    if(string.length <= substring.length){\n     \
    \   return 0;\n    }\n    \n    for(var i = 0; i < string.length; i++){\n    \
    \    if(string.substr(i,substring.length) == substring){\n            num_subs++;\n\
    \        }\n    }\n    \n    return num_subs;\n}\n</cell>\n<cell>\n# Let's run\
    \ it a couple more examples to see how many times these two substrings could be\
    \ found.\n# >>> how_many_times('', 'ab')\n# 0\n# >>> how_many_times('ab', 'ba')\n\
    # 2\n# >>> how_many_times('aaaaa', 'aa')\n# 3\n# >>> how_many_times('aaaab', 'aa')\n\
    # 4\n</cell>\n<text>\nLet's now look at what happens if we try to replace some\
    \ substrings with an empty string. We'll use the second example to illustrate.\n\
    \n\n</text>\n<cell>\n# The same string as before, but now replace 'ab' with ''.\n\
    # >>> how_many_times('ab', '', '')\n# 2\n</cell>\n<text>\nLet's rerun the function\
    \ this time, this time replacing the empty string with another string.\n\n\n</text>\n\
    <cell>\n# Let's replace 'ab' with 'c'.\n# >>> how_many_times('ab', 'c', '')\n\
    # 2\n</cell>\n<text>\nAs you can see above, there are now two instances of 'ab'.\
    \ The first has replaced 'ab' with 'c', and the second instance has replaced 'ab'\
    \ with ''. Notice that this second 'ab' was counted twice. This happened because\
    \ the string 'ab' was found twice. Now let's run it a couple more examples to\
    \ see how many times these two substrings could be found.\n\n\n</text>\n<cell>\n\
    # Let's try it again with 'aaaa'.\n# >>> how_many_times('aaaa', 'aa')\n# 3\n#\
    \ >>> how_many_times('aaaa', 'aaaa')\n# 3\n</cell>\n<text>\nNotice that 'aaaa'\
    \ is found three times, and 'aaa' was found twice. Notice also that 'aaaaa' was\
    \ found three times as well. This is because 'aaaa' is found twice, and 'aaa'\
    \ is found twice, and 'aaaaa' is found twice.\n\n\n</text>\n<text>\nExercise 8:\
    \ Find how many times each substring occurs in the given string.\nGiven a string,\
    \ find how many times each substring occurs in the ", "\treturn string.split(substring).length\
    \ - 1;\n}\n", "  var count = 0;\n  for (var x=0; x<string.length; x++){\n    count+=string.charAt(x)==substring.charAt(x);\n\
    \  }\n  return count;\n}\n", "  string = string.toLowerCase();\n  substring =\
    \ substring.toLowerCase();\n\n  if (string.indexOf(substring) > -1){\n    var\
    \ count = 0\n    var count_end = 0\n    var i = string.indexOf(substring)\n  \
    \  while (i >= 0){\n      count++\n      i = string.indexOf(substring, i + 1)\n\
    \      if (count > substring.length){\n        count--;\n        count_end = i\n\
    \        break\n      }\n    }\n    return count - substring.length + count_end\
    \ + 1\n  }\n\n  return 0;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length;\
    \ i++){\n\t\tlet substring_length = substring.length;\n\t\tlet current_char =\
    \ string[i];\n\t\tfor (let j = 0; j < substring_length; j++){\n\t\t\tif (current_char\
    \ === substring[j]){\n\t\t\t\tcount++;\n\t\t\t\tsubstring_length--;\n\t\t\t}\n\
    \t\t}\n\t\tif (count === substring.length){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn\
    \ -1;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++){\n \
    \   if (string[i] === substring[0]){\n      count++;\n      if (string[i] ===\
    \ substring[1]){\n        count++;\n      }\n    }\n  }\n  return count;\n}",
  "\tvar count = 0;\n\tvar index = 0;\n\twhile(index < string.length && index < substring.length){\n\
    \t\tif(string.substring(index, index + substring.length) == substring){\n\t\t\t\
    count++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn count;\n}\n", "    var num_times\
    \ = 0;\n    for(var i=0;i<string.length;i++){\n        if(string.substr(i,substring.length)===substring){\n\
    \            num_times++;\n        }\n    }\n    return num_times;\n}\n</cell>\n\
    <text>\nChallenge: Write a function that takes in a string and returns the number\
    \ of times that string occurs in another string. Include all uppercase and lowercase\
    \ versions.\n\n\n</text>\n<cell>", "\tstring = string.toLowerCase();\n\tsubstring\
    \ \t= substring.toLowerCase();\n\tvar result\t\t= 0;\n\tvar index\t\t= 0;\n\t\
    var chars\t\t= string.length;\n\twhile(index < chars){\n\t\tindex\t= string.indexOf(substring,\
    \ index);\n\t\tif(index === -1){\n\t\t\treturn result;\n\t\t}\n\t\tresult\t= 1\
    \ + result;\n\t\tindex\t= index + substring.length;\n\t}\n\treturn result;\n}\n",
  "  var count = 0;\n  var i = 0;\n  while(i < string.length && i < substring.length){\n\
    \    var character = string[i];\n    i ++\n    if(character == substring[0]){\n\
    \      count ++\n      i++\n      continue\n    }\n    for(; i < substring.length;\
    \ i++){\n      if(string[i] == substring[i]){\n        count ++\n        i ++\n\
    \        continue\n      }\n    }\n    break\n  }\n  return count\n}", "    for(var\
    \ i = 0, len = string.length; i < len; i++){\n        var substr_len = 0;\n  \
    \      for(var j = 0, jlen = substring.length; j < jlen; j++){\n            if(string[i]\
    \ == substring[j]){\n                substr_len++;\n                break;\n \
    \           }\n        }\n        if(substr_len == substring.length){\n      \
    \      return i+1;\n        }\n    }\n    return -1;\n}", "  return string.split(substring).length\
    \ - 1;\n}", "    if(string == null || substring == null || string == \"\" || substring\
    \ == \"\"){\n        return 0;\n    }\n    var count = -1;\n    var str_length\
    \ = string.length;\n    var str_length_s = substring.length;\n    var str_length_s_1\
    \ = substring.length;\n    var substr_length = substring.length;\n    for(var\
    \ i = 0; i <= str_length_s - 1; i++){\n        var temp = 0;\n        for(var\
    \ j = 0; j <= str_length_s - 1; j++){\n            var string_char = string[j];\n\
    \            var substring_char = substring[j];\n            if(string_char ==\
    \ substring_char){\n                temp++;\n            }else if(j != 0 && temp\
    \ != 0){\n                temp++;\n            }\n        }\n        if(temp ==\
    \ 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "    var\
    \ count = 0;\n    while(count < string.length && string.indexOf(substring, count)\
    \ !== -1)\n    {\n        count += 1;\n    }\n    return count;\n}\n", "    string\
    \ = string.toString();\n    var occurrences = 1;\n    var i = 0;\n    while (i\
    \ < string.length){\n        if (string.indexOf(substring, i) === i){\n      \
    \      occurrences++;\n            i += substring.length;\n        }else{\n  \
    \          i++;\n        }\n    }\n    return occurrences;\n}\n</code>\nThe main\
    \ algorithm is how_many_times. At the first loop it checks substrings of the original\
    \ string for possible occurrences of the substring in our new string. It loops\
    \ until all substrings of the original have been checked, or until we reach the\
    \ end of the original string.\n<|/ a dscore=1 |>\n<| a |>\nThis solution works\
    \ for me:\n<code>\nint count_times(string s, string p) {\n    int count = 0;\n\
    \    for(int i = 0; i < s.length() && count < p.length(); i++) {\n        if(s.substr(i,\
    \ p.length()) == p) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 tags=string,c++ |>\n<| c |>\nThe question asks to count\
    \ occurrences of a string within another string. This solution counts the number\
    \ of letters in the second string that are also in the first string. Also, you're\
    \ missing a semicolon after `int count`.\n<|/ c |>\n<| a tags=string,c++ |>\n\
    <code>\nint countOccurrences(string &str, string &substr)\n{\n    int count =\
    \ 0;\n    for (int i = 0; i < str.size() && count < substr.size(); i++)\n    {\n\
    \        if (str.substr(i, substr.size()) == substr) count++;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution doesn't work.\
    \ You're returning `count` before the for loop even executes. Also, this solution\
    \ is very inefficient compared to other solutions.\n<|/ c |>\n<| c |>\nYes you\
    \ are correct. I just fixed it. Also I think the other answers are much better\
    \ than this one. Anyways, I added the code to the answer, so it can be seen even\
    \ without scrolling down.\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\nint howManyTimes(string\
    \ S, string P) {\n    int n = S.size();\n    int m = P.size();\n\n    int sum\
    \ = 0;\n    for(int i = 0; i < n; i++)\n        sum += (P.find(S[i]) != string::npos);\n\
    \n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution doesn't\
    \ work. You're returning `sum` before the for loop even executes. Also, this solution\
    \ is very inefficient compared to other solutions.", "    var cnt = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string.indexOf(substring, i) !==\
    \ -1) cnt++;\n    }\n    return cnt;\n}\n", "  var count = 0;\n  var i = 0;\n\
    \  while (i <= string.length){\n    if (string.indexOf(substring, i) > -1) count++;\n\
    \    i += substring.length;\n  }\n  return count;\n}\n", "  var times = 0;\n \
    \ for (var i = 0; i < string.length; i++){\n    var char = string.charAt(i);\n\
    \    if (substring.indexOf(char) >= 0){\n      times++;\n    }\n  }\n  return\
    \ times;\n}\n", "  var count = 0;\n  for (var i = 0; i<string.length; i++){\n\
    \    if (string.substring(i, i+substring.length) == substring){\n      count++;\n\
    \      i = i+substring.length;\n    }\n  }\n  return count;\n}\n", "    var count\
    \ = 0\n    for(var i = 0; i < string.length; i++){\n        if (string.indexOf(substring,\
    \ i) == i){\n            count++\n        }\n    }\n    return count\n}\n", " \
    \ return string.split(substring).length - 1;\n}\n", "    var i = 0;\n    while(i\
    \ < string.length){\n        if(string.substring(i, i+substring.length) == substring){\n\
    \            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
