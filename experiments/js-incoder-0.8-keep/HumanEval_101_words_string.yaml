name: HumanEval_101_words_string
language: js
prompt: "//You will be given a string of words separated by commas or spaces. Your\
  \ task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\"\
  , \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two,\
  \ three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"\
  six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"\
  ]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\
  \"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"\
  ]);\n}\n\ntest();"
completions: ["\tlet words = s.split(/[, ]+/);\n\treturn words;\n}\n", "\tlet words\
    \ = s.split(',').map(x => x.trim());\n\t\n\treturn words;\n}\n", "\ts = s.trim();\n\
    \ts = s.toLowerCase(); //convert string to lowercase\n\t\n\tvar words = [];\n\t\
    s.split(/\\W+/).forEach(function(word){\n\t\twords.push(word);\n\t});\n\treturn\
    \ words;\n}\n", "\t//Your code here\n}\n", "\ts = s.split(' ');\n\tvar words =\
    \ [];\n\tfor(var i=0; i<s.length; i++){\n\t\twords.push(s.slice(0,i+1));\n\t}\n\
    \treturn words;\n}\n", "    s=s.split(/,\\s+/);\n    return s;\n}\n", "\treturn\
    \ s.split(/\\s+/g);\n}\n", "    s = s.toString();\n    return s.split(\" \");\n\
    }", "\treturn s.split(/[, ]+/);\n}\n", "    var words = s.split(/,/).map(function(word){\n\
    \        return word.trim()\n    });\n    console.log(words);\n}\n", "  s = s.trim();\n\
    \  return s.split(/[, ]+/);\n}\n", "\ts = s.toLowerCase();\n\tvar words = s.split(\"\
    ,\");\n\tfor (var i = 0; i < words.length; i++) {\n\t\twords[i] = words[i].trim();\n\
    \t}\n\treturn words;\n}", "\tvar word_array = [];\n\ts = s.replace(/\\W/g,\"\"\
    );\n\ts = s.replace(/,/g,\" \");\n\ts = s.replace(/\\s+/g,\" \");\n\ts = s.replace(/\\\
    s+$/g,\"\");\n\ts = s.replace(/\\s+./g,\" \");\n\ts = s.replace(/([^\\s])\\s([^\\\
    s]+)(?=\\S)/g,\"$1 $2\");\n\ts = s.replace(/([^\\s])\\s([^\\s]+)/g,\"$1 $2\");\n\
    \tword_array = s.split(\" \");\n\treturn word_array;\n}\n</textarea></form>\n\n\
    \    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"text/javascript\"\n      });\n    </script>\n    <h3>The <code>words()</code>\
    \ function</h3>\n    <form action=\"/docsv2/docs/code_words.html\">\n<textarea\
    \ id=\"code\" name=\"code\">\n", "\tvar arr = [];\n\tvar words = s.replace(/,+/g,\
    \ \" \").split(\" \");\n\tfor (var i = 0; i < words.length; i++){\n\t\tif (words[i].length\
    \ >= 3){\n\t\t\tarr.push(words[i]);\n\t\t}\n\t}\n\treturn arr;\n}\n", "  return\
    \ s.split(',').map(function(word){\n    return word.split('');\n  });\n}\n", " \
    \ s = s.toString()\n  s = s.replace(/,/g, \" \")\n  s = s.replace(/\\s\\s+/g,\
    \ \" \")\n  words = s.split(\" \")\n  return words\n}", "\ts = s.split(\", \"\
    );\n\treturn s.map(function(word){\n\t\treturn word.replace(/^\\s*|\\s*$/g, \"\
    \");\n\t});\n}\n", "\tvar a = s.split(/\\W+/);\n\tfor(i = 0; i<a.length; i++){\n\
    \t\tif(a[i].match(\"^[A-za-z]+$\") != null){\n\t\t\ta.splice(i,1);\n\t\t}\n\t\
    }\n\treturn a;\n}\n", "\tvar str = s.replace(/[^\\w\\s]/ig, \"\").toLowerCase();\n\
    \treturn str.trim().split(/,/).map(function(e){return e.trim()});\n}", "    words\
    \ = s.split(/,| |,/);\n    for (i in words)\n    {\n        words[i] = words[i].trim();\n\
    \    }\n    return words;\n}", "    words = s.replace(/\\W+/g,\" \").split(\"\
    \ \");\n    return words;\n}\n", "\tvar words = [];\n\tvar words = s.split(\"\
    ,\");\n\treturn words;\n}", "    var words=s.split(', ');\n    return words;\n\
    }\n", "    var words = s.split(\",\").map(function(word){\n        return word.trim();\n\
    \    }).filter(function(word){\n        return word != \"\";\n    }).map(function(word){\n\
    \        return word[0].toUpperCase() + word.slice(1);\n    });\n    return words;\n\
    }\n", "    s = s.split(/[,\\s]+/);\n    var result = [];\n    for(var i = 0; i\
    \ < s.length; i++){\n        result.push(s[i]);\n    }\n    return result;\n}\n",
  "    s=s.split(\",\");\n    let new_arr=[];\n    for(let i=0;i<s.length;i++){\n\
    \        new_arr.push(s.slice(0,i+1).join(\" \"));\n    }\n    return new_arr;\n\
    }", "  s = s.split(', ');\n  var arr = [];\n  for (var i = 0; i < s.length; i++){\n\
    \    arr.push(s[i]);\n  }\n  return arr;\n}\n", "  //Split the string into an\
    \ array of words\n  var words = s.split(/,+/g);\n  //Create an array to hold each\
    \ word\n  var words_arr = [];\n  //Looping through the array of words\n  for (var\
    \ i = 0; i < words.length; i++) {\n    //If the current word is not an empty string\n\
    \    if(words[i].length > 0){\n      //Push it onto the words_arr\n      words_arr.push(words[i]);\n\
    \    }\n  }\n  //Return the words_arr\n  return words_arr;\n}\n", "  var strArray\
    \ = s.split(/\\W/g);\n  for(var i = 0; i<strArray.length; i++){\n    strArray[i]\
    \ = strArray[i].trim();\n  }\n  return strArray;\n}\n", "    var words = s.trim().split(\"\
    ,\");\n    var wordArr = words.filter(function(word){\n        return word !==\
    \ \"\";\n    });\n    return wordArr;\n}\n", "\tvar words = s.toString().split(',');\n\
    \tfor (var i = 0; i < words.length; i++) {\n\t\twords[i] = words[i].trim();\n\t\
    }\n\treturn words;\n}", "\tvar myArray = s.split(/,/);\n\tmyArray = myArray.map(function(x){\n\
    \t\treturn x.trim();\n\t});\n\treturn myArray;\n}\n", "\ts = s.split(', ');\n\t\
    return s;\n}\n", "\tvar array = s.split(' ');\n\tarray.sort();\n\treturn array;\n\
    }", "  let strArray = s.split(/,|\\s+/);\n  return strArray;\n}\n", "    return\
    \ s.trim().split(\",\");\n}\n", "  return s.split(\",\").map(w => w.trim());\n\
    }\n", "    s = s.replace(/(\\s)/g,\" \");\n    return s.trim().split(/[\\s,]+/);\n\
    }", "  return s.split(/,|\\s+/);\n}\n", "    var words = s.split(\",\").map(function(word){return\
    \ word.trim();});\n    return words.filter(function(word){return word.length >\
    \ 0;});\n}\n", "  var a = s.split(\" \");\n  var list = [];\n  for(var i = 0;i\
    \ < a.length;i++){\n    list.push(a[i]);\n  }\n  return list;\n}\n", "    var\
    \ re = /[, ]+/g;\n    return s.replace(re, \",\").split(\",\");\n}\n", "  var\
    \ results = [];\n  var delimiter = \",\";\n  if (s.includes(delimiter)){\n   \
    \ results = s.split(delimiter);\n  } else {\n    results = [s];\n  }\n  return\
    \ results;\n}\n", "\tlet wordArray = s.split(\",\");\n\tlet words = [];\n\tfor(let\
    \ i = 0; i < wordArray.length; i++){\n\t\tlet word = wordArray[i];\n\t\tlet splitString\
    \ = word.split(\" \");\n\t\tfor(let j = 0; j < splitString.length; j++){\n\t\t\
    \twords.push(splitString[j]);\n\t\t}\n\t}\n\treturn words;\n}", "    let arr=s.trim().split(/\\\
    s+/);\n    return arr;\n}\n", "\tvar words = s.toLowerCase().split(/\\W+/);\n\t\
    for(var i in words){\n\t\twords[i] = words[i].trim();\n\t}\n\treturn words;\n\
    }\nvar p1 = ['Hi, my name is John','One, two, three, four, five, six'];\nvar p2\
    \ = words_string(p1[0]);", "\tvar w = s.split(/,|\\s/);\n\treturn w;\n}\n", " \
    \   return s.toLowerCase().split(', ').map(function(word){\n        return word.split('\
    \ ');\n    });\n}\n", "\tlet strArr = s.split(\", \");\n\tlet wordsArr = [];\n\
    \t\n\tfor(let i = 0; i < strArr.length; i++){\n\t\tlet words = strArr[i].split(\"\
    \ \");\n\t\tfor(let j = 0; j < words.length; j++){\n\t\t\twordsArr.push(words[j]);\n\
    \t\t}\n\t}\n\t\n\treturn wordsArr;\n}\n", "\tvar arr = [];\n\tvar words = s.split(\"\
    ,\");\n\tfor(var i = 0; i < words.length; i++){\n\t\tarr.push(words[i].trim());\n\
    \t}\n\treturn arr;\n}\n", "    return s.split(',').map(String);\n}", "    return\
    \ s.split(/[\\s,]+/);\n}\n", "\treturn s.split(/,|\\s/);\n}\n", "  return s.split(/,\
    \ */);\n}\n", "    var words = s.replace(/\\s+/g,\" \").split(',');\n    var new_array\
    \ = [];\n    for(var i = 0; i < words.length; i++){\n        new_array.push(words[i].trim());\n\
    \    }\n    return new_array;\n}\n", "    var result = [];\n    var words = s.split(/,|\\\
    s/);\n    for(var i=0;i<words.length;i++){\n        result.push(words[i]);\n \
    \   }\n    return result;\n}\n", "\ts = s.trim();\n\tvar words = s.split(\",\"\
    );\n\tconsole.log(s);\n\treturn words;\n}\n", "\tvar words = s.trim().split(\"\
    ,\");\n\treturn words;\n}\n", "    var newArr=new Array();\n    s.replace(/[^a-zA-Z\
    \ ]+/g, \",\").split(\",\").forEach(function(word){\n        if (word.length>1){\n\
    \            newArr.push(word);\n        }\n    });\n    return newArr;\n}", "\t\
    var arr = s.split(\" \");\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i]\
    \ == \"\"){\n\t\t\tarr.splice(i, 1);\n\t\t}\n\t}\n\treturn arr;\n}\n", "  s =\
    \ s.split(', ');\n  return s;\n}", "    // The length of the string is equal to\
    \ the string without commas, spaces, or dashes.\n    const length = s.length -\
    \ (s.includes(\",\") || s.includes(\"-\") ? 1 : 0)\n    const words = []\n   \
    \ for (let i = 0; i < length; i++){\n        // If there is a comma at the current\
    \ index, take everything before it and add it to the words array.\n        if\
    \ (i !== 0 && s.includes(\",\")){\n            words.push(s.slice(0, i))\n   \
    \     }\n        // If there is a dash at the current index, take everything after\
    \ it and add it to the words array.\n        if (i !== 0 && s.includes(\"-\")){\n\
    \            words.push(s.slice(i + 1))\n        }\n        // If there is no\
    \ comma and/or dash, add the character to the words array as is.\n        if (i\
    \ === 0){\n            words.push(s[i])\n        }\n        // If there is no\
    \ character at the current index, move onto the next character.\n        if (i\
    \ === length){\n            i++\n        }\n    }\n    return words\n}\n", " \
    \ return s.split(/,\\s+/);\n}\n", "\tvar temp=s.split(/,| |,/);\n\tconsole.log(temp);\n\
    \tvar arr=[];\n\tfor(var i=0;i<temp.length;i++){\n\t\tif(temp[i]!=undefined){\n\
    \t\t\tarr.push(temp[i]);\n\t\t}\n\t}\n\treturn arr;\n}\n", "\tvar words = new\
    \ Array();\n\tvar words = s.split(/,|\\s/);\n\treturn words;\n}\n", "    //Split\
    \ using commas\n    var a = s.split(',');\n    //Return an array of words\n  \
    \  return a;\n}\n", "  return s.trim().split(/,\\s+|\\s+/);\n}\n", "  var word_array\
    \ = [];\n  var words = s.split(/[\\s,]+/);\n  for (var i = 0; i < words.length;\
    \ i++){\n    word_array.push(words[i]);\n  }\n  return word_array;\n}\n", "\t\
    s = s.replace(/\\s/g, \"\");\n\tvar list = s.split(\",\");\n\tvar arr = [];\n\t\
    for(var i in list){\n\t\tarr.push(list[i]);\n\t}\n\treturn arr;\n}\n", "\tvar\
    \ strArr = s.split(',');\n\tvar arr = [];\n\tfor(var i = 0; i < strArr.length;\
    \ i++){\n\t\tarr.push(strArr[i]);\n\t}\n\treturn arr;\n}", "\tvar a = s.split(\"\
    \ \");\n\tfor(var i=0; i < a.length; i++){\n\t\ta[i] = a[i].split(\",\");\n\t\
    }\n\treturn a;\n}", "\tvar words = s.split(\" \");\n\tvar word_list = [];\n\t\n\
    \tfor(var i = 0; i < words.length; i++){\n\t\tif(words[i] != \"\" && words[i]\
    \ != \"\\n\"){\n\t\t\tword_list.push(words[i]);\n\t\t}\n\t}\n\t\n\treturn word_list;\n\
    }\n", "\tvar words = [];\n\ts = s.toLowerCase().replace(/[^\\w\\s]/gi, \" \");\n\
    \ts = s.replace( /\\,/gi, \" \");\n\ts = s.split(\" \");\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tvar word = s[i];\n\t\tword = word.toLowerCase();\n\t\tif(!words.includes(word)){\n\
    \t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n", "\tvar words = s.split(',');\n\
    \tfor (var i=0;i<words.length;i++){\n\t\tif (words[i].trim() !==\"\") words[i]=words[i].trim();\n\
    \t}\n\treturn words;\n}\n\n", "    let words = s.toString().split(/\\s*,|\\s+/);\n\
    \    let res = [];\n    for(let i=0; i< words.length; i++){\n        res.push(words[i]);\n\
    \    }\n    return res;\n}\n", "\ts = s.toString();\n\ts = s.trim();\n\tvar words\
    \ = s.split(/[,\\s\\n]+/);\n\treturn words;\n}\n", "  var result = s.split(',');\n\
    \  for(var i = 0; i < result.length; i++){\n    result[i] = result[i].trim();\n\
    \  }\n  return result;\n}\n", "  let arr=[];\n  let i=0;\n  for(;i<s.length;i++){\n\
    \    if(s[i].trim()==\"\") break;\n    if(s[i].trim().split(\" \").length>1){\n\
    \      arr.push(s[i].trim().split(\" \"));\n    }\n  }\n  return arr;\n}\n", "\t\
    s = s.toString();\n\tvar s_array = s.split(\", \");\n\ts_array = s_array.map(function(x){return\
    \ x.trim()});\n\treturn s_array;\n}\n", "\ts = s.split(',');\n\tvar n = [];\n\t\
    for(var i in s){\n\t\tn[i] = '' + s[i]\n\t}\n\treturn n;\n}", "  //Split the string\
    \ into words and return it.\n  var words = s.trim().split(/\\s*[,;]\\s*/);\n\n\
    \  return words;\n}\n", "\tvar a = s.split(\" \");\n\treturn a;\n}\n", "\ts =\
    \ s.replace(/\\,+/g,\" \").split(\" \");\n\tfor(i=0;i<s.length;i++){\n\t\ts[s.length]\
    \ = document.getElementById(s[i]).value; //insert into the array\n\t}\n\treturn\
    \ s;\n}\n", "  return s.trim().split(/\\W+/g);\n}\n</textarea></form>\n\n    <script>\n\
    \      var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"),\
    \ {\n        lineNumbers: true,\n        matchBrackets: true,\n        mode: \"\
    javascript\"\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/javascript</code>.</p>\n\n  </article>\n\n<|/ file ext=.html source=github\
    \ |>\n<| c |>\nNote that as of CodeMirror 1.7, the [mode](http://codemirror.net/doc/manual.html#option_mode)\
    \ option is no longer used. Instead `mode` corresponds to the [lexing mode](http://codemirror.net/doc/manual.html#option_mode),\
    \ which is what you want by default.\n<|/ c |>\n<| a tags=codemirror,javascript,editor\
    \ |>\nAs mentioned by others, you can use the mode option to define the language\
    \ and use CodeMirror.defineMIME to define your MIME types as well. See http://codemirror.net/doc/manual.html#option_mode\
    \ for more.\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe mode option allows you to\
    \ define a new language. The simplest mode is CodeMirror.mode. From the documentation:\n\
    \nCodeMirror.mode returns a CodeMirror object initialized to either a\n  particular\
    \ mode (specified as the string parameter that the\n  mode option was given) or\
    \ the base mode that you have already\n  loaded. It is undefined if you have not\
    \ loaded any modes. In case\n  of the string \"null\", this will return a mode\
    \ that does not\n  start a mode.\n\nThe MIME types for the mode are defined by\
    \ CodeMirror.defineMIME. In case you have not loaded any modes, then you will\
    \ need to define your own:\n<code>\nCodeMirror.defineMIME(\"text/x-custom-mode\"\
    , \"mymode\");\n</code>\nThe first argument to defineMIME is the name of the language\
    \ (which must be registered with CodeMirror.mode), and the second argument is\
    \ the MIME type that should be used to identify the mode. The third argument is\
    \ the actual mode, as you would pass to CodeMirror.mode.\n<|/ a tags=codemirror,javascript,editor\
    \ |>\n<| a tags=codemirror,javascript,editor |>\nThe mode option in CodeMirror\
    \ is no longer used to define the language. Instead, you should use the defineMode\
    \ function to define a new mode.\nFor example, to define the MIME type text/javascript,\
    \ do this:\n<code>\nCodeMirror.defineMode(\"javascript\", function(conf, parserConf)\
    \ {\n  parserConf.globalVariable = \"text\";\n});\n</code>\nTo define a new language,\
    \ use CodeMirror.defineLanguage.\n<|/ a dscore=1 |>\n<| a tags=codemirror,javascript,editor\
    \ |>\nI used \"text/coffeescript\" in modes and it worked fine\n", "\tvar words\
    \ = s.split(/,|\\s+/);\n\treturn words;\n}\n", "\tvar words = s.split(',').map(function(i){return\
    \ i.trim()});\n\treturn words;\n}\n", "\tvar words=s.split(',');\n\tvar count=0;\n\
    \tvar str=\"\";\n\tvar arr=[];\n\tfor(var i=0;i<words.length;i++){\n\t\tstr+=words[i]+\"\
    ,\";\n\t\tcount+=1;\n\t\tif(i==(words.length-1)){\n\t\t\tarr=str.split(\",\");\n\
    \t\t\tcount=arr.length;\n\t\t}\n\t}\n\treturn arr;\n}\n", "  s = s.split(/,/).join(\"\
    \ \");\n  s = s.split(/ /);\n  return s.map(function(word) {\n    return word.replace(/^\\\
    s+|\\s+$/g,\"\");\n  }).filter(function(word){\n    return word != \"\";\n  });\n\
    }\n", "  var words = s.replace(/[,\\s\\W]+/g, ' ').trim().split(' ');\n  return\
    \ words;\n}\n", "\tvar strArr=s.split(',');\n\tvar result=[];\n\tfor(var i=0;i<strArr.length;i++){\n\
    \t\tvar items=strArr[i].split(' ');\n\t\tfor(var j=0;j<items.length;j++){\n\t\t\
    \tresult.push(items[j]);\n\t\t}\n\t}\n\treturn result;\n}", "    words = s.replace(/[,\\\
    s\\n]/g,' ').trim().split(\" \");\n    return words;\n}\n", "  var words = s.split('\
    \ ');\n  return words;\n}\n", "  return s.toString().replace(/[,\\s]+/g,\" \"\
    );\n}\n", "\treturn s.split(\",\").map(function(s){\n\t\treturn s.trim();\n\t\
    });\n}\n", "\tlet result = [];\n\tlet words = s.replace(/,| /g, '').split(' ');\n\
    \tfor(let word of words){\n\t\tresult.push(word.trim());\n\t}\n\treturn result;\n\
    }\n", "    return s.split(\",\").map(function(w){\n        return w.trim();\n\
    \    });\n}\n", "\tvar w = s.toLowerCase().replace(/[\\s,]+/g, \",\").split(/,+/g);\n\
    \tw = w[w.length-1].split(/(\\s+)/);\n\treturn w;\n}\n", "  // Split string and\
    \ remove extra spaces\n  var wordArray = s.replace(/,/g,' ').split(\" \");\n \
    \ return wordArray;\n}\n", "  return s.split(/\\s*,\\s*/);\n}\n", "\ts = s.split(\"\
    \ \");\n\treturn s;\n}\n", "  return s.split(',').map(function(word){\n    return\
    \ word.trim();\n  });\n}\n", "  var words = s.toString().split(/,\\s+/);\n  return\
    \ words.map(function(word){return word.toLowerCase();});\n}\n", "  let str = s.toString().replace(/,\\\
    s?/g, ' ');\n  let arr = str.trim().split(' ');\n  return arr;\n}\n", "  // Split\
    \ the string into an array of words\n  var words = s.split(', ');\n  if(words.length\
    \ === 1){\n    return words;\n  } else {\n    // Sort the array of words\n   \
    \ words.sort();\n    return words;\n  }\n}\n", "  return s.split(/[, ]+/g);\n\
    }\n", "\tvar words = s.split(\",\");\n\twords.sort(function(a,b){return a.length\
    \ - b.length});\n\treturn words;\n}\n", "\tvar tokens = s.replace(/([,\\s])/g,\"\
    \").split(\" \");\n\tvar words = [];\n\tfor(var i=0; i<tokens.length; i++){\n\t\
    \tif(isNaN(tokens[i]))\n\t\t\twords.push(tokens[i]);\n\t}\n\treturn words;\n}\n",
  "    var words = s.split(/,+/g);\n    words.splice(0, 1);\n    return words;\n}\n",
  "    var a = s.split(/,/);\n    var c = [];\n    for(var i=0;i<a.length;i++){\n\
    \        if(a[i]!=undefined){\n            var d = a[i].split(/ /);\n        \
    \    c.push(d);\n        }\n    }\n    return c;\n}\n", "  return s.split(/,\\\
    s+/);\n}\n", "  // Your code here\n  var myArray = s.split(' ');\n  return myArray;\n\
    }\n", "    return s.split(/[^a-zA-Z ]+/);\n}\n", "    s=s.toString().trim();\n\
    \    var a=[];\n    var i,j,k=0;\n    for (i=s.length-1;i>=0;i--){\n        if\
    \ (s[i]!=' ')\n            a[++k]=s.substring(0,i);\n        if (s[i+1]==',')\n\
    \            a[++k]=s.substring(i+2,i+4);\n    }\n    return a;\n}\n", "  return\
    \ s.trim().replace(/[,]+/, ' ').split(' ')\n}\n", "    // Split your string into\
    \ an array of words separated by commas\n    var words = s.split(/,|\\s+/);\n\
    \    // Return an array containing each individual word in the string\n    return\
    \ words;\n}\n", "    return s.split(',');\n}\n", "\tvar array = s.split(',');\n\
    \tvar words = [];\n\tfor (var i = 0; i < array.length; i++){\n\t\twords.push(array[i]);\n\
    \t}\n\treturn words;\n}\n", "  var array = s.split(' ');\n  \n  for(var i = 0,\
    \ len = array.length; i < len; i++){\n    array[i] = array[i].toLowerCase();\n\
    \  }\n  return array;\n}\n", "  return s.split(',').map(function(word){\n    return\
    \ word.trim();\n  })\n}\n", "  var words = s.split(/,/);\n  words.forEach(function(word){\n\
    \    words[words.length-1] = word;\n  })\n  return words;\n}\n", "  var arr =\
    \ s.split(',');\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]==undefined){\n\
    \      arr.splice(i,1);\n    }\n  }\n  return arr;\n}\n", "  var split = s.split(/,|\\\
    s/);\n  var newArray = [];\n  for(var i=0;i<split.length;i++){\n    newArray.push(split[i]);\n\
    \  }\n  return newArray;\n}\n", "  s = s.split(\"\");\n  s = s.filter(Boolean);\n\
    \  return s;\n}\n", "    var words = s.split(/[, ]+/);\n    return words;\n}\n",
  "  var arr = s.split(/,|\\s|,/);\n  var arr2 = [];\n  var i,l;\n  for (i = 0, l\
    \ = arr.length; i < l; i++) {\n    if (arr[i].length > 1 && arr[i] != \" \") {\n\
    \      arr2.push(arr[i].trim());\n    }\n  }\n  return arr2;\n}\n", "\tvar split_str\
    \ = s.split(\" \");\n\tvar res = [];\n\tfor(var x = 0; x < split_str.length; x++){\n\
    \t\tres.push(split_str[x]);\n\t}\n\treturn res;\n}", "  var words = s.split(/,|\
    \ /g);\n  words.shift();\n  return words;\n}", "  return s.split(' ');\n}\n",
  "  return s.split(\",\").map(x => x.trim());\n}\n", "\treturn s.trim().split(/[\\\
    s,]+/);\n}\n", "\treturn s.split(/,/).map(function(s){\n\t\treturn s.replace(/[,\\\
    s]+/g, \"\").trim();\n\t});\n}\n", "  var a = s.split(', ').map(function (s) {\n\
    \    return s.trim()\n  })\n  return a.map(function (s) {\n    return s.toLowerCase()\n\
    \  })\n}\n", "    return s.split(',').map(function(word){return word.trim()});\n\
    }\n", "    //split the string into a string array\n    //of words split by comma\
    \ , or space\n    var arr = s.split(', ');\n\n    //return an array of words\n\
    \    return arr;\n}\n", "\tvar words = [];\n\tvar string = s.replace(/\\s+/g,'\
    \ ');\n\tvar words = string.split(',');\n\treturn words;\n}\n", "    return s.split(\"\
    ,\").map(function(s){return s.trim();});\n}\n", "  // Split string into array\
    \ of words by spaces and commas.\n  var words = s.split(/\\s+|,/g);\n  return\
    \ words;\n}\n", "  s = s.trim();\n  var a = [];\n  var words = s.split(\",\");\n\
    \  for(var i=0;i<words.length;i++){\n    a.push(words[i].trim());\n  }\n  return\
    \ a;\n}\n", "\tvar tokens = s.split(/,|\\s+/);\n\tvar result = [];\n\tfor(var\
    \ i = 0; i < (tokens.length - 1); i++) {\n\t\tresult.push(tokens[i + 1]);\n\t\
    }\n\tresult.push(tokens[tokens.length - 1]);\n\treturn result;\n}\n", "  var strArr\
    \ = s.split(',');\n  var arr = [];\n  for(var i = 0, j = strArr.length; i < j;\
    \ i++){\n    arr.push(strArr[i]);\n  }\n  return arr;\n}\n", "  s = s.trim();\n\
    \  var re = /(\\w+\\W*){1,}/g;\n  var words = s.match(re);\n  return words.map(function(d){\n\
    \    return d.trim();\n  });\n}\n</cell>\n<cell>", "\tvar arr = s.split(/,|\\\
    s+/);\n\treturn arr;\n}\n", "\treturn s.split(/,|\\s/);\n}\n", "\tvar arr = s.split(\"\
    \ \");\n\tvar words = [];\n\tfor (var i=0;i<arr.length;i++){\n\t\twords.push(arr[i]);\n\
    \t}\n\treturn words;\n}\n", "    words = s.trim().toLowerCase().split(',');\n\
    \    // console.log(words);\n    return words;\n}\n", "\treturn s.split(',').map(function(word){\n\
    \t\treturn word.trim();\n\t});\n}\n", "  if(s === null){\n    return [];\n  }\n\
    \  var words = s.trim().split(/,|\\s/);\n  var wordsArr = [];\n  for(var i = 0;\
    \ i < words.length; i++){\n    wordsArr.push(words[i].trim());\n  }\n  return\
    \ wordsArr;\n}\n", "  return s.split(\",\").map(function (str) {\n    return str.trim();\n\
    \  });\n}\nvar words_string__default = 'Hi, my name is John'.split(', ');\n",
  "\tvar arr = s.split(/,|, | /);\n\tfor(var i in arr){\n\t\tarr[i] = arr[i].toLowerCase().replace(/\\\
    s/g,'');\n\t}\n\treturn arr;\n}\n", "  var words = s.toLowerCase().split(/,/);\n\
    \  for(var i = 0; i<words.length; i++)\n  {\n     words[i] = words[i].trim();\n\
    \  }\n  return words;\n}\n", "\tvar words = new Array();\n\tvar delimiter = ',';\n\
    \tvar current_word = '';\n\tvar i = 0;\n\twhile(i < s.length){\n\t\tcurrent_word\
    \ = s.substr(i,delimiter.length);\n\t\tif(current_word != \"\"){\n\t\t\twords.push(current_word);\n\
    \t\t\tcurrent_word = '';\n\t\t}\n\t\ti = i+delimiter.length;\n\t}\n\treturn words;\n\
    }\n", "\tvar splitStr = s.split(/,| /);\n\tvar res = [];\n\tfor(var i=0;i<splitStr.length;i++){\n\
    \t\tres.push(splitStr[i].trim());\n\t}\n\treturn res;\n}\n", "  return s.split(/,|\\\
    s+/);\n}\n", "    var w = [];\n    if(s.length > 0) w.push(s.split(\" \"))\n \
    \   return w;\n}\n", "\treturn s.split(',');\n}\n", "  var words = s.split(' ');\n\
    \  var wordArray = new Array();\n  var i = 0;\n  while(i < words.length){\n  \
    \  wordArray[i] = words[i];\n    i++;\n  }\n  return wordArray;\n}\nvar wordArray\
    \ = words_string(str);\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis is my\
    \ first programming language and I'm not too familiar with arrays and stuff, but\
    \ thank you so much!\n<|/ c |>\n<| c |>\nNo problem, if you're having trouble\
    \ getting to the basics of arrays, try [this tutorial](http://www.tutorialspoint.com/java/java_arrays.htm)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nvar str = \"Hi, my name is John\";\nvar words\
    \ = str.split(\" \");\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 tags=java,arrays\
    \ |>\nYou could use split method, which return an array of String objects. \n\
    <code>\nString str = \"Hi, my name is John\";\nString[] words = str.split(\" \"\
    );\n</code>\n<|/ a |>\n<| a |>\nYou can get an Array of String by \n<code>\nstr.split(\"\
    \ \");\n</code>\n<|/ a dscore=0 tags=java,arrays |>\n<| a dscore=0 |>\nI hope\
    \ this helps you.\n<code>\n public static void main(String[] args) {\n    Scanner\
    \ sc = new Scanner(System.in);\n    System.out.println(\"Enter a sentence\");\n\
    \    String s = sc.nextLine();\n    System.out.println(\"Word Array:\");\n   \
    \ String[] wordsArray = s.split(\" \");\n    for(int i=0;i<wordsArray.length;i++){\n\
    \        System.out.println(wordsArray[i]);\n    }\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\nYou can create a String array by using the split method\
    \ as mentioned by others, but you can also use the split method from String class\
    \ as well.\n<code>\nimport java.util.Scanner;\n\npublic class StringTest {\n \
    \   public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        System.out.println(\"Enter a sentence\");\n        String s = sc.nextLine();\n\
    \        String[] wordsArray = s.split(\" \");\n        for(int i=0;i<wordsArray.length;i++){\n\
    \            System.out.println(wordsArray[i]);\n        }\n    }\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| a tags=java,arrays dscore=0 |>\nThis is my first\
    \ programming language and I'm not too familiar with arrays and stuff, but thank\
    \ you so much!\n\n", "\treturn s.split(/,|\\s/);\n}", "\ts = s.replace(/\\s+/g,\
    \ ' ').split(' ');\n\tvar words_array = s.map(function(s){return s.trim();});\n\
    \treturn words_array;\n}\n", "  var words = s.split(',');\n  return words;\n}\n",
  "    var words = s.toString().toLowerCase().split(\",\");\n    var result = [];\n\
    \    for(var i in words){\n        result.push(words[i]);\n    }\n    return result;\n\
    }\n", "    s = s.replace(/^\\s+|\\s+$/g,\"\");\n    var words = s.replace(/[ ]+/g,\
    \ ' ').split(' ');\n    return words;\n}", "  return s.split(',').map(function(x){\n\
    \    return x.trim();\n  });\n}\n", "  let arr = [];\n  s = s.split(',').map((x)=>{\n\
    \    let words = x.trim().split(/\\s+/);\n    let i = words[0].length\n    for(let\
    \ i=0;i<words.length;i++){\n      if(words[i].length>i){\n        i = words[i].length\n\
    \      }\n    }\n    while(arr[i]&&arr[i].length<i){\n      arr[i] = ''\n    }\n\
    \    arr[i] += words[i]\n    return arr\n  });\n  return arr;\n}\n", "  var words\
    \ = [];\n  s = s.toLowerCase().replace(/,/g, '');\n  s = s.trim();\n  var tempArray\
    \ = [];\n  for(var i = 0; i <= s.length; i++){\n    var letter = s.charAt(i);\n\
    \    if(letter === ',' || letter === ' '){\n      words.push(tempArray);\n   \
    \   tempArray = [];\n      continue;\n    }\n    tempArray.push(letter);\n  }\n\
    \  words.push(tempArray);\n  return words;\n}\n", "  s=s.replace(/\\s/g,\" \"\
    );\n  let arr=s.split(\",\");\n  return arr;\n}\n", "  let words = s.split(',').map(s=>s.trim())\n\
    \  let result = [];\n  for(let i=0;i<words.length;i++){\n    result.push(words[i])\n\
    \  }\n  return result;\n}\n", "\ts = s.toLowerCase().replace(/[^a-z ]/g,\"\");\n\
    \tvar str = s.split(/,/g);\n\tfor(var i = 0;i<str.length;i++){\n\t\tstr[i] = str[i].split(\"\
    \ \");\n\t}\n\treturn str;\n}\n", "    var w = s.split(/[\\s,]+/);\n    return\
    \ w;\n}\n", "  return s.replace(/((\\s)+)(,|$)/g, \" \").replace(/(\\w)(\\W|$)/g,\"\
    $1$2\").split(\" \");\n}\n", "\tvar words = [];\n\t\n\tif(typeof s == \"string\"\
    ){\n\t\ts = s.split(', ');\n\t}\n\n\tfor(var i = 0, len = s.length; i < len; i++){\n\
    \t\tvar word = s[i].replace(/[, ]+/g, ' ').trim();\n\t\tif(word != \"\"){\n\t\t\
    \twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n", "\tvar words = s.split(\"\
    \ \");\n\tvar return_string = [];\n\n\tfor(var i=0;i<words.length;i++){\n\t\t\
    return_string.push(words[i]);\n\t}\n\n\treturn return_string;\n}\n", "    var\
    \ w=[],i=0,j=0;\n    while(s.length>0){\n        j = s.indexOf(\",\",i);\n   \
    \     if(j<0){\n            w.push(s.substr(i,s.length));\n            i = s.length;\n\
    \        }\n        else{\n            w.push(s.substr(i,j));\n            i=j+1;\n\
    \        }\n    }\n    return w;\n}\n", "  var arr = [];\n  var split = s.split(',');\n\
    \  split.forEach(function (word) {\n    arr.push(word.trim());\n  });\n  return\
    \ arr;\n}\n", "\tvar ws=s.split(' ');\n\tvar result=[];\n\tfor(var i=0;i<ws.length;i++){\n\
    \t\tresult.push(ws[i]);\n\t}\n\treturn result;\n}\n", "\tlet words = [];\n\tlet\
    \ splits = s.split(', ');\n\tsplits.forEach(split=>{\n\t\tif(split === \" \"){\n\
    \t\t\tsplits.splice(splits.indexOf(split),1);\n\t\t}else{\n\t\t\twords.push(split.toLowerCase().trim());\n\
    \t\t}\n\t})\n\treturn words;\n}\n", "  return s.split(/\\,| /);\n}\n", "\ts =\
    \ s.split(/,/);\n\ts = s.split(/ /);\n\t\n\tfor(var i = 0; i < s.length; i++)\n\
    \t\ts[i] = s[i].toLowerCase();\n\t\t\n\treturn s;\n}\n", "    var words = s.replace(/[\\\
    s,]+/g,\" \").split(\" \");\n    return words;\n}", "\tvar split;\n\tvar array\
    \ = [];\n\tvar words = s.split(/,+/);\n\tfor(var i in words){\n\t\tsplit = words[i].split(\"\
    \ \");\n\t\tarray[i] = split;\n\t}\n\treturn array;\n}\n", "    return s.toString().split(/,/);\n\
    }\n", "    words = s.replace(/[\\s,]+/g,\" \").split(\" \");\n    return words;\n\
    }\n</textarea></div>\n\n<button onclick=\"document.getElementById('light').style.display='block'\"\
    >Display Light</button>\n\n<button onclick=\"document.getElementById('fade').style.display='block'\"\
    >Display Fade</button>\n\n<button onclick=\"document.getElementById('rotate').style.display='block'\"\
    >Display Rotate</button>\n\n<button onclick=\"document.getElementById('rotate180').style.display='block'\"\
    >Display Rotate180</button>\n\n<button onclick=\"document.getElementById('scale').style.display='block'\"\
    >Display Scale</button>\n\n<button onclick=\"document.getElementById('scale2').style.display='block'\"\
    >Display Scale2</button>\n\n<button onclick=\"document.getElementById('scale3').style.display='block'\"\
    >Display Scale3</button>\n\n<br>\n<div id=\"light\" style=\"display:none;\">\n\
    <p>\n    Light<br>\n    <textarea id=\"text\" style=\"height:100px\"></textarea>\n\
    </p>\n</div>\n\n<br>\n<div id=\"fade\" style=\"display:none;\">\n<p>\n    Fade<br>\n\
    \    <textarea id=\"text2\" style=\"height:100px\"></textarea>\n</p>\n</div>\n\
    \n<br>\n<div id=\"rotate\" style=\"display:none;\">\n<p>\n    Rotate<br>\n   \
    \ <textarea id=\"text3\" style=\"height:100px\"></textarea>\n</p>\n</div>\n\n\
    <br>\n<div id=\"rotate180\" style=\"display:none;\">\n<p>\n    Rotate180<br>\n\
    \    <textarea id=\"text4\" style=\"height:100px\"></textarea>\n</p>\n</div>\n\
    \n<br>\n<div id=\"scale\" style=\"display:none;\">\n<p>\n    Scale<br>\n    <textarea\
    \ id=\"text5\" style=\"height:100px\"></textarea>\n</p>\n</div>\n\n<br>\n<div\
    \ id=\"scale2\" style=\"display:none;\">\n<p>\n    Scale2<br>\n    <textarea id=\"\
    text6\" style=\"height:100px\"></textarea>\n</p>\n</div>\n\n<br>\n<div id=\"scale3\"\
    \ style=\"display:none;\">\n<p>\n    Scale3<br>\n    <textarea id=\"text7\" style=\"\
    height:100px\"></textarea>\n</p>\n</div>\n\n<script>\nvar text = document.getElementById('text');\n\
    var text2 = document.getElementById('text2');\nvar text3 = document.getElementById('text3');\n\
    var text4 = document.getElementById('text4');\nvar text5 = document.getElementById('text5');\n\
    var text6 = document.getElementById('text6');\nvar text7 = document.getElementById('text7');\n\
    \nvar words;\nvar i;\nvar j;\nvar light;\n", "  var result = s.split(/,\\s?/);\n\
    \  return result;\n}\n", "\tvar tokens = s.split(',');\n\tvar result = [];\n\t\
    \n\tfor(var i = 0; i < tokens.length; i++){\n\t\tresult.push(tokens[i]);\n\t}\n\
    \treturn result;\n}\n", "    var words = s.split(',');\n    words.shift();\n \
    \   return words;\n}", "    let words = s.split(', ');\n    return words;\n}\n",
  "  var split_string=s.split(',').map(function(str){return str.trim();});\n  return\
    \ split_string;\n}\n</code>\n<|/ a tags=javascript,string,arrays dscore=0 |>\n\
    <| c |>\nThis doesn't handle spaces correctly (see the example in the OP's question).\n\
    <|/ c |>\n<| c |>\nI dont know why it is working on codepen.io and not on my browser.\
    \ It still outputs an empty array on console.\n<|/ c |>\n<| c |>\nThanks for the\
    \ feedback, I updated my answer to include this case too.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  return s.split(',').map(function(word){\n    return word.trim();\n\
    \  });\n}\n", "  return s.split(' ');\n}\n", "  var words = s.replace(/([a-zA-Z0-9]+)/g,\
    \ \"\").split(\" \");\n  words = words.filter(function(word){\n    return word\
    \ != \"\";\n  });\n  return words;\n}\n", "    str = s.split(/,|\\s/);\n    words_array\
    \ = [];\n    for (var i = 0; i < str.length; i++){\n        words_array.push(str[i]);\n\
    \    }\n    return words_array;\n}\n", "    var words_list = s.split(',');\n \
    \   var words = [];\n\n    var words_list = s.split(',');\n\n    for (var i =\
    \ 0; i < words_list.length; i++) {\n        if (words_list[i] == \"\") {\n   \
    \         continue;\n        }\n\n        var word = words_list[i].trim();\n \
    \       words.push(word);\n    }\n\n    return words;\n}", "\tvar list = s.split(\"\
    ,\");\n\tvar new_list = new Array();\n\tfor(var i=0; i<list.length; i++){\n\t\t\
    var word = list[i];\n\t\tvar word = word.replace(/^\\s+|\\s+$/g,\"\");\n\t\tvar\
    \ word = word.replace(/^\\s+/g,\"\");\n\t\tvar word = word.replace(/\\s+/g,\"\"\
    );\n\t\tnew_list.push(word);\n\t}\n\treturn new_list;\n}\n", "\tvar mySplit =\
    \ s.split(/, +/g);\n\tconsole.log(\"Split Result\", mySplit);\n\treturn mySplit;\n\
    }\n", "\ts = s.split(\" \");\n\ts = s.filter(function(word){\n\t\treturn word;\n\
    \t});\n\treturn s;\n}\n", "\tvar arr = s.split(/\\W+/);\n\treturn arr;\n}\n",
  "\treturn s.split(/,+/g);\n}\n", "\tvar str = s.trim().split(/[ ,]+/);\n\treturn\
    \ str;\n}", "    return s.split(/,/).map(function(s){\n        return s.trim();\n\
    \    });\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nFor anyone stumbling on this\
    \ thread, please note that the following code would not work at all because the\
    \ map function returns a new array:\n<code>\nconst words = ['Hello', 'world',\
    \ '!'].map(word => word);\n</code>\nWhat I needed was to return an array, and\
    \ not the new array created by map().\n<code>\nconst words = ['Hello', 'world',\
    \ '!'];\nconst wordList = words.map(word => word);\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a tags=javascript |>\n<code>", "\tvar words = [];\n\ts.replace(/\\,/ig,\"\
    \ \").split(\" \").forEach(function(word){\n\t\tif (word) words.push(word);\n\t\
    });\n\treturn words;\n}\n", "    var words = s.toLowerCase().split(/,\\s+/);\n\
    \    return words.filter(function(word){\n        return word !== \"\";\n    });\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
