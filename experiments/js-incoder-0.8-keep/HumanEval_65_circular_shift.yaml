name: HumanEval_65_circular_shift
language: js
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x, shift){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12,\
  \ 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12,\
  \ 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"
completions: ["  return x.toString().split('').reverse().join('') + shift.toString();\n\
    }\n", "\tvar sign = 1;\n\tif (x < 0)\n\t\tsign = -1;\n\tx = Math.abs(x);\n\tvar\
    \ digits = sign * (Math.floor(Math.abs(x)/Math.pow(10, shift))%Math.pow(10, shift));\n\
    \treturn digits == 0 ? '0' : digits;\n}\n", "  if (shift > x.length) shift = x.length;\n\
    \  var result = \"\";\n  for (var i=0; i<shift; i++){\n    result = x.charAt(x.length-shift-1-i)\
    \ + result;\n  }\n  return result;\n}\n", "    var digits = \"\" + Math.abs(x);\n\
    \    shift = shift > 0 ? shift : shift < 0 ? -shift : -1;\n    if(shift < 0){\n\
    \        digits = digits.split(\"\").reverse().join(\"\");\n        shift = 0;\n\
    \    }\n    var result = \"\";\n    for(var i = 0; i < digits.length; i += shift){\n\
    \        result = digits[i] + (result || \"\");\n    }\n    return result;\n}\n",
  "    var digits = shift < 0 ? Math.ceil(x/Math.pow(10, shift)) : Math.floor(x/Math.pow(10,\
    \ shift));\n    return Array(digits).join(Array((shift-digits)+1).join(\"0\"));\n\
    }\n", "  shift = shift || 1;\n  if(x >= Math.pow(10, shift)) x = x - Math.pow(10,\
    \ shift);\n  return String(x);\n}\n", "  var digits = String(Math.abs(x)).split(\"\
    \").reverse();\n  if (shift > digits.length){\n    return digits.reverse();\n\
    \  }\n  if (shift < -digits.length){\n    return digits.reverse().split(\"\").reverse();\n\
    \  }\n  var result = [];\n  while(digits.length){\n    result.unshift(digits.shift());\n\
    \    if (digits.length + shift < 0){\n      result.unshift(\"0\");\n      shift--;\n\
    \    }\n  }\n  return result.join(\"\");\n}\n", "  if (shift > x.length){\n  \
    \  return parseInt(x.toString().split(\"\").reverse().join(\"\"));\n  }\n  else\
    \ {\n    return parseInt(x.toString() + \"\".split(\"\").reverse().join(\"\").split(\"\
    \").shift(shift).join(\"\"));\n  }\n}\n", "  var digits = \"\",\n      temp =\
    \ \"\",\n      n = x;\n  shift %= LOG_BASE;\n  if(n<0) return digits + \"-\";\n\
    \  while(shift > 0) digits += (temp=digits.slice(0,digitsLength=digits.length))\
    \ + digits.charAt(--n);\n  digits = digits.reverse().slice(0,digitsLength=digits.length);\n\
    \  while(digitsLength>shift) digits += (temp=digits.slice(digitsLength - shift,\
    \ digitsLength)).charAt(0);\n  return digits;\n}", "    var result = \"\";\n \
    \   var shift_bits = shift % 8;\n    for (var i = shift_bits; i > 0; i--){\n \
    \       if (x >> i >= 8){\n            result += String.fromCharCode(x >> i);\n\
    \        }\n    }\n    return result + String.fromCharCode(x & 7 - shift_bits);\n\
    }\n", "  return _s.repeat(x, _s.ceil(Math.log(x) / Math.LN2 | 0) + shift - _s.ceil(Math.log(x\
    \ / Math.pow(10, shift))/Math.LN10 + 1e-7) + 1) + '';\n}\n", "    shift = shift\
    \ || 0;\n    if (x >= Math.pow(10,shift)) x = x - (Math.pow(10,shift) - x)\n \
    \   var result = x.toString();\n    while (x>Math.pow(10,shift)) result = result+String.fromCharCode(x%26+26);\n\
    \    while (x<-Math.pow(10,shift)) result = result+String.fromCharCode(-(x%26+26));\n\
    \    return result;\n}\n", "    if (shift > x.length) return x.split(\"\").reverse().join(\"\
    \");\n    if (shift === 0) return x;\n    shift = shift || 1;\n    return x.split(\"\
    \").reverse().slice(shift, x.length + shift).join(\"\");\n}\n", "    var digits\
    \ = String(x).split(\"\");\n    while (shift > digits.length) digits = digits.reverse().join(\"\
    \");\n    if (shift < digits.length) digits = digits.substr(0, shift).reverse().join(\"\
    \");\n    return digits;\n}\n", "\tvar digits = x.toString().split('');\n\tshift\
    \ = shift % digits.length;\n\tdigits.reverse();\n\treturn digits.concat(digits.splice(0,\
    \ shift)).reverse().join('');\n}\n\n", "    shift = shift || 0; // shift could\
    \ be undefined\n\n    if (shift > Number.MAX_SAFE_INTEGER) { // shift may be greater\
    \ than Number.MAX_SAFE_INTEGER\n        // shift is greater than Number.MAX_SAFE_INTEGER\
    \ so shift % Number.MAX_SAFE_INTEGER equals\n        // shift % Number.MAX_INTEGER\n\
    \        shift = shift % Number.MAX_INTEGER;\n    }\n\n    var digits = String(Math.abs(x)).split('').concat(Array(shift\
    \ + 1).join('0'));\n    return digits.reverse().join('');\n}\n</code>\n<|/ a |>\n\
    <| c |>\nGreat answer but please don't use [parseInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)!\n\
    <|/ c |>\n<| a tags=javascript |>\nI like's answer, but I want to offer an alternative\
    \ solution that doesn't involve the use of string concatenation or a loop.\nAs\
    \ I understand it, you don't care whether you use radix or not. So, I thought\
    \ I would try it anyway, but to my surprise it also works with non-numeric strings.\
    \ In fact, it works with all strings, whether they contain digits or not. Here's\
    \ how I tested it:\n<code>", "    var result = \"\";\n    while (shift > 0){\n\
    \        result = digits_to_char(shift_digit(x, shift));\n        shift--;\n \
    \   }\n    return shift_digit(x, -shift);\n}\n", "    var digits = String(x).split(\"\
    \"),\n        index = digits.length + shift,\n        left = digits.slice(0, index),\n\
    \        right = digits.slice(index);\n\n    return left + right.join(\"\");\n\
    }\n", "  if(shift == 0) return x;\n  var digits = x.toString().split('');\n  var\
    \ digit;\n  if(shift < 0){\n    digit = parseInt(digits.pop(), 10);\n    shift\
    \ = -shift;\n  }\n  else{\n    digit = parseInt(digits.shift(), 10);\n    shift\
    \ = (shift % digits.length);\n  }\n  if(shift > digits.length) shift = digits.length;\n\
    \  for(var i = 0; i < shift; i++) digit = digit.times(2);\n  return digit.join('');\n\
    }\n\nmodule.exports = CircularInteger_;\n\n\n},{\"./Integer\":11}],23:[function(require,module,exports){",
  "  var digits = \"\";\n  for(var i = x.toString().length - 1; i >= shift; i--)\n\
    \    digits = digits+x.toString().charAt(i);\n  return digits;\n}\n", "    var\
    \ digits = \"\";\n    var i;\n    for (i = shift > x.length ? x.length : shift;\
    \ i > 0; i--){\n        digits += x.charAt(x.length - i - 1);\n    }\n    return\
    \ digits;\n}\n", "\tvar digits, shifted_digits;\n\n\tif (shift > x.length){\n\t\
    \tdigits = x.toString().split(\"\").reverse().join(\"\");\n\t\treturn digits.length\
    \ - shift + 1 || digits + digits.slice(0, shift);\n\t}\n\n\tshifted_digits = x.toString().split(\"\
    \").slice(0,shift).reverse().join(\"\");\n\tdigits = x.toString().split(\"\").slice(shift).reverse().join(\"\
    \");\n\treturn digits.length - shift + 1 || digits + shifted_digits;\n}\n", " \
    \   var digits, i, ii, j, k, kk;\n    \n    // Things are circular in digits to\
    \ the left when shifting right\n    // and circular in digits from the left when\
    \ shifting left. \n    // So shift the left by (shift-1)%8 and shift the right\
    \ by \n    // (shift-digits)%8 instead.\n    shift = shift % 8;\n    \n    digits\
    \ = x.toString();\n    digits = digits.length - 1;\n    \n    i = ((shift + digits\
    \ - 1) % 8) + 1;\n    j = ((shift + (digits - 1 + 8) % 8) + 8) % 8;\n    \n  \
    \  // Reverse the digits before shifting right. \n    for(kk = digits - i; kk\
    \ >= 0; kk--) \n        digits = digits.replace(new RegExp('\\\\b'+ kk +'(?!\\\
    \\d)', 'g'), String.fromCharCode(32));\n    \n    // Reverse the digits after\
    \ shifting left. \n    for(kk = i - 1; kk >= 0; kk--) \n        digits = digits.replace(new\
    \ RegExp('\\\\b'+ kk +'(?!\\\\d)', 'g'), String.fromCharCode(32));\n    \n   \
    \ return parseInt(digits, 2);\n}\n", "  shift = shift | 0;\n  var digits = numToString(x);\n\
    \  if(shift > digits.length){\n    digits = digits.reverse();\n  }\n  return digits.shift(shift);\n\
    }\n\n", "\tshift = shift || 1;\n\tvar digits = x.toString().split('');\n\twhile(shift\
    \ < 0){\n\t\tdigits = digits.reverse();\n\t\tshift++;\n\t}\n\t\n\tfor(var i =\
    \ 0; i < digits.length; i++){\n\t\tdigits[i + shift] = digits[i];\n\t}\n\t\n\t\
    return digits.reverse().join('');\n}\n", "  return new BigInteger(x.toString()).modPowInt(BigInteger(shift,10),\
    \ modulo).divide(modulo).toString(10);\n}\n", "    var n = shift + 1;\n    var\
    \ s = Math.abs(n);\n    var n_str = n.toString();\n    var s_str = s.toString();\n\
    \    \n    // Add leading zeros if the number is lower than 10\n    if(n_str.length\
    \ < s_str.length){\n        for(var i = 0; i < s_str.length; i++){\n         \
    \   if(s_str[i] === '0'){\n                n_str += '0';\n            }\n    \
    \        else{\n                n_str += '0';\n            }\n        }\n    }\n\
    \    \n    // Circularly shift the digits\n    while(n > 0){\n        var first_index\
    \ = parseInt(n_str.length - 1);\n        var last_index = parseInt(n_str.length\
    \ - 1);\n        \n        // Remove leading zeros to match the length of the\
    \ integer to be shifted\n        while(first_index > 0 && n_str[first_index -\
    \ 1] === '0'){\n            first_index--;\n        }\n        while(last_index\
    \ > 0 && n_str[last_index - 1] === '0'){\n            last_index--;\n        }\n\
    \        \n        // Shift digits\n        n_str = n_str.substring(first_index\
    \ - shift, last_index + shift);\n        \n        // Add the leading zeros if\
    \ number is lower than 10\n        while(first_index < 0){\n            n_str\
    \ = '0' + n_str;\n            first_index++;\n        }\n        while(last_index\
    \ < 0){\n            n_str = '0' + n_str;\n            last_index++;\n       \
    \ }\n        \n        // Return shifted string\n        if((n_str.length + s_str.length)\
    \ === 0){\n            return n_str;\n        }\n    }\n    \n    // Return digits\
    \ reversed\n    return s_str.substring(n_str.length - s_str.length) + n_str.substring(0,\
    \ n_str.length - s_str.length);\n}\n", "  if(!shift) shift = 0;\n  if(shift >\
    \ x.length) return x.toString().split(\"\").reverse().join(\"\");\n  return x.toString().split(\"\
    \").reverse().slice(shift).join(\"\");\n}\n", "  var digits = String(Math.abs(x)).split('');\n\
    \  if (shift == 0) return digits;\n  if (shift > digits.length) return digits.replace(/(.)(?!$)/g,\
    \ '$1,');\n  return digits.replace(/(.)(?!.*\\d)/g, '$1,' + shift).split(',');\n\
    }\n", "    shift = shift || 0;\n    var result = \"\";\n    for(var i = shift\
    \ - 1, l = Math.ceil(Math.log(x) / Math.LN10); i >= 0; i--, l *= 10){\n      \
    \  x = Number(x / Math.pow(10, i));\n        result += l  + x%l;\n    }\n    return\
    \ result;\n}\n", "    var str = \"\" + x,\n        power = Math.pow(10, shift);\n\
    \    return Math.ceil(str / power) * power;\n}\n", "    var parts = numToStr(x).split(\"\
    \");\n    if(parts.length < shift){\n        return parts[parts.length - shift]\
    \ + parts[0];\n    }else{\n        var result = [];\n        var len = parts.length;\n\
    \        while(shift > 0){\n            if(parts[len-1] == \"\"){\n          \
    \      result[result.length] = parts[len-1];\n                break;\n       \
    \     }\n            result.unshift(parts[len-1]);\n            len--;\n     \
    \       shift--;\n        }\n        return result.join(\"\");\n    }\n}\n", " \
    \   var digits = '' + x;\n    while(digits > 0){\n        digits = digits.replace(/\\\
    D/g, '');\n        if( digits.length + shift <= digits.length ){\n           \
    \ break;\n        }\n        shift = shift - digits.length;\n    }\n    return\
    \ digits.split(\"\").reverse().join(\"\");\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nHi Thanks, I am able to get the expected output in the question by following\
    \ the above approach. I added a few more test cases to it but unable to get the\
    \ expected output. Could you please help me in getting that.\n<|/ c |>\n<| c |>\n\
    Can you please check this question too https://stackoverflow.com/questions/68737778/how-to-create-a-new-group-in-javascript\n\
    <|/ c |>\n<| c |>\nHi I tried that as well but got some issues, please checkout\
    \ the question and help me\n<|/ c |>\n<| c |>\nI added a test case to the answer\n\
    <|/ c |>\n<| a tags=javascript,arrays,algorithm,loops |>\nThe key here is that\
    \ the output array should not have duplicate digits. So we first iterate through\
    \ all digits of the input number, and add the digits to a string, which we convert\
    \ to an array and filter. We then reverse the resulting array. We then remove\
    \ all the characters that are not digits in the input number and reverse it again.\
    \ We then join it with a single space, giving us the expected output.\n\n<code>\n\
    const numbers = [\n  \"1324\",\n  \"2345\",\n  \"3456\",\n  \"4567\",\n  \"56789\"\
    ,\n  \"67890\",\n  \"78901\",\n  \"8901\"\n];\n\nconst result = numbers\n  .map(number\
    \ => number.toString())\n  .filter(char => char.match(/^\\d/))\n  .reverse()\n\
    \  .filter((_, index) => index >= numbers.length - 1)\n  .reverse()\n  .join(\"\
    \ \");\n", "    if (shift > x.length) return x.toString();\n    if (shift < -x.length)\
    \ shift = -x.length - shift;\n    var result = \"\";\n    for(var i = 0; i < shift;\
    \ i++){\n        result += x.charAt(x.length - i - 1);\n    }\n    return result;\n\
    }\n", "    var digits = x.toString().split('');\n    if (shift) {\n        for\
    \ (var i=0, len=digits.length; i < len; i++){\n            digits[i] = parseInt(digits[i]+digits[i+1]*Math.pow(10,shift)+digits[i+2]*Math.pow(10,shift-1),\
    \ 10);\n        }\n        digits.reverse();\n    }\n    return digits.join('');\n\
    }\n\nmodule.exports = exports.default;\n},{\"./number\":438}],438:[function(require,module,exports){\n\
    'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n\
    });\nexports.default = isInteger;\n\nvar _assertString = require('./util/assertString');\n\
    \nvar _assertString2 = _interopRequireDefault(_assertString);\n", "\tvar digits\
    \ = String(Math.abs(x)).split('');\n\tif (shift > digits.length){\n\t\tshift =\
    \ digits.length - 1;\n\t}\n\tif (shift < 0) shift = 0;\n\tdigits = digits.splice(0,\
    \ shift + 1).join('') + digits.splice(0, shift).join('');\n\treturn digits;\n\
    }\n", "  var digits = String(Math.abs(x)).split('');\n  if (shift>=digits.length){\n\
    \    shift=digits.length-1;\n  }\n  digits = digits.reverse().slice(0,shift+1);\n\
    \  return digits.join('');\n}", "    if(shift === void 0){\n        shift = 1;\n\
    \    }\n    var numStr = \"\" + x;\n    if (numStr.length <= shift) {\n      \
    \  return numStr;\n    }\n    var x_str = numStr.slice(shift);\n    return x_str\
    \ + numStr.slice(0, shift);\n}\n", "    var digits = x.toString();\n    digits\
    \ = digits.split(\"\").reverse();\n    if (shift == 0){\n        return digits;\n\
    \    } else if (shift > digits.length){\n        var newDigits = digits.reverse();\n\
    \        return newDigits.join(\"\");\n    }\n    else {\n        return digits.slice(shift,\
    \ digits.length + shift).join(\"\");\n    }\n}", "    var digits = Math[typeof(x)===\"\
    string\"?\"charAt\":\"indexOf\"](x),\n        index = 0,\n        reverse = digits\
    \ < 0 ? Math.ceil : Math.floor,\n        result = [];\n\n    // shift < 0\n  \
    \  if (shift < 0){\n        digits = reverse[digits](-digits);\n    }\n    //\
    \ shift >= number of digits\n    if (shift >= digits.length) {\n        digits\
    \ = digits == 0 ? [] : digits;\n        result.reverse();\n        result.push(digits);\n\
    \    }\n    // shift > 0\n    else {\n        while (shift > 0){\n           \
    \ if (digits[index] >= Math.pow(10, shift)){\n                result.push(digits[index]);\n\
    \                index++;\n                shift--;\n            } else {\n  \
    \              break;\n            }\n        }\n    }\n\n    return result.join('');\n\
    }\n", "  var digits = \"\";\n  \n  if (shift > x.length){\n    shift = x.length;\n\
    \  }\n  \n  while (shift > 0){\n    digits = digits + x.charAt(x.length - shift);\n\
    \    x = (parseInt(x,10) << 1) + parseInt(digits,10);\n    shift--;\n  }\n  \n\
    \  return x;\n}\n", "  if(shift > x.length) shift = x.length - shift;\n  if(shift\
    \ < 0) shift = x.length + shift;\n  var result = \"\";\n  while(shift > 0){\n\
    \    result = x.charAt(x.length - shift) + result;\n    shift--;\n  }\n  while(shift\
    \ < 0){\n    result += x.charAt(shift);\n    shift++;\n  }\n  return result;\n\
    }\n</code>\n<|/ a tags=arrays,loops,javascript,string |>\n<| c |>\nWhile this\
    \ code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a dscore=0 tags=arrays,loops,javascript,string\
    \ |>\nI hope this help to someone else.\n<code>\nvar input = '11235813213123';\n\
    var out = '';\nvar numbers = input;\nvar array = [];\nfor(var i=0;i<5;i++){\n\
    \    var number = numbers.charAt(i);\n    array.push(number);\n}\nfor (var i =\
    \ 0; i < array.length; i++) {\n    for (var j=array.length-1; j>i; j--) {\n  \
    \      out += array[j];\n    }\n}", "  shift = shift % x.length;\n  if(shift >\
    \ x.length) shift = x.length - shift;\n  return x.split(\"\").reverse().join(\"\
    \") + x.substr(0, shift);\n}\n</code>\n<|/ a |>\n<| c |>\nI really like the way\
    \ you did this. However after implementing it in my solution I ran into a problem\
    \ when dealing with large integers. I realised that `x.split(\"\").reverse().join(\"\
    \")` is actually causing my program to crash when dealing with larger numbers.\
    \ So I looked into another way of solving this problem and I came up with this:\
    \ `return x.replace(/[^0-9]+/g, (match) => {\n                return match.split(\"\
    \").reverse().join(\"\");\n            });`\n<|/ c |>\n<| c |>\nYeah that's an\
    \ interesting alternative - I've never thought of doing that before, thanks!\n\
    <|/ c |>\n<| a tags=javascript,math,algorithm dscore=1 |>\nAn answer from Benjamin\
    \ W.\n<code>\nvar circular_shift = function(n, shift) {\n  shift = shift % n;\n\
    \  if (shift > n) shift = n - shift;\n  return n.toString().split('').reverse().join('')\
    \ + n.toString().slice(0, shift);\n};\n", "    var digits, i, j, len, result =\
    \ '';\n    \n    if(shift < 0){\n\tshift = shift % mathFloor(log10(Math.abs(x)));\n\
    \    }\n    \n    digits = mathPow(10, shift);\n    \n    if(x >= digits){\n\t\
    result = x;\n    } else {\n\ti = mathFloor(x / digits);\n\tj = x - (digits * i);\n\
    \t\n\tfor(len = digits.length; i--; len--){\n\t    result = digits[len - 1 - (i\
    \ + j)] +result;\n\t    j = i % digits;\n\t}\n\tresult = digits[(digits + j) %\
    \ digits] + result;\n    }\n    \n    return result;\n}\n", "  if(shift == 0)\
    \ return 0;\n  if(shift == 1) return x;\n  if(shift == 2) return x + x;\n  if(shift\
    \ == 3) return x - x;\n  if(shift == 4) return x - x - x;\n  if(shift == 5) return\
    \ x - x - x - x;\n  if(shift == 6) return x - x - x - x - x;\n  if(shift == 7)\
    \ return x - x - x - x - x - x;\n  return x >> shift;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like your solution, however I was expecting a solution that would\
    \ work for any type of input, not just for numbers. My use case is for a generic\
    \ \"circular-shift\" function that I can apply to any input, as long as the input\
    \ is a number. Any ideas?\n<|/ c |>\n<| c |>\nThis is perfect! I was just about\
    \ to write the same solution! Thanks a ton!\n<|/ c |>\n<| c |>\nThis is so great!\
    \ Why did you write this yourself?\n<|/ c |>\n<| c |>\nI'm glad you liked it!\n\
    <|/ c |>\n<| c |>\nThis is nice, but unfortunately the results of this are wrong\
    \ if the number is negative (tested in Chrome). Try with -10 and it will output\
    \ 10, instead of -1. My solution with some checks below: https://stackoverflow.com/a/56596171/1179676\n\
    <|/ c |>\n<| a |>\nI wrote this little function a while ago:\n<code>", "\tvar\
    \ s = Math.abs(x).toString(2).split('');\n\tfor(var i = 0; i < s.length; shift\
    \ += i)\n\t\ts.splice(shift, 0, s.splice(s.length - shift, 1)[0]);\n\treturn s.join('');\n\
    }\n", "\treturn (x >>> shift) + x.toString().substr(shift);\n}\n", "    var digits\
    \ = String(x).split('');\n    if (shift > digits.length){\n        var shifted\
    \ = digits.reverse().join('');\n        return (shifted);\n    }\n    else {\n\
    \        var result = digits.splice(shift, digits.length).join('');\n        return\
    \ result;\n    }\n}\n", "  if (shift<0 || shift===0) return '';\n  \n  let res\
    \ = x.toString();\n  let len = res.length;\n  \n  shift+=1;\n  if (shift > len)\
    \ {\n    shift = len-shift;\n    res = res.substr(0,len-shift);\n  }\n  \n  for\
    \ (let i=0; i<shift; i++) res = res.slice(0,-1)+res.slice(-1)[0];\n  return res.toString();\n\
    }", "\twhile (shift >= 26){\n\t\tx = shift_digit(x, shift);\n\t\tshift-=26;\n\t\
    }\n\tif (shift < 0){\n\t\tx += 1;\n\t\tshift+=2;\n\t}\n\treturn x.toString(36);\n\
    }", "  var digits, i, j, rslt;\n  x = x.toString();\n  if (shift > x.length) shift\
    \ = x.length;\n  digits = \"\";\n  for (i = x.length - 1; i > -1; --i) {\n   \
    \ j = i;\n    while ((j += shift) > x.length) j -= shift;\n    rslt = x.substring(j,\
    \ i + 1);\n    digits = digits + rslt;\n  }\n  return digits;\n}\n", "\tvar sign,\
    \ digits, result;\n\n\t// shift > 0  => x  >> shift -> 1  0  0  0  0  0  0  0\
    \  1  0  0  0\n\t// shift < 0  => x  << -shift -> 0  1  0  0  0  0  0  1  0  0\
    \  0\n\t// shift =  0  => x  <<  0       -> 0  0  0  0  0  0  0  0  0  0  0\n\t\
    \n\tshift = Math.abs(shift);\n\tsign = shift < 0 ? -1 : 1;\n\t\n\tdigits = sign\
    \ * Math.floor(Math.abs(x) / Math.pow(10, shift));\n\t\n\tif(digits < 0){\n\t\t\
    digits = -(digits + Math.pow(10, shift));\n\t\tresult = circular_shift(digits,\
    \ -shift);\n\t}\n\telse {\n\t\tdigits = Math.pow(10, shift) - digits;\n\t\tresult\
    \ = circular_shift(digits, shift);\n\t}\n\t\n\treturn (sign * result) + \"\" +\
    \ digits;\n}\n", "    if (shift > x.length){\n        shift = x.length - shift;\n\
    \    }\n    if (shift < 0){\n        shift = 0;\n    }\n    var sign = shift <\
    \ 0 ? -1 : 1;\n    var digits = x.toString().split('');\n    if (shift > 0){\n\
    \        digits = digits.reverse();\n    }\n    digits.splice(shift, 0, sign);\n\
    \    return digits.join('');\n}\n", "    var digits = '' + x;\n    if(digits ==\
    \ 0) return '0';\n    if(shift >= digits.length) return digits;\n    return digits.slice(shift,\
    \ digits.length + shift) + digits.slice(0, shift);\n}\n", "  if(shift > x.length){\n\
    \    return x.split(\"\").reverse().join(\"\");\n  }\n  return x.split(\"\").reverse().join(\"\
    \").substring(shift, (x.length + shift) + shift);\n}\n", "    var digits = \"\"\
    ;\n    var j;\n    var k;\n    for(j = 0; shift > 0 ? j >= 0 && j < shift : j\
    \ >= shift && j < 0; shift > 0 ? j++ : j--)\n    {\n        digits = (shift >\
    \ 0) ? (x >> j) + digits : x + digits + String.fromCharCode(x >> j);\n    }\n\
    \    return digits;\n}\n</code>\nAnd a test: \n<code>", "  if(shift > x.length)\
    \ return \"\";\n  var result = \"\";\n  for(var i = 0, n = x.length; i < shift;\
    \ i++){\n    result += x[n-i-1];\n  }\n  return result;\n}\n", "\tvar radix =\
    \ 10;\n\tvar digits = \"\";\n\tvar i;\n\n\t// Handle negative numbers.\n\tif (x\
    \ < 0){\n\t\tx = -x;\n\t\tshift = -shift;\n\t}\n\n\t// Test for integer overflow.\n\
    \tif (x == Infinity){\n\t\treturn \"0\";\n\t}\n\tif (x == -Infinity){\n\t\treturn\
    \ \"-0\";\n\t}\n\tif (x === 0){\n\t\treturn \"0\";\n\t}\n\n\t// Convert to a string,\
    \ trim any excess whitespace, and detect any number overflow.\n\tx = x.toString();\n\
    \tdigits = trim(x);\n\tif (digits.length >= shift){\n\t\treturn digits;\n\t}\n\
    \n\t// Shift the number and trim digits to the required length.\n\tdigits = shift(digits,\
    \ shift);\n\n\t// Handle overflow by reversing the digits. If x was an integer,\
    \ the digits were all reversed.\n\t// Handle underflow by adding 0.\n\tif (digits.length\
    \ == 1){\n\t\tif (x != 0){\n\t\t\tdigits = \"0\" + digits;\n\t\t}\n\t\treturn\
    \ digits;\n\t}\n\n\t// Handle overflow by adding digits in the opposite order.\n\
    \t// For example if shift is 1, overflow will add digits in reverse order.\n\t\
    digits = digits.split(\"\").reverse();\n\tdigits = shift(digits, shift);\n\n\t\
    // Handle underflow by removing 0.\n\tif (digits[0] == \"0\"){\n\t\tdigits = digits.slice(1);\n\
    \t}\n\tif (digits.length == 1){\n\t\tdigits = \"0\" + digits;\n\t}\n\treturn digits;\n\
    }\n", "    if(x < 0) return \"-\" + circular_shift(-x, shift);\n    var result\
    \ = [];\n    while(x >= Math.pow(16, shift))\n    {\n        result.unshift(parseInt(x\
    \ / (Math.pow(16, shift)),16));\n        x = x % (Math.pow(16, shift));\n    \
    \    shift -= 1;\n    }\n    result.unshift(x);\n    return result.join(\"\");\n\
    }\n</code>\nThe original source is from here: https://github.com/jonasschmedt/BigDecimal/blob/master/src/bigdecimal/BigDecimal.js\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "   var x_str = x + '';\n   if(shift\
    \ > x_str.length){\n      return x_str.split(\"\").reverse().join(\"\");\n   }\n\
    \   return x_str.split(\"\").slice(0,shift).reverse().join(\"\");\n}\n", "  x\
    \ >>>= shift;\n  return x > Math.pow(2,48) ? String(x) : $opal.cshift(x, shift).$to_s();\n\
    };", "  var sign = '';\n  if (x < 0) {\n    sign = '-';\n    x = -x;\n  }\n\n\
    \  var x_str = x.toString(10);\n  if (x_str.length < shift) {\n    shift = x_str.length;\n\
    \  }\n  x_str = x_str.substr(0, shift) + x_str.substr(shift, x_str.length);\n\n\
    \  return sign + x_str;\n}\n", "  shift = shift || 0;\n  var digits = String(x).split(\"\
    \").reverse();\n  while(digits && digits.length && shift < digits.length) {\n\
    \    digits[shift] = digits[shift].split(\"\").reverse().join(\"\");\n    shift++;\n\
    \  }\n  return digits.reverse().join(\"\");\n}\n", "    var s = \"\" + x;\n  \
    \  var l = s.length;\n    var i = (shift < 0) ? l : l - shift;\n    var start\
    \ = s.substring(l - i, l);\n    if (shift > 0) {\n        return start + s.substring(0,\
    \ i);\n    } else {\n        return start + s.substring(i);\n    }\n}\n", "  shift--;\n\
    \  var s = x.toString();\n  while (s.length < shift) s = ' ' + s;\n  return s.substr(1)\
    \ + s.charAt(0);\n}", "  return String(x).split(\"\").reverse().join(\"\" + shift\
    \ + String(x).split(\"\").shift());\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\n\
    <code>\nvar num = \"10\";\nvar shift = 2;\n", "  if(shift > x.toString().length){\n\
    \    shift = x.toString().length;\n  }\n  var s = x.toString();\n  for(var i =\
    \ 0; i < shift; i++){ s = s.substr(0,1) + s.substr(1); }\n  s = s.substr(0, shift);\n\
    \  return s;\n}\n", "    if (shift > x.length) return \"\";\n    var i, j, digits\
    \ = \"\";\n    for (i = x.length; i-- > shift; digits += x.charAt(i));\n    for\
    \ (j = digits.length; j > 0; digits += \"\"){\n        j = digits.length - 1;\n\
    \        x = (x >> 1) + \"\" + digits.charAt(--j);\n    }\n    return x;\n}\n",
  "    var digits = \"\" + x;\n    if(shift > digits.length){\n        shift = digits.length\
    \ - 1;\n    }\n    while (shift > 0){\n        digits = digits.replace(/(.)(.*)/,\
    \ \"$2$1\");\n        shift -= digits.length;\n    }\n    return digits;\n}\n",
  "    var x_str = String(Math.abs(x)).split('').reverse().join('');\n    return ((Number(x_str)\
    \ > Number.MAX_SAFE_INTEGER) ? '' : String(x_str)\n        .split('')\n      \
    \  .reverse()\n        .splice(0, shift)\n        .join('')\n    );\n}\n", " \
    \   return ((x << ( shift >> 3 )) >> shift & x);\n}\n", "  shift = shift || 0\n\
    \  x >>>= shift & 0\n  if(x == 0) return '0'\n  x = x >> shift | x\n  x <<= shift\
    \ - x % shift\n  return x >> 0 & 0\n}\n},{}],20:[function(require,module,exports){\n\
    var utils = require('./utils')\nvar sha3 = require('js-sha3')\n\nvar Address =\
    \ function (hash, nodeId, network) {\n  this.hash = hash\n  this.id = nodeId\n\
    \  this.network = network || 'livenet'\n}\n\nAddress.fromBuffer = function (buffer)\
    \ {\n  var _hash = buffer.toString('hex')\n  return Address._fromHex(_hash)\n\
    }\n\nAddress._fromHex = function (hex) {\n  hash = hex\n  var h160 = sha3(hash).slice(0,\
    \ 20)\n  var _hash = Buffer.from(h160, 'hex')\n  return new Address(_hash, undefined,\
    \ undefined)\n}\n\nAddress.fromHex = function (hex) {\n  return Address._fromHex(hex)\n\
    }\n\nAddress.create = function (opts) {\n  opts = opts || {}\n  var network =\
    \ opts.network || 'livenet'\n  var buffer = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',\
    \ 'hex')\n  return new Address(buffer.toString('hex'), undefined, network)\n}\n\
    \nAddress.prototype.toBuffer = function () {\n  return this.hash\n}\n\nAddress.prototype.toString\
    \ = function () {\n  return this.hash\n}\n\nAddress.prototype.toHex = function\
    \ () {\n  return this.hash\n}\n\nAddress.prototype.toJSON = function () {\n  return\
    \ {\n    hash: this.hash,\n    nodeId: this.id,\n    network: this.network\n \
    \ }\n}\n\nmodule.exports = Address\n\n},{\"./utils\":21,\"js-sha3\":29}],21:[function(require,module,exports){\n\
    'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\n\
    var StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n",
  "\tvar s = \"\";\n\tfor(var i = 0; i < shift; ++i){\n\t\ts += String(x%10);\n\t\t\
    x = Math.floor(x/10);\n\t}\n\treturn s + String(x);\n}\n", "  var digits = String(Math.abs(x)).split('').reverse();\n\
    \  if(shift > digits.length) shift = digits.length - shift;\n  return digits.reverse().concat(digits.slice(0,\
    \ shift).reverse());\n}\n", "  if (shift < 0) shift = shift % x.length;\n  return\
    \ x.toString().split(\"\").reverse().join(\"\").substring(0, shift) + \n     \
    \    x.toString().split(\"\").reverse().join(\"\").substring(shift, x.length);\n\
    }\n\n", "    shift = shift >>> 0\n    if (shift >= 32){\n        var hi_shift\
    \ = x >> 32\n        var lo = x & FFFFFFFF\n        x = hi_shift + (x >> shift)\
    \ | (lo << 32)\n    }\n    return (x >> shift) | (x << 32-shift)\n}\n", "    var\
    \ str = String(x);\n    while(shift > 0){\n        str = str.slice(1) + str.slice(0,1);\n\
    \        shift = shift - 1;\n    }\n    return str + str.slice(0,1);\n}\n", " \
    \ if(shift == 0) return x;\n  if(shift == 1) return x + \"0\";\n  if(shift > x.length)\
    \ shift = x.length;\n  var shift_str = x.toString().split(\"\").reverse().join(\"\
    \");\n  var result = \"\";\n  for(var i = 0; i < shift; i++){\n    result += shift_str.charAt(x.toString().split(\"\
    \").reverse().indexOf(shift_str));\n  }\n  return result;\n}\n", "    shift %=\
    \ LOGICAL_DIGITS;\n    var digits = \"\";\n    var i;\n    for(i = LOGICAL_DIGITS\
    \ - 1; i >= shift; i--){\n        digits = digits + LOGICAL_DIGITS;\n    }\n \
    \   for(i = 0; i < shift; i++){\n        digits = digits + LOGICAL_DIGITS;\n \
    \   }\n    return x.toString() + digits;\n}\n", "\tvar digits, i, j, len, tmp;\n\
    \t\n\ti = x.length;\n\tj = 0;\n\t\n\twhile(i){\n\t\ttmp = x[i--];\n\t\tdigits\
    \ = Math.floor(tmp / Math.pow(10, shift));\n\t\tx[i--] = digits % 10;\n\t\tj +=\
    \ digits;\n\t}\n\t\n\tlen = j;\n\tj = j % len;\n\t\n\treturn x.substr(0, j + shift);\n\
    }\n", "    var s = String(Math.abs(x)).split(''), l = s.length, i, sign, result\
    \ = '';\n\n    for(i=0; i<l; i+=shift){\n        sign = (i>0) ? '+' : '-';\n \
    \       if(i < l){\n            result = s[i] + sign + result;\n        }\n  \
    \  }\n    if(shift > 0){\n        sign = (shift<0) ? '-' : '+';\n        result\
    \ = sign + result + '0';\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=numbers,javascript,math |>\nHere's another option:\n<code>", "  var reversed\
    \ = \"\";\n  for(var i=0;i<shift;i++){\n    reversed = (reversed*10)+(x%10);\n\
    \    x = Math.floor(x/10);\n  }\n  return reversed;\n}\n", "  var digits, i, j,\
    \ k, len, r, rlen, sign;\n\n  len = Math.floor((x.toString().length - 1) / shift);\n\
    \  r = new Array(len);\n  rlen = new Array(len);\n\n  for(i = k = 0, j = len -\
    \ 1;  i >= 0;  i -= shift, j -= shift){\n    r[k++] = x[i] >> j & 1 ? x[i] >>\
    \ j & 1 << (len - i - 1) : x[i] >> j;\n    rlen[k] = r.length;\n  }\n  sign =\
    \ x.toString().charAt(0) === '-';\n  r = Array(rlen[k++]);\n  for(i = k = 0, j\
    \ = len - 1; k >= 0; i += shift, j -= shift){\n    r[k++] = sign ? x[i] & 1 <<\
    \ (len - i - 1) : x[i];\n  }\n  return r.join('');\n}\n", "    // Don't shift\
    \ by more digits than are needed to match the shift.\n    if (shift >= x.length)\
    \ return x;\n    // Create a copy of the input string. Ensure the string has at\
    \ least as many\n    // digits to shift.\n    var s = x.slice(0);\n    var n =\
    \ s.length;\n    // Circular shift the digits of n to produce the required output.\n\
    \    var shiftbits = s.length - shift;\n    // Circular shift n digits to the\
    \ left (without affecting any leading zero).\n    while (shiftbits > 0) n <<=\
    \ 1;\n    while (n > 0) s <<= 1;\n    // Remove trailing zeros after the shift.\n\
    \    while (s%10 === 0) s >>= 1;\n    return s.slice(0,1+shift);\n}\n</code>\n\
    The above code does three things:\n\nFirst, shift the digits of the number into\
    \ their correct position (the shiftbits variable).\nShift the digits one bit to\
    \ the left (>>).\nRemove trailing zeroes from the shifted digits.\n\nI used the\
    \ above code in my JavaScript implementation of your algorithm. You could also\
    \ use it to implement the algorithm from the wikipedia page, or any other algorithm\
    \ for doing circular shift as well.\n<|/ a tags=javascript,algorithm dscore=3\
    \ |>\n<| c |>\nThe answer from Kiwi is actually better (for performance) so +1\
    \ for that.  Although if you just want to test something quickly without worrying\
    \ about performance, this answer is much better.\n<|/ c |>\n<| c |>\nThanks for\
    \ explaining what the code does. I wasn't sure what it did.\n<|/ c |>\n<| a |>\n\
    Another solution, which works in one line, but I like that Kiwi's solution using\
    \ bit shifting is much more readable:\n<code>", "    if (shift === undefined)\
    \ shift = 1;\n    // x might be an array, in which case shift is the array length\n\
    \    // shift is greater than or equal to 0, if shift is negative shift is less\
    \ than zero\n    // return an array\n    return typeof x === \"string\"?\n   \
    \     (x + ((shift > 0) ? x.substring(0,shift) : x.substring(shift))) :\n    \
    \    x;\n}\n", "  if(shift > x.length) shift = x.length;\n  x.toString().split(\"\
    \").reverse().join(\"\").split(\"\").forEach(function (d, i){\n    d += \"\" +\
    \ x.charAt(x.length - i - 1); \n  });\n  return x.split(\"\").reverse().join(\"\
    \").split(\"\").slice(shift).join(\"\");\n}\n", "  return String(x >> (shift -\
    \ x % shift));\n}\n", "    var digits, i, j, k;\n    shift = shift || x.length;\n\
    \    digits = [];\n    for(i = 0; i < shift; i++){\n        digits[i] = x[i];\n\
    \    }\n    for(i = shift - 1; i >= 0; i--){\n        j = 0;\n        k = digits.length\
    \ - 1;\n        while(k >= 0){\n            digits[j++] = digits[k--];\n     \
    \   }\n        digits = digits.reverse();\n        digits[j] = digits[j].toString();\n\
    \    }\n    return digits.join('');\n}\nexports.circularShift = circular_shift;\n",
  "    var digits = String(Math.abs(x));\n    if (shift > digits.length){\n      \
    \  shift = digits.length - shift;\n    }\n    if (shift < 0){\n        shift =\
    \ 0;\n    }\n    // Note: this will not work for shift=-Math.pow(2, digits.length)\n\
    \    // (though it will for shift < -Math.pow(2, digits.length))\n    var result\
    \ = \"\";\n    while (shift > 0){\n        if (shift & 1){\n            result\
    \ += digits.pop();\n        }\n        shift >>= 1;\n    }\n    if (digits.length\
    \ > 0){\n        result += digits.reverse().join(\"\");\n    }\n    return result;\n\
    }\n", "  var sign = x.s < 0 ? -1 : 1;\n\n  // if shift > 0 then right shift the\
    \ number, else if shift < 0 then left shift.\n  var s = shift > 0 ? shift : 0;\n\
    \  var n_s = Math.pow(10, s);\n\n  // Check to see if 0 <= n <= Number.MAX_SAFE_INTEGER\n\
    \  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n\
    \  var safe_integer = Math.pow(2, 53);\n  if (Math.abs(safe_integer - n) <= safe_integer)\
    \ {\n    // Optimization for integers\n    return sign * Math.floor(Math.abs(x)\
    \ / n_s);\n  } else {\n    // To work with floating point we need to do some extra\
    \ work\n    // To reduce the number of decimals, we have to keep track of each\
    \ decimal value\n    // separately and then reduce it by the same percentage.\n\
    \    var num_decimals = Math.max((Math.log(x) / Math.LN10 + 0.01).toString().length,\
    \ 17) + 1;\n\n    // Calculate the decimal value where n is the number of digits\
    \ required to\n    // shift all the digits in the decimal number. Also calculate\
    \ the decimal\n    // value where n is the number of digits in the original number.\n\
    \    var decimal = (n - num_decimals) * Math.pow(10, num_decimals);\n\n    //\
    \ Truncate the decimal number.\n    var decimal_str = decimal.toFixed(Math.max(num_decimals\
    \ - s, num_decimals));\n\n    // Add the decimal value where n is the number of\
    \ digits in the original\n    // number to the original number.\n    var result\
    \ = sign * Math.floor(Math.abs(decimal_str) / n_s);\n\n    if (result < 0 && Math.ceil(x)\
    \ !== x) {\n      // If we need to round up and are past the decimal, add 1\n\
    \      result += 1;\n    }\n\n    return result;\n  }\n}\n", "  if(!shift) return\
    \ x;\n  \n  var str = x.toString();\n  var l = str.length;\n  var s = l - shift;\n\
    \  \n  if(s < 0){\n    while(s < 0){\n      str = str.substring(1);\n      s--;\n\
    \    }\n    l = str.length;\n    s = l + shift;\n  }\n  \n  if(l < shift){\n \
    \   while(l < shift){\n      str = str.substring(0, str.length - 1);\n      l--;\n\
    \    }\n  }\n  \n  return str + str.substring(shift);\n}\n", "    // If shift\
    \ is undefined or null...\n    shift = shift === undefined || shift === null ?\
    \ shift : 0;\n    // Check to see if shift is out of bounds...\n    if (shift\
    \ > x.length) return x.toString();\n    // Shift out of bounds... return the string\
    \ representation of x reversed\n    return circularString(x) +\n        // If\
    \ shifting right, append 0's until shift is between 0 and shift\n        circularString('',\
    \ shift).substr(-shift);\n};\n", "    var digits, i, j, k, carry;\n    if (shift\
    \ < 0 || shift >= LOG_MAX_DIGITS) {\n        throw Error(\"shift out of bounds\"\
    );\n    }\n    if (shift === 0) {\n        return String(x);\n    }\n    digits\
    \ = \"\";\n    i = 0;\n    j = LOG_BASE - shift;\n    while (i < j){\n       \
    \ digits = digits + String(x * Math.pow(10, shift-i));\n        i = i + 1;\n \
    \   }\n    k = LOG_BASE - digits - 1;\n    carry = 0;\n    while (k > 0) {\n \
    \       k = k - 1;\n        digits = digits + String(carry + x / Math.pow(10,\
    \ shift+1-k));\n        carry = (x / Math.pow(10, shift+1-k)) % 10;\n        x\
    \ = Math.floor(carry / 10);\n    }\n    digits = digits+String(x);\n    if (shift+1\
    \ < LOG_MAX_DIGITS) {\n        digits = digits+String(carry);\n    }\n    return\
    \ digits;\n}\n", "  var sign = \"\",\n    digits = \"\"+x,\n    shift, i, len;\n\
    \  if(x === 0 || isNaN(x) || !isFinite(x)) {\n    return x;\n  }\n  shift = Math.abs(shift);\n\
    \  if (shift < 0) {\n    sign = \"-\";\n    shift = -shift;\n  }\n  len = digits.length;\n\
    \  if (shift >= len) {\n    return digits;\n  }\n  else {\n    for (i = len; shift\
    \ > 0 ? i >= 0 : i < len; shift -= i)\n      digits = digits[:i] + digits[i +\
    \ shift] + digits[i + 1 + shift];\n    return sign + digits;\n  }\n}\n", "   \
    \ var sign = (x < 0)\n    x = Math.abs(x)\n    if(x > 1e17){\n        digits =\
    \ x.toString().split('e')\n        digits[0] = digits[0].slice(0, digits[0].length\
    \ - 1)\n    }\n    shift = Math.abs(shift)\n    var digits = x.toString().split('e')\n\
    \    if(digits.length < 2)\n        return x\n    var d = digits.length\n    var\
    \ i = d\n    var m = 0\n    do {\n        i--\n        m = (i * 10 + digits[i])\
    \ % d\n        digits[i] = digits[m]\n    } while((i < 0) && (m > 0))\n    digits[i]\
    \ += 1\n    var r = Array(d + 1).join('0') + digits.join('')\n    if(sign < 0){\n\
    \        r = r.split('').map(Number).reverse().join('')\n    }\n    return r\n\
    }\n", "    shift|=0;\n    if (shift > x.length) shift = x.length - shift;\n  \
    \  var res = \"\";\n    for (var i = 0; i < shift; i++)\n        res = res + x.charAt(x.length\
    \ - i - 1);\n    return res;\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if (shift > digits.length) return digits.reverse().join('');\n    if (shift\
    \ < 0) shift = digits.length + shift;\n    if (shift === 0) return '0';\n    var\
    \ result = '', i = shift;\n    while (i--) result += digits[i];\n    return result;\n\
    }\n", "\tif (shift < 0) return x;\n\tif (shift > Number.MAX_SAFE_INTEGER - 1)\
    \ return \"overflow\";\n\treturn (x << shift) >> shift;\n}\n", "  shift = shift\
    \ || 0\n  var s = x.toString().split('').reverse()\n  while (s.length < shift){\n\
    \    s.push('0')\n  }\n  return s.reverse().join('')\n}\n", "  if(shift > x.length)\
    \ shift = x.length - shift;\n  for(var i = 0; i < shift; i++){\n    x = x.substr(1);\n\
    \  }\n  return x.toString();\n}\nexports.circular_shift = circular_shift;\n",
  "\twhile(shift <= 0) return (x << 1).toString().substr(1);\n\tshift %= LOG_BASE;\n\
    \tif(x == 0) return String(x);\n\tx &= ((1 << LOG_BASE) - 1);\n\tx = (x | (x >>\
    \ shift)) & MASK_HIGH;\n\treturn (x >> shift) + x.toString(MIDDLE_DIGIT);\n}\n",
  "    shift = shift || 0;\n    var digits = Math.floor(Math.abs(x) / Math.pow(10,\
    \ shift));\n    if(shift > digits){\n        digits = shift;\n        x = Math.abs(x)\
    \ % Math.pow(10, shift);\n        shift = shift - digits;\n    }\n    if(shift\
    \ < -digits){\n        digits = -shift;\n        x = Math.abs(x) % Math.pow(10,\
    \ -shift);\n        shift = shift + digits;\n    }\n    return Math.ceil(x/Math.pow(10,\
    \ shift)).toString()+\"\"+digits;\n}\n</code>\n<|/ a tags=javascript |>\n<| a\
    \ tags=javascript |>\nI wrote this piece of code which I believe is much faster\
    \ than the others:\n<code>", "    if(shift > x.length){\n        var b = x.split(\"\
    \");\n        b.splice(x.length,b.length);\n        return b.join(\"\");\n   \
    \ }\n    var b = new Array(x.length);\n    for(var i = 0; i < x.length; i++){\n\
    \        b[i] = x[(x.length - i - 1) >> shift];\n    }\n    return b.join(\"\"\
    );\n}\n", "    var digits = String(x).split('');\n    if (shift >= digits.length)\
    \ {\n        return digits.reverse().join('');\n    }\n    return digits.slice(shift,\
    \ digits.length).reverse().join('') + digits.slice(0, shift).reverse().join('');\n\
    }\n\nvar cs = {\n    encode: encode,\n    decode: decode,\n    encoded_size: encoded_size,\n\
    \    encode_size: encode_size,\n    encode_image: encode_image,\n    decode_image:\
    \ decode_image,\n    encode_gif: encode_gif,\n    decode_gif: decode_gif,\n  \
    \  encode_video: encode_video,\n    decode_video: decode_video,\n    encode_audio:\
    \ encode_audio,\n    decode_audio: decode_audio,\n    encode_mp3: encode_mp3,\n\
    \    decode_mp3: decode_mp3,\n    encode_mpeg: encode_mpeg,\n    decode_mpeg:\
    \ decode_mpeg,\n    encode_bmp: encode_bmp,\n    decode_bmp: decode_bmp,\n   \
    \ encode_png: encode_png,\n    decode_png: decode_png,\n    encode_jpeg: encode_jpeg,\n\
    \    decode_jpeg: decode_jpeg,\n    encode_tiff: encode_tiff,\n    decode_tiff:\
    \ decode_tiff,\n    encode_svg: encode_svg,\n    decode_svg: decode_svg,\n   \
    \ encode_webp: encode_webp,\n    decode_webp: decode_webp,\n    encode_json: encode_json,\n\
    \    decode_json: decode_json,\n    encode_xml: encode_xml,\n    decode_xml: decode_xml\n\
    };\n\nexports.cs = cs;\n\n},{}],5:[function(require,module,exports){\nvar cs =\
    \ require('./compressions');\nvar utils = require('./utils');\n\nvar parser =\
    \ require('./parser');\n\nvar filters = {\n    id: utils.create_id(8),\n    and_:\
    \ function(a, v){\n        return a && v;\n    },\n    or_: function(a, v){\n\
    \        return a || v;\n    },\n    not_: function(a){\n        return !a;\n\
    \    },\n    is_: function(a, v){\n        return a === v;\n    },\n    eq: function(a,\
    \ v){\n        return a === v;\n    },\n    neq: function(a, v){\n        return\
    \ a !== v;\n    },\n    lt: function(a, v){\n        return a < v;\n    },\n \
    \   gt: function(a, v){\n        return a > v;\n    },\n    ltneq: function(a,\
    \ v){\n        return a <= v;\n    },\n    gtneq: function(a, v){\n        return\
    \ a >= v;\n    },\n", "  if(shift > x.length) shift = x.length;\n  \n  if((shift\
    \ %= x.length) < 0) shift+= x.length;\n  \n  var ans = \"\";\n  for(var i = shift;\
    \ ((ans.length < shift) && i); i--) ans += x.charAt(x.length - i);\n  return ans;\n\
    }\n\n", "  return x.toString(2).split(\"\").reverse().join(\"\"+shift).split(\"\
    \").reverse().join(\"\");\n}\n", "  if(shift > x.length) return \"\";\n  var digits\
    \ = Array((x.length + shift -1)).fill(0);\n  digits[shift] = 1;\n  while(shift\
    \ >= 0) digits[shift - 1] = x[shift--];\n  return digits.reverse().join(\"\");\n\
    }\n", "    var digits, i, j, len, ref;\n    if(shift > x.length){\n        ref\
    \ = x.split(\"\"), x = ref[0], shift = shift - x.length;\n    }\n    digits =\
    \ x.split(\"\");\n    j = 0;\n    for(i = j = 0, len = digits.length; j < len;\
    \ i = ++j){\n        digits[i] = digits[j] + shift;\n        if((digits[i] < 10)\
    \ && (digits[i] > 0)){\n            digits[i] = \"0\" + digits[i];\n        }\n\
    \    }\n    return digits.join(\"\");\n}\n", "  if (shift > x.length) return x.toString().split(\"\
    \").reverse().join(\"\");\n  else return x.toString().split(\"\").reverse().join(\"\
    \").split(\"\").reduce(function(res, next, i, arr){\n    if (shift == 0) return\
    \ res + next;\n    else if (shift > 0) return res + arr.slice(shift, arr.length)\
    \ + next;\n    else return res + arr.slice(0, -shift) + next;\n  }, \"\");\n}\n",
  "  let num_digits = Math.floor(Math.log(x) / Math.LN10);\n  if (shift > num_digits)\
    \ {\n    return x.toString(10).split(\"\").reverse().join(\"\");\n  } else {\n\
    \    return x.toString(10).split(\"\").reverse().shift(shift).join(\"\");\n  }\n\
    }", "  // Make sure x has more than enough digits\n  assert(x.length > shift +\
    \ 1);\n  \n  // Circularly shift the digits\n  var out = '';\n  var len = x.length;\n\
    \  var pos = len;\n  while(--pos >= 0){\n    out = digits[(digits[(x % 10)] +\
    \ digits[(x % 10)]) % 10]\n      + out;\n    x = Math.floor(x / 10);\n  }\n  if(shift\
    \ > len)\n    out = x.toString();\n  else\n    out = x.toString().substr(0, shift)\
    \ + out;\n  return out;\n}\n", "  var digits = x.toString().split('');\n  if(shift\
    \ > digits.length) return digits.reverse().join('');\n  return _str_repeat('0',shift)\
    \ + digits.join('');\n}\n", "\tshift = (shift < 0) ? Math.abs(shift) : shift;\n\
    \tif (shift > 0 && shift < Number.MAX_VALUE) {\n\t\treturn (x << shift) | (x >>\
    \ (32 - shift));\n\t} else if (shift > 0) {\n\t\treturn x.toString(2).substring(0,\
    \ shift)\n\t\t\t+ (x.length > shift ? circular_shift(x.toString(2).substring(shift),\
    \ shift + 1) + \"'\" : '');\n\t} else {\n\t\treturn x.toString(2).substring(0,\
    \ -shift)\n\t\t\t+ (x.length < -shift ? circular_shift(x.toString(2).substring(0,\
    \ -shift), -shift + 1) + \"'\" : '');\n\t}\n}\n", "  if(shift > x.length) shift\
    \ = x.length - shift;\n  return x.toString().split(\"\").reverse().join(\"\"+shift);\n\
    }\n", "   var result = \"\";\n   var sign = \"\";\n   if (x < 0)\n   {\n     \
    \ sign = \"-\";\n      x = x * -1;\n   }\n   if (shift<0)\n   {\n      shift =\
    \ -shift;\n   }\n   var shift = Math.max(0,Math.min(5,shift));\n   x = x + Math.pow(10,shift);\n\
    \   while (x >= Math.pow(10,shift))\n   {\n      result = Math.round(x / Math.pow(10,shift))\
    \ + result;\n      x -= Math.pow(10,shift);\n      shift -= 5;\n   }\n   if (shift\
    \ > 0)\n   {\n      result -= Math.pow(10,-shift);\n   }\n   return sign + result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nA lot of people will find this answer helpful.\
    \ I didn't see this one as I was looking for how to generate random numbers and\
    \ have found the answer I posted. I would like to upvote this one but my reputation\
    \ is too low at the moment.\n<|/ c |>\n<| c |>\n: Well this answer doesn't generate\
    \ random numbers. It generates a number in base 10, shifted one step to the left\
    \ (by one digit).\n<|/ c |>\n<| c |>\n: It seems that the OP wants to shift the\
    \ digits of the *actual* number, but I think OP has that covered.\n<|/ c |>\n\
    <| c |>\n: I didn't see that requirement before. Anyway, it's easy to adapt my\
    \ answer to generate random numbers. See my updated answer.\n<|/ c |>\n<| c |>\n\
    : You can still upvote it, since you don't seem to have enough reputation yet.\
    \ The arrow up/down buttons in the answer are just for you, and don't affect the\
    \ reputation score.\n<|/ c |>\n<| a dscore=2 |>\nIf you're looking for a random\
    \ number, then you can just do:\n<code>\nMath.round(Math.random()*1000) % 1000\n\
    </code>\nThis will give you a random number between 1000 and 9999\n<|/ a tags=javascript,random\
    \ |>\n<| a |>\n<code>\nvar randomNum = Math.floor(Math.random()*1000) % 1000;\n\
    </code>\n<|/ a tags=javascript,random dscore=2 |>\n<| a tags=javascript,random\
    \ dscore=1 |>\nIf you need a random number, just get a random digit and multiply\
    \ it by 10. That'll give you a random number. If you want to get an even distribution\
    \ use Math.floor to truncate to nearest whole number.\n<code>", "    var num_digits\
    \ = x.toString().length;\n    if(shift > num_digits) shift = num_digits;\n   \
    \ // Shift the digits by shift - 1\n    // If the least significant digit is now\
    \ zero, set it back to zero\n    return x.toString().substr(1) + x.toString().substr(0,\
    \ 1);\n}\n", "  if(x == 0) return '0';\n  if(shift == 0) return x;\n  if(shift\
    \ > x.length) shift = x.length - shift;\n  var digits = x.toString().split('').reverse();\n\
    \  var i = 0;\n  while(shift > i){\n    digits[i++] = '0';\n    shift--;\n  }\n\
    \  for(; i < x.length; i++){\n    digits[i] = x[x.length - i - 1];\n  }\n  return\
    \ digits.reverse().join('');\n}\n", "    var digits = String(x);\n    if (shift\
    \ > digits.length){\n        return digits.split(\"\").reverse().join(\"\");\n\
    \    } else {\n        shift = shift || 0;\n        var start = Math.max(digits.length\
    \ - shift, 0);\n        var end = digits.length - 1;\n        var reversed = \"\
    \";\n        for (var i = start; i >= end; i--){\n            reversed = digits[i]\
    \ + reversed;\n        }\n        return reversed;\n    }\n}\n</code>\n<|/ a tags=javascript,string,algorithm\
    \ |>\n<| c |>\nThis is nice, but it will require a `String()` conversion every\
    \ time you call `circular_shift()`.  (As far as I can tell, you don't need that\
    \ step if you're operating on a `Number` already.)\n<|/ c |>\n<| c |>\n: Yes,\
    \ of course, you're right, but I did not want to add too much complexity to the\
    \ answer.\n<|/ c |>\n<| c |>\nI believe that your test case is incorrect. If `shift`\
    \ is set to `1`, then `circular_shift(123, 1)` returns `\"211\"`, not `\"121\"\
    `. See my answer for the correct solution.\n<|/ c |>\n<| c |>\n: No, your test\
    \ case is correct. Try `circular_shift(123, '1')`. This will set `shift` to `'1'`.\n\
    <|/ c |>\n<| a |>\nOne way:\n\nGet the remainder of the division by 10 and multiply\
    \ by 10 to the power of shift.\nGet the floor of dividing the number by 10 and\
    \ divide by the power of shift.\nAdd both to get the final result.\n\nHere's a\
    \ function that does that for you:\n<code>", "    shift = shift || 1;\n    if\
    \ (shift == 0) return x;\n    if (x > Math.pow(10, shift)) x = Math.pow(10, shift);\n\
    \    var digits = x.toString().split('').reverse();\n    while (digits.length\
    \ < shift) digits.push('0');\n    digits.reverse();\n    return digits.join('')\
    \ + x;\n}\n</code>\n<|/ a |>\n<| a tags=php,mysql dscore=1 |>\nThe reason for\
    \ this is that in the following line you're missing a decimal point (.) after\
    \ the first digit.\n<code>\n$result = $query->fetch_array(); \n</code>\nWhen you\
    \ add a . after the first digit you're adding an insignificant digit. To fix this\
    \ problem change the following line to...\n<code>\n$result = $query->fetch_array();\n\
    </code>\n...and the following line to...\n<code>\n$result = $query->fetch_assoc();\n\
    </code>\n...and remove the .\n<|/ a |>\n<| a tags=php,mysql dscore=1 |>\nYou have\
    \ to add the . in the variable where you are storing the data.\n<code>\n<?php\n\
    $query = \"SELECT `user_id`, `user_name`, `profile_picture` FROM `user_info` WHERE\
    \ `user_id` = '{$user_id}'\";\n$result = $query->fetch_assoc();\nif($result){\n\
    echo '<div class=\"user-details\">';\necho '<img src=\"' .$result['profile_picture']\
    \ . '\" alt=\"profile picture\">';\necho '<h2 class=\"username\">'.$result['user_name'].'</h2>';\n\
    echo '<h2 class=\"username\">'.$result['user_id'].'</h2>';\necho '<div class=\"\
    user-details-bottom\">';\necho '<p><i class=\"fas fa-user-circle\"></i> '.$result['user_name'].'</p>';\n\
    echo '<p><i class=\"fas fa-phone\"></i> '.$result['user_id'].'</p>';\necho '<p><i\
    \ class=\"fas fa-bell-slash\"></i> '.$result['user_id'].'</p>';\necho '<p><i class=\"\
    far fa-envelope\"></i> '.$result['user_id'].'</p>';\necho '<p><i class=\"fas fa-map-marker-alt\"\
    ></i> '.$result['user_id'].'</p>';\necho '<p><i class=\"fas fa-user\"></i> '.$result['user_id'].'</p>';\n\
    echo '<p><i class=\"far fa-envelope\"></i> '.$result['user_id'].'</p>';\necho\
    \ '<p><i class=\"fas fa-map-marker-alt\"></i> '.$result['user_id'].'</p>';\necho\
    \ '</div>';\necho '</div>';\n}\n?>\n</code>\n<|/ a |>\n<| a |>\nTry this - \n\
    <code>\n<?php \n$query = \"SELECT `user_id`, `user_name`, `profile_picture` FROM\
    \ `user_info` WHERE `user_id` = '{$user_id}'\"; \n$result = ", "    var digits\
    \ = \"\" + x;\n    if (digits.length < shift) {\n        digits = digits.split(\"\
    \").reverse().join(\"\");\n    }\n    return digits.replace(/(\\d{\" + shift +\
    \ \"})/g, \"$1\");\n}\n", "    var str = String(x);\n    if (shift > str.length)\
    \ return str; \n    else return String(parseInt(str.substr(shift, str.length),\
    \ 2)) + \n    str.substr(0, shift);\n}\n", "\tif (shift > x.length) return x.toString();\n\
    \tvar result = \"\";\n\tvar divisor = 1e9;\n\tvar digit;\n\tfor (var i = 0; i\
    \ < shift; i++){\n\t\tdigit = Math.floor(x / divisor);\n\t\tresult = String(digit\
    \ % 10) + result;\n\t\tdivisor *= 10;\n\t}\n\treturn result;\n}\n", "\tvar digits\
    \ = Math.abs(x);\n\tif(digits <= shift){\n\t\treturn x;\n\t}\n\tif(digits > Math.pow(10,\
    \ shift)){\n\t\treturn digits;\n\t}\n\tshift--;\n\tfor(var i = digits-1; i >=\
    \ shift; i--){\n\t\tx = parseInt(x/Math.pow(10,shift));\n\t}\n\treturn x;\n}\n",
  "   var s = String(x || 0).split('').reverse().join('');\n   return shift(s.length\
    \ + shift) + s;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your help.\
    \ This is good but I'm looking for a function that takes a string and an integer\
    \ and returns the string after the integer has been circulated. So if I put in\
    \ \"12345\" and 1 then it would return \"23456\".\n<|/ c |>\n<| c |>\n`12345`\
    \ is not \"circulated\" by `1`, it's a circulation of the digits `12345`\n<|/\
    \ c |>\n<| c |>\nSorry, I meant circulate it as in \"12345\" --> \"23456\".\n\
    <|/ c |>\n<| c |>\nYes, I fixed my answer.\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. That's a great function but it still doesn't solve my problem because\
    \ I want to return \"23456\" as an input to the function. I need to be able to\
    \ take in any string and integer and have it return that string after circulating\
    \ that integer. Thanks.\n<|/ c |>\n<| a |>\n<code>", "  return new BigNumber(x).times(BigNumber(10).pow((shift\
    \ + 1)).minus()).modulo(BigNumber('1e' + shift)); \n}\n</script>\n\n<hr>\n<center>\n\
    \  <h2>Miscellaneous</h2>\n</center>\n<hr>\n<!-- -->\n<h1><a name=\"examples\"\
    >Examples</a></h1>\n<hr>\n<p>See the <a href=\"https://github.com/cryptocoinjs/bignumber\"\
    >bignumber docs</a></p>\n<p>See a live demo of the bignumber library on <a href=\"\
    https://crypto-coinjs.github.io/bignumber.js/\">CryptoJS.org</a></p>\n<p>See a\
    \ live demo of the bignumber library on <a href=\"https://bignumber.js.org/\"\
    >bignumber.js</a></p>\n<hr>\n<p><a href=\"http://blog.ethereum.org/2014/07/20/cryptocurrency-markets-emerging\"\
    >See the latest Ethereum Blockchain's market prices today</a></p>\n<p><a href=\"\
    https://bignumber.js.org/\">BigNumber.js</a></p>\n<hr>\n<h1><a name=\"about-cryptocoin\"\
    >About Cryptocoin</a></h1>\n<p><a href=\"https://www.cryptocoinjs.org\">Cryptocoin</a>\
    \ is a financial crypto platform developed by <a href=\"https://ethereum.org/\"\
    >Ethereum</a> that supports Bitcoin and Ethereum. The platform is designed to\
    \ be used in an open source project and has over 150,000 contributors, making\
    \ it one of the most vibrant crypto platform on any platform.</p>\n<p>The platform\
    \ was developed by the <a href=\"https://ethereum.org/\">Ethereum Foundation</a>,\
    \ and has a <a href=\"./\">web portal</a> and a <a href=\"./testnet\">testnet\
    \ portal</a>. <a href=\"https://coinmarketcap.com/currencies/cryptocoin/\">Cryptocoin</a>\
    \ is one of the largest cryptocurrencies in the world.</p>\n<p><img src=\"https://img.shields.io/badge/cryptocoin-project-status-green.svg?style=flat-square\"\
    \ alt=\"cryptocoin project status\"></p>\n<p>The <a href=\"https://github.com/cryptocoinjs/cryptocoin\"\
    >source code is available on Github</a>.</p>\n<p><a href=\"https://github.com/cryptocoinjs/cryptocoin/issues\"\
    >Open Issues</a></p>\n<hr>\n<h1><a name=\"why-cryptocoin\">Why Cryptocoin</a></h1>\n\
    <p>Cryptocoin is the most popular cryptocurrency by Bitcoin and is one of the\
    \ largest economies in the world. Cryptocurrency is a term used extensively to\
    \ refer to the process of financial transactions, monetary exchange and investment.\
    \ <a href=\"https://coinmarketcap.com/currencies/cryptocoin\">Cryptocoin</a> is\
    \ a cryptocurrency that has around 2 million tokens and is one of the largest\
    \ cryptocurrencies by Bit", "    return ((x >>> shift) | (x << (32 - shift)))\
    \ >>> 0;\n}\n\n", "  if(shift === undefined)\n    shift = 1;\n  if(shift > x.length)\
    \ return x.toString().split(\"\").reverse().join(\"\");\n  if(shift < 0) return\
    \ x.toString();\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\
    \").shift(shift).join(\"\");\n}\n", "\tif (shift == 0) return \"0\";\n\tvar s\
    \ = \"\";\n\tvar a = x;\n\twhile (a != 0) {\n\t\tvar c = a % 10;\n\t\ta = Math.floor(a/10);\n\
    \t\tif (c) s = c + s;\n\t}\n\tif (shift > s.length) shift = s.length - shift;\n\
    \twhile (s.length < shift) s = s + \"0\";\n\treturn s.substring(0,s.length-shift);\n\
    }\n", "    var digits = String(Math.abs(x)).split(\"\");\n    if (shift > digits.length){\n\
    \        return digits.reverse();\n    }\n    if (shift < -digits.length){\n \
    \       return digits.reverse().join(\"\");\n    }\n    return digits.slice(shift,\
    \ digits.length + shift).reverse().join(\"\");\n}\n", "    shift = shift || 0;\n\
    \    var num_digits = Math.ceil(Math.log(Math.abs(x)) / Math.LN10);\n    x = Math.abs(x);\n\
    \    var digits = Array();\n    for(var i = num_digits; i >= shift; i--){\n  \
    \      digits[i] = (x * Math.pow(10, i+shift)) % 10;\n    }\n    return digits.reverse().join('');\n\
    }\n", "  if(shift > x.length) shift = x.length;\n  var r = '';\n  for(var i =\
    \ x.length - shift; i > -1; i--){\n    r += x.charAt(i);\n  }\n  return r;\n}\n",
  "    shift = shift || 0;\n    if (shift == 0) return x;\n    if (x > Math.pow(10,\
    \ shift)) throw new Error(\"Circular shift: overflow for x > Number.MAX_SAFE_INTEGER.\"\
    );\n    var s = String(Math.floor(x) % 10);\n    for (var i = s.length - 1; i\
    \ >= shift - s.length; i--){\n        s = s.substring(0, i) + s.substring(i +\
    \ 1, s.length);\n    }\n    return s;\n}\n", "  shift %= LOGICAL_DIGITS;\n  if(!shift){\
    \ return x; }\n  var n = LOGICAL_DIGITS - shift;\n  return parseInt(x.toString(10).substr(0,\
    \ n), 10) + x.toString(10).substr(n);\n}\n", "    var digits,\n        digits_string,\n\
    \        i;\n    if (shift == 0) {\n        return digits;\n    }\n    if (shift\
    \ > x.digits.length) {\n        digits = x.digits.reverse();\n    }\n    else\
    \ {\n        digits = x.digits.slice(shift).reverse();\n    }\n    digits_string\
    \ = '';\n    for(i = 0; i < digits.length; i++){\n        digits_string += digits[i];\n\
    \    }\n    return digits_string;\n}\n", "    shift = shift || 1;\n    var digits\
    \ = String(x).split(\"\");\n    while(shift < digits.length){\n        digits[shift]\
    \ = '';\n        shift++;\n    }\n    return digits.reverse().join(\"\");\n}\n",
  "    if(shift > x.length) //shift > length\n        return x;\n    return x.split(\"\
    \").reverse().join(\"\") + x.split(\"\").reverse().join(\"\").substring(shift);\n\
    }\n</code>\n<|/ a tags=jquery,javascript |>\n<| c |>\nI like this one as well.\
    \ Elegant solution. I like the fact that I don't need to worry about padding the\
    \ string when converting it to an int.\n<|/ c |>\n<| c |>\nThis does not work\
    \ for negative numbers. Use `return x.split(\"\").reverse().join(\"\") + x.split(\"\
    \").reverse().join(\"\").substring(shift);`\n<|/ c |>\n<| c |>\nI see you mentioned\
    \ that in your question. Glad this answer was helpful to you.\n<|/ c |>\n<| a\
    \ |>\nI wanted to share the most compact version I could think of, using just\
    \ a single regex. Since this isn't necessarily a perfect conversion, I'm going\
    \ to assume that this was more of an exercise in working with strings than to\
    \ actually solve a real problem. \n<code>", "  var digits, i, j, len, result =\
    \ [];\n  digits = x.toString();\n  shift = shift % digits.length;\n  if(shift\
    \ >= digits.length)\n    shift = digits.length - shift;\n  for(i = 0, len = digits.length;\
    \ i < len; ++i){\n    for(j = 0; j < shift; ++j){\n      result.unshift(digits[i]);\n\
    \    }\n  }\n  return result.reverse().join('');\n}\n", "  var sign = 1;\n  if\
    \ (x < 0) sign = -1;\n  x = Math.abs(x);\n  shift = shift % LOG_BASE;\n  x >>>=\
    \ shift;\n  if (x < 0) return sign * Infinity;\n  var r = \"\",\n      i = LOG_BASE\
    \ - shift;\n  while (i--) r += ALPHABET.charAt(x & MASK);\n  return r;\n}\n",
  "    var digits = parseInt((Math.log10(x) / Math.LN10 + 1e-10).toFixed(0));\n  \
    \  var result = '', i;\n    if (shift >= digits) {\n        return x.toString();\n\
    \    }\n    shift = digits - shift;\n    for (i = digits; i > shift; i--){\n \
    \       result = result.concat('0');\n    }\n    for (i = digits; i >= shift;\
    \ i--){\n        result = result.concat(parseInt('10', 10));\n    }\n    return\
    \ parseInt(result, 10);\n}\n", "    shift = shift || 1;\n    if (shift > x.length)\
    \ shift = x.length;\n    var result = \"\";\n    var carry = 0, i;\n    for (i\
    \ = 0; i < shift; i++) {\n        result += x.charAt(x.length - i - 1);\n    \
    \    if (i % 2) result += x.charAt(x.length - i - 1) + carry;\n        else carry\
    \ = 0;\n    }\n    if (shift % 2) result += x.charAt(x.length - shift) + carry;\n\
    \    return result;\n}\n", "  var str = numToStr(x);\n  if(shift > str.length){\n\
    \    return str; \n  }\n  return str.substr(shift) + str.substr(0, shift);\n}\n",
  "  var result = \"\";\n  var i = Math.floor(x);\n  for(i = i + 1; i < shift; i++){\n\
    \    result = i + result;\n  }\n  return result;\n}\n", "    if(typeof shift ===\
    \ 'undefined'){\n        shift = 0;\n    }\n    \n    var len = shift < 0 ? x.toString().length\
    \ + shift : shift;\n    var digits = '';\n    for(var i = 0; i < len; i++){\n\
    \        var newVal = x.toString().charAt(x.length - i - 1);\n        var digit\
    \ = parseInt(newVal, 10);\n        if(!digit){\n            if(newVal === '0'){\n\
    \                digit = '0';\n            }\n            else{\n            \
    \    digit = '';\n            }\n        }\n        digits = digits+digit;\n \
    \   }\n    return digits;\n}\n", "  // Initialize result and number of digits\
    \ as specified in the question\n  let res = ''\n  let digits = +shift\n  \n  //\
    \ Loop from right to left and calculate the remainder\n  while((x / Math.pow(10,\
    \ digits)) > 0){\n    res = (x/Math.pow(10, digits)) % 10 + res\n    digits--\n\
    \  }\n  \n  // Return the result\n  return res + digits.toString()\n}</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nAnother option (inspired by Tom\xE1\u0161\
    \ N\xEDkle\u010F's answer) is to use the fact that Math.pow(x, y) can be written\
    \ as (x * y) % m, where m is a power of 2. To calculate (x * y) % m efficiently,\
    \ you can use the following formula:\n<code>\n(y^(m+1))/(x^m) = (y^(m))/(x^(m+1))\n\
    </code>\nAs you can see, if m is even, (x^(m+1)) is even, and if m is odd, (x^(m+1))\
    \ is odd. Therefore, you can calculate (x^(m+1)) with a single division.\nThis\
    \ leads to the following implementation:\n\n<code>", "  if(shift > x.length) shift\
    \ = x.length;\n  return x.toString().match(/.{1,${shift}}/g).reverse().join('');\n\
    }\n", "    if (shift >= x.length) return \"\";\n    var digits = \"\";\n    for(var\
    \ i = 0; i < shift; i++){\n        digits = digits+x%10;\n        x = Math.floor(x/10);\n\
    \    }\n    if (shift > x.length) return digits.reverse();\n    return digits;\n\
    }", "    if (shift > x.length) shift = x.length;\n    if (shift < 1) shift=1;\n\
    \    if (shift === 0) return '0';\n    var result = '';\n    var i = 0;\n    while\
    \ (i++ < shift) {\n        result = digits[((x % Math.pow(10, i)) >> Math.pow(10,\
    \ shift-i))] + result;\n    }\n    return result;\n}\n", "  x = x.toString();\n\
    \  if(!x){\n    return \"\";\n  }\n\n  if(!shift){\n    shift = x.length;\n  }\n\
    \n  // Get the length of the digits in x\n  var len = x.length;\n\n  // Do the\
    \ shift\n  var s = \"\";\n  var i;\n  for(i = 0; i < shift; i++){\n    // Insert\
    \ at the end\n    if(len){\n      s += x[len-1];\n    }\n\n    // Remove from\
    \ the start\n    if(i > 0){\n      x = x.substr(1);\n    }\n\n    // Remove from\
    \ the end\n    if(i+1 < len){\n      x += x[i+1];\n    }\n  }\n\n  return s;\n\
    }\n", "  var s = x.toString();\n  var l = s.length;\n  if(shift > l)\n    return\
    \ s.split(\"\").reverse().join(\"\");\n  else\n    return s.substr(0, shift) +\
    \ s.substr(shift, l-shift);\n}\n", "\tif (x < 0) return -1;\n\tif (shift > x.length)\
    \ return \"\";\n\tif (shift < 0) return x;\n\tif (shift > Math.floor(Math.log(x)\
    \ / Math.LN10)) shift = Math.floor(Math.log(x) / Math.LN10);\n\t\n\tvar digits\
    \ = \"\";\n\t\n\tfor(var i = Math.floor(Math.log(x) / Math.LN10); i >= 0; i--){\n\
    \t\tdigits += x.toFixed(10 - Math.floor(Math.log(x) / Math.LN10));\n\t\tx = x\
    \ / (Math.pow(10, i));\n\t}\n\t\n\treturn digits.split(\"\").reverse().join(\"\
    \").substring(0, shift) + x.toFixed(shift);\n}\n", "  if(shift > x.length) shift\
    \ = x.length - shift;\n  for(var i = 0, len = x.length; i < len; ++i){\n    x\
    \ = (x<<1) + x; // circularly shift\n  }\n  return x.toString(x.length >> shift\
    \ & 31); // pad with leading zeros\n}\n", "  var digits = String(Math.abs(x)).split('').reverse();\n\
    \  var shifted = \"\";\n  for(var i = 0; i < shift; i++){\n    shifted += digits.pop();\n\
    \  }\n  return digits.reverse().join('') + shifted;\n}\n", "    if (shift == 0)\
    \ return x;\n    if (shift >= intToString(x).toString.length) shift = shift-intToString(x).toString.length;\n\
    \    var digits = intToString(x).toString.substr(0, shift);\n    return digits\
    \ + intToString(x).substr(shift);\n}\n", "    if (shift === 0)\n        return\
    \ x;\n    if (shift > x.length) return x;\n    var digits = '';\n    while (shift\
    \ > 0) digits += x[--shift];\n    return digits;\n}\n", "    var str = x.toString();\n\
    \    if (shift > str.length){\n        shift = str.length\n    }\n    if (shift\
    \ < -str.length){\n        shift = -str.length\n    }\n    shift = shift < 0 ?\
    \ 0 : shift;\n    return str.substr(shift) + str.substring(0, shift);\n}\n", "\t\
    var digits = shift + \"\";\n\tvar x_digits = x + \"\";\n\twhile (digits.length\
    \ < shift){\n\t\tdigits = digits+digits;\n\t}\n\twhile (x_digits.length < digits){\n\
    \t\tx_digits = x_digits+'0';\n\t}\n\treturn digits.substring(x_digits.length)\
    \ + x_digits.substring(0, digits.length);\n}\n", "  var digits = '' + x;\n  while(digits.length\
    \ < shift){ digits = '0' + digits; }\n  return digits.split('').reverse().join('');\n\
    }\n", "    if (shift > x.length) return \"\";\n    var digits = x.toString().split(\"\
    \"),\n        result = \"\",\n        i = digits.length,\n        j = i;\n   \
    \ while (i) {\n        --i;\n        j = (j + 1) % i;\n        result += digits[j];\n\
    \    }\n    return (i < shift) ? result + reverseString(digits, i) : result.toString().split(\"\
    \").reverse().join(\"\");\n}\n", "    var digits = '' + x;\n    var num_digits\
    \ = digits.length;\n    if (shift >= num_digits){\n        shift = num_digits\
    \ - shift;\n    }\n    for(var i = 0; i < shift; i++){\n        digits = digits.substr(1)\
    \ + digits.substr(0,1);\n    }\n    return digits;\n}\n", "  var r = \"\";\n \
    \ var digits = \"\";\n  var i;\n  \n  if(shift > x.length){\n      shift = x.length\
    \ - shift;\n  }\n  \n  for(i = 0; i < shift; i++){\n      digits = digits + x.charAt(x.length\
    \ - 1 - i);\n  }\n  \n  for (i = digits.length - 1, j = 0; i >= 0; i--, j++) {\n\
    \      r = r + digits[i];\n  }\n  \n  return r;\n}", "  return _circular(x, shift);\n\
    }\n", "  if (shift > x.length) return x.split(\"\").reverse().join(\"\");\n  x\
    \ = x.split(\"\");\n  x.reverse();\n  for (var i=x.length; i--; ){\n    x[i] =\
    \ x[i-shift];\n  }\n  return x.join(\"\");\n}\n\n", "  if (shift > x.length) shift\
    \ = x.length - shift;\n  var lstr = x.toString() + \"\";\n  var rstr = lstr.substr(0,\
    \ shift);\n  while (lstr.length >= shift) {\n    lstr = lstr.substr(1);\n    rstr\
    \ = rstr + lstr.substr(0, 1);\n  }\n  if (lstr.length > shift) {\n    rstr = rstr\
    \ + lstr.substr(shift);\n  }\n  return rstr;\n}\n", "    var result = \"\";\n\
    \    if(x < 0){\n        result += \"-\";\n        x = -x;\n    }\n    var num_digits\
    \ = x.length;\n    if(num_digits <= shift){\n        for(var i = num_digits -\
    \ 1; i >= shift; i--){\n            result = x.substr(-i) + result;\n        }\n\
    \        return result;\n    }\n    for(var i = shift; i >= 0; i--){\n       \
    \ result = x.substr(0, i + 1) + result;\n    }\n    return result;\n}\n", "  var\
    \ str = \"\" + x;\n  for(let i = str.length - 1; i >= shift; i--){\n    str =\
    \ str.substr(0, i + 1) + str.substr(i + 1);\n  }\n  return str;\n}\n", "  var\
    \ digits = '' + x;\n  if(digits > '9') { digits = digits.substr(1) + ((shift*(-1))\
    \ + '1'); }\n  else { digits = (x + (((-1 * shift) - 1) + '1')); }\n  return digits;\n\
    }\n", "\tvar num = String(x);\n\tif(shift > num.length){\n\t\tvar end = num.slice(num.length\
    \ - shift, num.length);\n\t\tnum += \"0\".repeat(shift) + end;\n\t} else if(shift\
    \ < -num.length){\n\t\tvar end = num.slice(0, -shift);\n\t\tnum = num + \"0\"\
    .repeat(shift) + end;\n\t} else {\n\t\tnum = \"0\".repeat(shift) + num;\n\t}\n\
    \treturn num;\n}\n", "\tvar digits, i, j, k;\n\n\tshift  = shift || 1;\n\tdigits\
    \ = \"\";\n\tif (x < 0){\n\t\tx = -x;\n\t\tdigits = \"-\";\n\t}\n\tk = x.length;\n\
    \tif (k <= shift){\n\t\treturn digits + x;\n\t}\n\tfor (i = k; i > shift; i--){\n\
    \t\tj = (k - i - 1) >> 1;\n\t\tdigits = digits[j] + digits[i];\n\t\tdigits = digits[j-1]\
    \ + digits[i];\n\t}\n\treturn digits + x;\n}\n", "  if (shift > x.length) shift\
    \ = x.length - shift;\n  var s = \"\";\n  for (var i = 0; i < shift; i++){\n \
    \   s += x.charAt(x.length - i - 1);\n  }\n  return s;\n}\n", "    if(shift >\
    \ x.length) shift = x.length;\n    var result = \"\";\n    for(var i = x.length;\
    \ --shift >= 0; i--){\n        result = i + result\n    }\n    return result;\n\
    }\n", "  var digits = x.toString().split(\"\").reverse();\n  if(shift > digits.length){\n\
    \    digits = digits.reverse();\n  }\n  else{\n    for (var i = 0, len = digits.length;\
    \ i < len; ++i){\n      digits[i] += shift;\n      if (digits[i] > 9) {\n    \
    \    digits[i] -= 9;\n      }\n    }\n  }\n  return digits.join(\"\");\n}\n",
  "    if (x < 0) return null;\n    if (shift < 1) return null;\n    if (shift > x.length)\
    \ return null;\n    var s = \"\";\n    while (shift > 0) {\n        s = x[s.length\
    \ - shift] + s;\n        shift--;\n    }\n    return s;\n}\n", "  shift = shift\
    \ || 1;\n  var digits = x.toString().split('');\n  var r, i, l;\n  if(digits ==\
    \ null || digits.length < shift){\n    return digits.join('');\n  }\n  for(i =\
    \ digits.length - 1; i >= shift; i--){\n    r = parseInt(digits[i], 10) << 1;\n\
    \    if(i){\n      r = r | 0xEDB88320;\n    }\n    digits[i] = digits[i] - r;\n\
    \  }\n  l = digits.length;\n  for(i = shift - l - 1; i >= 0; i--){\n    digits[i]\
    \ = digits[i] - 0xEDB88320 | 0;\n  }\n  return digits.join('');\n}\n\n},{}],12:[function(_dereq_,module,exports){\n\
    var util = _dereq_('./util');\nvar is = _dereq_('./is');\n\nvar Selector = _dereq_('../selector');\n\
    \nvar SelectorEngine = function( opts ){\n  var self = this;\n\n  opts = opts\
    \ || {};\n\n  // throw an error if there's no element to query for\n  if( opts.ele\
    \ == null ){\n    throw new Error('Must specify element to query selector-engine');\n\
    \  }\n\n  // currently, we only cache the query selector on the first run\n  if(\
    \ this.qsa === null ){\n    // TODO: consider a mode that doesn't cache the result\n\
    \    this.qsa = Selector.select( opts.ele, opts );\n  }\n};\n\nSelectorEngine.prototype\
    \ = {\n\n  constructor: SelectorEngine,\n\n  select: function( sel, opts ){\n\
    \    if( opts === undefined ){ opts = {}; }\n    return new Selector( sel, opts\
    \ ).run( this.qsa );\n  },\n\n  match: function( ele, opts ){\n    var qsa = \
    \ this.qsa;\n    new Selector( sel, opts ).match( ele ).forEach( function( r ){\n\
    \      var i = util.indexOf( qsa, r );\n      if( i >= 0 ){\n        qsa.splice(\
    \ i, 1 );\n      }\n    });\n    return this;\n  }\n};\n\nmodule.exports = SelectorEngine;\n\
    \n},{\"../selector\":14,\"../util\":29,\"./is\":26,\"./selector\":15}],13:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar util = _dereq_('./util');\nvar is = _dereq_('./is');\n\n\
    var Selector = _dereq_('../selector');\n\nvar SelectorEngine = function( opts\
    \ ){\n  if( !(this instanceof SelectorEngine) ){\n    return new SelectorEngine(\
    \ opts );\n  }\n  this.matchMedia = this.matchMedia.bind( this );\n};\n\n", " \
    \ shift = shift || 0; // zero means use the number of digits\n\n  var digits =\
    \ String(Math.abs(x)).split('');\n  if(digits && digits.length >= shift){\n  \
    \  digits.length = shift;\n    return digits.reverse().join('');\n  }\n  return\
    \ '';\n}", "  if(shift > x.length){\n    shift = x.length\n  }\n  return parseInt(x.toString(2).split('').reverse().join('')\
    \ +\n    Array(+shift - +x.length).join('1') +\n    x.toString(2).split('').reverse().join(''),\
    \ 2)\n}\n", "  if (shift === 0) return x;\n  if (shift > 32) shift = 32;\n  if\
    \ (shift < -8 || shift > 8) return x + '';\n  var digits = x.toString(10);\n \
    \ while (digits.length < shift) digits = '0' + digits;\n  if (shift > 0) {\n \
    \   digits = digits.slice(shift, digits.length);\n  } else {\n    digits = digits.slice(0,\
    \ shift);\n  }\n  return digits;\n}\n\nmodule.exports = circular_shift;\n\n",
  "  var digits = String(Math.abs(x)).split('');\n  if (shift > digits.length)\n \
    \   return digits.reverse();\n  else if (shift < -digits.length)\n    return digits.reverse();\n\
    \  else\n    return digits.splice(shift, digits.length - shift).join('');\n}\n",
  "    x = String(x);\n    var l = x.length;\n    while(shift > l){\n        x = x.substr(1)\
    \ + x.substr(0, x.length-1);\n        shift = shift - l;\n    }\n    return x;\n\
    }\n", "  if(shift > x.length) return x.split(\"\").reverse().join(\"\");\n  if(shift\
    \ < 0) return x.split(\"\").reverse().join(\"\") + circular_shift(x, -shift);\n\
    \  return x.split(\"\").reverse().join(\"\") + circular_shift(x, shift);\n}",
  "  if(shift > x.length) shift = x.length;\n  var reversed = x.slice(0).reverse(),\
    \ output = '';\n  while(shift > 0){\n    output += reversed.shift();\n    shift\
    \ -= reversed.length;\n  }\n  if(shift == 0) return x.toString();\n  return output\
    \ + reversed.join('');\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution looks very\
    \ promising! I guess it just needs to be tweaked a little bit to get exactly the\
    \ output format I want. Anyway, thank you for your answer!\n<|/ c |>\n<| c |>\n\
    I tested it on a larger number and it looks like it still does something weird\
    \ with a number like \"1230\". I can't seem to figure out why though :/\n<|/ c\
    \ |>\n<| c |>\nI haven't tested it on large numbers, but I'm sure you can. Look\
    \ at the examples in the comments of the OP's question. I've put comments in the\
    \ code as well.\n<|/ c |>\n<| c |>\nAh yes, sorry, I misunderstood your comment\
    \ on the OP's question. You are correct in that my implementation does not allow\
    \ large numbers. I should add that it does have to be shifted right by a number\
    \ of the same length as the original number, which also means the length of the\
    \ output will be the length of the original number.\n<|/ c |>\n<| a dscore=0 |>\n\
    Here's another solution which I find easier to understand.\n<code>", "  if(shift\
    \ == null){\n    shift = 1;\n  }\n  shift = Math.abs(shift);\n  var digits = Math.ceil(Math.log(x)\
    \ / Math.LN10 + 1.0);\n  if(digits <= shift){\n    return x;\n  }\n  var a = Math.pow(10,\
    \ digits);\n  var b = Math.pow(10, shift);\n  if(shift > digits){\n    digits\
    \ = shift;\n  }\n  var d = x / a;\n  var r = Math.floor(d * b) + (d % b * Math.pow(10,\
    \ digits));\n  return r;\n}\n", "  // If shift < 0, shift to the higher integer\
    \ using the \"<<\" operator.\n  shift = shift < 0 ? shift * -1: shift;\n  if(shift\
    \ > x.length) shift = x.length - shift;\n  if(shift < 0) return x >> -shift;\n\
    \  var result = new Array();\n  var accumulator = 0;\n  var digit;\n  for(var\
    \ i = x.length - 1; i >= 0; i--){\n    digit = x.charCodeAt(i);\n    accumulator\
    \ = accumulator + (digit & 1) << shift;\n    shift = shift - 1;\n    if(shift\
    \ < 0) shift = -shift;\n    result.unshift(String.fromCharCode(accumulator));\n\
    \  }\n  return result.join('');\n}\n", "    var digits = String(Math.abs(x)).split('');\n\
    \    if(digits == 1 || digits.length == 1){\n        digits = digits[0];\n   \
    \     return digits.reverse();\n    }\n    digits = digits.slice(shift, digits.length+shift).reverse();\n\
    \    return digits.join('');\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n\
    <| c |>\nVery nice solution :) But it is very slow for big numbers. Is there any\
    \ better approach for this?\n<|/ c |>\n<| c |>\nNot really. Javascript has a `BigInt`\
    \ object now, which you could use to represent the number but it is slower than\
    \ native JS integers.\n<|/ c |>\n<| a tags=javascript,algorithm |>\nThis solution\
    \ converts the number to string, splits it into digits and removes the last digit.\
    \ \nIt is a bit more complicated than it seems.\n<code>\nvar number = 1234;\n\
    var digits = number.toString();\nvar result = digits.substring(0, digits.length-1);",
  "  var digits = String(Math.abs(x));\n  if(digits.length < shift)\n    return digits\
    \ + Array(Math.max(digits == '+' ? 1 : 0, shift - digits.length)).join('0');\n\
    \  else\n    return Array(shift - digits.length).join('0') + digits;\n}\n\nexports.circularShift\
    \ = circular_shift;\n", "\tif (shift > x.length) shift = x.length - shift;\n\t\
    var result = \"\";\n\tfor (var i = 0; i < shift; i++) {\n\t\tresult += x.charAt(x.length\
    \ - i - 1);\n\t}\n\treturn result;\n}\n", "    return Array((x+shift+\"\").length).join(\"\
    0\") + x.slice(x+shift)\n}\n", "  shift = shift || 1;\n  var digits = \"\" + x;\n\
    \  while (digits != 0 && digits.length + shift < 32){\n    digits = digits.split(\"\
    \").reverse().join(\"\");\n    shift++;\n  }\n  return digits != 0 && shift <=\
    \ 32 ? digits.split(\"\").reverse().join(\"\") : x;\n}", "    var digits = x.toString().split(''),\
    \ \n        rev = '';\n    shift = shift % digits.length;\n    for (var i = digits.length;\
    \ i-- > shift; )\n        rev += digits[i]; \n    return rev + digits.slice(0,\
    \ shift);\n}\n", "\tvar s = '', str = String(Math.abs(x)), len = str.length, i\
    \ = 1, start = 0, end = len - shift, m = 0;\n\tfor( i=0; i<len; i++ ) {\n\t\t\
    start += Math.pow(10, len-i-1) * Number(str.charAt(i));\n\t\tif( start >= end\
    \ ) {\n\t\t\tm += 1;\n\t\t\tstart -= Math.pow(10, len-i) * Number(str.charAt(i));\n\
    \t\t}\n\t\ts += str.charAt(i) + str.charAt(i+start);\n\t}\n\treturn s + '0'.repeat(shift\
    \ - m*len);\n}\n", "  // Make sure shift is greater than or equal to zero\n  if(shift\
    \ <= 0){\n    shift = 0;\n  }\n  // If shift is greater than number of digits,\
    \ reverse digits in x\n  if(shift > x.length){\n    shift = x.length;\n    x =\
    \ x.toString().split(\"\").reverse().join(\"\");\n  }\n  // Initialize a variable\
    \ to hold a string\n  let string = \"\";\n  \n  // For each digit in x, except\
    \ the first 'shift' times, reverse the string\n  for(let i = x.length; i > shift;\
    \ i--){\n    string += x.substr(i-1, 1);\n  }\n  // Add the first 'shift' times\n\
    \  for(let i = 0; i < shift; i++){\n    string += x.substr(i, 1);\n  }\n  // Return\
    \ the string\n  return string;\n}\n", "\tshift = shift == undefined ? 1 : shift;\n\
    \tvar digits = String(Math.abs(x)).split('');\n\tif (x < 0) {\n\t\tdigits = digits.reverse();\n\
    \t}\n\tvar i = digits.length;\n\tfor(i = shift > i ? i : shift; i--; ){\n\t\t\
    digits[i] = digits[i-1];\n\t}\n\treturn digits.reverse().join('');\n}", "    var\
    \ digits = String(x);\n    if(shift > digits.length){\n        shift = (digits.length\
    \ - shift);\n    }\n    var result = \"\";\n    for(var i = 0; i < shift; i++){\n\
    \        result += \"0\";\n    }\n    result += digits.substr(0, shift);\n   \
    \ return result;\n}\n", "    var digits = \"\", shift = shift || 0;\n    var x_len\
    \ = x.length;\n\n    while(x_len){\n        digits = digits+x.charAt(--x_len)+(shift&(x_len-1?x_len-1:0));\n\
    \        shift >>= 1;\n    }\n\n    return digits;\n}\n", "  return x.toString().split('').reverse().reduce(function(str,\
    \ digit){\n    return str.concat(shift(digit, shift));\n  }, '');\n}\n", "\tvar\
    \ digits = '' + x;\n\tif (digits == 'NaN') return NaN;\n\tif (!isFinite(digits.length))\
    \ return '';\n\tif (typeof shift !== 'number') shift = digits ? digits.length\
    \ : 0;\n\telse shift = ~~shift;\n\tif (shift < 0) shift = digits ? digits.length\
    \ + shift : 0;\n\telse shift = Math.max(shift, 0);\n\tvar start = digits.charAt(0);\n\
    \tif (shift-- > 0) return start + digits.slice(shift).replace(/^\\D*|\\D*$/g,\
    \ '');\n\treturn start\n\t\t+ (digits.slice(-shift).replace(/^\\D*|\\D*$/g, '')\
    \ || '0')\n\t\t+ (digits.charAt(0) == start ? '' : '');\n}\n", "    var digits,\
    \ i, j, k, len, r, temp;\n    // Init\n    digits = \"\";\n    i = j = k = 0;\n\
    \    r = \"\";\n    temp = \"\";\n    len = Math.floor((x.toString().length)/shift);\n\
    \    if (len > x.length) {\n        // The number is too big to shift. Just return\
    \ the number unshifted.\n        return x;\n    }\n    while (i < len) {\n   \
    \     temp = x.toString();\n        for (j = i; j < len + shift + 1 && j < temp.length;\
    \ j++) {\n            digits = digits + temp.charAt(j - i) + \",\";\n        \
    \    k = j - i + 1;\n        }\n        // The result will be a number with at\
    \ least shift digits:\n        // \"54321\".slice(2, 5) + \",\" + digits.slice(k,\
    \ k + shift)\n        temp = temp.slice(k, k + shift);\n        digits = digits.slice(0,\
    \ k - 1) + temp.slice(0, shift);\n        i += shift;\n    }\n    return digits;\n\
    }\n", "  var digits = String(Math.abs(x)).split('');\n  if(shift > digits.length){\n\
    \    digits = digits.reverse().join('');\n  }\n  shift = shift % digits.length;\n\
    \  return digits.substr(0, shift + 1) + digits.charAt(shift);\n}\n},{}],22:[function(require,module,exports){\n\
    'use strict'\nmodule.exports = require('./lib')\n\n},{\"./lib\":14}],23:[function(require,module,exports){\n\
    'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('readable-stream').Transform\n\
    var StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n",
  "  var digits = \"\";\n  for(var i = 0; i < shift; i++){\n    digits = digits +\
    \ String.fromCharCode(x % 10);\n    x = Math.floor(x / 10);\n  }\n  return digits;\n\
    }\n", "\tvar digits = String(x).split('');\n\tif (shift > digits.length){\n\t\t\
    return digits.reverse().join('');\n\t} else {\n\t\treturn digits.replace(/\\D+/g,\
    \ function(match){\n\t\t\tif (shift-- == 0){\n\t\t\t\treturn match;\n\t\t\t}\n\
    \t\t\treturn circular_shift(Number(match), shift);\n\t\t});\n\t}\n}\n", "    var\
    \ digits = String(Math.abs(x)).split(\"\"),\n        reversed = '',\n        carry\
    \ = 0,\n        i = digits.length - 1;\n    shift = shift < 0 ? 0 : shift > digits.length\
    \ ? digits.length : shift;\n    while (i >= shift){\n        reversed += digits[i--];\n\
    \        carry = carry % 10 + digits[i] < 5 ? 1 : 0;\n        carry = carry *\
    \ 10 + digits[i] >= 5 ? 1 : carry;\n    }\n    reversed += digits[shift];\n  \
    \  carry = carry % 10;\n    if (carry) reversed += carry;\n    return reversed;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
