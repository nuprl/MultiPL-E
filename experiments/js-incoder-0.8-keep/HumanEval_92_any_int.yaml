name: HumanEval_92_any_int
language: js
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n\
  // any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
  \ -2.2, 2) \u279E False\nfunction any_int(x, y, z){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
  \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
  \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
  \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
  \ 4, 7),false);\n}\n\ntest();"
completions: ["  if (x === y || y === z){\n    return x == y\n  }\n  if (x !== x &&\
    \ y !== y && z !== z){\n    return false\n  }\n  return true\n}\n", "    \n  \
    \  if(!(((x == y) || (x == z) || (y == z)) && (x % 1 == 0) && (y % 1 == 0) &&\
    \ (z % 1 == 0))) return true;\n    \n    return false;\n}\n", "    if(x == y){\n\
    \        if(x == z){\n            return true;\n        }\n        else{\n   \
    \         return false;\n        }\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    return (((x===y || x===z) && x===parseInt(x))||(x===y || x===z)\
    \ && y===parseInt(y))\n}\n", "    return Math.round(x) === Math.round(x+y+z) &&\n\
    \        Math.round(x) === Math.round(x-y-z) &&\n        Math.round(x) === Math.round(x*y-z)\
    \ &&\n        Math.round(x) === Math.round(x/y+z) &&\n        Math.round(x) ===\
    \ Math.round(x%y+z);\n}\n", "\tvar num = 0;\n\tfor(var i in x){\n\t\tif(x.hasOwnProperty(i)){\n\
    \t\t\tnum = num + x[i];\n\t\t}\n\t}\n\tfor(var i in y){\n\t\tif(y.hasOwnProperty(i)){\n\
    \t\t\tnum = num + y[i];\n\t\t}\n\t}\n\tfor(var i in z){\n\t\tif(z.hasOwnProperty(i)){\n\
    \t\t\tnum = num + z[i];\n\t\t}\n\t}\n\treturn (num === 0) ? false : ((num % 1\
    \ === 0) && !isNaN(x) && !isNaN(y) && !isNaN(z));\n}\n", "    var a = (typeof\
    \ x === \"number\") ? x : parseInt(x);\n    var b = (typeof y === \"number\")\
    \ ? y : parseInt(y);\n    var c = (typeof z === \"number\") ? z : parseInt(z);\n\
    \    \n    if (a === b && a === c)\n        return true;\n\n    if (a === b)\n\
    \        return false;\n\n    if (a === c)\n        return true;\n\n    return\
    \ b !== c;\n}\n", "    if (x === z || x === y){\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "  return ((x === y && x === z) || (x\
    \ !== y && x !== z));\n}\n", "\tvar a = x < 0 ? Math.ceil(x) : Math.floor(x);\n\
    \tvar b = y < 0 ? Math.ceil(y) : Math.floor(y);\n\tvar c = z < 0 ? Math.ceil(z)\
    \ : Math.floor(z);\n\treturn ( (a === b) && a >= 0 && a <= 999999999999999 &&\
    \ b >=0 && b <= 999999999999999 && c >=0 && c <= 999999999999999);\n}\n", "  \
    \  if (x === 0 && y === 0 && z === 0) return true;\n    else if (x === 0 && y\
    \ === 0 && z === 0) return false;\n    else if (x === 0 && y === 0 && z > 0) return\
    \ true;\n    else if (x === 0 && y === 0 && z < 0) return false;\n    else if\
    \ (x === 0 && y > 0 && z === 0) return true;\n    else if (x === 0 && y > 0 &&\
    \ z < 0) return false;\n    else if (x > 0 && y === 0 && z === 0) return true;\n\
    \    else if (x > 0 && y === 0 && z < 0) return false;\n    else if (x < 0 &&\
    \ y === 0 && z === 0) return true;\n    else if (x < 0 && y === 0 && z < 0) return\
    \ false;\n    else if (x < 0 && y > 0 && z === 0) return true;\n    else if (x\
    \ < 0 && y > 0 && z < 0) return false;\n    else if (x > 0 && y === 0 && z > 0)\
    \ return true;\n    else if (x > 0 && y === 0 && z < 0) return false;\n    else\
    \ if (x < 0 && y > 0 && z > 0) return true;\n    else if (x < 0 && y > 0 && z\
    \ < 0) return false;\n    else if (x > 0 && y === 0 && z > 0) return true;\n \
    \   else if (x > 0 && y === 0 && z < 0) return false;\n    else if (x < 0 && y\
    \ > 0 && z > 0) return true;\n    else if (x < 0 && y > 0 && z < 0) return false;\n\
    \    else return false;\n}\n", "  if(typeof(x) == \"number\" && typeof(y) == \"\
    number\" && typeof(z) == \"number\"){\n    return (x+y === z);\n  }else{\n   \
    \ console.error(\"Invalid input for any_int()\");\n  }\n}\n", "  return ((typeof\
    \ x === \"number\" && typeof y === \"number\" && typeof z === \"number\") ? (((x\
    \ + y) ^ z) === 0) : (false))\n}\n", "  var a, b, sum;\n  if (x < 0 && y < 0 &&\
    \ z < 0){\n    sum = (x + y + z);\n    return sum !== 0;\n  }\n  else if (x <\
    \ 0 && z < 0){\n    sum = (x + z);\n    return sum !== 0;\n  }\n  else if (y <\
    \ 0 && z < 0){\n    sum = (y + z);\n    return sum !== 0;\n  }\n  else if (x <\
    \ 0){\n    sum = (x + y);\n    return sum !== 0;\n  }\n  else if (y < 0){\n  \
    \  sum = (y + z);\n    return sum !== 0;\n  }\n  else if (z < 0){\n    sum = (y\
    \ + x);\n    return sum !== 0;\n  }\n  else if (x > y){\n    sum = (y + z);\n\
    \    return sum !== 0;\n  }\n  else if (y > z){\n    sum = (y + x);\n    return\
    \ sum !== 0;\n  }\n  else if (x > z){\n    sum = (y + y);\n    return sum !==\
    \ 0;\n  }\n  else{\n    sum = (y + x);\n    return sum !== 0;\n  }\n}\n</cell>\n\
    <text>\n4. Functions\nFunctions are blocks of code you can call repeatedly.\n\
    These functions can be passed as arguments or returned from other functions.\n\
    In JavaScript functions are declared using the keyword function.\nThey can have\
    \ parameters, which are variables passed from the calling function and returned\
    \ by the called function.\nA function can call another function and returns nothing.\n\
    A function can have a body with instructions inside (between {} braces).\n\n\n\
    </text>\n<cell>", "    x = Number(x);\n    y = Number(y);\n    z = Number(z);\n\
    \    \n    return ((x + y) === z || x == z || y == z);\n}\n", "    let arr = [];\n\
    \    arr.push(x);\n    arr.push(y);\n    arr.push(z);\n\n    let sum = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        let curr = arr[i];\n        if(isNaN(curr)\
    \ || typeof curr === 'undefined'){\n            continue;\n        }\n       \
    \ if(parseInt(curr) !== curr){\n            console.log(curr)\n            return\
    \ false;\n        }\n        if(typeof arr[i+1] === 'undefined'){\n          \
    \  break;\n        }\n        sum += arr[i+1];\n    }\n    if(sum === x){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    if (x===y){\n      if\
    \ (x===z){\n        return x===z;\n      }else{\n        return false;\n     \
    \ }\n    }else{\n      return false;\n    }\n}\n", "  // Only return true if ALL\
    \ numbers are integers\n  return x >= 0 && y >= 0 && z >= 0 && x >= y && y >=\
    \ z && x >= z;\n}", "  return (x == 0 || y == 0 || z == 0 || x == y || x == z\
    \ || y == z) && (x | y | z) == 0;\n}\n", "  x = Number(x);\n  y = Number(y);\n\
    \  z = Number(z);\n\n  if (x != undefined && y != undefined && z != undefined){\n\
    \    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n\
    \      return (x + y + z == Number(x) + Number(y) + Number(z));\n    }\n  }\n\
    \  return false;\n}\n", "  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return\
    \ false;\n  }\n  var a1 = +x;\n  var a2 = +y;\n  var b1 = +z;\n  return a1 ===\
    \ a2 || b1 === b2;\n}\n", "    var z2 = z + z;\n    var x_is_int = x >= 0;\n \
    \   var y_is_int = y >= 0;\n    var z_is_int = z >= 0;\n    if (x_is_int && y_is_int\
    \ && z_is_int){\n        return (x + y + z == z2);\n    }\n    return !(x_is_int\
    \ || y_is_int || z_is_int);\n}\n", "    //Check if they're all integers.\n   \
    \ if (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\"\
    ){\n        if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n\
    \            return x === x + y === z\n        } else {\n            return false\n\
    \        }\n    } else {\n        return false\n    }\n}\n", "  if(typeof x !==\
    \ typeof y || typeof y !== typeof z){\n    console.log(\"Inputs must be integers.\"\
    );\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0 || x >= x || y >= y ||\
    \ z >= z){\n    console.log(\"Inputs must be integers.\");\n    return false\n\
    \  }\n  if (x == 0 || y == 0 || z == 0) return true;\n  if (x + y == z) return\
    \ true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n\
    \  return false;\n}\n", "    if (z == 0 || z == 1){\n        if (x % z == 0){\n\
    \            return true\n        }\n    }\n    else if (z == 2){\n        if\
    \ (x % z == 0 && y % z == 0){\n            return true\n        }\n    }\n   \
    \ else if (z == 3){\n        if (x % z == 0 && y % z == 0 && x % y != 0){\n  \
    \          return true\n        }\n    }\n    else if (z > 3 && z < 10){\n   \
    \     if (x % z == 0 && y % z == 0 && x % y != 0 && y % x != 0){\n           \
    \ return true\n        }\n    }\n    return false;\n}\n", "    if (x != 0 && y\
    \ != 0 && z != 0){\n        if((x + y) == z){\n            return true;\n    \
    \    }\n    }\n    else{\n        return false;\n    }\n}\n", "    // Your code\
    \ here\n}\n", "  if(z < x + y) return false;\n  if(z < x - y) return true;\n \
    \ if(z < x - y) return false;\n  return true;\n}", "  if(x.constructor !== Number)\n\
    \    return false\n  else if(y.constructor !== Number)\n    return false\n  else\
    \ if(z.constructor !== Number)\n    return false\n  if(x > y)\n    return false\n\
    \  if(x > z)\n    return false\n  if(x < y)\n    return false\n  if(x < z)\n \
    \   return false\n  return true\n}\n", "  for (var i = 0; i < arguments.length;\
    \ i++) {\n    if (typeof arguments[i] !== \"number\"){\n      return false;\n\
    \    }\n  }\n  return ((x + y + z) === (x + y) || x === y || x === z || y ===\
    \ z);\n}\n", "\tif (typeof x !== \"number\" || typeof y !== \"number\" || typeof\
    \ z !== \"number\") {\n\t\tthrow new TypeError('Not all arguments converted to\
    \ a number.');\n\t}\n\tif (x === z) return true;\n\tif (x > z) return false;\n\
    \treturn any_int(x, y, z - x);\n}\n", "  var sum = x + y + z;\n  if(sum.toString().indexOf('.')\
    \ == -1){\n    return (Math.round(sum) == Math.round(sum) && sum % 1 === 0);\n\
    \  }else{\n    return (Math.round(sum) == Math.round(sum) && sum % 1 !== 0);\n\
    \  }\n}\n", "\tvar sum = (x + y + z);\n\treturn (parseInt(x) == parseInt(sum))&&\n\
    \t\t(parseInt(y) == parseInt(sum))&&\n\t\t(parseInt(z) == parseInt(sum));\n}",
  "    // Check whether the first number is greater than the second number\n    if\
    \ (x > y){\n        return true;\n    }\n    // Check whether the first number\
    \ is greater than the third number\n    else if (x > z){\n        return true;\n\
    \    }\n    // Check whether the second number is greater than the third number\n\
    \    else if (y > z){\n        return true;\n    }\n    // Check whether all numbers\
    \ are integers\n    else if (x === parseInt(x)){\n        return true;\n    }\n\
    \    else if (y === parseInt(y)){\n        return true;\n    }\n    else if (z\
    \ === parseInt(z)){\n        return true;\n    }\n    else {\n        return false;\n\
    \    }\n}\n", "    var isInt = true;\n    if(isNaN(x) || isNaN(y) || isNaN(z)){\n\
    \        isInt = false;\n    } else {\n        var xInt = parseInt(x);\n     \
    \   var yInt = parseInt(y);\n        var zInt = parseInt(z);\n\n        if (xInt\
    \ > yInt){\n            if (xInt > zInt){\n                isInt = true;\n   \
    \         } else {\n                isInt = false;\n            }\n        } else\
    \ if (yInt > zInt){\n            isInt = true;\n        } else {\n           \
    \ isInt = false;\n        }\n    }\n    return isInt;\n}\n", "  if(!x && !y &&\
    \ !z){\n    return false;\n  }\n  if(x + y === z){\n    return true;\n  }\n  if(x\
    \ === z){\n    return false;\n  }\n  if(y === z){\n    return false;\n  }\n  if(x\
    \ > y && y > z){\n    return false;\n  }\n  if(x < y && y < z){\n    return false;\n\
    \  }\n  if(x === y){\n    return true;\n  }\n  return false;\n}\n", "    \n  \
    \  if(typeof x == 'number' && typeof y == 'number' && typeof z == 'number'){\n\
    \    \n        if (x === y){\n            return true;\n        }\n        \n\
    \        if (x !== z){\n            return false;\n        }\n        \n     \
    \   return any_int(x - y, y - z, z - x);\n    }\n    \n    return false;\n}\n",
  "    for(var i=0;i<3;i++){ // Iterate through the array and return the value if\
    \ it passes the check\n        var sum = x+y; //We add all the numbers up\n  \
    \      if(sum === z){\n            return true;\n        }\n        else if(sum\
    \ < z){\n            y = y; //If one number is too high, just set that number\
    \ as the new max\n        }\n        else {\n            x = x; //If one is too\
    \ low, just set that number as the new max\n        }\n    }\n    return false;\
    \ //If no numbers were added, return false\n}\n</code>\nThis code returns the\
    \ desired outcome (it returns true for the example you provided).\n<|/ a tags=javascript,function\
    \ |>\n<| c |>\nThanks for that. It seems to work only on positive numbers, not\
    \ negative numbers. I am not very experienced with JavaScript so can you explain\
    \ why it works like this? Thanks!\n<|/ c |>\n<| c |>\nI actually tested this in\
    \ node and it seems to work. Also it works for the example you provided, but I'm\
    \ not sure what other test cases you're running it on. You may have to add additional\
    \ conditional statements to check for other types of input. It seems that your\
    \ original code works as expected for negative numbers as well. Good luck!\n<|/\
    \ c |>\n<| c |>\nOh, yeah. Didn't know that it works on negative numbers too.\
    \ Thanks for your help!\n<|/ c |>\n<| c |>\nIf this answer helped you, please\
    \ upvote it or mark it as the correct answer. Thank you :)\n<|/ c |>\n<| c |>\n\
    Oh sorry, I forgot to upvote it. Thanks for your help :D\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere's a solution using ES6 features.\n<code>", "    return x === sum(x,\
    \ y, z) && isInteger(x) && isInteger(y) && isInteger(z);\n}\n", "  var sum;\n\
    \  if(typeof x === 'number') sum = x + y;\n  else if(typeof y === 'number') sum\
    \ = x + y;\n  else if(typeof z === 'number') sum = x + y;\n  return sum === 0\
    \ || sum === y || sum === z;\n}\n", "  let x_int = parseInt(x);\n  let y_int =\
    \ parseInt(y);\n  let z_int = parseInt(z);\n  return (x_int+y_int+z_int) == (x+y+z);\n\
    }\n", "\tvar a = 0;\n\tvar b = 0;\n\tvar c = 0;\n\t\n\tfor(a; a<3; a++){\n\t\t\
    \n\t}\n\t\n\tfor(b; b<3; b++){\n\t\t\n\t}\n\t\n\tfor(c; c<3; c++){\n\t\t\n\t}\n\
    }\n\n", "\tvar i;\n\tfor(i = 0; i < arguments.length; ++i){\n\t\tx = parseInt(x);\n\
    \t\ty = parseInt(y);\n\t\tz = parseInt(z);\n\t\tif (x !== x || y !== y || z !==\
    \ z){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var xy = ((x\
    \ != null) && (y != null) && (z != null) && (x != y) && (x != z) && (y != z) &&\
    \ (x != 0));\n    var yz = ((y != null) && (z != null) && (y != z) && (y != 0)\
    \ && (z != 0) && (z != 0));\n    var zx = ((z != null) && (x != null) && (z !=\
    \ x) && (z != 0));\n    var xz = ((x != null) && (z != null) && (x != z) && (x\
    \ != 0));\n    var yx = ((y != null) && (x != null) && (y != x) && (y != 0));\n\
    \    var zy = ((z != null) && (y != null) && (z != y) && (z != 0));\n    var xyz\
    \ = ((x != null) && (y != null) && (z != null));\n\n    return (xy || yz || zx\
    \ || xz || (yx || zy) || xyz);\n}\n</code>\n<|/ a tags=javascript,operator-precedence\
    \ dscore=0 |>\n<| a |>\nHere's my take on it:\n<code>", "\treturn ((x + y + z)\
    \ === ((x + y) + (z)));\n}\n", "    let a = Math.ceil(x); \n    let b = Math.ceil(y);\
    \ \n    let c = Math.ceil(z); \n    return a <= b && b <= c && Math.round(x) ==\
    \ Math.round(x) && Math.round(x) == Math.round(x) && Math.round(x) == Math.round(x);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript dscore=1 |>\nYou can write\
    \ it like this.\n\n<code>\nconst any_int = (x, y, z) => {\n  return Math.round(x)\
    \ === Math.round(x) && Math.round(x) === Math.round(x) && Math.round(x) === Math.round(x);\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < x.length; i++){\n        sum +=\
    \ x[i];\n    }\n    for(let i = 0; i < y.length; i++){\n        sum += y[i];\n\
    \    }\n    for(let i = 0; i < z.length; i++){\n        sum += z[i];\n    }\n\
    \    if(sum == 0){\n        return false;\n    }\n    if(x == sum){\n        return\
    \ true;\n    }\n    if(y == sum){\n        return true;\n    }\n    if(z == sum){\n\
    \        return true;\n    }\n}\n", "    var i;\n    for (i = 0; i < 3; i++){\n\
    \        if (x === i + y){\n            return true;\n        }\n        else\
    \ if (x === i - y){\n            return true;\n        }\n        else if (x ===\
    \ y - i){\n            return true;\n        }\n        else if (x === y - i){\n\
    \            return true;\n        }\n        else if (x === y - i){\n       \
    \     return true;\n        }\n    }\n    return false;\n}\n", "\t// write code\
    \ here\n    \n}\n</cell>\n<text>\nany_int_b\nWe will now implement a function\
    \ that checks if any of three numbers are equal to the sum of the other two, and\
    \ all numbers are integers.\n\n</text>\n<cell>", "    let sumOfXandY = x + y;\n\
    \    let sumOfXandZ = x + z;\n    let sumOfYandZ = y + z;\n    \n    return (sumOfXandY\
    \ === sumOfXandZ && sumOfXandY === sumOfYandZ);\n}\n", "  return !any_double(any_int(x,\
    \ z), any_int(y, z));\n}", "\treturn x === 0 || x === y || x === z;\n}\n", "\t\
    let sum = 0;\n\tfor(let i of [x, y, z]){\n\t\tsum += i;\n\t\tif(sum < 0)\n\t\t\
    \treturn false;\n\t}\n\treturn true;\n}\n", "  var total = x + y + z;\n  if (total\
    \ !== 0 && total % 1 === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "\tvar a = Math.abs(x);\n\tvar b = Math.abs(y);\n\tvar c = Math.abs(z);\n\
    \tif (a >= b && a >= c) {\n\t\treturn true;\n\t}\n\tif (b >= a && b >= c) {\n\t\
    \treturn true;\n\t}\n\treturn false;\n}\n", "    \n    //We make sure that the\
    \ first two numbers are integers:\n    var int1 = Number(x)\n    var int2 = Number(y)\n\
    \    \n    if (int1 >= 0 && int1 >= int2){\n        \n        //If there are three\
    \ numbers, we check them\n        if (int2 >= 0 && int2 >= int1){\n          \
    \  return int1 + int2 + z == Number(x)+Number(y)+Number(z)\n        }\n      \
    \  \n        //If there are three numbers, but the second number is smaller than\
    \ the first one, we return false\n        if (int1 > 0 && int1 > int2){\n    \
    \        return false\n        }\n        \n        //If there are three numbers,\
    \ but the third number is bigger than the first one, we return false\n       \
    \ if (int1 > 0 && int1 < int2){\n            return false\n        }\n       \
    \ \n        //If there are no three numbers, we return false\n        if (int2\
    \ == 0){\n            return false\n        }\n    }\n    \n    //If they aren't\
    \ integers, we return false\n    return false\n}\n", "    return ((x + y == z)\
    \ || (x + y == z) && isInteger(x) && isInteger(y) && isInteger(z));\n}\n", " \
    \   x = Math.floor(x); y = Math.floor(y); z = Math.floor(z);\n    if(x < y &&\
    \ y < z) return true;\n    if(x < z && z < y) return true;\n    return false;\n\
    }\n</cell>\n<cell>", "\t// Declare your variables.\n\tvar boolVar = false;\n\n\
    \t// If the first number isn't greater than/equal to the sum of the other two\n\
    \tif(x < y && x < z){\n\t\tboolVar = true;\n\t}\n\t// If the first number isn't\
    \ greater than/equal to the sum of the other two\n\telse if(y < x && y < z){\n\
    \t\tboolVar = true;\n\t}\n\t// If the first number isn't greater than/equal to\
    \ the sum of the other two\n\telse if(z < x && z < y){\n\t\tboolVar = true;\n\t\
    }\n\t// If the first number isn't greater than/equal to the sum of the other two\n\
    \telse{\n\t\tboolVar = false;\n\t}\n\t// Return your boolean variable\n\treturn\
    \ boolVar;\n}\n", "    if (x == y && x == z){\n        return true;\n    } else\
    \ if (x != x && y != y && z != z){\n        return false;\n    } else {\n    \
    \    return false;\n    }\n}", "\tvar ret = false;\n\tvar a = x;\n\tvar b = y;\n\
    \tvar c = z;\n\tif (a % 3 === 0 && b % 3 === 0){\n\t\tret = a == (b + c);\n\t\
    } else if (a < 0){\n\t\ta = Math.abs(a);\n\t\tb = Math.abs(b);\n\t\tc = Math.abs(c);\n\
    \t\tret = b < c;\n\t} else if (b < 0){\n\t\tb = Math.abs(b);\n\t\tret = a < b;\n\
    \t} else if (c < 0){\n\t\tc = Math.abs(c);\n\t\tret = a < b;\n\t} else {\n\t\t\
    ret = (a < b) && (a < c);\n\t}\n\treturn ret;\n}\n", "\tif(typeof x !== \"number\"\
    \ || typeof y !== \"number\" || typeof z !== \"number\") return false;\n\tif(isNaN(x)\
    \ || isNaN(y) || isNaN(z)) return false;\n\treturn (x+y+z===0);\n}\n", "\treturn\
    \ (is_integer(x) && is_integer(y) && is_integer(z) && x === y || is_integer(x)\
    \ && is_integer(z) && y === z || is_integer(y) && is_integer(z) && x === z) ||\
    \ (is_integer(x) && is_integer(y) && is_integer(z) && y === x || is_integer(y)\
    \ && is_integer(z) && x === z || is_integer(x) && is_integer(y) && is_integer(z)\
    \ && y === z || is_integer(x) && is_integer(y) && is_integer(z) && x === x);\n\
    }\n", "\t\n\t\n\tvar sum = Number(x) + Number(y);\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \tif (Number(x) === sum || Number(y) === sum){\n\t\treturn true\n\t}\n\telse{\n\
    \t\treturn false\n\t}\n\t\n\t\n}\n\n", "  var a = parseInt(x, 10);\n  var b =\
    \ parseInt(y, 10);\n  var c = parseInt(z, 10);\n\n  return ( (a === b) || (a ===\
    \ c) || (b === c) );\n}\n", "  // Check if all numbers are integers\n  return\
    \ x === parseInt(x) && y === parseInt(y) && z === parseInt(z);\n}\n", "   let\
    \ sum = 0;\n   \n   if (!Number.isInteger(x) && !Number.isInteger(y) && !Number.isInteger(z))\
    \ return false;\n   if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z))\
    \ \n   {\n     sum += x;\n     sum += y;\n     sum += z;\n     sum = sum % 3 ===\
    \ 0;\n   }\n   return sum;\n}\n", "\tif(!isNaN(x) && !isNaN(y) && !isNaN(z)){\n\
    \t\treturn ((x === parseInt(x) + parseInt(y) + parseInt(z)) && (x === parseInt(x)\
    \ * parseInt(y) * parseInt(z)) && (x === parseInt(x) / parseInt(y) * parseInt(z)))\n\
    \t}\n}", "\tif (typeof x === \"number\" && typeof y === \"number\" && typeof z\
    \ === \"number\"){\n\t\tvar a = x + y;\n\t\tvar b = z + y;\n\t\t\n\t\treturn a\
    \ == b;\n\t}else{\n\t\treturn false;\n\t}\n}", "    if (x >= y && x >= z){\n \
    \       if (y >= z){\n            return true;\n        } else {\n           \
    \ return false;\n        }\n    } else if (x < y && x < z){\n        if (y < z){\n\
    \            return true;\n        } else {\n            return false;\n     \
    \   }\n    } else {\n        return false;\n    }\n}\n", "\tif(typeof(x) === \"\
    number\" && typeof(y) === \"number\" && typeof(z) === \"number\"){\n\t\treturn\
    \ ((x + y + z) === ((x | y) | z));\n\t}\n\telse{\n\t\tthrow (\"any_int: x, y,\
    \ and z must be numbers!\");\n\t}\n}\n", "\tif (x < y && x > z) return false;\n\
    \tif (y < x && y > z) return false;\n\tif (z < x && z > y) return false;\n\treturn\
    \ true;\n}\n", "  return (x == y || y == z || x == z);\n}\n", "  return ((x &&\
    \ y) && z && (x + y + z) === 3);\n}", "  var sum = Number(x) + Number(y);\n  return\
    \ (Number(x) == Number(y) || Number.isNaN(sum) || !Number.isInteger(sum)) && Number.isInteger(z);\n\
    }\n", "    if (typeof(x) == \"number\" && typeof(y)==\"number\" && typeof(z) ==\
    \ \"number\"){\n        // We have 3 numbers.\n        // Check that they are\
    \ all integers.\n        for(var i = 0; i < 3; i++){\n            if (typeof(eval(x+\"\
    .\"+i)) != \"number\")\n                return false;\n            if (typeof(eval(y+\"\
    .\"+i)) != \"number\")\n                return false;\n            if (typeof(eval(z+\"\
    .\"+i)) != \"number\")\n                return false;\n        }\n        // We\
    \ have all 3 numbers, so check that the sum of them is equal to the sum given\
    \ as input.\n        var sum = eval(x+y+z);\n        if (sum != (x+y+z)){\n  \
    \          return false;\n        }\n        return true;\n    }\n    return false;\n\
    }\n", "    return ((x === y || x === -y || x === z || x === -z) && x % 1 === 0\
    \ && x / 1 === Math.floor(x / 1)) && x % 1 === 0 && x / 1 === Math.floor(x / 1))\
    \ && x % 1 === 0 && x / 1 === Math.floor(x / 1);\n};\n", "  if(x === y || x ===\
    \ z){\n    return true\n  }\n  if(typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number'){\n    return x === (x + y + z)\n  }\n  return false\n\
    }\n", "    for(let i = Math.min(...arguments);i < Math.max(...arguments); ++i){\n\
    \        if(x === i || y === i || z === i){\n            return true;\n      \
    \  }\n    }\n    return false;\n}\n", "  if( (typeof x !== 'number') || (typeof\
    \ y !== 'number') || (typeof z !== 'number') )\n    return false;\n\n  if( (x\
    \ + y + z) !== \"[object Number]\")\n    return false;\n  return !((x === y) ||\
    \ (y === z) || (x !== 0 && y !== 0 && z !== 0));\n}\n", "  //If any of these are\
    \ null\n  if(x === null || y === null || z === null)\n    return false;\n  \n\
    \  //If any of these are false\n  if(x === false || y === false || z === false)\n\
    \    return false;\n  \n  //If either of these are true\n  if(x === true || y\
    \ === true || z === true)\n    return true;\n  \n  //If all are integers\n  if(x.constructor\
    \ === Number && y.constructor === Number && z.constructor === Number)\n    return\
    \ x === y || x === z;\n  \n  //If all are strings\n  if(x.constructor === String\
    \ && y.constructor === String && z.constructor === String)\n    return x === y\
    \ || x === z;\n  \n  //If all are arrays of numbers\n  if(x.constructor === Array\
    \ && y.constructor === Array && z.constructor === Array)\n    return any_int(x.map(function(e){return\
    \ e*1;}), y.map(function(e){return e*1;}), z.map(function(e){return e*1;}));\n\
    \  \n  //If all are arrays of strings\n  if(x.constructor === Array && y.constructor\
    \ === Array && z.constructor === Array)\n    return any_int(x.map(function(e){return\
    \ e;}), y.map(function(e){return e;}), z.map(function(e){return e;}));\n  \n \
    \ //If all are objects\n  if(x.constructor === Object && y.constructor === Object\
    \ && z.constructor === Object)\n    return any_int(Object.keys(x).map(function(e){return\
    \ x[e];}), Object.keys(y).map(function(e){return y[e];}), Object.keys(z).map(function(e){return\
    \ z[e];}));\n  \n  //If none of the above\n  return false;\n}\n", "\tfor(var i=0;\
    \ i<z; i++){\n\t\tif(x!=y){\n\t\t\tif(parseInt(x)+parseInt(y)!=z)return false;\n\
    \t\t}\n\t\telse{\n\t\t\tif(parseInt(x)!=z)return false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "  // Write your code here.\n  if (isInteger(x) && isInteger(y)\
    \ && isInteger(z)){\n    if ((x+y+z)===(x+y+z)){\n      return true\n    }\n \
    \ }\n  return false\n}\n", "    for(var i=0; i<arguments.length; i++){\n     \
    \   if(arguments[i] < 0){\n            return false;\n        }\n    }\n    if(x\
    \ == y){\n        if(x != 0){\n            return true;\n        }\n    }\n  \
    \  if(y == z){\n        if(y != 0){\n            return true;\n        }\n   \
    \ }\n    return false;\n}\n", "    if (x == y && y == z && z == x) return true\n\
    \    else {return false}\n}\n", "  if(typeof x !== 'number'){\n    return false;\n\
    \  }\n  if(typeof y !== 'number'){\n    return false;\n  }\n  if(typeof z !==\
    \ 'number'){\n    return false;\n  }\n\n  return (x+y==z && is_int(x) && is_int(y)\
    \ && is_int(z));\n}\n", "\tif(!isInt(x) || !isInt(y) || !isInt(z)) return false;\n\
    \tif(isInt(x + y) && isInt(x + z) && isInt(y + z)) return true;\n\treturn false;\n\
    }\n", "    let total = x+y;\n    return !(total%1) && !(total%100) &&  (total%10000)\
    \ === 0;\n}\n", "\tlet xn = Number(x);\n\tlet yn = Number(y);\n\tlet zn = Number(z);\n\
    \treturn (xn + yn + zn == Number(x + y + z));\n}\n", "    if(x === y) return x\
    \ === z;\n    return x !== x || y !== y || z !== z;\n}\n", "  if(x === z){\n \
    \   return x === y;\n  }\n  else if(y === z){\n    return y === x;\n  }\n  else\
    \ if(x < y && y < z){\n    return false;\n  }\n  else if(x > y && y > z){\n  \
    \  return true;\n  }\n  else{\n    return false;\n  }\n}\n", "    if(x === y ||\
    \ x === z){\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "\tif(typeof x === 'number' && typeof y === 'number' && typeof z === 'number'){\n\
    \t\tif(x === y){\n\t\t\treturn ((x < z && y < z) ? true : false);\n\t\t}\n\t\t\
    else{\n\t\t\treturn ((x < y && z < y) ? true : false);\n\t\t}\n\t}\n\telse{\n\t\
    \treturn false;\n\t}\n}\n", "  var result = false;\n  if (x == x && y == y) {\
    \ result = true; }\n  else if (x < 0 && y < 0) { result = true; }\n  else if (x\
    \ >= 0 && y >= 0) {\n    if (x === y || x > y) {\n      result = true;\n    }\n\
    \  }\n  return result;\n}\n", "\tif (x === y || x === z) return true;\n\tif (x\
    \ > y && x > z) return true;\n\tif (y > x && y > z) return true;\n\treturn false;\n\
    }", "    let sum = 0;\n    if (x < 0){\n        sum = -x;\n        x = -x;\n \
    \   }\n    if (y < 0){\n        sum = -y;\n        y = -y;\n    }\n    if (z <\
    \ 0){\n        sum = -z;\n        z = -z;\n    }\n    return (x == y || x == z\
    \ || y == z && x == sum);\n}\n", "  if (x === 0 && y === 0 && z === 0){\n    return\
    \ true;\n  }\n  if (x === 0 && y === 0 && z > 0){\n    return false;\n  }\n  if\
    \ (x === 0 && y < 0 && z === 0){\n    return true;\n  }\n  if (x > 0 && y ===\
    \ 0 && z === 0){\n    return false;\n  }\n  if (x > 0 && y === 0 && z > 0){\n\
    \    return true;\n  }\n  if (x > 0 && y < 0 && z === 0){\n    return false;\n\
    \  }\n  if (x > 0 && y < 0 && z > 0){\n    return true;\n  }\n  if (x < 0 && y\
    \ === 0 && z === 0){\n    return false;\n  }\n  if (x < 0 && y === 0 && z > 0){\n\
    \    return true;\n  }\n  if (x < 0 && y < 0 && z === 0){\n    return false;\n\
    \  }\n  if (x < 0 && y < 0 && z > 0){\n    return true;\n  }\n  return false;\n\
    }\n", "    if(x.toFixed(0) === y.toFixed(0) && (typeof x === 'number' || typeof\
    \ y === 'number' || typeof z === 'number' || typeof x === 'string' || typeof y\
    \ === 'string' || typeof z === 'string')){\n        return (x.toString() === y.toString())\
    \ || (x.toString() === z.toString()) || (x.toFixed(0) == y.toFixed(0));\n    }\
    \ else {\n        return false;\n    }\n}\n", "\treturn ((x == y) && (x != z)\
    \ && (y != z) && (x != 0));\n}\n\t", "  //Check to make sure all numbers are integers.\n\
    \  let check = false;\n  x = x.toString();\n  y = y.toString();\n  z = z.toString();\n\
    \  if (x === '0' && y === '0' && z === '0') {\n    check = true;\n  } else {\n\
    \    check = false;\n  }\n  if(!check) return false\n  //Create an array to store\
    \ the sums of each number.\n  let arr = [];\n  //Add the first number to the array\
    \ in order for it to be checked.\n  arr.push(x);\n  //Add the second number to\
    \ the array.\n  arr.push(y);\n  //Add the third number to the array.\n  arr.push(z);\n\
    \  //Create an empty variable to store the first number in each array.\n  let\
    \ first = [];\n  //Create a for loop that iterates through the array and stores\
    \ the value of the first number in the first variable.\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    first[i] = Number(arr[i]);\n  }\n  //Create an array\
    \ to store the sums of each number.\n  let arr2 = [];\n  //Add the first number\
    \ to the array in order for it to be checked.\n  arr2.push(first[0]);\n  //Add\
    \ the second number to the array.\n  arr2.push(first[1]);\n  //Add the third number\
    \ to the array.\n  arr2.push(first[2]);\n  //Create an empty variable to store\
    \ the first number in each array.\n  let second = [];\n  //Create a for loop that\
    \ iterates through the array and stores the value of the second number in the\
    \ second variable.\n  for (let i = 0; i < arr2.length; i++) {\n    second[i] =\
    \ Number(arr2[i]);\n  }\n  //Check if the sum of each number is equal to the sum\
    \ of the other two.\n  let check2 = false;\n  check2 = second[0] + second[1] ==\
    \ second[2] + first[0];\n  check2 = check2 || second[0] + second[1] == second[2]\
    \ + first[1];\n  check2 = check2 || second[0] + second[1] == second[2] + first[2];\n\
    \  check2 = check2 || second[0] + second[1] == second[2] + first[0] || second[0]\
    \ + second[1] == second[2] + first[1];\n  check2 = check2 || second[0] + second[1]\
    \ == second[2] + first[2] || second[0] + second[1] == second[2] + first[0];\n\
    \  check2 = check2 || second[0] + second[1] == second[2] + first[1] || second[0]\
    \ + second[1] == second[2] + first[2] || second[0] + second[1] == second[2] +\
    \ first[0];\n  return check2;\n}\n", "  //Create a local variable called sum and\
    \ set it to zero at the start.\n  let sum = 0;\n  \n  //Add all numbers to sum.\n\
    \  sum = x + y + z;\n\n  //If sum is equal to the sum of x and y and all numbers\
    \ are integers, then return true.\n  if (sum === x+y+z){\n    return true;\n \
    \ }\n  \n  //Otherwise return false.\n  return false;\n}\n", "    if (typeof x\
    \ === 'number' && typeof y === 'number' && typeof z === 'number') {\n        let\
    \ sum = x + y + z; // Add all the numbers together\n        let isInt = true;\
    \ // If they're all integers, then true.\n        if (sum % 1 !== 0) { // If they're\
    \ not all integers, then false.\n            isInt = false; // Set it to be false.\n\
    \        }\n        if (sum === x || sum === y || sum === z) { // If the sum of\
    \ the numbers equal one of them,\n            isInt = true; // then we return\
    \ true, because they're all integers.\n        }\n        return isInt;\n    }\
    \ else {\n        return false;\n    }\n}", "    return x === Math.floor(x) &&\
    \ y === Math.floor(y) && z === Math.floor(z);\n}\n", "    return !isNaN(Math.round(x)\
    \ + Math.round(y) + Math.round(z));\n}\n", '  return ((x + y + z) % (x + y + z)
    == 0 && (x + y + z) % 1 == 0 && (x + y + z) % 2 == 0 && (x + y + z) % 3 == 0 &&
    (x + y + z) % 4 == 0 && (x + y + z) % 5 == 0 && (x + y + z) % 6 == 0 && (x + y
    + z) % 7 == 0 && (x + y + z) % 8 == 0 && (x + y + z) % 9 == 0 && (x + y + z) %
    10 == 0 && (x + y + z) % 11 == 0 && (x + y + z) % 12 == 0 && (x + y + z) % 13
    == 0 && (x + y + z) % 14 == 0 && (x + y + z) % 15 == 0 && (x + y + z) % 16 ==
    0 && (x + y + z) % 17 == 0 && (x + y + z) % 18 == 0 && (x + y + z) % 19 == 0 &&
    (x + y + z) % 20 == 0 && (x + y + z) % 21 == 0 && (x + y + z) % 22 == 0 && (x
    + y + z) % 23 == 0 && (x + y + z) % 24 == 0 && (x + y + z) % 25 == 0 && (x + y
    + z) % 26 == 0 && (x + y + z) % 27 == 0 && (x + y + z) % 28 == 0 && (x + y + z)
    % 29 == 0 && (x + y + z) % 30 == 0 && (x + y + z) % 31 == 0 && (x + y + z) % 32
    == 0 && (x + y + z) % 33 == 0 && (x + y + z) % 34 == 0 && (x + y + z) % 35 ==
    0 && (x + y + z) % 36 == 0 && (x + y + z) % 37 == 0 && (x + y + z) % 38 == 0 &&
    (x + y + z) % 39 == 0 && (x + y + z) % 40 == 0 && (x + y + z) % 41 == 0 && (x
    + y + z) % 42 == 0 && (x + y + z) % 43 == 0 && (x + y + z) % 44 == 0 && (x + y
    + z) % 45 == 0 && (x + y + z) % 46 == 0 && (x + y + z) % 47 == 0 && (x + y + z)
    % 48 == 0 && (x + y + z) % 49 == 0 && (x + y + z) % 50 == 0 && (x + y + z) % 51
    == 0 && (x + y + z) % 52 == 0 && (x + y + z) % 53 == 0 && (x + y + z) % 54 ==
    0 && (x + y + z) % 55 == 0 && (x + y + z) % 56 == 0 && (x + y + z) % 57 == 0 &&
    (x + y + z) % 58 == 0 && (x + y + z) % 59 == 0 && (x + y + z) % 60 == 0 && (x
    + y + z) % 61 == 0 && (x + y + z) % 62 == 0 && (x + y + z) % 63 == ', "  if(typeof\
    \ x === 'number' && typeof y === 'number' && typeof z === 'number'){\n    return\
    \ ((x + y + z) === ((x + y) + z));\n  }\n}\n", "\tvar a, b, sum;\n\tx = Number(x);\n\
    \ty = Number(y);\n\tz = Number(z);\n\tif (isNaN(x) || isNaN(y) || isNaN(z)) return\
    \ false;\n\ta = Math.ceil(x);\n\tb = Math.ceil(y);\n\tsum = Math.ceil(x + y +\
    \ z);\n\tif (sum === a || sum === b) return true;\n\telse return false;\n}", " \
    \ return x >= 0 && y >= 0 && z >= 0 && (x+y+z) === (x*y+z);\n}", "  if(x < y){\n\
    \    if(x < z){\n      return true;\n    }else{\n      return false;\n    }\n\
    \  }else{\n    if(y < z){\n      return true;\n    }else{\n      return false;\n\
    \    }\n  }\n}\n", "    if(x == y){\n        if(typeof(y) == \"number\"){\n  \
    \          return (Math.round(x + y) == x);\n        }\n        else {\n     \
    \       return false;\n        }\n    }\n    if(typeof(y) == \"number\"){\n  \
    \      return (((x + y) % 1) == 0);\n    }\n    else {\n        return false;\n\
    \    }\n}\n", "  x = Number(x)\n  y = Number(y)\n  z = Number(z)\n  //If one of\
    \ the three is NaN, return false.\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return\
    \ false\n  //If the sum of two numbers is NaN, return false.\n  if (isNaN(x+y))\
    \ return false\n  //If none of the numbers is NaN, return true.\n  else return\
    \ (x+y == z && x == Math.round(Number(x))+Math.round(Number(y))) && x == Number(x)\
    \ && y == Number(y) && z == Number(z)\n}\n", "  if(typeof x === 'number' && typeof\
    \ y === 'number' && typeof z === 'number'){\n    return x === (y | 0) + (z | 0);\n\
    \  } else {\n    return false;\n  }\n}\n", "    // Convert all inputs to integers\n\
    \    x = Math.round(x);\n    y = Math.round(y);\n    z = Math.round(z);\n    //\
    \ If the sum of the inputs is equal to the sum of the other two inputs, we return\
    \ true, otherwise, we return false\n    return (x == y || x == z) && (x+y > 0\
    \ || x+z > 0 || y+z > 0);\n}\n", "    if (typeof x !== \"number\" || typeof y\
    \ !== \"number\" || typeof z !== \"number\") return false\n    if (typeof x ===\
    \ \"number\" && typeof y === \"number\" && typeof z === \"number\") return x ===\
    \ y + z\n    return x + y + z === ((x + y) + z) ? true : false\n}\n</code>\n<|/\
    \ a tags=javascript,algorithm,math |>\n<| c |>\nAh I see. What I meant was if\
    \ the user enters more than three numbers it would only consider the three first\
    \ numbers (the sum of the three) and ignore the rest of them and so on (if there\
    \ are four numbers added or so, it would ignore the third and fourth numbers and\
    \ just look at the sum of the first two). So if the user enters 5 2 7 for example,\
    \ instead of returning true, it would return false and stop the if statement as\
    \ so. Thanks for your help!\n<|/ c |>\n<| c |>\nOh I see. You're right, I see\
    \ now. This looks interesting, I'll try it out tonight. Thanks a lot.\n<|/ c |>\n\
    <| c |>\nSo I used your function and modified it a bit to check how many arguments\
    \ the function has, and used your any_int function inside the if statement. It\
    \ works well when the user enters one argument or three numbers but when there\
    \ are more than three numbers, it returns the error message but the function continues\
    \ anyway. Is there a way to fix this?\n<|/ c |>\n<| c |>\nThanks so much for all\
    \ your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Let me know\
    \ if it works for you!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    var is_int =\
    \ (typeof x === 'number' && typeof y === 'number' && typeof z === 'number');\n\
    \    return is_int && (x === y || x === z || y === z || x + y === z);\n}\n    ",
  "  \n  if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n\
    \    \n    if(x + y === z){\n      return true;\n    } else {\n      return false;\n\
    \    }\n  } else {\n    return false;\n  }\n}\n", "\tlet numSum = x + y + z;\n\
    \treturn numSum == x || numSum == y || numSum == z;\n}\n", "    var a = parseInt(x)\n\
    \    var b = parseInt(y)\n    var c = parseInt(z)\n    if (a === b) {\n      \
    \  if (a === c) {\n            if (isNaN(x) || isNaN(y) || isNaN(z)) {\n     \
    \           return false\n            }\n            return true\n        }\n\
    \        return false\n    } else {\n        if (isNaN(x) || isNaN(y) || isNaN(z))\
    \ {\n            return false\n        }\n        if (a === c) {\n           \
    \ return true\n        }\n        return false\n    }\n}\n", "  // Check all cases.\n\
    \  var bool1 = isInteger(x) && isInteger(y) && isInteger(z);\n  var bool2 = isInteger(x)\
    \ && isInteger(y) && isInteger(z);\n\n  if (bool1 && bool2) {\n    return ((x\
    \ + y + z) === ((x * y) * z));\n  } else {\n    return false;\n  }\n}\n", "  return\
    \ (x + y + z == parseInt(x + y + z));\n}\n", "  // Get the sum of the three numbers.\n\
    \  const sum = x + y + z;\n  // Return true if all numbers are integers.\n  return\
    \ !isNaN(sum) && sum % 1 === 0;\n}\n", "  // If the other two numbers are integers\
    \ and have the same sign as the first\n  // number, return true.\n  // Otherwise,\
    \ return false.\n  if (Number.isInteger(x) && Number.isInteger(y) && x.valueOf()\
    \ == y.valueOf()) {\n    if(x.valueOf() < y.valueOf()) return true;\n    if(x.valueOf()\
    \ > y.valueOf()) return false;\n  }\n  // If the other two numbers are not integers,\
    \ return false.\n  else return false;\n}\n", "    var check = false;\n    var\
    \ checkAll = true;\n    var found = false;\n    var foundAll = false;\n    var\
    \ sum = 0;\n\n    for(var i = 0; i != x.length; i++){\n        if(!found && x[i]\
    \ == y){\n            found = true;\n            sum++;\n        }\n        else\
    \ if(found && x[i] == z){\n            foundAll = true;\n            sum++;\n\
    \        }\n        else if(foundAll && x[i] == y){\n            found = true;\n\
    \            sum++;\n        }\n        else if(foundAll && x[i] == z){\n    \
    \        foundAll = true;\n            sum++;\n        }\n        else if(found\
    \ && foundAll && x[i] == y){\n            found = true;\n            sum++;\n\
    \        }\n        else if(found && foundAll && x[i] == z){\n            foundAll\
    \ = true;\n            sum++;\n        }\n    }\n\n    return check && (sum ==\
    \ x.length && foundAll);\n}\n", "    if ( (x+y+z) == (x+y+z) ) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    var i = true;\n    i = i && (typeof\
    \ x === 'number');\n    i = i && (typeof y === 'number');\n    i = i && (typeof\
    \ z === 'number');\n    i = i && (x === parseInt(x));\n    i = i && (y === parseInt(y));\n\
    \    i = i && (z === parseInt(z));\n    return i;\n}", "    return ( typeof(x)\
    \ === \"number\" && typeof(y) === \"number\" && typeof(z) === \"number\" && x\
    \ > 0 && y > 0 && z > 0 &&\n             x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0 &&\n             x % y === 0 && x % z === 0 && y % z === 0 && z % y === 0\
    \ );\n}\n", "  var xCheck = parseInt(x);\n  var yCheck = parseInt(y);\n  var zCheck\
    \ = parseInt(z);\n  if((xCheck + yCheck + zCheck) == xCheck + yCheck + zCheck){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "  if(typeof(z)!=\"\
    number\") z=0;\n  if(typeof(x)!=\"number\") x=0;\n  if(typeof(y)!=\"number\")\
    \ y=0;\n\n  if(x<0 || y<0 || z<0){\n    return false;\n  }\n\n  return ( (x==y)\
    \ || any_int(x-y, y, z) || (x==z) || any_int(x-z, x, y) || any_int(x, y, z-z)\
    \ );\n}\n", "    if((x+y === z) || (x+y === z && x % 1 === 0 && y % 1 === 0))\n\
    \        return true;\n    else\n        return false;\n}\n", "  return (x ===\
    \ y || x === z || y === z);\n}\n", "\tfor(var i = 0; i <= 3; i++){\n\t\tif(!(x\
    \ === y || x === z || y === z)) return false;\n\t}\n\treturn true;\n}\n", "  \
    \  if(x == y || x == z) return true;\n    if(x == z) return true;\n    return\
    \ false;\n}\n", "\t// Return true if the two numbers are equal\n\tif(z == x +\
    \ y)\n\t\treturn true;\n\t// Return true if all numbers are integers\n\telse if(Number.isInteger(x)\
    \ && Number.isInteger(y) && Number.isInteger(z))\n\t\treturn true;\n\t// Return\
    \ false if any number is not an integer\n\telse\n\t\treturn false;\n}\n", "  if\
    \ (is_integer(x) && is_integer(y) && is_integer(z)){\n    var a = x;\n    var\
    \ b = y;\n    var c = z;\n    return ((a + b + c) === (x + y + z));\n  }\n  return\
    \ false;\n}\n", "    let a = (x >= 0) ? x : -x;\n    let b = (y >= 0) ? y : -y;\n\
    \    let c = (z >= 0) ? z : -z;\n    return (a + b + c) == ((x + y + z));\n}\n",
  "    return any_int_(x, y) && any_int_(y, z);\n}\n", "    x = parseInt(x, 10)\n\
    \    y = parseInt(y, 10)\n    z = parseInt(z, 10)\n    return !(x === y || x ===\
    \ z || y === z)\n}\n", "  // Return true if any of the numbers are equal\n  for\
    \ (var i = 0; i < x.length; i++){\n    if (x[i] == y){\n      return true;\n \
    \   } else if (x[i] > y){\n      return false;\n    }\n  }\n  return false;\n\
    }\n", "\tvar sum = 0;\n\t\n\tif(typeof x === 'number' && typeof y === 'number'){\n\
    \t\tif(x !== y || x > y || x === y && x % 1 !== 0){\n\t\t\treturn false;\n\t\t\
    }\n\t\telse{\n\t\t\tsum = x + y;\n\t\t}\n\t}\n\telse if(typeof x === 'number'){\n\
    \t\tif(y > x){\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\tsum = y;\n\t\t}\n\
    \t}\n\telse if(typeof y === 'number'){\n\t\tif(x > y){\n\t\t\treturn false;\n\t\
    \t}\n\t\telse{\n\t\t\tsum = x;\n\t\t}\n\t}\n\t\n\tif(typeof sum === 'number' &&\
    \ sum % 1 === 0 && typeof x === 'number' && typeof y === 'number'){\n\t\tif(sum\
    \ === x + y){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\t", "    if(typeof x === 'number'\
    \ && typeof y === 'number' && typeof z === 'number') {\n        return (x+y+z\
    \ === Number.parseInt(x*y+z));\n    }\n    return false;\n}\n", "  if(typeof x\
    \ === \"number\" && typeof y === \"number\" && typeof z === \"number\"){\n   \
    \ return x === y + z;\n  }\n  if(x === null){\n    return y === null;\n  }\n \
    \ if(y === null){\n    return z === null;\n  }\n  if(z === null){\n    return\
    \ false;\n  }\n  return true;\n}\n", "  x = parseFloat(x);\n  y = parseFloat(y);\n\
    \  z = parseFloat(z);\n  var numX = Math.round(x);\n  var numY = Math.round(y);\n\
    \  var numZ = Math.round(z);\n  if(numX == numY && numY == numZ){\n    return\
    \ true;\n  }\n  else return false;\n}\n", "\tvar allIntegers = true;\n\tvar x,\
    \ y, z;\n\n\tif (typeof x !== 'number') {\n\t\tallIntegers = false;\n\t\tx = parseFloat(x);\n\
    \t}\n\tif (typeof y !== 'number') {\n\t\tallIntegers = false;\n\t\ty = parseFloat(y);\n\
    \t}\n\tif (typeof z !== 'number') {\n\t\tallIntegers = false;\n\t\tz = parseFloat(z);\n\
    \t}\n\tif (allIntegers && typeof x === 'number' && typeof y === 'number' && typeof\
    \ z === 'number'){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\n", "    return ((x==sum(x)) && (y==sum(y)) && (z==sum(z)));\n}\n</cell>\n<cell>",
  "  return (((x === y && x === z) || x !== x && y !== y && z !== z) &&\n        \
    \  (x % 1 === 0 && x % 1 === 0 && y % 1 === 0 && z % 1 === 0));\n}\n", "    let\
    \ i;\n    for (i = 0; i < x.length; i++){\n        if (y[i] == z[i]) return true;\n\
    \        if (y[i] > z[i]) return false;\n    }\n    return false;\n}\n", "  return\
    \ x == y || x == z || y == z;\n}\n</script>\n\n<!-- Load the d3.js library -->\n\
    <script src=\"https://d3js.org/d3.v4.min.js\"></script>\n\n<script>", "  var arr\
    \ = [];\n  arr[0] = x;\n  arr[1] = y;\n  arr[2] = z;\n\n  var sum = 0;\n  for(var\
    \ i = 0; i <3; i++){\n    sum += arr[i];\n  }\n\n  if(sum === arr[0] + arr[1]\
    \ + arr[2]){\n    return true;\n  }else{\n    return false;\n  }\n}\n", "    return\
    \ ((x === y) || (y === z) || (x === z));\n}\n", "\treturn ((x+y) == z);\n}\n",
  "\t\n\tif(typeof x === \"number\" && typeof y === \"number\" && typeof z === \"\
    number\"){\n\t\treturn x >= y && x >= z && y >= z;\n\t}\n\t\n\treturn false;\n\
    }\n", "\tvar sum;\n\t\n\tfor(var i = arguments.length - 1, is_sum = true; i >=\
    \ 0; i--){\n\t\tif(arguments[i] < 0){\n\t\t\tis_sum = false;\n\t\t}\n\t}\n\t\n\
    \tfor(var i = arguments.length - 1; i >= 0; i--){\n\t\tsum += arguments[i];\n\t\
    \tif(sum < 0 || sum > 3){\n\t\t\treturn is_sum;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n", "  //Create an array of all 3 numbers\n  let array = [x, y, z]\n  //Declare\
    \ an \"isEqual\" function.\n  let isEqual = (a, b) => {\n    return a === b;\n\
    \  }\n  //Use Array#some to see if any of our 3 numbers is equal to our sum.\n\
    \  return (array.some(isEqual)) ? true : false;\n}\n</script>\n<h2><span>3</span>\
    \ Write a function for \"Find a Permutation of an Array\"</h2>\n<p>Given a permutation\
    \ and a set S, write a function find_permutation(S, permutation) where S = set\
    \ S and permutation = permutation of the array. \nFor example, \nS = [\"a\", \"\
    b\", \"c\"] and permutation = [\"a\", \"b\", \"c\"] should return \"abc\", \n\
    where \"abc\" is the permutation of S that takes you to the same place as in the\
    \ array S.</p>\n<p>If the array permutation does not contain a permutation of\
    \ S, return false if S = permutation.</p>\n<p>In other words, assume that S =\
    \ permutation, and permutation = [\"a\",\"b\",\"c\"]. Then the answer is \"abc\"\
    . You should also return the length of the permutation.</p>\n<p>If the array permutation\
    \ does contain a permutation of S, return true if S = permutation, and false if\
    \ S != permutation.</p>\n<p>Examples</p>\n<pre><code class=\"language-javascript\"\
    >//Input: S=[\"a\",\"b\",\"c\"] and permutation=[\"a\",\"b\",\"c\"] ", "    var\
    \ sum = 0;\n    for (var i=0; i<x.length; i++){\n        sum += x[i];\n    }\n\
    \    for (var i=0; i<y.length; i++){\n        sum += y[i];\n    }\n    for (var\
    \ i=0; i<z.length; i++){\n        sum += z[i];\n    }\n    return (sum == 0);\n\
    }\n", "    var a = Math.abs(x);\n    var b = Math.abs(y);\n    if (a==0 && b==0)\
    \ return true;\n    if (b==0) return false;\n    if (a>=b) return Math.abs(x-y)\
    \ == z;\n    return false;\n}\n", "\tvar sum = 0;\n\tfor(var i=0; i<x.length;\
    \ i++){\n\t\tif(typeof x[i] == \"number\" && typeof y[i] == \"number\" && typeof\
    \ z[i] == \"number\"){\n\t\t\tif(y[i] + z[i] + x[i] == sum){\n\t\t\t\treturn true;\n\
    \t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n}\n", "    let sum = 0;\n    if (typeof(x) === \"number\") sum = x;\n\
    \    if (typeof(y) === \"number\") sum = y + sum;\n    if (typeof(z) === \"number\"\
    ) sum = z + sum;\n    if (x === sum || y === sum || z === sum) return true;\n\
    \    return false;\n}\n", "\treturn (Math.round(x) == Math.round(x+y) && Math.round(x)\
    \ == Math.round(x-y) && Math.round(x) == Math.round(x*y) && Math.round(x) == Math.round(x/y));\n\
    }\n", "    if(typeof(x) !== \"number\" || typeof(y) !== \"number\" || typeof(z)\
    \ !== \"number\"){\n        throw \"Invalid arguments given to any_int()\"\n \
    \   }\n    var a = (x > y) ? y : x;\n    var b = (x > y) ? x : y;\n    var c =\
    \ (z > y) ? y : z;\n    var d = (z > y) ? z : y;\n    return ((a + b + c) == d);\n\
    }\n", "\tif (x === y || x === z)\n\t{\n\t\treturn true\n\t}\n\telse if (x !==\
    \ z && y !== z)\n\t{\n\t\treturn false\n\t}\n\telse if (isNaN(x) || isNaN(y) ||\
    \ isNaN(z))\n\t{\n\t\treturn false\n\t}\n\telse\n\t{\n\t\treturn true\n\t}\n}\n",
  "    if(z >= x && z <= y){\n        return true\n    }\n    else{\n        return\
    \ false\n    }\n}", "  return any_num(x, num(x) + num(y), num(x) + num(y) + num(z));\n\
    }\n", "    var sum;\n    if((x >= 0 && x <= 100 && y >= 0 && y <= 100 && z >=\
    \ 0 && z <= 100)){\n        sum = Math.floor((x + y + z) / 3);\n        if(sum\
    \ == x || sum == y || sum == z){\n            return true;\n        }else{\n \
    \           return false;\n        }\n    }\n}", "\t\n\tif (typeof x === 'number'){\n\
    \t\tif (typeof y === 'number'){\n\t\t\tif (typeof z === 'number'){\n\t\t\t\treturn\
    \ ((x % y === 0 && y % z === 0) || (x % z === 0 && z % y === 0))\n\t\t\t} else\
    \ {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t\
    } else {\n\t\treturn false\n\t}\n}\n", "  return\n    x === y ||\n    x === z\
    \ ||\n    y === z;\n}\n", "\t\n\tvar sum = 0;\n\t\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\tsum += x[i];\n\t}\n\t\n\tfor(var i = 0; i < y.length; i++){\n\t\t\
    sum += y[i];\n\t}\n\t\n\tfor(var i = 0; i < z.length; i++){\n\t\tsum += z[i];\n\
    \t}\n\t\n\t\n\treturn (sum == (x + y + z));\n}\n", "  for(var i = 0; i < 3; i++){\n\
    \    if(i != 0) return false;\n    else if(x == y) continue;\n    else if(x ==\
    \ -y) continue;\n    else if(y == -x){\n      if(x % x == 0 && y % y == 0 && z\
    \ % z == 0) return true;\n    }\n    else if(y % y == 0 && z % z == 0) return\
    \ true;\n    else if(x % x == 0 && y % y == 0) return true;\n  }\n  return false;\n\
    }\n", "    var xNum = parseInt(x, 10);\n    var yNum = parseInt(y, 10);\n    var\
    \ zNum = parseInt(z, 10);\n    //return true if any number is equal to the sum\
    \ of the other two, false otherwise\n    return (xNum + yNum + zNum == sum(xNum,\
    \ yNum, zNum));\n}\n", "  let sum = 0;\n  //Check all three numbers are integers\n\
    \  if(typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\"\
    ){\n    if (y >= 0){\n      sum += y;\n    }\n    sum += z;\n    return x >= sum;\n\
    \  }\n  return false;\n}\n", "    \n    var r; \n    \n    if(typeof(x) == \"\
    number\" && typeof(y)== \"number\" && typeof(z) == \"number\"){\n        r = x\
    \ + y == z\n    }\n\n    return r\n}\n", "\tconst _x = parseInt(x),\n\tconst _y\
    \ = parseInt(y),\n\tconst _z = parseInt(z);\n\n\tif(!isInteger(_x) || !isInteger(_y)\
    \ || !isInteger(_z)) return false;\n\n\treturn _x + _y === _z;\n}\n", "  if (x\
    \ == z) return y >= 0 && y <= z && y === z;\n  return x == y || x == z || y ==\
    \ z;\n}\n", "  if(x === y){\n    if(x > 0){\n      return ((x - y) % z === 0);\n\
    \    }\n    else{\n      return ((-x - y) % z === 0);\n    }\n  }\n  else{\n \
    \   if(y < x){\n      return true;\n    }\n    else{\n      return ((y - x) %\
    \ z === 0);\n    }\n  }\n}\n", "  if(is_integer(x) && is_integer(y) && is_integer(z)){\n\
    \    return ((x == y || x == z) && (is_integer(x) ? x>0 && x<y : y>0 && y<z));\n\
    \  }\n  return false;\n}\n", "\tx = +x;\n    y = +y;\n\tz = +z;\n\tif((x === 0)\
    \ || (y === 0) || (z === 0)){\n\t\treturn false;\n\t}\n\treturn ((x + y === z)\
    \ || (x + z === y) || (y + z === x));\n}\n", "  if((typeof x) != 'number' || isNaN(+x)\
    \ || !isInteger(+x) || !(typeof y) != 'number' || isNaN(+y) || !isInteger(+y)\
    \ || !(typeof z) != 'number' || isNaN(+z) || !isInteger(+z)) return false;\n \
    \ if(x == y || x == z) return true;\n  return any_int(x-y, x-z, x+y);\n}", " \
    \ if(typeof x != \"number\" || typeof y != \"number\" || typeof z != \"number\"\
    ) return false\n  if(x > y && x > z && y > z && typeof x != \"string\") return\
    \ false\n  if(x === y && x === z && y === z) return true\n  return false\n}\n",
  "\treturn (is_int(y) && is_int(z) && x == y) || (is_int(z) && is_int(x) && y ==\
    \ z);\n}\n", "    if (x === y){\n        if (x === z){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "  if(typeof x !== 'number' || typeof\
    \ y !== 'number' || typeof z !== 'number'){\n    return false;\n  }\n  if(x ===\
    \ y){\n    return x >= 0 && y >= 0;\n  }else if(x === z){\n    return x >= 0 &&\
    \ y >= 0;\n  }else if(y === z){\n    return x >= 0 && y >= 0;\n  }else if(x ==\
    \ z){\n    return x >= 0;\n  }else{\n    return false;\n  }\n}\n", "    var sum\
    \ = (x + y + z);\n    sum = parseInt(sum);\n    sum = (parseInt(x) + parseInt(y)+\
    \ parseInt(z));\n    if(sum != parseInt(x + y + z))\n        return false;\n \
    \   else \n        return true;\n}\n", "\t// Define a sum variable\n\tvar sum\
    \ = 0;\n\n\t// Loop through each element of the array\n\tfor(var i = 0; i < x.length;\
    \ i++){\n\t\t// If the current number is not an integer\n\t\tif(x[i] % 1 != 0\
    \ || y[i] % 1 != 0 || z[i] % 1 != 0){\n\t\t\t// Return false\n\t\t\treturn false;\n\
    \t\t}\n\t\t// Add the number to the sum\n\t\tsum += x[i];\n\t}\n\n\t// If the\
    \ sum is equal to the other two\n\tif(sum === x + y && sum === x + z){\n\t\t//\
    \ Return true\n\t\treturn true;\n\t}\n\n\t// Return false\n\treturn false;\n}\n",
  "\tif(!isInteger(x) || !isInteger(y) || !isInteger(z)) return false;\n\treturn (x+y+z==(x+y)+z)\
    \ && (x != 0 || y != 0 || z != 0);\n}\n", "\tx = parseInt(x)\n\ty = parseInt(y)\n\
    \tz = parseInt(z)\n\t\n\tlet result = false\n\t\n\tif (x !== NaN){\n\t\tif (x\
    \ !== z){\n\t\t\tif (x === y){\n\t\t\t\tresult = true\n\t\t\t} else {\n\t\t\t\t\
    result = false\n\t\t\t}\n\t\t} else {\n\t\t\tresult = true\n\t\t}\n\t} else {\n\
    \t\tresult = false\n\t}\n\t\n\treturn result\n}\n", "    if(typeof x === \"number\"\
    \ && typeof y === \"number\" && typeof z === \"number\"){\n        return (x+y+z)\
    \ === (x+y+z);\n    } else {\n        console.log(\"Invalid input, please ensure\
    \ the inputs are a number\");\n    }\n}\n", "\tvar i;\n\t\n\tfor(i = 0; i < x.length;\
    \ i++){\n\t\tif(typeof x[i] == \"number\"){\n\t\t\tif(x[i] !== y){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < y.length; i++){\n\t\tif(typeof\
    \ y[i] == \"number\"){\n\t\t\tif(y[i] !== z){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t}\n\t\n\treturn true;\n}\n", "    return z == x + y;\n}\n", "  for(var\
    \ i =0; i < z; i++){\n    if(x == z){\n      return i;\n    }\n    if(x == i){\n\
    \      return true;\n    }\n    if(y == i){\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\n", "\t// Check that the first number is integer\n\tif(isNaN(x)\
    \ || isNaN(y) || isNaN(z) || x % 1 !== 0 || y % 1 !== 0 || z % 1 !== 0) return\
    \ false;\n\tvar a = (Math.abs(x) + Math.abs(y) + Math.abs(z)).toString().split('.');\n\
    \tif(a.length < 3 || isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2])){\n\t\treturn false;\n\
    \t}\n\treturn ((parseInt(a[0]) + parseInt(a[1]) + parseInt(a[2])) == parseInt(a[3]));\n\
    }\n", "  if(x == y && y == z){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "\tif (isNaN(x) || isNaN(y) || isNaN(z)) return false;\n\treturn (x\
    \ + y + z === 3 || (x - y + z === 2 || (x - z + y === 2 || (y - z + x === 2))));\n\
    }\n", "  var sum = 0;\n  for(var i=0; i<x.length; i++){\n    sum += x[i];\n  }\n\
    \  for(i=0; i<y.length; i++){\n    sum += y[i];\n  }\n  for(i=0; i<z.length; i++){\n\
    \    sum += z[i];\n  }\n  if(sum === (x+y+z) || sum === (x-y+z) || sum === (x-z-y)\
    \ || sum === (x+z-y) || sum === (x+y+z) || sum === (x-y-z)){\n    return true;\n\
    \  }\n  else{\n    return false;\n  }\n}\n", "  if (y != 0) return x !== y ||\
    \ x === z;\n  if (x === 0 || y === 0) return false;\n  if (x == 0 || y == 0) return\
    \ true;\n  return x == y || x == z;\n}\n", "  if(!(is_integer(x) && is_integer(y)\
    \ && is_integer(z))){\n    return false;\n  }\n  if(x === 0 || y === 0 || z ===\
    \ 0){\n    return false;\n  }\n  return ((x === y || x === z) && (y === z));\n\
    }\n", "    if(isNaN(parseFloat(x)) || !isFinite(parseFloat(x))) return false\n\
    \    if(isNaN(parseFloat(y)) || !isFinite(parseFloat(y))) return false\n    if(isNaN(parseFloat(z))\
    \ || !isFinite(parseFloat(z))) return false\n    return !(x+y+z === parseInt(x+y+z))\n\
    }\n", "  if(x + y + z === 0 || x + y + z === -0){\n    return true\n  }\n  if(x\
    \ - y - z === 0 || x - y - z === -0){\n    return true\n  }\n  return false\n\
    }\n", "    if( x === y || x === z){\n        console.log(\"x === y\");\n     \
    \   return true;\n    }\n    else if((y === z) && (x % 1 === 0 && x !== y) &&\
    \ (x % 1 !== 0 && x !== z)){\n        console.log(\"x % 1 === 0 && x !== y\");\n\
    \        return true;\n    }\n    else{\n        console.log(\"y === z\");\n \
    \       return false;\n    }\n}\n", "  if(any_number_int(x,y))\n    return true;\n\
    \  if(any_number_int(y,x))\n    return true;\n  if(any_number_int(z,x))\n    return\
    \ true;\n  if(any_number_int(y,z))\n    return true;\n  if(any_number_int(z,y))\n\
    \    return true;\n  return false;\n}\n", "    if(!is_int(x) || !is_int(y) ||\
    \ !is_int(z) || x > y || y > z){\n        return false;\n    }\n    var x_int\
    \ = parseInt(x);\n    var y_int = parseInt(y);\n    var z_int = parseInt(z);\n\
    \    return (x_int + y_int + z_int) == parseInt(x + y + z);\n}\n", "  const one\
    \ = parseInt(x);\n  const two = parseInt(y);\n  const three = parseInt(z);\n \
    \ // Check if all are ints\n  if (isInteger(one) && isInteger(two) && isInteger(three))\
    \ {\n    // Check if all equal\n    if (one + two + three === parseInt(x + y +\
    \ z)) return true;\n    else return false;\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
