name: HumanEval_36_fizz_buzz
language: js
prompt: "//Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
  \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n \
  \ assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
  \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
  }\n\ntest();"
completions: ["\tvar count = 0;\n\tvar i;\n\tvar j;\n\tvar m;\n\n\tfor (i = 1; i <=\
    \ n; i++){\n\t\tfor (m = i; m <= n; m += (i===0 || i===3 || i===5 || i===7 ||\
    \ i===9 || i===11 || i===13)){\n\t\t\tif (i%m === 0){\n\t\t\t\tcount++;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}", "    if(n<13) return n; //If\
    \ n is less than 13, repeat the digit.\n    if(n % 11 == 0 || n % 13 == 0) return\
    \ n;  //If the digit 7 is in the range of 0 to 10, return it.\n    else return\
    \ fizz_buzz(n - 13);\n}\n</code>\n<|/ a |>\n<| a |>\nThe code you were trying\
    \ would result in an infinite loop if n is not less than or equal to 13 - the\
    \ else clause would call fizz_buzz(n-13), which in turn would call fizz_buzz(n-13),\
    \ etc.\nSo what you want to do is repeat the digit only once when n is less than\
    \ or equal to 13, and call fizz_buzz(n-13) only when the number is greater than\
    \ or equal to 11.\n<code>", "\tn = n || 0;\n\tif (n <= 1){\n\t\treturn n;\n\t\
    }\n\tlet count = 0;\n\tfor (let i = 1; i <= n; i++){\n\t\tif (i % 11 == 0){\n\t\
    \t\tcount++;\n\t\t}\n\t\tif (i % 13 == 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "  var count = 0;\n  for (var i = n; i >= 0; i--) {\n    if (i\
    \ % 11 == 0 || i % 13 == 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nIt looks good, but why are you starting with\
    \ n instead of 0?\n<|/ c |>\n<| c |>\nThe first for loop is counting how many\
    \ numbers can be divided by 11, or 13, and then subtracting that number from n.\
    \ After that it's simple division to get the remainder on each number, and then\
    \ checking it if it's divisible by both 11 and 13. If it is, the number is divisible\
    \ by both of those, so the counter will be incremented.\n<|/ c |>\n<| c |>\nIn\
    \ fact, my original answer used the loops from 0 to n-1, but this would give the\
    \ wrong answer if n = 1, as in that case fizzbuzz would return 1 instead of 0,\
    \ so I changed it to starting from 0.\n<|/ c |>\n<| a dscore=2 |>\nThis is a recursive\
    \ version. I've added comments to the code and also added a test case:\n<code>",
  "  if (n < 0) return null;\n  n %= 11;\n  if (n < 5) return n != 0 ? n + \"\" :\
    \ null;\n  if (n < 10) return n != 1 ? \"0\" + n + \"\" : null;\n  return n !=\
    \ 1 ? n + \"\" : null;\n}\n", "    if (n < 0)\n        return 0;\n    else if\
    \ (n < 11)\n        return n <= 2 ? \"0\" + n : n;\n    else if (n % 11 == 0)\n\
    \        return n > 0 && (n % 13 == 0 || n % 13 == 1) ? \"1\" + n : n;\n    else\
    \ if (n % 11 == 1)\n        return n > 1 && (n % 13 == 0 || n % 13 == 1) ? \"\
    2\" + n : n;\n    else if (n % 11 == 2)\n        return n > 2 && (n % 13 == 0\
    \ || n % 13 == 1) ? \"3\" + n : n;\n    else if (n % 11 == 3)\n        return\
    \ n > 3 && (n % 13 == 0 || n % 13 == 1) ? \"4\" + n : n;\n    else if (n % 11\
    \ == 4)\n        return n > 4 && (n % 13 == 0 || n % 13 == 1) ? \"5\" + n : n;\n\
    \    else if (n % 11 == 5)\n        return n > 5 && n % 13 == 0 ? \"6\" + n :\
    \ n;\n    else if (n % 11 == 6)\n        return n > 5 && n % 13 == 1 ? n : \"\
    7\" + n;\n    else if (n % 11 == 7)\n        return n > 6 && n % 13 == 0 ? n :\
    \ \"8\" + n;\n    else if (n % 11 == 8)\n        return n > 6 && n % 13 == 1 ?\
    \ n : \"9\" + n;\n    else if (n % 11 == 9)\n        return n > 7 && n % 13 ==\
    \ 0 ? n : \"10\" + n;\n}\n", "  var count=0; \n  for(var i=0;i<n;i++){\n    if((i%11)==0&&(i%13)==0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  // Initialise the count\
    \ array\n  var count = new Array();\n  // Initialise the output array\n  var output\
    \ = new Array();\n  // Loop through each digit\n  for(var i=0;i<n.length;i++){\n\
    \    // Get the current digit\n    var digit = n.substring(i, i+1);\n    // If\
    \ the current digit is 7, then increment the count by 1\n    if(digit=='7'){\n\
    \      count[count.length-1]++;\n    }\n    // If the current digit is either\
    \ 11 or 13, then increment the count by 1\n    else if(digit=='11' || digit=='13'){\n\
    \      count[count.length-1]++;\n    }\n    // Else if the current digit is 10,\
    \ then increment the count by 1\n    else if(digit=='10'){\n      count[count.length-1]++;\n\
    \    }\n  }\n  // If the length of the count array is less than the length of\
    \ the output array, then set the output array equal to the count array\n  if(count[count.length-1]<output.length){\n\
    \    output = count;\n  }\n  // Else if the length of the count array is greater\
    \ than the length of the output array, then set the output array equal to the\
    \ count array, plus 1\n  else{\n    output = count+1;\n  }\n  // Return the output\
    \ array\n  return output;\n}", "    if(n%11==0) return 0;\n    if(n%13==0) return\
    \ 2;\n    return 1;\n}\n", "    return ((n%11)===0) || ((n%13)===0);\n}\n", " \
    \ var count = 0;\n  var div = parseInt(n/11);\n  if(div == 0) return 0;\n  var\
    \ mod10 = n % 11;\n  var divi = parseInt(mod10/13);\n  if(divi == 0) return 0;\n\
    \  count = parseInt(mod10%13);\n  for(var i=1;i<=count;i++){\n    if((i%div) ==\
    \ 0){\n      if(count==0) return i;\n      else return i + 1;\n    }\n  }\n}\n",
  "  let total = 0;\n  for (let i = 1; i < n; i++){\n    if (i%11==0 && i%13==0){\n\
    \      total++;\n    } else if (i%11==0 || i%13==0){\n      total++;\n    }\n\
    \  }\n  return total;\n}\n</code>\n<|/ a tags=fizzbuzz,javascript |>\n<| a tags=fizzbuzz,javascript\
    \ |>\nHere's a little variation that might make it more readable:\n<code>", " \
    \ if(n < 0 || n > 100) return \"The buzz number must be between 0 and 99.\";\n\
    \  if(n % 11 === 0) return \"The number \" + n + \" is divisible by 11.\";\n \
    \ if(n % 13 === 0) return \"The number \" + n + \" is divisible by 13.\";\n  return\
    \ n;\n}", "  if (n > 0){\n    var n1 = n % 11;\n    var n2 = n % 13;\n    if (n1\
    \ && n2 && (n % 11 === 13 || n % 13 === 11)){\n      return 0;\n    } else {\n\
    \      return n1 + n2;\n    }\n  } else {\n    return 0;\n  }\n}", "  var count\
    \ = 0;\n  for(i = parseInt(n); i > 0; i--){\n    if(i%11 == 0 || i%13 == 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n</code>\n<|/ a |>\n<| a tags=javascript,fizzbuzz,node.js\
    \ |>\nHere is a solution that is a bit more efficient than any other. The difference\
    \ between this and others is that no loops are necessary. In the solution below,\
    \ I am using a recursive function that checks the remainder of the number before\
    \ calling the next iteration. It will exit when either it reaches 0 or the number\
    \ is divisible by either 11 or 13.\n<code>", "  return ((n%11)==0) ? (n%13) :\
    \ ((n%11)==0) ? 0 : fizz_buzz(n+1);\n}\n", "  var result = 0;\n  for (var i =\
    \ 0; i <= n; i++){\n    if (n % Math.pow(11,i) == 0 && n % Math.pow(13,i) == 0){\n\
    \      result++;\n    }\n  }\n  return result;\n}\n", "\tvar fizzbuzz = Math.floor((n%11)-(n%13)+1);\n\
    \treturn fizzbuzz;\n}\n\n", "\treturn Math.log(n) / Math.log(11);\n}\n", "  if(n===undefined){\n\
    \    return fizz_buzz(50);\n  }\n  var count=0;\n  for(var i=0;i<n;i++){\n   \
    \ if(isDivisibleBy11(n,i)){\n      count++;\n    }\n    if(isDivisibleBy13(n,i)){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    var counter=0;\n    for(var\
    \ i=n;i>=0;i--){\n        if(i%11==0 || i%13==0){\n            counter++;\n  \
    \      }\n    }\n    return counter;\n}\n", "  if(n === 0) return 0;\n  if(n ===\
    \ 1) return 1;\n  if(n === 2) return 2;\n  if(n === 3) return 3;\n  if(n === 4)\
    \ return 4;\n  if(n === 5) return 5;\n  if(n === 6) return 6;\n  if(n === 7) return\
    \ 7;\n  if(n === 8) return 8;\n  if(n === 9) return 9;\n  if(n === 10) return\
    \ 10;\n  if(n === 11) return 11;\n  if(n === 12) return 12;\n  if(n === 13) return\
    \ 13;\n  if(n === 14) return 14;\n  if(n === 15) return 15;\n  if(n === 16) return\
    \ 16;\n  if(n === 17) return 17;\n  if(n === 18) return 18;\n  if(n === 19) return\
    \ 19;\n  if(n === 20) return 20;\n  if(n === 21) return 21;\n  if(n === 22) return\
    \ 22;\n  if(n === 23) return 23;\n  if(n === 24) return 24;\n  if(n === 25) return\
    \ 25;\n  if(n === 26) return 26;\n  if(n === 27) return 27;\n  if(n === 28) return\
    \ 28;\n  if(n === 29) return 29;\n  if(n === 30) return 30;\n  if(n === 31) return\
    \ 31;\n  if(n === 32) return 32;\n  if(n === 33) return 33;\n  if(n === 34) return\
    \ 34;\n  if(n === 35) return 35;\n  if(n === 36) return 36;\n  if(n === 37) return\
    \ 37;\n  if(n === 38) return 38;\n  if(n === 39) return 39;\n  if(n === 40) return\
    \ 40;\n  if(n === 41) return 41;\n  if(n === 42) return 42;\n  if(n === 43) return\
    \ 43;\n  if(n === 44) return 44;\n  if(n === 45) return 45;\n  if(n === 46) return\
    \ 46;\n  if(n === 47) return 47;\n  if(n === 48) return 48;\n  if(n === 49) return\
    \ 49;\n  if(n === 50) return 50;\n  if(n === 51) return 51;\n  if(n === 52) return\
    \ 52;\n  if(n === 53) return 53;\n  if(n === 54) return 54;\n  if(n === 55) return\
    \ 55;\n  if(n === 56) return 56;\n  if(n === 57) return 57;\n  if(n === 58) return\
    \ 58;\n  if(n === 59) return 59;\n  if(n === 60) return 60;\n  if(n === 61) return\
    \ 61;\n  if(n === 62) return 62;\n  if(n === 63) return 63;\n  if(n === 64) return\
    \ 64;\n  if(n === 65) return 65;\n  ", "  // Declare two new variables which will\
    \ hold the value to be returned\n  var num;\n  var count;\n  // Declare two new\
    \ variables which will hold the value to be returned\n  var num2;\n  var count2;\n\
    \  \n  // Assign a value to num2\n  num2 = n;\n  \n  // If the integer is divisible\
    \ by 11, add the value 1 to count.\n  if (num2 % 11 == 0){\n    count2 = count2+1;\n\
    \  }\n  \n  // If the integer is divisible by 13, add the value 1 to count.\n\
    \  if (num2 % 13 == 0){\n    count2 = count2+1;\n  }\n  \n  // Return the value\
    \ of count2.\n  return count2;\n}\n", "  if (n <= 0) {\n    return 0;\n  }\n \
    \ \n  var count = 0;\n  \n  while (n % 11 == 0 || n % 13 == 0) {\n    count++;\n\
    \    n /= 11;\n  }\n  \n  return count;\n}\n</cell>\n<cell>", "\tvar fizzbuzz\
    \ = 0;\n\twhile(n>0){\n\t\tif(n % 11 == 0 || n % 13 == 0){\n\t\t\tfizzbuzz +=\
    \ 1;\n\t\t}\n\t\tn = Math.floor(n / 10);\n\t}\n\treturn fizzbuzz;\n}", "\treturn\
    \ (n%11==0) || (n%13==0) ? n : 0; //Return either 0 or n if it passes the test\
    \ above.\n}\n", "  let count = 0;\n  const bigDigits11Or13 = [11, 13, 10, 12,\
    \ 4, 7, 5, 8, 1, 2];\n  for(let i = 0; i < n; i++){\n    if(bigDigits11Or13.indexOf(n%bigDigits11Or13)\
    \ >= 0){\n      count += 1;\n    }\n  }\n  return count;\n}\n", "    if((n%11==0)&&(n%13==0)){\n\
    \        return 0;\n    }\n    else if(n%11==0){\n        return 1;\n    }\n \
    \   else if(n%13==0){\n        return 2;\n    }\n    else if(n%5==0){\n      \
    \  return 3;\n    }\n    else if(n%7==0){\n        return 4;\n    }\n}\n", " \
    \   var i;\n    var str = \"\";\n    if(n<=1) return n;\n    if(n%11==0){\n  \
    \      for(i=2;i<=n/11;i++){\n            str = str + \"Fizz\";\n        }\n \
    \       str = str + (n%11==1?\"s\":\"\");\n        return str;\n    }\n    else\
    \ if(n%13==0){\n        for(i=2;i<=n/13;i++){\n            str = str + \"Buzz\"\
    ;\n        }\n        str = str + (n%13==1?\"s\":\"\");\n        return str;\n\
    \    }\n    else{\n        for(i=2;i<=n/13;i++){\n            str = str + fizz(i);\n\
    \        }\n        str = str + buzz(n%13);\n        return str;\n    }\n}\n",
  "  var counter = 0;\n  while(n>0){\n    if(n%11==0){\n      counter++;\n    }\n\
    \    if(n%13==0){\n      counter++;\n    }\n    n=Math.floor(n/10);\n  }\n  return\
    \ counter;\n}\n", "\tvar count=0; \n\tvar i=1;\n\twhile(i<=n){\n\t\tif(isDivisibleBy11Or13(i)){\n\
    \t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\n\n", "  let counter\
    \ = 0;\n  while(n > 0){\n    if(n%11 == 0){\n      counter++;\n    }\n    if(n%13\
    \ == 0){\n      counter++;\n    }\n    n=n/10;\n  }\n  return counter;\n}\n</code>\n\
    The above code is based on a fizz buzz code found on https://www.geeksforgeeks.org/program-for-fizz-buzz/\n\
    <|/ a |>\n<| c |>\nThis is really helpful. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n\
    Here is my solution. I wanted to implement a binary search tree. So, instead of\
    \ implementing all the functions of the tree, I decided to implement only the\
    \ search function. The code is given below.\n<code>\nclass BST {\n  constructor()\
    \ {\n    this.root = null;\n    this.size = 0;\n  }\n  insertNode(key, value)\
    \ {\n    let newNode = new Node(key,value);\n    if(this.root===null){\n     \
    \ this.root = newNode;\n      this.size++;\n      return;\n    }\n    let current\
    \ = this.root;\n    while(current.right!==null) {\n      current = current.right;\n\
    \    }\n    current.right = newNode;\n    this.size++;\n  }\n  searchNode(key)\
    \ {\n    let current = this.root;\n    while(current!==null){\n      if(current.key===key)\
    \ {\n        return current;\n      }\n      if(current.key>key) {\n        current\
    \ = current.left;\n      }\n      else {\n        current = current.right;\n \
    \     }\n    }\n    return null;\n  }\n  removeNode(key) {\n    let current =\
    \ this.searchNode(key);\n    if(current===null) {\n      return false;\n    }\n\
    \    else if(current.left===null) {\n      this.root = current.right;\n    }\n\
    \    else {\n      let temp = current.left;\n      current.left = temp.right;\n\
    \      temp.right = current;\n    }\n    this.size--;\n    return true;\n  }\n\
    \  getSize() {\n    return this.size;\n  }\n  toString() {\n    if(this.root===null)\
    \ {\n      return \"No elements\";\n    }\n    let current = this.root;\n    let\
    \ res = [];\n    while(current!==null){\n      res.push(current.key);\n      if(current.right!==null)\
    \ {\n        res.push(current.right);\n      }\n      current = current.left;\n\
    \    }\n    return res.toString();\n  }\n}\n\nclass Node {\n  constructor(key,\
    \ value) {\n    this.key = key;\n    this.value = value;\n    this.left = null;\n\
    \    this.right = null;\n  }\n}\n", "  if (n === 0) return 0;\n  if (n === 11\
    \ || n === 13) return 1;\n  if (n === 2) return 2;\n  if (n % 10 !== Math.floor(n\
    \ % 10) && n % 10 !== 9) return 0;\n  if (n !== 0 && n % 10 !== 0) return 0;\n\
    \  return fizz_buzz(n / 10);\n}\n", "   var i;\n   if(n < 0) return -1;\n   if(n\
    \ === 0) return 0;\n   if(n === 1) return 1;\n   if(n < 10) return 1;\n   for(i=3;\
    \ n%10 === 0; n/=10);\n   return Math.floor(n/10) + fizz_buzz(n%10) + 1;\n}\n\
    </code>\nThe above function will give you the number of the fizz buzz sequence\
    \ that should be applied to the input number n. \nIt would be used something like\
    \ this:\n<code>\nvar fizzBuzz = fizz_buzz(50);\nif(fizzBuzz === 3){\n  console.log(\"\
    3 fizz buzz digits found\");\n}\n</code>\nTo test for a number divisible by three\
    \ or five (any number, as long as it's divisible by either 3 or 5) you could do\
    \ something like:\n<code>", "  // Find first multiples of 11 less than or equal\
    \ to n\n  var firstN = 1 * 11\n  var firstN = firstN.toString()\n  while(firstN\
    \ < n){\n    firstN += 11\n  }\n  var nTimes7 = (n - firstN) / 11\n\n  // Find\
    \ first multiples of 13 less than or equal to n\n  var secondN = 13 * 11\n  secondN\
    \ = secondN.toString()\n  while(secondN < n){\n    secondN += 11\n  }\n  var nTimes13\
    \ = (n - secondN) / 13\n\n  // Return the sum of these two numbers\n  var fizzBuzzSum\
    \ = nTimes7 + nTimes13\n  return fizzBuzzSum\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis solution works very well for integer numbers. I added my own solution\
    \ because I didn't find any solution without using the Math library.\n<|/ c |>\n\
    <| a tags=javascript,fizzbuzz,math,loops dscore=0 |>\nThis is an approach that\
    \ uses only numbers. Basically I convert the number to an array of characters\
    \ and then iterate over the array and look for '0','1','2','3','4','5','6','7','8','9'\
    \ and add them to a string if they meet the criteria in the conditional expression.\
    \ If they do not meet the criteria, I increment the counter by one.\n<code>\n\
    var numbers = [1,2,3,4,5,6,7,8,9,10];\nvar result = '';\nvar count = 0;\nfor (var\
    \ i of numbers) {\n    if ((i + '').includes('0') ||\n        (i + '').includes('1')\
    \ ||\n        (i + '').includes('2') ||\n        (i + '').includes('3') ||\n \
    \       (i + '').includes('4') ||\n        (i + '').includes('5') ||\n       \
    \ (i + '').includes('6') ||\n        (i + '').includes('7') ||\n        (i + '').includes('8')\
    \ ||\n        (i + '').includes('9')) {\n        result += i;\n        count++;\n\
    \    }\n}", "  return Math.ceil(Math.log(n) / Math.LN10) - (n % Math.LN10 > 4\
    \ ? 1 : 0);\n}\n\nmodule.exports = fizz_buzz;\n", "    if((n % 11 == 0) || (n\
    \ % 13 == 0)){\n        return 0;\n    }\n    if((n % 11 > 0) || (n % 13 > 0)){\n\
    \        return 1;\n    }\n    return 2;\n}\n</code></pre>\n\n    <h2 id=\"lecture-27-functions-and-arguments\"\
    >Lecture 27 - Functions and Arguments</h2>\n\n    <p id=\"p-33\">In this class\
    \ we learned about functions, their arguments, arguments and default arguments</p>\n\
    \n    <p id=\"p-34\">These concepts go hand in hand with functional programming.</p>\n\
    \n    <p id=\"p-35\">In this class we will use the term <i>arguments</i> instead\
    \ of <i>parameter</i> when referring to functions we call <i>functional programs</i>\
    \ and we will be using <i>higher order functions</i></p>\n\n    <p id=\"p-36\"\
    >There are many different types of functional programming techniques, we will\
    \ explore functional programming in lecture 28</p>\n\n    <p id=\"p-37\">Functions\
    \ take one or more arguments and we will be using <i>arguments</i> to name them</p>\n\
    \n    <p id=\"p-38\">We can use <i>default arguments</i> to provide defaults for\
    \ arguments that aren't supplied.</p>\n\n    <p id=\"p-39\">The arguments that\
    \ are supplied are called <i>parameters</i> and we will be using <i>parameters</i>\
    \ to name them</p>\n\n    <p id=\"p-40\">Functional programming is a programming\
    \ paradigm that involves building and breaking things down into smaller pieces\
    \ called <i>functions</i></p>\n\n    <p id=\"p-41\">Functional programming is\
    \ also known as <i>declarative</i> programming or <i>functional</i> programming.\
    \ Declarative programming is declaring things about things before we execute them.\
    \ Functional programming is using functions to make things happen.</p>\n\n   \
    \ <h2 id=\"lecture-28-higher-order-functions\">Lecture 28 - Higher Order Functions</h2>\n\
    \n    <p id=\"p-40\">In a functional programming language like Haskell or Scala,\
    \ we can write functions in terms of other functions using a special syntax called\
    \ <i>higher order functions</i>.</p>\n\n    <p id=\"p-42\">Higher order functions\
    \ return functions. We will be using the term <i>higher order functions</i> to\
    \ mean functions that return other functions. We will use <i>higher order functions\
    \ to describe functions that take in other functions</i> to name them</p>\n\n\
    \    <p id=\"p-43\">We can also use <i>higher order functions to write functions\
    \ using loops or recursion.</i></p>\n\n    <p id=\"p-44\">Here we will see ",
  "    if (n%11==0 && n%13==0){\n        return 0;\n    }else if (n%11==0){\n    \
    \    return 1;\n    }else if (n%13==0){\n        return 2;\n    }else{\n     \
    \   return 3;\n    }\n}", "  return ((n%11==0)||(n%13==0))?0:(n%11<3&&n%13<3)?(n%11<2?12:7):n%11<2?5:4;\n\
    }\n", "  if (n % 11 <= 0 && n % 13 <= 0){\n    return n%11==0? 0: n%13==0? 1:\
    \ 2\n  } else if (n % 11 < 0){\n    return n%11==0? 0: 5\n  } else if (n % 13\
    \ < 0){\n    return n%13==0? 0: 3\n  }\n}\n", "    var count = 0;\n    var result\
    \ = \"\";\n\n    //Check if n is divisible by both 11 and 13\n    if(n % 11 ==\
    \ 0 && n % 13 == 0){\n        count++;\n    }\n\n    //Check if n is divisible\
    \ by 11.\n    if(n % 11 == 0){\n        result += \"11\";\n        count++;\n\
    \    }\n\n    //Check if n is divisible by 13.\n    if(n % 13 == 0){\n       \
    \ result += \"13\";\n        count++;\n    }\n\n    //Check if n is divisible\
    \ by both 11 and 13.\n    if(n % 11 == 0 && n % 13 == 0){\n        count++;\n\
    \    }\n\n    return count;\n}\n", "  return Math.floor(Math.sqrt(Math.pow(n,\
    \ 3)+1))-1\n}\n", "  var i=1,remain=n;\n  while(i<=7){\n    if(remain%11===0 &&\
    \ remain%13===0){\n      console.log(i); \n    }\n    remain=remain/10;\n    i++;\n\
    \  }\n}\n</code>\n<|/ a |>\n<| c |>\nthank you, this works great but is there\
    \ a way to make it print out instead of console.log()? I still want to be able\
    \ to output it into my terminal\n<|/ c |>\n<| a |>\n<code>", "  let num = ( n\
    \ ) \n  let count = 0\n\n  if (num < 10) {\n    if (num % 10 === 7 ) {\n     \
    \ count++\n    }\n  }\n\n  if (num % 11 === 0){\n    count++\n  }\n\n  if (num\
    \ % 13 === 0){\n    count++\n  }\n\n  return count\n}\n</code>\n<|/ a tags=javascript\
    \ dscore=1 |>\n<| a dscore=1 tags=javascript |>\nThis code will help you out to\
    \ find the number of time 7 comes in a given number. Try this code, it will help\
    \ you out.\n<code>", "    return n - n % 11 - n % 13 + 1;\n}\n", "  if (n <= 10){\n\
    \    if (n % 11 == 0)\n      return 0;\n    if (n % 13 == 0)\n      return 2;\n\
    \  }\n  if (n <= 20){\n    if (n % 11 == 0)\n      return 0;\n    if (n % 13 ==\
    \ 0)\n      return 3;\n  }\n  if (n <= 100){\n    if (n % 11 == 0)\n      return\
    \ 0;\n    if (n % 13 == 0)\n      return 4;\n  }\n}\n", "  var fizz = 0;\n  var\
    \ buzz = 0;\n  var divisibleBy11 = n % 11;\n  var divisibleBy13 = n % 13;\n  var\
    \ mod10 = (n % 10);\n  if(mod10 === 0 || mod10 === 10 || mod10 === 11 || mod10\
    \ === 12){\n    fizz = 1;\n  }\n  if(divisibleBy11 || divisibleBy13){\n    buzz\
    \ = 1;\n  }\n  return fizz + buzz;\n}\n", "  if(n === 0)\n    return 0;\n  else\
    \ if(n % 11 === 0 && n % 13 === 0)\n    return 2;\n  else\n    return 3;\n}\n",
  "  var count = 0;\n  for (var i = 0; i<n; i++){\n    if ((i%11)==0 || (i%13)==0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    if (n == 0){\n      \
    \  return 0;\n    }\n    \n    var count = 0;\n    var remainder = n % 11;\n \
    \   if (remainder === 0){\n        count = count + 1;\n    }\n    var remainder2\
    \ = n % 13;\n    if (remainder2 === 0){\n        count = count + 1;\n    }\n \
    \   var remainder3 = n % 17;\n    if (remainder3 === 0){\n        count = count\
    \ + 1;\n    }\n    var remainder4 = n % 19;\n    if (remainder4 === 0){\n    \
    \    count = count + 1;\n    }\n    \n    return count;\n}\n", "   if(n < 13)\
    \ return (n%11 == 0) && (n%13 == 0) ? 0 : n;\n   else return (n%11 == 0) ? 1 :\
    \ 2;\n}\n", "    if (n < 10 && n % 11 == 0 || n < 13 && n % 13 == 0){\n      \
    \  return n\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nYou would need to account for\
    \ numbers divisible by 7 by `n % 7`, not by `% 11`.\n<|/ c |>\n<| a dscore=1 |>\n\
    This code seems to work well to count the times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13\n<code>", "\tvar remain = n % 11;\n\
    \tif(remain == 0 || remain == 3){\n\t\treturn 0;\n\t}\n\tvar add = 3 - remain;\n\
    \treturn (add * add) / 11;\n}\n", "    let counter = 0;\n    \n    while(n > 0){\n\
    \        let remainder = n % 11;\n        if(remainder === 0 || remainder ===\
    \ 7){\n            counter++;\n        }\n        \n        n /= 11;\n    }\n\
    \    \n    return counter;\n}\n", "    for(var i = 0; i<n; i++){\n        if((i%3==0\
    \ || i%5==0))\n            if(i%3==0)\n                if(i%5==0)\n          \
    \          if(i%7==0)\n                        console.log(i);\n             \
    \   else\n                    console.log(i);\n            else\n            \
    \    console.log(i);\n        else\n            console.log(i);\n    }\n}\nfizz_buzz(10000);\n",
  "  if(n===0)\n    return 0;\n  if(Math.floor(n)===n)\n    return 1;\n  if(Math.floor(n)===n)\n\
    \    return 2;\n  if(Math.floor(n)===n)\n    return 3;\n  if(Math.floor(n)===n)\n\
    \    return 4;\n  if(Math.floor(n)===n)\n    return 5;\n  if(Math.floor(n)===n)\n\
    \    return 6;\n  if(Math.floor(n)===n)\n    return 7;\n  if(Math.floor(n)===n)\n\
    \    return 8;\n  if(Math.floor(n)===n)\n    return 9;\n  if(Math.floor(n)===n)\n\
    \    return 10;\n  if(Math.floor(n)===n)\n    return 11;\n  if(Math.floor(n)===n)\n\
    \    return 12;\n  if(Math.floor(n)===n)\n    return 13;\n  if(Math.floor(n)===n)\n\
    \    return 14;\n  if(Math.floor(n)===n)\n    return 15;\n  if(Math.floor(n)===n)\n\
    \    return 16;\n  if(Math.floor(n)===n)\n    return 17;\n  if(Math.floor(n)===n)\n\
    \    return 18;\n  if(Math.floor(n)===n)\n    return 19;\n  if(Math.floor(n)===n)\n\
    \    return 20;\n  if(Math.floor(n)===n)\n    return 21;\n  if(Math.floor(n)===n)\n\
    \    return 22;\n  if(Math.floor(n)===n)\n    return 23;\n  if(Math.floor(n)===n)\n\
    \    return 24;\n  if(Math.floor(n)===n)\n    return 25;\n  if(Math.floor(n)===n)\n\
    \    return 26;\n  if(Math.floor(n)===n)\n    return 27;\n  if(Math.floor(n)===n)\n\
    \    return 28;\n  if(Math.floor(n)===n)\n    return 29;\n  if(Math.floor(n)===n)\n\
    \    return 30;\n  if(Math.floor(n)===n)\n    return 31;\n  if(Math.floor(n)===n)\n\
    \    return 32;\n  if(Math.floor(n)===n)\n    return 33;\n  if(Math.floor(n)===n)\n\
    \    return 34;\n  if(Math.floor(n)===n)\n    return 35;\n  if(Math.floor(n)===n)\n\
    \    return 36;\n  if(Math.floor(n)===n)\n    return 37;\n  if(Math.floor(n)===n)\n\
    \    return 38;\n  if(Math.floor(n)===n)\n    return 39;\n  if(Math.floor(n)===n)\n\
    \    return 40;\n  if(Math.floor(n)===n)\n    return 41;\n  if(Math.floor(n)===n)\n\
    \    return 42;\n  if(Math.floor(n)===n)\n    return 43;\n  if(Math.floor(n)===n)\n\
    \    return 44;\n  if(Math.floor(n)===n)\n    return 45;\n  if(Math.floor(n)===n)\n\
    \    return 46;\n  if(Math.floor(n)===n)\n    return 47;\n  if(Math.floor(n)===n)",
  "  return +n.toString().match(/^3|5|7|9|11|13$/)[0];\n}\n", "  if(n % 11 === 0){\n\
    \    return (n % 13 === 0 ? 0 : 2);\n  }\n  else if(n % 13 === 0){\n    return\
    \ (n % 11 === 0 ? 0 : 3);\n  }\n  return ((n % 11 === 0 && n % 13 === 0) ? 0 :\
    \ 4);\n}", "    var fizzBuzzNum = 0;\n    var nStr = str(n);\n\n    //If n is\
    \ divisible by 11, set fizzBuzzNum to 11.\n    if(nStr.charAt(nStr.length-1) ==\
    \ '1'){\n        fizzBuzzNum = 11;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '2'){\n        fizzBuzzNum = 13;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '3'){\n        fizzBuzzNum = 17;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '4'){\n        fizzBuzzNum = 19;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '5'){\n        fizzBuzzNum = 23;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '6'){\n        fizzBuzzNum = 27;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '7'){\n        fizzBuzzNum = 31;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '8'){\n        fizzBuzzNum = 33;\n    }\n    else if(nStr.charAt(nStr.length-1)\
    \ == '9'){\n        fizzBuzzNum = 37;\n    }\n    //If n is divisible by 13, set\
    \ fizzBuzzNum to 13.\n    if(nStr.charAt(nStr.length-2) == '1'){\n        fizzBuzzNum\
    \ = 13;\n    }\n    else if(nStr.charAt(nStr.length-2) == '2'){\n        fizzBuzzNum\
    \ = 17;\n    }\n    else if(nStr.charAt(nStr.length-2) == '3'){\n        fizzBuzzNum\
    \ = 19;\n    }\n    else if(nStr.charAt(nStr.length-2) == '4'){\n        fizzBuzzNum\
    \ = 23;\n    }\n    else if(nStr.charAt(nStr.length-2) == '5'){\n        fizzBuzzNum\
    \ = 27;\n    }\n    else if(nStr.charAt(nStr.length-2) == '6'){\n        fizzBuzzNum\
    \ = 31;\n    }\n    else if(nStr.charAt(nStr.length-2) == '7'){\n        fizzBuzzNum\
    \ = 33;\n    }\n    else if(nStr.charAt(nStr.length-2) == '8'){\n        fizzBuzzNum\
    \ = 37;\n    }\n    else if(nStr.charAt(nStr.length-2) == '9'){\n", "  if(n ==\
    \ 0)\n    return 0\n  if(n < 11)\n    return n % 10\n  if(n < 13)\n    return\
    \ 3\n  if((n-11) % 13 == 0)\n    return 1\n  return 2\n}", "  let result = 0;\n\
    \  let i = 0;\n  while (i<n){\n    if( (n % 11 == 0) || (n % 13 == 0) ){\n   \
    \   result++;\n    }\n    i++;\n  }\n  return result;\n}\n", "  if((n%11)==0){\n\
    \    return (n / 11).toString() + FizzBuzz.fizz_buzz(n - 11);\n  }\n  if((n%13)==0){\n\
    \    return (n / 13).toString() + FizzBuzz.fizz_buzz(n - 13);\n  }\n  return 0;\n\
    }\n", "  if(n > 0){\n    if( n % 11 == 0 || n % 13 == 0){\n      return( n );\n\
    \    }\n    \n    return( fizz_buzz( n - 1 ) );\n  }\n  \n  return( 0 );\n}\n",
  "\tvar i = 0;\n\tvar arr = [];\n\tvar n1 = Math.floor(n/11) + 1;\n\tvar n2 = n -\
    \ n1*11;\n\tvar n3 = Math.floor(n2/13);\n\tvar n4 = n2 - n3*13;\n\twhile(i < n3){\n\
    \t\tarr.push(i.toString());\n\t\ti++;\n\t}\n\twhile(i < n4){\n\t\tarr.push(i.toString());\n\
    \t\ti++;\n\t}\n\treturn arr.length;\n}\n", "    return ((n % 11 == 0) || (n %\
    \ 13 == 0)) ? 0 : ((n % 11 == 0) || (n % 13 == 0) ? 2 :3);\n}\n", "    if (n===0){return\
    \ 0;}\n    if (n===1 || n===11 || n===13){return 1;}\n    \n    let counter =\
    \ 0;\n    for (let i=1;i<=n;i++){\n        if (i%11===0){\n            counter\
    \ += 1;\n        }\n        if (i%13===0){\n            counter += 1;\n      \
    \  }\n    }\n    return counter;\n}\n", "  let counter = 0;\n  if(n % 11 === 0\
    \ || n % 13 === 0){\n    counter = 1;\n  }\n  while(n>0){\n      if(n % 10 ===\
    \ 7 || n % 10 === 8){\n        counter++;\n      }\n      n /= 10;\n  }\n  return\
    \ counter;\n}\n", "  n = n - 1;\n  var count = 0;\n  while (n>0){\n    if(n %\
    \ 11 == 0 || n % 13 == 0){\n      count++;\n    }\n    n = Math.floor(n / 10);\n\
    \  }\n  return count;\n}\n", "  var i = 1;\n  while (i < n){\n    if (i % 11 ==\
    \ 0 && i % 13 == 0)\n      return i;\n    i++;\n  }\n  return i;\n}\n</cell>\n\
    <text>\nThe first function should return the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13. For example, fizz_buzz(50)\
    \ should return 0, because no number divisible by 11 is divisible by 7. The second\
    \ function should return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 and 13. For example, fizz_buzz(78) should return\
    \ 2, because 2 numbers divisible by 11 and 13 are divisible by 7.\n\nNow write\
    \ a function that returns the number of times the digit 7 appears in integers\
    \ less than or equal to n. For example, fizz_buzz_or_not(78) should return 2,\
    \ because 2 numbers divisible by 7 are divisible by 11 or 13 and 3 numbers divisible\
    \ by 7 are divisible by 11.\n\nThis function should work for any positive integer\
    \ and should work for any integer divisible by 11 and 13. For example, fizz_buzz_or_not(25)\
    \ should return 2, because only 2 numbers divisible by 11 are divisible by 7.\n\
    \n\n</text>\n<cell>", "  if (n<10) return n; //If n<10, return n.\n  if (n%10==7)\
    \ return fizz_buzz(n+1);\n  if (n%10==9) return fizz_buzz(n+13);\n  if (n%10==11)\
    \ return fizz_buzz(n+19);\n  return fizz_buzz(n+23);\n}", "  var count = 0;\n\
    \  while(n%11 == 0){\n    count +=1;\n    n /= 11;\n  }\n  while(n%13 == 0){\n\
    \    count +=1;\n    n /= 13;\n  }\n  return count;\n}\n  ", "  if(n==0) return\
    \ 0;\n  if(n%11==0) return 1;\n  if(n%13==0) return 2;\n  return 3;\n}", "\tvar\
    \ count = 0;\n\t\n\tif(n <= 0) return 0;\n\t\n\twhile(n % 11 == 0 || n % 13 ==\
    \ 0){\n\t\tcount++;\n\t\tn = Math.ceil(n/10);\n\t}\n\t\n\treturn count;\n}\n",
  "    \n    \n    var result = 0;\n    \n    var i;\n    for(i = 0; i < n; i++){\n\
    \        \n        if((i % 11 == 0) || (i % 13 == 0)){\n            \n       \
    \     if(i % 11 == 0){\n                result = result + 1;\n            }\n\
    \            \n            if(i % 13 == 0){\n                result = result +\
    \ 2;\n            }\n            \n            \n        }\n        \n       \
    \ \n    }\n    return result;\n    \n    \n    \n}", "  var count = 0;\n  for\
    \ (var x = n; x != 0; x = x / 10) {\n    if (x % 11 == 0 || x % 13 == 0){\n  \
    \    count++;\n    }\n  }\n  return count;\n}\n", "  if (n%11 == 0) return (n/11);\n\
    \  if (n%13 == 0) return (n/13) + 1;\n  else return 0;\n}\n", "\tvar a = [];\n\
    \tvar count = 0;\n\t\n\tfor(var i = n; i > 0; i--){\n\t\tvar d = i.toString();\n\
    \t\tfor(var j = 0; j < d.length; j++){\n\t\t\tif(d[j] == '7' || d[j] == '9' ||\
    \ d[j] == '5' || d[j] == '3'){\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\t\n\tif(count > 0){\n\t\treturn count;\n\t} else {\n\t\treturn '0';\n\
    \t}\n}\n", "    if (n % 11 === 0 || n % 13 === 0) return 0;\n    return (((n/11)\
    \ % 10) + 3 * ((n/13) % 10) + 5 * ((n/11) % 10) + 7 * ((n/13) % 10)) % 10\n};\n\
    \n", "  var count = 0, i;\n  for(i=1;i<=n;i++)\n    if( n%i===0 || n%i===3 ||\
    \ n%i===5 || n%i===7 ) count++;\n  return count;\n}\n", "    var i,\n\tcount =\
    \ 0,\n\tdigits = [7,11,13,17];\n\t\n    for (i = 0; i < n; i++){\n        if(\
    \ (i%3 == 0 || i%3 == 1) && digits[i%3] == 0) count++;\n    }\n    \n    return\
    \ count;\n}\n</code>\nI hope this helps someone.\n<|/ a tags=javascript dscore=1\
    \ |>\n<| c |>\nI appreciate that you've taken the time to write this, but this\
    \ does not answer the question. Instead of just providing a code dump, this should\
    \ really be an answer to a question posted on SO that OP should post as a comment\
    \ on the other answer.\n<|/ c |>\n<| c |>\n, thanks for the response. I found\
    \ this answer and it worked for me. Also, I believe this answer would benefit\
    \ from some explanation, so I thought I'd put some explanation into this answer.\
    \ Hopefully this helps someone. Best of luck to you all.\n<|/ c |>\n<| c |>\n\
    I totally agree, I was actually just adding my comment to your code and didn't\
    \ see it until after I posted my answer.\n<|/ c |>\n<| a dscore=1 tags=javascript\
    \ |>\n<code>", "  if (n < 10) return n;\n  if (n % 10 == 1 && n % 11 != 1 || n\
    \ % 10 == 0 && n % 11 == 13) return fizz_buzz(n / 10);\n  if (n % 10 == 1 && n\
    \ % 11 == 1) return 1;\n  if (n % 10 == 2 && n % 11 == 2) return 2;\n  if (n %\
    \ 10 == 3 && n % 11 == 3) return 3;\n  if (n % 10 == 4 && n % 11 == 4) return\
    \ 4;\n  if (n % 10 == 5 && n % 11 == 5) return 5;\n  if (n % 10 == 6 && n % 11\
    \ == 6) return 6;\n  if (n % 10 == 7 && n % 11 == 7) return 7;\n  if (n % 10 ==\
    \ 8 && n % 11 == 8) return 8;\n  if (n % 10 == 9 && n % 11 == 9) return 9;\n \
    \ return fizz_buzz(n / 10);\n}\n", "  return n < 10 ? n % 11 == 0 : n >= 100 ?\
    \ n % 13 == 0 : n % 11 == 0 ? 1 : 2;\n}\n\n},{}],5:[function(require,module,exports){\n\
    module.exports = require('./fizz_buzz');\n},{\"./fizz_buzz\":4}],6:[function(require,module,exports){\n\
    var assert = require('assert')\n", "  if (n <= 0){\n    return 0;\n  }\n  let\
    \ count = 0;\n  while (n >= 11 || n >= 13) {\n    n--;\n    if (n % 11 === 0 ||\
    \ n % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  return\
    \ (Math.ceil(n/11)%13+Math.ceil(n/13)%11)/2\n}", "  var count=0, digit;\n  while(n>0){\n\
    \    digit=n%11;\n    if(digit===7){\n      count++;\n    }\n    n=Math.floor(n/10);\n\
    \  }\n  return count;\n}\n", "  var counter = 0;\n  var number = n;\n  while (number\
    \ >= 1000) {\n    var remainder = number % 11;\n    var div = number / 11;\n \
    \   if (div == 11 || div == 13) {\n      counter += 1;\n    }\n    number = remainder;\n\
    \  }\n  return counter;\n}\nmodule.exports = fizz_buzz;\n},{}],36:[function(require,module,exports){\n\
    var isLeapYear = function (year) {\n    return (((year % 4 === 0) && (year % 100\
    \ !== 0)) || (year % 400 === 0));\n};\n\nvar isFizzBuzz = function (num) {\n \
    \   var counter = 0;\n    var number = num;\n    while (number >= 1000) {\n  \
    \      var remainder = number % 11;\n        var div = number / 11;\n        if\
    \ (div == 11) {\n            counter += 1;\n        }\n        if (div === 3)\
    \ {\n            counter += 1;\n        }\n        if (remainder === 3) {\n  \
    \          counter += 1;\n        }\n        number = remainder;\n    }\n    if\
    \ (num % 15 === 0) {\n        counter += 1;\n    }\n    if (num % 3 === 0) {\n\
    \        counter += 1;\n    }\n    return counter;\n};\n\nmodule.exports = isLeapYear;\n\
    },{}],37:[function(require,module,exports){", "  //Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \  if(n<10)\n    return n;\n  if(n%11==0 && n%13==0)\n    return (n/11)*11;\n\
    \  if(n%11==0)\n    return (n/11)*13;\n  if(n%13==0)\n    return (n/13)*11;\n\
    \  else\n    return n;\n}\n", "    let count = 0;\n    for (let i = 1; i<=n; i++)\
    \ {\n        if(isDivisibleBy11(i) || isDivisibleBy13(i))\n            count +=1;\n\
    \    }\n    return count;\n}\n", "  var divisor = 11 || 13;\n  var count = 0;\n\
    \  while (divisor){\n    if (n%divisor == 0)\n      count += 1;\n    divisor /=\
    \ 10;\n  }\n  return count;\n}\n", "  var counter = 0;\n  var i;\n  for(i=n; i%11==0;\
    \ i=i/10){\n    counter++;\n  }\n  for(i=n; i%13==0; i=i/10){\n    counter++;\n\
    \  }\n  return counter;\n}\n", "  return n < 0 ? 0 : n < 13 ? n : n % 13 === 0\
    \ ? 0 : n % 11 === 0 ? 1 : 2;\n}", "  var result = 0;\n  \n  for(var i=0;i<10;i++){\n\
    \    if(n % i == 0){\n      if(i % 11 == 0){\n        result++;\n      }else{\n\
    \        result+=2;\n      }\n    }\n  }\n  \n  return result;\n}\n", "\treturn\
    \ (n >= 11 && n % 11 == 0)? (n >= 13 && n % 13 == 0) ? 0 : 2 : 3;\n}", "  return\
    \ (((n%11)==0 && n%13!=0)||(n%11==0 && n%13==0))? n%13 : 0;\n}", "  var count\
    \ = 0;\n  for (var i = n; i > 0; i--) {\n    if ((i % 11 == 0 && i % 13 == 0)\
    \ || (i % 11 == 0 && i % 13 == 1))\n      count++;\n  }\n  return count;\n}\n",
  "  let arr = [];\n  let count = 0;\n  let isDivisibleBy11Or13 = (d) => d % 11 ===\
    \ 0 || d % 13 === 0;\n  while(n >= 1){\n    arr.push(n);\n    n -= isDivisibleBy11Or13(n)\
    \ ? 1 : 0;\n  }\n  while(arr.length > 0){\n    n = arr.shift();\n    count +=\
    \ isDivisibleBy11Or13(n) ? 0 : 1;\n  }\n  return count;\n}\n", "\tvar c=0;\n\t\
    while(n < 101){\n\t\tif((n % 11 == 0) && (n % 13 == 0)){\n\t\t\tc++;\n\t\t}\n\t\
    \tn+=1;\n\t}\n\treturn c;\n}\n", "  if(n <= 0) return 0;\n  let count = 0;\n \
    \ let remainder = n % 11;\n  n = n % 13;\n  while(n > 0){\n    count = count +\
    \ n % 11;\n    n = Math.floor(n / 11);\n  }\n  if(remainder === 0 || remainder\
    \ === 11) return count;\n  return count + 1;\n}\n</code>\nThis doesn't work quite\
    \ right though for some cases:\n\nfizz_buzz(111) returns 1 instead of 0\nfizz_buzz(99)\
    \ returns 2 instead of 1\n\nThe reason is because JavaScript performs integer\
    \ division which truncates any remainders so n is getting rounded down to zero\
    \ because of the while loop. \nTo fix this, we can use remainder = n % 11; as\
    \ you have done but then we need to account for the case when remainder is zero\
    \ or 11. We can do this by checking for these cases and wrapping them in a while\
    \ loop. \nI've also updated your function to use a for loop which is more readable\
    \ and more performant:\n<code>", "    var i;\n    var fizzes = 11;\n    var buzzes\
    \ = 13;\n    var result = \"\";\n    if(n >= fizzes){\n        if(n % fizzes ==\
    \ 0){\n            result += (n-fizzes).toString()+\"Fizz\"+\"<br>\";\n      \
    \  }\n        fizzes += 11;\n    }\n    if(n >= buzzes){\n        if(n % buzzes\
    \ == 0){\n            result += (n-buzzes).toString()+\"Buzz\"+\"<br>\";\n   \
    \     }\n        buzzes += 13;\n    }\n    return result.length==0 ? n : result;\n\
    }\n</code>\n<|/ a tags=javascript,fizzbuzz,algorithm dscore=0 |>\n<| c |>\n`for\
    \ (var i = 1, s = \"\"; i <= n; i++) { s += (i % 15 == 0 || i % 3 == 0) ? i :\
    \ (i + 'FizzBuzz').substring(0, 3) }; return s;`\n<|/ c |>\n<| c |>\nThanks Joe.\
    \ As you can see my question was not about how to do fizzbuzz, i was just wondering\
    \ if there was a way to do it without doing a bunch of if statements. And i already\
    \ figured it out. Thanks for your response.\n<|/ c |>\n<| a tags=javascript,fizzbuzz,algorithm\
    \ |>\n<code>", "    let numbers=[];\n    let counter=0;\n    let j=0;\n    for\
    \ (let i=0;i<=n;i++){\n        if (i%11===0||i%13===0){\n            numbers[j]=i;\n\
    \            j++;\n        }\n    }\n    for (let i=0;i<j;i++){\n        counter+=numbers[i];\n\
    \    }\n    return counter;\n}", "  let counter=0;\n  while(n > 10){\n    if (n\
    \ % 11 == 0) counter++;\n    if (n % 13 == 0) counter++;\n    n=n/10;\n  }\n \
    \ return counter;\n}\n", "  var x = n // x will be the first number, which will\
    \ be divisible by 11 or 13\n  var count = 0\n  for(var i = 0; i < x; i++){\n \
    \   if(n % 11 == 0 || n % 13 == 0){\n      count++\n    }\n  }\n  return count\n\
    }\n", "  let count = 0;\n  while(n > 0){\n    let remainder = n % 11;\n    if\
    \ (remainder === 0 || remainder === 13) count++;\n    n = Math.floor(n / 11);\n\
    \  }\n  return count;\n}\n", "  return Array.from(new Array(n+1).keys()).reduce((t,i)=>{\n\
    \    return t+= Math.abs(((i-1)%11 === 0 || (i-13)%13 === 0))\n  },0)\n}\n", " \
    \ var result = 0;\n  var count = 0;\n  var i;\n  for(i = 2; i <= n; i++){\n  \
    \  if(i % 11 == 0){\n      result++;\n      if(i % 13 == 0){\n        result++;\n\
    \      }\n    }\n    count++;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=javascript,algorithm |>\nYou could use an generator to\
    \ generate all valid patterns\n\n<code>\nfunction* valid(n) {\n    if (n === 0)\
    \ return [ ];\n    if (n === 1) return [ n ];\n    \n    const\n        digits\
    \ = [ ...Array(n).keys() ],\n        patterns = [ ];\n    \n    for (let i = 0;\
    \ i < digits.length; i++) {\n        const\n            digit = digits[i],\n \
    \           next = n - digit,\n            pattern = digits[i] && valid(next)\n\
    \                .flat(Infinity)\n                .map(d => d + digit)\n     \
    \           .filter(Boolean);\n        patterns.push(pattern);\n    }\n    \n\
    \    return patterns;\n}\n", "  var count = 0;\n  \n  if(n<0){\n    console.log(\"\
    The number must be positive.\");\n  }\n\n  if(n<10){\n    if(n%10==7)\n      count++;\n\
    \  }\n  else{\n    for(var i=0;i<n;i++){\n      if(i%3==0)\n        if(i%11==0)\n\
    \          if(i%13==0)\n            count++;\n      }\n    }\n  }\n\n  return\
    \ count;\n}", "  return Math.floor(Math.log10(n))\n}\n\nvar fibs = []\nfor(var\
    \ i = 0; i < 100; i++){\n  fibs.push(i)\n}\n\nfibs.push(100)\n", "\tif(n<13){\n\
    \t\treturn 0;\n\t}\n\treturn ((n%11)==0)+((n%13)==0);\n}\n", "\tvar i = (n % 11\
    \ == 0 || n % 13 == 0) ? 0 : 1;\n\treturn Math.floor(n/Math.pow(11,i))+'';\n}\n",
  "\tif(n>0 && n<100){\n\t\tlet count=0;\n\t\twhile(n>0){\n\t\t\tif(n%11==0 || n%13==0){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t\tn=n-1;\n\t\t}\n\t\treturn count;\n\t}\n\treturn\
    \ -1;\n}\n", "  var count = 0;\n  var factor = 11;\n  var limit = 11;\n  while\
    \ (factor <= n) {\n    count += n % factor === 0 ? 1 : 0;\n    factor *= limit;\n\
    \    limit = limit * limit;\n  }\n  return count;\n}\n", "  var count = 0;\n \
    \ while(n > 0){\n    if((n % 11 === 0 && n % 13 !== 0) || n % 11 === 0){\n   \
    \   count++;\n    }\n    n = Math.floor(n / 11);\n  }\n  return count;\n}", " \
    \ let count = 0\n  while (n%11 == 0 || n%13 == 0){\n    count++\n    n = n/10\n\
    \  }\n  return count\n}\n", "  return Math.floor(n / 11) * 11 + \n         Math.floor(n\
    \ / 13) * 13 +\n         n % 13;\n}", "  if(n===0) return 0;\n  if(n%11===0) return\
    \ 1;\n  if(n%13===0) return 2;\n  return fizz_buzz(n/10)+1;\n}\n", "  for(let\
    \ i = 0; i <= n; i++){\n    if (n % 10 === 7 && n % 11 === 14 && n % 13 === 19){\n\
    \      return i;\n    }\n  }\n  return 0;\n}\n", "  return Math.floor((n%11)==0)?Math.floor((n%13)==0)?n+1:n+1:Math.floor((n%11)==0)?n:Math.floor((n%13)==0)?n+1:n+1;\n\
    }\n", "  if (n<10)\n    return n;\n  else if (n>=11 && n<=13)\n    return fizz_buzz(n-11)\n\
    \  else if (n%11==0)\n    return n+'th';\n  else if (n%13==0)\n    return (n-11)+'th';\n\
    \  else\n    return n+'s';\n}\n", "  let i = 0; \n  while(n > 0){\n    i = i %\
    \ 11;\n    i = i % 13;\n    if(i == 0){\n      i++;\n    }\n    n--;\n  }\n  return\
    \ i;\n}\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript dscore=1 |>\n\
    <code>\nconst fizzBuzz = (n) => {\n  let nMod11 = n % 11;\n  let nMod13 = n %\
    \ 13;\n\n  let arr = [nMod11, nMod13];\n\n  if (nMod11 === 0 && nMod13 === 0)\
    \ return 'FizzBuzz'\n  if (nMod11 === 0) return 'Fizz'\n  if (nMod13 === 0) return\
    \ 'Buzz'\n\n  let i;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > 0) return arr[i]\n  }\n};\n</code>\n<|/ a |>\n<| a tags=javascript |>\n<code>",
  "    if(n == 0) return 0;\n    if(n % 11 == 0 && n % 13 == 0) return 1;\n    else\
    \ if(n%11 != 0 || n%13 != 0) return 0;\n    else return fizz_buzz(n /11)+ fizz_buzz(n\
    \ /13);\n}\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=1 |>\nA more\
    \ functional approach, that doesn't use recursion\n<code>\nconst count7s = (number)\
    \ => \n  number % 11 === 0 && number % 13 === 0 ? 1 : number % 11 != 0 || number\
    \ % 13 != 0 ? 0 : \n  number % 11 == 0 ? 11 : count7s(number / 11)\n</code>\n\
    It would be better if you just return the number of 7 numbers in the number passed\
    \ to it.\n<|/ a tags=recursion,javascript |>\n<| c |>\nIt should be noted that\
    \ this solution has a high space complexity due to recursion, even if you don't\
    \ care about the space complexity for small inputs. In such cases, it is better\
    \ to use a loop as an alternative solution.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  if(n < 7) return 0;\n  if(n % 11 == 0) return 1;\n  if(n % 13 == 0) return 2;\n\
    \  return 3;\n}\n", "    let fizzbuzz = [];\n    \n    if (n % 11 == 0 || n %\
    \ 13 == 0){\n        fizzbuzz.push(n % 10);\n    }\n    else{\n        let divisor\
    \ = n%11;\n        \n        if (divisor == 0){\n            divisor = 11;\n \
    \       }\n        fizzbuzz.push( divisor );\n    }\n    return fizzbuzz;\n}\n",
  "\tif(n<0) return -1;\n\tvar c = 0;\n\twhile(n > 0){\n\t\tif(n%11 == 0){\n\t\t\t\
    c++;\n\t\t}\n\t\tif(n%13 == 0){\n\t\t\tc++;\n\t\t}\n\t\tn = (n - 1)/11;\n\t}\n\
    \treturn c;\n}\n\n", "  const divisors = [11,13];\n  let count = 0;\n  while(n\
    \ > 0){\n    if(n % 10 == 7){\n      count += divisors.includes(n % 10);\n   \
    \ }\n    n /= 10;\n  }\n  return count;\n}\n", "    var x = Math.floor(n/11),\n\
    \        y = Math.floor(n/13),\n        z = 0;\n    if(x == 0)\n        z = y++;\n\
    \    else if(y == 0)\n        z = x++;\n    else if(x == 1 && y == 0)\n      \
    \  z = 0;\n    return z;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,fizzbuzz |>\n\
    <| a dscore=0 |>\nThis is what I did on Kata:\n<code>\ndef FizzBuzz(n):\n    if\
    \ n < 1:\n        return n\n    elif n <= 3:\n        return n\n    elif n <=\
    \ 6:\n        return \"Fizz\"\n    else:\n        return \"Buzz\"\n\ndef Fizz(n):\n\
    \    if n % 15 == 0:\n        return \"FizzBuzz\"\n    if n % 3 == 0:\n      \
    \  return \"Fizz\"\n    if n % 5 == 0:\n        return \"Buzz\"\n    if n % 5\
    \ == 0 and n % 3 == 0:\n        return \"FizzBuzz\"\n    return \"FizzBuzz\"\n\
    \ndef FizzBuzz(n):\n    if n < 1:\n        return n\n    else:\n        if n %\
    \ 15 == 0:\n            return FizzBuzz(n - 15)\n        else:\n            return\
    \ FizzBuzz(n - 3) + Fizz(n - 1)\n</code>\n<|/ a tags=algorithm,fizzbuzz |>\n<|\
    \ a dscore=0 tags=algorithm,fizzbuzz |>\n<code>", "    if(n < 0){\n        throw\
    \ 'n is less than zero';\n    }\n    var count = 0;\n    var div1 = Math.floor(n\
    \ / 11);\n    var div2 = Math.floor(n / 13);\n    var div3 = Math.floor(n / 11);\n\
    \    var div4 = Math.floor(n / 13);\n    var div5 = Math.floor(n / 11);\n    var\
    \ div6 = Math.floor(n / 13);\n    var div7 = Math.floor(n / 11);\n    var div8\
    \ = Math.floor(n / 13);\n    var div9 = Math.floor(n / 11);\n    var div10 = Math.floor(n\
    \ / 13);\n    \n    if(div1 === 7 || (div1 === 5 && div2 === 5 && div3 === 5 &&\
    \ div4 === 5 && div5 === 5 && div6 === 5 && div7 === 5 && div8 === 5 && div9 ===\
    \ 5 && div10 === 5)){\n        count++;\n    }\n    \n    if(div1 === 5 || (div1\
    \ === 4 && div2 === 4 && div3 === 4 && div4 === 4 && div5 === 4 && div6 === 4\
    \ && div7 === 4 && div8 === 4 && div9 === 4 && div10 === 4)){\n        count++;\n\
    \    }\n    \n    if(div1 === 4 || (div1 === 3 && div2 === 3 && div3 === 3 &&\
    \ div4 === 3 && div5 === 3 && div6 === 3 && div7 === 3 && div8 === 3 && div9 ===\
    \ 3 && div10 === 3)){\n        count++;\n    }\n    \n    if(div1 === 3 || (div1\
    \ === 2 && div2 === 2 && div3 === 2 && div4 === 2 && div5 === 2 && div6 === 2\
    \ && div7 === 2 && div8 === 2 && div9 === 2 && div10 === 2)){\n        count++;\n\
    \    }\n    \n    if(div1 === 2 || (div1 === 1 && div2 === 1 && div3 === 1 &&\
    \ div4 === 1 && div5 === 1 && div6 === 1 && div7 === 1 && div8 === 1 && div9 ===\
    \ 1 && div10 === 1)){\n        count++;\n    }\n    \n    if(div1 === 1){\n  \
    \      count++;\n    }\n    \n    return count;\n}</code>\n<|/ a tags=if-statement,javascript,for-loop\
    \ |>\n<| a dscore=0 |>\nThis approach will also work:\n<code>", "  var count=0,\
    \ //count is used to keep track of how many times each number has appeared.\n\
    \      i;\n  //We start with i = n.\n  while(i>0 && n%i===0){\n      count++;\n\
    \      i=i-1;\n  }\n  //If the count of times i has appeared is greater than 1\
    \ we know that i has a 7 in it.\n  if(count>=1){\n      return(count);\n  }\n\
    \  else if(n==10){\n      return(7);\n  }\n  else if(n==11 || n==13){\n      return(8);\n\
    \  }\n  else {\n      return(\"\");\n  }\n}\n", "  if((n%11==0)&&(n%13==0)){\n\
    \    return n;\n  }\n  return (n%11==0)?((n%13)==0?(n/13):0):((n%13)==0?(n%11):0);\n\
    }\n", "    if(n < 10){\n        return 1;\n    }\n\n    if(n === 3 || n === 5\
    \ || n === 7 || n === 9 || n === 11 || n === 13){\n        return 0;\n    }\n\n\
    \    if(n % 10 === 2 && (n % 100 === 11 || n % 100 === 13)){\n        return 2;\n\
    \    }\n\n    if(n % 10 === 1 && n % 100 !== 11){\n        return 1;\n    }\n\n\
    \    return fizz_buzz(n % 10);\n}\n</code>\n<|/ a tags=javascript,fizzbuzz |>\n\
    <| c |>\nThis is great but you should really explain what you changed and why.\n\
    <|/ c |>\n<| c |>\nI added some comments.\n<|/ c |>\n<| c |>\nThank you for the\
    \ explanation. I appreciate it.\n<|/ c |>\n<| a tags=javascript,fizzbuzz |>\n\
    <code>\nvar a=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nvar b=['Fizz','Buzz','FizzBuzz'];\n\
    var c=['Fizz','Buzz','FizzBuzz'];\nvar d=[];\nvar i=0;\n\nfor (i=0;i<=a.length-1;i++){\n\
    \    if(i % 5 === 0){\n        d.push(a[i]);\n    } else if (a[i] % 3 === 0){\n\
    \        d.push(b[i]);\n    } else {\n        d.push(c[i]);\n    }\n}", "\tfor(var\
    \ i=0; i<= n; i++){\n\t\tif(i%3==0 && (i%5==0 || i%7==0)){\n\t\t\tconsole.log(i);\n\
    \t\t}\n\t\telse{\n\t\t\tconsole.log(i);\n\t\t}\n\t}\n}\n", "\tlet count = 0;\n\
    \tfor (let i = 0; i <= n / 11 && i <= n / 13; i++){\n\t\tif ((n % 11) === 0 ||\
    \ n % 13 === 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "\treturn Math.ceil(Math.log(n)/Math.LN10)\
    \ + 1;\n}\n", "  var result = 0;\n  while(n){\n    result += n % 10 == 0 ? 0 :\
    \ 1;\n    n /= 10;\n  }\n  return result;\n}\n", "    if(n%11 == 0){\n       \
    \ return fizz_buzz(n/11)+7;\n    }\n    if(n%13 == 0){\n        return fizz_buzz(n/13)+7;\n\
    \    }\n    return 1;\n}\n</code>\n<|/ a tags=recursion,javascript |>\n<| a dscore=1\
    \ |>\nThis solution is for those who don't want using BigInt, but use string instead.\
    \ \nThe string '7' can be replaced with a custom array of numbers to replace '7'\
    \ with. \n<code>", "  let counter = 0;\n  while(n){\n    counter += n % 7 ===\
    \ 0 ? 0 : 1;\n    n = Math.floor(n / 10);\n  }\n  return counter;\n}\n", "  return\
    \ n%11==0 && n%13==0 ? 0 : n%11 > n && n%13 > 0 ? 2 : 0;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThank you, this is so much simpler and more elegant.  However, I'm still\
    \ stuck on my solution. I cannot figure out how to make it so that when a user\
    \ enters something less than the smallest number possible, that it just prints\
    \ out an asterisk.  It just skips right over that check and just prints out the\
    \ asterisk.  I don't understand why it isn't working the way I want it too.\n\
    <|/ c |>\n<| c |>\nIt turns out that I can get it to work by using || instead\
    \ of &&.  It doesn't matter if they're both true or both false (they both print\
    \ out asterisks anyways), but I just need it to print out the asterisk when both\
    \ conditions are true.  Thanks for your help!\n<|/ c |>\n<| c |>\nWhat you did\
    \ is very interesting.  It seems like it just checks to see if the value is less\
    \ than the smallest, and then it checks if both values are greater than or equal\
    \ to the value.  For some reason, I can't get the conditional expression to work\
    \ the way I want it to.  I appreciate your help, though!\n<|/ c |>\n<| c |>\n\
    I've been trying to figure out how to write this all wrong! I really didn't think\
    \ about putting them in order and just doing it that way.  That works perfectly.\
    \  Thank you so much!\n<|/ c |>\n<| a |>\nAs JamieC suggested, this problem can\
    \ be solved by using a while loop.  However, I wanted to do it in one line of\
    \ code because I wanted to learn the new stuff.  I came up with a solution that\
    \ is less lines of code but still pretty complicated.  This is also less complicated\
    \ than the other solutions.  I'm pretty new to coding so I don't know if there's\
    \ some sort of way to shorten this code.  It doesn't seem to be as elegant as\
    \ JamieC's.  I appreciate any advice on how to shorten this code.  Thank you!\n\
    <code>\ndef fizz_buzz n\n    while n<1\n        if n%11==0 && n%13==0\n      \
    \      puts n\n        end\n        if n%11 > n && n%13 > 0\n            puts\
    \ n\n        end\n        if n%11 > n || n%13 > 0\n            puts '*'\n    \
    \    end\n    end\nend\n</code>\n<|/ a dscore=0 tags=ruby,if-statement,while-",
  "  if((n % 11) == 0){\n    if((n % 13) == 0){\n      return 0;\n    }\n    return\
    \ 2;\n  }\n  if((n % 13) == 0){\n    return 3;\n  }\n  return 2;\n}\n", "    var\
    \ count = 0;\n    for(var i=1; i<=n; i++){\n        if((i%3 == 0 || i%5 == 0)\
    \ && i%7 == 0){\n            count = count + 1;\n        }\n    }\n    return\
    \ count;\n}\n", "  if (n < 0) return -1;\n  if (n === 0) return 0;\n  if (n %\
    \ 11 === 0) return 1;\n  if (n % 13 === 0) return 2;\n  return 0;\n}\n", "  var\
    \ output = 0;\n  for(var i = 1;i <= n; i++){\n    if((i%11 == 0 || i%13 == 0)){\n\
    \      output++;\n    }\n  }\n  return output\n}\n", "  var count = 0;\n  for(var\
    \ i = n; i >= 0; i--){\n    if((n % (i+1)) == 0 || i == 11 || i == 13){\n    \
    \  count++;\n    }\n  }\n  return count;\n}\n</code>\n<|/ a tags=javascript,fizzbuzz\
    \ dscore=0 |>\n<| a tags=javascript,fizzbuzz |>\n<code>", "    // If n is divisible\
    \ by 11, return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11.\n    if (n % 11 == 0) return parseInt(n / 11, 10);\n\
    \    // If n is divisible by 13, return the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 13.\n    if (n % 13 == 0) return\
    \ parseInt(n / 13, 10);\n    // Return the number of times the digit 7 appears\
    \ in integers less than n which are divisible by both 11 and 13.\n    return parseInt(n\
    \ / 11, 10) + parseInt(n / 13, 10);\n}\n", "  var counter = 0;\n  while(n>0){\n\
    \    if (n%11 == 0 || n%13 == 0){\n      counter++;\n    }\n    n=n/11;\n  }\n\
    \  return counter;\n}\n</cell>\n<cell>", "  if(n<=1){\n    return n;\n  }\n  var\
    \ sum = 0, //Initialize sum with 0.\n      num = 0;\n  for(var i=1;i<=n;i++){\n\
    \    num = (n%i) === 0;\n    sum += num ? 0 : 1;\n  }\n  return sum;\n}", "  let\
    \ count=0\n  let num1 = Math.trunc(n/11)\n  let num2 = Math.trunc(n/13)\n  while(n>0){\n\
    \    if(n%11==0){\n      count++\n    }\n    else if(n%13==0){\n      count++\n\
    \    }\n    else{\n      n--\n    }\n  }\n  return count\n}\n", "  if(n%11==0\
    \ && n%13==0) return 0;\n  if(n%11==0) return 1;\n  if(n%13==0) return 2;\n}",
  "  return ((n & 0xF00) >> 8) + 2 + ((n & 0xF0) >> 4) + 1 + ((n & 0xF) << 4) + ((n\
    \ & 0xF00) >> 8)\n}\n", "  var count = 0;\n  while (n >= 1000) {\n    n = Math.floor(n\
    \ / 1000);\n    count++;\n  }\n  while (n >= 100) {\n    n = Math.floor(n / 100);\n\
    \    count++;\n  }\n  while (n >= 10) {\n    n = Math.floor(n / 10);\n    count++;\n\
    \  }\n  while (n >= 1) {\n    n = Math.floor(n);\n    count++;\n  }\n  return\
    \ count;\n}\n", "  var result = 0;\n  for(var i = n;i > 0;i /= 11 || i /= 13){\n\
    \    if( i % 11 == 0) result ++;\n    if( i % 13 == 0) result ++;\n  }\n  return\
    \ result;\n}", "  const result = Array.from(Array(Math.abs(n)).keys());\n  const\
    \ divisors = [11,13];\n  return result.filter((number)=>{\n    return number.toString().split('').reduce((a,b)=>a\
    \ * +b) % divisors.includes(n%divisors[0])||\n    number.toString().split('').reduce((a,b)=>a\
    \ * +b) % divisors.includes(n%divisors[1]);\n  }).length;\n}\n\nconst results\
    \ = [fizz_buzz(50), fizz_buzz(78), fizz_buzz(79)];\n", "  n = (+n).toString(10);\n\
    \  if(n < '4000000000'){\n    return 1;\n  }\n  if(n > '4000000000' && n < '7ffffffff'){\n\
    \    return 2;\n  }\n  if(n > '7ffffffff' && n < '80000000'){\n    return 3;\n\
    \  }\n  if(n > '80000000' && n < '900000000'){\n    return 4;\n  }\n  if(n > '900000000'){\n\
    \    return 5;\n  }\n}\n", "  if(n < 11 || n > 13){\n    return n;\n  }\n  else{\n\
    \    if((n%11 === 0) && (n%13 === 0)){\n      return (n/11)*11 + 1;\n    }\n \
    \   else if((n%11 === 0) && (n%13 !== 0)){\n      return (n/13)*13 + 1;\n    }\n\
    \    else if((n%11) !== 0){\n      return (n/11)*11;\n    }\n    else{\n     \
    \ return (n/13)*13;\n    }\n  }\n}\n", "  var count = 0;\n  while (n > 0){\n \
    \   n /= 10;\n    if (n % 11 === 0 || n % 13 === 0){\n      count++;\n    }\n\
    \  }\n  return count;\n}", "    if (n === 0) return 0;\n    if (n === 1) return\
    \ 1;\n    if (n === 2) return 1;\n    if (n % 11 === 0 && n % 13 === 0) return\
    \ 2;\n    if (n % 11 === 1 && n % 13 === 1) return 2;\n    if (n % 11 === 2 &&\
    \ n % 13 === 2) return 3;\n    if (n % 11 === 3 && n % 13 === 3) return 4;\n \
    \   if (n % 11 === 4 && n % 13 === 4) return 5;\n    if (n % 11 === 5 && n % 13\
    \ === 5) return 6;\n    if (n % 11 === 6 && n % 13 === 6) return 7;\n    if (n\
    \ % 11 === 7 && n % 13 === 7) return 8;\n    if (n % 11 === 8 && n % 13 === 8)\
    \ return 9;\n    if (n % 11 === 9 && n % 13 === 9) return 10;\n    if (n % 11\
    \ === 10 && n % 13 === 10) return 11;\n    if (n === 1) return 12;\n    return\
    \ n % 11 === 11 ? 13 : n % 11 === 12 ? 12 : 11\n}\n", "  let a = [...Array(n)].map((e,i)=>i%11\
    \ === 0 || i%13 === 0 ? 0 : 1\n    ).toArray()\n  return a.filter((e,i)=>i%7===0).length\n\
    }", "  if(n < 0) return 0;\n  if((n % 11 == 0) || (n % 13 == 0)) return 1;\n \
    \ if(n > 9) return 0;\n  for(var i = 9; i >= n; i--){\n    if(n % i == 0 || n\
    \ % (i + 10) == 0) return 1;\n  }\n  return 0;\n}\n", "  let count = 0;\n  if\
    \ (n % 11 == 0){\n    count = count + 1;\n  }\n  if (n % 13 == 0){\n    count\
    \ = count + 1;\n  }\n  return count;\n}\n", "  return (n%11===0 || n%13===0)?n:0;\n\
    }", "  var numDivisibleBy11 = 0\n  var numDivisibleBy13 = 0\n  \n  for (var i\
    \ = 7; i <= n; i++){\n    if(i%11==0){\n      numDivisibleBy11++\n    }\n    if(i%13==0){\n\
    \      numDivisibleBy13++\n    }\n  }\n  \n  return numDivisibleBy11 + numDivisibleBy13\n\
    }\n</cell>\n<cell>", "  return fizz_buzz_recursive(n,0);\n}\n", "  var count =\
    \ 0;\n  var remainder = n % 11;\n  if(n == 0) return count;\n  if((remainder ==\
    \ 0 || remainder == 11) && n%13 == 0)\n    count++;\n  if((remainder == 1 || remainder\
    \ == 11) && n%11 == 0)\n    count++;\n  if(n%13 == 0)\n    count++;\n  return\
    \ count;\n}", "    if (n%11==0 || n%13==0){\n        return 0;\n    }else{\n \
    \       return 1;\n    }\n}\n", "    if(n == 0){\n        return 0;\n    }\n \
    \   if(n%11 == 0){\n        return 1;\n    }\n    if(n%13 == 0){\n        return\
    \ 2;\n    }\n    return fizz_buzz(--n)\n}", "  var times = 0;\n  while ( n < 7\
    \ && (n % 11 || n % 13) ){\n      n++;\n      times++;\n  }\n  return times;\n\
    }\n", "    switch(n % 10){\n        case 7: return 0;\n        case 11: return\
    \ 1;\n        case 13: return 2;\n        default: return 3;\n    }\n}\n", " \
    \ if(n < 11 || n > 13){\n    return 0;\n  }\n  else{\n    return ((n%11)+((n%13)\
    \ === 0) ? 0 : 1)\n  }\n}</code>\n\n<code>", "  n = Number(n);\n  var count =\
    \ 0;\n  if ( (n % 11) == 0)\n    count++;\n  if ( (n % 13) == 0)\n    count++;\n\
    \  return count;\n}", "  var remainder = 0;\n  if(n % 11 == 0){\n    remainder\
    \ += 1;\n  }\n  if(n % 13 == 0){\n    remainder += 1;\n  }\n  if(remainder >=\
    \ 2){\n    return 2;\n  }\n  return 3;\n}\n", "  return Math.ceil(n/11) * 11 +\
    \ Math.ceil(n/13) * 13;\n}\n<|/ file source=github filename=FizzBuzz.js |>\nconst\
    \ fizz_buzz = (n) => {\n  const divs = [11, 13];\n  let count = 0;\n  for(let\
    \ i=0; i<n; i++){\n    let mod = i % (divs[i]*divs[i]);\n    if(mod === divs[i]){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n\nexport default fizz_buzz;",
  "  return Math.ceil(n/Math.pow(10,Math.ceil(Math.log(n)/Math.LN10)))*Math.pow(10,Math.ceil(Math.log(n)/Math.LN10))\n\
    }", "   var cnt=0;\n   for (var i=n; i>0; i--){\n     if ((i%11 == 0) || (i%13\
    \ == 0)){\n       cnt+=1;\n     }\n   }\n   return cnt;\n}\n", "  return (n%11==0\
    \ && n%13==0) ? 0 : (n%11!=0 || n%13!=0) ? 1 : 2;\n}", "  n = parseInt(n);\n \
    \ var count = 0;\n  while(n > 0){\n     if((n % 10) == 7 || (n % 11) == 7){ //If\
    \ the remainder of n divided by 10 is 7 or the remainder divided by 11 is 7\n\
    \        count++;\n     }\n     n = parseInt(n/10);\n  }\n  return count;\n}\n",
  "\tlet fizz_buzz_count = 0;\n\tlet integers = [];\n\tlet current_value = n;\n\t\
    let is_divisible_by_11 = (current_value % 11) == 0;\n\tlet is_divisible_by_13\
    \ = (current_value % 13) == 0;\n\twhile(current_value > 0){\n\t\tintegers.push(current_value);\n\
    \t\tcurrent_value = Math.floor(current_value / 10);\n\t}\n\tfor(let i = 0; i <\
    \ integers.length; i++){\n\t\tcurrent_value = integers[i];\n\t\tif(is_divisible_by_11){\n\
    \t\t\tif(current_value % 11 == 0){\n\t\t\t\tfizz_buzz_count++;\n\t\t\t}\n\t\t\
    }\n\t\tif(is_divisible_by_13){\n\t\t\tif(current_value % 13 == 0){\n\t\t\t\tfizz_buzz_count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn fizz_buzz_count;\n}", "  let count=0;\n  while(count<n\
    \ && n>0){\n    if((n%11)==7 || (n%13)==7){\n      count++;\n    }\n    n=n/11;\n\
    \  }\n  return count;\n}\n", "  if(n < 0) throw 'n must be non-negative';\n  if(n\
    \ === 0) return 0;\n  var count = 1;\n  while(n > 1){\n    if(n % 11 === 0) return\
    \ count + 1;\n    if(n % 13 === 0) return count + 2;\n    n = (n - 1) % 20;\n\
    \    count++;\n  }\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i<10; i++){\n\t\
    \tif (n%10 == i){\n\t\t\tif (i%11 == 0 || i%13 == 0){\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\n</cell>\n<cell>", "    var count = 0;\n   \
    \ while (n%11 == 0 || n%13 == 0){\n        if (n%11 != 0 && n%13 == 0)\n     \
    \       count ++;\n        n = Math.floor(n/10);\n    }\n    return count;\n}\n",
  "\tlet x = parseInt(String(Math.floor(n)).replace(/[^0-9]/g,\"\"));\n\treturn ((x+(x%11)===(x%13))?(x%11):0);\n\
    }\n", "  return Math.floor(n/13+1);\n}\n", "    if (n >= 11 || n >= 13){\n   \
    \     return 1;\n    }\n    else if (n % 11 === 0 || n % 13 === 0){\n        return\
    \ 0;\n    }\n    else{\n        return fizz_buzz(n % 11) + fizz_buzz(n % 13);\n\
    \    }\n}\n</code>\n<|/ a tags=javascript,fizzbuzz dscore=0 |>\n<| a dscore=0\
    \ tags=javascript,fizzbuzz |>\n<code>", "  return Math.ceil(n/11)%2 == 0 && (n%11\
    \ === 7) || Math.ceil(n/13)%2 === 0 && (n%13 === 7)? n : 0;\n}", "    if (n <\
    \ 0) return null;\n    if (n < 100) return (n >= 11) ? \"11\" : \"7\";\n    if\
    \ (n < 1000) return (n >= 13) ? \"13\" : \"8\";\n    return null;\n}", "    var\
    \ a = [];\n    for(var i=0;i<n;i++){\n        a.push(i%11 + i%13);\n    }\n  \
    \  a.sort(function(a, b){\n        return b-a;\n    });\n    return a.indexOf('7');\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    return Math.floor((n%11)%13)\
    \ + Math.floor((n%11)%11)+1;\n}\n", "    var count = 0;\n    for (var i = 0; i<\
    \ n; i+=10) {\n        if (i % 11 === 0)\n            count += 1;\n        if\
    \ (i % 13 === 0)\n            count += 1;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis won't work if n is 0 or 1.\n<|/ c |>\n<| c |>\n\
    `if (n % 11 === 0 || n % 13 === 0)` works just fine.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  var counter = 0;\n  while(n!=0){\n    if(n%11===0 || n%13===0){\n\
    \      counter++;\n    }\n    n=n/10;\n  }\n  return counter;\n}\n</cell>\n<text>\n\
    Write a function that returns true if a number has three or more consecutive digits\
    \ which are all the same digit. For example, 234 or 345.\n\n</text>\n<cell>",
  "  return n%11==0 || n%13==0 ? 0 : (n%11==1||n%13==1?1:0)+fizz_buzz(n/11)+fizz_buzz(n/13);\n\
    }", "    if(n == 0){\n        return 0\n    }\n    if(n%11 == 0 || n%13 == 0){\n\
    \        return 1\n    }\n    return fizz_buzz(n-1)\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++){\n    if (i % 11 == 0)\n      count += 1;\n  \
    \  if (i % 13 == 0)\n      count += 1;\n  }\n  return count;\n}\n", "    if(n<=0)\n\
    \       return 0;\n    if(n%11==0)\n        return 1;\n    if(n%13==0)\n     \
    \   return 2;\n    return fizz_buzz(n/11)+fizz_buzz(n/13)\n}\n</code>\n<|/ a tags=recursion,javascript\
    \ |>\n<| c |>\nI didn't think the other answer would work for a very large number,\
    \ but this one is very succinct.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if\
    \ (n < 11 || n > 13){\n        return 0;\n    }\n    return (Math.floor(n / 11)\
    \ % 2) + fizz_buzz(n - (Math.floor(n / 11)));\n}\n", "  n = n.toString();\n  if(n.length==1)\n\
    \    return 0;\n  if(n.length==2)\n    return parseInt(n[1])==7?2:0;\n  if(n.length==3)\n\
    \    return parseInt(n[2])==7?3:0;\n  if(n.length==4)\n    return parseInt(n[3])==7?4:0;\n\
    \  if(n.length==5)\n    return parseInt(n[4])==7?5:0;\n  if(n.length==6)\n   \
    \ return parseInt(n[5])==7?6:0;\n  if(n.length==7)\n    return parseInt(n[6])==7?7:0;\n\
    \  if(n.length==8)\n    return parseInt(n[7])==7?8:0;\n  if(n.length==9)\n   \
    \ return parseInt(n[8])==7?9:0;\n  if(n.length==10)\n    return parseInt(n[9])==7?10:0;\n\
    \  if(n.length==11)\n    return parseInt(n[10])==7?11:0;\n  if(n.length==12)\n\
    \    return parseInt(n[11])==7?12:0;\n  if(n.length==13)\n    return parseInt(n[12])==7?13:0;\n\
    \  return 0;\n}", "    var result = 0;\n    while (n>0){\n        if ((n%11)==0)\
    \ result++;\n        if ((n%13)==0) result++;\n        n/=13;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThat's not an answer\
    \ to the question. It would be better as a comment to the question.\n<|/ c |>\n\
    <| a dscore=1 tags=javascript |>\nI needed something similar and this is the best\
    \ way I could find to solve the problem while still getting decent performance.\n\
    I used the modulo operation for integer division as it seems to be the fastest\
    \ way to solve the problem.\n<code>\nvar fizzBuzz = function( number ){\n\n  \
    \  var result = 0;\n\n    if (number > 100){\n\n        for(var i = 0; i <= 100;\
    \ i++){\n            if( number % i === 0 ){\n                result++;\n    \
    \        }\n        }\n\n    }else{\n\n        for (var i = 10; i <= number; i++){\n\
    \            if( number % i === 0 ){\n                result++;\n            }\n\
    \        }\n    }\n\n    return result\n\n};\n</code>\n<|/ a |>\n<| a tags=javascript\
    \ |>\nA lot of the other answers use Math.pow which isn't very efficient. Using\
    \ a lookup table makes the code much faster.\n<code>", "    var i, nDigits;\n\
    \    nDigits = Math.floor(Math.log(n)/Math.LN10);\n    if(nDigits < 0){\n    \
    \    nDigits++;\n    }\n    for(i=1; i<=nDigits; i++){\n        if(n%(i+7)===0){\n\
    \            return i;\n        }\n    }\n    return n;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nWow, thanks a ton! This makes a lot of sense. I'll definitely use\
    \ this in the future.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nvar fizzBuzz = function(n)\
    \ {\n  var i = 1;\n  while (i <= n) {\n    if (n % i == 0) {\n      if (i % 11\
    \ == 0) {\n        return 'FizzBuzz';\n      } else if (i % 13 == 0) {\n     \
    \   return 'Fizz';\n      } else {\n        return i;\n      }\n    }\n    i++;\n\
    \  }\n  return n;\n};\n\nfizzBuzz(20); // => FizzBuzz\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a tags=javascript |>\nIf you're trying to print numbers from 1 to 100,\
    \ then:\n<code>", "  var count = 1;\n  while(n > 1){\n  if(n % 11 == 0){\n   \
    \ count++;\n  }\n  if(n % 13 == 0){\n    count++;\n  }\n  n--;\n}\n  return count;\n\
    }", "  var count = 0;\n  while(n > 1){\n    if (n % 11 == 0){\n      count++;\n\
    \    }\n    if (n % 13 == 0){\n      count++;\n    }\n    n = Math.floor(n / 10);\n\
    \  }\n  return count;\n}\n</code>\n<|/ a tags=javascript,fizzbuzz |>\n<| a tags=javascript,fizzbuzz\
    \ |>\n<code>", "  return Math.ceil(n/Math.pow(11,Math.floor(Math.log(n)/Math.LN10)))\
    \ + Math.ceil(n/Math.pow(13,Math.floor(Math.log(n)/Math.LN10))) - Math.ceil(n/Math.pow(11,Math.floor(Math.log(n)/Math.LN10)))\
    \ * Math.ceil(n/Math.pow(13,Math.floor(Math.log(n)/Math.LN10)))\n}\n", "  if(n<100)\
    \ return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0 ? 2 :\
    \ n%11==0||n%13==0 ? 3 : 4;\n  if(n<200) return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0\
    \ ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;\n  if(n<300) return n%11==0||n%13==0\
    \ ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;\n\
    \  if(n<400) return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0\
    \ ? 2 : n%11==0||n%13==0 ? 3 : 4;\n  if(n<500) return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0\
    \ ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;\n  if(n<600) return n%11==0||n%13==0\
    \ ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;\n\
    \  if(n<700) return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0\
    \ ? 2 : n%11==0||n%13==0 ? 3 : 4;\n  if(n<800) return n%11==0||n%13==0 ? 0 : n%11==0||n%13==0\
    \ ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;\n  if(n<900) return n%11==0||n%13==0\
    \ ? 0 : n%11==0||n%13==0 ? 1 : n%11==0||n%13==0 ? 2 : n%11==0||n%13==0 ? 3 : 4;",
  "  var count = 0;\n  if((n%11)===0) count+=1;\n  if((n%13)===0) count+=1;\n  return\
    \ count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
