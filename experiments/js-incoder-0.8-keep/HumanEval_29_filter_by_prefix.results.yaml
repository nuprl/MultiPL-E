name: HumanEval_29_filter_by_prefix
language: js
results:
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix.toUpperCase();\n    var strings_copy = strings.slice(0);\n\
    \    for(var i = 0; i < strings_copy.length; i++){\n        if(strings_copy[i].substring(0,\
    \ prefix.length) == prefix){\n            strings_copy.splice(i, 1);\n       \
    \ }\n    }\n    return strings_copy;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx' ]\n\nshould equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp5o98ph4c.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5o98ph4c.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            strings.splice(i, 1);\n            i--;\n        }\n  \
    \  }\n    return strings;\n}\n\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe' ]\n\nshould equal\n\
    \n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp_3u1uvhm.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3u1uvhm.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy',\
    \ 'john doe' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  const filtered = [];\n\n  for (let i = 0; i < strings.length; i++){\n\
    \    if (strings[i].startsWith(prefix)){\n      filtered.push(strings[i]);\n \
    \   }\n  }\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if (strings == null) {\n        strings = [];\n    }\n\n    if\
    \ (typeof prefix === 'undefined' || prefix === null ||\n        typeof prefix\
    \ !== 'string') {\n        throw new Error('Expected a string prefix, received\
    \ ' + prefix);\n    }\n\n    var match = function(item) {\n        return item.toLowerCase().indexOf(prefix.toLowerCase())\
    \ === 0;\n    };\n\n    return objects.filter(match);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt3rskh89.js:20\n    return objects.filter(match);\n    ^\n\nReferenceError:\
    \ objects is not defined\n    at filter_by_prefix (/tmp/tmpt3rskh89.js:20:5)\n\
    \    at test (/tmp/tmpt3rskh89.js:28:20)\n    at Object.<anonymous> (/tmp/tmpt3rskh89.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tprefix = prefix.toLowerCase();\n\tvar matches = [];\n\tfor(var i\
    \ = 0; i < strings.length; i++){\n\t\tvar str = strings[i];\n\t\tif(typeof str\
    \ === 'string'){\n\t\t\tif(str.indexOf(prefix) === 0){\n\t\t\t\tmatches.push(str);\n\
    \t\t\t}\n\t\t}else if(str instanceof Array){\n\t\t\tmatches = matches.concat(filter_by_prefix(str,\
    \ prefix));\n\t\t}\n\t}\n\treturn matches;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(el){\n        if(el.indexOf(prefix)\
    \ === 0){\n            return true;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(elem){\n        return (elem.substring(0,\
    \ prefix.length) === prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    strings.forEach(function (string){\n \
    \       if (string.slice(0, prefix.length) == prefix) {\n            filtered.push(string);\n\
    \        }\n    });\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered = strings.filter(function(string){\n\t\treturn string.indexOf(prefix)\
    \ === 0;\n\t});\n\treturn filtered.length > 0 ? filtered : false;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpybupeo1n.js:18:10)\n    at Object.<anonymous> (/tmp/tmpybupeo1n.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return _.filter(strings, function(x){\n        return x.substr(0,\
    \ prefix.length) === prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5eayuuiq.js:7\n    return _.filter(strings, function(x){\n    ^\n\
    \nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmp5eayuuiq.js:7:5)\n\
    \    at test (/tmp/tmp5eayuuiq.js:17:20)\n    at Object.<anonymous> (/tmp/tmp5eayuuiq.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(string){\n\t\treturn string.substr(0,\
    \ prefix.length) === prefix;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var ret = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].substring(0, prefix.length) == prefix){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(s => s.startsWith(prefix))\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function (i){\n        return i.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(s){\n    return s.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    \n    strings.forEach(function(s){\n\
    \        if(s.startsWith(prefix))\n            filtered_strings.push(s);\n   \
    \ });\n    \n    return filtered_strings;\n}\n</cell>\n<cell>\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6b73wsu0.js:16\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tprefix = prefix.toLowerCase();\n\tvar filtered_strings = [];\n\t\
    for (var i=0;i<strings.length;i++){\n\t\tif (strings[i].indexOf(prefix) === 0){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if(prefix === ''){\n        return strings;\n    }\n    var is_str_list\
    \ = (typeof strings === 'string') ? true : false;\n    if(!is_str_list){\n   \
    \     throw new Error('filter_by_prefix() expects a string or a list of strings\
    \ as input');\n    }\n    var new_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            new_strings.push(strings[i]);\n\
    \        }\n    }\n    return new_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwwslz_i4.js:12\n        throw new Error('filter_by_prefix() expects\
    \ a string or a list of strings as input');\n        ^\n\nError: filter_by_prefix()\
    \ expects a string or a list of strings as input\n    at filter_by_prefix (/tmp/tmpwwslz_i4.js:12:15)\n\
    \    at test (/tmp/tmpwwslz_i4.js:28:20)\n    at Object.<anonymous> (/tmp/tmpwwslz_i4.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tlet filtered_strings = [];\n\tfor(let i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].substring(0, prefix.length) === prefix){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tstrings.splice(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn strings;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe' ]\n\nshould equal\n\
    \n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpqd2vzjsr.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqd2vzjsr.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy',\
    \ 'john doe' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if(prefix == '') return strings\n  var newStrings = []\n  for (var\
    \ i = 0; i < strings.length; i++)\n    if (strings[i].substring(0, prefix.length)\
    \ == prefix)\n      newStrings.push(strings[i])\n  return newStrings\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var new_list = []\n    for(var i = 0; i < strings.length; i++){\n\
    \        var str = strings[i];\n        if(str.indexOf(prefix) === 0){\n     \
    \       new_list.push(str);\n        }\n    }\n    return new_list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered_list = [];\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tif (strings[i].substr(0, prefix.length) == prefix){\n\t\t\tfiltered_list.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function (string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(item){\n    return item.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(item){\n    return item.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  angular.forEach(strings, function(string){\n\
    \    if (string.indexOf(prefix) === 0)\n      filtered.push(string);\n  });\n\
    \  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf2frvd_b.js:8\n  angular.forEach(strings, function(string){\n \
    \ ^\n\nReferenceError: angular is not defined\n    at filter_by_prefix (/tmp/tmpf2frvd_b.js:8:3)\n\
    \    at test (/tmp/tmpf2frvd_b.js:20:20)\n    at Object.<anonymous> (/tmp/tmpf2frvd_b.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var ret = [];\n  for(var i = 0; i<strings.length; i++){\n    var\
    \ string = strings[i];\n    if(string.indexOf(prefix) === 0){\n      ret.push(string);\n\
    \    }\n  }\n  return ret;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered_strings = [];\n\tfor(var i=0, len = strings.length;\
    \ i < len; i++){\n\t\tif(strings.indexOf(strings[i]) === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxx', 'xxx' ]\n\nshould equal\n\n[ 'xxx',\
    \ 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpyw0t6qlz.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyw0t6qlz.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'xxx', 'xxx'\
    \ ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.slice(0, prefix.length)\
    \ === prefix;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var plen = prefix.length;\n    return strings.filter(function(e){\n\
    \        return e.substr(0, plen) === prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar strings_length = strings.length;\n\tif(strings_length == 0){\n\
    \t\treturn [];\n\t}\n\tvar first_substring_length = strings[0].length;\n\tfor(var\
    \ i = 0; i < strings_length; i++){\n\t\tvar substring_length = strings[i].length;\n\
    \t\tif(substring_length < first_substring_length){\n\t\t\tcontinue;\n\t\t}\n\t\
    \tif(substring_length > first_substring_length){\n\t\t\treturn [];\n\t\t}\n\t\t\
    for(var j = 0; j < first_substring_length; j++){\n\t\t\tif(strings[i].charAt(j)\
    \ != prefix.charAt(j)){\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\treturn strings;\n\
    }\nexports.filter_by_prefix = filter_by_prefix;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'xxx', 'xxxAAA',\
    \ 'xxx' ]\n    at test (/tmp/tmphrkoynw1.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphrkoynw1.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar out = [];\n\tfor (var i=0; i<strings.length; i++){\n\t\tif (strings[i].slice(0,\
    \ prefix.length) == prefix){\n\t\t\tout.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ out;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            strings.splice(strings.indexOf(string), 1);\n        }\n    });\n\
    \    return strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe', 'xxx' ]\n\n\
    should equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp11pblzcy.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp11pblzcy.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy', 'john doe', 'xxx' ],\n  expected:\
    \ [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  for (var i = 0; i < strings.length;\
    \ i++){\n    if (strings[i].indexOf(prefix) === 0){\n      filtered_strings.push(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){\n        return string.substr(0,\
    \ prefix.length) === prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var matches = [];\n    for(var i in strings){\n        if(strings[i].substring(0,\
    \ prefix.length) === prefix){\n            matches.push(strings[i]);\n       \
    \ }\n    }\n    return matches;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  for(var i=0, len=strings.length; i < len;\
    \ i++){\n    if(strings[i].indexOf(prefix) === 0){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var out = []\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0)\n      out.push(strings[i])\n  }\n  return out\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(word){\n        return word.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  strings.forEach(function(string){\n\
    \    if(string.slice(0, prefix.length) == prefix){\n      filtered_strings.push(string);\n\
    \    }\n  });\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(word){\n    return word.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix)\
    \ === 0){\n      strings.splice(i, 1);\n      i--;\n    }\n  }\n  return strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe' ]\n\nshould equal\n\
    \n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpgan_s4ho.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgan_s4ho.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy',\
    \ 'john doe' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar output = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\
    \tif(strings[i].indexOf(prefix) === 0)\n\t\t\toutput.push(strings[i]);\n\t}\n\t\
    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var re = new RegExp('^'+prefix+'\\\\w+');\n  return strings.filter(function(string){\n\
    \    return string.match(re);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxxAAA' ]\n\nshould equal\n\n[ 'xxx',\
    \ 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpfo6e1x_3.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfo6e1x_3.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'xxxAAA'\
    \ ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = strings.filter(function(string){\n    return\
    \ string.startsWith(prefix);\n  });\n  return filtered_strings;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return _.reject(strings, function(str){\n    return str.indexOf(prefix)\
    \ == 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpzuimuu3_.js:7\n  return _.reject(strings, function(str){\n  ^\n\
    \nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmpzuimuu3_.js:7:3)\n\
    \    at test (/tmp/tmpzuimuu3_.js:17:20)\n    at Object.<anonymous> (/tmp/tmpzuimuu3_.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tfor(var i in strings){\n\t\tvar string = strings[i];\n\t\tif(string.substring(0,\
    \ prefix.length) == prefix){\n\t\t\tstrings[i] = string; // Store the string\n\
    \t\t}\n\t}\n\treturn strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx' ]\n\nshould equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpvbd3m6x7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvbd3m6x7.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var re = new RegExp('^' + prefix + '([a-zA-Z0-9_]*)$');\n  return\
    \ strings.filter(function(str){\n    return re.test(str);\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var result = [];\n    strings.forEach(function(string){\n    \
    \    if (string.substr(0, prefix.length) == prefix) {\n            result.push(string);\n\
    \        }\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n\
    \        if (strings[i].indexOf(prefix) === 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tlet filtered_strings = [];\n\t\n\tfor (let i = 0; i < strings.length;\
    \ i++){\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\t\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].substring(0, prefix.length) == prefix){\n      filtered_strings.unshift(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\nexports.filter_by_prefix = filter_by_prefix;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            strings.splice(i--, 1);\n        }\n    }\n    return strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe' ]\n\nshould equal\n\
    \n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp6ggvkhuf.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ggvkhuf.js:24:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy',\
    \ 'john doe' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered = [];\n\tfor (var i = 0; i < strings.length; i++){\n\
    \t\tif (strings[i].substr(0, prefix.length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var result = []\n    for (var i = 0, len = strings.length; i <\
    \ len; i++){\n        var s = strings[i]\n        if (s.indexOf(prefix) === 0)\n\
    \            result.push(s)\n    }\n    return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) == 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(val){\n        return (val.indexOf(prefix)\
    \ === 0);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(item){\n        return item.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var p = new RegExp('^' + prefix + '\\\\b')\n\n    return strings.filter(function(word)\
    \ {\n        return p.test(word)\n    })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxx', 'xxx' ]\n\nshould equal\n\n[ 'xxx',\
    \ 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpzq6vqehu.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzq6vqehu.js:23:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'xxx', 'xxx'\
    \ ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(el){\n        return el.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(str){return str.startsWith(prefix);});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if(strings.length == 0){\n    return [];\n  }\n  var filtered_strings\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i = 0, len = strings.length;\
    \ i < len; i++){\n        var str = strings[i];\n        if(str.indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(str);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix || '';\n    return strings.filter(function(s){\n\
    \        return s.indexOf(prefix) === 0;\n    });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    for(var i = 0; i< strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0)\n            strings.splice(i, 1);\n    }\n    return strings;\n}\n\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe', 'xxx' ]\n\n\
    should equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp796gu_g6.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp796gu_g6.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy', 'john doe', 'xxx' ],\n  expected:\
    \ [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if(strings.length === 0) return [];\n  if(strings.length === 1)\
    \ return strings.filter(function(str){\n    return str.substr(0, prefix.length)\
    \ === prefix;\n  });\n  return strings.filter(function(str){\n    return str.substr(0,\
    \ prefix.length) === prefix;\n  }).map(function(str){\n    return str.substr(prefix.length);\n\
    \  });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '', 'AAA', '' ]\n\nshould equal\n\n[ 'xxx',\
    \ 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpcaujujg5.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcaujujg5.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'AAA',\
    \ '' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered = [];\n\t_.each(strings, function(string){\n\t\tif\
    \ (string.startsWith(prefix)){\n\t\t\tfiltered.push(string);\n\t\t}\n\t});\n\t\
    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpxw21w0t7.js:8\n\t_.each(strings, function(string){\n\t^\n\nReferenceError:\
    \ _ is not defined\n    at filter_by_prefix (/tmp/tmpxw21w0t7.js:8:2)\n    at\
    \ test (/tmp/tmpxw21w0t7.js:21:20)\n    at Object.<anonymous> (/tmp/tmpxw21w0t7.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    strings.forEach(function(string) {\n        if(string.startsWith(prefix)){\n\
    \            strings.splice(strings.indexOf(string), 1);\n        }\n    });\n\
    \    return strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe', 'xxx' ]\n\n\
    should equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp5zly2xh6.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5zly2xh6.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy', 'john doe', 'xxx' ],\n  expected:\
    \ [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){ return string.startsWith(prefix)\
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tif(!strings) return [];\n\tvar ret = [];\n\tfor(var i = 0; i < strings.length;\
    \ i++){\n\t\tif( strings[i].indexOf(prefix) == 0 ) ret.push(strings[i]);\n\t}\n\
    \treturn ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  strings.forEach(function(string){\n\
    \    if(string.startsWith(prefix)){\n      filtered_strings.push(string);\n  \
    \  }\n  });\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\
    \tvar string = strings[i];\n\t\tif(string.indexOf(prefix) === 0){\n\t\t\tresult.push(string);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var matches = [];\n  for (var i = 0; i < strings.length; i++){\n\
    \    if (strings[i].indexOf(prefix) === 0){\n      matches.push(strings[i]);\n\
    \    }\n  }\n  return matches;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tprefix = prefix.toLowerCase();\n\tvar matching_strings = [];\n\t\
    _.each(strings, function(string){\n\t\tif( string.startsWith(prefix) ){\n\t\t\t\
    matching_strings.push(string);\n\t\t}\n\t});\n\treturn matching_strings;\n}\n\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz1p7x5tg.js:9\n\t_.each(strings, function(string){\n\t^\n\nReferenceError:\
    \ _ is not defined\n    at filter_by_prefix (/tmp/tmpz1p7x5tg.js:9:2)\n    at\
    \ test (/tmp/tmpz1p7x5tg.js:23:20)\n    at Object.<anonymous> (/tmp/tmpz1p7x5tg.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(x){return x.indexOf(prefix) ===\
    \ 0;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    strings = strings || [];\n    prefix = prefix || '';\n    return\
    \ strings.filter(function(str){\n        return str.slice(0, prefix.length) ===\
    \ prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered_strings = [];\n\t\n\tfor(var i=0; i<strings.length;\
    \ i++){\n\t\tvar string = strings[i];\n\t\tif(string.substr(0, prefix.length)\
    \ == prefix){\n\t\t\tfiltered_strings.push(string);\n\t\t}\n\t}\n\t\n\treturn\
    \ filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix || '';\n    var filtered_strings = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        var string = strings[i];\n       \
    \ if(string.indexOf(prefix) === 0){\n            filtered_strings.push(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(value){\n        return value.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if(!prefix || !strings || !strings.length){\n    return [];\n  }\n\
    \n  strings = strings.map(function(str){\n    return str.trim();\n  });\n\n  var\
    \ filtered_strings = [];\n\n  strings.forEach(function(str){\n    if(str.indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(str);\n    }\n  });\n\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if(!prefix || prefix.length == 0)\n        return strings;\n\n\
    \    return strings.filter(function(str){\n        return (str.substr(0, prefix.length)\
    \ == prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix || '';\n    var output = [];\n    for(var i =\
    \ 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.substr(0,\
    \ prefix.length) === prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(string){\n\t\treturn string.indexOf(prefix)\
    \ == 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function (string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0\n    })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var matches = [];\n  strings.forEach(function(str){\n    if (str.indexOf(prefix)\
    \ === 0){\n      matches.push(str);\n    }\n  });\n  return matches;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return _.filter(strings, function match_prefix (string){\n    return\
    \ string.startsWith(prefix);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7y688f6z.js:7\n  return _.filter(strings, function match_prefix\
    \ (string){\n  ^\n\nReferenceError: _ is not defined\n    at filter_by_prefix\
    \ (/tmp/tmp7y688f6z.js:7:3)\n    at test (/tmp/tmp7y688f6z.js:17:20)\n    at Object.<anonymous>\
    \ (/tmp/tmp7y688f6z.js:21:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var out = [];\n  for(var i=0; i< strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      out.push(strings[i]);\n    }\n  }\n  return out;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var newStrings = [];\n  for(var i in strings){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      newStrings.push(strings[i]);\n    }\n  }\n  return newStrings;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if (strings.length <= 0) return strings;\n\n  prefix = prefix.toLowerCase();\n\
    \n  return strings.filter(function(string){\n    return string.substr(0, prefix.length)\
    \ === prefix;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var result = [];\n    angular.forEach(strings, function(string){\n\
    \        var index = string.indexOf(prefix);\n        if(index > -1){\n      \
    \      result.push(string);\n        }\n    });\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzwhg0h9m.js:8\n    angular.forEach(strings, function(string){\n\
    \    ^\n\nReferenceError: angular is not defined\n    at filter_by_prefix (/tmp/tmpzwhg0h9m.js:8:5)\n\
    \    at test (/tmp/tmpzwhg0h9m.js:22:20)\n    at Object.<anonymous> (/tmp/tmpzwhg0h9m.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tif(strings[i].substr(0, prefix.length) == prefix){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return $.grep(strings, function(str) {\n        return str.slice(0,\
    \ prefix.length) == prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfbj6ff3j.js:7\n    return $.grep(strings, function(str) {\n   \
    \ ^\n\nReferenceError: $ is not defined\n    at filter_by_prefix (/tmp/tmpfbj6ff3j.js:7:5)\n\
    \    at test (/tmp/tmpfbj6ff3j.js:17:20)\n    at Object.<anonymous> (/tmp/tmpfbj6ff3j.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var newStrings = [];\n  for (var i = 0; i < strings.length; i++)\
    \ {\n    var string = strings[i];\n    if (string.indexOf(prefix) === 0) {\n \
    \     newStrings.push(string);\n    }\n  }\n  return newStrings;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  prefix = prefix || '';\n  var output = [];\n  for (var i = 0; i\
    \ < strings.length; i++){\n    if (typeof strings[i] === 'string'){\n      if\
    \ (strings[i].indexOf(prefix) === 0){\n        output.push(strings[i]);\n    \
    \  }\n    }\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0)\n            strings.splice(i, 1);\n    }\n    return strings;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe', 'xxx' ]\n\n\
    should equal\n\n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmp956q0f7t.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp956q0f7t.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy', 'john doe', 'xxx' ],\n  expected:\
    \ [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    strings.forEach(function(element){\n \
    \       if (element.startsWith(prefix))\n            filtered.push(element);\n\
    \    });\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar re = new RegExp(\"^\"+prefix);\n\tvar matches = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tvar string = strings[i];\n\t\tif(string.search(re)\
    \ == 0){\n\t\t\tmatches.push(string);\n\t\t}\n\t}\n\treturn matches;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        var str = strings[i];\n        if(str.indexOf(prefix) === 0){\n     \
    \       filtered.push(str);\n        }\n    }\n    return filtered;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tvar str = strings[i];\n\t\tvar start_i = str.indexOf(prefix);\n\t\tif(start_i\
    \ === 0)\n\t\t\tfiltered.push(str);\n\t\telse if(start_i !== -1)\n\t\t\tfiltered.push(str.substr(0,\
    \ start_i));\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(x){ return x.startsWith(prefix);\
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  if(strings){\n    for(var i = 0; i\
    \ < strings.length; i++){\n      if(strings[i].indexOf(prefix) === 0)\n      \
    \  filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  for (var i = 0; i < strings.length;\
    \ i++){\n    var str = strings[i];\n    if (str.substring(0, prefix.length) ==\
    \ prefix){\n      filtered_strings.push(str);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(i){ return i.startsWith(prefix);\
    \ });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if (!strings) {\n        return [];\n    }\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string) {\n        if (string.startsWith(prefix))\
    \ {\n            filtered_strings.push(string);\n        }\n    });\n    return\
    \ filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix)\
    \ === 0){\n      return strings[i];\n    }\n  }\n  return [];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'xxx'\n\nshould equal\n\n[ 'xxx', 'xxxAAA',\
    \ 'xxx' ]\n    at test (/tmp/tmpj_kckyrz.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj_kckyrz.js:24:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'xxx',\n \
    \ expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar result = [];\n\tstrings.forEach(function(el){\n\t\tif(el.indexOf(prefix)\
    \ === 0){\n\t\t\tresult.push(el);\n\t\t}\n\t});\n\treturn result;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    \n    return strings.filter(function(item){\n        return (item.indexOf(prefix)\
    \ === 0);\n    });\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tprefix = prefix || '';\n\tvar filtered_strings = [];\n\n\tstrings.forEach(function(item){\n\
    \t\tif(item.indexOf(prefix) === 0){\n\t\t\tfiltered_strings.push(item);\n\t\t\
    }\n\t});\n\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var returnList = [];\n    strings.forEach(function(string, index,\
    \ strings) {\n        if (string.startsWith(prefix)) {\n            returnList.push(string);\n\
    \        }\n    });\n    return returnList;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if(strings[i].substr(0,prefix.length) == prefix){\n         \
    \   filtered_strings.push(strings[i]);\n        }\n    }\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(el) {\n        return el.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var out = [];\n    strings.forEach(function(string) {\n      \
    \  if (string.startsWith(prefix)){\n            out.push(string);\n        }\n\
    \    });\n    return out;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var results = [];\n    for (var i = 0; i < strings.length; i++){\n\
    \        if (strings[i].indexOf(prefix) === 0){\n            results.push(strings[i]);\n\
    \        }\n    }\n    return results;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    const filtered_strings = strings.filter(function(string){\n  \
    \      return string.substr(0, prefix.length) === prefix;\n    });\n    return\
    \ filtered_strings;\n}\n</script>\n\n<script type=\"text/x-mathjax-config\">\n\
    \  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\\
    (\",\"\\\\)\"] ],\n      displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ],\n\
    \      processEscapes: true,\n      processEnvironments: true\n    },\n    TeX:\
    \ {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc:\
    \ '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n\
    \        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\\
    mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n    \
    \    by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\\
    mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\
    \\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers:\
    \ { autoNumber: 'AMS' }\n      }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\"\
    >\n  MathJax.Hub.Config({\n    \"HTML-CSS\": { scale: 90, linebreaks: { automatic:\
    \ true } },\n    TeX: { extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] }\n  });\n\
    </script>\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n\
    \    \"HTML-CSS\": { scale: 90, linebreaks: { automatic: true } },\n    TeX: {\
    \ extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] }\n  });\n</script>\n\n<script\
    \ type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n  \
    \    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      displayMath: [ ['$$','$$'],\
    \ [\"\\\\[\",\"\\\\]\"] ],\n      processEscapes: true,\n      processEnvironments:\
    \ true\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\
    \\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n     \
    \   bg: '\\\\mathbf{g\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpuifym5_d.js:12\n</script>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered_strings = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.startsWith(prefix)){\n\t\t\tfiltered_strings.push(string);\n\t\t\
    }\n\t});\n\treturn filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    const regex = new RegExp(prefix);\n    return strings.filter(string\
    \ => regex.test(string));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tif(!strings.length){ return []; }\n\tprefix = prefix.toLowerCase();\n\
    \tvar new_strings = [];\n\t\n\tfor(var i=0; i<strings.length; ++i){\n\t\tvar str\
    \ = strings[i];\n\t\tvar lower_str = str.toLowerCase();\n\t\tvar prefix_index\
    \ = lower_str.indexOf(prefix);\n\t\tif(prefix_index !== -1){\n\t\t\tnew_strings.push(str);\n\
    \t\t}\n\t}\n\t\n\treturn new_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  if (prefix == '') {\n    return strings\n  }\n  else {\n    var\
    \ prefix_length = prefix.length;\n    return strings.filter(function(string){\n\
    \      return string.substr(0, prefix_length) === prefix;\n    });\n  }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar result = [];\n\tfor(var i = 0, len = strings.length; i < len;\
    \ i++){\n\t\tvar string = strings[i];\n\t\tif(string.substr(0, prefix.length)\
    \ == prefix){\n\t\t\tresult.push(string);\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(string){\n\t\treturn string.indexOf(prefix)\
    \ === 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n</script>\n</head>\n<body>\n\n<div class=\"exercise\">\n<p class=\"\
    problem\">Click on this <span class=\"info\">problem</span> to see the solution.\n\
    <p><input id=\"input\" type=\"text\" value=\"\" size=\"20\"/>\n<p><input id=\"\
    submit\" type=\"button\" value=\"Submit\"/>\n</div>\n\n<div id=\"output\"></div>\n\
    \n<script>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw86dhq3f.js:11\n</script>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    \n    if ( !Array.isArray(strings) ) {\n        strings = [strings];\n\
    \    }\n    if ( !strings.length ) {\n        return [];\n    }\n    if ( typeof\
    \ prefix === 'undefined' || prefix === null ) {\n        return strings;\n   \
    \ }\n\n    var filtered_strings = [],\n        str = prefix,\n        str_index;\n\
    \n    for ( var i=0; i < strings.length; i++ ) {\n        \n        str_index\
    \ = strings[i].indexOf(str);\n        if ( str_index !== -1 ) {\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var out = [];\n    for (var i = 0; i < strings.length; i++){\n\
    \        if (strings[i].substr(0, prefix.length) == prefix){\n            out.push(strings[i]);\n\
    \        }\n    }\n    return out;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var output = [];\n    for (var i = 0; i < strings.length; i++){\n\
    \        if (strings[i].substr(0, prefix.length) == prefix){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function (s){\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  prefix = prefix.toLowerCase();\n  return strings.filter(function(str){\n\
    \    return str.startsWith(prefix);\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\t\
    if(strings[i].indexOf(prefix) === 0){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t\
    }\n\treturn ret;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix.toLowerCase();\n    return strings.filter(function(string){\n\
    \        return string.slice(0, prefix.length) == prefix;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(item){\n    return item.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar ret = [];\n\tstrings.forEach(function(string){\n\t\tif(string.indexOf(prefix)\
    \ == 0){\n\t\t\tret.push(string);\n\t\t}\n\t});\n\treturn ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar filtered = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\t\
    if((strings[i].indexOf(prefix) === 0) && (strings[i] !== prefix)){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'xxxAAA' ]\n\nshould equal\n\n[ 'xxx',\
    \ 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmpsovxbbvn.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsovxbbvn.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'xxxAAA'\
    \ ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return $.grep(strings, function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt2ihw1nr.js:7\n    return $.grep(strings, function(string){\n \
    \   ^\n\nReferenceError: $ is not defined\n    at filter_by_prefix (/tmp/tmpt2ihw1nr.js:7:5)\n\
    \    at test (/tmp/tmpt2ihw1nr.js:18:20)\n    at Object.<anonymous> (/tmp/tmpt2ihw1nr.js:22:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if(!prefix){\n        return strings;\n    }\n    return objects.filter(function(word){\n\
    \        return word.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjq1kemfd.js:10\n    return objects.filter(function(word){\n   \
    \ ^\n\nReferenceError: objects is not defined\n    at filter_by_prefix (/tmp/tmpjq1kemfd.js:10:5)\n\
    \    at test (/tmp/tmpjq1kemfd.js:20:20)\n    at Object.<anonymous> (/tmp/tmpjq1kemfd.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var new_strings = []\n  strings.forEach(function(str){\n    if(str.startsWith(prefix)){\n\
    \      new_strings.push(str)\n    }\n  })\n  return new_strings\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    var str = strings[i];\n    if(str.substr(0, prefix.length) == prefix){\n\
    \      filtered.push(str);\n    }\n  }\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].substr(0, prefix.length) == prefix){\n      filtered_strings.push(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return objects.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpy2fjqen_.js:7\n    return objects.filter(function(string){\n  \
    \  ^\n\nReferenceError: objects is not defined\n    at filter_by_prefix (/tmp/tmpy2fjqen_.js:7:5)\n\
    \    at test (/tmp/tmpy2fjqen_.js:17:20)\n    at Object.<anonymous> (/tmp/tmpy2fjqen_.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(item){\n\t\treturn (item.indexOf(prefix)\
    \ === 0);\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  strings.forEach(function(str){\n    if(str.substr(0,\
    \ prefix.length) == prefix){\n      filtered.push(str);\n    }\n  });\n  return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var results = [];\n    strings.forEach(function(str){\n      \
    \  var startsWith = str.substring(0, prefix.length) === prefix;\n        if(startsWith){\n\
    \            results.push(str);\n        }\n    });\n    return results;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(item){\n    return item.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        var string = strings[i];\n        if(string.slice(0, prefix.length) ===\
    \ prefix){\n            result.push(string);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(string){\n\t\treturn string.indexOf(prefix)\
    \ === 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return objects.filter(function (string) {\n        return (\n\
    \            (string.startsWith(prefix)) ?\n                true :\n         \
    \       false\n            );\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmce2g1ky.js:7\n    return objects.filter(function (string) {\n\
    \    ^\n\nReferenceError: objects is not defined\n    at filter_by_prefix (/tmp/tmpmce2g1ky.js:7:5)\n\
    \    at test (/tmp/tmpmce2g1ky.js:21:20)\n    at Object.<anonymous> (/tmp/tmpmce2g1ky.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return filter(filter(strings.split(' '), function(string){return\
    \ string.slice(0, prefix.length) === prefix;}),\n                function(string){return\
    \ string.length > prefix.length;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjtfavm6p.js:7\n    return filter(filter(strings.split(' '), function(string){return\
    \ string.slice(0, prefix.length) === prefix;}),\n    ^\n\nReferenceError: filter\
    \ is not defined\n    at filter_by_prefix (/tmp/tmpjtfavm6p.js:7:5)\n    at test\
    \ (/tmp/tmpjtfavm6p.js:16:20)\n    at Object.<anonymous> (/tmp/tmpjtfavm6p.js:20:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function (string){\n\t\treturn string.substr(0,\
    \ prefix.length) == prefix;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar re = new RegExp('^' + prefix);\n\tvar result = [];\n\tvar i;\n\
    \n\tfor(i = 0; i < strings.length; i++){\n\t\tif(re.test(strings[i])){\n\t\t\t\
    result.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var result = [];\n  for(var i = 0; i < strings.length; i++){\n \
    \   if(strings[i].indexOf(prefix) == 0){\n      result.push(strings[i]);\n   \
    \ }\n  }\n  return result;\n};\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].substring(0, prefix.length) === prefix){\n    \
    \        filtered_strings.push( strings[i] );\n        }\n    }\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return _.filter(strings, function(string){\n        return string.substr(0,\
    \ prefix.length) == prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbv5phq4q.js:7\n    return _.filter(strings, function(string){\n\
    \    ^\n\nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmpbv5phq4q.js:7:5)\n\
    \    at test (/tmp/tmpbv5phq4q.js:17:20)\n    at Object.<anonymous> (/tmp/tmpbv5phq4q.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].substr(0, prefix.length) == prefix) filtered.push(strings[i]);\n\
    \    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var filtered_strings = [];\n    for(var i = 0; i< strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            filtered_strings.push(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\n</code>\n<|/ a |>\n<| a |>\n\
    Here is an alternative implementation using underscore and ramda.\n<code>\nconst\
    \ filterByPrefix = R.pipe(\n  R.filter(R.includes('a')),\n  R.map(R.split('a'))\n\
    )\n\nfilterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpddep1q49.js:15\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n</script>\n\n<div class=\"cell border-box-sizing text_cell rendered\"\
    >\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div\
    \ class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Filtering by\
    \ list membership is another useful operation in Python: it gives the indices\
    \ of all elements that satisfy a certain condition.  As a simple example, let's\
    \ find all the words in our list that start with 'a':</p>\n\n</div>\n</div>\n\
    </div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n\
    <div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[14]:</div>\n\
    <div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight\
    \ hl-ipython3\"><pre><span></span><span class=\"n\">words</span> <span class=\"\
    o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"\
    n\">word_list</span><span class=\"p\">)</span>\n<span class=\"n\">a_words</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">filter_by_prefix</span><span class=\"\
    p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"\
    s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">words</span>\n\
    </pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div\
    \ class=\"output\">\n\n\n<div class=\"output_area\">\n<div class=\"prompt output_prompt\"\
    >Out[14]:</div>\n\n\n\n<div class=\"output_text output_subarea output_execute_result\"\
    >\n<pre>[&#39;aardvark&#39;,\n &#39;abacus&#39;,\n &#39;abbess&#39;,\n &#39;abbey&#39;,\n\
    \ &#39;abbot&#39;,\n &#39;abdomen&#39;,\n &#39;abduce&#39;,\n &#39;abductor&#39;,\n\
    \ &#39;abe&#39;,\n &#39;abelian&#39;,\n &#39;aberrant&#39;,\n &#39;abhor&#39;,\n\
    \ &#39;abhorrent&#39;,\n &#39;abhorrently&#39;,\n &#39;abilities&#39;,\n &#39;ability&#39;,\n\
    \ &#39;abject&#39;,\n &#39;abjure&#39;,\n &#39;abjuration&#39;,\n &#39;abjured&#39;,\n\
    \ &#39;abjurement&#39;,\n &#39;abjurer&#39;,\n &#39;ablate&#39;,\n &#39;ablatement&#39;,\n\
    \ &#39;ablates&#39;,\n &#39;ablation&#39;,\n &#39;ablative&#39;,\n &#39;ablaut&#39;,\n\
    \ &#39;ablution&#39;,\n &#39;ablutor&#39;,\n &#39;abnegate&#39;,\n &#39;abnegation&#39;,\n\
    \ &#39;abnegator&#39;,\n &#39;aboard&#39;,\n &#39;abode&#39;,\n &#39;aboriginal&#39;,\n\
    \ &#39;aborigine&#39;,\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp10lta8av.js:11\n</script>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix || '';\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var new_list = [];\n  \n  strings.forEach(function(string){\n  \
    \  if(string.indexOf(prefix) === 0){\n      new_list.push(string);\n    }\n  });\n\
    \n  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return _(strings).filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpjpajdzd2.js:7\n  return _(strings).filter(function(str){\n  ^\n\
    \nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmpjpajdzd2.js:7:3)\n\
    \    at test (/tmp/tmpjpajdzd2.js:17:20)\n    at Object.<anonymous> (/tmp/tmpjpajdzd2.js:21:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    prefix = prefix || '';\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    if (strings.length <= 1) return [];\n    if (!prefix) return strings;\n\
    \    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered_strings = [];\n  strings.forEach(function(string) {\n\
    \    if (string.startsWith(prefix)) {\n      filtered_strings.push(string);\n\
    \    }\n  });\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  strings.forEach(function(str){\n    if (str.indexOf(prefix)\
    \ === 0) filtered.push(str);\n  });\n  return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var new_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            new_strings.push(strings[i]);\n\
    \        }\n    }\n    return new_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var res = [];\n\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            res.push(strings[i]);\n\
    \        }\n    }\n\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var ret = [];\n    for(var i = 0; i &lt; strings.length; i++){\n\
    \        if(strings[i].substring(0, prefix.length) === prefix){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1lt4i8r2.js:8\n    for(var i = 0; i &lt; strings.length; i++){\n\
    \                                        ^\n\nSyntaxError: Unexpected token ';'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.substr(0, prefix.length)\
    \ == prefix;\n  });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var filtered = [];\n  \n  strings.forEach(function (string){\n \
    \   if (string.startsWith(prefix)){\n      filtered.push(string);\n    }\n  });\n\
    \  \n  return filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  const filtered_strings = [];\n  strings.forEach((string) => {\n\
    \    if(string.startsWith(prefix)){\n      filtered_strings.push(string)\n   \
    \ }\n  });\n  return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tif(!strings || !prefix)\n\t\treturn [];\n\n\tvar filtered = [];\n\
    \tfor(var i = 0, l = strings.length; i < l; i++){\n\t\tvar str = strings[i];\n\
    \t\tvar len = str.indexOf(prefix);\n\t\tif(len != 0){\n\t\t\tfiltered.push(str);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'asd', 'xxy', 'john doe' ]\n\nshould equal\n\
    \n[ 'xxx', 'xxxAAA', 'xxx' ]\n    at test (/tmp/tmphoe60x_y.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphoe60x_y.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asd', 'xxy',\
    \ 'john doe' ],\n  expected: [ 'xxx', 'xxxAAA', 'xxx' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\treturn strings.filter(function(val){\n\t\treturn val.indexOf(prefix)\
    \ === 0;\n\t});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(elem){\n    return elem.indexOf(prefix)\
    \ === 0;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var ret = [];\n  strings.forEach(function(string) {\n    if (string.indexOf(prefix)\
    \ == 0) {\n      ret.push(string);\n    }\n  });\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var matches = [];\n    strings.forEach(function(item){\n     \
    \   if(item.indexOf(prefix) === 0){\n            matches.push(item);\n       \
    \ }\n    });\n    return matches;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\
    \tif(strings[i].indexOf(prefix) === 0){\n\t\t\tresult.push(strings[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n    var ret = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
    \ prefix){\n  var newStrings = strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n  return newStrings;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
