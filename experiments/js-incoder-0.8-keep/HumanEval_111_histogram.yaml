name: HumanEval_111_histogram
language: js
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n//\
  \ histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
  \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
  a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
  r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b\
  \ b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\"\
  : 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
  a\"),{\"a\": 1});\n}\n\ntest();"
completions: ["  var counts = test.split(' ').map(function(x){\n    return {x: x,\
    \ count: 1}\n  }).reduce(function(o, x){\n    return o[x.x] = x.count > 1 ? x.count\
    \ : o[x.x], o\n  }, {})\n\n  for (var key in counts) return counts[key] === 1\
    \ ? key : null\n\n  return counts\n}\n", "\tvar letters = test.split(\" \").sort(function\
    \ (a,b) {\n\t\treturn b.length - a.length;\n\t});\n\treturn {\n\t\tcount: function(letter){\n\
    \t\t\treturn letters.filter(function(e) {return e == letter}).length;\n\t\t},\n\
    \t\tletters: letters\n\t};\n}\n", "  var words = test.split(/\\s+/);\n  var result\
    \ = {};\n  var currentLetter;\n  var currentCount = 0;\n  for (var i = 0; i <\
    \ words.length; i++){\n    currentLetter = words[i];\n    currentCount += 1;\n\
    \    if (result[currentLetter]){\n      result[currentLetter]++;\n    } else {\n\
    \      result[currentLetter] = 1;\n    }\n  }\n  var maxCount = 1;\n  var maxLetter;\n\
    \  for (var key in result){\n    if (result[key] > maxCount){\n      maxCount\
    \ = result[key];\n      maxLetter = key;\n    }\n  }\n  return {maxLetter: maxLetter,\
    \ maxCount: maxCount};\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat if i were\
    \ to do the same thing for only characters and not a word like in my example above?\
    \ Is it possible to do this without regex? I know that this is kind of the same\
    \ as doing the same with regex, but I'm trying to do this without it for practice.\
    \ Any suggestions?\n<|/ c |>\n<| c |>\nI edited my question above to show how\
    \ I did it using regex and i would like to do the same thing using characters.\
    \ Any suggestions?\n<|/ c |>\n<| c |>\nSure, please check my answer\n<|/ c |>\n\
    <| c |>\nOkay, thank you very much for your help. If you have time could you please\
    \ explain what the code is doing? If you could explain it for me that would be\
    \ great. Thanks again!\n<|/ c |>\n<| c |>\nI added some comments in the code to\
    \ help you understand. I hope that helps\n<|/ c |>\n<| a tags=arrays,javascript\
    \ |>\nHere's a solution using array.reduce which can be replaced by Array.forEach\
    \ for browsers that don't support Array.reduce.\n\n<code>\nconst histogram = test\
    \ =>\n  test\n    .split(' ')\n    .map((letter, index) => ({letter, count: +index}))\n\
    \    .sort((a, b) => a.count - b.count)\n    .reduce((a, {letter, count}) => {\n\
    \      const index = a.findIndex(el => el.letter === letter);\n      if (index\
    \ > -1) {\n        a[index].count += count;\n      } else {\n        a.push({\
    \ letter, count });\n      }\n      return a;\n    }, [])\n    .map(({letter,\
    \ count}) => letter + count)\n    .join(' ');\n", "  if(test.indexOf(' ') >= 0)\
    \ {\n    var words = test.split(' ')\n    var counts = {}\n\n    for (var i in\
    \ words) {\n      var word = words[i]\n      var count = 1\n\n      for (var j\
    \ = i + 1; j < words.length; j++) {\n        var compare = words[j]\n\n      \
    \  if(compare.toLowerCase() === word.toLowerCase()) {\n          count++\n   \
    \     }\n      }\n\n      counts[word] = count\n    }\n\n    return counts\n \
    \ }\n\n  return {}\n}\n", "\tvar max = {};\n\tfor(var i = 0; i< test.length; i++){\n\
    \t\tvar letter = test.charAt(i);\n\t\tif(max[letter] == null || max[letter] >\
    \ ++max[letter]) max[letter] = 1;\n\t\telse if(max[letter] > max[test.charAt(i-1)])\
    \ max[letter] = max[test.charAt(i-1)];\n\t}\n\treturn max;\n}\n", "  var hist\
    \ = {};\n  var testArr = test.split(' ');\n  for(var i=0;i<testArr.length;i++){\n\
    \    if(testArr.indexOf(testArr[i]) < i){\n      delete hist[testArr[i]];\n  \
    \  }else{\n      if(hist[testArr[i]]){\n        hist[testArr[i]] += 1;\n     \
    \ }else{\n        hist[testArr[i]] = 1;\n      }\n    }\n  }\n  return hist;\n\
    }\n", "\tconst dictionary = {};\n\ttest.split(' ').forEach(letter => {\n\t\tdictionary[letter]\
    \ = (dictionary[letter] || 0) + 1;\n\t});\n\tconst maxValues = Object.entries(dictionary).map(\n\
    \t\t([key, value]) => key\n\t);\n\treturn maxValues.reduce(\n\t\t(acc, value)\
    \ => {\n\t\t\tacc[value] = acc[value] || 0;\n\t\t\tacc[value] += 1;\n\t\t\treturn\
    \ acc;\n\t\t},\n\t\t{}\n\t);\n}\n", "    let alphabet = test.split('').sort();\n\
    \    let histo = {};\n    for(let i = 0; i<alphabet.length; i++){\n        histo[alphabet[i]]\
    \ = histo[alphabet[i]] || 0;\n        histo[alphabet[i]]++;\n    }\n    return\
    \ histo;\n}\n", "  var words = test.toLowerCase().split(\" \");\n  var histogram\
    \ = {};\n  var highestCount = 0;\n  for(var i=0; i<words.length; i++){\n    var\
    \ letter = words[i];\n    var count = histogram.hasOwnProperty(letter) ? histogram[letter]+1\
    \ : 1;\n    histogram[letter] = count;\n    if(count > highestCount) highestCount\
    \ = count;\n  }\n  return histogram;\n}\n", "\tvar histogram = {};\n\ttest.split(\"\
    \ \").forEach(function(e){\n\t\tif(e in histogram){\n\t\t\thistogram[e]+=1;\n\t\
    \t}else{\n\t\t\thistogram[e]=1;\n\t\t}\n\t});\n\treturn histogram;\n}\n</cell>\n\
    <cell>", "  var result = {};\n  var arr = test.split(' ').map(function(item) {return\
    \ item.trim();});\n  for(var i=0;i<arr.length;i++){\n    for(var j=0;j<arr.length;j++){\n\
    \      if(arr[i] === arr[j]){\n        if(typeof result[arr[i]] === 'undefined'){\n\
    \          result[arr[i]] = 1;\n        }\n        else{\n          result[arr[i]]\
    \ = result[arr[i]] + 1;\n        }\n      }\n    }\n  }\n  return result;\n}",
  "\tvar map = {};\n\ttest.split(' ').forEach(function(str){\n\t\tvar c = map[str];\n\
    \t\tmap[str] = c ? c + 1 : 1;\n\t});\n\tvar max;\n\tvar key;\n\tfor(key in map){\n\
    \t\tif (map.hasOwnProperty(key)) {\n\t\t\tvar c = map[key];\n\t\t\tif (max ===\
    \ undefined || c > max){\n\t\t\t\tmax = c;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\
    \tmax: max,\n\t\tpairs: []\n\t};\n}\n", "  var result = {};\n  var words = test.split('\
    \ ');\n  for(var i=0; i<words.length; i++){\n    var word = words[i];\n    var\
    \ letters = word.split('');\n    for(var j=0; j<letters.length; j++){\n      if(result[letters[j]]\
    \ == undefined){\n        result[letters[j]] = 1;\n      } else {\n        result[letters[j]]\
    \ += 1;\n      }\n    }\n  }\n  return result;\n}", "    var res = {};\n    var\
    \ arr = test.split(' ');\n    var len = arr.length;\n    var maxCount = 0;\n \
    \   for(var i = 0;i < len;i++){\n        var letter = arr[i];\n        res[letter]\
    \ = (res[letter] || 0) + 1;\n        if(res[letter] > maxCount){\n           \
    \ maxCount = res[letter];\n        }\n    }\n    return maxCount > 1 ? res : null;\n\
    }", "    var dict = dict(); // Dictionary that maps string to int to keep track\
    \ of how many times each letter is repeated.\n    var splitString = test.split('\
    \ ');\n    for(var i = 0; i < splitString.length; i++){\n        var word = splitString[i];\n\
    \        if(dict[word] === undefined){\n            dict[word] = 1;\n        }\n\
    \        else{\n            dict[word]++;\n        }\n    }\n    var sortedKeys\
    \ = sortByValue(dict);\n    var result = dict(); // Dictionary that stores the\
    \ most repeated letter with its count.\n    for(var i = 0; i < sortedKeys.length;\
    \ i++){\n        var word = sortedKeys[i];\n        var count = dict[word];\n\
    \        result[word] = count;\n    }\n    return result;\n}", "  var result =\
    \ {};\n  test.split(\" \").forEach(function(item){\n    var letter = item;\n \
    \   var count = result[letter] || 0;\n    result[letter] = count + 1;\n  });\n\
    \  return result;\n}", "    var arr = _(test).split().map(function(item){ return\
    \ item.toLowerCase(); }).sort().uniq().sort().value();\n    var results = {};\n\
    \    _.each(arr, function(item, i){\n        results[item] = _.countBy(test, function(e){\
    \ return e.toLowerCase().replace(item, \"\"); });\n    });\n    return _.maxBy(_.values(results),\
    \ function(item){ return _.keys(item)[0]; });\n}\n", "    var letters = test.split('\
    \ ');\n    var letterWithMostRepetition = {};\n    var letterWithMostCount = 0;\n\
    \n    for (var i in letters) {\n        letterWithMostRepetition[letters[i]] =\
    \ letterWithMostRepetition[letters[i]] ? letterWithMostRepetition[letters[i]]\
    \ + 1 : 1;\n        if (letterWithMostRepetition[letters[i]] > letterWithMostCount)\
    \ {\n            letterWithMostCount = letterWithMostRepetition[letters[i]];\n\
    \            letterWithMostRepetition[letters[i]] = letters[i];\n        }\n \
    \   }\n    return letterWithMostRepetition;\n}\n", "    var result = {};\n   \
    \ var wordlist = test.split(' ');\n    wordlist.forEach(function(word){\n    \
    \    var letters = word.split('');\n        letters.forEach(function(letter){\n\
    \            if (result[letter] == undefined){\n                result[letter]\
    \ = 1;\n            } else {\n                result[letter] += 1;\n         \
    \   }\n        });\n    });\n    return Object.entries(result).sort((a,b) => (b[1]\
    \ - a[1]))\n}\n", "  var data = test.split(/\\s+/);\n  var histo = {};\n  data.forEach(function(d){\n\
    \    var key = d;\n    var val = histo[key];\n    histo[key] = val != undefined\
    \ ? val : 1;\n  });\n  return histo;\n}\n", "    var max,\n        letterCounts\
    \ = {},\n        counter = 0;\n\n    test.split(' ').forEach(function(letter){\n\
    \        if (!letterCounts[letter]) letterCounts[letter] = 0;\n        letterCounts[letter]\
    \ += 1;\n    });\n\n    max = Math.max.apply(null, Object.values(letterCounts));\n\
    \    Object.keys(letterCounts).forEach(function(letter){\n        if (letterCounts[letter]\
    \ === max){\n            letterCounts[letter].count = counter;\n            letterCounts[letter].letter\
    \ = letter;\n            counter++;\n        }\n    });\n    return letterCounts;\n\
    }\n", "\tvar letters = {}\n\ttest.split(' ').forEach(function(letter){\n\t\tif\
    \ (letters[letter]) {\n\t\t\tletters[letter]++\n\t\t}\n\t\telse {\n\t\t\tletters[letter]\
    \ = 1\n\t\t}\n\t})\n\treturn letters;\n}\n", "  var histogram = {};\n  var tokens\
    \ = test.split(' ');\n  tokens.forEach(function(item){\n    item = item.toLowerCase();\n\
    \    item = _.isUndefined(histogram[item]) ? 1 : histogram[item] + 1;\n    histogram[item]\
    \ = item;\n  });\n  return histogram;\n}\n", "    var histogram = collections.defaultdict(int);\n\
    \    var words = test.split(' ');\n    for(var i = 0; i < words.length; i++){\n\
    \        histogram[words[i]]++;\n    }\n    return histogram;\n}\n", "  var counts\
    \ = {};\n  var arr = test.split(\" \");\n  for(var i=0;i<arr.length;i++){\n  \
    \  var letter = arr[i].toLowerCase();\n    if(counts[letter]){\n      counts[letter]++;\n\
    \    }else{\n      counts[letter] = 1;\n    }\n  }\n  return counts;\n}\n", " \
    \   var testSplit = test.split(' ');\n    var histogram = {};\n    var maxCount\
    \ = 0;\n    var letter, count;\n\n    for (var i = 0; i < testSplit.length; i++){\n\
    \        letter = testSplit[i];\n        if (histogram.hasOwnProperty(letter)){\n\
    \            histogram[letter] = histogram[letter] + 1;\n        }else{\n    \
    \        histogram[letter] = 1;\n        }\n\n        if (histogram[letter] >\
    \ maxCount){\n            maxCount = histogram[letter];\n        }\n    }\n\n\
    \    return histogram;\n}\n", "  var count = {},\n      countList = [];\n  test.toLowerCase().split('\
    \ ').forEach(function(letter){\n    count[letter] = (count[letter] || 0)+1;\n\
    \  });\n  for(var key in count){\n    if(count[key] > 1){\n      countList.push({letter:\
    \ key, count: count[key]});\n    }\n  }\n  return countList.sort(function(a, b){\n\
    \    return b.count - a.count;\n  });\n}\n", "  test = test.toLowerCase();\n \
    \ var freq = test.split(' ').map(function(x){\n      return x.toLowerCase();\n\
    \    }).reduce(function(result, current){\n      result[current] = result[current]\
    \ + 1 || 1;\n      return result;\n    }, {});\n  var max;\n  for(i in freq)\n\
    \    max = i === \"a\" ? freq[\"a\"] : freq[i];\n  var result = {};\n  for(i in\
    \ freq)\n    if(i == \"a\" || freq[i] === max)\n      result[i] = freq[i];\n \
    \ return result;\n}\n</code>\n<|/ a dscore=0 tags=string,arrays,javascript |>\n\
    <| a |>\nAnother approach using regex:\n<code>", "    var letterCountMap = {};\n\
    \    test.split(\" \").forEach(function(letter){\n        letterCountMap[letter]\
    \ = letterCountMap[letter] ? letterCountMap[letter] + 1 : 1;\n    });\n    var\
    \ mostRepeatedLetter = Object.keys(letterCountMap).reduce(function(a, b){\n  \
    \      return letterCountMap[a] > letterCountMap[b] ? a : b;\n    });\n    var\
    \ histogram = {}\n    Object.keys(letterCountMap).forEach(function(letter){\n\
    \        if(letter == mostRepeatedLetter){\n            histogram[letter] = letterCountMap[letter];\n\
    \        }\n    });\n    return histogram;\n}\n", "  var hash = {},\n      max\
    \ = -Infinity,\n      maxCount = 0;\n\n  test = test.split(' ');\n\n  test.forEach(function(letter){\n\
    \    if(hash[letter]){\n      hash[letter]++;\n    } else {\n      hash[letter]\
    \ = 1;\n    }\n  });\n\n  for(var k in hash){\n    if(hash[k] > max){\n      maxCount\
    \ = hash[k];\n      max = k;\n    }\n  }\n\n  return hash[max];\n}\n", "  if(test.length\
    \ === 0) return {};\n  var histogram = { };\n  for(var letter in test){\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n</code>\n<|/ a\
    \ dscore=1 tags=string,javascript,hashmap |>\n<| a dscore=1 |>\n<code>\nconst\
    \ histogram = (string) => string.split(' ').filter(s => s).map((s, i) => [s, i]).reduce((acc,\
    \ cur) => {\n  if (!acc[cur[0]]) acc[cur[0]] = 0;\n  acc[cur[0]] += 1;\n  return\
    \ acc;\n}, {});\n", "    var words = test.split(\" \");\n    var histogram = {};\n\
    \    for(var i = 0; i < words.length; i++){\n        if(histogram.hasOwnProperty(words[i])){\n\
    \            histogram[words[i]]++;\n        } else {\n            histogram[words[i]]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "  let letters = new Map();\n\
    \  let count = new Map();\n  for (let letters of test.trim().split(\" \")){\n\
    \    if (letters.trim() === \"[empty]\") return count;\n    for (let letter of\
    \ letters.split(\"\")){\n      count[letter] = count.get(letter, 0) + 1;\n   \
    \ }\n  }\n  for (let letter of count.keys()){\n    letters.set(letter, count.get(letter));\n\
    \  }\n  return letters;\n}\n", "    var dict = {\"a\": 1, \"b\": 1, \"c\": 1};\n\
    \    test = test.split(' ');\n    for(var i=0;i<test.length;i++){\n        if(dict[test[i]]){\n\
    \            dict[test[i]] += 1;\n        } else {\n            dict[test[i]]\
    \ = 1;\n        }\n    }\n    return dict;\n}", "\tvar splitted = test.split(\"\
    \ \");\n\tvar hash = {};\n\tsplitted.forEach(function(letter){\n\t\tif(!letter){\
    \ return; }\n\t\tif(!hash[letter]){\n\t\t\thash[letter] = 1;\n\t\t} else {\n\t\
    \t\thash[letter] += 1;\n\t\t}\n\t});\n\treturn hash;\n}\n", "    var histo = {};\n\
    \    var chars = test.split(\" \");\n    var total = 0;\n    for (var i = 0; i\
    \ < chars.length; i++) {\n        if (!histo[chars[i]]) {\n            histo[chars[i]]\
    \ = 1;\n            total++;\n        } else {\n            histo[chars[i]]++;\n\
    \        }\n    }\n    return histo;\n}", "  var dictionary = {}, maxRepetition\
    \ = 0;\n  for (var i = 0; i < test.length; i++) {\n    var letter = test.charAt(i),\
    \ letterCount = (dictionary[letter] || 0) + 1;\n    if (letterCount > maxRepetition)\
    \ {\n      maxRepetition = letterCount;\n      dictionary = {};\n    }\n    dictionary[letter]\
    \ = letterCount;\n  }\n  return dictionary;\n}\n", "  var frequencies = {},\n\
    \      splitted = test.split(' '),\n      length = splitted.length,\n      max\
    \ = 0;\n  for (var i = 0; i < length; i++) {\n    var letter = splitted[i];\n\
    \    if (frequencies[letter]) {\n      frequencies[letter]++;\n    } else {\n\
    \      frequencies[letter] = 1;\n    }\n  }\n  for (var letter in frequencies)\
    \ {\n    if (frequencies[letter] > max) {\n      max = frequencies[letter];\n\
    \    }\n  }\n  return max;\n}\n", "  test = test.replace(/\\s+/g,\" \");\n  var\
    \ histogram = {};\n  var maxCount = -1;\n  var currCount = 0;\n  for (var i =\
    \ 0; i < test.length; i++){\n    if (histogram.hasOwnProperty(test[i])) {\n  \
    \    histogram[test[i]] += 1;\n    } else {\n      histogram[test[i]] = 1;\n \
    \   }\n    currCount += histogram[test[i]];\n    if (maxCount < currCount) {\n\
    \      maxCount = currCount;\n    }\n  }\n  return histogram;\n}\n", "    var\
    \ testArr = test.split(' ');\n    var histogram = {};\n    var i = 0;\n    while(i\
    \ < testArr.length){\n        if(histogram.hasOwnProperty(testArr[i])){\n    \
    \        histogram[testArr[i]]++;\n        }else{\n            histogram[testArr[i]]\
    \ = 1;\n        }\n        i++;\n    }\n    return histogram;\n}\n", "  let histogram\
    \ = {};\n  let array = test.split(' ');\n  let letter = array[0];\n  for(let i\
    \ = 0; i < array.length; i++){\n    histogram[array[i]] = histogram[array[i]]\
    \ !== undefined ? histogram[array[i]] + 1 : 1;\n  }\n  console.log(histogram);\n\
    \  return histogram;\n}\n", "  var dict = {}\n  test.split(' ').reduce(function(dict,\
    \ letter){\n    if(dict[letter] === undefined){\n      dict[letter] = 1\n    }else{\n\
    \      dict[letter] ++\n    }\n    return dict\n  }, dict)\n  return dict\n}",
  "  test = test.trim();\n  if(test=='')\n    return {};\n  var results = {};\n  var\
    \ letters = test.split(' ');\n  var counts = {};\n  letters.forEach(function(letter){\n\
    \    var key = (letter);\n    counts[key]=(counts[key] || 0)+1;\n  })\n  letters.forEach(function(letter){\n\
    \    if(counts[letter] > 1){\n      results[letter] = counts[letter];\n    }\n\
    \  })\n  return results;\n}\n", "    var result = {};\n    var str = test.replace(/\\\
    s+/g, ' ').split(' ');\n    str.forEach(function(letter){\n        var current\
    \ = result[letter] || (result[letter] = 0);\n        result[letter] = result[letter]\
    \ + (current == 0 ? 1 : current);\n    });\n    return result;\n}\n", "  var result\
    \ = {};\n  var tests = test.split(' ');\n  tests.forEach(function(item){\n   \
    \ var letters = item.split('');\n    letters.forEach(function(letter){\n     \
    \ if (result[letter] === undefined){\n        result[letter] = 1;\n      }else{\n\
    \        result[letter] += 1;\n      }\n    });\n  });\n  return result;\n}\n",
  "  var hash = {};\n  var words = test.split(/\\s+/);\n\n  for (var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var count = 0;\n    if (hash[word] ===\
    \ undefined) {\n      hash[word] = 1;\n    } else {\n      count = hash[word];\n\
    \      hash[word]++;\n    }\n    for (var j = 0; j < count; j++){\n      words.push({\n\
    \        word: word,\n        count: count\n      });\n    }\n  }\n\n  return\
    \ words.sort(function(a, b){\n    return a.count - b.count;\n  }).map(function(item){\n\
    \    return item.word;\n  });\n}\n", "    var words = test.split(\" \");\n   \
    \ var histo = {};\n    var max = 0; \n    for(var i=0; i<words.length; i++){\n\
    \        var str = words[i];\n        var letter = str.charAt(0).toLowerCase();\n\
    \        if(histo[letter] == null) histo[letter] = 1;\n        else histo[letter]++;\n\
    \        if(histo[letter] > max){\n            max = histo[letter];\n        }\n\
    \    }\n    return histo;\n}\n", "  let letters;\n  let count = 0;\n  let result\
    \ = {};\n  let tmp = [];\n  test = test.toLowerCase();\n  if(test.length <= 1){\n\
    \    return result;\n  }\n  letters = test.split(' ');\n  for (let i = 0; i <\
    \ letters.length; i++) {\n    tmp = [letters[i]];\n    if (result[letters[i]])\
    \ {\n      result[letters[i]]++;\n    }else{\n      result[letters[i]] = 1;\n\
    \    }\n    for (let j = 0; j < tmp.length; j++) {\n      if (result[tmp[j]])\
    \ {\n        result[tmp[j]] += 1;\n      }else{\n        result[tmp[j]] = 1;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  var result={};\n  test.split('\
    \ ').forEach(function(item){\n    if (result[item]){\n      result[item]++;\n\
    \    }else{\n      result[item]=1;\n    }\n  });\n  return result;\n}\n", "  var\
    \ dict = Object.create(null),\n      counts = [];\n  var words = test.trim().split('\
    \ ');\n  \n  for(var i = 0, l = words.length; i < l; i++){\n    var letter = words[i];\n\
    \    var count = dict[ letter ] || (dict[ letter ] = 0);\n    \n    counts.push(count);\n\
    \  }\n  \n  counts.sort();\n  \n  for(var i = 0, l = counts.length; i < l; i++){\n\
    \    var count = counts[i];\n    \n    if(count === counts[ l - 1 ]){\n      return\
    \ dict;\n    }\n  }\n  \n  return dict;\n}\n", "\tvar result = {};\n\tvar splitted\
    \ = test.split(\" \");\n\tvar letter;\n\tvar counter = 0;\n\t\n\tfor(var i = 0,\
    \ len = splitted.length; i < len; i++){\n\t\tletter = splitted[i];\n\t\tif(result[letter]\
    \ == null){\n\t\t\tresult[letter] = 1;\n\t\t} else {\n\t\t\tresult[letter] +=\
    \ 1;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n", "    var arr = test.toLowerCase().split('\
    \ ');\n    var hist = {};\n    for (var i = 0; i < arr.length; i++) {\n      \
    \  var letter = arr[i];\n        if (hist[letter]) {\n            hist[letter]++;\n\
    \        }\n        else {\n            hist[letter] = 1;\n        }\n    }\n\
    \    return hist;\n}\n", "  var frequencies = {},\n      letter;\n\n  test.split('\
    \ ').forEach(function(word) {\n    letter = word.toLowerCase().split('').reduce(function(memo,\
    \ letter) {\n      memo[letter] = (memo[letter] || 0) + 1;\n      return memo;\n\
    \    }, {});\n\n    Object.keys(letter).forEach(function(letter) {\n      frequencies[letter]\
    \ = Math.max(frequencies[letter] || 0, letter[letter]);\n    });\n  });\n\n  return\
    \ frequencies;\n}\n", "\tlet letters = test.split(' ').sort((a,b)=>a.localeCompare(b)).map(a=>a.toLowerCase());\n\
    \tlet histo = letters.reduce((c,a,i)=>{\n\t\tlet currentCount=c[a]||0;\n\t\tlet\
    \ nextCount = histo[a] ? histo[a]+1 : 1;\n\t\tc[a]=nextCount;\n\t\treturn c;\n\
    \t},{});\n\tlet max = histo;\n\tlet maxCount=1;\n\tfor (let i in histo) {\n\t\t\
    if (histo[i] > maxCount) {\n\t\t\tmax=histo;\n\t\t\tmaxCount=histo[i];\n\t\t}\n\
    \t}\n\tlet result={};\n\tfor (let i in max) {\n\t\tresult[i]=max[i];\n\t}\n\t\
    return result;\n}\n", "    var dict = {}\n    var words = test.split(' ')\n  \
    \  var max = 0\n    for(var i=0, len = words.length; i < len; i++){\n        var\
    \ letter = words[i]\n        var count = dict[letter] || 0\n        dict[letter]\
    \ = count + 1\n        max = Math.max(max, count)\n    }\n    var result = []\n\
    \    for(var key in dict){\n        result.push({'letter': key, 'count': dict[key]})\n\
    \    }\n    result.sort(function(a, b){return b.count - a.count})\n    return\
    \ result\n}\n", "    var map = {};\n    for (var i = 0; i < test.length; i++)\
    \ {\n        if (!map[test[i]]) {\n            map[test[i]] = 1;\n        } else\
    \ {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\n", " \
    \ var counts = {},\n      words = test.split(' '),\n      maxCharCount = 0;\n\n\
    \  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    counts[word]\
    \ = counts[word] || 0;\n    counts[word] += 1;\n    maxCharCount = Math.max(maxCharCount,\
    \ word.length);\n  }\n\n  for (var key in counts) {\n    if (counts.hasOwnProperty(key))\
    \ {\n      counts[key] /= maxCharCount;\n    }\n  }\n\n  return counts;\n}", " \
    \ // your code here\n  var frequency = new Object();\n  var words = test.split('\
    \ ');\n  var len = words.length;\n  var i;\n  for(i=0; i<len; i++){\n    if(!frequency[words[i]]){\n\
    \      frequency[words[i]] = 1;\n    }else{\n      frequency[words[i]]++;\n  \
    \  }\n  }\n  var keys = Object.keys(frequency);\n  var max = 0;\n  var maxWord\
    \ = null;\n  var maxCount = 0;\n  for(i=0; i<keys.length; i++){\n    if(maxCount\
    \ < frequency[keys[i]]){\n      max = frequency[keys[i]];\n      maxWord = keys[i];\n\
    \      maxCount = frequency[keys[i]];\n    }\n  }\n  return { max : max, word\
    \ : maxWord, count : maxCount };\n}\n", "  const testArr = test.split(' ');\n\
    \  const chars = {};\n  let max = 0;\n  let min = 0;\n\n  for (let i = 0; i <\
    \ testArr.length; i++) {\n    let char = testArr[i];\n    let count = chars[char]\
    \ ? chars[char] : 1;\n    chars[char] = ++count;\n    if (count > max) {\n   \
    \   max = count;\n    }\n    if (count < min) {\n      min = count;\n    }\n \
    \ }\n\n  for (let i in chars) {\n    chars[i] = chars[i] / max - min;\n  }\n\n\
    \  return chars;\n}\n", "\tvar count = {};\n\ttest.split(' ').forEach(function(letter){\n\
    \t\tcount[letter] = (count[letter] || 0) + 1;\n\t});\n\treturn count;\n}\n\n",
  "    var result = {};\n    var arr = test.split(' ');\n    var maxCount = 0;\n \
    \   for(var i=0; i<arr.length; i++){\n        if (arr.hasOwnProperty(i)) {\n \
    \           var letter = arr[i].toLowerCase();\n            if (result.hasOwnProperty(letter)){\n\
    \                ++result[letter];\n            }\n            else if (result[letter]\
    \ > maxCount){\n                maxCount = result[letter];\n                result\
    \ = {};\n                result[letter] = 1;\n            }\n            else{\n\
    \                result[letter] = 1;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    //create a dictionary of word counts\n    //where the key\
    \ is the word and value is 1\n    var dict = {}\n    for (var i=0 ; i<test.length\
    \ ; i++){\n        dict[test[i]]=dict[test[i]]+1 || 1\n    }\n    //sort dictionary\
    \ by value, most frequent word first\n    var sorted = Object.keys(dict).map(function(key){return\
    \ [key, dict[key]]}\n    ).sort(function(a,b){return b[1]-a[1]})\n    //get the\
    \ first element in the sorted array\n    var word = sorted[0]\n    var count =\
    \ sorted[0][1]\n    return {word: word, count: count}\n}\n", "  var dict = {},\n\
    \      max = 0,\n      maxCount,\n      key,\n      i = 0;\n\n  test.split(' ').forEach(function(word){\n\
    \    word = word.toLowerCase();\n    if(dict[word]){\n      dict[word]++;\n  \
    \  }else{\n      dict[word] = 1;\n    }\n  });\n\n  for(key in dict){\n    max\
    \ = Math.max(max,dict[key]);\n  }\n\n  for(key in dict){\n    if(dict[key] ==\
    \ max){\n      dict[key] = dict[key] + 1;\n    }\n  }\n\n  return dict;\n}\n",
  "\tvar histogram = dict();\n\tvar words = test.split(' ');\n\tfor (var i = 0; i\
    \ < words.length; i++){\n\t\thistogram[words[i]] = histogram[words[i]] ? histogram[words[i]]\
    \ + 1 : 1;\n\t}\n\treturn histogram;\n}", "  var freq = {};\n  var res = \"\"\
    ;\n  var arr;\n  for(var i=0; i<test.length; i++){\n    var charac = test.substr(i,\
    \ 1);\n    freq[charac] = freq[charac] ? freq[charac]+1 : 1;\n  }\n  var max =\
    \ 0, maxchar = \"\";\n  for(var c in freq){\n    if(freq[c] > max){\n      max\
    \ = freq[c];\n      maxchar = c\n    }\n  }\n  for(var c in freq){\n    freq[c]\
    \ = freq[c] ? freq[c] : 1;\n  }\n  for(var c in freq){\n    if(freq[c] == max){\n\
    \      res += c + \": \"+ freq[c] + \"\\n\";\n    }\n  }\n  for(var c in freq){\n\
    \    freq[c] = freq[c] ? freq[c] : 1;\n  }\n  for(var c in freq){\n    if(freq[c]\
    \ == max){\n      res += c + \": \"+ freq[c] + \"\\n\";\n    }\n  }\n  for(var\
    \ c in freq){\n    freq[c] = freq[c] ? freq[c] : 1;\n  }\n  return res\n}", " \
    \   var words = test.split(' ');\n    var histo = {};\n    for(var i = 0; i <\
    \ words.length; i++){\n        histo[words[i]] = (histo[words[i]] || 0) + 1;\n\
    \    }\n    var ret = {};\n    for(var k in histo){\n        ret[k] = histo[k];\n\
    \    }\n    return ret;\n}\n", "  var result = {};\n  test.split(' ').forEach(function(letter){\n\
    \    result[letter] = (result[letter] || 0) + 1;\n  });\n  return result;\n}\n",
  "  var letters = test.split(' '),\n      count = {},\n      max = 0,\n      maxLetter;\n\
    \n  letters.forEach(function(letter){\n    if (count.hasOwnProperty(letter)) {\n\
    \      count[letter] += 1;\n    } else {\n      count[letter] = 1;\n    }\n  });\n\
    \n  Object.keys(count).forEach(function(letter){\n    if (count[letter] > max)\
    \ {\n      max = count[letter];\n      maxLetter = letter;\n    }\n  });\n\n \
    \ return {\n    max: max,\n    maxLetter: maxLetter,\n    letters: count\n  };\n\
    }\n\n", "  let dict = {}\n  test.replace(/./g, function(letter){\n    dict[letter]\
    \ = (dict[letter] || 0) + 1\n  })\n  let max = 0, result\n  for (let letter of\
    \ Object.keys(dict)) {\n    if (dict[letter] > max) {\n      result = dict[letter],\
    \ max = dict[letter]\n    }\n  }\n  return result ? {[letter]: result} : {}\n\
    }\n", "\tvar histo = {}\n\tvar splitted = test.split(\" \")\n\tvar len = splitted.length\n\
    \tfor (var i = 0; i < len; i++) {\n\t\tvar e = splitted[i]\n\t\tif (histo[e] ==\
    \ undefined) {\n\t\t\thisto[e] = 1\n\t\t} else {\n\t\t\thisto[e] += 1\n\t\t}\n\
    \t}\n\treturn histo\n}\n", "  var result = {}\n    , len = test.length\n    ,\
    \ res = []\n    ;\n  for (var i = 0; i < len; ++i){\n    var letter = test.charAt(i)\n\
    \      , count = result[letter]\n      ;\n    \n    if (count){\n      count++;\n\
    \    } else {\n      count = 1;\n    }\n    \n    if (count > result[letter]){\n\
    \      result[letter] = count;\n    }\n  }\n  \n  for(i in result){\n    res.push([i,\
    \ result[i]])\n  }\n  \n  return res;\n}\n\n", "  const letterCounts = test.split('\
    \ ').map(letter => letter.charCodeAt(0)).reduce((letterCounts, letterCode) =>\
    \ {\n    if (letterCounts[letterCode]) letterCounts[letterCode]++;\n    else letterCounts[letterCode]\
    \ = 1;\n    return letterCounts;\n  }, {});\n\n  return letterCounts.reduce((histogramCounts,\
    \ letterCode) => {\n    if (histogramCounts[letterCode]) histogramCounts[letterCode]++;\n\
    \    else histogramCounts[letterCode] = 1;\n    return histogramCounts;\n  },\
    \ {});\n}\n", "  var result = {};\n  var charArray = test.split(\" \");\n  charArray.forEach(function(char){\n\
    \    result[char] = result[char] + 1 || 1;\n  });\n  var max = 0, maxChar;\n \
    \ for(char in result){\n    if(result[char] > max){\n      maxChar = char;\n \
    \     max = result[char];\n    }\n  }\n  if(max == 0){\n    return {};\n  }\n\
    \  return maxChar;\n}", "    var letters = test.toLowerCase().split(' ');\n  \
    \  var histogram = {};\n    var currentLetter;\n    for (var i = 0; i < letters.length;\
    \ i++) {\n        currentLetter = letters[i].toLowerCase();\n        if(!histogram[currentLetter])\
    \ histogram[currentLetter] = 1;\n        else histogram[currentLetter]++;\n  \
    \  }\n\n    var maximum = 0;\n    var current;\n    for (current in histogram)\
    \ {\n        if (histogram[current] > histogram[maximum]) maximum = current;\n\
    \    }\n\n    return histogram;\n}\n", "  var dict = {},\n      i,\n      j,\n\
    \      k,\n      arr = [];\n  for (i = 0; i < test.length; i++) {\n    arr[i]\
    \ = 1;\n  }\n  for (i = 0; i < test.length; i++) {\n    j = test.charCodeAt(i)\
    \ - 65;\n    while (arr[j]) {\n      j++;\n    }\n    arr[j] = 1;\n  }\n  for\
    \ (i = 0; i < 26; i++) {\n    k = String.fromCharCode(i + 65);\n    dict[test]\
    \ = dict[test] || {\n      count: 0,\n      letters: []\n    };\n    dict[test].count\
    \ += arr[i];\n    dict[test].letters.push(k);\n  }\n  return dict;\n}\n", "  \
    \  var histo = {},\n        i,\n        letter;\n\n    if (test.length === 0){\n\
    \        return histo;\n    }\n\n    test = test.toLowerCase().split(' ');\n \
    \   for (i = 0; i < test.length; i++) {\n        letter = test[i];\n        if\
    \ (histo[letter] !== undefined) {\n            histo[letter]++;\n        } else\
    \ {\n            histo[letter] = 1;\n        }\n    }\n    return histo;\n}\n",
  "  var words = test.split(' ');\n  var counts = {};\n\n  words.forEach(function(w){\n\
    \    var letter = w.toLowerCase();\n    if (letter in counts){\n      counts[letter]\
    \ = counts[letter] + 1;\n    }else{\n      counts[letter] = 1;\n    }\n  });\n\
    \n  var mostRecentCount = 0;\n  var maxLetter = null;\n  for (var letter in counts){\n\
    \    if (counts[letter] > mostRecentCount){\n      mostRecentCount = counts[letter];\n\
    \      maxLetter = letter;\n    }\n  }\n\n  return counts[maxLetter];\n}\n", " \
    \ test = test.toLowerCase().split(' ');\n  var dictionary = {};\n  test.forEach(function(letter){\n\
    \    if(dictionary.hasOwnProperty(letter)){\n      dictionary[letter] ++;\n  \
    \  }else{\n      dictionary[letter] = 1;\n    }\n  });\n  return dictionary;\n\
    }\n", "    var letters = test.split(' ');\n    var histo = {};\n    for(var i\
    \ in letters)\n        histo[letters[i]] = histo[letters[i]]? histo[letters[i]]+\
    \ 1 : 1;\n    return histo;\n}\n", "\tvar dict = {};\n\t\n\tvar arr = test.split('\
    \ ');\n\tfor(var i=0;i<arr.length;i++){\n\t\tif(!dict[arr[i]]){\n\t\t\tdict[arr[i]]\
    \ = 1;\n\t\t}else{\n\t\t\tdict[arr[i]] += 1;\n\t\t}\n\t}\n\t\n\tvar max = 0;\n\
    \tvar temp;\n\tvar letter;\n\t\n\tfor(letter in dict){\n\t\tif(dict[letter] >\
    \ max){\n\t\t\tmax = dict[letter];\n\t\t\ttemp = letter;\n\t\t}\n\t}\n\t\n\treturn\
    \ {\n\t\t'max': max,\n\t\t'letter': temp,\n\t\t'count': dict[temp]\n\t};\n}\n\
    <|/ file source=github filename=solution.js |>\n<| c |>\nThis doesn't work as\
    \ intended for an empty string and non-empty string arguments. Please see my answer\
    \ for a more complete solution.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ Indeed the problem statement is a little ambiguous. I've updated my answer.\n\
    <|/ c |>\n<| a |>\nI like the answer from Kyle, but I believe the following solution\
    \ is cleaner and more efficient. It also handles edge cases that Kyle's solution\
    \ doesn't.\n<code>", "  return test.split(' ').reduce((res, word) => {\n    const\
    \ letter = word.toLowerCase().split('')\n    const count = letter.reduce((acc,\
    \ curr) => {\n      if(acc[curr] !== undefined && acc[curr] <= 1) acc[curr]++\n\
    \      else acc[curr] = 1\n      return acc\n    }, {})\n    for(let key in count)\
    \ res[key] = count[key]\n    return res\n  }, {})\n}\n", "  var freq = {},\n \
    \     words = test.toLowerCase().replace(/ /g,'').split(' ');\n  for (var i=0,\
    \ l=words.length; i<l; i++){\n    freq[words[i]] = (freq[words[i]] || 0) + 1;\n\
    \  }\n  return freq;\n}\n", "    var dict = {};\n    var list = test.split(\"\
    \ \");\n    var count = 0;\n    for(var i = 0; i < list.length; i++){\n      \
    \  count += list[list[i].toUpperCase()] == list[i] ? 1 : 0;\n        if(list[list[i].toUpperCase()]\
    \ == list[i]){\n            dict[list[list[i].toUpperCase()]] = dict[list[list[i].toUpperCase()]]\
    \ ? dict[list[list[i].toUpperCase()]] : 0 + 1;\n        }\n    }\n    return dict;\n\
    }\n", "    var word;\n    var count = {};\n    var letter;\n    var max;\n   \
    \ test = test.toLowerCase().split(' ');\n    for(var i = 0; i < test.length; i++){\n\
    \        word = test[i];\n        letter = word[0];\n        count[letter] = count[letter]\
    \ ? count[letter] + 1 : 1;\n        if (count[letter] > max){\n            max\
    \ = count[letter];\n        }\n    }\n    return count;\n}", "  let dict = {};\n\
    \  let count = 1;\n  test.replace(/\\s+/g, ' ').split(' ').forEach(e => {\n  \
    \  dict[e] = dict[e] || 0;\n    dict[e]++;\n  });\n  for (let k in dict){\n  \
    \  dict[k] = dict[k] ? dict[k] : count;\n    count++;\n  }\n  return dict;\n}\n",
  "  var obj = {}, words = test.split(' '),\n      length = words.length, i = 0, str;\n\
    \  \n  for(; i < length; i++){\n    str = words[i].toLowerCase();\n    if(obj[str]\
    \ === undefined){\n      obj[str] = 1;\n    } else {\n      obj[str]++;\n    }\n\
    \  }\n  return obj;\n}\n", "    var chars = test.split('');\n    var histogram\
    \ = {};\n    for(var i = 0; i < chars.length; i++){\n        histogram[chars[i]]=histogram[chars[i]]?histogram[chars[i]]+1:1;\n\
    \    }\n    var maxValue = -1;\n    var maxKey = '';\n    for (var key in histogram){\n\
    \        if(histogram[key] > maxValue){\n            maxValue = histogram[key];\n\
    \            maxKey = key;\n        }\n    }\n    return histogram;\n}\n", " \
    \ var hist = {};\n  var vals = [];\n  for (var i = 0; i < test.length; i++){\n\
    \    if (hist[test[i]]){\n      hist[test[i]]++;\n    }else{\n      hist[test[i]]\
    \ = 1;\n    }\n  }\n  var keys = [];\n  for (var k in hist){\n    keys.push(k);\n\
    \  }\n  keys = keys.sort();\n  for (var k = 0; k < keys.length; k++){\n    vals.push(hist[keys[k]]);\n\
    \  }\n  return vals;\n}\n", "  var letters = test.split(' '),\n      maxLetterCount\
    \ = 0,\n      maxLetter = undefined,\n      occurrences = {};\n  for (var i=0;\
    \ i<letters.length; i++){\n    var letter = letters[i];\n    occurrences[letter]\
    \ = occurrences[letter] ? occurrences[letter] + 1 : 1;\n    if (occurrences[letter]\
    \ > maxLetterCount){\n      maxLetterCount = occurrences[letter];\n      maxLetter\
    \ = letter;\n    }\n  }\n  return maxLetter;\n}\n", "    var dict = {};\n    for\
    \ (var i=0; i<test.length; i++){\n        var char = test[i].charAt(0); \n   \
    \     dict[char] = (dict[char] || 0) + 1;\n    }\n    var maxCount = 0, maxLetter;\n\
    \    for (var k in dict){\n        if (maxCount < dict[k])\n            maxCount\
    \ = dict[k];\n            maxLetter = k;\n    }\n    return { count: maxCount,\
    \ letter: maxLetter};\n}", "    test = test.split(' ').map(function(item){return\
    \ item.toLowerCase();}).reduce(function(p,c){\n        if(p[c]){\n           \
    \ p[c]++;\n        } else {\n            p[c] = 1;\n        }\n        return\
    \ p;\n    },{});\n    return Object.keys(test).reduce(function(p,c){\n       \
    \ if(p[c]>1) return p;\n        p[c] = 1;\n        return p;\n    },{});\n}\n",
  "\t\n\t// Step 1: Count the letters and store them in a dictionary with the letter\
    \ as key and the count as value\n\tvar testSplit = test.split('');\n\tvar histogram\
    \ = dict.make();\n\tfor (var i = 0; i < testSplit.length; i++){\n\t\thistogram[testSplit[i]]\
    \ = 1 + (histogram[testSplit[i]] || 0);\n\t}\n\t\n\t// Step 2: Sort the dictionary\
    \ by the value, ascending\n\tvar result = {};\n\tObject.keys(histogram).sort(function(a,\
    \ b){return histogram[b] - histogram[a]}).forEach(function(key){\n\t\tresult[key]\
    \ = histogram[key];\n\t});\n\t\n\treturn result;\n};\n", "  var histogram = Object.create(null);\n\
    \  var characters = test.split(' ').map(function(character){\n    return character.toLowerCase();\n\
    \  });\n  characters.forEach(function(character){\n    histogram[character] =\
    \ histogram[character] + 1 || 1;\n  });\n\n  return histogram;\n}\n", "    //\
    \ O(1) time and space\n    let histogram = {}\n    for (let c of test.split('\
    \ ')){\n        histogram[c] = histogram.hasOwnProperty(c) ? histogram[c]+1 :\
    \ 1;\n    }\n\n    return histogram;\n}\n", "    let arr = test.split(' ');\n\
    \    let dict = {};\n    for(let i = 0; i < arr.length; i++){\n        let count\
    \ = 0;\n        let currentLetter = arr[i];\n        for(let j = 0; j < arr.length;\
    \ j++){\n            if(arr[j] === currentLetter){\n                count++;\n\
    \            }\n        }\n        if(count > dict[currentLetter]){\n        \
    \    dict[currentLetter] = count;\n        }\n    }\n    return dict;\n}", " \
    \ var res = {};\n  var words = test.split(' ');\n  for(var i = 0; i<words.length;i++){\n\
    \    var letter = words[i];\n    if(res[letter] === undefined) res[letter] = 1;\n\
    \    else res[letter]++;\n  }\n  return res;\n}\n", "    let splitted = test.split('\
    \ ');\n    let histogram = {};\n    splitted.forEach((word)=>{\n        if (histogram[word]\
    \ === undefined) histogram[word] = 0;\n        histogram[word]++;\n    });\n \
    \   return histogram;\n}\n", "\tvar letters = new Object;\n\tvar letter = '';\n\
    \tvar occurrence = 0;\n\tvar total = 0;\n\t\n\tfor (var i = 0; i < test.length;\
    \ i++){\n\t\tletter = test.charAt(i);\n\t\toccurrence = letters[letter];\n\t\t\
    \n\t\tif (occurrence === undefined){\n\t\t\toccurrence = 1;\n\t\t}\n\t\t\n\t\t\
    total += occurrence;\n\t\tletters[letter] = occurrence;\n\t}\n\t\n\tfor (letter\
    \ in letters){\n\t\tif (letters.hasOwnProperty(letter)){\n\t\t\tif (letters[letter]\
    \ > total){\n\t\t\t\ttotal = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn total;\n}\n",
  "    var letterCounts = {};\n    var testChars = test.split(' ');\n    var testLength\
    \ = testChars.length;\n    for(var index = 0; index < testLength; index++){\n\
    \        var char = testChars[index];\n        if(letterCounts[char] == undefined){\n\
    \            letterCounts[char] = 1;\n        }else{\n            letterCounts[char]\
    \ = letterCounts[char] + 1;\n        }\n    }\n    return letterCounts;\n}\n",
  "    test = test.split(' ');\n    let maxValue = maxCount(test);\n    let letterCounts\
    \ = {};\n    test.forEach(e => {\n        if(letterCounts[e] === undefined){\n\
    \            letterCounts[e] = 1;\n        }else{\n            letterCounts[e]++;\n\
    \        }\n    });\n    let maxKey = Object.keys(letterCounts).find(e => letterCounts[e]\
    \ === maxValue);\n    return letterCounts[maxKey];\n}\n", "    var letters = test.split('\
    \ ');\n    var maxRepetition = 0;\n    var lettersWithMaxRepetition = [];\n\n\
    \    letters.forEach(letter => {\n        var letterCount = lettersWithMaxRepetition.filter(x\
    \ => x == letter).length;\n        if (letterCount > maxRepetition) {\n      \
    \      maxRepetition = letterCount;\n            lettersWithMaxRepetition = [letter];\n\
    \        } else if (letterCount == maxRepetition) {\n            lettersWithMaxRepetition.push(letter);\n\
    \        }\n    });\n    lettersWithMaxRepetition.forEach(x => {\n        histogram[x]\
    \ = (histogram[x] | 0) + 1;\n    });\n    return histogram;\n}\n", "    test.split('\
    \ ').forEach(function(letter){\n        histogram[letter] = (histogram[letter]||0)\
    \ + 1;\n    });\n    return histogram;\n}\n", "  var dict = {};\n  test.split('\
    \ ').forEach(function(letter){\n    dict[letter] = (dict[letter] || 0) + 1;\n\
    \  });\n  var letters = Object.keys(dict);\n  if(letters.length > 1){\n    letters\
    \ = letters.map(function(letter){ return {letter: letter, count: dict[letter]};});\n\
    \    letters.sort(function(a, b){\n      return b.count - a.count;\n    });\n\
    \    letters.forEach(function(letter){\n      if(letter.count > 1) letter = letter.letter;\n\
    \    });\n  }\n  return letters;\n}\n", "    var result = {};\n    test.split('\
    \ ').forEach(function(letter){\n        if(result[letter]){\n            result[letter]++;\n\
    \        }else{\n            result[letter] = 1;\n        }\n    });\n    return\
    \ result;\n}\n", "  let result = {};\n  let wordsList = test.split(' ');\n  let\
    \ counter = 0;\n  for(let word of wordsList){\n    word = word.toLowerCase();\n\
    \    if(!result[word]){\n      result[word] = 0;\n    }\n    counter++;\n    result[word]\
    \ += 1;\n  }\n  return result;\n}\n", "    test = test.split(' ')\n    var freq\
    \ = {}\n    for(var x in test){\n        freq[test[x]] = (freq[test[x]]||0)+1\n\
    \    }\n    freq = Object.entries(freq)\n    return freq.reduce(function(a,b){\n\
    \        return Math.max(a,b[1])\n    }, {})\n}\n", "\tvar h = {},\n\t\twords\
    \ = test.trim().toLowerCase().split(' ');\n\tfor (var i = 0; i < words.length;\
    \ ++i){\n\t\tvar word = words[i];\n\t\tif (h[word] === undefined){\n\t\t\th[word]\
    \ = 1;\n\t\t}else{\n\t\t\t++h[word];\n\t\t}\n\t}\n\treturn h;\n}", "  var histogram\
    \ = reduce(test(\" \"), function(obj, letter){\n    if (obj[letter] === undefined)\
    \ {\n      obj[letter] = 0;\n    }\n    obj[letter]++;\n    return obj;\n  },\
    \ {});\n  return histogram;\n}\n", "  const histogram = {};\n  const counts =\
    \ [];\n  let maxCount = 0;\n  for (let i = 0; i < test.length; i++){\n    const\
    \ currentLetter = test[i];\n    if (histogram[currentLetter] === undefined) {\n\
    \      histogram[currentLetter] = 0;\n      counts.push(0);\n    }\n    histogram[currentLetter]++;\n\
    \    maxCount = Math.max(maxCount, histogram[currentLetter]);\n  }\n  for (let\
    \ i = 0; i < counts.length; i++){\n    histogram[test[i]] = histogram[test[i]]/maxCount;\n\
    \  }\n  return histogram;\n}", "  const letters = {}; // to store the letter with\
    \ most occurrence.\n  let max = 0; // to store the maximum occurrence of the letter\
    \ so far.\n  let currCount = 0; // to keep track of the occurrence of each letter.\n\
    \  \n  for (let i = 0; i < test.length; i++){\n    currCount = 0;\n    let char\
    \ = test[i];\n    \n    if (letters[char]){\n      letters[char] += 1;\n    }\
    \ else {\n      letters[char] = 1;\n    }\n    \n    if(letters[char] > max){\n\
    \      max = letters[char];\n    }\n  }\n  \n  for (let i in letters){\n    if\
    \ (letters[i] == max){\n      return { [letters[i]]: letters[i] };\n    }\n  }\n\
    }\n</cell>\n<cell>\ntest = \"a b c a b\";\nhistogram(test)\n</cell>\n<cell>",
  "  var histo = {};\n  test.split(' ').forEach(function(letter) {\n    if (histo[letter])\
    \ {\n      histo[letter]++;\n    } else {\n      histo[letter] = 1;\n    }\n \
    \ });\n  var maxes = [];\n  for (var prop in histo){\n    if (maxes.indexOf(prop)\
    \ < 0) maxes.push(prop);\n  }\n  return maxes.reduce(function(prev,cur){\n   \
    \ prev[cur] = histo[cur];\n    return prev;\n  },{});\n}\n", "    var words =\
    \ test.split(' ').reduce(function(previous, current){\n        if(previous.hasOwnProperty(current)){\n\
    \            previous[current]++;\n            return previous;\n        }else{\n\
    \            previous[current] = 1;\n            return previous;\n        }\n\
    \    }, {});\n    var result = {};\n    Object.keys(words).forEach(function(letter){\n\
    \        if(words[letter] > result.count){\n            result.letter = letter;\n\
    \            result.count = words[letter];\n        }\n    });\n    return result;\n\
    }\n", "\tvar result = {};\n\tvar arr = test.split(' ');\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tvar letter = arr[i];\n\t\tif(result[letter]){\n\t\t\tresult[letter]++;\n\
    \t\t}else{\n\t\t\tresult[letter] = 1;\n\t\t}\n\t}\n\treturn result;\n}\n", " \
    \ var histogram = {};\n  var letters = test.split(' ');\n  letters.forEach(function(letter){\n\
    \    if(!histogram[letter]){\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  });\n  return histogram;\n}\n", "\tlet result={};\n\tlet temp=test.split(\"\
    \ \");\n\ttemp.sort();\n\tfor(let i=0; i<temp.length; i++){\n\t\tif(!result[temp[i]]){\n\
    \t\t\tresult[temp[i]]=1;\n\t\t}else{\n\t\t\tresult[temp[i]]+=1;\n\t\t}\n\t}\n\t\
    return result;\n}\n", "    var counts = {};\n    for (var i=0; i<test.length;\
    \ i++) {\n        var letter = test.charAt(i);\n        if (!(letter in counts)){\n\
    \            counts[letter] = 1;\n        } else {\n            counts[letter]\
    \ = counts[letter] + 1;\n        }\n    }\n    return counts;\n}\n</code>\n<|/\
    \ a tags=java,c++,javascript |>\n<| c |>\nThanks a lot. This is a very good solution.\
    \ I have to try it out. One more question: I understand that counts is a dictionary\
    \ and that its keys are the letters from the given test (in the test case given\
    \ above, they are a,b,c). Is it possible to use some kind of a loop (for loop?)\
    \ so that it loops through all the possible letters? Because the test case is\
    \ really long, and it would be really cumbersome to type all letters of the alphabet.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nA \"for\" loop is used to loop through a list\
    \ of items (in this case a string). For each iteration, we get the current letter\
    \ (test[i]) and increment the counts[letter] key in the dictionary by the value\
    \ of the current counts[letter] key + 1.\n<|/ c |>\n<| a tags=java,c++,javascript\
    \ dscore=0 |>\nHere is my solution to this problem:\n<code>\nString s=\"aababcabcbb\"\
    ;\nMap<Character, Integer> count = new HashMap<>();\nfor(int i=0; i<s.length();i++){\n\
    \    char c = s.charAt(i);\n    if(count.containsKey(c)){\n        count.put(c,\
    \ count.get(c)+1);\n    } else {\n        count.put(c, 1);\n    }\n}\n</code>\n\
    And here is the printing part:\n<code>\nfor(Map.Entry<Character, Integer> entry\
    \ : count.entrySet()){\n    System.out.println(\"Count for \" + entry.getKey()\
    \ + \" is: \" + entry.getValue());\n}\n</code>\nYou can change Map to HashMap\
    \ for better performance.\n<|/ a |>\n<| a |>\nUsing streams.\n<code>\n String\
    \ s = \"aababcabcbb\";\n\n Map<String, Long> counts = Arrays.stream(s.split(\"\
    \")).collect(Collectors.groupingBy(n -> n, Collectors.counting()));\n</code>\n\
    <|/ a dscore=0 tags=java,c++,javascript |>\n<| a |>\nHere is my solution in C++\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <map>\n\nusing namespace\
    \ std;\n\nmap<char, int> counts;\n\nint main()\n{\n    string s=\"aababcabcbb\"\
    ;\n\n    for(int i=0; i<s.length(); i++)\n    {\n        if(counts[s[i]]", " \
    \ test = (typeof test == 'string') ? test.split(' ') : test;\n  if(test.length\
    \ == 0) return {}\n  var hash = {}\n  for(var i = 0, len = test.length; i < len;\
    \ i++){\n    var letter = test[i]\n    if(hash[letter]) hash[letter]++\n    else\
    \ hash[letter] = 1\n  }\n  for(var key in hash) hash[key] = (hash[key])\n  return\
    \ hash\n}\n", "\tvar count = {},\n\t\tcurrentLetter = test.toLowerCase(),\n\t\t\
    currentCount = count[currentLetter];\n\t\n\tcount[currentLetter] = currentCount?currentCount+1:1;\n\
    \t\n\treturn count;\n}\n", "  const histogram = {};\n  let currentLetter;\n  for(let\
    \ i = 0;i<test.length;i++){\n    currentLetter = test[i];\n    histogram[currentLetter]\
    \ = histogram[currentLetter]||{count:1,letters:[]};\n    histogram[currentLetter].count++;\n\
    \    histogram[currentLetter].letters.push(currentLetter);\n  }\n  return histogram;\n\
    }\n", "\tvar result = {};\n\t\n\tif(test === '') return result;\n\n\tvar chars\
    \ = test.split(' ');\n\t\n\tchars.forEach(function(letter){\n\t\tletter = letter.toLowerCase();\n\
    \t\tvar count = result[letter] ? result[letter] + 1 : 1;\n\t\tresult[letter] =\
    \ count;\n\t});\n\n\treturn result;\n}\n", "\tvar letters = test.split(' ');\n\
    \tvar histogram = {};\n\tfor (var i = 0; i < letters.length; i++) {\n\t\tif (histogram[letters[i]]){\n\
    \t\t\thistogram[letters[i]]++;\n\t\t} else {\n\t\t\thistogram[letters[i]] = 1;\n\
    \t\t}\n\t}\n\treturn histogram;\n}\n", "  if (test === '') return {};\n  var histo\
    \ = {}\n    , words = test.toLowerCase().split(' ')\n    , max;\n  for (var i\
    \ = 0, iMax = words.length; i < iMax; ++i) \n    if (histo[words[i]]){\n     \
    \ histo[words[i]]++;\n      if (histo[words[i]]>max){\n        max = histo[words[i]];\n\
    \      }\n    } else {\n      histo[words[i]] = 1;\n    }\n  return histo;\n}\n",
  "\tvar chars = [];\n\tfor (var i = 0; i < test.length; i++)\n\t\tchars.push(test.charAt(i));\n\
    \t\n\tvar data = {};\n\tfor (var i = 0; i < chars.length; i++){\n\t\tvar char\
    \ = chars[i];\n\t\tdata[char] = data[char] ? data[char] + 1 : 1;\n\t}\n\n\tvar\
    \ maxValue = -1;\n\tvar maxCount = 0;\n\tvar maxChar = '';\n\tfor (var c in data){\n\
    \t\tvar count = data[c];\n\t\tif (count > maxValue){\n\t\t\tmaxCount = count;\n\
    \t\t\tmaxChar = c;\n\t\t\tmaxValue = count;\n\t\t}\n\t}\n\t\n\treturn maxChar;\n\
    }", "  var letters=test.split(\" \");\n  var histo={};\n  for(var i=0;i<letters.length;i++){\n\
    \    if(histo[letters[i]]==undefined)\n      histo[letters[i]]=0;\n    histo[letters[i]]++;\n\
    \  }\n  console.log(histo);\n  return histo;\n}\n", "\tvar splits = test.split('\
    \ ');\n\tvar histogram = {},\n\t\tcurrentCount;\n\tfor(var i = 0; i < splits.length;\
    \ i++){\n\t\tcurrentCount = histogram[splits[i]] || 0;\n\t\thistogram[splits[i]]\
    \ = currentCount + 1;\n\t}\n\treturn histogram;\n}\n", "  var letters = test.split('\
    \ ');\n  var histogram = Object.create(null);\n  letters.forEach(function(letter){\n\
    \    if (!letter in histogram) histogram[letter] = 0;\n    histogram[letter]++;\n\
    \  });\n  return histogram;\n}\n", "    var result = {};\n    for(var i=0; i<test.length;\
    \ i++){\n        var item = test[i].toLowerCase();\n        if(result[item]){\n\
    \            result[item]++;\n        }else{\n            result[item] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "  var dict = {};\n  var words =\
    \ test.split(' ');\n  for(var i = 0; i < words.length; i++){\n    dict[words[i]]\
    \ = dict[words[i]] ? dict[words[i]] + 1 : 1;\n  }\n  \n  var result = [];\n  for(var\
    \ key in dict){\n    if(dict.hasOwnProperty(key)){\n      result.push([key, dict[key]]);\n\
    \    }\n  }\n  \n  result.sort(function(a, b){\n    return b[1] - a[1];\n  });\n\
    \  \n  return result;\n}\n", "    var words = test.split(\" \");\n    var map\
    \ = {};\n    for(var i = 0; i < words.length; i++){\n        var char = words[i];\n\
    \        var count = map[char] || 0;\n        map[char] = count + 1;\n    }\n\
    \    return map;\n}\n", "  var histogram = {};\n  var tokens = test.trim().split(\"\
    \ \");\n  for(var i = 0; i < tokens.length; i++){\n    var letter = tokens[i];\n\
    \    if(histogram[letter] === undefined){\n      histogram[letter] = 1;\n    }\
    \ else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n}\n", " \
    \   var letterCounts = {};\n    test.split(' ').forEach(function(letter){\n  \
    \      if (letterCounts[letter] == null){\n            letterCounts[letter] =\
    \ 1;\n        } else {\n            letterCounts[letter] += 1;\n        }\n  \
    \  });\n    return letterCounts;\n}\n", "  test = test.split(\" \");\n  var d\
    \ = {}, \n      max = 0,\n      maxLetter;\n  test.forEach(function(item){\n \
    \   if (d.hasOwnProperty(item)){\n      d[item]++;\n    } else {\n      d[item]\
    \ = 1;\n    }\n  });\n  for (var key in d) {\n    if (d[key] > max) {\n      max\
    \ = d[key];\n      maxLetter = key;\n    }\n  }\n  return { count: max, letter:\
    \ maxLetter };\n}\n", "   var strs = test.split(\" \");\n   var hist = {};\n \
    \  strs.forEach(function(item){\n      item = item.toLowerCase();\n      if(hist[item]\
    \ == undefined){\n         hist[item] = 1;\n      }\n      else{\n         hist[item]\
    \ += 1;\n      }\n   });\n   return hist;\n}\n", "  var histo = {}, max = 0;\n\
    \  test.toLowerCase().split(' ').forEach(function(word){\n    var letter = word.split('').sort().join('');\n\
    \    histo[letter] || (histo[letter] = {});\n    histo[letter][word] = histo[letter][word]\
    \ || 0;\n    histo[letter][word]++;\n    max = Math.max(histo[letter][word], max);\n\
    \  });\n  return histo;\n}\n", "\tvar histogram = {};\n\tvar words = test.split('\
    \ ');\n\tfor (var i = 0; i < words.length; i++){\n\t\thistogram[words[i]] = 0;\n\
    \t}\n\tvar max = 0;\n\tfor (var letter in histogram){\n\t\tvar count = histogram[letter];\n\
    \t\tif (count > max){\n\t\t\tmax = count;\n\t\t}\n\t}\n\tfor (var key in histogram){\n\
    \t\tif (histogram[key] == max){\n\t\t\thistogram[key] = 1;\n\t\t}\n\t}\n\treturn\
    \ histogram;\n}\n", "  if (test) {\n    test = test.toLowerCase();\n  }\n  var\
    \ histogram = {};\n  var strings = test.split(' ');\n  for (var i = 0; i < strings.length;\
    \ i++) {\n    var letter = strings[i];\n    histogram[letter] = histogram[letter]\
    \ + 1 || 1;\n  }\n  return histogram;\n}\n", "  test = \"a\" + test;\n  var letters\
    \ = test.split(\"\");\n  var count = {};\n  for(var i = 0; i < letters.length;\
    \ i++){\n    letter = letters[i];\n    count[letter] = count[letter] ? count[letter]\
    \ + 1 : 1;\n  }\n  return count;\n}\n", "    var result = {};\n    test.split(\"\
    \").forEach(function(letter){\n        result[letter] = result[letter] ? result[letter]\
    \ + 1 : 1;\n    });\n\n    // Sort the letters alphabetically\n    Object.keys(result).sort().forEach(function(letter){\n\
    \        if (letter !== undefined){\n            // Keep the key with the highest\
    \ repetition\n            if (result[letter] > result[result[0]]) {\n        \
    \        result[0] = letter;\n            }\n            // Keep the key with\
    \ the lowest repetition\n            if (result[letter] < result[result[letter]]){\n\
    \                result[letter] = result[result[letter]];\n            }\n   \
    \     }\n    });\n\n    return result;\n}\n", "  var histogram = {};\n  var testArray\
    \ = test.split(' ');\n  var length = testArray.length;\n  for (var i = 0; i <\
    \ length; i++) {\n    if (histogram[testArray[i]]){\n      histogram[testArray[i]]\
    \ = histogram[testArray[i]] + 1;\n    }else{\n      histogram[testArray[i]] =\
    \ 1;\n    }\n  }\n  return histogram;\n}\n", "  var count = {},\n      words =\
    \ test.split(\" \"),\n      i, word, len;\n\n  for (i = 0, len = words.length;\
    \ i < len; i++){\n    word = words[i];\n    count[word] = count[word] ? count[word]\
    \ + 1 : 1;\n  }\n\n  for(word in count){\n    if(count.hasOwnProperty(word)){\n\
    \      count[word] = count[word];\n    }\n  }\n\n  return count;\n}", "  var letters_counter\
    \ = {}\n  for (var i = 0; i < test.length; i++){\n    letters_counter[test[i]]\
    \ = letters_counter[test[i]] ? letters_counter[test[i]] + 1 : 1;\n  }\n  var max_count\
    \ = max(letters_counter.values());\n  var letters_without_count = filter(keys(letters_counter),\
    \ function(letter){\n    return letters_counter[letter] === 1;\n  });\n  return\
    \ letters_without_count.map(function(letter){\n    return {letter: letter, count:\
    \ letters_counter[letter], max_count: max_count};\n  });\n}\n", "  var result\
    \ = {};\n  var str = test.toLowerCase().split(\" \");\n  for(var i=0; i<str.length;\
    \ i++){\n    if(result[[str[i]]]){\n      result[[str[i]]] += 1;\n    }\n    else{\n\
    \      result[[str[i]]] = 1;\n    }\n  }\n  return result;\n}", "    var histo\
    \ = {},\n        words = test.split(' '),\n        len = words.length;\n    if(len\
    \ == 0) return histo;\n    for(var i = 0; i < len; i++){\n        var word = words[i];\n\
    \        if(histo[word]) histo[word]++;\n        else histo[word] = 1;\n    }\n\
    \    return histo;\n}\n", "    var counts = {},\n        words = test.split('\
    \ '),\n        i, word;\n    for(i = 0; i < words.length; i++){\n        word\
    \ = words[i];\n        counts[word] = counts[word] || 0;\n        counts[word]++;\n\
    \    }\n    return counts;\n}\n", "  var letterCounts = {};\n  for (var i = 0;\
    \ i < test.length; i++){\n    letterCounts[test[i]] = letterCounts[test[i]] ?\n\
    \                             letterCounts[test[i]] + 1 : 1;\n  }\n  return letterCounts;\n\
    }\n", "    var letters = test.split(' ');\n    var counts = {};\n    for (var\
    \ i = 0; i < letters.length; i++){\n        var letter = letters[i];\n       \
    \ var count = letters.filter(function(l){ return l == letter }).length;\n    \
    \    counts[letter] = count;\n    }\n    return counts;\n}", "  let obj={}\n \
    \ test=test.split(' ')\n  test.forEach(letter=>{\n    letter=letter.toLowerCase()\n\
    \    let counter=obj[letter]||0\n    obj[letter]=counter+1\n  })\n  return obj\n\
    }\n", "\tvar i, letter, count = {}, max = 0;\n\tif (test){\n\t\tvar words = test.split('\
    \ ');\n\t\tfor (i = 0; i < words.length; i++){\n\t\t\tletter = words[i].toLowerCase();\n\
    \t\t\tcount[letter] = count[letter] ? count[letter] + 1 : 1;\n\t\t\tif (count[letter]\
    \ > max){\n\t\t\t\tmax = count[letter];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n\
    }\n", "  let res = {};\n  for (let ch of test.split(' ')){\n    let cnt = res[ch]\
    \ || 0;\n    res[ch] = cnt + 1;\n  }\n  return res;\n}\n", "  var testCounts =\
    \ {};\n  test.split(' ').forEach(function(letter){\n    if(testCounts[letter]\
    \ == undefined){\n      testCounts[letter] = 0;\n    }\n    testCounts[letter]++;\n\
    \  });\n  var maxCount = 0, maxLetter, maxValue = 1;\n  for(var letter in testCounts){\n\
    \    if(testCounts[letter] > maxCount){\n      maxCount = testCounts[letter];\n\
    \      maxLetter = letter;\n    }\n  }\n  maxValue = testCounts[maxLetter];\n\
    \  var hist = {};\n  for(var letter in testCounts){\n    if(testCounts[letter]\
    \ == maxValue){\n      hist[letter] = 1;\n    }else{\n      hist[letter] = testCounts[letter];\n\
    \    }\n  }\n  return hist;\n}\n\n", "  let dict = {};\n  test.split(' ').map(e=>dict[e]\
    \ = dict[e]? dict[e]+1 : 1);\n  let max = 0;\n  let k = [];\n  for (let key in\
    \ dict){\n    if (max < dict[key]){\n      max = dict[key];\n      k = [key];\n\
    \    }\n    else if (dict[key] == max){\n      k.push(key);\n    }\n  }\n  return\
    \ {'count': max, 'letters': k};\n}\n", "  var result = {},\n      max = 0;\n \
    \ for (var i = 0; i < test.length; i++) {\n    var letter = test[i], count = 0;\n\
    \    if (result.hasOwnProperty(letter)) {\n      count = result[letter];\n   \
    \ }\n    result[letter] = count++;\n    if (count > max) {\n      max = count;\n\
    \    }\n  }\n  return result;\n}\n", "  var tests = test.trim().split(' ');\n\
    \  var histogram = {};\n  for (var i = 0; i < tests.length; i++){\n    var testLetter\
    \ = tests[i];\n    if (histogram[testLetter] === undefined) histogram[testLetter]\
    \ = 1;\n    else histogram[testLetter]++;\n  }\n  return histogram;\n}\n", " \
    \ let counts = {};\n  test.split(' ').forEach(letter => {\n    counts[letter]\
    \ = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n}\n",
  "  var max = {},\n      curmax = [],\n      len = test.length;\n  for(var i=0;i<len;i++){\n\
    \    if(max[test[i]]){\n      max[test[i]]++;\n      curmax.push([test[i],max[test[i]]]);\n\
    \    }\n    else{\n      max[test[i]] = 1;\n      curmax.push([test[i],1]);\n\
    \    }\n  }\n  \n  var max2 = {},\n      curmax2 = [];\n  for(var k in max){\n\
    \    max2[k] = max[k];\n    curmax2.push([k,max[k]]);\n  }\n  \n  var max3 = {},\n\
    \      curmax3 = [];\n  for(var k in max2){\n    max3[k] = Math.max(max2[k],max[k]);\n\
    \    curmax3.push([k,max2[k]]);\n  }\n  \n  var max4 = {};\n  for(var k in max3){\n\
    \    if(max4[k] == undefined || (max4[k] != max3[k] &&\n      (max[k] == max3[k]))){\n\
    \      max4[k] = max3[k];\n    }\n  }\n  \n  return {\n    max : max4,\n    counts\
    \ : curmax\n  }\n}\n", "  var histo = {};\n  var words = test.split(' ');\n  words.forEach(function(w){\n\
    \    var count = 0;\n    var letters = w.split('');\n    for (var i = 0; i<letters.length;\
    \ i++) {\n      if (histo[letters[i]]) {\n        histo[letters[i]]++;\n     \
    \ } else {\n        histo[letters[i]] = 0;\n      }\n      count++;\n    }\n \
    \ });\n  return histo;\n}\n", "\tvar histo = {};\n\tvar tokens = test.split('\
    \ ');\n\tfor(var i in tokens){\n\t\tvar token = tokens[i];\n\t\tvar count = 0;\n\
    \t\tif(!histo[token])\n\t\t\thisto[token] = 0;\n\t\tfor(var j in histo)\n\t\t\t\
    count += histo[j];\n\t\thisto[token] = count;\n\t}\n\treturn histo;\n}", "   \
    \ if (test == \"\") return {};\n    var letters = test.toLowerCase().split(' ');\n\
    \    var histogram = {};\n    for (var i = 0; i < letters.length; i++){\n    \
    \    if (histogram.hasOwnProperty(letters[i])){\n            histogram[letters[i]]++;\n\
    \        } else {\n            histogram[letters[i]] = 1;\n        }\n    }\n\
    \    return histogram;\n}", "  // Sort the test string into letters.\n  var letters\
    \ = test.toLowerCase().split(' ');\n  var histogram = {};\n  var i, count, letter;\n\
    \  for(i=0; i<letters.length; i++){\n    letter = letters[i];\n    if(histogram.hasOwnProperty(letter)){\n\
    \      count = histogram[letter];\n    }else{\n      count = 1;\n    }\n    histogram[letter]\
    \ = count++;\n  }\n  return histogram;\n}\n", "\tvar results = {};\n\tvar chars\
    \ = test.split(' ');\n\tchars.forEach(function(c) {\n\t\tvar count = results.hasOwnProperty(c)\
    \ ? results[c] : 0;\n\t\tresults[c] = count + 1;\n\t});\n\treturn results;\n}\n",
  "  test = test.split(' ').sort();\n  var dictionary = {};\n  var highestCountLetter\
    \ = test[0];\n  var highestCount = 0;\n  var highestCountCount = 0;\n  var highestCountLetterIndex\
    \ = 0;\n  var currentLetter;\n  for(var i = 0; i < test.length; i++){\n    currentLetter\
    \ = test[i];\n    if(dictionary[currentLetter] == null){\n      dictionary[currentLetter]\
    \ = 1;\n    }else{\n      dictionary[currentLetter] += 1;\n    }\n    if(dictionary[currentLetter]\
    \ > highestCount){\n      highestCount = dictionary[currentLetter];\n      highestCountLetter\
    \ = currentLetter;\n      highestCountCount = 1;\n      highestCountLetterIndex\
    \ = i;\n    }else if(dictionary[currentLetter] === highestCount && i < test.length\
    \ - 1){\n      if(dictionary[test[i]] <= highestCountCount){\n        highestCount\
    \ = dictionary[currentLetter];\n        highestCountLetter = currentLetter;\n\
    \        highestCountCount = dictionary[test[i]];\n        highestCountLetterIndex\
    \ = i;\n      }\n    }\n  }\n  return dictionary;\n}\n", "  var str = test.split('\
    \ '),\n      len = str.length,\n      freq = {},\n      max = 0;\n  for(var i=0;\
    \ i<len; i++){\n    var letter = str[i];\n    var count = freq[letter] ? freq[letter]+1\
    \ : 1;\n    if(count > max) freq[letter] = count;\n    else delete freq[letter];\n\
    \  }\n  var result = {};\n  for(var letter in freq) result[letter] = freq[letter];\n\
    \  return result;\n}\n", "\tvar words = test.split(' ');\n\tvar histo = buildHistogram(words);\n\
    \treturn {\n\t\tmax: getMax(histo),\n\t\twords: words\n\t};\n}\n", "  test = test.split('\
    \ ');\n  var histo = {}, max=0, c;\n  for (var i=0;i<test.length;i++) {\n    c\
    \ = histo[test[i]] ? histo[test[i]]+1 : 1;\n    histo[test[i]] = c;\n    if (c\
    \ > max) {\n      max = c;\n    }\n  }\n  return histo;\n}\n", "    var res =\
    \ {};\n    test = test.toLowerCase().split(' ');\n    var count = {};\n    for\
    \ (var i = 0; i < test.length; i++){\n        if (!(test[i] in count)){\n    \
    \        count[test[i]] = 0;\n        }\n        count[test[i]]++;\n    }\n  \
    \  for (var key in count){\n        if (count.hasOwnProperty(key)){\n        \
    \    if (count[key] > 0){\n                res[key] = count[key];\n          \
    \  } else {\n                delete count[key];\n            }\n        }\n  \
    \  }\n    return res;\n}\n", "    var histo = {}, max = 0;\n    var words = test.split('\
    \ ');\n    for(var i = 0; i < words.length; i++){\n        if(histo[words[i]]\
    \ == undefined)\n            histo[words[i]] = 0;\n        histo[words[i]]++;\n\
    \        if(histo[words[i]]>max){\n            max = histo[words[i]];\n      \
    \  }\n    }\n    return histo;\n}", "    var res = Object.create(null);\n    var\
    \ list = test.split(' ');\n    var maxCount = 0;\n\n    for (var i = 0; i < list.length;\
    \ i++){\n        var count = list.filter(function(item){\n            return item\
    \ === list[i];\n        }).length;\n        if (count > maxCount){\n         \
    \   maxCount = count;\n        }\n    }\n\n    for (var key in res){\n       \
    \ if (res.hasOwnProperty(key)){\n            res[key] = maxCount;\n        }\n\
    \    }\n\n    return res;\n}\n</code>\n<|/ a dscore=2 tags=javascript,algorithm,arrays,sorting\
    \ |>\n<| c |>\nNice solution and nice explanation! But I don't understand this\
    \ part:\n`function countOccurrences(word) {\n    return word.split('').filter(function(i)\
    \ { return !!~word.indexOf(i); }).length;\n}`\nDoes it filter all non empty strings\
    \ from the input array?\n<|/ c |>\n<| c |>\nThe `!!~` is to convert `true` as\
    \ 1 and `false` as 0. Using `indexOf` will give us an undefined value on false\
    \ (so `~1` is 1) and a true value on true (so `~0` is 0). It is the inverse of\
    \ using `!~`.\n<|/ c |>\n<| a tags=javascript,algorithm,arrays,sorting |>\nThis\
    \ is very similar to David's answer but uses reduce instead of a map and indexOf.\
    \ Both are O(n) though.\n<code>", "  var histogram = {};\n  for (var i = 0; i\
    \ < test.length; i++){\n    if (histogram[test[i]]) {\n      histogram[test[i]]++;\n\
    \    } else {\n      histogram[test[i]] = 1;\n    }\n  }\n  return histogram;\n\
    }", "   var histogram = {};\n   var temp;\n   var count = 0;\n   var splitArr\
    \ = test.toLowerCase().split(' ');\n   var letter = splitArr.shift(); //Remove\
    \ the first letter\n   for (let i = 0; i < splitArr.length; i++){\n     temp =\
    \ splitArr[i];\n     if (histogram[temp] == undefined) histogram[temp] = 1;\n\
    \     else histogram[temp] += 1;\n   }\n   for (let j = 0; j < splitArr.length;\
    \ j++){\n     temp = splitArr[j];\n     if (histogram[temp] > count){\n      \
    \ count = histogram[temp];\n       letter = temp;\n     }\n   }\n   return {'letter':\
    \ letter, 'count': count};\n}", "    var letters, frequency, i, letter, letterFrequency,\
    \ letterCount;\n    letters = test.split(' ');\n    frequency = {};\n    for(i\
    \ = 0; i < letters.length; i++){\n        letter = letters[i];\n        letterFrequency\
    \ = frequency.hasOwnProperty(letter) ? frequency[letter] : 0;\n        letterCount\
    \ = letterFrequency + 1; //+1 because of the +1 added in the for loop\n      \
    \  frequency[letter] = letterCount;\n    }\n    return frequency;\n}\n", "\tvar\
    \ histogram = Object.create(null),\n\t\tletterCount,\n\t\tcurrentLetter;\n\n\t\
    letterCount = {};\n\tfor (var i = 0; i < test.length; i++){\n\t\tcurrentLetter\
    \ = test[i];\n\t\tif (histogram[currentLetter]) {\n\t\t\thistogram[currentLetter]++;\n\
    \t\t} else {\n\t\t\thistogram[currentLetter] = 1;\n\t\t}\n\t\tif (letterCount[currentLetter])\
    \ {\n\t\t\tletterCount[currentLetter] += 1;\n\t\t} else {\n\t\t\tletterCount[currentLetter]\
    \ = 1;\n\t\t}\n\t}\n\treturn histogram;\n}\n", "    var letters = {},\n      \
    \  len = test.split(' ').length,\n        i,\n        letter;\n\n    for (i =\
    \ 0; i < len; i++){\n        letter = test.substr(i, 1);\n        letters[letter]\
    \ = (letters[letter] || 0) + 1;\n    }\n    \n    return letters;\n}\n", "  var\
    \ letters = test.split(' '),\n      histo = {},\n      max = 0,\n      maxCount;\n\
    \n  letters.forEach(function(letter){\n    var val = histo[letter] || 0;\n   \
    \ histo[letter] = val + 1;\n    if(val > max){\n      max = val;\n      maxCount\
    \ = 1;\n    }else if(val === max){\n      maxCount += 1;\n    }\n  });\n\n  return\
    \ histo;\n}\n", "    var chars = test.split(' ');\n    var letters = {};\n   \
    \ for(var i = 0; i < chars.length; i++){\n        var letter = chars[i];\n   \
    \     if(letter in letters){\n            letters[letter]++;\n        }else{\n\
    \            letters[letter] = 1;\n        }\n    }\n    return letters;\n}",
  "    var res = {};\n    var tmpStrArr = test.split(/\\s+/);\n    var lenStrArr =\
    \ tmpStrArr.length;\n    for(var i=0; i<lenStrArr; i++){\n        var thisStr\
    \ = tmpStrArr[i];\n        res[thisStr] = res[thisStr] || 0;\n        res[thisStr]++;\n\
    \    }\n    return res;\n}\n", "  var dict = {};\n  var testString = test.split(\"\
    \ \");\n  for (var i = 0; i < testString.length; i++){\n    var word = testString[i];\n\
    \    if (dict[word]){\n      dict[word]++;\n    }else{\n      dict[word] = 1;\n\
    \    }\n  }\n  return dict;\n}\n", "\tvar histo = {},\n\t\tsplit = function(x){\n\
    \t\t\treturn x.split(' ').length;\n\t\t},\n\t\tlen = test.split(' ').length,\n\
    \t\ti = -1;\n\twhile(++i < len){\n\t\tif (histo[test[i]] === undefined){\n\t\t\
    \thisto[test[i]] = 1;\n\t\t} else {\n\t\t\thisto[test[i]]++;\n\t\t}\n\t}\n\treturn\
    \ histo;\n}", "  var dictionary = {};\n  var i, char, occurrences = 1;\n  for(i\
    \ = 0; i < test.length; i++){\n    char = test.charAt(i);\n    dictionary[char]\
    \ = dictionary[char] || 0;\n    dictionary[char] += 1;\n    occurrences *= dictionary[char];\n\
    \  }\n  return occurrences > 1 ? dictionary : undefined;\n}\n", "    var histogram\
    \ = dict.create();\n    var tokens = string.trim(test).split(' ');\n    tokens.forEach(function(element){\n\
    \        if (dict.isKey(histogram,element)){\n            var value = dict[element];\n\
    \            dict[element] = dict[element] + 1;\n        }\n        else{\n  \
    \          dict[element] = 1;\n        }\n    });\n    return histogram;\n}\n\
    </code>\nSo I now have the histogram function. I want to be able to count the\
    \ number of occurrences of every letter in a given string, return the string with\
    \ the most occurrences and return the letters sorted by most frequent.\n<|/ q\
    \ |>\n<| c |>\nPlease post the code you have so far.  We can help you correct\
    \ it if you're having trouble getting it to work.\n<|/ c |>\n<| c |>\nHi Ross.\
    \ I posted the code I have. Thanks for taking a look.\n<|/ c |>\n<| a tags=javascript\
    \ |>\nYou do not have a count function.\n<code>", "\tvar s = test.split(' ').sort();\n\
    \tvar h = {'': 0};\n\tfor(var i in s){\n\t\tif(!h[s[i]])\n\t\t\th[s[i]] = 1;\n\
    \t\telse\n\t\t\th[s[i]]++;\n\t}\n\treturn h;\n}\n", "\tvar result = {};\n\tvar\
    \ testArr = test.split(' ');\n\tfor(var i = 0; i < testArr.length; i++){\n\t\t\
    result[ testArr[i] ] = result[ testArr[i] ] || 0;\n\t\tresult[ testArr[i] ] +=\
    \ 1;\n\t}\n\tfor(i in result){\n\t\tif( result.hasOwnProperty(i) && result[i]\
    \ === result.max){\n\t\t\tdelete result[i];\n\t\t}\n\t}\n\treturn result;\n}\n",
  "\tlet histogram = test.split(' ').\n\t\treduce((acc, element) => {\n\t\t\tif (!acc[element])\
    \ acc[element] = 1;\n\t\t\telse acc[element] += 1;\n\t\t\treturn acc;\n\t\t},\
    \ {});\n\treturn Object.entries(histogram).\n\t\tsort((first, second) => second[1]\
    \ - first[1]).\n\t\treduce((acc, entry) => {\n\t\t\tacc.push(entry[0]);\n\t\t\t\
    return acc;\n\t\t}, []);\n}", "  var testChars = test.split('');\n  var result\
    \ = {};\n  for(var i=0;i<testChars.length;i++){\n    var char = testChars[i].trim();\n\
    \    var count = result[char] || 0;\n    result[char] = count+1;\n  }\n  return\
    \ result;\n}\n", "\tvar res = {}; //A dictionary to store the results\n\tvar str\
    \ = ''; //The string to be scanned\n\tvar words = test.split(' '); //Split into\
    \ words\n\tvar len = words.length; //The number of words in the string\n\n\tfor\
    \ (var i=0; i<len; i++){\n\t\tstr += words[i]; //Add each word in the array to\
    \ the string\n\t}\n\n\tstr = $.trim(str); //Remove the whitespace\n\n\tfor (var\
    \ i=0; i<str.length; i++){\n\t\tif (str.substr(i, 1) == ' '){\n\t\t\tcontinue;\
    \ //Skip spaces if the string is empty\n\t\t}\n\t\tfor (var j = i+1; j < str.length;\
    \ j++){\n\t\t\t//Increase the occurrence of each character until a letter is found\n\
    \t\t\t//or a space is reached.\n\t\t\t//If a space is reached, stop iterating.\n\
    \t\t\t//Add this character to the dictionary.\n\t\t\t//If the dictionary already\
    \ contains the letter,\n\t\t\t//increase its occurrence.\n\t\t\tif (str.substr(i,\
    \ j) == str.substr(i, j)){\n\t\t\t\tfor (var k = j+1; k < str.length; k++){\n\t\
    \t\t\t\tif (str.substr(i, 1) == str.substr(i, 1) && str.substr(j, 1) == str.substr(j,\
    \ 1)){\n\t\t\t\t\t\tif (!res[str.substr(i, 1)]) res[str.substr(i, 1)] = 0;\n\t\
    \t\t\t\t\tres[str.substr(i, 1)] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn res;\n}\n", "    var result = {};\n    var list = test.split(' ');\n\
    \    for(var i = 0; i < list.length; i++){\n      var currentLetter = list[i];\n\
    \      if(result[currentLetter]){\n          result[currentLetter]++;\n      }else{\n\
    \        result[currentLetter] = 1;\n      }\n    }\n    return result;\n  }\n\
    \  ", "    var dict = {};\n    test.split(\"\").forEach(function(letter) {\n \
    \       var count = dict[letter] || 0;\n        dict[letter] = count + 1;\n  \
    \  });\n    return dict;\n}\n</textarea>\n  </div>\n</div>\n\n<!-- * * * * * *\
    \ * * * * * * * * * * * * * * * * * * * * * * * * *\n *                      \
    \    Util functions                              *\n * * * * * * * * * * * * *\
    \ * * * * * * * * * * * * * * * * * *-->\n<section class=\"row-fluid\">\n  <h4>Utility</h4>\n\
    \n  <div class=\"row-fluid\">\n    <div class=\"span6\">\n      <p style=\"color:\
    \ red; margin-bottom: 10px\">To do: add more utility functions</p>\n      <ul\
    \ class=\"thumbnails\">\n        <li><a href=\"#\" class=\"thumbnail\">CSS3 Transitions</a></li>\n\
    \        <li><a href=\"#\" class=\"thumbnail\">Scroll Lock</a></li>\n        <li><a\
    \ href=\"#\" class=\"thumbnail\">Tab Bar</a></li>\n      </ul>\n    </div>\n \
    \ </div>\n</section>\n\n\n<section class=\"row-fluid\">\n  <hr>\n  <div class=\"\
    row-fluid\">\n    <h6 class=\"span12\">Usage</h6>\n\n    <pre class=\"prettyprint\"\
    >\n&lt;ul class=\"thumbnails\"&gt;\n  &lt;li&gt;\n    &lt;a href=\"#\" class=\"\
    thumbnail\"&gt;\n      &lt;img src=\"path/to/img\"&gt;\n      &lt;h3&gt;Heading&lt;/h3&gt;\n\
    \      &lt;p&gt;Description&lt;/p&gt;\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</pre>\n\
    \n    <pre class=\"prettyprint\">", "\tvar letters = test.split(' ');\n\tvar histogram\
    \ = {};\n\tletters.forEach(function(letter){\n\t\tif (!histogram[letter]){\n\t\
    \t\thistogram[letter] = 1;\n\t\t}else{\n\t\t\thistogram[letter] += 1;\n\t\t}\n\
    \t});\n\treturn histogram;\n}\n", "  const arr1 = test.split(' ');\n  const obj\
    \ = {};\n  const arr2 = [];\n  for(let i = 0, len = arr1.length; i < len; i++){\n\
    \    if(!obj[arr1[i]]){\n      obj[arr1[i]] = 1;\n      arr2.push(arr1[i]);\n\
    \    }else{\n      obj[arr1[i]] += 1;\n    }\n  }\n  return arr2.map(item => ({[item]:\
    \ obj[item]})).reduce((a, b) => {\n    for(let i in b){\n      a[i] = (a[i] ||\
    \ 0) + (b[i] || 0);\n    }\n    return a;\n  }, {});\n}\n", "    var count = {},\n\
    \        letters = test.split(' '),\n        letter;\n\n    for(var i = 0, l =\
    \ letters.length; i < l; i++){\n        letter = letters[i].toLowerCase();\n \
    \       if(count.hasOwnProperty(letter)){\n            count[letter]++;\n    \
    \    } else {\n            count[letter] = 1;\n        }\n    }\n\n    return\
    \ count;\n}\n", "  var testString = test.split(' ').join('');\n  var hash = {};\n\
    \n  var letters = testString.split('').sort();\n  letters.forEach(function(letter){\n\
    \    hash[letter] = 0;\n  });\n\n  for(var i = 0; i<testString.length; i++){\n\
    \    var letter = testString.charAt(i);\n    hash[letter] += 1;\n  }\n\n  return\
    \ hash;\n}\n", "  if(test.length <= 0){\n    return {};\n  }\n  var letters =\
    \ {};\n  var count = {};\n  var max = 0;\n  var current;\n  var i;\n  for(i =\
    \ 0; i < test.length; i++){\n    current = test.charAt(i);\n    if(!letters[current]){\n\
    \      letters[current] = 0;\n    }\n    letters[current]++;\n    if(letters[current]\
    \ > max){\n      max = letters[current];\n    }\n  }\n  for(i = 0; i < test.length;\
    \ i++){\n    current = test.charAt(i);\n    if(!count[current]){\n      count[current]\
    \ = 0;\n    }\n    count[current]++;\n  }\n  for(i = 0; i < test.length; i++){\n\
    \    current = test.charAt(i);\n    if(!letters[current]){\n      letters[current]\
    \ = 0;\n    }\n    if(letters[current] > max){\n      max = letters[current];\n\
    \    }\n  }\n  for(i = 0; i < test.length; i++){\n    current = test.charAt(i);\n\
    \    if(!count[current]){\n      count[current] = 0;\n    }\n    if(count[current]\
    \ > max){\n      max = count[current];\n    }\n  }\n  var final = {};\n  var counter\
    \ = 0;\n  for(i = 0; i < test.length; i++){\n    current = test.charAt(i);\n \
    \   final[current] = counter;\n    counter++;\n  }\n  return final;\n}\n", " \
    \   if (test) {\n        var letters = test.split(\" \");\n    }\n    else{\n\
    \        var letters = document.querySelectorAll('body > div.container > div.rows\
    \ > div > div > a');\n    }\n    //console.log(letters);\n\n    var histogram\
    \ = new Object();\n\n    for (var i=0; i < letters.length; i++){\n        var\
    \ letter = letters[i].innerHTML.toLowerCase();\n        var count = letters.filter(function\
    \ (element) {\n          return element.innerHTML.toLowerCase() == letter;\n \
    \       }).length;\n        histogram[letter] = count;\n    }\n\n    return histogram;\n\
    }\n", "    var dictionary = {}\n    test.split(\" \")\n    .map(function(letter){\n\
    \        if(dictionary[letter] == undefined){\n            dictionary[letter]\
    \ = 1\n        }else{\n            dictionary[letter] += 1\n        }\n    })\n\
    \    return dictionary\n}\n</code>\n<|/ a tags=arrays,javascript,dictionary |>\n\
    <| c |>\nI got an infinite loop when running this snippet on my browser (chrome\
    \ v.40.0.2214.91)\n<|/ c |>\n<| a dscore=0 |>\nHere is a simple one-line solution\
    \ based on my other answer\n<code>\nlet histogram = test => test.split(' ').map(s\
    \ => s.split('').reduce((a,c)=>(a[c]||(a[c]=1),a),{})).reduce((a,c)=>(a[Object.keys(c)[0]]=Object.values(c)[0],a),{})\n\
    </code>\n<|/ a tags=arrays,javascript,dictionary |>\n<| c |>\nThis is not working\
    \ on firefox 46.0.1 , any alternatives ?\n<|/ c |>\n<| c |>\nI don't know.. it\
    \ works on Chrome, Firefox, Edge and IE11.\n<|/ c |>\n<| c |>\nI meant not working\
    \ for firefox , let me check why it does not work for firefox\n<|/ c |>\n<| a\
    \ dscore=0 tags=arrays,javascript,dictionary |>\nI have an alternative using map()\
    \ and reduce()\n<code>\nconst histogram = (word) => {\n    return word.split(\"\
    \").map((char, i) => ({ [char]: word.split(\"\").reduce((a, c) => a + c.split(\"\
    \").includes(char) ? 1 : 0, 0) }));\n};\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>", "\tlet histogram = {}\n\tlet words = test.split(\" \")\n\twords.forEach(word\
    \ => {\n\t\tlet letter = word[0]\n\t\tif(histogram.hasOwnProperty(letter)){\n\t\
    \t\thistogram[letter] += 1;\n\t\t} else {\n\t\t\thistogram[letter] = 1\n\t\t}\n\
    \t})\n\treturn histogram\n}", "  var result = {};\n  var words = test.split('\
    \ ');\n  words.forEach(function(word) {\n    var letter = word[0];\n    var count\
    \ = word.length;\n    if(!result[letter]){\n      result[letter] = count;\n  \
    \  } else {\n      result[letter] += count;\n    }\n  });\n  return result;\n\
    }\n", "    let dict = {};\n    test.split(\" \").forEach((letter)=>{\n       \
    \ let current = dict[letter];\n        if(!current){\n            dict[letter]\
    \ = 1;\n        }else{\n            dict[letter] = current + 1;\n        }\n \
    \   });\n    return dict;\n}\n", "    let words = test.split(/\\s+/);\n    let\
    \ histogram = {};\n    for (let i=0; i<words.length; i++) {\n        if (words[i]\
    \ in histogram) {\n            histogram[words[i]] += 1;\n        } else {\n \
    \           histogram[words[i]] = 1;\n        }\n    }\n    let sortedKeys = Object.keys(histogram).sort((a,\
    \ b) => histogram[b] - histogram[a]);\n    return sortedKeys.reduce(function(acc,\
    \ cur) {\n        acc[cur] = histogram[cur];\n        return acc;\n    }, {});\n\
    }\n", "  let count = new Object()\n  let words = test.trim().split(' ')\n  for\
    \ (let word in words){\n    count[word] = count[word]+1 || 1\n  }\n  return count\n\
    }\n", "    let dict = {};\n    let letters = test.trim().split(' ');\n    letters.forEach((letter)=>{\n\
    \        let count = 0;\n        if(dict[letter]){\n            dict[letter] =\
    \ dict[letter] + 1;\n        }else{\n            dict[letter] = 1;\n        }\n\
    \    });\n    return dict;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere's a solution\
    \ that uses reduce, destructured parameters, and destructured array literals:\n\
    <code>", "\tvar counter = {}, maxRepetition = 0;\n\tvar testArray = test.split(\"\
    \ \");\n\tfor(var i = 0, len = testArray.length; i < len; i++){\n\t\tif(!counter[testArray[i]])\
    \ counter[testArray[i]] = 1;\n\t\telse counter[testArray[i]]++;\n\t\tif(counter[testArray[i]]\
    \ > maxRepetition) maxRepetition = counter[testArray[i]];\n\t}\n\treturn counter;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
