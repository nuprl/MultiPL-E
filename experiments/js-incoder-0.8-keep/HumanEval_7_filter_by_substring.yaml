name: HumanEval_7_filter_by_substring
language: js
prompt: "//Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\",\
  \ \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"\
  gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["    // Return an empty array if given empty list\n    if(!strings ||\
    \ strings.length === 0) return strings;\n\n    // Filter the given list for ones\
    \ that contain the given substring\n    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n", "  var filtered_strings\
    \ = [];\n  var contains_substring = false;\n  strings.forEach(function(string){\n\
    \    if(string.includes(substring)){\n      contains_substring = true;\n    }\n\
    \    filtered_strings.push(string);\n  });\n  return contains_substring ? filtered_strings\
    \ : null;\n}\n", "\tvar filtered = [];\n\n\tfor(var i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].indexOf(substring) !== -1)\n\t\t\tfiltered.push(strings[i]);\n\
    \t}\n\n\treturn filtered;\n}\n", "    var filtered_strings = [];\n    var index\
    \ = 0;\n    while (index < strings.length){\n        if (strings[index].indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(strings[index]);\n        }\n  \
    \      index++;\n    }\n    return filtered_strings;\n}\n", "  return strings.filter(function\
    \ (string){\n    return string.indexOf(substring) !== -1;\n  });\n}\n", "    return\
    \ strings.filter(function(element){\n        return element.indexOf(substring)\
    \ >= 0;\n    });\n}\n", "  const filteredStrings = [];\n  for(let i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].includes(substring)){\n      filteredStrings.push(strings[i]);\n\
    \    }\n  }\n  return filteredStrings;\n}\n", "    for(var i = 0; i < strings.length;\
    \ i++){\n        if(substring.indexOf(strings[i]) != -1)\n            strings[i]\
    \ = substring;\n    }\n    return strings;\n}\n", "    return strings.filter(function(value){\n\
    \        return value.indexOf(substring) !== -1;\n    });\n}\n", "    return _.filter(strings,\
    \ function(string) {\n        return string.includes(substring);\n    });\n}\n\
    </code>\n<|/ a |>\n<| c |>\nIf you're using lodash, why not use the [_.includes\
    \ function](https://lodash.com/docs/4.17.15#includes) instead of writing your\
    \ own function?\n<|/ c |>\n<| c |>\nThanks for pointing out, I didn't know that.\
    \ I'll edit my answer.\n<|/ c |>\n<| a tags=javascript,underscore.js |>\nIf performance\
    \ is an issue, you could use indexOf(), which doesn't create a new array:\n\n\
    <code>", "  var new_strings = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    if(strings[i].indexOf(substring) === 0){\n      new_strings.push(strings[i]);\n\
    \    }\n  }\n  return new_strings;\n}\n", "    var filtered = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "  if(!strings.length) return [];\n\n  strings = _.clone(strings);\n  var\
    \ results = [];\n\n  _.each( strings , function(str){\n    if(str.indexOf(substring)\
    \ > -1){\n      results.push(str);\n    }\n  });\n\n  return results;\n}\n\n",
  "  return strings.filter(function (str){\n    return str.indexOf(substring) >= 0;\n\
    \  });\n}\n", "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tvar string = strings[i];\n\t\tif( string.indexOf(substring) > -1 ){\n\t\t\t\
    filtered.push(string);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "\tvar result =\
    \ [];\n\tstrings.forEach(function(string){\n\t\tif(string.indexOf(substring) !==\
    \ -1)\n\t\t\tresult.push(string);\n\t});\n\treturn result;\n}\n", "  return strings.filter(function(item){\n\
    \    return item.indexOf(substring) !== -1;\n  });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring);\n  });\n}\n", "  var filtered = [];\n\
    \  for (var i = 0; i < strings.length; i++){\n    if (typeof strings[i] === 'string'){\n\
    \      if (strings[i].indexOf(substring) === 0){\n        filtered.push(strings[i]);\n\
    \      }\n    }\n  }\n  return filtered;\n}\n", "    var new_strings = [];\n \
    \   for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ >= 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n", "  return strings.filter(function(string){\n    return (string.indexOf(substring)\
    \ !== -1);\n  });\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.indexOf(substring) !== -1;\n  });\n}\n", "    for(var i = 0; i<strings.length;\
    \ i++){\n        if(strings[i].includes(substring)){\n            strings.splice(i,\
    \ 1);\n        }\n    }\n    return strings;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n}\n", "  var ret =\
    \ [];\n\n  strings.forEach(function(str){\n    var pos = str.indexOf(substring);\n\
    \    if (pos != -1){\n      ret.push(str);\n    }\n  });\n\n  return ret;\n}\n",
  "    strings = strings.filter(function(item){\n        return item.indexOf(substring)\
    \ > -1;\n    });\n    return strings;\n}\n", "  var result = new Array();\n\n\
    \  for(var i = 0, len = strings.length; i < len; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      result.push(strings[i]);\n    }\n  }\n\n  return result;\n}\n",
  "    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ > -1;\n    });\n}\n", "\tlet filtered_strings = [];\n\tfor (let string of strings){\n\
    \t\tif (string.includes(substring)){\n\t\t\tfiltered_strings.push(string);\n\t\
    \t}\n\t}\n\treturn filtered_strings;\n}\n", "    if(!is_array(strings)){\n   \
    \     strings = [strings];\n    }\n    var ret = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var string = strings[i];\n        if(string.indexOf(substring)\
    \ === 0){\n            ret.push(string);\n        }\n    }\n    return ret;\n\
    }\n", "  return strings.filter(function(x){ return x.indexOf(substring) >= 0;\
    \ });\n}\n", "\tvar re = new RegExp(substring);\n\treturn strings.filter(function(string){\n\
    \t\treturn re.test(string);\n\t});\n}\n", "  var new_strings = [];\n  for(var\
    \ i=0; i<strings.length; i++){\n    if(strings[i].indexOf(substring) > -1){\n\
    \      new_strings.push(strings[i]);\n    }\n  }\n  return new_strings;\n}\n",
  "    return strings.filter(function(item){\n        return item.indexOf(substring)\
    \ > -1;\n    });\n}\n", "    for(var i = 0; i<strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            return strings\n        }\n    }\n    return []\n}", "\treturn strings.filter(function(x){\n\
    \t\treturn x.indexOf(substring) > -1;\n\t});\n}\n", "    var filtered_strings\
    \ = strings.filter(function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n    return filtered_strings;\n}", "    var filtered_strings\
    \ = []\n\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \n    return filtered_strings;\n}\n", "\tlet ret = [];\n\tfor(let i=0; i<strings.length;\
    \ i++){\n\t\tif(strings[i].indexOf(substring) > -1){\n\t\t\tret.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn ret;\n}\n\n", "    for(let string of strings){\n        if(string.includes(substring)){\n\
    \            strings.splice(strings.indexOf(string), 1);\n        }\n    }\n \
    \   return strings;\n}\n", "    return strings.filter(function(element){\n   \
    \     return element.includes(substring);\n    });\n}\n", "    return strings.filter(function\
    \ (string){\n        return string.includes(substring);\n    });\n}\n", "  var\
    \ filtered_strings = [];\n  if(strings.length > 0){\n    for(var i = 0; i < strings.length;\
    \ i++){\n      if(strings[i].includes(substring)){\n        filtered_strings.push(strings[i]);\n\
    \      }\n    }\n  } else {\n    filtered_strings = [];\n  }\n  return filtered_strings;\n\
    }\n", "\treturn strings.filter(function (string){\n\t\treturn string.includes(substring);\n\
    \t});\n}\n", "  return _.filter(strings, function(string){ return string.indexOf(substring)\
    \ !== -1; });\n}\n", "\tlet filtered = strings\n\tfor(const string of strings){\n\
    \t\tif(string.includes(substring)){\n\t\t\tfiltered = filtered.filter(function(item){return\
    \ item != string})\n\t\t}\n\t}\n\treturn filtered\n}\n\n", "    return strings.filter(function(string){\n\
    \        return string.includes(substring);\n    });\n}\n", "    for(let i=0;\
    \ i<strings.length; i++){\n        if(string.indexOf(substring, i) > -1){\n  \
    \          strings.splice(i, 1);\n        }\n    }\n    return strings;\n}\n</code>\n\
    <|/ a tags=algorithm,javascript,string,arrays |>\n<| a tags=algorithm,javascript,string,arrays\
    \ |>\nJust to build on some of the comments and answers here is the Javascript\
    \ solution I came up with. I've tried to follow the KISS principle, and it's pretty\
    \ easy to follow. Hope it helps!\n<code>\nconst filterBySubstring = (string, substring)\
    \ => { \n  let output = [];\n  for (let i = 0; i < string.length; i++) {\n   \
    \ if (string.substring(i, i+substring.length) == substring) {\n      output.push(string.substring(i,\
    \ i+substring.length));\n    }\n  }\n  return output;\n};\n\nconst filterBySubstrings\
    \ = (string, substrings) => {\n  for (let i = 0; i < substrings.length; i++) {\n\
    \    string = filterBySubstring(string, substrings[i]);\n  }\n  return string;\n\
    };\n", "  return strings.filter(function(str){\n    return str.includes(substring);\n\
    \  });\n}\n", "\treturn strings.filter(function(x){\n\t\treturn x.includes(substring);\n\
    \t});\n}\n\n", "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
    \ !== -1;\n  });\n}\n", "    return strings.filter(s => s.includes(substring));\n\
    }\n", "  var filtered_strings = [];\n  for (var i = 0; i < strings.length; i++){\n\
    \    var found_index = strings[i].indexOf(substring);\n    if (found_index ==\
    \ -1){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }", "\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ !== -1){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\n",
  "  return strings.filter(function (string){ return string.indexOf(substring) !==\
    \ -1; });\n}\n", "  return strings.filter(function(str){\n    return str.indexOf(substring)\
    \ > -1\n  })\n}\n", "    return strings.filter(function(string){\n        return\
    \ string.indexOf(substring) !== -1;\n    });\n}\n", "  let matches = [];\n  strings.forEach(function(string){\n\
    \    if(string.indexOf(substring) > -1){\n      matches.push(string);\n    }\n\
    \  });\n  return matches;\n}\n", "  if(!Array.isArray(strings)) strings = [strings]\n\
    \  if(!strings.every(function(s){ return typeof s === 'string' }) || typeof substring\
    \ !== 'string') return strings\n  return strings.filter(function(s){ return s.indexOf(substring)\
    \ > -1 })\n}\n", "  var filtered_array = []\n  \n  if(strings.length > 0){\n \
    \   for(var i=0; i<strings.length; i++){\n      if(strings[i].indexOf(substring)\
    \ >= 0){\n        filtered_array.push(strings[i]);\n      }\n    }\n  }\n  return\
    \ filtered_array;\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.indexOf(substring) > -1;\n  });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) >= 0;\n    });\n}\n", "    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) >= 0;\n  });\n}\n", "    var filtered_strings\
    \ = [];\n    strings.forEach(function(str){\n        if(str.indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(str);\n        }\n    });\n    return\
    \ filtered_strings;\n}\n", "    if (strings === undefined || strings.length ===\
    \ 0) {\n        return strings;\n    }\n    return strings.filter(function (word)\
    \ {\n        return word.indexOf(substring) > -1;\n    });\n}\n", "    var filtered\
    \ = [];\n    for(var i in strings){\n        if(strings.hasOwnProperty(i) && strings[i].indexOf(substring)\
    \ >= 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "  var filtered = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if (strings[i].indexOf(substring) !== -1){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "  return strings.filter(string => string.indexOf(substring)\
    \ >= 0);\n}\n", "  var filtered_strings = []\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) > -1){\n      filtered_strings.push(strings[i])\n\
    \    }\n  }\n  return filtered_strings\n}\n", "  return strings.filter(function\
    \ (val){\n    return val.indexOf(substring) >= 0;\n  });\n}\n", "    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n\
    \            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n", "  return filters.filter(function(word){\n    return\
    \ words.includes(word) && word.includes(substring);\n  });\n}\n", "  let filtered\
    \ = [];\n  for(let s of strings){\n    if(s.includes(substring))\n      filtered.push(s);\n\
    \  }\n  return filtered;\n}\n", "    var filtered = [];\n    \n    for (var i=0;\
    \ i < strings.length; i++){\n        if (strings[i].indexOf(substring) !== -1){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    \n    return filtered;\n\
    }\n", "    return strings.filter(function (word) {\n        return word.toLowerCase().indexOf(substring.toLowerCase())\
    \ !== -1;\n    });\n}", "    var filtered_strings = [];\n    for(var i = 0; i\
    \ < strings.length; i++){\n        var found = true;\n        for(var j = 0; j\
    \ < substring.length; j++){\n            if( strings[i].indexOf(substring[j])\
    \ === -1) found = false;\n        }\n        if(found) filtered_strings.push(strings[i]);\n\
    \    }\n    return filtered_strings;\n}\n", "  return strings.filter(s => s.includes(substring));\n\
    }\n</cell>\n<text>\nWe use the filter_by_substring function to filter our strings\
    \ array in order to remove the ones that do not contain the substring 'a'\n\n\n\
    </text>\n<cell>\nvar filtered_strings = filter_by_substring(strings, 'a');\n</cell>\n\
    <text>\nFinally, we log out the length of the filtered list:\n\n\n</text>\n<cell>",
  "    if (strings.length === 0) return [];\n\n    var filtered_strings = [];\n\n\
    \    strings.forEach(function(string) {\n        if (string.includes(substring))\
    \ filtered_strings.push(string);\n    });\n\n    return filtered_strings;\n}\n",
  "    if(strings.length == 0){\n        return [];\n    }\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            result.push(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "  var ret = []\n  for(var i=0, len=strings.length; i<len; ++i){\n\
    \    if(strings[i].indexOf(substring) !== -1){\n      ret.push(strings[i])\n \
    \   }\n  }\n  return ret\n}\n", "\tvar ret = [];\n\tfor (var i = 0; i != strings.length;\
    \ ++i){\n\t\tif (strings[i].indexOf(substring) != -1)\n\t\t\tret.push(strings[i]);\n\
    \t}\n\treturn ret;\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.indexOf(substring) != -1;\n  });\n}\n", "    return objects.filter(function(s){\n\
    \        return s.indexOf(substring) > -1;\n    });\n}\n", "  return strings.filter(\n\
    \    function (element) {\n      return element.includes(substring);\n    }\n\
    \  );\n}\n", "  return strings.filter(function(s){\n    return s.indexOf(substring)\
    \ >= 0\n  })\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.indexOf(substring) !== -1;\n    });\n}\n", "    var result = [];\n\n   \
    \ for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            result.push(strings[i]);\n        }\n    }\n\n    return\
    \ result;\n}\n", "    return objects.filter(function(string){\n        return\
    \ (string.indexOf(substring) !== -1);\n    }); \n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring)\n  })\n}\n\n", "    return strings.filter(function(s){\n\
    \        return s.indexOf(substring) > -1;\n    });\n}\n", "    var filtered =\
    \ [];\n    strings.forEach(function(str){\n        if(str.indexOf(substring) >\
    \ -1)\n            filtered.push(str);\n    });\n    return filtered;\n}\n", "\t\
    for (var i = 0; i < strings.length; i++){\n\t\tvar current_string = strings[i];\n\
    \t\tif (current_string.indexOf(substring) !== -1){\n\t\t\tstrings.splice(i, 1);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn strings;\n}\n\n", "\tvar filtered_strings = [];\n\
    \tfor(var i=0; i< strings.length; i++){\n\t\tif((strings[i].indexOf(substring)\
    \ != -1)){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "  return strings.filter(s => s.indexOf(substring) !== -1);\n}\n</cell>\n\
    <cell>", "    var res = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      var str = strings[i];\n        if(str.indexOf(substring) > -1){\n     \
    \       res.push(str);\n        }\n    }\n    return res;\n}\n", "  var new_strings\
    \ = [];\n  if(strings.length > 0){\n    var substrings = substring.split('');\n\
    \    var regex = new RegExp(\"^.*\"+substrings.join('.*')+\"$\");\n    for(var\
    \ i = 0; i < strings.length; i++){\n      var s = strings[i];\n      if(regex.test(s)){\n\
    \        new_strings.push(s);\n      }\n    }\n  }\n  return new_strings;\n}\n",
  "    return _.filter(strings, function(string){\n        return _.includes(string,\
    \ substring);\n    });\n}\n", "    var result = [];\n    for(var i in strings){\n\
    \        var new_strings = strings[i].split(substring);\n        new_strings =\
    \ new_strings.filter(function(string){return string!=\"\";}); //remove empty strings\n\
    \        new_strings = new_strings.map(function(string){return string+substring;});\n\
    \        new_strings = new_strings.filter(function(string){return new_strings.indexOf(string)\
    \ === -1;}); //remove duplicates\n        for(var j in new_strings)\n        \
    \    result.push(new_strings[j]);\n    }\n    return result;\n}\n", "    var ret\
    \ = []\n    for(var i=0, len = strings.length; i<len; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            ret.push(strings[i])\n        }\n    }\n    return ret\n\
    }\n", "  return strings.filter(string => {\n    return string.indexOf(substring)\
    \ !== -1\n  })\n}\n", "    const results = [];\n    for(let i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].includes(substring)){\n            results.push(strings[i]);\n\
    \        }\n    }\n    return results;\n}\n", "    var filtered_strings = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n", "  return _.filter(strings, function(str){\n\
    \    return str.indexOf(substring) !== -1\n  })\n}\n", "    \n    var filtered\
    \ = [];\n    \n    for (var i = 0; i < strings.length; i++){\n        \n     \
    \   if (strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n\
    \        }\n        \n    }\n    \n    return filtered;\n    \n}\n", "  var result\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n",
  "    var filtered_strings = [];\n    for(var i=0;i<strings.length;i++){\n      \
    \  var s = strings[i];\n        if(s.indexOf(substring)!==-1){\n            filtered_strings.unshift(s);\n\
    \        }\n    }\n    return filtered_strings;\n}\n", "    var results = [];\n\
    \    strings.forEach(function(str){\n        if (str.indexOf(substring) != -1){\n\
    \            results.push(str);\n        }\n    });\n    return results;\n}\n",
  "    if(strings.length == 0){\n        return [];\n    }\n    return strings.filter(function(item){\n\
    \        return item.indexOf(substring) != -1;\n    });\n}\n", "\tvar filtered_strings\
    \ = [];\n\tfor (var i = 0; i < strings.length; i++){\n\t\tif (strings[i].includes(substring)){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "\tvar filtered_strings = []\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].indexOf(substring) !== -1){\n\t\t\tfiltered_strings.push(strings[i])\n\
    \t\t}\n\t}\n\treturn filtered_strings\n}\n", "  strings = strings.filter(function\
    \ (string) {\n    return string.indexOf(substring) > -1;\n  });\n  return strings;\n\
    }\n", "  return strings.filter(function (e){\n    return e.indexOf(substring)\
    \ !== -1;\n  });\n}\n", "\treturn strings.filter(function(string){\n\t\treturn\
    \ string.indexOf(substring) >= 0;\n\t});\n}\n", "\treturn strings.filter(function(el){\n\
    \t\treturn el.indexOf(substring) >= 0;\n\t});\n}\n", "    var result = [];\n \
    \   for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            result.push(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "  var filtered_strings = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(substring) !== -1){\n      filtered_strings.push(\
    \ strings[i] );\n    }\n  }\n  return filtered_strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) !== -1;\n  });\n}\n", "    return filters.call(strings,\
    \ function(x){\n        return x.indexOf(substring) > -1\n    })\n}\n", "    //\
    \ filter out substrings from non-strings\n    return strings.filter(function(string){\n\
    \        return typeof string === 'string' && string.indexOf(substring) !== -1;\n\
    \    });\n}\n</code>\n<|/ a |>\n<| a tags=javascript,ecmascript-6,arrays |>\n\
    For filtering arrays in javascript you can use .some() with .includes()\n\n<code>\n\
    let array = ['hello', 'goodbye', 'hi'];\nlet string = 'hi';", "    var new_strings\
    \ = [],\n        i;\n    for(i=0; i<strings.length; i++){\n        if (strings[i].indexOf(substring)\
    \ !== -1){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n};\n", "  return strings.filter(string => string.includes(substring));\n\
    }\n", "    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(substring) > -1){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "  strings = strings.filter(function\
    \ (elem){\n    return elem.indexOf(substring) !== -1\n  })\n  return strings\n\
    }\n", "\tlet new_strings = strings\n\tfor(let i=0; i<strings.length; i++){\n\t\
    \tif(strings[i].indexOf(substring) != -1){\n\t\t\tnew_strings.splice(i, 1)\n\t\
    \t}\n\t}\n\treturn new_strings\n}\n", "\tvar filtered_strings = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) !== -1){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.indexOf(substring)\
    \ >= 0\n  })\n}\n", "  return [strings[0]].concat(\n    strings.filter(\n    \
    \  function(str){\n        return str.indexOf(substring) !== -1;\n      }\n  \
    \  )\n  );\n}\n", "    var filtered_strings = []\n    strings.forEach(function(string){\n\
    \        if(string.includes(substring)){\n            filtered_strings.push(string)\n\
    \        }\n    })\n    return filtered_strings\n}\n", "    return _.filter(strings,\
    \ function (string) {\n        return string.indexOf(substring) !== -1;\n    });\n\
    }\n", "  var filtered = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n\
    }\n", "\tvar matches = []\n\tfor(var i=0; i<strings.length; i++){\n\t\tif((strings[i].indexOf(substring)\
    \ !== -1)){\n\t\t\tmatches.push(strings[i])\n\t\t}\n\t}\n\treturn matches\n}\n",
  "\tlet new_list = []\n\tfor(let i = 0; i<strings.length; i++){\n\t\tif(strings.substring(i)\
    \ == substring){\n\t\t\tnew_list.push(strings[i])\n\t\t}\n\t}\n\treturn new_list\n\
    }\n", "    var results = [];\n    for(var i = 0; i<strings.length; i++){\n   \
    \     if(strings[i].indexOf(substring) !== -1){\n            results.push(strings[i]);\n\
    \        }\n    }\n    return results;\n}", "  var ret = []\n  for(var i = 0;\
    \ i < strings.length; i++){\n    if(strings[i].indexOf(substring) !== -1)\n  \
    \    ret.push(strings[i])\n  }\n  return ret\n}\n", "  return strings.filter(function(value){\n\
    \    return value.indexOf(substring) >= 0;\n  });\n}\n", "  var i, len;\n  for(i\
    \ = 0, len = strings.length; i < len; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      strings.splice(i, 1);\n      i--;\n      len--;\n    }\n  }\n\
    \  return strings;\n}\n\n", "    let filtered = new Array();\n    for(let i=0;\
    \ i<strings.length; i++){\n        if(strings[i].includes(substring)){\n     \
    \       filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n",
  "    var new_array = [];\n    for(var i = 0; i < strings.length; i++){\n       \
    \ if(strings[i].indexOf(substring) > -1){\n            new_array.push(strings[i]);\n\
    \        }\n    }\n    return new_array;\n}\n\n", "  var filtered_strings = [];\n\
    \  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "\tvar ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring)\
    \ !== -1){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\n", " \
    \ var filtered = [];\n  \n  for(var i = 0; i<strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      filtered.push(strings[i]);\n    }\n  }\n  \n  return filtered;\n\
    }\n", "  var result = [];\n  for (var i=0; i<strings.length; i++){\n    var s\
    \ = strings[i];\n    if (s.indexOf(substring) > -1){\n      result.push(s);\n\
    \    }\n  }\n  return result;\n}\n", "  return strings.filter(function (str){\n\
    \    return str.includes(substring);\n  });\n}\n", "    return _.filter(strings,\
    \ function(string){ return string.includes(substring) });\n}\n", "  var filtered_strings\
    \ = strings.filter(function(string){\n    return string.includes(substring);\n\
    \  });\n  return filtered_strings;\n}\n", "    var new_strings = [];\n\n    strings.forEach(function(string){\n\
    \        if(string.includes(substring)){\n            new_strings.push(string);\n\
    \        }\n    });\n    return new_strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) !== -1\n  })\n}\n", "    var filtered =\
    \ [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "  return strings.filter(function(string){\n    return string.indexOf(substring)\
    \ !== -1;\n  });\n}\n</textarea>\n<style data-target=\"print-only\">@media screen\
    \ {.reveal pre { display: none !important; }}</style>\n<script async src=\"reveal.js/js/reveal.js\"\
    ></script>\n<script>\n(function(){\n  var config = {\n    controls: true,\n  \
    \  progress: true,\n    history: true,\n    center: true,\n    hash: true,\n \
    \   embedded: true,\n    showNotes: true,\n    showLastSlide: true,\n    theme:\
    \ Reveal.getQueryHash().theme, // available themes are in /css/theme\n    transition:\
    \ Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none\n\
    \n    // Parallax scrolling\n    // parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',\n\
    \    // parallaxBackgroundSize: '2100px 900px',\n\n    // Optional libraries used\
    \ to extend on reveal.js\n    dependencies: [\n      { src: 'reveal.js/lib/js/classList.js',\
    \ condition: function() { return !document.body.classList; } },\n      { src:\
    \ 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector(\
    \ '[data-markdown]' ); } },\n      { src: 'reveal.js/plugin/markdown/markdown.js',\
    \ condition: function() { return !!document.querySelector( '[data-markdown]' );\
    \ } },\n      { src: 'reveal.js/plugin/highlight/highlight.js', async: true, callback:\
    \ function() { hljs.initHighlightingOnLoad(); } },\n      { src: 'reveal.js/plugin/zoom-js/zoom.js',\
    \ async: true, condition: function() { return !!document.body.classList; } },\n\
    \      { src: 'reveal.js/plugin/notes/notes.js', async: true, condition: function()\
    \ { return !!document.body.classList; } }\n    ]\n  };\n\n  if(window.location.search.match(\
    \ /print-pdf/gi )) {\n    config.width = 'auto';\n  }\n\n  Reveal.initialize(config);\n\
    \n})();\n</script>\n<script>\nwindow.addEventListener('message', function(event)\
    \ {\n  if(event.data.action === 'open')\n    window.open(event.data.file);\n});\n\
    </script>\n</section>\n\n<section>\n  <h1>Introduction into Python</h1>\n  <p>\n\
    \  I spend most of my time in Julia and R. Python is a language that can get some\n\
    \  things done quickly and easily, but takes long", "\tvar found = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) !== -1){\n\
    \t\t\tfound.push(strings[i]);\n\t\t}\n\t}\n\treturn found;\n}\n", "\tvar filtered_list\
    \ = [],\n\t\ti = 0;\n\twhile (i < strings.length){\n\t\tif (strings[i].indexOf(substring)\
    \ != -1){\n\t\t\tfiltered_list.push(strings[i]);\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ filtered_list;\n}\n", "  return strings.filter(function(str){\n    return str.indexOf(substring)\
    \ !== -1;\n  })\n}\n", "\tlet filtered_strings = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.includes(substring)){\n\t\t\tfiltered_strings.push(string);\n\t\t\
    }\n\t});\n\treturn filtered_strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) > -1;\n  });\n}\n", "  if(!strings || strings.length\
    \ === 0){\n    return strings;\n  }\n\n  return strings.filter(function(str){\n\
    \    return str.includes(substring);\n  });\n}\n", "    var filtered_strings =\
    \ [];\n    for(var i = 0; i<strings.length; i++){\n        if(strings.substring(0,substring.length)\
    \ == substring)\n            filtered_strings.push(strings[i]);\n    }\n    return\
    \ filtered_strings;\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.includes(substring);\n  });\n}", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1;\n    });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) > -1;\n  });\n}\n", "  var filtered_strings\
    \ = [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ !== -1){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "    return _.filter(strings, function(str){\n        return str.includes(substring);\n\
    \    });\n}\n", "    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var str = strings[i];\n        if(str.indexOf(substring) >= 0){\n\
    \            filtered_strings.push(str);\n        }\n    }\n    return filtered_strings;\n\
    }", "  return strings.filter(function (str){\n    return str.indexOf(substring)\
    \ > -1\n  });\n}\n", "  return strings.filter(function(str){\n    return str.indexOf(substring)\
    \ > -1;\n  });\n}\n", "    var filters = [];\n    for (var i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].indexOf(substring) !== -1)\n            filters.push(strings[i]);\n\
    \    }\n    return filters;\n}\n", "\treturn strings.filter(x => x.includes(substring));\n\
    }\n", "    const filtered_strings = strings.filter((string) => {\n        const\
    \ string_split = string.split('');\n        return string_split.includes(substring);\n\
    \    });\n    return filtered_strings;\n}\n", "    return strings.filter(function(str){\n\
    \        return (str.indexOf(substring) > -1);\n    });\n}\n", "  var new_array\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(substring)\
    \ != -1){\n      new_array.push(strings[i]);\n    }\n  }\n  return new_array;\n\
    }\n", "\tif(!strings || !substring || !substring.length){\n\t\treturn strings;\n\
    \t}\n\n\tvar filtered_strings = [];\n\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tvar found = false;\n\t\tfor(var j=0; j<substring.length; j++){\n\t\t\tif(!strings[i].toLowerCase().includes(substring[j].toLowerCase())){\n\
    \t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(found){\n\t\t\t\
    filtered_strings.push(strings[i]);\n\t\t}\n\t}\n\n\treturn filtered_strings;\n\
    }\n", "\tstrings = map(strings, function(str){\n\t\treturn str.substring(0,substring.length)\
    \ == substring;\n\t});\n\n\tif((strings.length === 0) || (substring.length ===\
    \ 0))\n\t\treturn strings;\n\n\treturn filter(strings, function(str){\n\t\treturn\
    \ str.length > 0;\n\t});\n}\n", "    // If a string is empty return an empty list\n\
    \    if(strings.length <= 0){\n        return strings;\n    }\n\n    // Convert\
    \ string array to a list of single strings\n    let string_list_to_return = [];\n\
    \    for(let string of strings){\n        // If the given substring is not found\
    \ return all strings in input list\n        if(string.includes(substring) ===\
    \ false){\n            string_list_to_return = string_list_to_return.concat(strings);\n\
    \        } else {\n            string_list_to_return.push(string);\n        }\n\
    \    }\n\n    return string_list_to_return;\n}\n", "  var filtered = [];\n  strings.forEach(function(string){\n\
    \    if(string.indexOf(substring) !== -1){\n      filtered.push(string);\n   \
    \ }\n  });\n  return filtered;\n}\n", "  var result = [];\n  strings.forEach(function(string){\n\
    \    if(string.includes(substring)){\n      result.push(string);\n    }\n  })\n\
    \  return result;\n}", "  const filtered = [];\n  for (const string of strings)\
    \ {\n    if (string.includes(substring)) {\n      filtered.push(string);\n   \
    \ }\n  }\n  return filtered;\n}\n", "    return strings.filter(function(word){\n\
    \        return word.indexOf(substring) != -1;\n    });\n}\n", "    var new_strings\
    \ = [];\n    for(index in strings){\n        if(strings[index].indexOf(substring)\
    \ > -1){\n            new_strings.push(strings[index]);\n        }\n    }\n  \
    \  return new_strings;\n}\n", "  return strings.filter(function(string){\n   \
    \ return string.indexOf(substring) >= 0;\n  });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring);\n  });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(substring) > -1;\n  });\n}\n", "    \n    return strings.filter(function(string)\
    \ {\n        return string.indexOf(substring) > -1;\n    });\n}\n", "\tif(!strings\
    \ || !strings.length)\n\t\treturn strings;\n\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(substring) != -1;\n\t});\n}", "  return _.filter(strings,\
    \ (s) => s.indexOf(substring) !== -1);\n}\n\n", "    var new_strings = []\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring)\
    \ !== -1){\n            new_strings.push(strings[i])\n        }\n    }\n    return\
    \ new_strings\n}\n", "  return strings.filter(function(str){\n    return str.includes(substring);\n\
    \  });\n}\n", "    var filtered = []\n    strings.forEach(function(item){\n  \
    \      if(item.indexOf(substring) === 0){\n            filtered.push(item)\n \
    \       }\n    })\n    return filtered\n}\n", "  return _(strings).filter(function(val){\n\
    \    return val.toString().toLowerCase().indexOf(substring.toLowerCase()) > -1\n\
    \  })\n}\n", "    if ( strings == null || strings.length === 0 )\n        return\
    \ strings;\n    return strings.filter(function(string){\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "    var filtered = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}", "  return strings.filter(function(elem){\n\
    \    return elem.indexOf(substring) > -1;\n  });\n}\n", "    var filtered_strings\
    \ = []\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring)\
    \ !== -1){\n            filtered_strings.push(strings[i])\n        }\n    }\n\
    \    return filtered_strings\n}", "    var new_array = [];\n    for(var i = 0;\
    \ i < strings.length; i++){\n        var str = strings[i];\n        if(str.indexOf(substring)\
    \ > -1){\n            new_array.push(str);\n        }\n    }\n    return new_array;\n\
    }\n", "    \n    var strings_list = [];\n    strings.forEach(function(value){\n\
    \        if(value.includes(substring)){\n            strings_list.push(value);\n\
    \        }\n    });\n    return strings_list;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.includes(substring);\n  });\n}\n", "  var result = [];\n  var\
    \ i;\n  for (i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(substring)\
    \ !== -1){\n      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n",
  "    var ret = [];\n    for(var i=0; i<strings.length; i++){\n        var str =\
    \ strings[i];\n        if(str.indexOf(substring) >= 0){\n            ret.push(str);\n\
    \        }\n    }\n    return ret;\n}\n", "  return strings.filter(function(str){\n\
    \    return str.indexOf(substring) !== -1;\n  });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(substring) !== -1\n    })\n}\n", "  return strings.filter(function(x){\n\
    \    return x.indexOf(substring) !== -1;\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
