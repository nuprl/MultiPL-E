name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested lists,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the list,\n// and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n\
  // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n\
  // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    let rows = lst.map(row => row.filter(cell => cell == x));\n   \
    \ let cols = rows.map(row => row.length);\n    let maxRow = rows.reduce((max,\
    \ r) => Math.max(r, max), 0);\n    let maxCol = cols.reduce((max, c) => Math.max(max,\
    \ c), 0);\n    let rowCoords = [];\n    let columnCoords = [];\n    for(let row\
    \ = 0; row < maxRow; row++){\n        let sortedRow = rows[row].sort((a, b) =>\
    \ b - a);\n        let sortedCol = sortedRow.reverse().map(cell => cell).sort((a,\
    \ b) => b - a);\n        rowCoords.push([row, sortedCol]);\n    }\n    for(let\
    \ col = 0; col < maxCol; col++){\n        let sortedCol = cols.sort((a, b) =>\
    \ b - a);\n        columnCoords.push([col, sortedCol]);\n    }\n    rowCoords\
    \ = rowCoords.map(coord => [coord[0], coord[1].reverse().map(cell => cell)]);\n\
    \    columnCoords = columnCoords.map(coord => [coord[1], coord[0]]);\n    return\
    \ rowCoords.concat(columnCoords).filter(coord => coord.length == 2);\n}\n", " \
    \  //initialize row and col variables outside loop\n   var row = [];\n   var col\
    \ = [];\n   \n   //sort rows in ascending order\n   var sorted_row = get_sorted_row(lst,\
    \ true);\n   \n   //initialize counter variable\n   var counter = 0;\n   \n  \
    \ //loop over rows\n   for (var i = 0; i < sorted_row.length; i++){\n      //initialize\
    \ row variable with current row\n      row = sorted_row[i];\n      //initialize\
    \ col variable with current column\n      col = sorted_row[i][0];\n      \n  \
    \    //if current row contains x then return row and column\n      if (col ==\
    \ x){\n         return [(row, col)];\n      }\n      \n      //if current row\
    \ does not contain x then increment counter\n      counter++;\n   }\n   \n   //if\
    \ counter does not equal to length of row return empty array\n   if (counter !=\
    \ sorted_row.length){\n      return [];\n   }\n   \n   //else return empty array\n\
    \   return [];\n}\n", "  //find first element that matches x\n  var i, first_el;\n\
    \  for(i = 0; i < lst.length; i++){\n    if(x == lst[i][0]){\n      first_el =\
    \ i;\n      break;\n    }\n  }\n  \n  //sort the list\n  lst.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  \n  //sort by column then row\n  lst.sort(function(a,\
    \ b){\n    //descending\n    if(b[1] - a[1]) return -1;\n    //ascending\n   \
    \ if(b[0] - a[0]) return 1;\n    return 0;\n  });\n  \n  //return coordinates\
    \ as list of tuples\n  var result = [];\n  for(i = 0; i < lst.length; i++){\n\
    \    result.push([first_el + i, lst[i][1]]);\n  }\n  return result;\n}\n", " \
    \ const res = [];\n  const rows = lst.map(function(e){return e.map(function(e){return\
    \ e;}).sort(function(a, b){return a - b})});\n  let count = 0;\n  rows.forEach(function(e){\n\
    \    e.forEach(function(a){\n      if(a[0] === x){\n        res.push([count, a]);\n\
    \      }\n    });\n    count += e.length;\n  });\n  return res;\n}", "  if(lst.length\
    \ === 0){\n    return [];\n  }\n\n  var sorted_rows = get_sorted_rows(lst);\n\
    \  if(sorted_rows.length <= 1){\n    var index = sorted_rows.indexOf(x);\n   \
    \ return [\n      [0, index]\n    ];\n  }\n\n  var row = get_row_in_row(sorted_rows,\
    \ x);\n  var result = [];\n  while(row.length > 0){\n    result.push(row.shift());\n\
    \  }\n\n  return result.sort();\n}\n", "    var result = [];\n    var minRow =\
    \ lst[0].indexOf(x);\n    var maxRow = lst[0].indexOf(x);\n    var currentRow\
    \ = [];\n    for (var i = 0; i < lst.length; i++){\n        var row = lst[i];\n\
    \        var maxCol = row.length;\n        for (var j = 0; j < row.length; j++){\n\
    \            var col = row[j];\n            if (minRow === -1){\n            \
    \    minRow = j;\n            }\n            if (maxCol === -1){\n           \
    \     maxCol = col;\n            }\n            if (minRow === j && maxCol ===\
    \ col){\n                currentRow.push(j);\n            }\n            if (minRow\
    \ < j && maxCol < col){\n                if (maxCol < col){\n                \
    \    maxCol = col;\n                }\n                if (currentRow.length >\
    \ 0){\n                    currentRow = [];\n                }\n             \
    \   result.push([i, currentRow, j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "  if(lst.length==0 || x<0) return [];\n  const [row, col] =\
    \ lst.length;\n  if(row === 0) return [];\n  const [row_sorted, col_sorted] =\
    \ sort_by_row(lst, row)\n  const [col_sorted_rd, row_sorted_rd] = [col_sorted,\
    \ row].map(row => row.map(col => [col, row]))\n  const col_sorted_rd_reversed\
    \ = reverse([col_sorted_rd]);\n  return get_row([col_sorted_rd_reversed].concat(row_sorted_rd.map(row\
    \ => row.slice(0,x))), x);\n}\n", "\tif(x < 0 || x >= lst.length) return [];\n\
    \tif(x === lst.length) return [[]];\n\tvar n = lst.length;\n\tvar n1 = n-1;\n\t\
    var n2 = n-1;\n\tvar d = lst[n][x];\n\tvar i = 0;\n\tvar row = [[]];\n\twhile(i\
    \ < n){\n\t\twhile(i < n1 && lst[i][x] === d) i++;\n\t\twhile(i < n2 && lst[i][x]\
    \ === d) i++;\n\t\tif((i < n1 && i < n2) || (i < n2 && i < n1)){\n\t\t\tif((i\
    \ < n1 && i < n2) && lst[i+1][x] === d){\n\t\t\t\trow.push([]);\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\trow.push([i, x]);\n\t\t\ti++;\n\t\t}\n\t\telse if((i < n1 || i\
    \ < n2) && lst[i-1][x] === d){\n\t\t\trow.push([i-1, x]);\n\t\t\ti++;\n\t\t}\n\
    \t\telse if((i < n1 || i < n2) && lst[i+1][x] === d){\n\t\t\trow.push([i+1, x]);\n\
    \t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(row.length){\n\t\t\
    row.sort(function(a, b){\n\t\t\treturn a[1] - b[1];\n\t\t});\n\t\treturn row;\n\
    \t}\n\treturn [];\n}\n", "    return lst.map(row => row.map(val => [val - x, val]))\n\
    \        .flatMap(row => row.sort((a, b) => a[0] - b[0]))\n        .sort((a, b)\
    \ => b[1] - a[1]);\n}\n", "  if(!lst.length) return [];\n  var ret = [];\n  var\
    \ i = lst.length - 1;\n  while(i >= 0){\n    if(lst[i][0] > x){\n      ret.push([i,\
    \ lst[i][0]]);\n      lst[i][0] = x;\n      lst[i][1] = i;\n      lst[x] = i;\n\
    \    } else {\n      i = lst[i][1];\n    }\n  }\n  if(lst[x]){\n    ret.push([lst[x],\
    \ x]);\n  }\n  ret.sort(function(a, b){\n    var retA = a.toString().split('').reverse().join('');\n\
    \    var retB = b.toString().split('').reverse().join('');\n    if(retA > retB){\n\
    \      return 1;\n    }\n    if(retA < retB){\n      return -1;\n    }\n    return\
    \ 0;\n  });\n  return ret;\n}\n", "  var tuples = [];\n  var maxRow = Math.min(lst.length,\
    \ x);\n  for(var i = 0; i<maxRow; i++){\n    var row = [];\n    for(var j = 0;\
    \ j < lst[i].length; j++){\n      if(j === x){\n        row.push([j, i]);\n  \
    \    }\n      if(j === lst[i].length-1){\n        row.push([i, x]);\n      }\n\
    \    }\n    tuples.push(row);\n  }\n  tuples.sort(function(a, b){\n    var sa\
    \ = a[0][1];\n    var sb = b[0][1];\n    return sa > sb ? 1 : sa < sb ? -1 : 0;\n\
    \  });\n  tuples.sort(function(a, b){\n    var sa = a[0][0];\n    var sb = b[0][0];\n\
    \    return sa > sb ? 1 : sa < sb ? -1 : 0;\n  });\n  return tuples;\n}\n", " \
    \   const result = lst.map(function(row){\n        return row.map(function(val){\n\
    \            return (x == val) ? {row:row, col:x - row.length} : null\n      \
    \  }).filter(function(val){return val})\n    }).filter(function(row){return row}).map(function(row){\n\
    \        return row.map(function(val){\n            return {row:row, col:val.col}\n\
    \        })\n    }).reduce(function(a, b){return a.concat(b)}, []).sort(function(a,\
    \ b){return b.row-a.row})\n    return result.map(function(val){\n        return\
    \ val.row\n    }).reverse()\n}", "    if(lst.length===0){\n        return [];\n\
    \    }\n    return lst.map(function(row, i){\n        if(row.length===0){\n  \
    \          return null;\n        }\n        if(row===null){\n            return\
    \ [(i,0)];\n        }\n        if(row.length===x){\n            return [i,0];\n\
    \        }\n        var found = [];\n        for(var j=0;j<row.length;j++){\n\
    \            if(row[j]===x){\n                found.push([i,j]);\n           \
    \ }\n        }\n        return found;\n    }).filter(function(row){\n        if(row!==null&&row.length>0){\n\
    \            return true;\n        }\n    });\n}\n", "    const row = new Array();\n\
    \    let last_row_index = 0;\n    for(let row_index = 0; row_index < lst.length;\
    \ row_index++){\n        if(row_index == 0){\n            let last_column_index\
    \ = 0;\n            for(let column_index = 0; column_index < lst[row_index].length;\
    \ column_index++){\n                if(column_index == 0){\n                 \
    \   row.push([0, last_column_index]);\n                }\n                if(column_index\
    \ == (lst[row_index].length - 1)){\n                    row.push([last_row_index,\
    \ column_index]);\n                }\n                last_column_index++;\n \
    \           }\n            last_row_index = row_index;\n        } else {\n   \
    \         let current_row_index = 0;\n            while(current_row_index != row_index){\n\
    \                if(lst[current_row_index][row_index] < x){\n                \
    \    break;\n                }\n                current_row_index++;\n       \
    \     }\n            let current_column_index = 0;\n            while(current_column_index\
    \ != (lst[row_index].length - 1)){\n                if(lst[row_index][current_column_index]\
    \ > x){\n                    break;\n                }\n                current_column_index++;\n\
    \            }\n            row.push([row_index, current_column_index]);\n   \
    \     }\n    }\n    row.sort((a, b) => {\n        return a[0] - b[0];\n    });\n\
    \    row.sort((a, b) => {\n        return b[1] - a[1];\n    });\n    return row;\n\
    }", "  // If there are no rows, return an empty list.\n  if(lst.length === 0)\
    \ return [];\n\n  // Create a list of rows.\n  var rows = [];\n\n  // Start by\
    \ sorting rows by the first element of each row.\n  lst.sort(function(a, b){\n\
    \    if(a[0] === b[0]) return a[1] - b[1];\n    else return a[0] - b[0];\n  });\n\
    \n  // Iterate over each row, pushing elements into the rows list\n  for(var i\
    \ = 0; i < lst.length; i++){\n    var row = lst[i];\n    if(row[0] === x) rows.push([i,\
    \ row.slice(1)]);\n  }\n\n  // Return the list of rows.\n  return rows;\n}\n",
  "\tlet row = [];\n\tlet column = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\
    \tif(lst[i][0] == x){\n\t\t\trow.push(new Point(i, 0));\n\t\t\tcolumn.push([lst[i][1]]);\n\
    \t\t} else {\n\t\t\trow.push(new Point(i, column[column.length-1][0]+1));\n\t\t\
    \tcolumn.push(lst[i][1]);\n\t\t}\n\t}\n\treturn row.sort((a, b) => a.row - b.row).sort((a,\
    \ b) => b.col - a.col);\n}\n", "    let [row, columns] = get_row_inner(lst, x);\n\
    \    return sort_rows([row, columns]);\n}\n", "    if (lst.length == 0) return\
    \ [];\n    var res = [];\n    \n    var row = get_row(lst.pop(), x);\n    var\
    \ col = get_row(lst.pop(), x);\n\n    while (row != null && col != null){\n  \
    \      // Get rows in descending order.\n        var row_ord = row[0][0];\n  \
    \      var col_ord = col[0][0];\n        if (row_ord > col_ord){\n           \
    \ row = get_row(row[0][1], x);\n        } else if (row_ord < col_ord){\n     \
    \       col = get_row(col[0][1], x);\n        } else {\n            // If the\
    \ rows are identical.\n            res.push([row, col]);\n            row = get_row(row[0][1],\
    \ x);\n            col = get_row(col[0][1], x);\n        }\n    }\n    return\
    \ res;\n}\n", "    var coords = [],\n        i = 0, row, column;\n\n    while(lst[i]){\n\
    \        if(lst[i][0] === x){\n            coords.push([i, lst[i][1]]);\n    \
    \    }\n        i++;\n    }\n\n    coords = coords.sort(function(c1, c2) {\n \
    \       var diff;\n        if(c1[1] === c2[1]){\n            diff = c1[0] - c2[0];\n\
    \        } else {\n            diff = c1[1] - c2[1];\n        }\n\n        if\
    \ (diff === 0) {\n            return 0;\n        } else if (diff < 0) {\n    \
    \        return -1;\n        } else {\n            return 1;\n        }\n    });\n\
    \n    coords.reverse();\n\n    for(i = 0; i < coords.length; i++){\n        row\
    \ = coords[i][0];\n        column = coords[i][1];\n\n        coords[i] = [(row\
    \ - 1, column), (row + 1, column), (row, column), (row + 1, column - 1), (row\
    \ - 1, column - 1)];\n    }\n\n    return coords.reduce(function(p1, p2, i, arr){\n\
    \        return arr.concat([p1.concat([p2[0]]), p2.concat([p2[1]])]).concat(arr.slice(0,\
    \ i).concat([arr.slice(i + 1)]));\n    }, []);\n}\n", "    // Sort the rows in\
    \ ascending order initially.\n    lst = lst.sort(function(a, b){\n        return\
    \ b[1] - a[1];\n    });\n    // Now sort the rows in descending order initially.\n\
    \    lst = lst.sort(function(a, b){\n        return a[1] - b[1];\n    });\n  \
    \  \n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(x\
    \ > lst[i][1]){\n            result.push([i, lst[i][0]]);\n        }\n    }\n\
    \    \n    // Sort coordinates initially by rows in ascending order.\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    \n    // Now, sort coordinates\
    \ of the row by columns in descending order.\n    result.sort(function(a, b){\n\
    \        return b[1] - a[1];\n    });\n    \n    return result;\n}\n", "\tlet\
    \ row = []\n\tfor (let i = 0, len = lst.length; i < len; i++){\n\t\tif (lst[i]\
    \ != null && lst[i].length > 0){\n\t\t\trow.push([i, lst[i].indexOf(x)])\n\t\t\
    }\n\t}\n\trow.sort(function(a, b){return b[1] - a[1]})\n\trow.sort(function(a,\
    \ b){return a[1] - b[1]})\n\treturn row\n}\n", "  const [r, c] = lst[0].length,\
    \ row = [], col = [];\n  for(let i = 0; i < r; ++i){\n    row.push([0, lst[i].indexOf(x)]);\n\
    \  }\n  for(let i = 0; i < c; ++i){\n    col.push([i, lst[0].length - 1 - lst[i].indexOf(x)]);\n\
    \  }\n  for(let i = 0; i < r; ++i){\n    row.sort((a, b) => b[1] - a[1]);\n  }\n\
    \  for(let i = 0; i < c; ++i){\n    col.sort((a, b) => b[1] - a[1]);\n  }\n  return\
    \ row.concat(col);\n}\n", "    var rows = lst.reduce(function(r, c){\n       \
    \ var arr = [];\n        r.forEach(function(rc, ri){\n            if(c.indexOf(ri)>=0){\n\
    \                c.forEach(function(ci, cii){\n                    if(ci==rci){\n\
    \                        arr.push([ri, cii]);\n                    }\n       \
    \         })\n            }\n        })\n        return arr;\n    },[]);\n   \
    \ var cols = lst.reduce(function(r, c){\n        var arr = [];\n        r.forEach(function(rc,\
    \ ri){\n            if(c.indexOf(rc)>=0){\n                c.forEach(function(ci,\
    \ cii){\n                    arr.push([ri, ci]);\n                })\n       \
    \     }\n        })\n        return arr;\n    },[]);\n    var r1 = rows.sort((a,b)=>a[0]-b[0])\n\
    \    var r2 = rows.sort((a,b)=>a[1]-b[1])\n    var c1=cols.sort((a,b)=>b[1]-a[1])\n\
    \    var c2=cols.sort((a,b)=>a[0]-b[0])\n    var arr = [];\n    for(var i=0; i<c1.length;\
    \ i++){\n        if(c1[i][1]==c2[i][1]){\n            arr.push([c1[i][0], c2[i][0]])\n\
    \        }\n    }\n    return arr;\n}\n", "    return lst.map((row, i) => (\n\
    \        row.slice(0).sort((a, b) => a - b).reverse()\n            .map(() =>\
    \ [\n                i, //row, column\n                lst.map(col => col[i]),\
    \ //value\n            ])\n            .sort((a, b) => a[0] - b[0]) //sort by\
    \ row\n            .reverse()\n            .map(([row, column, value]) => ([row,\
    \ column, value]))\n    ));\n}\n", "  let result = []\n  let m = lst.length\n\
    \  let n = lst[0].length\n  let row = Array.from(Array(m).keys())\n  let column\
    \ = Array.from(Array(n).keys())\n\n  for(let i=0; i<row.length; i++){\n    let\
    \ coordinate = (i, row[i])\n    result.push([coordinate, coordinate])\n  }\n \
    \ if(row !== column){\n    for(let i=0; i<row.length; i++){\n      let coordinate\
    \ = (row[i], column[i])\n      result.push([coordinate, coordinate])\n    }\n\
    \  }\n  for(let j=0; j<m; j++){\n    for(let k=0; k<n; k++){\n      if(lst[j][k]\
    \ === x){\n        result.push([j, k])\n      }\n    }\n  }\n  return result\n\
    }\n", "  let row = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ === undefined){\n      continue;\n    }\n    let found = false;\n    for(let\
    \ j = 0; j < row.length; j++){\n      if(row[j].col === x && row[j].row === i){\n\
    \        row[j].col++;\n        found = true;\n        break;\n      }\n    }\n\
    \    if(!found){\n      row.push({ row: i, col: x });\n    }\n  }\n  if(row.length\
    \ === 1){\n    return [];\n  }\n  row.sort((a,b) => {\n    if(a < b) return -1;\n\
    \    if(a > b) return 1;\n    return 0;\n  });\n  for(let i = 0; i < row.length;\
    \ i++){\n    row[i].col = row[i].col - 1;\n  }\n  row.sort((a,b) => {\n    if(b.row\
    \ - a.row === 0) return b.col - a.col;\n    return b.row - a.row;\n  });\n  return\
    \ row;\n}\n", "  const results = [];\n  const rows = lst.map(row => row.slice().sort());\n\
    \  for(const row of rows){ \n    const rowArr = row.slice().sort().map((col, i)\
    \ => [i + 1, col]);\n    const colIndex = row.findIndex(col => col == x);\n  \
    \  for(const [i, col] of rowArr){\n      if(colIndex == i){ results.push(rowArr.slice());\
    \ break; }\n    }\n  }\n  return results.map(arr => arr.reduce((a, b) => a.concat(b),\
    \ []));\n}\n", "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        for(var j = 0; j < lst[i].length; j++){\n            if(j == x){\n  \
    \              result.push([i,j]);\n            }\n        }\n    }\n    result.sort((a,b)\
    \ => {\n        if(a[0] < b[0]) return -1;\n        if(a[0] > b[0]) return 1;\n\
    \        return 0;\n    });\n    result.sort((a,b) => {\n        if(a[1] > b[1])\
    \ return -1;\n        if(a[1] < b[1]) return 1;\n        return 0;\n    });\n\
    \    return result;\n}\n", "  var result = []\n  if(lst[x]){\n    for (var i =\
    \ 0; i < lst[x].length; i++){\n      result.push([i, lst[x][i]])\n    }\n    result.sort(function(a,\
    \ b){return a[1] - b[1]})\n    result.sort(function(a, b){return b[0] - a[0]})\n\
    \  }else{\n    for (var j = 0; j < lst.length; j++){\n      if(lst[j][i] === x){\n\
    \        result.push([j, lst[j][i]])\n      }\n    }\n  }\n  return result\n}",
  "\tvar n = [];\n\tfor(var i = 0, len = lst.length; i < len; i++){\n\t\tvar temp\
    \ = [];\n\t\tfor(var j = 0, len = lst[i].length; j < len; j++){\n\t\t\tif(lst[i][j]\
    \ === x){\n\t\t\t\ttemp.push([j, i]);\n\t\t\t}\n\t\t}\n\t\tif(temp.length){\n\t\
    \t\tn.push(temp);\n\t\t}\n\t}\n\treturn n;\n}\n", "\tconst n = lst.length;\n\t\
    let res = [];\n\tlet row = null;\n\tfor(let i = 0; i < n; i++){\n\t\trow = lst[i];\n\
    \t\tif(row.length <= x){\n\t\t\tlet r = new Array(row.length + 1);\n\t\t\tfor(let\
    \ j = 0; j < r.length; j++){\n\t\t\t\tr[j] = [0, 0];\n\t\t\t}\n\t\t\tr.push([0,\
    \ 0]);\n\t\t\tres.push(r);\n\t\t} else {\n\t\t\tlet row = row.slice(0, x);\n\t\
    \t\tlet n = row.length;\n\t\t\tlet j = 0;\n\t\t\tlet k = 0;\n\t\t\tlet curr =\
    \ row[0];\n\t\t\tfor(; j < n; j++){\n\t\t\t\tif(row[j] === curr){\n\t\t\t\t\t\
    res[k].push([j, j]);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tk++;\n\t\t\t\t\tres[k]\
    \ = [];\n\t\t\t\t\tres[k].push([j, j]);\n\t\t\t\t}\n\t\t\t\tcurr = row[j];\n\t\
    \t\t}\n\t\t\tk++;\n\t\t\tres[k] = [];\n\t\t\tres[k].push([n, n]);\n\t\t}\n\t}\n\
    \tfor(let i = 0; i < res.length; i++){\n\t\tres = res.map(el => el.reverse());\n\
    \t}\n\treturn res;\n}\n", "    if (lst.length == 0){\n        return [];\n   \
    \ }\n    \n    let result = [];\n    \n    let maxRowLength = Math.max(...lst.map(row\
    \ => row.length));\n    \n    let rowIndex = -1;\n    let columnIndex = -1;\n\
    \    for (let i = 0; i < lst.length; i++){\n        let row = lst[i];\n      \
    \  rowIndex += 1;\n        if (rowIndex >= x && rowIndex < maxRowLength){\n  \
    \          result.push([rowIndex, i]);\n        }\n    }\n    \n    let sortedRows\
    \ = result.sort((a, b) => (a[1] - b[1]));\n    sortedRows.sort((a, b) => (b[0]\
    \ - a[0]));\n    \n    let sortedColumns = sortedRows.map(row => row[0]);\n  \
    \  \n    let sortedCoordinates = sortedRows.map(row => sortedColumns.map(column\
    \ => [row, column]));\n    \n    let resultCoordinates = sortedCoordinates.map(coord\
    \ => [coord[0], coord[1]]);\n    \n    return resultCoordinates;\n}\n", "    var\
    \ result = [];\n    lst.sort(function(a, b){\n        var ia = a[0];\n       \
    \ var ib = b[0];\n        if(ia > ib)\n            return -1;\n        if(ia <\
    \ ib)\n            return 1;\n        if(a[1] < b[1])\n            return -1;\n\
    \        if(a[1] > b[1])\n            return 1;\n        return 0;\n    });\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i][0] === x)\n     \
    \       result.push([x, lst[i][1]]);\n    }\n    result.sort(function(a, b){\n\
    \        if(a[0] > b[0])\n            return 1;\n        if(a[0] < b[0])\n   \
    \         return -1;\n        return 0;\n    });\n    return result.map(function(item){\n\
    \        return item[1];\n    });\n}\n", "    if(lst.length <= 0) return [];\n\
    \    let row = [];\n    let rowList = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let curr = lst[i];\n        if(curr[x] === x){\n            row.push(curr);\n\
    \            rowList.push(curr);\n        }\n    }\n    row.sort(function(a, b){\n\
    \        return a[x] - b[x];\n    });\n    for(let i = row.length - 1; i >= 0;\
    \ i--){\n        rowList.splice(rowList.length - 1, 0, row[i]);\n    }\n    return\
    \ rowList;\n}\n", "  var res = [];\n  for(var i = 0; i < lst.length; i++){\n \
    \   if(lst[i][0] === x){\n      var row_res = get_row(lst[i].slice(1), x);\n \
    \     for(var j = 0; j < row_res.length; j++){\n        res.push([x, row_res[j][0]]);\n\
    \      }\n      return res;\n    }\n  }\n  if(res.length === 0){\n    res.push([]);\n\
    \    res.push([]);\n  }\n  \n  return res;\n}\n", "  if(lst.length <= 0)\n   \
    \ return [];\n  var results = [];\n  var i, k, l, curX, curY, lastX, lastY;\n\
    \  for(i = 0; i < lst.length; i++){\n    curX = curY = lastX = lastY = null;\n\
    \    for(k = 0, l = lst[i]; k < l; k++){\n      curX == null ? curX = k : curY\
    \ = k;\n      if(curX == x)\n        return [curX - lastX, curY - lastY];\n  \
    \    lastX = curX;\n      lastY = curY;\n    }\n  }\n}\n", "  var res = [];\n\
    \  var n = lst.length;\n  for(var i=0; i<n; i++){\n    if(i == 0){\n      for(var\
    \ j=0; j<lst[i].length; j++){\n        if(lst[i][j] == x)\n          res.push([i,\
    \ j]);\n      }\n    } else {\n      var m = [];\n      var l = lst[i-1].length;\n\
    \      for(var j=0; j<l; j++){\n        m.push([lst[i-1][j], lst[i][j]]);\n  \
    \    }\n      res = res.concat(m.sort(function(a, b){\n        return b[0] - a[0];\n\
    \      }));\n      res = res.concat(m.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n      }));\n    }\n  }\n  res = res.sort(function(a, b){\n    return\
    \ b[0] - a[0];\n  });\n  res = res.sort(function(a, b){\n    return b[1] - a[1];\n\
    \  });\n  return res;\n}\n", "  var out = [];\n  var cols = [];\n  var col = 0;\n\
    \  var row = lst.length;\n  for(var i=0; i<row; i++){\n    if(lst[i][0] == x){\n\
    \      out.push([(i+1), col]);\n      cols.push([col, (i+1)]);\n      col = 0;\n\
    \    }\n    else{\n      col++;\n    }\n  }\n  out.sort(function(a, b){\n    return\
    \ a[1] - b[1];\n  });\n  for(var i=0; i<row; i++){\n    out.sort(function(a, b){\n\
    \      return b[0] - a[0];\n    });\n  }\n  return out;\n}\n", "  var result =\
    \ [];\n  var r = [];\n  for(var i=0; i<lst.length; i++){\n    r.push(lst[i][0]);\
    \ // row\n    for(var j=1; j<lst.length; j++){\n      if(lst[i][0] == j){\n  \
    \      result.push([r[i], j-1]);\n      }\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  if(result[0][0] == x){\n    result = result.reverse();\n\
    \  }\n  return result;\n}", "  let arr=new Array(x);\n  lst.forEach((r,i)=>{\n\
    \    r.forEach((c,j)=>{\n      arr[j]=(i,c);\n    })\n  })\n  let res=new Array(lst.length);\n\
    \  for (let i=0;i<lst.length;i++){\n    let r=new Array(lst[i].length);\n    res[i]=r;\n\
    \    arr[i]\n    .sort((a,b)=>{\n      if (a[0]>b[0])\n        return -1;\n  \
    \    if (a[0]<b[0])\n        return 1;\n      return 0;\n    })\n    .sort((a,b)=>{\n\
    \      if (a[1]>b[1])\n        return 1;\n      if (a[1]<b[1])\n        return\
    \ -1;\n      return 0;\n    })\n    .forEach((c,j)=>{\n      res[i][j]=c;\n  \
    \  })\n  }\n  return res;\n}", "\tif(lst.length <= 0 || x > lst.length || x <=\
    \ 0)\n\t\treturn [];\n\n\tlet res = [];\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tfor(let j = 0; j < lst[i].length; j++){\n\t\t\tif(lst[i][j] == x){\n\t\t\t\
    \tres.push([i, j]);\n\t\t\t}\n\t\t}\n\t}\n\tres.sort((a,b) => a[0] - b[0]);\n\t\
    res.sort((a,b) => b[1] - a[1]);\n\treturn res;\n}\n", "  let row = 0;\n  let result\
    \ = [];\n  let n = lst.length;\n  while(n){\n    if (lst[n-1][x] === x){\n   \
    \   result.push([row, n-1]);\n      lst = lst.slice(0,n-1).concat(lst[n-1].slice(x+1));\n\
    \      n--;\n      x = 0;\n    }else{\n      n--;\n    }\n  }\n  return result.sort((a,b)\
    \ => b[0]-a[0]).reverse();\n}", "\tlet rows = lst.reduce((a, b) => a.concat(b))\n\
    \tlet i = rows.indexOf(+x)\n\tlet coords = []\n\twhile(i >= 0) {\n\t\tcoords.push([i,\
    \ rows.indexOf(rows.slice(i,i+1).sort((a, b) => b[1]-a[1]))])\n\t\ti = rows.indexOf(+x,\
    \ i+1)\n\t}\n\tcoords.sort((a, b) => a[0] < b[0] ? -1 : 1)\n\tcoords.sort((a,\
    \ b) => a[0] > b[0] ? 1 : -1)\n\treturn coords\n}\n", "    var result = [];\n\
    \    var rows = lst.length;\n    for(var i=0;i<rows;i++){\n        var row = [];\n\
    \        var columns = lst[i].length;\n        for(var j=0;j<columns;j++){\n \
    \           row.push(j<x?lst[i][j]:-1);\n        }\n        result.push(row);\n\
    \    }\n    result.sort(function(a, b){\n        return a[0] > b[0] ? 1 : a[0]\
    \ < b[0] ? -1 : 0;\n    });\n    result.sort(function(a, b){\n        return a[1]\
    \ > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n    });\n    return result;\n}\n", "  let\
    \ coordinates = []\n  let rows_arr = []\n  for (let i = 0; i < lst.length; i++){\n\
    \    rows_arr.push(lst[i])\n  }\n  for (let i = 1; i < rows_arr.length; i++){\n\
    \    rows_arr[i] = rows_arr[i].filter((e, i) => e === x)\n  }\n  for (let i =\
    \ 0; i < rows_arr.length; i++){\n    let row = []\n    for (let j = 0; j < rows_arr[i].length;\
    \ j++){\n      row.push([j, rows_arr[i][j]])\n    }\n    coordinates.push(row)\n\
    \  }\n  coordinates = coordinates.sort((a, b) => {\n    let aRow = a[0]\n    let\
    \ bRow = b[0]\n    let aColumn = a[1]\n    let bColumn = b[1]\n    if(aRow < bRow){\n\
    \      return -1\n    }\n    if(aRow > bRow){\n      return 1\n    }\n    if(aColumn\
    \ > bColumn){\n      return -1\n    }\n    return aColumn < bColumn ? 1 : 0\n\
    \  })\n  coordinates = coordinates.sort((a, b) => {\n    let aRow = a[0]\n   \
    \ let bRow = b[0]\n    if(aRow > bRow){\n      return 1\n    }\n    if(aRow <\
    \ bRow){\n      return -1\n    }\n    return a[1] < b[1] ? 1 : 0\n  })\n  return\
    \ coordinates\n}\n", "\tif(lst.length < 1) return [];\n\tvar res = [];\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tif(lst[i].indexOf(x) != -1){\n\t\t\tres.push([i,\
    \ lst[i].indexOf(x)])\n\t\t}\n\t}\n\tres.sort((a, b) => a[1] - b[1] || b[0] -\
    \ a[0]);\n\tfor(let i = 0; i < res.length; i++){\n\t\tres[i] = (res[i][0] - i,\
    \ res[i][1]);\n\t}\n\treturn res;\n}\n", "    const n = lst.length\n    if(n <=\
    \ 0){\n        return []\n    }\n    const arr = [[]]\n    for(let i = 0; i <\
    \ n; i++){\n        arr[i] = []\n        for(let j = 0; j < lst[i].length; j++){\n\
    \            if(arr[i].length == 0){\n                arr[i].push((i,j))\n   \
    \         } else {\n                const first = arr[i][0]\n                const\
    \ last = arr[first][arr[first].length - 1]\n                let flag = last +\
    \ 1\n                while(arr[flag].length != 0 && arr[flag][arr[flag].length\
    \ - 1] > i){\n                    flag = arr[flag][arr[flag].length - 1]\n   \
    \             }\n                arr[i].push((last, flag))\n            }\n  \
    \      }\n    }\n    let result = []\n    for(let i = 0; i < n; i++){\n      \
    \  if(arr[i].length > 0 && arr[i][0] == x){\n            result.push(arr[i])\n\
    \        }\n    }\n    result.sort(function (a, b) {\n        return a[0] - b[0]\n\
    \    })\n    result.sort(function (a, b) {\n        return a[1] - b[1]\n    })\n\
    \    return result.map(function (a) {\n        const xy = a\n        return [\n\
    \            xy[0] - 1,\n            xy[1] - 1,\n        ]\n    })\n}\n", "  \
    \  if (lst.length == 0){\n        return [];\n    }\n    if (lst.length == 1){\n\
    \        return [[lst[0]]];\n    }\n\n    var y = [];\n    for (var i=0, len=lst.length;\
    \ i<len; i++){\n        if (lst[i][0] === x) {\n            y.push([x, x]);\n\
    \        } else {\n            y.push([lst[i][0], lst[i][0]]);\n        }\n  \
    \  }\n\n    var sorted_y = y.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n\n    var result = [];\n    for (var i=0; i<sorted_y.length; i++){\n\
    \        result.push([sorted_y[i][0], sorted_y[i][1]]);\n    }\n\n    return result;\n\
    }\n", "    let l = [];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i].includes(x)){\n\
    \            l.push([i, lst[i].indexOf(x)]);\n        }\n    }\n    return l.sort((a,b)\
    \ => b[1] - a[1]);\n}", "  if(lst.length <= 0){\n    return [];\n  }\n  let i\
    \ = 0;\n  let len = lst.length;\n  let tempArr = [];\n  if(x === lst[0].length){\n\
    \    return [[0, x]];\n  }\n  while(i < len){\n    let row = lst[i];\n    let\
    \ len = row.length;\n    if(x === len){\n      return [[i/len, i]];\n    }\n \
    \   while(x < len){\n      if(row.indexOf(x) !== -1){\n        tempArr.push([i/len,\
    \ row.indexOf(x)]);\n        tempArr.push([row.indexOf(x), i]);\n        break;\n\
    \      }\n      x++;\n    }\n    i++;\n  }\n  return tempArr;\n}\n", "  // Your\
    \ code here\n  return [...lst].map(e => e.filter(e => e === x).sort((a,b) => b\
    \ - a).sort((a,b) => b - a))\n}\n", "    let m = []\n    for( let i=0; i<lst.length;\
    \ i++ ){\n        let l = []\n        for( let j=0; j<lst[i]; j++ ){\n       \
    \     l.push( lst[i][j] )\n        }\n        m.push( l )\n    }\n    // console.log(\
    \ m )\n    \n    // let m = lst;\n    let res = get_row_helper( m, x )\n    //\
    \ console.log( res )\n    return res\n}\n", "    \n    let rows = [];\n    //\
    \ get row for x index\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            rows.push({\n                columns: lst[i][1], \n    \
    \            coordinate: (i + 1) \n            })\n        }\n    }\n    \n  \
    \  rows = rows.sort(function(a, b){\n        return a.coordinate-b.coordinate\n\
    \    })\n    \n    // sort by columns in descending order\n    rows = rows.reverse().sort(function(a,\
    \ b){\n        return a.columns-b.columns\n    })\n    \n    return rows;\n}\n",
  "\tconst [rows, cols] = lst\n\tif (rows.length < 1){\n\t\treturn []\n\t}\n\tif (x\
    \ < 0 || x >= cols){\n\t\treturn []\n\t}\n\tlet result = []\n\tconst [left, right]\
    \ = [x - 1, x + cols - 1]\n\tfor (let row = 0; row < rows.length; row++){\n\t\t\
    const [a, b, c] = [\n\t\t\tleft + rows[row][cols - 1],\n\t\t\trows[row][right],\n\
    \t\t\trows[row][x]\n\t\t]\n\t\tif (a < b && b < c){\n\t\t\tresult.push([row, cols\
    \ - b])\n\t\t}\n\t}\n\tresult.sort(([row1], [row2]) => row2 - row1)\n\treturn\
    \ result\n}\n", "  return lst.filter(function(row){\n    return row.indexOf(x)\
    \ !== -1\n  }).map(function(row){\n    return row.indexOf(x)\n  })\n}\n", "  \
    \  return lst.reduce((acc, val, row) => {\n        row = row.filter((col, colIndex)\
    \ => col != x);\n        return [...acc, row.map((y, rowIndex) => ({ row: rowIndex,\
    \ col: colIndex })) ];\n    }, []);\n}\n", "  let rows = [[]];\n  for(let r =\
    \ 0; r < lst.length; r++){\n    let current_row = [];\n    for(let c = 0; c <\
    \ lst[r].length; c++){\n      if(c >= x){\n        current_row.push([r + 1, c\
    \ + 1])\n      }\n    }\n    rows.push(current_row)\n  }\n  \n  let sorted = [];\n\
    \  let current_row = [];\n  for(let r = 0; r < rows.length; r++){\n    sorted.push([])\n\
    \    for(let c = 0; c < rows[r].length; c++){\n      sorted[r].push([r + 1, c\
    \ + 1])\n    }\n    \n    sorted.sort((a,b)=>{\n      if(a[1] < b[1]) return -1\n\
    \      if(a[1] > b[1]) return 1\n      if(a[0] < b[0]) return -1\n      if(a[0]\
    \ > b[0]) return 1\n      return 0;\n    })\n  }\n  \n  let result = [];\n  \n\
    \  for(let i = 0; i < rows.length; i++){\n    result.push(current_row)\n    for(let\
    \ j = 0; j < sorted[i].length; j++){\n      current_row.push(sorted[i][j]);\n\
    \    }\n  }\n  \n  return result;\n}\n", "  var result = []\n  var row_y = []\n\
    \  if(lst.length <= 0)\n    return result\n  \n  if(x === 0)\n    return [(0,\
    \ lst[0].length)]\n  \n  var row = 0\n  var row_length = 0\n  var col = -1\n \
    \ while(col < lst[0].length && row < lst.length){\n    if(lst[row][col] < x){\n\
    \      row++\n      col++\n      row_length++\n      if(col < lst[0].length)\n\
    \        row_y.push(0)\n    }\n    else{\n      row_y.push(lst[row][col] - x)\n\
    \      row++\n      col = 0\n      row_length++\n    }\n  }\n  row_y.sort(function(a,\
    \ b){\n    return b - a\n  })\n  result.push([(row, row_length), ...row_y])\n\
    \  return result\n}\n", "    if (lst.length === 0){\n        return [];\n    }\n\
    \    var row = lst[0],\n        res = [], i = 0, j = 0, len = row.length;\n  \
    \  while (i < len){\n        while (j < len){\n            if (row[i] === x){\n\
    \                res.push([i, j]);\n            }\n            j++;\n        }\n\
    \        i++;\n        j = 0;\n    }\n    \n    return res;\n}", "    if(lst.length\
    \ <= 0){\n        return []\n    }\n    if(lst.length == 1){\n        var row\
    \ = lst[0]\n        if(x != undefined){\n            return row.filter(function(item){\n\
    \                return item == x\n            })\n        }else{\n          \
    \  return row\n        }\n    }\n    var rows = []\n    for(var r = 0; r < lst.length;\
    \ r++){\n        var row = lst[r]\n        if(x != undefined){\n            var\
    \ idx = row.indexOf(x)\n            if(idx != -1){\n                rows.push([r\
    \ + 1, idx])\n            }\n        }else{\n            rows.push([r + 1, row.length])\n\
    \        }\n    }\n    rows.sort(function(x, y){\n        if(y[0] < x[0]){\n \
    \           return -1\n        }\n        if(y[0] > x[0]){\n            return\
    \ 1\n        }\n        return 0\n    })\n    rows.reverse()\n    var coords =\
    \ []\n    for(var r = 0; r < rows.length; r++){\n        var row = rows[r]\n \
    \       var rowCoords = []\n        for(var c = 0; c < row[1]; c++){\n       \
    \     rowCoords.push((c + 1) * (r + 1))\n        }\n        coords.push(rowCoords)\n\
    \    }\n    return coords\n}\n", "  if(lst == null) return [];\n  var new_lst\
    \ = [];\n  for(var i = lst.length - 1; i >= 0; i--){\n    var row = lst[i]\n \
    \   var found = false;\n    for(var j = 0; j < row.length; j++){\n      if(row[j]\
    \ === x){\n        found = true;\n        new_lst.push([i, j])\n        break;\n\
    \      }\n    }\n    if(found == false){\n      new_lst.push([i, 0])\n    }\n\
    \  }\n  new_lst.sort(function(a, b){\n    if(a[1] < b[1]) return -1\n    if(a[1]\
    \ > b[1]) return 1\n    return 0;\n  })\n  new_lst.sort(function(a, b){\n    if(a[0]\
    \ > b[0]) return -1\n    if(a[0] < b[0]) return 1\n    return 0;\n  })\n  return\
    \ new_lst\n}\n", "\tif(lst.length == 0){\n\t\treturn [];\n\t}\n\tlet len = lst[0].length;\n\
    \tlet result = [];\n\tfor(let i = 0; i < len; i++){\n\t\tlet y = lst[0].indexOf(x);\n\
    \t\tlet row = y % len;\n\t\tlet col = y / len;\n\t\tresult.push([row, col]);\n\
    \t}\n\tresult.sort((a, b) => b[0] - a[0]);\n\tresult.sort((a, b) => a[1] - b[1]);\n\
    \treturn result;\n}\n", "    lst = lst.map(row => row.reverse());\n    lst = lst.map(row\
    \ => row.map((e, i) => e === x ? i : undefined));\n    var coords = [];\n    for(var\
    \ i in lst){\n        coords = coords.concat(lst[i]);\n    }\n    coords = coords.sort(function(a,\
    \ b){return a - b});\n    var result = [];\n    coords.map(x => {\n        var\
    \ found = [];\n        for(var y in coords){\n            if(coords[y][0] ===\
    \ x){\n                found.push([coords[y][0], coords[y][1]]);\n           \
    \ }\n        }\n        result.push(found);\n    });\n    return result.reverse();\n\
    }\n", "    const coords = [];\n    for (const row of lst) {\n        const coord\
    \ = [];\n        let found = false;\n        for (const val of row) {\n      \
    \      if (val === x) {\n                found = true;\n                coord.push([row,\
    \ val])\n            }\n        }\n        if (found) {\n            coords.push(coord);\n\
    \        }\n    }\n    return coords;\n}\n", "    var ret = []\n    for(var i=0;\
    \ i<lst.length; i++){\n        var r = lst[i]\n        for(var j=0; j<r.length;\
    \ j++){\n            if(r[j] == x){\n                ret.push([i, r.length-j-1])\n\
    \                break\n            }\n        }\n    }\n    ret.sort(function(i,\
    \ j){\n        return i[1] < j[1] ? -1 : 1;\n    })\n    ret.sort(function(i,\
    \ j){\n        return i[1] > j[1] ? -1 : 1;\n    })\n    return ret\n}\n", " \
    \ let row = lst.filter((r) => {\n    if(r.length == x){\n      return true;\n\
    \    }\n    return false;\n  });\n  row.sort((a, b) => a.length - b.length);\n\
    \  return row;\n}\n", "  var res = [];\n  var row = [];\n  var i = -1;\n  var\
    \ len = lst.length;\n  while(i++ < len){\n    if(lst[i].indexOf(x) !== -1){\n\
    \      row.push(lst[i]);\n    }\n  }\n  while(row.length > 0){\n    res.push(row);\n\
    \    row = [];\n    i = -1;\n    len = lst.length;\n    while(i++ < len){\n  \
    \    if(lst[i].indexOf(x) !== -1){\n        row.push(lst[i]);\n      }\n    }\n\
    \  }\n  return res;\n}\n", "  return get_col_coords(lst, x, get_col_coords(lst,\
    \ get_row(lst, x), get_row(lst, get_row(lst, x))))\n}\n", "\tlst.sort((a,b) =>\
    \ a[0] - b[0]);\n\tlet n = 0;\n\tlet tmp = [];\n\tfor(let r of lst){\n\t\tif(r[x]){\n\
    \t\t\ttmp[n] = r;\n\t\t\tn++;\n\t\t}\n\t}\n\tif(tmp.length > n){\n\t\ttmp = tmp.slice(n);\n\
    \t}\n\ttmp.sort((a,b) => {\n\t\treturn a[1] - b[1];\n\t});\n\treturn tmp;\n}\n",
  "    let tmp = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            tmp.push([i, lst[i][1]]);\n        }\n    }\n    tmp.sort((a,\
    \ b) => b[1] - a[1]);\n    tmp.sort((a, b) => b[0] - a[0]);\n    return tmp;\n\
    }\n", "\tvar len = 0;\n\tfor(var i=0;i<lst.length;i++){\n\t\tlen += lst[i].length;\n\
    \t}\n\tvar coords = [];\n\tfor(var i=0;i<len;i++){\n\t\tif(lst[i].indexOf(x)<0){\n\
    \t\t\tcoords.push(get_col_coords(lst,i,x));\n\t\t}\n\t}\n\tcoords.sort(function(a,\
    \ b){\n\t\tvar r = a[0]-b[0];\n\t\tif(r!=0){\n\t\t\treturn r;\n\t\t}\n\t\treturn\
    \ a[1]-b[1];\n\t});\n\tcoords.sort(function(a, b){\n\t\tvar r = a[1]-b[1];\n\t\
    \tif(r!=0){\n\t\t\treturn r;\n\t\t}\n\t\treturn a[0]-b[0];\n\t});\n\treturn coords;\n\
    }", "  const rows = []\n  lst.forEach(function(row){\n    const tmp = [ (row.indexOf(x)\
    \ > -1 ? row.indexOf(x) : -1), row.length - 1 ]\n    rows.push(tmp)\n  })\n  return\
    \ rows.sort(function(a, b){\n    return a[0] - b[0]\n  })\n}\n", "    var row\
    \ = lst;\n    var row_index;\n    for(var i=0; i<row.length; i++){\n        if(row[i]\
    \ === x){\n            row_index = i;\n            break;\n        }\n    }\n\
    \    if(row_index === undefined){\n        return [[]];\n    }\n    var row_coords\
    \ = [];\n    var row_row_coords = [];\n    for(var i = 0; i<row.length; i++){\n\
    \        if(i === row_index){\n            row_coords.push(row[i]);\n        }else{\n\
    \            row_row_coords.push(row[i]);\n        }\n    }\n    var row_sorted\
    \ = row_coords.sort(function(a, b){\n        var result = a - b;\n        if(result\
    \ === 0){\n            return 0;\n        }else if(result > 0){\n            return\
    \ 1;\n        }else{\n            return -1;\n        }\n    });\n    for(var\
    \ i=0; i<row_sorted.length; i++){\n        row_sorted = row_row_coords.sort(function(a,\
    \ b){\n            var result = a - b;\n            if(result === 0){\n      \
    \          return 0;\n            }else if(result > 0){\n                return\
    \ 1;\n            }else{\n                return -1;\n            }\n        });\n\
    \    }\n    return row_sorted;\n}\n", "  var coords = [];\n  for(var i =0; i <\
    \ lst.length; i++){\n    if(lst[i][0] == x){\n      coords.push({row: i, column:\
    \ lst[i][1]});\n    }\n  }\n  coords.sort(function(a, b){\n    return a.row -\
    \ b.row;\n  });\n  coords.sort(function(a, b){\n    return b.column - a.column;\n\
    \  });\n  return coords;\n}\n", "  var i,\n      len = lst.length,\n      result\
    \ = [];\n\n  //Create two arrays, one for row and one for column\n  for(i = 0;\
    \ i < len; i++){\n    //Check if element is in current row or column\n    if((i\
    \ & x) === 0){\n      result.push([i, lst[i]]);\n    } else {\n      result.push([lst[i],\
    \ i]);\n    }\n  }\n\n  //Sort rows initially by rows in ascending order\n  result.sort(function(a,\
    \ b){\n    var rowA = a[1],\n        rowB = b[1];\n    //Sort column by column\
    \ in descending order\n    return rowB - rowA;\n  });\n\n  //Sort columns initially\
    \ by columns in descending order\n  result.reverse();\n\n  return result;\n}\n",
  "    \n    if(lst.length <= 1){\n        return [];\n    }\n    \n    var coords\
    \ = [];\n    coords.sort((a,b) => a.row - b.row || b.column - a.column);\n   \
    \ \n    for(var i =0; i < coords.length; i++){\n        if(coords.find(c => c[0]\
    \ == i) && (coords.find(c => c[1] == i).column != x)){\n            coords[i]\
    \ = [coords.find(c => c[1] == i).row, x];\n        }\n    }\n    \n    coords.sort((a,b)\
    \ => b.column - a.column);\n    \n    return coords.map(c => [coords.find(c =>\
    \ c[0] == c[0]).row, c[1]]);\n}\n", "    let row_size = lst[0].length;\n    let\
    \ col_size = lst.length;\n\n    let result = [];\n    for (let i = 0; i < col_size;\
    \ i++){\n        let row = [];\n        for (let j = 0; j < row_size; j++){\n\
    \            let coord = [i, j];\n            if (lst[j][i] == x){\n         \
    \       row.push(coord);\n            }\n        }\n        if (row.length > 0){\n\
    \            result.push(row);\n        }\n    }\n\n    result.sort((a,b) => {\n\
    \        if (a[0][0] == b[0][0]){\n            return b[0][1] - a[0][1];\n   \
    \     }\n        return a[0][0] - b[0][0];\n    });\n\n    result.sort((a,b) =>\
    \ {\n        if (a[0][1] == b[0][1]){\n            return b[1][0] - a[1][0];\n\
    \        }\n        return a[0][1] - b[0][1];\n    });\n\n    return result;\n\
    }\n", "\tif(x == 0){\n\t\treturn [[], []];\n\t}\n\t\n\tif(lst[x] === undefined){\n\
    \t\treturn [];\n\t}\n\t\n\tvar coord = [];\n\tvar lst = lst.slice();\n\t\n\twhile(lst.indexOf(x)\
    \ >= 0){\n\t\tcoord.push([x, lst.indexOf(x)]);\n\t\tlst.remove(x);\n\t\tx--;\n\
    \t}\n\t\n\tcoord.sort((a, b) => {\n\t\treturn a[0] - b[0];\n\t});\n\t\n\tvar y\
    \ = coord[0][1];\n\t\n\tcoord = coord.sort((a, b) => {\n\t\treturn a[1] - y;\n\
    \t});\n\t\n\treturn coord;\n}\n", "  var out = [];\n  var n = lst.length;\n  var\
    \ m = lst[0].length;\n  if(n <= 0 || m <= 0 || x >= n || x >= m){\n    return\
    \ out;\n  }\n  if(x < 0){\n    x = x + n;\n  }\n  if(x >= m){\n    return out;\n\
    \  }\n  var row = Math.floor(x/m);\n  var col = x - row*m;\n  var pos = row;\n\
    \  var end = col + m;\n  for(; pos < end; pos++){\n    out.push([row, pos]);\n\
    \  }\n  out.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  out.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  out.forEach(function(elem){\n    lst[elem[0]]\
    \ = lst[elem[0]].slice();\n  });\n  out.forEach(function(elem){\n    lst[elem[0]][elem[1]]\
    \ = x;\n  });\n  return out;\n}\n", "    var row = [];\n    var xs = [];\n   \
    \ for (var i = lst.length-1; i>=0; i--){\n        var rowx = lst[i];\n       \
    \ for (var y = rowx.length-1; y>=0; y--){\n            if (rowx[y] == x){\n  \
    \              row.push([i+1, y+1]);\n                break;\n            }\n\
    \        }\n    }\n    row = row.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    row = row.sort(function(a, b){\n        return a[1] - b[1];\n  \
    \  });\n    return row;\n}", "  return get_rows(lst).filter(function(v){return\
    \ v[0]===x}).sort(function(a, b){return b[1] - a[1]});\n}", "    return lst.map(function(row){\n\
    \        return row.filter(function(el){\n            return el === x;\n     \
    \   });\n    });\n}\n", "  if(lst.length <= 0){\n    return []\n  }\n\n  var row\
    \ = [x],\n      rows = [],\n      j = 0,\n      r = 0, c = 0,\n      n = 0; //n\
    \ represents the number of columns in the first row\n\n  for(let i = 0; i < lst.length;\
    \ i++){\n    n++; //n represents the number of columns in current row\n\n    while(row.length\
    \ < n){\n      row.push(r);\n      r++\n    }\n\n    while(row.length < n){\n\
    \      row.push(c);\n      c++\n    }\n\n    rows.push(row.slice());\n    n--;\n\
    \    row.splice(0, n);\n  }\n\n  rows.sort((a, b) => b[0] - a[0]);\n  rows.sort((a,\
    \ b) => b[1] - a[1]).reverse();\n\n  return rows\n}\n", "    let res = [];\n \
    \   if(!lst)\n        return res;\n\n    // Sort the list\n    lst = lst.sort((a,b)=>{\n\
    \        if(a[0] < b[0])\n            return -1;\n        if(a[0] > b[0])\n  \
    \          return 1;\n        return 0;\n    });\n    \n    // Sort the row by\
    \ column\n    let row = lst[0].slice().reverse().sort((a,b)=>{\n        if(a[1]\
    \ < b[1])\n            return -1;\n        if(a[1] > b[1])\n            return\
    \ 1;\n        return 0;\n    });\n    \n    // Find out the index for x\n    let\
    \ ind = lst.findIndex(x=>x[0] == row[0]);\n    \n    // If x does not exist in\
    \ the list, return empty list\n    if(ind == -1)\n        return [];\n    \n \
    \   // Otherwise,\n    let tmp = [row];\n    let coord = tmp[ind].map((x,i)=>{\n\
    \        if(i == ind)\n            return row;\n        else\n            return\
    \ row[i];\n    });\n    res.push(coord);\n    \n    // Repeat the process for\
    \ rest of the list\n    while(lst.length){\n        lst = lst.sort((a,b)=>{\n\
    \            if(a[0] < b[0])\n                return -1;\n            if(a[0]\
    \ > b[0])\n                return 1;\n            return 0;\n        });\n   \
    \     row = lst[0].slice().reverse().sort((a,b)=>{\n            if(a[1] < b[1])\n\
    \                return -1;\n            if(a[1] > b[1])\n                return\
    \ 1;\n            return 0;\n        });\n        ind = lst.findIndex(x=>x[0]\
    \ == row[0]);\n        if(ind == -1)\n            break;\n        tmp.push(row.map((x,i)=>{\n\
    \            if(i == ind)\n                return row;\n            else\n   \
    \             return row[i];\n        }));\n    }\n    res.push(tmp);\n    return\
    \ res;\n}\n", "    let res = new Array();\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            res.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    res.sort((a, b) => {\n        if(a[1] === b[1]){\n    \
    \        return a[0] - b[0];\n        } else {\n            return a[1] - b[1];\n\
    \        }\n    });\n    for(let i = res.length - 1; i >= 0; i--){\n        if(res[i][1]\
    \ === i){\n            res.splice(i, 1);\n        }\n    }\n    return res;\n\
    }\n", "  let rows = lst.reduce((acc, cur) => {\n    acc.push(cur.slice())\n  \
    \  return acc\n  }, [])\n  rows = rows.sort((a,b) => {\n    if(rows[a[0]][a[1]]\
    \ < rows[b[0]][b[1]]){\n      return 1\n    }\n    if(rows[a[0]][a[1]] > rows[b[0]][b[1]]){\n\
    \      return -1\n    }\n    return 0\n  })\n  let row = []\n  let col = []\n\
    \  let index = 0\n  for(let i = 0; i < rows.length; i++){\n    rows.push(rows[i])\n\
    \    if(rows[i][0] === x){\n      row.push([i,rows[i][0]])\n      col.push([i,rows[i][1]])\n\
    \      break\n    }\n  }\n  col = col.sort((a, b) => {\n    if(a[1] < b[1]){\n\
    \      return -1\n    }\n    if(a[1] > b[1]){\n      return 1\n    }\n    return\
    \ 0\n  })\n  return row.map((row, index) => {\n    return [row, col[index]]\n\
    \  })\n}\n", "  let rows=lst.reduce((accum,row)=>{\n    accum.push(...row);\n\
    \    return accum;\n  },[]);\n  return rows.sort((a,b)=>{\n    return a>b?1:-1;\n\
    \  })\n  .map((r,i)=>{\n    return (r>x?r-1:r+1);\n  });\n}\n", "    let row =\
    \ [];\n    let col = [];\n    for(let i = 0; i < lst.length; i++){\n        if(row.length\
    \ < x){\n            row.push(i);\n            col.push(0);\n        }\n     \
    \   let x = lst[i][col[col.length-1]];\n        if(x < x){\n            col.push(0);\n\
    \            col.push(0);\n            row.push(-1);\n        }else{\n       \
    \     row.push(i);\n            col.push(col.length-1);\n        }\n    }\n  \
    \  col.push(col.length-1);\n    let result = [];\n    for(let i = 0; i < row.length;\
    \ i++){\n        for(let j = 0; j < col.length; j++){\n            result.push([row[i],\
    \ col[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        let rowa\
    \ = a[0];\n        let rowb = b[0];\n        if(rowa > rowb) return 1;\n     \
    \   if(rowa < rowb) return -1;\n        let columna = a[1];\n        let columnb\
    \ = b[1];\n        if(columna > columnb) return 1;\n        if(columna < columnb)\
    \ return -1;\n        return 0;\n    });\n    result.sort(function(a, b){\n  \
    \      let rowa = a[0];\n        let rowb = b[0];\n        if(rowa < rowb) return\
    \ -1;\n        if(rowa > rowb) return 1;\n        let columna = a[1];\n      \
    \  let columnb = b[1];\n        if(columna < columnb) return -1;\n        if(columna\
    \ > columnb) return 1;\n        return 0;\n    });\n    return result;\n}\n",
  "    for(let i = 0; i < lst.length; i++){\n        let row = lst[i];\n        let\
    \ count = 0;\n        for(let j = 0; j < row.length; j++){\n            count\
    \ += row[j] === x ? 1 : 0;\n        }\n        if(count === row.length){\n   \
    \         return [[i, 0], [i, row.length-1]]\n        }\n    }\n}\n", "\tif(lst.length\
    \ == 0){\n\t\treturn [];\n\t}\n\tvar i, xs = [];\n\tfor(i = 0; i < lst.length;\
    \ i++){\n\t\txs = xs.concat( get_row(lst[i], x) );\n\t}\n\txs = xs.sort();\n\t\
    xs = xs.sort((a, b) => {\n\t\treturn a.row - b.row\n\t});\n\txs = xs.sort((a,\
    \ b) => {\n\t\treturn a.col - b.col\n\t});\n\treturn xs;\n}\n", "  if(!lst)\n\
    \    return [];\n  var results = [];\n  for(var i = 0; i < lst.length; i++){\n\
    \    var item = lst[i];\n    for(var j = 0; j < item.length; j++)\n      if(item[j]\
    \ === x)\n        results.push([i, j]);\n  }\n  return results.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  }).sort(function(a, b){\n    return a[1] - b[1];\n\
    \  });\n}\n", "  // TODO: implement here\n  return [];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [[]];\n  }\n  if (lst.length === 1) {\n    var row = lst[0];\n\
    \    return [[x].concat(row.slice(0, x))];\n  }\n  var rows = [];\n  var rows\
    \ = lst.reduce(function (rows, row) {\n    var rows = [];\n    rows.push(row);\n\
    \    var sortedRow = row.sort(function (a, b){\n      if (a > b) return 1;\n \
    \     if (a < b) return -1;\n      return 0;\n    });\n    var rw = sortedRow.slice().reverse();\n\
    \    var sortedColumns = sortedRow.slice().reverse().sort(function (a, b){\n \
    \     if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n   \
    \ });\n    var sortedColumnsLen = sortedColumns.length - 1;\n    var rowWithCols\
    \ = sortedRow.slice(0, x);\n    var rowWithColsLen = rowWithCols.length;\n   \
    \ rows.push(rw.concat(sortedColumns.slice(0, sortedColumnsLen)));\n    rows.push(rw.concat(sortedColumns.slice(sortedColumnsLen)));\n\
    \    return rows;\n  }, []);\n  rows.sort(function (a, b) {\n    return b[0].length\
    \ - a[0].length;\n  });\n  return rows;\n}\n", "    let coords = lst.map(r =>\
    \ [r,0]);\n    coords.sort((a, b) => a[a[1]] < b[b[1]] ? -1 : 1);\n    coords.sort((a,\
    \ b) => a[a[0]] > b[b[0]] ? -1 : 1);\n    let rows = [];\n    let row_x = coords[x][0];\n\
    \    let row_y = coords[x][1];\n    for(let r = 0; r < coords.length; r++){\n\
    \        if(coords[r][0] == row_x){\n            for(let c = 0; c < coords[r][1];\
    \ c++){\n                rows.push([r+1, c+1]);\n            }\n        }\n  \
    \  }\n    return rows;\n}\n", "    let row = 0;\n    let result = [];\n\n    if(lst\
    \ && lst.length){\n        for(let i = 0; i < lst.length; i++){\n            if(lst[i]\
    \ === x){\n                result = [[i, row]];\n                row++;\n    \
    \        } else {\n                if(row > 0 && row === lst.length){\n      \
    \              row = 0;\n                }\n                if(row === lst.length){\n\
    \                    result.push([[i, row]])\n                }\n            }\n\
    \        }\n    }\n\n    result.sort((a,b)=>{\n        if(a[1] < b[1]){\n    \
    \        return 1;\n        }\n        else{\n            return -1;\n       \
    \ }\n    });\n    result.sort((a,b)=>{\n        if(a[1] > b[1]){\n           \
    \ return 1;\n        }\n        else{\n            return -1;\n        }\n   \
    \ });\n\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nSorry, but\
    \ this does not work. Try running get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n\
    \    [1,2,3,4,5,1]\n], 1) and the result is wrong. Your solution returns [(0,\
    \ 0), (1, 4), (1, 1), (2, 5), (2, 1)] which is incorrect.\n<|/ c |>\n<| a tags=arrays,algorithm,sorting,javascript,nested\
    \ |>\nHere's an O(2n) solution that will find the row and col indices for you:\n\
    \n<code>\nconst get_row = arr => {\n  if (!arr.length) {\n    return []\n  }\n\
    \  const row = new Map()\n  const col = new Map()\n  let i = 0\n  for (const x\
    \ of arr) {\n    const rowIndex = row.has(x) ?\n      row.get(x) ?\n        Math.max(row.get(x),\
    \ i) : i :\n      i\n    row.delete(x)\n    col.set(x, rowIndex)\n    i++\n  }\n\
    \  return [...row.entries()]\n    .sort((a, b) => a[1] - b[1])\n    .map(x =>\
    \ [col.get(x[0]), x[0]])\n}\n\nconst arr = [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2,\
    \ 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n]\n", "  var i, row, col;\n  var lst1 =\
    \ [];\n  for(i = 0; i < lst.length; i++){\n    row = lst[i];\n    col = -1;\n\
    \    while(row.length > col){\n      col++;\n    }\n    lst1.push([col, row.indexOf(x)]);\n\
    \  }\n  lst1.sort(function(a, b){\n    return a[1] - b[1];\n  });\n  var r = lst1.map(function(p){return\
    \ p[0]});\n  r.sort(function(a, b){\n    return a[1] - b[1];\n  });\n  return\
    \ r;\n}\n", "  let m = [];\n  for(let i = 0; i < lst.length; i++){\n    let r\
    \ = [];\n    for(let j = 0; j < lst[i].length; j++){\n      if(j !== x){\n   \
    \     r.push(lst[i][j]);\n      }\n    }\n    m.push(r);\n  }\n  return m;\n}",
  "  if (lst.length == 0) return [];\n  if (lst.length <= x) return [];\n  \n  var\
    \ res = [];\n  var last_row = lst.length - 1;\n  \n  var row, row_len, col_len,\
    \ i, j;\n  \n  for (i = 0; i < lst.length; i++){\n    row = lst[i];\n    row_len\
    \ = row.length;\n    col_len = x;\n    \n    for (j = 0; j < row_len; j++){\n\
    \      if (j == col_len){\n        res.push([last_row + i, row[j]]);\n      }\n\
    \      else if (j < col_len){\n        res.push([last_row + i, row[j]];\n    \
    \  }\n      else{\n        res.push([last_row + i, row[j]];\n      }\n    }\n\
    \  }\n  \n  res.sort(function(a, b){\n    return a[0] - b[0] || a[1] - b[1];\n\
    \  });\n  \n  return res;\n}\n\n", "    var row = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] === undefined) continue;\n        for(var j=0; j<lst[i].length;\
    \ j++){\n            if(lst[i][j] === x){\n                row.push([i,j]);\n\
    \                break;\n            }\n        }\n        if(row.some(function(item){return\
    \ item[0] === i})){\n            break;\n        }\n    }\n    return row;\n}\n",
  "    var ret = [];\n    var len = lst.length;\n    for(var i = 0; i < len; i++){\n\
    \        var row = lst[i];\n        for(var j = 0; j < row.length; j++){\n   \
    \         if(row[j] === x)\n                ret.push([i,j]);\n        }\n    }\n\
    \    return ret;\n}\n", "    var results = [];\n    var sorted_row = get_sorted_row(lst,\
    \ x);\n    for(var i = 0; i < sorted_row.length; i++){\n        results.push([i,\
    \ get_column(sorted_row, i)]);\n    }\n    return results.sort(function(a, b){\n\
    \        return a[0] - b[0];\n    }).reverse().sort(function(a, b){\n        return\
    \ a[1] - b[1];\n    }).map(function(el){\n        return [el[0], el[1]];\n   \
    \ });\n}\n", "    if(!lst) return [];\n    return lst.filter(function(row){\n\
    \        return row.some(function(rowItem, i){\n            return rowItem ===\
    \ x;\n        })\n    }).sort(function(row1, row2){\n        return row1[0] <\
    \ row2[0] ? -1 : row1[0] === row2[0] ? 0 : 1;\n    }).map(function(row){\n   \
    \     return row.map(function(rowItem){\n            return rowItem;\n       \
    \ });\n    });\n}\n", "  const res = lst.map(el => {\n    if(el.length === 0)\
    \ return [];\n    return el.filter((val, i) => i == x).sort((a, b) => b - a).sort((a,\
    \ b) => b - a)\n  });\n  \n  return res;\n}\n", "  const m = lst.length, n = lst[0].length;\n\
    \  const coords = [];\n  \n  for (let i = 0; i < m; i++) {\n    const row = lst[i];\n\
    \    for (let j = 0; j < n; j++) {\n      if (row[j] === x) {\n        coords.push([i,\
    \ j]);\n      }\n    }\n  }\n  coords.sort((a, b) => {\n    const ra = a[0];\n\
    \    const rb = b[0];\n    \n    if (ra < rb) return -1;\n    if (ra > rb) return\
    \ 1;\n    \n    const rc = a[1];\n    const rd = b[1];\n    \n    if (rc < rd)\
    \ return -1;\n    if (rc > rd) return 1;\n    \n    return 0;\n  });\n  \n  const\
    \ ret = [];\n  let row = 0;\n  for (let i = 0; i < coords.length; i++){\n    const\
    \ [row, col] = coords[i];\n    for (let j = 0; j < n; j++) {\n      ret.push([row,\
    \ j]);\n    }\n  }\n  \n  ret.sort((a, b) => {\n    const ra = a[0];\n    const\
    \ rb = b[0];\n    \n    if (ra < rb) return -1;\n    if (ra > rb) return 1;\n\
    \    \n    const rc = a[1];\n    const rd = b[1];\n    \n    if (rc < rd) return\
    \ -1;\n    if (rc > rd) return 1;\n    \n    return 0;\n  });\n  \n  return ret;\n\
    }\n", "    var row_list = []\n    for(var r=0; r<lst.length; r++){\n        row_list.push([(r+0),\
    \ lst[r]])\n    }\n    sort_rows(row_list)\n    return get_row_by_order(row_list,\
    \ x)\n}\n", "  // empty list\n  if(lst.length == 0){\n    return [];\n  }\n\n\
    \  // not enough elements\n  if(lst.length < 2){\n    return [];\n  }\n\n  var\
    \ result = [];\n\n  for(var i=0; i<lst.length; i++){\n    var row = lst[i];\n\
    \    // if x is the first element in the row\n    if(row.length == x && i == 0){\n\
    \      var coord = row.indexOf(x);\n      if(coord == -1){\n        result.push([row,\
    \ row]);\n      }else{\n        result.push([\n          [row[coord], row], //row\n\
    \          [row, row[coord]] //column\n        ]);\n      }\n    }else if(row.length\
    \ > x){\n      break;\n    }\n  }\n\n  return result;\n}\n", "  var r = [];\n\
    \  for(var i = 0, len = lst.length; i < len; i++){\n    if (lst[i].indexOf(x)\
    \ != -1){\n      var idx = lst[i].indexOf(x);\n      r.push([i, idx]);\n    }\n\
    \  }\n  r.sort(function(x, y){\n    if(y[1] > x[1]) return -1;\n    if(y[1] <\
    \ x[1]) return 1;\n    return 0;\n  });\n  var new_r = [];\n  for(var i = 0, len\
    \ = r.length; i < len; i++){\n    if(i != r[i][0]) new_r.push(r[i]);\n  }\n  return\
    \ new_r;\n}\n", "  let m = new Map();\n  let ret = [];\n  lst.map( (x) => {\n\
    \    for (let i = 0; i < x.length; i++){\n      let y = new Map();\n      y.set(i,\
    \ x[i]);\n      m.set(i, y);\n    }\n  })\n  let i = m.get(x);\n  if(i === undefined){\n\
    \    return ret;\n  }\n  while(ret.some(x => x[0] > i[0]) ){\n    i[0] -= 1;\n\
    \  }\n  while(ret.some(x => x[0] < i[0]) ){\n    i[0] += 1;\n  }\n  while(ret.some(x\
    \ => x[1] > i[1]) ){\n    i[1] -= 1;\n  }\n  while(ret.some(x => x[1] < i[1])\
    \ ){\n    i[1] += 1;\n  }\n  return ret.map((x) => {\n    return [[i[0], i[1]],\
    \ x[1]]\n  })\n}", "    var result = [];\n    for(let i=0; i<lst.length; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    result.sort((a, b) => {\n        //sort by rows first\n\
    \        if(b.row - a.row === 0){\n            //sort by columns\n           \
    \ return b.column - a.column;\n        }\n        //sort by rows\n        return\
    \ a.row - b.row;\n    });\n    result = result.map(v => [v[0], v[1]-1]);\n   \
    \ result.sort((a, b) => {\n        //sort by columns first\n        if(a.column\
    \ - b.column === 0){\n            //sort by rows\n            return a.row - b.row;\n\
    \        }\n        //sort by columns\n        return b.column - a.column;\n \
    \   });\n    return result;\n}", "    // check invalid input\n    if(lst.length\
    \ == 0){\n        throw new RangeError('Invalid Input: list cannot be empty');\n\
    \    }\n    if(lst.length == 1){\n        throw new RangeError('Invalid Input:\
    \ list cannot be of length 1');\n    }\n    // get the row index from 0\n    var\
    \ row = lst[0].length - 1;\n    // get the column index from 0\n    var col =\
    \ lst[0].length - 1;\n    // start with a copy of lst\n    var temp = lst.slice();\n\
    \    while(temp[row].length > col){\n        temp.shift();\n        col--;\n \
    \   }\n    // get the coordinate of x\n    var coord = getCoordinate(temp, row,\
    \ col);\n    // if the coordinate is not in lst, return undefined\n    if(coord\
    \ == undefined){\n        return undefined;\n    }\n    // otherwise return the\
    \ coordinate\n    return [coord.row, coord.col];\n}", "  // Get the number of\
    \ rows of the given matrix\n  const m = lst.length;\n  // Get the number of columns\
    \ of the given matrix\n  const n = lst[0].length;\n  // Check if the number of\
    \ rows is 1 or less\n  if(m < 1){\n    // If so, return []\n    return [];\n \
    \ }\n  // Create empty array of tuples to return\n  let coords = [];\n  // For\
    \ each row\n  for(let i = 0; i<m; i++){\n    // Create a list of tuples for each\
    \ row, starting with 0\n    let row = [(i, 0)];\n    // For each column\n    for(let\
    \ j = 0; j<n; j++){\n      // Check if the current cell is equal to the given\
    \ value\n      if(lst[i][j] == x){\n        // If so, add it to the list and mark\
    \ it for sort\n        row.push((i, j))\n      }\n    }\n    // Add the row to\
    \ the coords array\n    coords.push(row)\n  }\n  // Sort the coords array by rows\
    \ in ascending order\n  coords.sort((a,b) => {\n    // Get the row numbers from\
    \ the two rows\n    const r1 = a[0];\n    const r2 = b[0];\n    // If row numbers\
    \ are the same\n    if(r1 == r2){\n      // Get column numbers from the two rows\n\
    \      const c1 = a[1];\n      const c2 = b[1];\n      // If column numbers are\
    \ the same\n      if(c1 == c2){\n        // Return false to sort them in ascending\
    \ order\n        return false;\n      }\n      // Else return true to sort them\
    \ in descending order\n      return c1 < c2;\n    }\n    // Else return false\
    \ to sort them in ascending order\n    return r1 < r2;\n  });\n  // Sort the coords\
    \ array by columns in descending order\n  coords.sort((a,b) => {\n    // Get the\
    \ row numbers from the two rows\n    const r1 = a[0];\n    const r2 = b[0];\n\
    \    // If row numbers are the same\n    if(r1 == r2){\n      // Get column numbers\
    \ from the two rows\n      const c1 = a[1];\n      const c2 = b[1];\n      //\
    \ If column numbers are the same\n      if(c1 == c2){\n        // Return false\
    \ to sort them in descending order\n        return false;\n      }\n      // Else\
    \ return true to sort them in ascending order\n      return c1 > c2;\n    }\n\
    \    // Else return false to sort them in descending order\n    return r1 > r2;\n\
    \  });\n  // Return the coords\n  return coords;\n}\n", "    var ans = [];\n \
    \   for(var i=0;i<lst.length;i++){\n        for(var j=0;j<lst[i].length;j++){\n\
    \            if(j===0){\n                var r = lst[i][j];\n                if(r===x){\n\
    \                    ans.push([i,j]);\n                }\n            }\n    \
    \        else{\n                var r = lst[i][j];\n                var c = 0;\n\
    \                if(r===x){\n                    ans.push([i,j]);\n          \
    \      }\n            }\n        }\n    }\n    ans.sort(function(l,r){return r-l;});\n\
    \    ans.sort(function(l,r){return l-r});\n    return ans;\n}\n", "  let xs =\
    \ [];\n  for(let i = 0; i < lst.length; i++){\n    let found = false;\n    for(let\
    \ j = 0; j < xs.length; j++){\n      if(lst[i][0] === xs[j][0]){\n        if(lst[i][1]\
    \ > xs[j][1]){\n          found = true;\n        }else{\n          found = false;\n\
    \          break;\n        }\n      }\n    }\n    if(!found){\n      xs.push(lst[i]);\n\
    \    }\n  }\n  xs.sort(function(a,b){\n    return b[1]-a[1];\n  })\n  for(let\
    \ i = 0; i < xs.length; i++){\n    xs[i].sort(function(a,b){\n      return b[0]-a[0];\n\
    \    })\n  }\n  return xs;\n}\n", "  var row = [];\n  var row_sorted = get_sorted_row(lst,\
    \ x);\n  var row_sorted_reversed = get_sorted_row(lst.reverse(), x);\n  var counter\
    \ = 0;\n  for(var i of row_sorted){\n    if(!row.includes(i)){\n      row.push(i);\n\
    \      counter++;\n    }\n  }\n  if(counter > 0){\n    row.sort((a, b) => b[0]\
    \ - a[0]);\n    row.sort((a, b) => b[1] - a[1]);\n  }\n  return row;\n}\n", "\t\
    var i,j,len,temp=[];\n\t//Convert lst to a 2d array when x is given.\n\tif(typeof\
    \ x === 'number'){\n\t\tlst = lst[x];\n\t}\n\t//Convert lst to a 1d array.\n\t\
    if(!Array.isArray(lst)){\n\t\tlst = lst.slice();\n\t}\n\t//Make sure x is a number.\n\
    \tif(isNaN(parseFloat(x))){\n\t\treturn [];\n\t}\n\t//Convert lst to a 2d array\
    \ when x is given.\n\tlst = lst[x];\n\t//Convert to a 1d array if it isn't already\n\
    \tif(!Array.isArray(lst)){\n\t\tlst = lst.slice();\n\t}\n\t//Sort coordinates\
    \ initially by rows in ascending order.\n\tlst.sort(function(a, b){\n\t\treturn\
    \ a[0]-b[0];\n\t});\n\t//Iterate through rows.\n\tfor(i=0;i<lst.length;i++){\n\
    \t\ttemp = [];\n\t\t//Iterate through columns.\n\t\tfor(j=0;j<lst[i].length;j++){\n\
    \t\t\t//If x is in current column\n\t\t\tif(lst[i][j] === x){\n\t\t\t\t//Push\
    \ the tuple into temp array.\n\t\t\t\ttemp.push([i, lst[i][j]]);\n\t\t\t}\n\t\t\
    }\n\t\t//If temp contains any tuples, return it.\n\t\tif(temp.length > 0){\n\t\
    \t\treturn temp;\n\t\t}\n\t}\n\t//If no tuples found, return empty array.\n\t\
    return [];\n}", "  if(lst.length < 1 || x < 0 || x > lst.length){\n    throw 'Invalid\
    \ arguments'\n  }\n  var res = [];\n  for(var i = 0; i < lst.length; i++){\n \
    \   if(lst[i].indexOf(x) != -1){\n      res.push([i, lst[i].indexOf(x)]);\n  \
    \  }\n  }\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a,b) => a[0] - b[0],\
    \ (a, b) => b[1] - a[1]);\n  return res;\n}\n", "  let ret = [];\n  for(let i\
    \ = 0; i < lst.length; i++){\n    let j = 0;\n    while(j < lst[i].length && j\
    \ > 0){\n      if(lst[i][j] == x){\n        let temp = [];\n        temp.push(i,\
    \ j)\n        temp.push(j, j)\n        ret.push(temp);\n        j = j - 1;\n \
    \     }\n      j = j + 1;\n    }\n  }\n  ret = ret.sort((a,b) => a[0] - b[0]);\n\
    \  for(let i = 0; i < ret.length; i++){\n    let tmp = [];\n    for(let j = 0;\
    \ j < ret[i].length; j++){\n      tmp.push([ret[i][j][0], ret[i][j][1]])\n   \
    \ }\n    ret = ret.concat(tmp);\n  }\n  return ret;\n}\n", "    if(!lst.length)\
    \ return [];\n    let ret = [];\n    for(let i = 0; i < lst.length; i++){\n  \
    \      if(lst[i][0] === x) ret.push([i, (lst[i].length - 1)]);\n        for(let\
    \ j = 0; j < lst[i].length; j++) ret.push([i, (lst[i].length - 1) - j]);\n   \
    \ }\n    ret.sort((a, b) => {\n        return b[1] - a[1];\n    });\n    ret.sort((a,\
    \ b) => {\n        return a[0] - b[0];\n    });\n    return ret;\n}\n", "    return\
    \ sort_coordinates(get_row_by_col(lst, x));\n}\n", "    // code here\n    \n \
    \   return lst;\n}\n", "  var result = []\n  for(var i = 0; i < lst.length; i++){\n\
    \    var row = lst[i];\n    var found = true;\n    for(var j = 0; j < row.length;\
    \ j++){\n      if(!row[j].includes(x)){\n        found = false;\n        break;\n\
    \      }\n    }\n    if(found){\n      result.push([i, row.indexOf(x.includes(1))\
    \ + 1]);\n    }\n  }\n  result.sort(function(a, b){\n    if(a[0] < b[0]){\n  \
    \    return -1;\n    }\n    if(a[0] > b[0]){\n      return 1;\n    }\n    return\
    \ 0;\n  })\n  result.sort(function(a, b){\n    if(a[1] < b[1]){\n      return\
    \ -1;\n    }\n    if(a[1] > b[1]){\n      return 1;\n    }\n    return 0;\n  })\n\
    \  return result;\n}\n", "  let result = [];\n  let row_idx = 0, col_idx = 0;\n\
    \  for(let r = 0; r < lst.length; r++){\n    if(lst[r][col_idx] == x){\n     \
    \ result.push([(r + 1), (col_idx + 1)]);\n      row_idx += 1;\n      col_idx +=\
    \ 1;\n    }\n  }\n  return result.sort((a,b) => a[0] - b[0]).reverse().sort((a,b)\
    \ => a[1] - b[1]).map((e) => [e[0], e[1]]);\n}\n", "    //sort by row \n    lst.sort(function(a,\
    \ b){\n        return a[0]-b[0]\n    })\n\n    var res = []\n    var lastIdx =\
    \ lst.length-1\n    var maxRow = lst[lastIdx][0]\n    var minRow = lst[lastIdx][0]\n\
    \n    //get the minimum value in the row \n    for (var i = lastIdx; i >= 0; i--)\
    \ {\n        var row = lst[i]\n        if (row[0] < minRow) {\n            minRow\
    \ = row[0]\n        }\n    }\n\n    //get the maximum value in the row \n    for\
    \ (var i = lastIdx; i >= 0; i--) {\n        var row = lst[i]\n        if (row[0]\
    \ > maxRow) {\n            maxRow = row[0]\n        }\n    }\n\n    //sort by\
    \ column in descending order \n    for (var i = lastIdx; i >= 0; i--) {\n    \
    \    var row = lst[i]\n        for (var j = lastIdx; j >= 0; j--) {\n        \
    \    var col = lst[j]\n            if (row[0] > col[0]) {\n                var\
    \ temp = row[0]\n                row[0] = col[0]\n                col[0] = temp\n\
    \            }\n        }\n    }\n\n    //find which row to start searching from\n\
    \    var i = lastIdx\n    while(i > 0){\n        if (x === lst[i][0]){\n     \
    \       break\n        }\n        i--\n    }\n    var j = 1\n    while(j < lastIdx){\n\
    \        if (x === lst[j][0]){\n            break\n        }\n        j++\n  \
    \  }\n\n    //get the coordinate pair\n    var rowIdx = i\n    var colIdx = j\n\
    \    while (rowIdx < maxRow) {\n        res.push([rowIdx, colIdx])\n        rowIdx++\n\
    \        colIdx--\n    }\n\n    return res\n}\n", "\tlet res = []\n\tfor(let i\
    \ = 0; i < lst.length; i++){\n\t\tfor(let j = 0; j < lst[i].length; j++){\n\t\t\
    \tif(lst[i][j] == x){\n\t\t\t\tres.push([i, j])\n\t\t\t}\n\t\t}\n\t}\n\t\n\tres.sort((a,\
    \ b) => {\n\t\treturn a[0] - b[0]\n\t})\n\n\tfor(let i = 0; i < res.length; i++){\n\
    \t\tres[i].reverse()\n\t}\n\treturn res\n}\n", "    var ret = [];\n    lst.forEach(function(row){\n\
    \        if(row[x]){\n            row.forEach(function(value){\n             \
    \   if(value == x){\n                    ret.push([row, value])\n            \
    \    }\n            })\n        }\n    });\n    ret = ret.sort((a,b)=>a[0]-b[0])\n\
    \    ret.sort((a,b)=>b[1]-a[1])\n    return ret;\n}\n", "  var res = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    if(x == lst[i]){\n      res.push([i, lst[i]])\n\
    \    }\n  }\n  return res;\n}\n", "  var newlst = []\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i][0] == x){\n      newlst.push([i, lst[i][1]])\n    }\n \
    \ }\n  newlst.sort(function(a, b){\n    return a[0] - b[0]\n  })\n  newlst.sort(function(a,\
    \ b){\n    return b[1] - a[1]\n  })\n  return newlst\n}\n", "  var result = [];\n\
    \  var tmp = [];\n  var flag = false;\n  for(var i = 0; i < lst.length; i++){\n\
    \    var value = lst[i];\n    if(value === x){\n      flag = true;\n      break;\n\
    \    }\n    if(flag){\n      result.push([i, value]);\n    }\n  }\n  return result;\n\
    }\n", "  if(lst.length === 0) return [];\n  if(lst.length === 1) return [(x, 0)];\n\
    \  \n  var ret = [];\n  var current_row = x;\n  \n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(current_row === lst[i][0]){\n      current_row = lst[i][1];\n\
    \      ret.push([current_row, x]);\n    }\n  }\n  \n  return ret;\n}\n", "\tlet\
    \ row = new Array();\n\tlet len = lst.length;\n\tlet row_index = 0;\n\tfor(let\
    \ i = 0; i < len; i++){\n\t\tlet index = lst[i].indexOf(x);\n\t\tif(index != -1){\n\
    \t\t\trow.push([row_index + i, index]);\n\t\t}\n\t}\n\trow.sort((a,b) => {\n\t\
    \treturn a[0] - b[0];\n\t});\n\trow.sort((a,b) => {\n\t\treturn b[1] - a[1];\n\
    \t});\n\tfor(let i = 0; i < row.length; i++){\n\t\tlet index = row[i][1];\n\t\t\
    while(index >= lst[row[i][0]].length){\n\t\t\trow.splice(i, 1);\n\t\t\ti--;\n\t\
    \t}\n\t}\n\treturn row;\n}\n", "\tvar lst = [];\n\tlst.push(x);\n\tvar j=0;\n\t\
    var n = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tn = lst[i]\n\t\tvar j\
    \ = 0;\n\t\twhile(j < n){ \n\t\t\tlst.push(j);\n\t\t\tj++;\n\t\t}\n\t}\n\tlst.reverse();\n\
    \tvar result = [];\n\tfor(var i = 0; i < lst.length; i++){\n\t\tvar x = lst[i];\n\
    \t\tvar y = lst[++i];\n\t\tresult.push([x,y]);\n\t}\n\tresult.sort(function(a,b){return\
    \ b[0]-a[0]});\n\tresult.sort(function(a,b){return b[1]-b[0]});\n\treturn result;\n\
    }\n", "  var l = [], i = -1, n = lst.length;\n  while(++i < n){\n    var row =\
    \ lst[i];\n    for(var j = 0, m = row.length; j < m; j++){\n      if(row[j] ===\
    \ x) l.push([i, j]); break;\n    }\n  }\n  l.sort(function(a,b){\n    return a[0]\
    \ - b[0] || a[1] - b[1];\n  });\n  var result = [];\n  for(var i = 0, n = l.length;\
    \ i < n; i++){\n    var x = l[i][0], y = l[i][1];\n    result.push([x, y]);\n\
    \  }\n  return result;\n}\n", "    var result = [];\n    for(var i = 0, n = lst.length;\
    \ i < n; i++){\n        if(lst[i].indexOf(x) !== -1){\n            result.push([i,\
    \ lst[i].indexOf(x)]);\n        }\n    }\n    return result.sort(function(a,b){return\
    \ b[1] - a[1]}).reverse();\n}\n", "    return lst.filter( function(v){\n     \
    \   return v.indexOf(x) === 0;\n    }).sort(function(a, b){\n        return a[1]\
    \ - b[1];\n    }).map(function(v){\n        return [v[0], v.indexOf(x) - 1];\n\
    \    });\n}", "    if(lst.length == 0 || x >= lst[0].length){\n        return\
    \ []\n    }\n    if(lst.length == 0){\n        return [(0, x)]\n    }\n    var\
    \ row = [], tmp\n    var i = 0; //index for current column\n    var j = 1; //index\
    \ for current row\n    while(i < lst[0].length){\n        j = i - lst[0].length\
    \ + 1 //index for current row\n        if(lst.length <= j){\n            row =\
    \ []\n            break\n        }\n        //get min number from each row\n \
    \       while(j < lst.length && lst[j][j] != lst[0][i]){\n            j++\n  \
    \      }\n        row.push([i, j])\n        i = j + 1\n    }\n    row = row.sort((a,\
    \ b) => b[0] - a[0])\n    row = row.sort((a, b) => b[1] - a[1])\n    var col =\
    \ []\n    for(var i = 0; i < row.length; i++){\n        col.push([row[i][0], row[i][1]])\n\
    \    }\n    return col\n}\n", "    // Base case: if the input list is empty,\n\
    \    // return an empty list\n    if(lst.length <= 0){\n        return [];\n \
    \   }\n\n    // Otherwise, if the input list only contains one element,\n    //\
    \ return that element.\n    if(lst.length == 1){\n        return [x];\n    }\n\
    \n    // Otherwise, get the first row and initialize the\n    // row and column\
    \ counters to zero\n    var row = 0;\n    var column = 0;\n\n    // Loop through\
    \ the list and keep incrementing the column and\n    // row counters until we\
    \ find x or we've reached the end of each row\n    for(var i = 0, len = lst.length;\
    \ i < len; i++){\n        var value = lst[i];\n        while(value != x && column\
    \ < value.length){\n            column++;\n        }\n\n        // If we found\
    \ x, the row and column counters are now at their end\n        // and the loop\
    \ should stop\n        if(value == x && row == column){\n            break;\n\
    \        }\n\n        // Otherwise, the row and column counters are incremented\
    \ by\n        // one and the loop should continue\n        column = 0;\n     \
    \   row += 1;\n    }\n\n    // Return the coordinates in the form of row,column\
    \ pairs\n    return [row, column];\n}\n", "    let rows = lst.length;\n    if(rows\
    \ === 0){\n        return [];\n    }\n    let columns = new Array(rows);\n   \
    \ let coords = [];\n    for(let i = 0; i < rows; i++){\n        coords.push(new\
    \ Array(columns).fill(false));\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        for(let j = 0; j < columns; j++){\n            if(lst[i][j] === x){\n\
    \                coords[i][j] = true;\n                break;\n            }\n\
    \        }\n    }\n    rows.sort(function(a, b){\n        if(a < b){\n       \
    \     return -1;\n        }\n        if(b < a){\n            return 1;\n     \
    \   }\n        return 0;\n    });\n    columns = rows.map(row => {\n        let\
    \ temp = new Array(rows.length);\n        for(let j = 0; j < rows.length; j++){\n\
    \            temp[j] = 0;\n        }\n        return temp;\n    });\n    rows\
    \ = rows.map(row => {\n        row.sort((a, b) => b - a);\n        return row;\n\
    \    });\n    return coords;\n}", "    let result = [];\n    if(lst.length <=\
    \ 1){\n        return [];\n    }\n    let row = [];\n    let rows = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i][i] === x){\n            row.push(i);\n\
    \            rows.push(row);\n            row = [];\n        }\n    }\n    rows\
    \ = rows.sort((a,b) => b[1] - a[1]);\n    let r = [];\n    let row_len = 0;\n\
    \    for(let i = 0; i < rows.length; i++){\n        row_len = rows[i].length;\n\
    \        if(r.length < row_len){\n            r.push([]);\n        }\n       \
    \ for(let j = 0; j < row_len; j++){\n            if(r[j][rows[i][j]] === undefined){\n\
    \                r[j].push(rows[i][j]);\n            }\n        }\n    }\n   \
    \ return r;\n}", "    if (lst.length < 2) return [];\n    var res = [];\n    var\
    \ l = lst.length;\n    if (x == undefined) x = 1;\n    \n    for (var i = 0; i\
    \ < l; i++){\n        var r = [];\n        var y = lst[i]\n        for (var j\
    \ = 0; j < y; j++){\n            r[j] = new Array(x + 1);\n            for (var\
    \ k = 0; k < x; k++){\n                r[j][k] = 0;\n            }\n         \
    \   r[j][x] = j;\n        }\n        res.push(r)\n    }\n    \n    res = res.sort(function(a,\
    \ b){\n        if (a[0] < b[0]) return 1;\n        if (a[0] > b[0]) return -1;\n\
    \        if (a[1] < b[1]) return 1;\n        if (a[1] > b[1]) return -1;\n   \
    \     return 0;\n    })\n    res.sort(function(a, b){\n        if (a[1] < b[1])\
    \ return -1;\n        if (a[1] > b[1]) return 1;\n        return 0;\n    })\n\
    \    return res\n}\n", "  if(lst.length < 1 || x < 0 || x > lst[0].length) return\
    \ [];\n  var result = [];\n  var nr = lst.length;\n  for(var row = 0; row < nr;\
    \ row++){\n    var n = lst[row].length;\n    for(var i = 0; i < n; i++){\n   \
    \   if(lst[row][i] === x)\n        result.push([row, nr - 1 - i]);\n    }\n  }\n\
    \  result.sort(function(a, b){\n    if(a[0] > b[0]) return -1;\n    if(a[0] <\
    \ b[0]) return 1;\n    return 0;\n  });\n  result.sort(function(a, b){\n    if(a[1]\
    \ < b[1]) return -1;\n    if(a[1] > b[1]) return 1;\n    return 0;\n  });\n  return\
    \ result;\n}\n", "  var lst2 = []\n  var row = lst[0].length\n  var col = []\n\
    \  var counter = row-1\n  for (var i = 0; i < row; i++){\n    var count = 0\n\
    \    for (var j = 0; j < lst.length; j++){\n      if (lst[j][i] === x){\n    \
    \    count += 1;\n      }\n    }\n    col.push([count, (counter - (count-1))]);\n\
    \    counter += 1;\n    lst2.push(col);\n    col = []\n  }\n  lst2.sort(function(a,\
    \ b){\n    return a[1] - b[1]\n  })\n  return lst2.sort(function(a, b){\n    return\
    \ b[0]-a[0]\n  })\n}\n", "    // sort by row (rows in ascending order)\n    lst.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n\n    // sort by column (columns\
    \ in descending order)\n    lst.sort(function(a, b){\n        return b[1] - a[1];\n\
    \    });\n\n    // find x\n    var r = 0,\n        c = 0,\n        i, j, k;\n\
    \    for(i = 0; i < lst.length; i++){\n        if(x === lst[i][0]){\n        \
    \    r += 1;\n        }\n        else if(x === lst[i][1]){\n            c += 1;\n\
    \        }\n    }\n\n    // create list of tuples (row, column)\n    var coords\
    \ = [];\n    for(i = 0; i < lst.length; i++){\n        for(j = 0; j < lst[i].length;\
    \ j++){\n            coords.push([r-1, c-lst[i][j]]);\n        }\n    }\n\n  \
    \  return coords;\n}\n</code>\nThe above function should work for the examples\
    \ you provided in the comments under your original question.\n<|/ a |>\n<| c |>\n\
    I see no reason for the extra sort steps. A simple binary search would do it.\n\
    <|/ c |>\n<| c |>\nIf by binary search you mean `Array.prototype.binarySearch`\
    \ then yes that would work. I thought OP wanted the coordinates, so my answer\
    \ was the way to go from there. But, perhaps I misunderstood the question. I'll\
    \ try again.\n<|/ c |>\n<| c |>\nSort is needed because OP wants to have the first\
    \ item in the list be the top-left coordinate. My solution works because the first\
    \ item has `r[0] = 0`, so it's always at the top left. OP didn't specify which\
    \ coordinate system he wanted - so I just went with the most common (`(0,0)`).\
    \ You could also choose a different coordinate system like `(0,1)`.\n<|/ c |>\n\
    <| c |>\nI see. The OP just said \"each row may contain a different number of\
    \ columns\" which doesn't preclude them from using a binary search.\n<|/ c |>\n\
    <| c |>\nThis is why I asked OP to clarify what he meant by \"may contain a different\
    \ number of columns\". I think it's a good question because it's tricky to answer\
    \ without knowing what the OP actually wants. But I do think this should be the\
    \ accepted answer.\n<|/ c |>\n<| a |>\nA solution using two nested loops. I used\
    \ binary search to find the row and column of the element in the matrix. This\
    \ can be done by creating a 2d array where each row contains a copy of the matrix\
    \ in the proper order.\nThe variable row and column can be used in conjunction\
    \ with getRow() to get a list of the row and the column (which you can ", "  \
    \  let rows = lst.map(function(row){\n        return row.filter(function(element){\n\
    \            return element == x;\n        });\n    });\n    let columns = [];\n\
    \    rows.forEach(function(row, i){\n        columns.push(row.map((x) => x - i));\n\
    \    });\n    columns[0] = columns.sort((a, b) => b[1] - a[1]);\n    return columns.map(function(column){\n\
    \        return [column[0], column[1]];\n    });\n}\n", "    var ret = [];\n \
    \   var row = [];\n    var rlen = lst.length;\n    var clen = lst[0].length;\n\
    \    var rindex = 0;\n    var cindex = 0;\n    var i, j, k;\n\n    for(i=0; i<rlen;\
    \ i++){\n        for(j=0; j<clen; j++){\n            if(lst[i][j] === x){\n  \
    \              ret.push([i, j, lst[i][j]]);\n            }\n        }\n    }\n\
    \n    ret.sort(function(a, b){\n        var r1 = a[0], r2 = b[0];\n        var\
    \ c1 = a[1], c2 = b[1];\n        return r1 - r2;\n    });\n    ret.sort(function(a,\
    \ b){\n        var r1 = a[0], r2 = b[0];\n        var c1 = a[1], c2 = b[1];\n\
    \        return c2 - c1;\n    });\n\n    for(i=0; i<ret.length; i++){\n      \
    \  if(row.length > 0){\n            ret.sort(function(a, b){\n               \
    \ var r1 = a[0], r2 = b[0];\n                var c1 = a[1], c2 = b[1];\n     \
    \           return c2 - c1;\n            });\n            ret.sort(function(a,\
    \ b){\n                var r1 = a[0], r2 = b[0];\n                var c1 = a[1],\
    \ c2 = b[1];\n                return r1 - r2;\n            });\n        }\n  \
    \      ret.sort(function(a, b){\n            var r1 = a[0], r2 = b[0];\n     \
    \       var c1 = a[1], c2 = b[1];\n            return c1 - c2;\n        });\n\
    \        if(ret[i][1] < ret[i-1][1]){\n            row = [];\n            rindex++;\n\
    \        }\n        row.push(ret[i][1]);\n        row.push(ret[i][0]);\n     \
    \   if(row.length >= 2){\n            ret.push([row[0], row[1]]);\n        }\n\
    \    }\n    return ret;\n}\n", "  var list = [];\n  var new_lst = [];\n  var len\
    \ = lst.length;\n  var i;\n  for(i = 0; i<len; i++){\n    if (lst[i].indexOf(x)\
    \ != -1){\n      var tuple = {};\n      tuple.row = i;\n      tuple.column = get_column(lst[i],\
    \ x);\n      new_lst.push(tuple);\n    }\n  }\n  new_lst.sort((a, b) => { return\
    \ b.row - a.row; });\n  new_lst.sort((a, b) => { return b.column - a.column; });\n\
    \  for(i = 0; i<new_lst.length; i++){\n    list.push([new_lst[i].row, new_lst[i].column]);\n\
    \  }\n  return list;\n}\n", "  if(!lst.length){\n    return [];\n  }\n  let row\
    \ = new Array(x);\n  for(let i = 0; i < x; ++i){\n    row[i] = 0;\n  }\n  for(let\
    \ row of lst){\n    row[x] = row[x] + (lst.length - 1);\n  }\n  row.sort((a, b)\
    \ => b - a);\n  for(let i = 0; i < x; ++i){\n    row.sort((a, b) => b - a).reverse();\n\
    \  }\n  return row;\n}\n", "  var rows = [];\n  for(var i in lst){\n    var row\
    \ = lst[i];\n    if(row.indexOf(x) >= 0){\n      rows.push([i, row.indexOf(x)])\n\
    \    }\n  }\n  rows = rows.sort(function(a, b){\n    if(a[1] > b[1]){\n      return\
    \ 1;\n    }\n    if(a[1] < b[1]){\n      return -1;\n    }\n    return 0;\n  });\n\
    \  return rows.map(function(r){\n    return (r[0] + 0, r[1] - 1);\n  });\n}\n",
  "    let n = lst.length;\n    if(n == 0) return [];\n    let res = [];\n    let\
    \ row = [x];\n    for (let i = 0; i < n; ++i){\n        if(lst[i][0] > row[0])\
    \ row[0] = lst[i][0];\n        if (lst[i][0] < row[0]) row[0] = lst[i][0];\n \
    \       if(lst[i][1] > row[1]) row[1] = lst[i][1];\n        if (lst[i][1] < row[1])\
    \ row[1] = lst[i][1];\n        if(row[1] != row[1]) res.push(row);\n        row\
    \ = [lst[i][0]];\n    }\n    return res;\n}\n", "    //get the length of the row\n\
    \    let row_length = lst.length\n\n    //set coordinates for return\n    let\
    \ coords = []\n\n    //sort the coordinates by row length\n    //descending order\n\
    \    let descendingCoords = lst.sort((a,b)=>{\n        return b.length-a.length\n\
    \    }).reverse()\n\n    //sort the coordinates by columns by descending order\n\
    \    let rowSortedByColumnDescending = descendingCoords.sort((a,b)=>{\n      \
    \  return b.length - a.length\n    })\n\n    //sort the coordinates by columns\
    \ in ascending order\n    let rowSortedByColumnAscending = rowSortedByColumnDescending.sort()\n\
    \n    //get the coordinates for the row of interest\n    let rowCoords = rowSortedByColumnAscending.filter((a,b)=>{\n\
    \        return b===x\n    })\n\n    //add coordinates to the return values\n\
    \    coords = rowCoords.map((a,b)=>{\n        return [a, b+1]\n    })\n\n    //sort\
    \ the coordinates initially by rows\n    rowCoords = rowCoords.sort(function(a,\
    \ b){\n        return a[0]-b[0]\n    })\n\n    //sort the coordinates initially\
    \ by rows\n    coords = coords.sort(function(a, b){\n        return a[0]-b[0]\n\
    \    })\n\n    //return the coordinates\n    return coords\n}\n", "    var coordinates\
    \ = [];\n    var row = [];\n    for(var i = 0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(lst[i]);\n            coordinates.push([i, lst[i].indexOf(x)])\n\
    \        }\n    }\n    if(row.length){\n        coordinates.sort(function(a, b){\n\
    \            var va = a[1], vb = b[1]\n            if(va < vb){\n            \
    \    return 1\n            }\n            if(va > vb){\n                return\
    \ -1\n            }\n            return 0\n        })\n        coordinates.sort(function(a,\
    \ b){\n            return b[1] - a[1]\n        })\n    }\n    return coordinates\n\
    }\n", "  let row_coords = [];\n  let row_sorted = [];\n  let row_descending =\
    \ [];\n\n  lst.map((col, col)=>{\n    let [x, y] = col;\n    if(x == x){\n   \
    \   row_coords.push({row:col - 1, columns:x});\n      row_sorted.push(x);\n  \
    \    row_descending.push(y);\n    }\n  });\n\n  row_coords.sort((a,b) => {\n \
    \   let a_descending = [...row_descending];\n    let a_sorted = [...row_sorted];\n\
    \    let a_descending_sorted = [...a_descending].sort();\n    let a_sorted = [...a_sorted].sort();\n\
    \    return a_sorted.indexOf(a_descending_sorted[0]) - a_sorted.indexOf(a_descending[0]);\n\
    \  });\n\n  return row_coords.map((coord) => [\n    coord.row - 1, coord.columns\n\
    \  ]);\n}\n", "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i].includes(x)){\n            result.push([i, lst[i].indexOf(x)])\n\
    \        }\n    }\n    result.sort((a,b) => a[1] - b[1])\n    result.sort((a,b)\
    \ => b[0] - a[0])\n    return result\n}\n", "  const res = [];\n  lst.map(item\
    \ => {\n    item.map((y,i)=>{\n      res.push([\n        [i, x],\n        [i +\
    \ 1, x]\n      ])\n    })\n  })\n  return res;\n}\n", "\tif(lst.length===0){\n\
    \t\treturn [];\n\t}\n\tvar cols = [];\n\tlst[0].forEach(function(e, i){\n\t\t\
    var i = i-1;\n\t\tcols.forEach(function(col){\n\t\t\tif(x<e){\n\t\t\t\tcol.push(i);\n\
    \t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t\tcols.push([i]);\n\t});\n\tvar rows = cols.reduce(function(acc,\
    \ col){\n\t\tvar row = acc;\n\t\tcol.forEach(function(e){\n\t\t\trow.push([e]);\n\
    \t\t});\n\t\treturn row;\n\t}, []);\n\trows.sort(function(r1, r2){\n\t\treturn\
    \ r1[0]-r2[0];\n\t});\n\treturn rows;\n}\n", "  const row_lst = lst.map(row =>\
    \ {\n    return row.filter(col => col === x);\n  })\n  const row_sorted = row_lst.sort(function(a,\
    \ b){\n    return b.length - a.length;\n  })\n  let row_sorted_reversed = row_sorted.map(row\
    \ => row.reverse());\n  let row_sorted_reversed_sorted = row_sorted_reversed.sort(function(a,\
    \ b){\n    return b[0].length - a[0].length;\n  })\n\n  return row_sorted_reversed_sorted.map(row\
    \ => [row, row_sorted[0].length])\n}\n", "  let arr = [];\n  for (let i = 0; i\
    \ < lst.length; i++){\n    arr[i] = [];\n    for (let j = 0; j < lst[i].length;\
    \ j++){\n      arr[i][j] = [i, j];\n    }\n  }\n  arr.sort((a,b) => a[0] - b[0]);\n\
    \  arr.sort((a,b) => b[1] - a[1]);\n  let index = 0;\n  arr.forEach(element =>\
    \ {\n    for(let i = 0; i < element[0]; i++){\n      arr[index++] = [(element[0]+i)\
    \ - 1, element[1]]\n    }\n  })\n  return arr[index].filter(e => e[0]===x);\n\
    }\n", "    return lst.map(function(row){\n        return row.filter(function(element){\n\
    \            return element === x;\n        })\n    }).reduce(function(prev, curr){\n\
    \        return prev.concat(curr);\n    });\n}\n", "    var ret = [];\n    var\
    \ row = null;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] && lst[i].indexOf(x)\
    \ != -1){\n            row = lst[i];\n            break;\n        }\n    }\n \
    \   if(row){\n        for(var j=0; j<row.length; j++){\n            ret.push([j,\
    \ row.indexOf(row[j])]);\n        }\n        ret.sort(function(a, b){\n      \
    \      return b[1] - a[1]\n        })\n        ret.reverse();\n    }\n    return\
    \ ret;\n}\n", "    // Your code here\n    var res = [];\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n            res.push([i,\
    \ lst[i].indexOf(x)]);\n        }\n    }\n    return res;\n}\n", "    var out\
    \ = [];\n    var i = 0;\n    var row = [];\n\n    while(i < lst.length){\n   \
    \     row.push(lst[i]);\n        i++;\n    }\n\n    for(var j = 0; j < row.length;\
    \ j++){\n        if(row[j] == x){\n            out.push([j, row[j]]);\n      \
    \  }\n    }\n    out.sort(function(a, b){\n        return b[1] - a[1];\n    });\n\
    \n    out.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\n    return\
    \ out;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you so much. Now I'm trying\
    \ to understand the code. Could you please explain it to me? Thanks!\n<|/ c |>\n\
    <| c |>\nThank you! I understand it perfectly. Thanks!\n<|/ c |>\n<| c |>\nNo\
    \ problem! Good luck and don't forget to mark it as the answer if it helped! :)\
    \ If you have any questions about it, feel free to ask :)\n<|/ c |>\n<| c |>\n\
    You're welcome! I added some comments in the code so you can understand it better.\
    \ Let me know if you have any questions!\n<|/ c |>\n<| c |>\nThank you so much\
    \ again! It helps me a lot! I'm gonna study it more thoroughly!\n<|/ c |>\n<|\
    \ a |>\nTo find an item in a list of tuples you can make use of the find method\
    \ of arrays. With this function you can find tuples inside an array. \n<code>",
  "    // Write code here\n    let rows = lst.reduce((p,c) => p.concat(c), []);\n\
    \    \n    let sorted = rows.sort(function(a, b){\n        if(a[0]>b[0]) return\
    \ 1;\n        if(a[0]<b[0]) return -1;\n        return 0;\n    });\n    \n   \
    \ let maxRows = sorted.reduce(function(a, b){\n        if(a[0].length>b[0].length)\
    \ return a[0].length;\n        return b[0].length;\n    },0);\n\n    let res =\
    \ new Array(maxRows);\n    let c = 0;\n    for(let i=0; i<sorted.length; i++){\n\
    \        res[sorted[i][0]] = [];\n        for(let j=0; j<sorted[i][1]; j++){\n\
    \            res[sorted[i][0]].push(c);\n            c++;\n        }\n    }\n\
    \    \n    return res;\n}\n", "  var res = [];\n  var i, j, m, row;\n  var row\
    \ = lst;\n  m = row.length;\n  for(i=0; i<m; i++){\n    if(row[i].indexOf(x) !==\
    \ -1){\n      res.push([i, row.indexOf(row[i])]);\n      row[i] = row.splice(row[i],\
    \ 1);\n    }\n  }\n  if(row.length > 0){\n    for(i=row.length-1; i>=0; i--){\n\
    \      for(j=0; j<row[i].length; j++){\n        row[i][j] = row[i][j].toString();\n\
    \      }\n    }\n    res.sort((a, b) => {\n      return a[1] - b[1];\n    });\n\
    \    for(i=res.length-1; i>=0; i--){\n      for(j=res[i].length-1; j>=0; j--){\n\
    \        res[i][j] = (Number(res[i][j][0]), Number(res[i][j][1]));\n      }\n\
    \    }\n  }\n  return res;\n}\n", "    return lst.reduce((acc, row) => {\n   \
    \     if(row.indexOf(x) !== -1){\n            acc.push([x, row.indexOf(row.find((e)=>\
    \ e === x))])\n        }\n        return acc\n    }, []).sort((a,b)=> b[1] - a[1]).sort((a,b)=>\
    \ b[0] - a[0])\n}\n", "  var i, j, row, row_len, row_list, result = [], cnt;\n\
    \  \n  if(lst.length === 0){\n    return [];\n  }\n  row_list = lst.map(function(row){\n\
    \    return row.slice();\n  });\n  cnt = row.length;\n  for (i = 0; i < row_list.length;\
    \ i++){\n    if ( x === row_list[i].length ){\n      result.push([i, row_list[i][0]]);\n\
    \    }\n  }\n  row_list = row_list.sort(function(a, b){\n    return b[0] - a[0];\n\
    \  });\n  for (i = 0; i < row_list.length; i++){\n    row = row_list[i];\n   \
    \ j = row.indexOf(x);\n    row.splice(0, j);\n    result.push([i, row]);\n  }\n\
    \  return result;\n}\n", "  var res = lst.reduce(function(acc, row, i){\n    if\
    \ (acc[i].length){\n      acc[i].push([i, row.indexOf(x)])\n    } else {\n   \
    \   acc[i] = [row]\n    }\n    return acc\n  }, [])\n  return res.sort(function(a,b){\n\
    \    return a[0][1] - b[0][1] || a[0][0] - b[0][0]\n  }).map(function(t){\n  \
    \  return [res[t[0]][0], res[t[1]][0]]\n  })\n}\n", "    var tmp = [0,0];\n  \
    \  var row = [0, 0];\n    var len = 0;\n    for(var i=0; i<lst.length; i++){\n\
    \        len += lst[i].length;\n        if(len == x){\n            tmp.push(row);\n\
    \            row = [0,0];\n            len = 0;\n        }\n        row.push(i);\n\
    \    }\n    tmp.push(row);\n    return tmp;\n}\n", "  var _row = [],\n    coords\
    \ = [];\n  for (var i = 0; i < lst.length; i++){\n    if (i == x){\n      _row.push(lst[i]);\n\
    \      coords.push(i);\n    }\n  }\n  coords.sort(function(i, j){\n    var row_i\
    \ = coords[i], row_j = coords[j];\n    return row_i - row_j;\n  });\n  coords.sort(function(i,\
    \ j){\n    var col_i = coords[i], col_j = coords[j];\n    return col_j - col_i;\n\
    \  });\n  coords.forEach(function(i){\n    _row.sort(function(a, b){\n      return\
    \ coords[i] - coords[j];\n    });\n  });\n  return _row;\n}\n", "  if(!lst.length)\
    \ return [];\n  var row = [x];\n  var pos = 0;\n  var visited = {};\n  var sorted_row\
    \ = [];\n\n  for(var i = 0; i < lst.length; i++){\n    if(!visited[lst[i]]){\n\
    \      visited[lst[i]] = true;\n      row.push(lst[i][pos]);\n      pos += 1;\n\
    \      if(pos > x) pos = 0;\n      if(pos >= lst[i][0].length) pos = 0;\n    \
    \  sorted_row.push(row);\n      row = [];\n    }\n  }\n\n  sorted_row.sort(function\
    \ (a, b) {\n    return a[0].length - b[0].length;\n  });\n  var rs = [];\n  for(var\
    \ i = 0, l = sorted_row.length; i < l; i++){\n    rs.push([sorted_row[i]]);\n\
    \  }\n  return rs;\n}\n", "  var res = [];\n  var row_size = lst[0].length;\n\
    \  var col_size = lst.length;\n  for (var i = 0; i < col_size; i++){\n    if (lst[i][0]\
    \ == x){\n      res.push([i, row_size - 1]);\n    }\n  }\n  res.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  res.reverse();\n  return res;\n}\n",
  "\tif(lst.length == 0){\n\t\treturn [];\n\t}\n\tlst.sort((a,b) => (a[0] > b[0] ?\
    \ 1 : -1));\n\tlet ret = [];\n\tlet prev = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet cur = lst[i];\n\t\tif(cur[0] == x || cur[0] > x){\n\t\t\tret[prev]\
    \ = (cur[0], cur[1]);\n\t\t}\n\t\tprev++;\n\t}\n\treturn ret;\n}\n", "    let\
    \ coords = []\n    lst.map(row => {\n        row.map(el => {\n            coords.push([row,\
    \ el])\n        })\n    })\n    coords.sort((a, b) => a[0][1] - b[0][1])\n   \
    \ let rows = []\n    let tmp = []\n    coords.map(el => {\n        if(el[0] ===\
    \ x){\n            rows.push(el)\n            tmp.push(el[1])\n        }\n   \
    \ })\n    tmp.sort((a,b) => b-a)\n    return rows.map((el) => {\n        return\
    \ [el[0][0], el[1]-1]\n    })\n}\n", "    if(lst.length == 0){\n        return\
    \ [];\n    }\n    let m = new Map();\n    let res = new Array();\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(!m.has(lst[i][0])){\n            m.set(lst[i][0],\
    \ []);\n        }\n        m.get(lst[i][0]).push(i);\n    }\n    for(let i = 0;\
    \ i < lst.length; i++){\n        let row = [];\n        for(let j = 0; j < m[i][0].length;\
    \ j++){\n            row.push((i, j));\n        }\n        res.push(row.sort((a,\
    \ b) => {\n            return lst[a[b][0]][a[b][1]] - lst[b][a[1]];\n        }));\n\
    \    }\n    return res.sort((a, b) => {\n        return a.length - b.length;\n\
    \    });\n}\n", "    lst = lst.sort(function(a, b){\n        var A = a.slice(0),\n\
    \            B = b.slice(0);\n        A.sort(function(a, b){\n            return\
    \ a-b;\n        });\n        B.sort(function(a, b){\n            return b-a;\n\
    \        });\n        var i = 0;\n        while(i < A.length && i < B.length){\n\
    \            if(A[i] === x){\n                return B[i] - i;\n            }\n\
    \            if(B[i] === x){\n                return A[i] - i;\n            }\n\
    \            i++;\n        }\n        return 1;\n    });\n    return lst.sort(function(a,\
    \ b){\n        return -a.length + b.length;\n    });\n}\n", "  var res = [];\n\
    \  var tmp = [];\n  for(var i=0;i<lst.length;i++){\n    tmp = [];\n    for(var\
    \ j=0;j<lst[i].length;j++){\n      if(lst[i][j] == x)\n        tmp.unshift([lst[i][0],\
    \ lst[i][0]+1])\n      if(j<lst[i].length-1)\n        tmp.unshift([lst[i][0],\
    \ lst[i][0]+1])\n    }\n    res.push(tmp);\n  }\n  res.sort();\n  res.sort(function(a,b){\n\
    \    var aRow = a[0];\n    var bRow = b[0];\n    return bRow-aRow\n  });\n  return\
    \ res;\n}", "    if(lst.length < 1){\n        return [];\n    }\n    let row =\
    \ [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n\
    \            row.push([i]);\n        }\n    }\n    for(let i = 1; i < row.length;\
    \ i++){\n        let y = row[i];\n        if(y.length < 1){\n            row.splice(i,\
    \ 1);\n            i--;\n        }\n        else{\n            row.push([0, y[y.length\
    \ - 1]]);\n            row.push([y[y.length - 1], 0]);\n        }\n    }\n   \
    \ \n    for(let i = 0; i < row.length; i++){\n        row[i] = [\n           \
    \ row[i][0],\n            lst[row[i][1]]\n        ];\n    }\n    \n    for(let\
    \ i = 0; i < row.length; i++){\n        row[i].sort((a, b) => b[0] - a[0]);\n\
    \    }\n    \n    for(let i = 0; i < row.length; i++){\n        row[i].sort((a,\
    \ b) => b[1] - a[1]);\n    }\n    \n    for(let i = 0; i < row.length; i++){\n\
    \        row[i].sort((a, b) => b[1] - a[1]);\n    }\n    \n    return row;\n}\n",
  "  let xx = [];\n  let yy = [];\n  let yx = [];\n  let i = lst.length - 1;\n  for(let\
    \ j = 0; j < x; j++){\n    let row = [];\n    for(let k = 0; k < i; k++){\n  \
    \    if(lst[k][j] === x){\n        row.push([k,j]);\n      }\n    }\n    yx =\
    \ yx.concat(row);\n    let row2 = [];\n    for(let k = 0; k < i; k++){\n     \
    \ if(lst[k][x] === x){\n        row2.push([k,x]);\n      }\n    }\n    yy = yy.concat(row2);\n\
    \  }\n  yx = yx.sort((a,b) => b[1] - a[1]);\n  yy = yy.sort((a,b) => a[0] - b[0]);\n\
    \  if(xx > yx){\n    xx = xx.sort((a,b) => a[0] - b[0]);\n    i = xx.length -\
    \ 1;\n    for(let j = 0; j < x; j++){\n      let row = [];\n      for(let k =\
    \ 0; k < i; k++){\n        if(lst[k][j] === x){\n          row.push([k,j]);\n\
    \        }\n      }\n      xx = xx.concat(row);\n      let row2 = [];\n      for(let\
    \ k = 0; k < i; k++){\n        if(lst[k][x] === x){\n          row2.push([k,x]);\n\
    \        }\n      }\n      yy = yy.concat(row2);\n    }\n    yy = yy.sort((a,b)\
    \ => b[1] - a[1]);\n  }\n  \n  return [xx, yy];\n}\n", "  var result = [];\n \
    \ var column = 0;\n  var row = 0;\n  var columns = [];\n\n  for(var i = 0; i <\
    \ lst.length; i++){\n    while(column < x){\n      columns.push(column);\n   \
    \   column++;\n    }\n    while(row < lst[i].length){\n      if(row === lst[i].length\
    \ - 1){\n        if(column < x){\n          columns.push(column);\n          column++;\n\
    \        }\n      }\n      row++;\n    }\n    result.push([row, columns]);\n \
    \   column = 0;\n    row = 0;\n    columns = [];\n  }\n  result.sort(function(a,\
    \ b){\n    if(a[0] > b[0]){\n      return 1;\n    }\n    if(a[0] < b[0]){\n  \
    \    return -1;\n    }\n    if(a[1][0] > b[1][0]){\n      return 1;\n    }\n \
    \   if(a[1][0] < b[1][0]){\n      return -1;\n    }\n    if(a[1][1] > b[1][1]){\n\
    \      return 1;\n    }\n    if(a[1][1] < b[1][1]){\n      return -1;\n    }\n\
    \  });\n  return result;\n}", "    let xs = [];\n    for (let i=0; i < lst.length;\
    \ i++){\n        let y = lst[i][i];\n        if ( y === x ){\n            xs.push([i,\
    \ y]);\n        }\n    }\n    xs.sort( (a, b) => {\n        if ( a[0] > b[0] ){\n\
    \            return -1;\n        }\n        if ( a[0] < b[0] ){\n            return\
    \ 1;\n        }\n        if ( a[1] > b[1] ){\n            return -1;\n       \
    \ }\n        if ( a[1] < b[1] ){\n            return 1;\n        }\n        return\
    \ 0;\n    });\n\n    let res = [];\n    for (let i=0; i < xs.length; i++){\n \
    \       let x = xs[i];\n        res.push(x[0] + 1, x[1]);\n    }\n    return res;\n\
    }\n", "\tvar coord = [];\n\tif(!lst.length || !x)\n\t\treturn [];\n\tvar rows\
    \ = lst.length;\n\tvar cols;\n\tfor(var i = 0; i < rows; ++i){\n\t\tcols = lst[i].length;\n\
    \t\tfor(var j = 0; j < cols; ++j){\n\t\t\tif(!coord[j])\n\t\t\t\tcoord[j] = [i,\
    \ j];\n\t\t\tvar cmp = cmp_lt(lst[i][j], x);\n\t\t\tif(cmp === 0)\n\t\t\t\treturn\
    \ [];\n\t\t\tif(cmp > 0)\n\t\t\t\tcoord.push([i, j]);\n\t\t}\n\t}\n\treturn coord;\n\
    }", "    var ans = [];\n    var xs = [];\n    var rs = [];\n    var i;\n    for(i\
    \ = 0; i < lst.length; i++){\n        while(lst[i].indexOf(x) != -1){\n      \
    \      xs.push(lst[i].indexOf(x));\n            rs.push(lst[i].lastIndexOf(x));\n\
    \            lst[i] = lst[i].slice(0, rs[i])+lst[i].slice(rs[i+1], lst.length);\n\
    \            lst[i].reverse();\n        }\n    }\n    xs.sort();\n    rs.sort();\n\
    \    for(i = 0; i < lst.length; i++){\n        while(lst[i].indexOf(x) != -1){\n\
    \            ans.push([xs[i], xs[i+1]]);\n            xs[i+1]++;\n        }\n\
    \    }\n    return ans.sort(function(a, b){return a[0] - b[0];}).reverse();\n\
    }\n", "  if(!lst.length) return [];\n  lst.sort(function(a, b){\n    if(a[0] <\
    \ b[0]) return -1;\n    if(a[0] > b[0]) return 1;\n    return 0;\n  });\n  lst.forEach(function(row,\
    \ i){\n    row.sort(function(a, b){\n      if(a[1] < b[1]) return -1;\n      if(a[1]\
    \ > b[1]) return 1;\n      return 0;\n    });\n  });\n  return lst.filter(function(row,\
    \ i){\n    return i == x;\n  }).map(function(row){\n    return [row[0], row.length\
    \ - 1];\n  });\n}\n", "  let result = [];\n  let len = lst.length;\n  let rows\
    \ = [[]];\n  let maxRow = 0;\n  for(let i=0; i<len; i++){\n    let row = lst[i];\n\
    \    if(i == x){\n      rows.push(row);\n      row.unshift(i);\n      maxRow =\
    \ rows.length;\n    }\n    else{\n      for(let j=0; j<maxRow; j++){\n       \
    \ let row = rows[j];\n        if(row.includes(i)){\n          row.push(i);\n \
    \         row.unshift(j);\n          result.push(row);\n          break;\n   \
    \     }\n      }\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  for(let\
    \ i=0; i<maxRow; i++){\n    rows[i].sort((a, b) => b[1] - a[1]);\n  }\n  return\
    \ result;\n}\n", "    let n = lst.length;\n    let row = new Array(n);\n    \n\
    \    for(let i = 0; i < n; i++){\n        let r = [];\n        for(let j = 0;\
    \ j < n; j++){\n            if(i == j){\n                r.push([j, x]);\n   \
    \         } else {\n                r.push(lst[i][j]);\n            }\n      \
    \  }\n        row.push(r);\n    }\n\n    for(let i = 0; i < n; i++){\n       \
    \ for(let j = i + 1; j < n; j++){\n            if(row[j][i][1] < row[j][i - 1][1]){\n\
    \                let tmp = row[j][i];\n                row[j][i] = row[j][i -\
    \ 1];\n                row[j][i - 1]  = tmp;\n            }\n        }\n    }\n\
    \n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n     \
    \       if(row[j][i][1] == row[j][i - 1][1]){\n                row[j][i] = row[j][i];\n\
    \            }\n        }\n    }\n\n    let ret = [];\n    for(let i = 0; i <\
    \ n; i++){\n        ret.push([[i, 0]]);\n    }\n\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < n; j++){\n            for(let k = 0; k < n; k++){\n\
    \                if(row[j][i][0] == k){\n                    ret[j].push([[i,\
    \ j + 1], [i, j]]);\n                }\n            }\n        }\n    }\n\n  \
    \  return ret;\n}\n", "  const m = lst.length;\n  if (x<0 || x>m) throw new Error('Wrong\
    \ X!');\n  const y = [];\n  const r = [];\n  let i = 0;\n  let j = 0;\n  while\
    \ (j<m && i<lst.length){\n    if (lst[i][0]===x) return y.push(lst[i]), r.push(j),\
    \ i++;\n    else i++;\n  }\n  throw new Error('Wrong row!');\n}\n", "    if(!lst)\n\
    \        return []\n    var r = []\n    var i = 0\n    var n = lst.length\n  \
    \  var r_index = {}\n    var row_index = {}\n    var column_index = {}\n    while(i\
    \ < n){\n        var v = lst[i]\n        while(i >= 0 && v != x){\n          \
    \  i -= 1\n        }\n        var row = 0\n        if(i >= 0){\n            row\
    \ = i // row index\n        }\n        var col = 0\n        if(i >= 0){\n    \
    \        col = lst.length - i - 1 // column index\n        }\n        r.push([row,\
    \ col])\n        r_index[row + 1] = i\n        column_index[col + 1] = i\n   \
    \     column_index[col] = 0\n        if(i >= 0){\n            column_index[lst.length\
    \ - i - 1] += 1\n        }\n    }\n    r.sort(function(x, y){return y[0] - x[0]})\n\
    \    r.sort(function(x, y){return y[1] - x[1]})\n    return r\n}\n", "\tif(lst.length\
    \ <= 0){\n\t\treturn [];\n\t}\n\tvar ret = [];\n\t\n\tif(lst[0].length <= 0){\n\
    \t\treturn ret;\n\t}\n\t\n\tvar max_row = lst.length;\n\tvar max_col = lst[0].length;\n\
    \t\n\tvar row = 0;\n\tvar col = 0;\n\t\n\twhile(row < max_row && col < max_col){\n\
    \t\tvar x_in_row = x;\n\t\tvar x_in_col = lst[row % max_row][col];\n\t\t\n\t\t\
    var row1 = lst[row % max_row].length;\n\t\tvar col1 = lst[row][col].length;\n\t\
    \t\n\t\tvar x_in_row_2 = lst[row % max_row][col];\n\t\tvar x_in_col_2 = lst[row][col].length;\n\
    \t\t\n\t\tif(x_in_row == x_in_row_2 && x_in_col == x_in_col_2){\n\t\t\tret.push([row,\
    \ col]);\n\t\t}\n\t\t\n\t\tcol++;\n\t\tif(col == max_col){\n\t\t\trow++;\n\t\t\
    \tcol = 0;\n\t\t}\n\t\t\n\t}\n\t\n\tret = ret.sort();\n\tret.reverse();\n\t\n\t\
    return ret;\n}\n", "    let result = new Array();\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let row = lst[i];\n        if(!row.length){\n            result.push((i,\
    \ 0));\n        }else{\n            let j = 0;\n            for(let k = 0; k <\
    \ row.length; k++){\n                if(row[k] === x){\n                    result.push((i,\
    \ j));\n                    break;\n                }\n                j++;\n\
    \            }\n        }\n    }\n    result.sort(function(x, y){\n        let\
    \ x_row = x[0];\n        let x_col = x[1];\n        let y_row = y[0];\n      \
    \  let y_col = y[1];\n        return x_row - y_row;\n    });\n    result.sort(function(x,\
    \ y){\n        let x_col = x[1];\n        let y_col = y[1];\n        return x_col\
    \ - y_col;\n    });\n    return result;\n}\n", "  let res = [];\n  for(let i =\
    \ 0; i < lst.length; i++){\n    let temp = [];\n    let j = 0;\n    while(j <=\
    \ lst[i][0] && j < lst[i][1]){\n      if(lst[i][0] === j){\n        temp.push(i);\n\
    \        j++;\n      }\n      else{\n        if(j > lst[i][1]){\n          temp.push((j-lst[i][0])+lst[i][0],\
    \ lst[i][1]);\n          j = 0;\n        }\n        else{\n          j++;\n  \
    \      }\n      }\n    }\n    res.push(temp.slice());\n  }\n  if(res.length <\
    \ 1){\n    return [];\n  }\n  res.sort((a,b) => b[0] - a[0]);\n  res.sort((a,b)\
    \ => b[1] - a[1]);\n  res.sort((a,b) => {\n    if(a[0] < b[0]){\n      return\
    \ 1;\n    }\n    else if(a[0] > b[0]){\n      return -1;\n    }\n    else{\n \
    \     return a[1]-b[1];\n    }\n  });\n  let x = res.filter(([row, col]) => {\n\
    \    return row === x;\n  });\n  return x;\n}\n", "    let row_size = get_row_size(lst);\n\
    \    let rows = [];\n    for(let i = 0; i < row_size; i++){\n        let current_row\
    \ = lst[i];\n        if(current_row[x] === undefined) continue; //No match for\
    \ this row, move on\n        let current_row_pos = current_row.indexOf(x);\n \
    \       let current_row_size = current_row.length;\n        for(let j = 0; j <\
    \ current_row_size; j++){\n            rows.push([i, current_row_pos + j]);\n\
    \        }\n    }\n    rows.sort((a,b) => b[1] - a[1]);\n    rows.sort((a,b) =>\
    \ a[0] - b[0]);\n    for(let i = 0; i < rows.length; i++){\n        rows.splice(i,\
    \ 1);\n    }\n    return rows;\n}\n", "    if(!lst.length) return [];\n    if(!lst[0].length)\
    \ return [];\n    var coords = [];\n    var row = lst;\n    var new_lst = [];\n\
    \    var col_coord = [];\n    var row_coord = [];\n    for(var row = 0; row <\
    \ lst.length; row++){\n        col_coord = [];\n        row_coord = [];\n    \
    \    var new_row = [];\n        for(var col = 0; col < lst[row].length; col++){\n\
    \            if(row == x && col == 0){\n                coords.push(col);\n  \
    \              row_coord.push([row, col]);\n            }\n            if(row\
    \ == x && col != 0){\n                col_coord.push([row, col]);\n          \
    \  }\n            if(row != x && col == 0){\n                coords.push(col);\n\
    \                row_coord.push([row, col]);\n            }\n            if(row\
    \ != x && col != 0){\n                col_coord.push([row, col]);\n          \
    \  }\n            new_row.push(lst[row][col]);\n        }\n        new_lst.push(new_row);\n\
    \    }\n    coords.sort();\n    row_coord.sort(function(a, b){return b[0] - a[0]});\n\
    \    col_coord.sort(function(a, b){return b[1] - a[1]});\n    for(var row = 0;\
    \ row < new_lst.length; row++){\n        coords[row] = row_coord[row];\n    }\n\
    \    for(var col = 0; col < new_lst[0].length; col++){\n        coords[new_lst.length\
    \ - 1 - col] = col_coord[col];\n    }\n    return coords;\n}\n", "\tvar row_num\
    \ = 0;\n\tvar col_num = 0;\n\tvar result = [];\n\tfor (var i=0; i<lst.length;\
    \ i++){\n\t\tif (lst[i][0] == x){\n\t\t\tresult.push([i, col_num]);\n\t\t\trow_num\
    \ = i;\n\t\t}\n\t\telse {\n\t\t\tif (col_num > 0) {\n\t\t\t\tresult.push([row_num,\
    \ col_num]);\n\t\t\t}\n\t\t\tcol_num = 0;\n\t\t}\n\t\tcol_num++;\n\t}\n\treturn\
    \ result;\n}\n", "    var i, j, row_lst = [];\n    for (i = 0; i < lst.length;\
    \ i++){\n        row_lst[i] = [];\n        for (j = 0; j < lst[i].length; j++){\n\
    \            if (lst[i][j] === x){\n                row_lst[i].push(j, i);\n \
    \           }\n        }\n    }\n    sort_rows(row_lst);\n    sort_cols(row_lst,\
    \ true);\n    return row_lst;\n}", "    let row = []\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i == 0){\n            row.push((i, 0))\n        } else {\n\
    \            if(x === lst[i][row[0][1] - 1]){ //If x is present in this row\n\
    \                row.push((i, row[0][1] - 1))\n            }\n        }\n    }\n\
    \    row.sort(function(a, b){\n        if(a[0] > b[0]){ return 1 }\n        if(a[0]\
    \ < b[0]){ return -1 }\n        if(a[1] < b[1]){ return -1 }\n        if(a[1]\
    \ > b[1]){ return 1 }\n        return 0;\n    })\n    return row;\n}\n", "  if(lst.length\
    \ < 1) return [];\n  if(lst[0].length < 1) return [];\n  var result = [];\n  for(var\
    \ i = 0; i < lst.length; i++){\n    for(var j = 0; j < lst[i].length; j++){\n\
    \      if(lst[i][j] === x){\n        result.push([i, j]); //(row, col), (row,\
    \ col)\n      }\n    }\n  }\n  result.sort(function(a, b){\n    if(a[0] > b[0])\
    \ return 1;\n    if(a[0] < b[0]) return -1;\n    return 0;\n  });\n  result.sort(function(a,\
    \ b){\n    if(a[1] < b[1]) return 1;\n    if(a[1] > b[1]) return -1;\n    return\
    \ 0;\n  });\n  if(result[0][0] !== 0) result.unshift([0, result[0][0]]); //add\
    \ zeroes at start\n  return result;\n}\n", "    let ret = [];\n    let cnt = 0;\n\
    \n    for(let i = 0; i < lst.length; i++){\n        if(cnt === x){\n         \
    \   let tuple = [];\n            let last = (lst.length - 1);\n            for(let\
    \ j = 0; j < x; j++){\n                tuple.push([i, (lst.length - 1 - j)])\n\
    \            }\n            ret.push(tuple)\n            break;\n        }else{\n\
    \            cnt++;\n        }\n    }\n    return ret;\n}\n", "    lst = lst.map(function(row){\n\
    \        return [row, row.length]\n    })\n    return lst.filter(function(row){\n\
    \        return row[0] === x\n    }).sort(function(a, b){\n        return b[1]\
    \ - a[1]\n    }).reverse().map(function(row){\n        return [row[0], row[1]]\n\
    \    })\n}\n", "\tvar result = [];\n\tfor(var i = 0; i < lst.length; i++){\n\t\
    \tvar row = lst[i];\n\t\tif(row[x])\n\t\t\tresult.push([i, row.indexOf(x)+1]);\n\
    \t}\n\tresult.sort(function(a, b){\n\t\tvar a_row = parseInt(a[1], 10);\n\t\t\
    var b_row = parseInt(b[1], 10);\n\t\treturn a_row - b_row;\n\t});\n\tfor(var i\
    \ = 0; i < result.length; i++){\n\t\tvar coord = result[i];\n\t\tcoord.reverse();\n\
    \t}\n\treturn result;\n}\n", "  const result = [];\n\n  // Iterate each row to\
    \ find element\n  lst.forEach((row, row_index) => {\n    let row_result = [];\n\
    \n    row.forEach((val, column_index) => {\n      if(val === x) {\n        row_result.push([row_index,\
    \ column_index]);\n      }\n    });\n\n    // Sort row by column in descending\
    \ order\n    row_result.sort((a,b) => {\n      return a[1]-b[1];\n    });\n\n\
    \    // Sort rows in ascending order by row\n    row_result.sort((a,b) => {\n\
    \      return a[0]-b[0];\n    });\n\n    // Combine the two result rows\n    result.push(row_result);\n\
    \  });\n\n  return result;\n}\n", "\tlet tmp = []\n\tfor (let i = 0; i < lst.length;\
    \ i++){\n\t\tlet j = 0\n\t\twhile (j < lst[i].length && lst[i][j] == x){\n\t\t\
    \tj++\n\t\t}\n\t\ttmp.push([i, j])\n\t}\n\ttmp.sort((a, b) => (a[0] < b[0]) ?\
    \ 1 : ((b[0] < a[0]) ? -1 : 0))\n\ttmp.sort((a, b) => (a[1] > b[1]) ? 1 : ((b[1]\
    \ < a[1]) ? -1 : 0))\n\treturn tmp\n}\n", "    return lst.map(function(row){\n\
    \        var sorted_row = row.slice().sort();\n        sorted_row.sort(function(a,\
    \ b){\n            return b-a;\n        });\n        var sorted_cols = sorted_row.map(function(col){\n\
    \            return sorted_row.indexOf(col);\n        });\n        return sorted_cols.indexOf(x);\n\
    \    }).filter(function(n){return n!==-1}).map(function(n){\n        return [n%lst.length,\
    \ Math.floor(n/lst.length)];\n    });\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
