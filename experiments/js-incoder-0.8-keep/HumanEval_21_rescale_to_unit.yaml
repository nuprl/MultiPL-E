name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    var max = d3.max(numbers);\n    var min = d3.min(numbers);\n  \
    \  var range = [];\n    for(var i=0; i<numbers.length; i++){\n        range.push(numbers[i]-min);\n\
    \    }\n    return d3.range(min, max+0.1).toFixed(2);\n}", "    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for (var i = 1; i < numbers.length; i++){\n  \
    \      if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    return [min, max];\n}\n", "    var min_number\
    \ = Math.min(...numbers);\n    var max_number = Math.max(...numbers);\n    return\
    \ Array.from({length:numbers.length}, (e, i)=>i===0?min_number:numbers[i] - min_number\
    \ / (max_number - min_number));\n}\n", "    var min_value = Math.min(numbers[0].toFixed(6),numbers[1].toFixed(6));\n\
    \    var max_value = Math.max(numbers[0].toFixed(6),numbers[1].toFixed(6));\n\
    \    var values_per_unit = max_value - min_value;\n    var values_per_unit_sq\
    \ = values_per_unit*values_per_unit;\n    var rescaled = [];\n    for (var i =\
    \ 0; i < numbers.length; i++){\n        rescaled[i] = (numbers[i] - min_value)\
    \ / values_per_unit;\n    }\n    return rescaled;\n}\n", "    var scale = [];\n\
    \    var smallest = Math.min.apply(null, numbers);\n    var largest = Math.max.apply(null,\
    \ numbers);\n    var diff = largest - smallest;\n    var range;\n    \n    for(var\
    \ i=0; i<numbers.length; i++){\n        range = diff * i/numbers.length;\n   \
    \     scale.push((smallest + range)%1);\n    }\n    return scale;\n}\n", "   \
    \ var scale = [];\n    var l = numbers.length;\n    var min = 0;\n    var max\
    \ = numbers[0];\n    if(l > 0){\n        min = numbers[l - 1];\n    }\n    for(var\
    \ i = 1; i <= l; i++){\n        scale.push(min + (max - min) * i / (l - 1));\n\
    \    }\n    return scale;\n}\n", "    var max = d3.max(numbers);\n    return d3.range(0,max+1).map(function(x){return\
    \ (x/max)*2});\n}\n", "    var first_numbers = numbers.slice(0, numbers.length/2);\n\
    \    var max_number = Math.max.apply(null, first_numbers);\n    return numbers.map(function(x){\n\
    \        return (x - max_number) / (numbers.reduce(function(acc, cur){\n     \
    \       return Math.max(acc, Math.abs(cur));\n        }, -max_number));\n    });\n\
    }\n", "\treturn numbers.map(function(x){\n\t\treturn (x-Math.min(numbers))/(Math.max(numbers)-Math.min(numbers))\n\
    \t})\n}\n", "\treturn numbers.map(function(n){\n\t\treturn Math.min(1, Math.max(0,\
    \ n));\n\t});\n}\n", "\tlet min_value = Math.min(...numbers);\n\tlet max_value\
    \ = Math.max(...numbers);\n\treturn numbers.map(x => x - min_value) / (max_value\
    \ - min_value);\n}\n\n", "  var i, sum = 0;\n  var length = numbers.length;\n\n\
    \  for (i=0; i<length; i++){\n    sum += numbers[i];\n  }\n\n  if(sum > 0){\n\
    \    for(i=0; i<length; i++){\n      numbers[i] *= (1 / sum);\n    }\n  }\n\n\
    \  return numbers;\n}\n\n", "    var min = numbers.map(function(n){return n[0];});\n\
    \    var max = numbers.map(function(n){return n[0];});\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        if(numbers[i][0] < min[0]) min[0] = numbers[i][0];\n\
    \        if(numbers[i][0] > max[0]) max[0] = numbers[i][0];\n        if(numbers[i][1]\
    \ < min[1]) min[1] = numbers[i][1];\n        if(numbers[i][1] > max[1]) max[1]\
    \ = numbers[i][1];\n    }\n    return d3.range(min[0], max[0] + 1, (max[0] - min[0])\
    \ / 1000).map(function(d){return (d - min[0]) / 1000});\n}\n", "    var min =\
    \ Math.min(numbers[0] , numbers[1]);\n    var max = Math.max(numbers[0] , numbers[1]);\n\
    \n    if(min === max){\n        return [min];\n    }\n\n    var diff = max - min;\n\
    \    var result = [];\n\n    for(var i=0; i< numbers.length; i++){\n        result.push(min\
    \ + (numbers[i] - min) / diff);\n    }\n    return result;\n}\n", "  var min =\
    \ 0;\n  var max = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n  \
    \  var min = Math.min(min, numbers[i]);\n    var max = Math.max(max, numbers[i]);\n\
    \  }\n  return [min, max];\n}\n", "    var min = 0;\n    var max = 1;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var cur = numbers[i];\n        var\
    \ next = (i+1) < numbers.length ? numbers[i+1] : 1;\n        var diff = next -\
    \ cur;\n        if(diff > 0){\n            min = cur;\n            max = next;\n\
    \        }\n        else{\n            max = cur;\n            min = next;\n \
    \       }\n    }\n    var output = new Array(numbers.length);\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        output[i] = (((numbers[i] - min) / (max\
    \ - min)) * 0.5) + 0.5;\n    }\n    return output;\n}\n\n", "\tconst min = _.min(numbers)\n\
    \tconst max = _.max(numbers)\n\treturn _.map(numbers, function(num){\n\t\treturn\
    \ num * (max - min) / (max - min)\n\t})\n}\n", "    var min_val = Math.min(numbers[0],\
    \ numbers[1]);\n    var max_val = Math.max(numbers[0], numbers[1]);\n    var diff\
    \ = Math.abs(max_val - min_val);\n    var scale = 1.0/(1.0 + diff);\n    var new_numbers\
    \ = [];\n    new_numbers[0] = numbers[0] * scale;\n    new_numbers[1] = numbers[1]\
    \ * scale;\n    for (var i=2; i<numbers.length; i++){\n        new_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return new_numbers;\n}\n", "  var min_num\
    \ = Math.min.apply(null, numbers);\n  var max_num = Math.max.apply(null, numbers);\n\
    \  return numbers.map(function(n){\n    return ((n - min_num) / (max_num - min_num))\
    \ * (1 - Math.abs(n));\n  });\n}\n", "\tvar min=0;\n\tvar max=0;\n\tvar num=0;\n\
    \tfor(var i=0; i < numbers.length; i++){\n\t\tnum = numbers[i];\n\t\tif(num >\
    \ max) max=num;\n\t\tif(num < min) min=num;\n\t}\n\tvar scale_percent = (max-min)/num;\n\
    \tvar scale = scale_percent;\n\tvar factor = (scale_percent*num)/10;\n\tvar offset\
    \ = (num/10)*(scale-scale_percent)/2;\n\tvar result = [];\n\tfor(var i=0; i <\
    \ numbers.length; i++){\n\t\tnum = numbers[i];\n\t\tresult.push(num*factor+offset);\n\
    \t}\n\treturn result;\n}\n", "    var min = numbers[0];\n    var max = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max) max\
    \ = numbers[i];\n        if(numbers[i] < min) min = numbers[i];\n    }\n    return\
    \ [min, max];\n}\nvar DEFAULT_DENSITY = 1.0;", "\tif (numbers.length < 2)\n\t\t\
    return numbers;\n\tvar scale = Math.min(max_number_scale(numbers), min_number_scale(numbers));\n\
    \tvar offset = -min_number_scale(numbers);\n\treturn map(numbers, function(){\n\
    \t\treturn Math.round(((min_number_scale(this) * scale) + offset) * 100.0) / 100.0;\n\
    \t});\n}\n", "    var min = Math.min(numbers);\n    var max = Math.max(numbers);\n\
    \    var range = max - min;\n    var rescaled_numbers = [];\n    for(var i=0;i<numbers.length;i++){\n\
    \        rescaled_numbers.push(min + (numbers[i]-min)*range/range);\n    }\n \
    \   return rescaled_numbers;\n}\n", "    var min = Math.min(numbers[0], numbers[1])\n\
    \    var max = Math.max(numbers[0], numbers[1])\n    var range = max-min\n   \
    \ var rescaled = [0, 0, range, 0, range]\n    for (var i = 2; i < numbers.length;\
    \ i++){\n        rescaled[i] = rescaled[i-1] + numbers[i] - numbers[i-1]\n   \
    \ }\n    rescaled[1] = max - rescaled[0]\n    return rescaled\n}\n", "    var\
    \ max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null, numbers);\n\
    \    var range = (max - min);\n    var scaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        scaled.push( (numbers[i] - min) / range );\n    }\n    return\
    \ scaled;\n}\n", "    var sorted_list = numbers.slice(0).sort(function(a, b){\n\
    \        return a - b;\n    });\n    var min_value = sorted_list[0];\n    var\
    \ max_value = sorted_list[sorted_list.length - 1];\n    var factor = (max_value\
    \ - min_value) / (sorted_list.length - 1);\n\n    return sorted_list.map(function(val){\n\
    \        return (val - min_value) / factor;\n    });\n}\n\n", "    var minNumber\
    \ = Number.MAX_VALUE;\n    var maxNumber = Number.MIN_VALUE;\n    var min = numbers.shift();\n\
    \    var max = numbers.shift();\n    while (numbers.length > 0) {\n        var\
    \ currNumber = numbers.shift();\n        if (currNumber < min) {\n           \
    \ min = currNumber;\n        }\n        if (currNumber > max) {\n            max\
    \ = currNumber;\n        }\n    }\n    return [min, max];\n}\n", "  var min =\
    \ Math.min(numbers[0], numbers[1]);\n  var max = Math.max(numbers[0], numbers[1]);\n\
    \  var range = max - min;\n  return numbers.map(function(num){\n    return (num\
    \ - min) / range;\n  });\n}\n", "  var min = Math.min(numbers[0], numbers[1]);\n\
    \  var max = Math.max(numbers[0], numbers[1]);\n  var interval = (max-min)/numbers.length;\n\
    \  var rescaled = [];\n  numbers.forEach(function(number){\n    rescaled.push(number*interval);\n\
    \  });\n  return rescaled;\n}\n", "\tvar max_number = 0;\n\tvar min_number = numbers[0];\n\
    \tvar i;\n\n\tfor(i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < min_number){\n\
    \t\t\tmin_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > max_number){\n\t\t\t\
    max_number = numbers[i];\n\t\t}\n\t}\n\tfor(i = 1; i < numbers.length; i++){\n\
    \t\tnumbers[i] = ((numbers[i] - min_number) / (max_number - min_number)) * 2 -\
    \ 1;\n\t}\n}\n", "    var max_num = Math.max.apply(null, numbers);\n    var min_num\
    \ = Math.min.apply(null, numbers);\n    var range = (max_num - min_num);\n   \
    \ var output_numbers = [];\n    for (var i=0; i < numbers.length; i++){\n    \
    \    var num = numbers[i];\n        var scaled = num/range;\n        num = scaled*range;\n\
    \        output_numbers.push(num);\n    }\n    return output_numbers;\n}\n", " \
    \ var first_number = numbers[0];\n  var second_number = numbers[1];\n  var max_number\
    \ = Math.max(first_number, second_number);\n  var min_number = Math.min(first_number,\
    \ second_number);\n  var rescaled = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    rescaled[i] = (numbers[i] - min_number) / (max_number - min_number);\n\
    \  }\n  return rescaled;\n}\n", "    var smallest_num = Math.min.apply(null, numbers);\n\
    \    var biggest_num = Math.max.apply(null, numbers);\n    var delta_num = biggest_num\
    \ - smallest_num;\n    var scale = [];\n    for(var i=0; i < numbers.length; i++){\n\
    \        var value = numbers[i]; //Get the current number\n        var delta_scaled\
    \ = delta_num / Math.max(1, Math.abs(value));\n        scale.push(Math.max(0,\
    \ value+delta_scaled));\n    }\n    return scale;\n}", "  if(numbers.length <\
    \ 2){\n    return [];\n  }\n  var min = numbers.shift();\n  var max = numbers.pop();\n\
    \  return numbers.map(function(value){\n    return (value - min) / (max - min);\n\
    \  });\n}\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = [min, max];\n    var scale = (range[1] - range[0])\
    \ / 255.0;\n    var scale = Math.min(Math.max(scale, 1), 255);\n    return [scale,\
    \ scale];\n}\n", "    var min = Math.min(numbers[0], numbers[1]);\n    var max\
    \ = Math.max(numbers[0], numbers[1]);\n    var scale = (max-min)/100;\n    numbers.forEach(function(e){\n\
    \        e -= min;\n        e*=scale;\n    });\n    return numbers;\n}", "  if(numbers.length\
    \ <= 1){\n    return numbers;\n  }\n\n  var average = numbers.reduce(function(sum,\
    \ num){\n    return sum + num;\n  }, 0) / numbers.length;\n  var difference =\
    \ Math.abs(numbers[0] - average);\n\n  return numbers.map(function(number){\n\
    \    return Math.round((number - average) / difference);\n  });\n}\n", "  numbers\
    \ = numbers.filter(function(item) { return item !== undefined; });\n  if (numbers.length\
    \ < 2) return numbers;\n\n  var largest = numbers[0];\n  var smallest = numbers[1];\n\
    \n  numbers.forEach(function(number){\n    var change = largest - smallest;\n\
    \    largest = smallest;\n    smallest = number + change;\n  });\n\n  return [smallest,\
    \ largest];\n}\n", "    var scale = [];\n    var min = Math.min(numbers[0], numbers[1]);\n\
    \    var max = Math.max(numbers[0], numbers[1]);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        scale.push((numbers[i] - min) / (max - min));\n    }\n    return\
    \ scale;\n}\n", "    if (numbers.length <= 1) return numbers;\n    var totalMin\
    \ = Math.min(numbers[0][0], numbers[1][0]);\n    var totalMax = Math.max(numbers[0][0],\
    \ numbers[1][0]);\n    var interval = Math.abs(totalMax - totalMin);\n    var\
    \ unitInterval = Math.abs(numbers[0][1] - numbers[1][1]);\n    var newTotalMin\
    \ = totalMin - interval * unitInterval;\n    var newTotalMax = totalMax + interval\
    \ * unitInterval;\n    return [\n        [newTotalMin, newTotalMax],\n       \
    \ [newTotalMin, newTotalMax]\n    ];\n}\n", "\tvar l = numbers.length\n\tvar n\
    \ = numbers[0]\n\tfor(var i = 0; i < l; i++){\n\t\tn = n * numbers[i] / l\n\t\
    }\n\treturn numbers\n}\n", "  var minNum = numbers[0];\n  var maxNum = numbers[0];\n\
    \  for (var i = 1; i < numbers.length; i++){\n    if (numbers[i] < minNum) minNum\
    \ = numbers[i];\n    if (numbers[i] > maxNum) maxNum = numbers[i];\n  }\n  var\
    \ diff = (maxNum - minNum)/100;\n  return numbers.map(function(n){\n    return\
    \ n - minNum + diff;\n  });\n}\n", "    var new_array = [];\n    var length =\
    \ numbers.length;\n    var min_val = numbers[0];\n    var max_val = numbers[0];\n\
    \n    for(var i = 1; i < numbers.length; i++){\n        if (numbers[i] > max_val){\n\
    \            max_val = numbers[i];\n        }\n        if (numbers[i] < min_val){\n\
    \            min_val = numbers[i];\n        }\n    }\n\n    var ratio = max_val\
    \ / min_val;\n    for(var i = 0; i < numbers.length; i++){\n        new_array[i]\
    \ = numbers[i] * ratio;\n    }\n\n    return new_array;\n}\n\n", "  var n = numbers.length,\n\
    \      new_numbers = [],\n      i, prev, next;\n  for(i=n - 1; i >= 0; i--){\n\
    \    next = numbers[i];\n    prev = numbers[i - 1];\n    if(prev === undefined)\
    \ new_numbers.push(next);\n    else new_numbers.push(1 - (next / prev));\n  }\n\
    \  return new_numbers;\n}\n", "    var min = 0;\n    var max = numbers[0];\n \
    \   for (var i = 1; i < numbers.length; i++){\n        if (min > numbers[i]){\n\
    \            min = numbers[i];\n        }\n        if (max < numbers[i]){\n  \
    \          max = numbers[i];\n        }\n    }\n    return numbers.map(function(e){\n\
    \        return e - min;\n    }).map(function(e){\n        return e / (max - min);\n\
    \    });\n}\n", "    return numbers.map(function(x){\n        var range = Math.sqrt(x.map(function(x){return\
    \ x*x}));\n        return x/range;\n    });\n}\n\n", "    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        min_number = Math.min(min_number, numbers[i]);\n        max_number =\
    \ Math.max(max_number, numbers[i]);\n    }\n    var scale_factor = (max_number\
    \ - min_number) / (numbers.length - 1);\n    return numbers.map(function(num){\n\
    \        return (num - min_number) * scale_factor;\n    });\n}\n", "\tvar len\
    \ = numbers.length;\n\tvar i;\n\tfor(i=0;i<len;i++){\n\t\tnumbers[i] = numbers[i]\
    \ - numbers[i%len];\n\t}\n\tvar min = Math.min.apply(null, numbers);\n\tvar max\
    \ = Math.max.apply(null, numbers);\n\tfor(i=0;i<len;i++){\n\t\tnumbers[i] = numbers[i]\
    \ - min;\n\t}\n\tnumbers[0] = numbers[0] / max;\n\tnumbers[len-1] = numbers[len-1]\
    \ / max;\n\treturn numbers;\n}\n", "    var max = Math.max.apply(null, numbers);\n\
    \    var min = Math.min.apply(null, numbers);\n    var scale = (max - min)/100;\n\
    \    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  rescaled.push(numbers[i]*scale);\n    }\n    return rescaled;\n}", "    var\
    \ max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null, numbers);\n\
    \    var unit = (max - min) / (max - min);\n    return numbers.map(function(num){\n\
    \        return (num - min) / unit;\n    });\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nYou can try this function,\n<code>", "    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    if (range ===\
    \ 0){\n        // can happen only if all numbers are equal and difference is zero\n\
    \        return numbers;\n    }\n    var scale = range / (numbers.length-1);\n\
    \    return numbers.map(function(number){\n        return number * scale;\n  \
    \  });\n}\n\n", "  if (numbers.length < 2) return numbers;\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for (var i = 1; i < numbers.length; i++){\n  \
    \  var diff = largest - smallest;\n    largest = Math.max(largest, numbers[i]);\n\
    \    smallest = Math.min(smallest, numbers[i]);\n  }\n  return [smallest, largest];\n\
    }\n", "    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++)\n \
    \       rescaled[i] = numbers[i]/numbers.length;\n    return rescaled;\n}", " \
    \   var n = numbers.length;\n    if(n < 2)\n        return numbers;\n    var max\
    \ = 0;\n    var min = numbers[0];\n    for(var i=1; i<n; i++){\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n        if(numbers[i] < min)\n      \
    \      min = numbers[i];\n    }\n    if(min === max)\n        return [min, min];\n\
    \    var range = [0, max];\n    var step = (max-min)/(n-1);\n    var scaled_array\
    \ = [];\n    for(var i = 0; i < n; i++){\n        scaled_array[i] = min + step*i;\n\
    \    }\n    return scaled_array;\n}\nexports.rescale_to_unit = rescale_to_unit;\n",
  "\tif(numbers.length <= 1){\n\t\treturn numbers;\n\t}\n\telse{\n\t\tfor(var i =\
    \ 0; i < numbers.length; i++){\n\t\t\tnumbers[i] /= numbers[numbers.length - 1];\n\
    \t\t}\n\t\treturn numbers;\n\t}\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\
    \tvar min = Math.min.apply(null, numbers);\n\tvar offset = max - min;\n\treturn\
    \ numbers.map(function(n){\n\t\treturn (n-min) / offset;\n\t});\n}\n", "\tvar\
    \ mins = numbers.map(function(x){return (x<min)?min:x});\n\tvar maxs = numbers.map(function(x){return\
    \ (x>max)?max:x});\n\tvar diffs = numbers.map(function(x){return (x-mins)/(maxs-mins)});\n\
    \treturn numbers.map(function(x){return x*(diffs.indexOf(x) < 0)});\n}\n", " \
    \   // Create a copy of the list for manipulation\n    let list = new List(numbers);\n\
    \    // Find the max\n    let max = list.getMax();\n    let min = list.getMin();\n\
    \n    // Normalize the values between min and max\n    for(const value of list.getValues()){\n\
    \        value -= min;\n        value /= (max - min);\n    }\n\n    // Return\
    \ the new list\n    return list;\n}\n", "\tvar min = null;\n\tvar max = null;\n\
    \tvar sum = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar n = numbers[i];\n\
    \t\tif(min == null || n < min){\n\t\t\tmin = n;\n\t\t}\n\t\tif(max == null ||\
    \ n > max){\n\t\t\tmax = n;\n\t\t}\n\t\tsum += n;\n\t}\n\tvar scale = 1 / (max\
    \ - min);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar n = numbers[i];\n\
    \t\tnumbers[i] = (n - min) * scale + min;\n\t}\n\treturn numbers;\n}\n", "\tconst\
    \ min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\n\treturn\
    \ numbers.map(n => n - min) / (max - min);\n}\n", "  var max = numbers[0];\n \
    \ var min = numbers[0];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ < min) min = numbers[i];\n    if(numbers[i] > max) max = numbers[i];\n  }\n\
    \  \n  var scale = (max-min)/numbers.length;\n  return numbers.map(function(n){return\
    \ n*scale;});\n}\n", "    var n = numbers.length;\n    var scale_factor = 1.0;\n\
    \    if(n == 1){\n        return numbers[0];\n    }\n    var max_val = Math.max.apply(null,\
    \ numbers);\n    var min_val = Math.min.apply(null, numbers);\n    if(max_val\
    \ == min_val){\n        return numbers[0];\n    }\n    while(n > 1){\n       \
    \ if(numbers[n - 1] != numbers[n]){\n            scale_factor = numbers[n - 1]\
    \ / numbers[n];\n            break;\n        }\n        n--;\n    }\n    return\
    \ scale_factor * max_val;\n}", "    var len = numbers.length,\n        min = numbers[0],\n\
    \        max = numbers[0],\n        i;\n\n    for(i = 1; i < len; i++){\n    \
    \    min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n\
    \    }\n    for(i = 0; i < len; i++){\n        numbers[i] -= min;\n        numbers[i\
    \ + 1] /= (max - min);\n    }\n    return numbers;\n}\n", "  var min_value = Math.min(numbers[0],\
    \ numbers[1]);\n  var max_value = Math.max(numbers[0], numbers[1]);\n  numbers[0]\
    \ = min_value;\n  numbers[1] = max_value;\n  return numbers;\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(1/numbers[i]);\n\
    \    }\n    return result;\n}\n", "\tvar len = numbers.length;\n\tvar min_num\
    \ = 0;\n\tvar max_num = 0;\n\tvar temp = 0.0;\n\tfor(var i=0; i<len; ++i){\n\t\
    \ttemp = numbers[i];\n\t\tif(temp > max_num){\n\t\t\tmax_num = temp;\n\t\t}else\
    \ if(temp < min_num){\n\t\t\tmin_num = temp;\n\t\t}\n\t}\n\tfor(var i=0; i<len;\
    \ ++i){\n\t\tnumbers[i] = ((numbers[i] - min_num) / (max_num - min_num)) * 2.0;\n\
    \t}\n}\n", "  var min_val = Math.min.apply(null, numbers);\n  var max_val = Math.max.apply(null,\
    \ numbers);\n  var range = max_val - min_val;\n  var scaled = [];\n  for(var i=0;\
    \ i < numbers.length; i++){\n    scaled.push(numbers[i] - min_val) / range;\n\
    \  }\n  return scaled;\n}\n", "    var min_number = Math.min.apply(null, numbers);\n\
    \    var max_number = Math.max.apply(null, numbers);\n\n    var new_numbers =\
    \ numbers.map(function(number){ return (number - min_number) / (max_number - min_number);\
    \ });\n\n    return new_numbers;\n}\n", "  var min = numbers[0]\n  var max = numbers[0]\n\
    \n  for (var i = 0; i < numbers.length; i++){\n    if (numbers[i] > max){\n  \
    \    max = numbers[i]\n    } else if (numbers[i] < min){\n      min = numbers[i]\n\
    \    }\n  }\n\n  var out_numbers = new Array(numbers.length)\n  for (var i = 0;\
    \ i < out_numbers.length; i++){\n    out_numbers[i] = min + ((numbers[i] - min)\
    \ / max)\n  }\n  return out_numbers\n}\n", "\tvar min = Math.min.apply(Math, numbers);\n\
    \tvar max = Math.max.apply(Math, numbers);\n\tvar diff = (max-min)/max;\n\t\n\t\
    for (var i = 0; i < numbers.length; i++){\n\t\tnumbers[i] = numbers[i] - min;\n\
    \t\tnumbers[i] *= diff;\n\t}\n\t\n\treturn numbers;\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var min = Math.min.apply(null, numbers);\n  var range = (max -\
    \ min);\n  return [min / range, range / max];\n}\n", "  var min = numbers[0];\n\
    \  var max = numbers[0];\n  numbers.forEach(function(a){\n    if(a>max){\n   \
    \   max = a;\n    }\n    if(a<min){\n      min = a;\n    }\n  });\n  var scale\
    \ = (max-min)/2.0;\n  return numbers.map(function(n){\n    return n*scale;\n \
    \ });\n}\n", "\tnumbers = numbers.map(function(number){\n\t\treturn number / min(0.00001,\
    \ number);\n\t});\n\treturn Math.min.apply(null, numbers);\n}\n", "  var min_value\
    \ = Math.min(numbers[0], numbers[1])\n  var max_value = Math.max(numbers[0], numbers[1])\n\
    \  var range_length = max_value - min_value\n  return min_value*(range_length/numbers.length)\n\
    }\n", "  var sum = 0,\n      min = Math.min(numbers[0]),\n      max = Math.max(numbers[0]);\n\
    \n  for(var i=1; i<numbers.length; i++){\n    var number = numbers[i];\n\n   \
    \ if(number < min) min = number;\n    if(number > max) max = number;\n    sum\
    \ += number;\n  }\n\n  // If all the numbers are the same, return all ones\n \
    \ if(numbers[0] == numbers[numbers.length-1])\n    return numbers;\n\n  // Find\
    \ the minimum value which makes all the numbers smaller\n  var scale = Math.min((max-min)\
    \ / sum, 1);\n  return numbers.map(function(number){\n    return number*(scale/sum);\n\
    \  });\n}\n</code>\n<|/ a |>\n<| c |>\nI like this. It makes the most sense to\
    \ me: scale the smallest number to be 0, the largest to be 1, then take the difference\
    \ between the two numbers to get a range from 0 to 1. A nice simple solution.\n\
    <|/ c |>\n<| c |>\nGreat answer. Thanks for the suggestions. I ended up going\
    \ with `if(numbers[0] == numbers[numbers.length-1]) numbers = numbers;` but your\
    \ answer was very informative.\n<|/ c |>\n<| c |>\nThe result of your solution\
    \ is not the same as the OP requested, it's `[0,1]` instead of `[0,0.25,0.5,0.75,1]`.\n\
    <|/ c |>\n<| a dscore=5 tags=math,javascript,algorithm |>\n<code>", "    var min\
    \ = numbers[0], max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n\
    \    return [min, max];\n}", "    var max_ = Math.max(...numbers);\n    var min_\
    \ = Math.min(...numbers);\n    return numbers.map(function(x){ return (x - min_)\
    \ * max_ / min_; });\n}\n", "    numbers.forEach(function(number, index, array){\n\
    \        array[index] = number / Math.max(1, array.length - index);\n    })\n\
    \    return numbers;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThanks for the solution,\
    \ but as someone who's new to Javascript this was an interesting read.  The function\
    \ I was working on at the time was only about 1/2 the length of the code, and\
    \ I didn't like having an if-statement and multiple returns for each possibility.\n\
    <|/ c |>\n<| a |>\nI like the solution provided by Kristof van Dongen but wanted\
    \ to share my version with an added bonus. I used this approach with ES6 syntax\
    \ and lodash for some things. \nThe function can be rewritten as:\n<code>", "\t\
    var rescaled_numbers = [],\n\t\tmax_number = Math.max.apply(Math, numbers);\n\t\
    \n\tnumbers.forEach(function(number){\n\t\trescaled_numbers.push(Math.ceil(number\
    \ / max_number * 0.5) * max_number);\n\t});\n\t\n\treturn rescaled_numbers;\n\
    }\n", "\tnumbers = numbers.slice();\n\tvar max_number = Math.max.apply(null, numbers);\n\
    \tvar min_number = Math.min.apply(null, numbers);\n\tvar scale = (max_number -\
    \ min_number) / (Math.max.apply(null, numbers) - min_number);\n\tvar rescaled\
    \ = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\trescaled.push(numbers[i]\
    \ + scale);\n\t}\n\treturn rescaled;\n}\n\nmodule.exports = rescale_to_unit;\n\
    \n},{}],33:[function(_dereq_,module,exports){", "  var min = Math.min(numbers);\n\
    \  var max = Math.max(numbers);\n  return function(x){\n    return ((x - min)\
    \ * 1.0) / (max - min);\n  };\n}", "  var min_element = min(numbers);\n  var max_element\
    \ = max(numbers);\n  var target_range = max_element - min_element;\n  var scale\
    \ = target_range/sum(numbers);\n  return map(numbers, function(n){\n    return\
    \ n*scale;\n  });\n}\n", "  var max_index = 0;\n  var min_index = 0;\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < numbers[min_index]){\n\
    \      min_index = i;\n    }\n    if(numbers[i] > numbers[max_index]){\n     \
    \ max_index = i;\n    }\n  }\n  var center = (max_index + min_index)/2;\n  if(numbers[max_index]\
    \ < numbers[min_index]){\n    numbers[max_index] += 1 - center; //shift to left\n\
    \    numbers[min_index] -= center;  //shift to right\n  }else{\n    numbers[min_index]\
    \ -= center; //shift to left\n    numbers[max_index] += center;  //shift to right\n\
    \  }\n  return numbers;\n}\n", "    var minimum = Math.min(numbers);\n    var\
    \ maximum = Math.max(numbers);\n    var length = numbers.length;\n    var scale\
    \ = maximum / minimum;\n    var scaled_numbers = new Array(length);\n\n    //Normalize\
    \ the numbers\n    for(var i = 0; i < numbers.length; i++){\n        scaled_numbers[i]\
    \ = ((numbers[i] - minimum) * scale) + minimum;\n    }\n\n    return scaled_numbers;\n\
    }\n\n", "  var min = Math.min(numbers);\n  var max = Math.max(numbers);\n  var\
    \ scale = (max-min)/numbers.length;\n  return numbers.map(function(x){return (x-min)*scale;});\n\
    }", "    var min_number = numbers[0];\n    var max_number = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_number){\n   \
    \         max_number = numbers[i];\n        }\n        if(numbers[i] < min_number){\n\
    \            min_number = numbers[i];\n        }\n    }\n    var new_list = [];\n\
    \    for(var i =0; i < numbers.length; i++){\n        if(numbers[i] - min_number\
    \ != 0){\n            var new_number = (numbers[i] - (min_number - max_number))\
    \ / (max_number - min_number);\n            new_list.push(new_number);\n     \
    \   } else {\n            new_list.push(numbers[i]);\n        }\n    }\n    return\
    \ new_list;\n}\n", "    let length = numbers.length\n    let min = numbers[0]\n\
    \    let max = numbers[0]\n    for(let i = 1; i < numbers.length; i++){\n    \
    \    if(numbers[i] < min){\n            min = numbers[i]\n        } else if(numbers[i]\
    \ > max){\n            max = numbers[i]\n        }\n    }\n    for(let i = 0;\
    \ i < numbers.length; i++){\n        numbers[i] -= min\n        numbers[i] *=\
    \ (max - min) / (length-1)\n        numbers[i] += min\n    }\n    return numbers\n\
    }\n", "\tnumbers = numbers.map(function(n){\n\t\treturn Math.min(1, Math.max(0,\
    \ n));\n\t});\n\tvar max = 0;\n\tvar min = numbers[0];\n\tnumbers.forEach(function(n){\n\
    \t\tmax = Math.max(max, n);\n\t\tmin = Math.min(min, n);\n\t});\n\tvar scale =\
    \ max - min;\n\treturn numbers.map(function(n){\n\t\treturn n*1.0/scale;\n\t});\n\
    }\n", "\tvar max = Math.max.apply(null, numbers);\n\treturn numbers.map(function(num){\n\
    \t\treturn ((num - min) / (max - min)) * 2.0 - 1.0;\n\t});\n}\n\n", "  var min\
    \ = numbers[0];\n  var max = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    var n = numbers[i];\n    if(n < min) min = n;\n    if(n > max) max\
    \ = n;\n  }\n  return [min, max];\n}\n", "    var min = Math.min(numbers[0] ,\
    \ numbers[1]);\n    var max = Math.max(numbers[0] , numbers[1]);\n\n    var ratio\
    \ = (max - min);\n\n    var rescaled = [];\n\n    ratio = ratio/scaleFactor;\n\
    \n    for (var i=0; i<numbers.length; i++){\n        rescaled[i] = numbers[i]*scaleFactor;\n\
    \    }\n\n    return rescaled;\n}\n", "\tvar min_max_value = calculateMinMax(numbers);\n\
    \tvar min_value = min_max_value[0];\n\tvar max_value = min_max_value[1];\n\t\n\
    \t//Check if min and max are equal\n\tif(min_value == max_value)\n\t\treturn [min_value,\
    \ min_value];\n\t\n\tvar scale_value = (max_value - min_value) / (numbers.length-1);\n\
    \treturn [min_value + scale_value * 0.5, max_value - scale_value * 0.5];\n}\n",
  "    if (numbers.length === 0)\n        return [];\n    var max_value = Math.max.apply(null,\
    \ numbers);\n    if (max_value === 0)\n        return [];\n    var min_value =\
    \ Math.min.apply(null, numbers);\n    if (min_value === 0)\n        return [];\n\
    \n    var result = [];\n    for (var i = 0; i < numbers.length; i++)\n    {\n\
    \        var number = numbers[i];\n        if (number > 0)\n        {\n      \
    \      number = number / max_value;\n            if (number > 1)\n           \
    \     number = 1;\n        }\n        else\n        {\n            number = number\
    \ / min_value;\n            if (number < 0)\n                number = 1;\n   \
    \     }\n\n        result.push(number);\n    }\n    return result;\n}\n\n", " \
    \   var min_val = Math.min(numbers[0].valueOf(), numbers[1].valueOf());\n    var\
    \ max_val = Math.max(numbers[0].valueOf(), numbers[1].valueOf());\n    return\
    \ numbers.map(function(value){\n        var scaled_value = ((value - min_val)\
    \ / (max_val - min_val)) * 100.0;\n        return scaled_value;\n    });\n}",
  "    var min = 0;\n    var max = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        min = Math.min(min, numbers[i]);\n        max = Math.max(max,\
    \ numbers[i]);\n    }\n    return [min, max];\n}\n", "\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar max = Math.max.apply(null, numbers);\n\tvar range = max - min;\n\
    \tvar mid = min + range / 2;\n\n\treturn numbers.map(function(x){\n\t\treturn\
    \ mid - (x - min) / range;\n\t});\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\
    \tvar min = Math.min.apply(null, numbers);\n\tvar rescaled = [];\n\tfor (var i\
    \ = 0; i < numbers.length; i++){\n\t\trescaled.push( ((numbers[i] - min) / (max\
    \ - min)) * 100 );\n\t}\n\treturn rescaled;\n}\n\n", "\tnumbers.sort(function(a,\
    \ b){return b-a})\n\tvar start = numbers[0]\n\tvar end = numbers[numbers.length-1]\n\
    \tvar factor = (end - start) / (numbers.length - 1)\n\tvar n = 0\n\tnumbers.forEach(function(num){\n\
    \t\tn+=num*factor\n\t})\n\treturn [start, n, end]\n}\n", "\tnumbers = numbers.map(Number);\n\
    \tvar max = Math.max.apply(null, numbers);\n\tvar min = Math.min.apply(null, numbers);\n\
    \tvar range = max - min;\n\tif (range === 0)\n\t\treturn numbers;\n\tvar inv_range\
    \ = 1.0 / range;\n\tvar result = [];\n\tfor (var i = 0; i < numbers.length; i++)\n\
    \t\tresult.push(numbers[i] * inv_range);\n\treturn result;\n}\n\n", "\tvar max_number\
    \ = Math.max.apply( Math, numbers );\n\tvar min_number = Math.min.apply( Math,\
    \ numbers );\n\tvar max_number_unit = max_number/max_number_base;\n\tvar min_number_unit\
    \ = min_number/min_number_base;\n\tvar new_list = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tnew_list[i] = ((numbers[i] - min_number_unit)/(max_number_unit -\
    \ min_number_unit));\n\t}\n\treturn new_list;\n}\n", "    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] < numbers[i - 1]){\n            numbers[i] = (numbers[i]\
    \ - numbers[i - 1]) / (numbers[i] - numbers[i - 1]);\n        }\n    }\n    return\
    \ numbers;\n}\n", "  var min = numbers[0];\n  var max = numbers[0];\n  var sum\
    \ = 0;\n  for(var i = 1; i < numbers.length; ++i){\n    sum += (numbers[i] - min)\
    \ * (max - min) / (i + 1);\n    min = numbers[i];\n    max = numbers[i];\n  }\n\
    \  return [sum, min, max];\n}\n", "\tnumbers = numbers.filter(function(x){ return\
    \ x != null });\n\n\tif(numbers.length < 2)\n\t\treturn numbers;\n\n\tvar min1\
    \ = Math.min.apply(Math, numbers);\n\tvar max1 = Math.max.apply(Math, numbers);\n\
    \n\tnumbers = numbers.map(function(x){ return x - min1; });\n\tnumbers = numbers.map(function(x){\
    \ return x / max1; });\n\n\treturn numbers;\n}\n\n", "    var rescaled = [];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i]\
    \ - Math.min(numbers)) * (1 - Math.min(numbers)));\n    }\n    return rescaled;\n\
    }\n", "    var min = min(numbers);\n    var max = max(numbers);\n    var factor\
    \ = (max-min)/min(max(numbers), min(numbers));\n    var new_numbers = [];\n  \
    \  for(var i=0;i<numbers.length;i++){\n        new_numbers[i] = numbers[i] - min\
    \ + factor*(numbers[i] - min);\n    }\n    return new_numbers;\n}", "\tvar max_num\
    \ = Math.max(numbers);\n\t\n\tfor(var i = numbers.length - 1; i >= 0; i--){\n\t\
    \tnumbers[i] = (numbers[i] - max_num) / max_num;\n\t}\n\treturn numbers;\n}\n",
  "    var minn = min(a(numbers));\n    var maxx = max(a(numbers));\n    return [minn\
    \ + (maxx - minn)/2, maxx];\n}\n", "    var min = new Float32Array(1),\n     \
    \   max = new Float32Array(1);\n    \n    for(var i=0; i<numbers.length; i++){\n\
    \        min[0] = Math.min(min[0], numbers[i]);\n        max[0] = Math.max(max[0],\
    \ numbers[i]);\n    }\n    \n    if(min[0] === max[0]){\n        return min;\n\
    \    }\n    \n    var scale = (max[0]-min[0]) / (max[0]-min[0]).valueOf();\n \
    \   var ret = new Float32Array(numbers.length);\n    for(var i=0; i<numbers.length;\
    \ i++){\n        ret[i] = numbers[i] * scale;\n    }\n    return ret;\n}", " \
    \   var total_number = numbers[0];\n    for (var i = 1; i < numbers.length; i++){\n\
    \        total_number *= numbers[i];\n    }\n    return numbers;\n}\n", "    var\
    \ min_value = Math.min.apply(null, numbers);\n    var max_value = Math.max.apply(null,\
    \ numbers);\n\n    var min_value = Math.min.apply(null, numbers.map(function(elem){return\
    \ elem*10000;}));\n    var max_value = Math.max.apply(null, numbers.map(function(elem){return\
    \ elem*10000;}));\n\n    var scale = Math.pow(10, Math.round((max_value - min_value)\
    \ / 10000));\n    numbers.forEach(function(elem){\n        elem *= scale;\n  \
    \  });\n    return numbers;\n}\n", "\tvar min = numbers[0];\n\tvar max = numbers[0];\n\
    \tvar factor;\n\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tmin = min > numbers[i]\
    \ ? min : numbers[i];\n\t\tmax = max < numbers[i] ? max : numbers[i];\n\t}\n\n\
    \tfor(var i = numbers.length - 1; i >= 0; i--){\n\t\tfactor = numbers[i] - min;\n\
    \t\tnumbers[i] = factor;\n\t\tnumbers[i] /= max;\n\t}\n\n\treturn numbers;\n}\n",
  "  var n = numbers.length,\n      i = 1,\n      interval,\n      min;\n\n  // Find\
    \ smallest of all\n  min = numbers[0];\n  while(i<n) min = Math.min(min, numbers[i]);\n\
    \  \n  // Find largest of all\n  interval = numbers[i-1] - min;\n  \n  for(i=1;\
    \ i<n; i++){\n    numbers[i] -= min;\n    numbers[i] /= interval;\n  }\n  \n \
    \ return numbers;\n}\n\nmodule.exports = rescale_to_unit;\n\n},{}],121:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar isArray = _dereq_('./isArray');\n", "  var max_num = Math.max(...numbers);\n\
    \  return numbers.map((number) => {\n    return (number - min_num) / (max_num\
    \ - min_num);\n  });\n}\n", "    let min_value = Math.min.apply(null, numbers);\n\
    \    let max_value = Math.max.apply(null, numbers);\n    return numbers.map((number)\
    \ => number - min_value) / (max_value - min_value);\n}\n", "    if(numbers.length\
    \ == 0){\n        return [];\n    }\n    else if(numbers.length == 1){\n     \
    \   return [numbers[0] / numbers[0]];\n    }\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(min_number > numbers[i]){\n            min_number = numbers[i];\n\
    \        }\n        else if(max_number < numbers[i]){\n            max_number\
    \ = numbers[i];\n        }\n    }\n    var rescaled_numbers = [min_number];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        rescaled_numbers.push(min_number\
    \ + (numbers[i] - min_number) / (max_number - min_number));\n    }\n    return\
    \ rescaled_numbers;\n}\nexports.rescale_to_unit = rescale_to_unit;\n", "  var\
    \ minimum = numbers[0];\n  var maximum = numbers[0];\n  for (var i = 1; i < numbers.length;\
    \ i++){\n    var n = numbers[i];\n    if (n < minimum)\n      minimum = n;\n \
    \   else if (n > maximum)\n      maximum = n;\n  }\n  if (numbers.length === 1)\n\
    \    minimum = maximum = numbers[0];\n  else if (numbers.length === 2)\n    minimum\
    \ = Math.min(0, numbers[0]);\n    maximum = Math.max(1, numbers[0]);\n  else\n\
    \    minimum = Math.min(0, Math.min(0, numbers[0]));\n    maximum = Math.max(1,\
    \ Math.max(1, numbers[0]));\n\n  var length = maximum - minimum;\n  var unit_step\
    \ = 1.0 / length;\n\n  numbers[0] = minimum;\n  for (var i = 1; i < numbers.length;\
    \ i++)\n    numbers[i] *= unit_step;\n\n  return numbers;\n}\n", "  var min =\
    \ Math.min.apply(null, numbers);\n  var max = Math.max.apply(null, numbers);\n\
    \  var scale = (max - min) / (1 + Math.abs(Math.max.apply(null, numbers) - min));\n\
    \  return numbers;\n}\n\nmodule.exports = rescale_to_unit;\n\n},{\"../constants/index.js\"\
    :40,\"../math/index.js\":86}],43:[function(require,module,exports){\nvar indexOf\
    \ = require('indexof');\n\nvar number = require('../number');\nvar unit = require('../unit');\n",
  "  var min_element = numbers[0];\n  var max_element = numbers[0];\n  for(var i =\
    \ 1; i < numbers.length; ++i){\n    min_element = min_element < numbers[i] ? numbers[i]\
    \ : min_element;\n    max_element = max_element > numbers[i] ? numbers[i] : max_element;\n\
    \  }\n\n  var result_vector = [0.0];\n  for(var i = 0; i < (numbers.length-1);\
    \ ++i){\n    result_vector[i] = numbers[i] / max_element;\n  }\n  result_vector[numbers.length-1]\
    \ = 1.0;\n  return result_vector;\n}\nexports.rescale_to_unit = rescale_to_unit;\n\
    \n", "\tnumbers.sort(function(a, b){return a - b});\n\tvar start = numbers[0];\n\
    \tvar end = numbers[numbers.length-1];\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar num = numbers[i];\n\t\tif(start < num){\n\t\t\tnumbers[i] = 0;\n\t\t}\n\
    \t\telse if(end > num){\n\t\t\tnumbers[i] = 1;\n\t\t}\n\t\telse{\n\t\t\tnumbers[i]\
    \ = num - start;\n\t\t}\n\t\tstart = num;\n\t}\n\treturn numbers;\n}\n", "   \
    \ return numbers.map(n => n/Math.min(...numbers));\n}\n", "    var max_ = Math.max.apply(null,\
    \ numbers);\n    var min_ = Math.min.apply(null, numbers);\n    return numbers.map(function(num){\n\
    \        return (num - min_) * 1.0 / max_;\n    });\n}\n", "  var min = min(numbers);\n\
    \  var max = max(numbers);\n  var range = max - min;\n  var scaled_range = range\
    \ * 0.5;\n  var offset = (scaled_range/2) - (scaled_range*0.2);\n  return map(numbers,\
    \ function(x){ return (x-min) * scaled_range + offset; });\n}\n", "    var min;\n\
    \    var max;\n    if(numbers.length <= 1){\n        throw new Error(\"rescale_to_unit\
    \ expects at least two input numbers to rescale\");\n    }\n    min = numbers[0];\n\
    \    max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ if(numbers[i] > max){\n            max = numbers[i];\n        }\n        if(numbers[i]\
    \ < min){\n            min = numbers[i];\n        }\n    }\n    if(min === max){\n\
    \        return [min, max];\n    }\n    var span = (max - min);\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        numbers[i] = (numbers[i] - min) / span;\n\
    \    }\n    return numbers;\n}", "    var l = numbers.length;\n    var min_index\
    \ = l;\n    var max_index = 0;\n    var min = numbers[0];\n    var max = numbers[0];\n\
    \    for(var i = 1; i < l; i++){\n        if(min > numbers[i]){\n            min\
    \ = numbers[i];\n            min_index = i;\n        }\n        else if(max <\
    \ numbers[i]){\n            max = numbers[i];\n            max_index = i;\n  \
    \      }\n    }\n    var scale = (max_index - min_index) / (l - 1);\n    if(min_index\
    \ === 0){\n        return [0.0, scale];\n    }\n    return [scale, 1.0];\n}\n",
  "  if(numbers.length === 0){\n    return [];\n  }\n\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n\n  numbers.forEach(function(x){\n    smallest =\
    \ Math.min(smallest, x);\n    largest = Math.max(largest, x);\n  });\n\n  var\
    \ scale = (largest - smallest) / (largest);\n  var unit = [];\n  for(var i=0;i<numbers.length;i++){\n\
    \    unit.push(numbers[i] * scale);\n  }\n\n  return unit;\n}\n", "  var min_number\
    \ = numbers[0];\n  var max_number = numbers[numbers.length - 1];\n  var scale_factor\
    \ = max_number - min_number;\n  var rescaled = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    rescaled[i] = (scale_factor * numbers[i]) + min_number;\n  }\n  return\
    \ rescaled;\n}\n", "    if(numbers.length <= 1){\n        return numbers;\n  \
    \  }\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] = numbers[i]\
    \ / numbers[0];\n    }\n    return numbers;\n}\n", "    var min_val = numbers[0];\n\
    \    var max_val = numbers[0];\n    for(var i=1; i<numbers.length; i++){\n   \
    \     if(numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n\
    \        if(numbers[i] < min_val){\n            min_val = numbers[i];\n      \
    \  }\n    }\n    var scale = (max_val - min_val)/numbers.length;\n    var rescaled\
    \ = [];\n    for(var i=0; i<numbers.length; i++){\n        rescaled.push(numbers[i]*scale\
    \ + min_val);\n    }\n    return rescaled;\n}\n", "    var range = [];\n    for\
    \ (var i = 0; i < numbers.length; i++){\n        range[i] = Math.min(1, Math.max(0,\
    \ numbers[i]));\n    }\n    return range;\n}\n", "    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var length\
    \ = max - min;\n    var scale = (length - 1) / ((max - min) * 1.0);\n    numbers.forEach(function(num){\n\
    \        num *= scale;\n    });\n    return numbers;\n}\nexports.rescale_to_unit\
    \ = rescale_to_unit;\n", "  var min = numbers.reduce(function(a, b){return a <\
    \ b ? a : b});\n  var max = numbers.reduce(function(a, b){return a > b ? a : b});\n\
    \  return numbers.map(function(num){return Math.round((num - min) / (max - min))});\n\
    }\n", "    return numbers.map(function(number){\n        return number / number;\n\
    \    });\n}\n", "    numbers = _.clone(numbers);\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var ratio = 1.0;\n    var offset = 0.0;\n\
    \    if(min==max){\n        //Special case, min and max are equal\n        return\
    \ numbers;\n    }\n    for(var i = 0; i < numbers.length; i++){\n        var num\
    \ = numbers[i];\n        if(num - min >= 0){\n            num -= min;\n      \
    \      ratio = ratio * num / max;\n            offset = offset + num;\n      \
    \  }\n        else{\n            num -= max;\n            ratio = ratio * num\
    \ / min;\n            offset = offset + num;\n        }\n    }\n    return [offset/ratio];\n\
    }\n", "    var min = Math.min(numbers[0] || 0, numbers[1] || 0)\n    var max =\
    \ Math.max(numbers[0] || 0, numbers[1] || 0)\n    var max_scaled = max/10\n  \
    \  var min_scaled = min/10\n    var diff = (max-min)/max_scaled\n    var scale\
    \ = max_scaled/diff\n    return numbers.map(function(number){\n        return\
    \ number/scale\n    })\n}", "    var min_val = Math.min.apply(Math, numbers),\n\
    \        max_val = Math.max.apply(Math, numbers);\n    return numbers.map(function(num){\n\
    \        return Math.round(num/min_val*max_val);\n    });\n}\n", "    var max\
    \ = numbers[0];\n    var min = numbers[0];\n    var scale = 1;\n    for (var i\
    \ = 0; i < numbers.length; ++i){\n        if (numbers[i] > max){\n           \
    \ max = numbers[i];\n        }\n        if (numbers[i] < min){\n            min\
    \ = numbers[i];\n        }\n    }\n    for(i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = ((numbers[i] - min) * scale);\n    }\n    return numbers;\n\
    }", "  var n = numbers.length;\n  var sum = 0;\n  for (var i = 0; i < n; i++){\n\
    \    sum += numbers[i];\n  }\n  var mean = sum / n;\n  var sigma = 0;\n  for (var\
    \ i = 0; i < n; i++){\n    sigma += Math.pow((numbers[i] - mean), 2);\n  }\n \
    \ sigma = Math.sqrt(sigma / n);\n  for (var i = 0; i < n; i++){\n    numbers[i]\
    \ /= sigma;\n  }\n  return numbers;\n}\n", "  var min_value = numbers[0];\n  var\
    \ max_value = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    var\
    \ min_temp = numbers[i];\n    var max_temp = numbers[i];\n    if(min_temp > max_temp){\n\
    \      var temp = min_temp;\n      min_temp = max_temp;\n      max_temp = temp;\n\
    \    }\n    min_value = Math.min(min_value, min_temp);\n    max_value = Math.max(max_value,\
    \ max_temp);\n  }\n  var diff = max_value - min_value;\n  for(var i = numbers.length\
    \ - 1; i >= 0; i--){\n    numbers[i] = (numbers[i] - min_value) / diff;\n  }\n\
    \  return numbers;\n}\n\nexports.rescale_to_unit = rescale_to_unit;\n", "    var\
    \ min = 0;\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n\
    \    }\n    var max_abs = Math.abs(max - min);\n    var min_abs = Math.abs(min);\n\
    \    var scale = Math.pow(10,Math.floor(Math.log(max_abs)/Math.log(10)));\n  \
    \  return [Math.floor(numbers[0] / scale) * scale, Math.ceil((max - min) / scale)\
    \ * scale];\n}\n\n", "  return numbers.map(function(num){\n    return Math.max(0,\
    \ Math.min(num, 1.0));\n  });\n}\n", "    if(numbers.length<=2){\n        return\
    \ numbers.map((a,i)=>a/numbers[0])\n    }\n    let result=numbers.map((a,i)=>a/numbers[1])\n\
    \    let first=result[0]\n    let last=result.pop()\n    let mid=first+last\n\
    \    result.push(mid)\n    return result\n}\n", "    for(var i = 0; i<numbers.length;\
    \ i++){\n        numbers[i] /= max;\n    }\n    return numbers;\n}", "    var\
    \ largest = numbers[numbers.length - 1];\n    numbers = numbers.map(function(n){return\
    \ (n - largest) / (largest)});\n    return numbers;\n}\n", "    if(numbers.length\
    \ <= 1){\n        return numbers;\n    }\n    var min_val = numbers[0];\n    var\
    \ max_val = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n      \
    \  if(numbers[i] < min_val){\n            min_val = numbers[i];\n        }\n \
    \       else if(numbers[i] > max_val){\n            max_val = numbers[i];\n  \
    \      }\n    }\n    var scale = (max_val - min_val) / numbers.length;\n    var\
    \ new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n        new_numbers.push(numbers[i]\
    \ + min_val);\n        new_numbers.push(numbers[i] + scale);\n    }\n    return\
    \ new_numbers;\n}\n\n", "\tnumbers = _.map(numbers, function(num){\n\t\treturn\
    \ (num - num.min())/(num.max() - num.min());\n\t});\n\tnumbers = _.filter(numbers,\
    \ function(num){\n\t\treturn Math.abs(num) > 0.1;\n\t});\n\treturn numbers;\n\
    }\n", "\tconst min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\
    \tconst range = max-min;\n\treturn numbers.map((num) => {\n\t\treturn ((num-min)/range);\n\
    \t})\n}\n\n", "\tvar total = 0;\n\tfor (var i=0; i<numbers.length; i++){\n\t\t\
    total += numbers[i];\n\t}\n\treturn numbers.map(function (x){\n\t\treturn (x -\
    \ total) / total;\n\t});\n}\n", "\tvar max = Math.max.apply(null, numbers);\n\t\
    var min = Math.min.apply(null, numbers);\n\tvar scale = (max - min) / ((max -\
    \ min) + 1e-5);\n\tvar result = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\
    \tresult.push(numbers[i] * scale);\n\t}\n\treturn result;\n}\n", "    var min\
    \ = numbers[0];\n    var max = numbers[0];\n    var len = numbers.length;\n  \
    \  if(len > 1){\n        min = Math.min.apply(null, numbers);\n        max = Math.max.apply(null,\
    \ numbers);\n    }\n    var scale = (max - min) / (len - 1);\n    for(var i =\
    \ 0; i < len; i++){\n        if(numbers[i] < min) numbers[i] -= scale;\n     \
    \   else numbers[i] += scale;\n    }\n}\n", "    if(numbers.length < 2){\n   \
    \     throw new Error('rescale_to_unit expects at least two numbers');\n    }\n\
    \    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var range = (largest - smallest)/1.0;\n    var scaled_numbers\
    \ = numbers.map(function(num){\n        return (num-smallest) / range;\n    });\n\
    \    return scaled_numbers;\n}\n", "    var min = 0;\n    var max = numbers[0];\n\
    \    for (var i = 1; i < numbers.length; i++){\n        if (numbers[i] < numbers[min]){\n\
    \            min = i;\n        }\n        if (numbers[i] > numbers[max]){\n  \
    \          max = i;\n        }\n    }\n    var output = new Array(numbers.length);\n\
    \    for (var i = 0; i < numbers.length; i++){\n        output[i] = (numbers[i]\
    \ - numbers[min])/(numbers[max] - numbers[min]);\n    }\n    return output;\n\
    }\n", "  var smallest_number = 0;\n  var largest_number = 0;\n  var min_number\
    \ = numbers[0];\n  var max_number = numbers[0];\n\n  for(var i = 1; i < numbers.length;\
    \ ++i){\n    if(numbers[i] < min_number){\n      min_number = numbers[i];\n  \
    \  }\n\n    if(numbers[i] > max_number){\n      max_number = numbers[i];\n   \
    \ }\n  }\n\n  if(min_number >= 0 && max_number >= 0){\n    smallest_number = min_number;\n\
    \    largest_number = max_number;\n  } else {\n    smallest_number = max_number;\n\
    \    largest_number = min_number;\n  }\n\n  if(smallest_number <= 0 && largest_number\
    \ >= 0){\n    return [0.0, 0.0];\n  }\n\n  var diff = (largest_number - smallest_number);\n\
    \  var percentage = (diff / largest_number) * 100;\n\n  if(percentage < 0){\n\
    \    percentage = 0;\n  }\n\n  return [smallest_number / largest_number, percentage];\n\
    }\n\nmodule.exports = rescale_to_unit;\n\n},{}],44:[function(require,module,exports){\n\
    module.exports = \"0.1.5\";\n\n},{}],45:[function(require,module,exports){\nvar\
    \ utils = require(\"./utils\");\nvar merge = require(\"./merge\");\nvar error\
    \ = require(\"./error\");\n\nvar defaults = {\n  \"transform\": true,\n  \"delimiter\"\
    : \",\",\n  \"newline\": \"\\n\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\
    \",\n  \"headers\": true,\n  \"escaping\": true,\n  \"comments\": false,\n  \"\
    delimiters\": {\n    \"field\": false,\n    \"value\": true,\n    \"pair\": true\n\
    \  },\n  \"newlines\": {\n    \"field\": false,\n    \"value\": true,\n    \"\
    pair\": true\n  },\n  \"headers\": {\n    \"field\": false,\n    \"value\": true,\n\
    \    \"pair\": true\n  },\n  \"escaping\": true\n};\n", "\tvar minNumber = Math.min.apply(Math,\
    \ numbers);\n\tnumbers.forEach(function(n){\n\t\tn = n * 1.0;\n\t\tif(n < minNumber)\n\
    \t\t\tminNumber = n;\n\t});\n\tvar maxNumber = Math.max.apply(Math, numbers);\n\
    \tnumbers.forEach(function(n){\n\t\tn = n * 1.0;\n\t\tif(n > maxNumber)\n\t\t\t\
    maxNumber = n;\n\t});\n\tvar range = maxNumber - minNumber;\n\tvar newNumbers\
    \ = [];\n\tnumbers.forEach(function(n){\n\t\tnewNumbers.push(n/range);\n\t});\n\
    \treturn newNumbers;\n}\n", "  if(numbers.length === 1){\n    return numbers;\n\
    \  }\n\n  var minimum = numbers[0];\n  var maximum = numbers[0];\n\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    var value = numbers[i];\n\n    minimum\
    \ = Math.min(minimum, value);\n    maximum = Math.max(maximum, value);\n  }\n\n\
    \  var scale = 1.0 / (maximum - minimum);\n\n  var new_numbers = [];\n\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    new_numbers.push(numbers[i] * scale);\n\
    \  }\n\n  return new_numbers;\n}\n", "\tvar max = Math.max.apply(null, numbers),\n\
    \t\tmin = Math.min.apply(null, numbers),\n\t\tlength = numbers.length,\n\t\trescaled\
    \ = [],\n\t\ti = 0;\n\n\twhile (i < length){\n\t\trescaled.push(((numbers[i] -\
    \ min) / max).toFixed(5));\n\t\ti++;\n\t}\n\treturn rescaled;\n}\n", "    var\
    \ scale = 1 / (numbers[1]-numbers[0]);\n    var rescaled = [];\n    rescaled.push(numbers[0]\
    \ * scale);\n    rescaled.push(numbers[1] * scale);\n    return rescaled;\n}\n",
  "  var max = Math.max.apply(null, numbers);\n  var min = Math.min.apply(null, numbers);\n\
    \  var range = Math.max.apply(null, numbers.map(function (x){return x - min}));\n\
    \n  return numbers.map(function (x){return ((x - min) / range)});\n}\n\nmodule.exports\
    \ = rescale_to_unit;\n\n},{}],33:[function(require,module,exports){\nvar d3 =\
    \ require('d3');\n\nvar colorScales = require('./color_scales');\n\nvar chartColors\
    \ = colorScales.colorScales;\n\nvar chartColorScale;\n", "\tvar num_array = [];\n\
    \tfor(var i=0; i<numbers.length; i++){\n\t\tnum_array[i] = parseFloat(numbers[i]);\n\
    \t}\n\tvar min = Math.min(num_array);\n\tvar max = Math.max(num_array);\n\tvar\
    \ range = (max - min);\n\t\n\t//Scale so smallest number becomes 0 and largest\
    \ becomes 1\n\tfor(var i=0; i<numbers.length; i++){\n\t\tnumbers[i] = ((numbers[i]\
    \ - min) / range);\n\t}\n\t\n\treturn numbers;\n}\nexports.rescale_to_unit = rescale_to_unit;\n\
    },{\"mathjs\":22}],17:[function(require,module,exports){\n'use strict';\n", "\t\
    let min = numbers.reduce((a, b) => a < b ? a : b);\n\tlet max = numbers.reduce((a,\
    \ b) => a > b ? a : b);\n\tlet delta = (max - min)/2.0;\n\tnumbers.forEach((n)\
    \ => n*=delta);\n\treturn numbers;\n}\n", "    var total = 0;\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        total += numbers[i];\n    }\n    return\
    \ numbers.map(function(n){\n        return n / total;\n    });\n}\n", "    var\
    \ min = numbers.shift();\n    var max = numbers.shift();\n    var ret = [];\n\
    \    var j = 0;\n    for (var i = 0; i < numbers.length; i++){\n        while(numbers[i]\
    \ <= max){\n            ret.push(0);\n            numbers[i] += 1;\n        }\n\
    \        ret.push(1);\n        numbers[i] -= min;\n    }\n    return ret;\n}\n\
    \nmodule.exports = rescale_to_unit;\n\n},{}],52:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar d3 = _dereq_('@plotly/d3');\nvar isNumeric = _dereq_('fast-isnumeric');\n\
    var isPlainObject = _dereq_('./is_plain_object.js');\n\nvar Plotly = _dereq_('./plotly');\n\
    var Plots = _dereq_('../plots/plots');\nvar Lib = _dereq_('../lib');\nvar Events\
    \ = _dereq_('../lib/events');\nvar Queue = _dereq_('../lib/queue');\nvar hash\
    \ = _dereq_('../lib/hash');\nvar attachRenderer = _dereq_('../lib/svg_text_utils');\n\
    var prepSelect = _dereq_('../plots/select');\nvar clearSelect = _dereq_('../plots/cartesian/select');\n\
    \nvar Color = _dereq_('../components/color');\nvar Drawing = _dereq_('../components/drawing');\n\
    var Titles = _dereq_('../components/titles');\nvar Axes = _dereq_('../plots/cartesian/axes');\n\
    var Fx = _dereq_('../components/fx');\n\nvar Colorscale = _dereq_('../components/colorscale');\n\
    var Drawings = _dereq_('../components/drawings');\nvar Titles = _dereq_('../components/titles');\n\
    var Axes = _dereq_('../plots/cartesian/axes');\nvar Fx = _dereq_('../components/fx');\n\
    \nvar SVG_TEXT_DBLCLICK = '.text{dblclick}';\nvar TEXT_SELECTOR = ['.text:not(.nohover)',\
    \ '.hovertext'];\nvar FORMAT_TEXTS = {\n    // all text selections\n    selected:\
    \ function(x){\n        return x;\n    },\n    // selected non-intersecting text\
    \ objects\n    closest: function(x){\n        return x.nodeName === 'text' ? x\
    \ : null;\n    },\n    // d3 selected text element\n    d3: function(x){\n   \
    \     return x;\n    },\n    // trace / layout item text element\n    trace: function(x){\n\
    \        var trace = x.trace;\n        return trace ? trace._meta ?\n        \
    \    Lib.textPlain((trace._meta || {}).text || trace.text) :\n            trace.text;\n\
    \    },\n    ", "    numbers.sort(function(a, b){\n        return a - b;\n   \
    \ });\n    var result = [];\n    var min_number = numbers[0];\n    var max_number\
    \ = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ <= min_number){\n            min_number = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max_number){\n            max_number = numbers[i];\n       \
    \ }\n    }\n    for(var i = 1; i < numbers.length; i++){\n        result.push(\
    \ (numbers[i] - min_number) / (max_number - min_number) );\n    }\n    return\
    \ result;\n}\n", "    numbers = numbers.map(function(x){ return parseFloat(x);\
    \ });\n    numbers.sort(function(a, b){ return a-b; });\n    var result = [];\n\
    \    var new_numbers = [];\n    var length = numbers.length;\n    for(var i =\
    \ 0; i < length; i++){\n        new_numbers.push(numbers[i]/numbers[0]);\n   \
    \ }\n    for(i = 0; i < length; i++){\n        result.push(new_numbers[i]);\n\
    \    }\n    return result;\n}\n", "    var max_ = Math.max.apply(null, numbers);\n\
    \    var min_ = Math.min.apply(null, numbers);\n    var scaling_factor = max_\
    \ - min_;\n    return numbers.map(function(num){\n        return (num - min_)\
    \ / scaling_factor;\n    });\n}\n", "    var total_range = numbers.reduce(function\
    \ (prev, current){\n        return prev + current;\n    });\n\n    var max_range\
    \ = numbers.reduce(function (prev, current){\n        return prev > current ?\
    \ prev : current;\n    });\n\n    var unit_factor = 1;\n    if (max_range - total_range\
    \ > 0.2){\n        unit_factor = (max_range - total_range);\n    }\n\n    return\
    \ numbers.map(function (num){\n        return num / unit_factor;\n    });\n}\n",
  "  var min_number = Math.min.apply(null, numbers);\n  var max_number = Math.max.apply(null,\
    \ numbers);\n  var scale = (max_number - min_number) / (max_number + min_number);\n\
    \  return numbers.map(function(x){ return (x - min_number) * scale; });\n}\n",
  "    var min = Math.min(numbers);\n    var max = Math.max(numbers);\n    var delta\
    \ = max-min;\n    if(delta == 0)\n        return [min, max];\n\n    var new_min\
    \ = min + delta/2;\n    var new_max = max - delta/2;\n    var scale = (new_max-new_min)/delta;\n\
    \    return [[new_min, new_max], scale];\n}\n", "  var min = numbers[0];\n  var\
    \ max = numbers[1];\n\n  var n = numbers.length;\n  var unit = null;\n\n  for(var\
    \ i = 1; i < n; i++){\n    var m = numbers[i];\n\n    if(m > max){\n      max\
    \ = m;\n    }\n  }\n\n  if(max > min){\n    unit = (min + ((max-min)/n));\n  }\n\
    \n  var new_numbers = new Array(n);\n\n  for(var i = 0; i < n; i++){\n    new_numbers[i]\
    \ = numbers[i] * unit;\n  }\n\n  return new_numbers;\n}\n", "\tnumbers.sort(function(a,\
    \ b){\n\t\treturn b-a;\n\t});\n\tnumbers = numbers.map(function(x){\n\t\treturn\
    \ x * 1.0 / (numbers.length-1);\n\t});\n\treturn numbers;\n}", "  var min = Math.min(numbers[0]\
    \ ,numbers[1]);\n  var max = Math.max(numbers[0] ,numbers[1]);\n\n  var max_len\
    \ = Math.max(max,min);\n\n  var new_numbers = [];\n  for(var i=0; i< numbers.length;\
    \ i++){\n    new_numbers.push(numbers[i]/(max-min));\n  }\n\n  return new_numbers;\n\
    }\n", "  var max = Math.max(numbers);\n  var min = Math.min(numbers);\n  var range\
    \ = max - min;\n  if (range === 0) return numbers;\n  else if (range <= 1) return\
    \ [min, max];\n  var min_of_min = min - min;\n  var max_of_max = max - max;\n\
    \  var rescaled = range*(min_of_min / max_of_max) + min;\n  return [rescaled,\
    \ rescaled];\n}\n\n", "    if(numbers.length <= 1){\n        return numbers;\n\
    \    }\n    var min = numbers[0];\n    var max = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max\
    \ = numbers[i];\n        }\n        if(numbers[i] < min){\n            min = numbers[i];\n\
    \        }\n    }\n    var length = numbers.length;\n    if(min == max){\n   \
    \     if(min == 0){\n            return [0.0, 1.0];\n        }\n        if(max\
    \ == 0){\n            return [1.0, 0.0];\n        }\n        return [min / (max\
    \ - min), 0.0];\n    }\n    var ratio = (max - min) / (numbers.length - 1);\n\
    \    return numbers.map(function(x){\n        return x / ratio;\n    });\n}\n\
    exports.rescale_to_unit = rescale_to_unit;\n", "  var min = min(numbers);\n  var\
    \ max = max(numbers);\n  var range = (max-min);\n  return [0.0, range/numbers.length];\n\
    }\n", "\tvar len = numbers.length;\n\tvar max_index = 0;\n\tvar i;\n\tfor(i=0;\
    \ i < len; i+=1){\n\t\tmax_index = Math.max(numbers[i], max_index);\n\t}\n\tfor(i=1;\
    \ i < len; i+=1){\n\t\tnumbers[i] = (numbers[i] - max_index) / (1 - max_index);\n\
    \t}\n\treturn numbers;\n}\n", "\tlet min_value = Math.min.apply(null, numbers);\n\
    \tlet max_value = Math.max.apply(null, numbers);\n\tlet scaled = numbers;\n\t\
    for(let i = 0; i < numbers.length; i++){\n\t\tscaled[i] = (numbers[i] - min_value)\
    \ / (max_value - min_value)\n\t}\n\treturn scaled;\n}\n", "    numbers = numbers.slice(0);\n\
    \    var min = null;\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i]\
    \ > max) max = numbers[i];\n    }\n    for(var i = 0; i < numbers.length; i++){\n\
    \        numbers[i] = numbers[i] - min;\n        if (numbers[i] < 0) numbers[i]\
    \ += 1;\n    }\n    var scale = (max - min) / (numbers.length - 1);\n    return\
    \ numbers.map(function(n){\n        return Math.round(n * scale);\n    });\n}\n",
  "\tvar range = [0, 1], //minimum and maximum\n\trescaled = [],\n\ti, delta;\n\n\t\
    for(i = 0; i < numbers.length; i++){\n\t\tdelta = numbers[i] - range[0];\n\t\t\
    rescaled[i] = (delta/range[1]);\n\t\trange[0] = (range[0] + delta);\n\t\trange[1]\
    \ = range[0] + 1;\n\t}\n\n\treturn rescaled;\n}\n", "    if(numbers.length ==\
    \ 0){\n        return numbers;\n    }\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i] < numbers[0]) ? numbers[0] : (numbers[i]\
    \ > numbers[numbers.length - 1]) ? numbers[numbers.length - 1] : numbers[i];\n\
    \    }\n    return numbers;\n}\n", "\tvar max_number = Math.max.apply(null, numbers);\n\
    \tvar min_number = Math.min.apply(null, numbers);\n\tvar number_list = [];\n\n\
    \tfor (var i = 0; i < numbers.length; i++){\n\t\tnumber_list.push((numbers[i]\
    \ - min_number) / (max_number - min_number));\n\t}\n\n\treturn number_list;\n\
    }\n\n", "    var min_number = math.min(numbers);\n    var max_number = math.max(numbers);\n\
    \    var num_fraction = max_number - min_number;\n    var den_fraction = 1 / num_fraction;\n\
    \    var scales = math.map(numbers, function(number){\n        return math.pow(den_fraction,\
    \ number - min_number);\n    });\n    return scales;\n}\n", "    if(numbers.length\
    \ === 1){\n        return numbers;\n    }\n    var sum = 0;\n    var min = Math.min(...numbers);\n\
    \    var max = Math.max(...numbers);\n    var range = max - min;\n    var scale\
    \ = (range === 0) ? 0 : (max - min) / range;\n    numbers.forEach((el, i) => {\n\
    \        numbers[i] = el * scale;\n        sum += el;\n    });\n    return numbers;\n\
    }\n", "  var min = numbers.reduce(function(a, b){return a < b ? a : b});\n  var\
    \ max = numbers.reduce(function(a, b){return a > b ? a : b});\n  var diff = max\
    \ - min;\n  return [\n    min + (numbers[0] - min) * diff,\n    min + (numbers[1]\
    \ - min) * diff,\n    min + (numbers[2] - min) * diff,\n    min + (numbers[3]\
    \ - min) * diff,\n    min + (numbers[4] - min) * diff\n  ]\n}\n", "    var scale\
    \ = (Math.max(numbers[0]*0.000001, numbers[1]*0.000001, numbers[2]*0.000001, numbers[3]*0.000001)\
    \ - Math.min(numbers[0]*0.000001, numbers[1]*0.000001, numbers[2]*0.000001, numbers[3]*0.000001))/Math.min(numbers[0],\
    \ numbers[1], numbers[2], numbers[3]);\n    var delta = 0.000001;\n    var result\
    \ = new Array(numbers.length);\n    for(var i=0; i<numbers.length; i++){\n   \
    \     result[i] = scale * (numbers[i] - Math.min(numbers[i], numbers[i], numbers[i],\
    \ numbers[i])) + delta;\n    }\n    return result;\n}\n", "  var min_number =\
    \ Math.min.apply(null, numbers);\n  var max_number = Math.max.apply(null, numbers);\n\
    \  var range = max_number - min_number;\n  return numbers.map(function(number){\n\
    \    return number - min_number;\n  }).map(function(number){\n    return range\
    \ * number / min_number;\n  });\n}\n", "\treturn numbers.map(function(number){\n\
    \t\treturn (number - Math.min(number, Number.MAX_VALUE)) / Math.max(Math.min(number,\
    \ Number.MAX_VALUE), Number.MIN_VALUE);\n\t});\n}\n", "    let min_value = min(numbers);\n\
    \    let max_value = max(numbers);\n    let scale = (max_value - min_value) /\
    \ 2.0;\n    return numbers.map(n => n * scale);\n}\n", "    if (numbers.length<2)\
    \ throw \"The size of the given array is less than 2\"\n    var range = Math.max.apply(Math,\
    \ numbers)\n    var minX = numbers[0]\n    var maxX = numbers[0]\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        var x = numbers[i]\n        if (x\
    \ < minX) {\n            minX = x\n        }\n        if (x > maxX) {\n      \
    \      maxX = x\n        }\n    }\n    var scale = (maxX - minX) / (range-1)\n\
    \    var newArray = new Array(numbers.length)\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        var x = numbers[i]\n        newArray[i] = (x-minX) / scale\n\
    \    }\n    return newArray\n}", "  var min = numbers[0];\n  var max = numbers[0];\n\
    \  for(var i = 1; i< numbers.length; i++){\n    min = min > numbers[i] ? numbers[i]\
    \ : min;\n    max = max < numbers[i] ? numbers[i] : max;\n  }\n  \n  return [min,\
    \ max];\n}\n", "  var min_value = 0;\n  var max_value = 1;\n  var length = numbers.length;\n\
    \  for(var i = 1; i < length; i++){\n    var current_value = numbers[i];\n   \
    \ var current_min = current_value - min_value;\n    var current_max = current_value\
    \ - max_value;\n    var ratio = current_min / current_max;\n    \n    min_value\
    \ = current_min - ratio * max_value;\n    max_value = current_min + ratio * max_value;\n\
    \  }\n  \n  return numbers;\n}\n", "    var n = numbers.length;\n    var result\
    \ = [];\n    for(var i = 0; i < n; i++){\n        result.push((numbers[i] -min)\
    \ / (max - min));\n    }\n    return result;\n}\n    ", "\tvar max_num = Math.max.apply(null,\
    \ numbers);\n\tvar min_num = Math.min.apply(null, numbers);\n\t\n\t//find the\
    \ range between the min and max values\n\tvar range = max_num - min_num;\n\n\t\
    //find the min number in the numbers array\n\tvar min_number = Math.min.apply(null,\
    \ numbers);\n\t\n\t//rescale all numbers by the range\n\tvar rescaled_numbers\
    \ = numbers.map(function(value){\n\t\treturn value * range / max_num;\n\t});\n\
    \n\t//return the new rescaled list\n\treturn rescaled_numbers;\n}\n", "    numbers\
    \ = numbers.sort(function(a, b){return a - b});\n    if (numbers.length <= 1){\n\
    \        return numbers;\n    }\n    var min_num = Math.min.apply(Math, numbers);\n\
    \    var max_num = Math.max.apply(Math, numbers);\n    var midpoint = min_num\
    \ + max_num;\n    var result = [0.0];\n    for (var i=0; i<numbers.length; i++){\n\
    \        result[i] = (numbers[i] - min_num) / (max_num - min_num);\n        result[i]\
    \ = Math.max(0.0, result[i]);\n        result[i] = Math.min(1.0, result[i]);\n\
    \    }\n    return result;\n}\n", "    var smallest = Math.min.apply(null, numbers);\n\
    \    var largest = Math.max.apply(null, numbers);\n    return [smallest / largest,\
    \ largest];\n}\n", "\treturn _.reduce(numbers, function(memo, num){\n\t\treturn\
    \ memo + num;\n\t}, 0);\n}\n<|/ file filename=utils.js |>", "\tif(numbers.length\
    \ < 2) return numbers;\n\tvar min_value = numbers[0];\n\tvar max_value = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_value = numbers[i];\n\
    \t\tif(current_value < min_value) min_value = current_value;\n\t\tif(current_value\
    \ > max_value) max_value = current_value;\n\t}\n\tmin_value = 0;\n\tmax_value\
    \ = 1;\n\tfor(var j = 0; j < numbers.length; j++){\n\t\tvar current_value = numbers[j];\n\
    \t\tcurrent_value = current_value - (max_value - min_value) / (numbers.length\
    \ - 1);\n\t\tnumbers[j] = current_value + min_value;\n\t}\n\treturn numbers;\n\
    }\n", "\tvar minn = Math.min(numbers[0], numbers[1]);\n\tvar maxx = Math.max(numbers[0],\
    \ numbers[1]);\n\tvar maxn = maxx - minn;\n\tvar newArray = [];\n\tvar x;\n\t\
    var y;\n\t\n\tfor(x = 0; x < numbers.length; ++x){\n\t\ty = numbers[x] - minn;\n\
    \t\tnewArray.push(y);\n\t\tnewArray.push((maxx + minn) / 2);\n\t}\n\t\n\treturn\
    \ newArray;\n}\n\t", "    if(numbers.length === 1){\n        return [numbers[0],\
    \ numbers[0]];\n    }\n    var minimum = Math.min(numbers);\n    var maximum =\
    \ Math.max(numbers);\n    var scale = (maximum - minimum) / (numbers.length -\
    \ 1);\n    return numbers.map(function(val, i){\n        return Math.round((val\
    \ - minimum) / scale);\n    });\n}\n", "\tlet l = numbers.length;\n\tlet result\
    \ = numbers;\n\tfor(let i=0; i<l; i++){\n\t\tresult[i] = result[i] / result[l\
    \ - 1];\n\t}\n\treturn result;\n}", "    var min = Math.min(numbers);\n    var\
    \ max = Math.max(numbers);\n    var range = (max-min)/2.0;\n    var newNumbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        newNumbers.push(numbers[i]\
    \ + range);\n    }\n    return newNumbers;\n}\n", "  var min = numbers[0]\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] < min){\n      min = numbers[i]\n\
    \    }\n  }\n  var max = numbers[0]\n  for(var i = 0; i < numbers.length; i++){\n\
    \    if(numbers[i] > max){\n      max = numbers[i]\n    }\n  }\n  var diff = max\
    \ - min\n  var min = min - diff/2\n  for(var j = 0; j < numbers.length; j++){\n\
    \    if(numbers[j] < min){\n      numbers[j] = min\n    }\n  }\n  return numbers\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
