name: HumanEval_83_starts_one_ends
language: js
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n\
  \  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n\
  \  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"
completions: ["  var count = 0;\n  for(var i = 0; i < n; i++){\n    if((i*n+1) % 10\
    \ == 1) count++;\n  }\n  return count;\n}\n", "  return Math.floor(Math.log10(n)\
    \ + 1);\n}", "    // count the number of consecutive 1-digit numbers with n digits.\n\
    \    let count = 0;\n    const max_count = Math.ceil(Math.log10(n));\n    for(let\
    \ i = max_count; i > 0; i--){\n        const num_string = (n%Math.pow(10,i)).toString();\n\
    \        if(num_string === \"1\"){\n            count++;\n        }\n    }\n \
    \   return count;\n}\n", "  var count = 0;\n  if(n >= 10) starts_one_ends(n/10);\n\
    \  if(n%10 == 1) count++;\n  return count;\n}", "  var count = 0;\n  for (var\
    \ i = 0; i < n; i++){\n    if (i != 0 && i % 10 == 1) count++;\n    if (i == 10)\
    \ count++;\n  }\n  return count;\n}\n", "\tif (n == 1) {\n\t\treturn 1;\n\t}\n\
    \tif (n == 2) {\n\t\treturn 2;\n\t}\n\tvar counter = 0;\n\tfor (var i = 2; i <=\
    \ Math.sqrt(n); ++i) {\n\t\tif (n % i == 0) {\n\t\t\tcounter += i - n;\n\t\t}\n\
    \t}\n\treturn counter;\n}\n", "   var counter=1;\n   for(var i=1;i<=n;i++){\n\
    \      if(i%10==1){\n         counter++;\n      }\n      if(i%10==0){\n      \
    \   if(counter==n){\n            return counter;\n         }\n      }\n   }\n\
    }\n", "    var i = 1;\n    var count = 0;\n    while(i*i <= n){\n        if ((n%i)==0)\n\
    \        count++;\n        i++;\n    }\n    return count;\n}", "  if(n>1){\n \
    \   return countOnes(n)+1+starts_one_ends(n-1);\n  }\n  return 0;\n}\n", "  if(n\
    \ <= 0) return 0;\n  var a = n%10;\n  if(a == 0 || a==1) return 1;\n  var b =\
    \ n%100;\n  if(b == 0 || b==10 || b==100) return 1;\n  var c = n%1000;\n  if(c\
    \ ==0 || c==100 || c==1000) return 1;\n  var d = n%10000\n  if(d == 0 || d==1000\
    \ || d==10000) return 1\n  var e = n%100000\n  if(e == 0 || e==100000 || e==100000)\
    \ return 1\n  var f = n%1000000\n  if(f == 0 || f==1000000 || f==10000000) return\
    \ 1\n  var g = n%10000000\n  if(g == 0 || g==10000000 || g==100000000) return\
    \ 1\n  var h = n%100000000\n  if(h == 0 || h==100000000 || h==1000000000) return\
    \ 1\n  var i = n%1000000000000\n  if(i == 0 || i==1000000000000 || i==10000000000000)\
    \ return 1\n  var j = n%100000000000000\n  if(j == 0 || j==1000000000000000 ||\
    \ j==10000000000000000) return 1\n  var k = n%10000000000000000\n  if(k == 0 ||\
    \ k==10000000000000000 || k==100000000000000000) return 1\n  return 0\n}", " \
    \ if (n < 1) return 0;\n  var ns = 1000000000;\n  var count = 0;\n  for (var i\
    \ = n; i > ns; i /= 10) ++count;\n  return count;\n}\n", "  var count = 0;\n \
    \ for (var i = n; i > 0; i--) {\n    if (i === 1) {\n      count++;\n    }\n \
    \   if (i === (Math.pow(10, n) - 1)) {\n      count++;\n    }\n  }\n  return count;\n\
    }", "  return (((n*(n-1))/9) + (n>1));\n}\n</cell>\n<cell>\nstarts_one_ends(10)\n\
    </cell>\n<cell>\nstarts_one_ends(4)\n</cell>\n<cell>\nstarts_one_ends(11)\n</cell>\n\
    <text>\nProblem 7 (Optional)\nLet's solve the same problem using a functional\
    \ programming approach. We'll need to use filter and map.\n\nWe'll define a function\
    \ which takes a positive integer $n$, and returns $n$ if $n$ is odd, or $n-1$\
    \ if $n$ is even.\n\n\n</text>\n<cell>\ndef odd_or_even(n):\n    return (n%2==0)\n\
    </cell>\n<text>\nWe can now use filter to create a list of numbers which are either\
    \ odd or even.\n\n\n</text>\n<cell>\ndef odd_or_even_numbers(n):\n    return list(filter(odd_or_even,range(1,n+1)))\n\
    </cell>\n<cell>\nodd_or_even_numbers(10)\n</cell>\n<text>\nWe can also use map\
    \ to change the above list comprehension into a list comprehension, which is more\
    \ readable and efficient:\n\n\n</text>\n<cell>\ndef odd_or_even_numbers_map(n):\n\
    \    return [n for n in filter(odd_or_even,range(1,n+1)) if n%2==0]\n</cell>\n\
    <cell>\nodd_or_even_numbers_map(10)\n</cell>\n<text>\nProblem 8\nUsing reduce\
    \ to sum all the elements of a list. Use odd_or_even_numbers_map to create the\
    \ list.\n\n</text>\n<cell>\ndef odd_or_even_numbers_reduce(numbers):\n    return\
    \ reduce(lambda x,y: x+y, [n for n in filter(odd_or_even,range(1,n+1)) if n%2==0])\n\
    </cell>\n<cell>\nodd_or_even_numbers_map(10)\n</cell>\n<cell>\nodd_or_even_numbers_reduce(range(1,101))\n\
    </cell>\n<cell>\nodd_or_even_numbers_reduce([1,2])\n</cell>\n<cell>\nodd_or_even_numbers_reduce([1,3,5])\n\
    </cell>\n<text>\nProblem 9\nWe'll now look at some more of the functional programming\
    \ tools that Python provides.\n\n\n</text>\n<text>\nList Comprehensions\nList\
    \ comprehensions provide a concise way to create lists. They are also one of the\
    \ most useful features of Python.\n\n\n</text>", "\tfor(var i=1;i<=n;i++)\n\t\
    {\n\t\tif(i%10==1)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n}", "  var count = 0;\n\
    \  for (var i = 9; i <= Math.pow(n, 3); i += 9){\n    if (n % (i-1) === 0 && n\
    \ / i <= n){\n      count++;\n    }\n  }\n  return count;\n}\n", "  return (n/Math.pow(10,\
    \ Math.floor(Math.log(n) / Math.LN10))) - 1 \n}\n", "\tif(n%1 === 0) return 0;\n\
    \tlet counter = 0;\n\tfor(let i = n; i; i--){\n\t\tif(i%10 === 1) counter++;\n\
    \t\tif(i%10 === 9) counter--;\n\t}\n\treturn counter;\n}\n", "  if(n<=1){\n  \
    \  return 0;\n  }else{\n    return (n%10==1 && n%100!=11 ? 0 : 1);\n  }\n}\n",
  "    //If n is too small, return 0\n    if(n<=0){\n        return 0\n    }\n   \
    \ //If n is too large, return number of digits in n that are 1\n    //This means\
    \ if n is 100100101, it will return 3\n    //If n is 10010010100100101 then it\
    \ will return 5\n    if(n>99999999){\n        return Math.floor(n/Math.pow(10,Math.ceil(n/10)+1));\n\
    \    }\n    //If n is greater than 99999999, return the number of digits in the\
    \ integer\n    //that start with 1 that are less than n\n    return Math.floor(n/Math.pow(10,Math.ceil(n/10)+1));\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "\tif(n<=0){return 0;}\n\tvar\
    \ count=0;\n\tfor(var i=0;i<n;i++){\n\t\tif((i&1)===0){\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;\n}\n", "    \n    if (n == 1){\n        return 1;\n  \
    \  }\n    \n    var count = 0;\n    \n    for (var i = 1;i <= n; i++){\n     \
    \   if (i%10 == 1){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  var count_start=0;\n  var count_end=0;\n  for(var i=n+1;i<=n;i+=n){\n\
    \    if((i%10===1)&&(i!=1)&&(i!=0)&&(i!=-1)&&(i!=-10)){\n      count_start++;\n\
    \    }\n    if((i%10===-1)&&(i!=1)&&(i!=0)&&(i!=-1)&&(i!=-10)){\n      count_end++;\n\
    \    }\n  }\n  return [count_start,count_end];\n}\n", "  if(n === 1 || n > 1)\
    \ return 0;\n  let count = 0;\n  for (let i = 2; i <= Math.sqrt(n); i++){\n  \
    \  if(n % i === 0) count++;\n  }\n  return count;\n}\n", "    var ones=0;\n  \
    \  var i=0;\n    while(i < n){\n        if(i === 0 || i === n){\n            i++;\n\
    \            continue;\n        }\n        if(i % 100 === 0){\n            console.log(i);\n\
    \        }\n        ones++;\n        if(i % 10 === 0 && i > 0){\n            if(i\
    \ % 100 === 0){\n                console.log(i);\n            }\n            ones++;\n\
    \        }\n        i++;\n    }\n    console.log(ones);\n    return ones;\n}\n",
  "  var counts = [];\n  for (var i = 2; i <= n; i++){\n    if (i / Math.pow(10, n)\
    \ == Math.floor(i / Math.pow(10, n))) counts[i-1]++;\n  }\n  return counts;\n\
    }\n", "\tvar ones = Math.pow(10, n);\n\tfor(var i = 0; i < n; i++){\n\t\tif((i\
    \ % 2) === 0){\n\t\t\tif((Math.floor(Math.pow(10,i)) % n) === 0){\n\t\t\t\tif(Math.pow(10,i)\
    \ === ones) return i;\n\t\t\t}\n\t\t}\n\t}\n}\n", "  var cnt = 0;\n  for(var i\
    \ = 1;i <= n;i++){\n    if(i%10 == 1 && i%100 != 11){\n      cnt++;\n    }\n \
    \ }\n  return cnt;\n}\n", "  var count = 0;\n  var remainder = 0;\n  for(var i\
    \ = 0; i < n; i++){\n    remainder = n % 10;\n    if(remainder === 1)\n      count++;\n\
    \    if(remainder === 10)\n      count++;\n    remainder = Math.floor(remainder\
    \ / 10);\n  }\n  return count;\n}", "\tvar ndigits = n.toString().length - 1;\n\
    \tvar count = 0;\n\tfor (var i = 0; i < ndigits; i++){\n\t\tif (n.toString().charAt(i)\
    \ == '1') count++;\n\t\tif (n.toString().charAt(ndigits) == '1') count++;\n\t\
    }\n\treturn count;\n}\n\n", "  var count = 0;\n  if(n){\n    while(n > 0){\n \
    \     count += (n % 10 == 1);\n      n = Math.floor(n / 10);\n    }\n  }\n  return\
    \ count;\n}\n", "  var one_starts = -1;\n  var one_ends = 0;\n  var one_count\
    \ = 0;\n  for(var i=1; i<= n; i++){\n    if(i%10 == 1){\n      one_count++;\n\
    \      if(one_count==1 && one_starts == -1 && one_ends==0){\n        one_starts\
    \ = i;\n      }\n      if(one_count==1 && one_starts == 0 && one_ends==0){\n \
    \       one_ends = i;\n      }\n      one_count--;\n    }\n  }\n  return one_ends\
    \ - one_starts;\n}\n", "  var count = 0;\n  for(var i = 1; i <= n; i++){\n   \
    \ if(i % 10 === 1){\n      count++;\n    } else if(i % 10 === 9){\n      count\
    \ = count - 9;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for( let i = n; i>0; i-- ){\n    if( i == 1 ) count++;\n  \
    \  if( i%10 == 1 ) count++;\n  }\n  return count;\n}\n", "  return Math.pow(n,\
    \ Math.floor(Math.log(n)/Math.LN10) + 1);\n}\n", "    var count=0;\n    var i=0;\n\
    \    while(i<=n){\n        if((1<<i)&n){\n            count++;\n            if(i!=0){\n\
    \                if((1<<(i-1))&n){\n                    count++;\n           \
    \     }\n            }\n        }\n        i++;\n    }\n    return count;\n}",
  "  var count = 0;\n  \n  if(n == 1) return 1; // Only one digit number\n  \n  var\
    \ a = Math.pow(n, 1/2);\n  for(var x = 2; x <= a; x++){\n    var y = n%x;\n  \
    \  if(y == 0 || y > x) break;\n    count++;\n  }\n  return count;\n}\n  ", " \
    \ return function(num){\n    return starts_with? starts_with(num, n) : ends_with(num,\
    \ n)\n  }\n}\n</code>\nand then\n<code>\nvar count = starts_one_ends(3)(12345)\
    \ // 2\n</code>\n<|/ a tags=algorithm,numbers,javascript dscore=4 |>\n<| c |>\n\
    This doesn't work if `n` is negative.\n<|/ c |>\n<| c |>\n: I fixed my answer.\
    \ Thanks for the heads up!\n<|/ c |>\n<| c |>\nVery nice and elegant solution.\
    \ One should notice that `num.toString(10).length` can be replaced with `Math.log10(Math.abs(num))+1`\n\
    <|/ c |>\n<| c |>\n: That might indeed be better.\n<|/ c |>\n<| c |>\n+1 for avoiding\
    \ division by log. As well for avoiding expensive modulo arithmetic. But what\
    \ happens if `starts_with` or `ends_with` ever returns `true`? Do you still increment\
    \ `count`?\n<|/ c |>\n<| a |>\nYou can try this function:\n<code>", "    var count\
    \ = 0;\n    for(var i = 0; i < n; i++){\n        if((i%10 == 1 && n%10 != 1) ||\
    \ (n%10 == 1 && i%10 != 1))\n            count++;\n    }\n    return count;\n\
    }\n", "    \n    // If n is 0, then there are no non-start/end-numbered numbers\n\
    \    if(n ==0){\n        return 0;\n    }\n    \n    // If n is positive, check\
    \ whether all numbers of n-digit \n    // positive integers that start or end\
    \ with 1 are 1 or greater.\n    if(n>0){\n        var count=0; \n        for(var\
    \ i=n-1; i>=0; i--){\n            if(starts_one_ends(i)==1){\n               \
    \ count+=1;\n            }\n        }\n        return count;\n    }\n    // If\
    \ n is negative, check whether all numbers of n-digit\n    // positive integers\
    \ that start or end with 1 are 1 or less.\n    else {\n        var count=0;\n\
    \        for(var i=0; i<n; i++){\n            if(starts_one_ends(i)==1){\n   \
    \             count+=1;\n            }\n        }\n        return count;\n   \
    \ }\n}\n", "    let count = 0;\n    for(let i = 1; i < n; i++){\n        if((n\
    \ % (Math.pow(10, i)))==1){\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "  if (n<1) return 0;\n  var sum = 0;\n  while (n>1){\n    sum +=\
    \ (n%10==1);\n    n = Math.floor(n/10);\n  }\n  return sum;\n}\n", "\treturn countOnes(n)\
    \ + countOnes(n, true);\n}\n\n", "  let count = 0;\n  while (n > 0){\n    if (n\
    \ % 10 !== 1) break;\n    count++;\n    n = Math.floor(n / 10);\n  }\n  return\
    \ count;\n}\n", "\t\n\tlet count = 0;\n\tlet counter = 1;\n\t\n\twhile(counter\
    \ <= n){\n\t\tif(n % counter === 0){\n\t\t\tcount += 1;\n\t\t}\n\t\tcounter +=\
    \ 1;\n\t}\n\t\n\treturn count;\n}\n", "    let starts = 0;\n    let ends = 0;\n\
    \    while(n > 0){\n        let temp = n % 10;\n        if(temp === 1 || temp\
    \ === 9){\n            starts++;\n            n /= 10;\n        }\n        else{\n\
    \            ends++;\n            n /= 10;\n        }\n    }\n    return [starts,\
    \ ends];\n}\n", "  let nDigits = n.toString().length;\n  let count = 1;\n  \n\
    \  for(let i = nDigits - 1; i >= 0; i--){\n    if(n.toString().charAt(i) === 1){\n\
    \      count++;\n    }\n  }\n\n  return count;\n}\n", "  var count = 0;\n  for\
    \ (var i=0;i<n;i++){\n    if (i/10 == 1)\n      count++;\n  }\n  return count;\n\
    }\n", "  var count = 0;\n  var i = 1;\n  while(i < n){\n    if((i === 1) || (i\
    \ % 10 === 1)){\n      i++;\n      count++;\n    }\n    else {\n      i--;\n \
    \   }\n  }\n  return count;\n}\n", "  if( n === 0 ) return 0;\n  let count = 0;\n\
    \  let i = 1;\n  while( i <=n ){\n    if( n % i === 0 ){\n      count++;\n   \
    \   if( i===1 ){\n        if( n !== 1 ) count++;\n      }\n    }\n    i++;\n \
    \ }\n  return count;\n}\n\n", "  let count = 0;\n  if (n >= 1) {\n    for (let\
    \ i = 1; i < n; i++) {\n      if (i === 1 || i === n - 1) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for(i=1;i<=n;i++){\n\
    \    if(n % i == 0){\n      count += 1;\n    }\n  }\n  return count;\n}", "  let\
    \ count = 0;\n  for (let i=1; i<=n; i++){\n    if (i%10 === 1) count ++;\n  }\n\
    \  return count;\n}\n", "  var i,k,count=0,cur=0;\n  for(i=1;i<=n;i++){\n    if(i%10==1){\n\
    \      cur++;\n    }\n    if(cur==1 && i%10==0){\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "  var i, count = 0;\n  for(i = 1; i <= n; i++){\n   \
    \ if(starts_with(n,i)){\n      count++;\n    }\n    if(ends_with(n,i)){\n    \
    \  count++;\n    }\n  }\n  return count;\n}\n", "    if (n < 10) return 0;\n \
    \   if (n < 100) return 1; // 100 is unambiguously one hundred\n    if (n < 1000)\
    \ return 2;\n    if (n < 10000) return 3; // 10000 is unambiguously one thousand\n\
    \    if (n < 100000) return 4;\n    if (n < 1000000) return 5; // 1000000 is unambiguously\
    \ one million\n    if (n < 10000000) return 6;\n    if (n < 100000000) return\
    \ 7; // 10000000 is unambiguously one billion\n    if (n < 1000000000) return\
    \ 8; // 100000000 is unambiguously one trillion\n    if (n < 10000000000) return\
    \ 9; // 1000000000 is unambiguously one quadrillion\n    if (n < 100000000000)\
    \ return 10; // 10000000000 is unambiguously one quintillion\n    if (n < 1000000000000)\
    \ return 11; // 100000000000 is unambiguously one sextillion\n    if (n < 10000000000000)\
    \ return 12; // 1000000000000 is unambiguously one septillion\n    if (n < 100000000000000)\
    \ return 13; // 10000000000000 is unambiguously one octillion\n    if (n < 10000000000000000)\
    \ return 14; // 100000000000000 is unambiguously one nonillion\n    if (n < 100000000000000000)\
    \ return 15; // 1000000000000000 is unambiguously one decillion\n    if (n < 1000000000000000000)\
    \ return 16; // 10000000000000000 is unambiguously one undecillion\n}\n", "  var\
    \ count = 0;\n  for(var i = 1; i <= n; i++){\n    if((n - i) % 10 == 1){\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "  n = +n;\n  var count = 0;\n\
    \  for(var i = 1; i <= n; i++){\n    if(n % i == 0){\n      count++;\n      if(count\
    \ == n){\n        return count;\n      }\n    }\n  }\n  return count;\n}\n\nvar\
    \ n = 300;", "\tvar count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif((i-1) %\
    \ 10 == 1 && i % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
  "    var count = 0;\n    while(n > 0){\n      count++;\n      n--;\n    }\n    return\
    \ count;\n  }\n\n  //Given a positive integer n, return the count of the numbers\
    \ of n-digit\n  // positive integers that start with 0.\n  function starts_zero_ends(n){\n\
    \    var count = 0;\n    while(n > 0){\n      count++;\n      n--;\n    }\n  \
    \  return count;\n  }\n", "\tlet counter = 0;\n\twhile(n > 0){\n\t\tif (n % 10\
    \ == 1){\n\t\t\tcounter++;\n\t\t}\n\t\tn = Math.floor(n/10);\n\t}\n\treturn counter;\n\
    }\n", "  var count = 0;\n  for(var i = n;i>0;i--){ \n    if(i%10==1 && i!=10){\
    \ count++}\n  }\n  return count;\n}\n", "  let count = 0;\n  let i = 0; //Starting\
    \ index\n  let num = n; //Number we are looking at\n  let pow = 1;\n\n  while(true){\n\
    \    pow *= 10;\n    if(num == 1){\n      count++;\n      i++;\n      num = num/pow;\n\
    \      break;\n    }\n\n    if(num % 10 == 1){\n      count++;\n      i++;\n \
    \     num = num/pow;\n    }\n  }\n\n  return count;\n}\n", "\tif (n <= 0) {\n\t\
    \treturn 0;\n\t}\n\tconst str = n.toString();\n\tif (str.length % 2 == 0) {\n\t\
    \treturn 0;\n\t}\n\tlet count = 0;\n\tconst reverse = str.split(\"\").reverse();\n\
    \tfor (let i = 0; i < reverse.length; i++) {\n\t\tif (reverse[i] === \"1\") {\n\
    \t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var ndigits = (n-Math.floor(n/10))*10;\n\
    \    return Math.ceil(ndigits*(Math.log(n)/Math.LN10+1.0))\n}\n", "\tvar i, count\
    \ = 0,\n\t\ta = [],\n\t\tb = [];\n\t\n\tfor(i = 0; i <= n; i++){\n\t\ta.push(i);\n\
    \t\tb.push(i);\n\t}\n\tfor(i = a.length; i >= 0; i--){\n\t\tif(starts_one_end(a[i])\
    \ == 1){\n\t\t\tcount++;\n\t\t}\n\t\telse if(a[i] != 0 && ends_one_start(b[i])\
    \ == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  var count = 0;\n\
    \  for (var i = 2; i < n; i++){\n    if (n === i || n % i == 0){\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  var count = 0;\n  var i = 1;\n  while (i\
    \ < n){\n    if (n%10 === 1){\n      count++;\n    }\n    i++;\n  }\n  return\
    \ count;\n}\n", "  var count = 0;\n  if(n == 0){\n    return count;\n  }\n  if(n\
    \ == 1){\n    return count;\n  }\n  for(var i = 1;i <= Math.ceil(n/10)*10;i++){\n\
    \    if(i == n){\n      count++;\n      if(i != n){\n        count += ends_one_starts(i);\n\
    \      }\n      break;\n    }\n    var start = starts_one_ends(i);\n    var end\
    \ = ends_one_starts(i);\n    count = count + start - end;\n  }\n  return count;\n\
    }\n", "  if (n<10) return 0;\n  if (n>=1&&n<=9) return starts_one_ends(n-1);\n\
    \  if (n>=10&&n<=99) return starts_one_ends(n-10)+1;\n  if (n>=100&&n<=999) return\
    \ starts_one_ends(n-100)+2;\n  if (n>=1000&&n<=9999) return starts_one_ends(n-1000)+3;\n\
    \  if (n>=10000&&n<=99999) return starts_one_ends(n-10000)+4;\n  if (n>=100000&&n<=999999)\
    \ return starts_one_ends(n-100000)+5;\n  if (n>=1000000&&n<=9999999) return starts_one_ends(n-1000000)+6;\n\
    \  if (n>=10000010&&n<=999999999) return starts_one_ends(n-10000010)+7;\n  if\
    \ (n>=100000010&&n<=99999999) return starts_one_ends(n-100000010)+8;\n  if (n>=1000000010&&n<=99999999999)\
    \ return starts_one_ends(n-100000010)+9;\n  if (n>=10000000010&&n<=999999999999)\
    \ return starts_one_ends(n-10000000010)+10;\n  if (n>=100000000010&&n<=9999999999999)\
    \ return starts_one_ends(n-100000000010)+11;\n}\n", "  if(n < 11){\n    return\
    \ 1;\n  } else if(n == 11){\n    return 2;\n  } else {\n    return starts_one_ends(n\
    \ % 10) + starts_one_ends(n / 10);\n  }\n}\n", "    if (n==0) return 0;\n    if\
    \ (n==1) return 1;\n    var x = Math.log10(n);\n    var y = (x+1)*Math.pow(10,x-1);\n\
    \    return Math.floor(y);\n}\n", "\treturn (Math.ceil((Math.log(n)+1)/Math.LN10)+1)*Math.max(n,0);\n\
    }", "  let count = 0;\n  while(n){\n    if(n%10 == 1) count++;\n    n--;\n  }\n\
    \  return count;\n}\n", "  let count = 0;\n  for(let i = 1; i <= n; i++){\n  \
    \  while(n % i == 0){\n      count += 1;\n      n /= i;\n    }\n  }\n  return\
    \ count;\n}\n\nstarts_one_ends(151)//6\nstarts_one_ends(15)//3\nstarts_one_ends(2)//1\n\
    starts_one_ends(13)//2\nstarts_one_ends(6)//2\nstarts_one_ends(10)//1\nstarts_one_ends(4)//2\n\
    starts_one_ends(8)//2\nstarts_one_ends(14)//3\nstarts_one_ends(2)//1\nstarts_one_ends(5)//2\n\
    starts_one_ends(9)//2\nstarts_one_ends(13)//3\nstarts_one_ends(3)//1\nstarts_one_ends(10)//2\n\
    starts_one_ends(7)//3\nstarts_one_ends(12)//2\nstarts_one_ends(1)//1\nstarts_one_ends(4)//2\n\
    starts_one_ends(1)//1\nstarts_one_ends(1)//1\nstarts_one_ends(6)//2\nstarts_one_ends(2)//1\n\
    starts_one_ends(8)//3\nstarts_one_ends(3)//1\nstarts_one_ends(1)//1\nstarts_one_ends(3)//1\n\
    starts_one_ends(12)//2\nstarts_one_ends(6)//3\nstarts_one_ends(12)//2\nstarts_one_ends(3)//1\n\
    starts_one_ends(13)//2\nstarts_one_ends(2)//1\nstarts_one_ends(14)//3\nstarts_one_ends(3)//1\n\
    starts_one_ends(10)//2\nstarts_one_ends(8)//3\nstarts_one_ends(10)//2\nstarts_one_ends(7)//3\n\
    starts_one_ends(13)//3\nstarts_one_ends(10)//2\nstarts_one_ends(6)//3\nstarts_one_ends(8)//3\n\
    starts_one_ends(9)//3\nstarts_one_ends(10)//2\nstarts_one_ends(4)//2\nstarts_one_ends(9)//3\n\
    starts_one_ends(8)//3\nstarts_one_ends(1)//1\nstarts_one_ends(14)//3\nstarts_one_ends(2)//1\n\
    starts_one_ends(10)//2\nstarts_one_ends(", "  if (n == 1)\n    return 1;\n  if\
    \ (n == 0)\n    return 0;\n  \n  var count = 0;\n  for (var i = 1; i < n; i++){\n\
    \    if (n % i == 0)\n      count++;\n  }\n  return count;\n}\n", "\tif(n==0)\
    \ return 0;\n\tif(n==1) return 1;\n\tvar count=0; \n\twhile(n > 0){\n\t\tif(n%10==1)\n\
    \t\t\tcount++;\n\t\tn = Math.floor(n/10);\n\t}\n\treturn count;\n}\n", "  var\
    \ n = +n;\n  var count = 0;\n  while(n > 0){\n    count += n % 10;\n    n /= 10;\n\
    \  }\n  return count;\n}\n</code>\nThe above function will return the number of\
    \ digit-only positive integers starting with 1 or ending with a 1.\n<|/ a |>\n\
    <| c |>\nThis was my first idea. I thought there was a more efficient way (one\
    \ that doesn't involve multiplication).\n<|/ c |>\n<| c |>\nThis counts both 1\
    \ and 0 in the counts. If you don't need that, you could use a bitwise shift `n\
    \ >> 1`\n<|/ c |>\n<| c |>\n: You are correct. I changed the answer to not count\
    \ 0 and 1.\n<|/ c |>\n<| c |>\nI was trying to figure out how to do that using\
    \ bitwise operations, but I had no idea how to do that in Javascript. Your solution\
    \ looks amazing! I knew there had to be a way.\n<|/ c |>\n<| a tags=javascript\
    \ |>\n<code>", "\tif (n < 10) return 1;\n\treturn starts_one_ends(n-1) + countDigits(n);\n\
    }\n", "  if(n<=1)return 0;\n  var cnt=0;\n  var start=1;\n  var end=0;\n  while(1){\n\
    \    var temp=Math.floor(n/10);\n    if(temp==1)\n      if(start==1)\n       \
    \ cnt++;\n      start=0;\n      end=0;\n    else\n      start=1;\n    num=n%10;\n\
    \    if(num==1)\n      end++;\n    n=Math.floor(n/10);\n  }\n  return cnt;\n}\n",
  "\tvar ones = 0;\n\tvar start = 1;\n\twhile((n%10) == 1){\n\t\tones++;\n\t\tn =\
    \ Math.floor(n/10);\n\t}\n\tif(n == 0){\n\t\tones++;\n\t}\n\t\n\treturn ones +\
    \ Math.ceil(n/10) + start;\n}\n", "    for(let i = 1; i <= n; i++){\n        let\
    \ nums = counts_array_of_1(i);\n        if(nums.includes(i)){\n            return\
    \ nums.filter( a => a === 1).length;\n        }\n    }\n    return 0;\n}\n", " \
    \ return n<10 ? 0 :\n         n>9 && (n%10==1 || n%10==11) ? 1 : \n         n>99\
    \ && n%100!=11 ? 2 : 3;\n}\n</cell>\n<text>\nExercise: Write a function is_prime(integer)\
    \ that checks if an int is a prime (that is, divisible only by 1 and itself).\n\
    \nHint: Start by writing a function that checks if an int is divisible by 3. If\
    \ it is, return true. \nIf not, write another function that checks if it is divisible\
    \ by 5, and so on.\n\n\n</text>\n<cell>\n%%js", "    return Math.floor(n/(n-1));\n\
    }\n", "\tvar result = 0;\n\tfor(var i=n-1;i>=0;i--){\n\t\tif(i%10 == 1 && i/10\
    \ == i/10)\n\t\t\tresult++;\n\t}\n\treturn result;\n}\n", "    //base case\n \
    \   if(n === 0){\n        return 0;\n    }\n    else if(n === 1){\n        return\
    \ 1;\n    }\n    //recursive case\n    return starts_one_ends(n-1) + 1 + (n-1)\
    \ % 10;\n}", "  if(n===0)return 0;\n  return Math.ceil(Math.log(n)/Math.LN10).floor()+1;\n\
    }", "    for(i = 2, i <= n; i++){\n        if(n % i == 0){\n            return\
    \ i - 1;\n        }\n    }\n    return n;\n}\n", "  var count = 0;\n  if(n<10)\
    \ return 1;\n  while(n<10*10){\n    if(n%10==1) count++;\n    n /= 10;\n  }\n\
    \  return count;\n}\n", "  if(n == 0) return 0;\n  if(n == 1) return 1;\n  return\
    \ starts_one_ends(n/10) + starts_one_ends(n % 10);\n}\n", "\tvar i, count = 0;\n\
    \tfor(i=1; i<=n; i++){\n\t\tif(n % i == 0){\n\t\t\tcount++;\n\t\t}\n\t\tif(i ==\
    \ n || n % i == 0){\n\t\t\tif(i == 1 && i == n){\n\t\t\t\tcount++;\n\t\t\t}else{\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n", "  var count = 0;\n\
    \  for (var i = 2; i < n; i++){\n    if (n % i == 0 || n / i == 1){\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    var starts = 0,\n        ends = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if( n % 10 == 1 ){\n            if(\
    \ i == 0 || n == (starts * 10 + ends)%n ){\n                starts++;\n      \
    \      }\n        }else{\n            if( i == 0 || n == (ends * 10 + starts)%n\
    \ ){\n                ends++;\n            }\n        }\n    }\n    return [starts,\
    \ ends];\n}\n", "  //If n is less than 0 OR greater than or equal to 10, return\
    \ 0 because there\n  //is no 1-digit number.\n  if(n < 0 || n > 10) return 0;\n\
    \  //Return the number of digits of n in base 10.\n  return Math.log10(n)+1;\n\
    }\n", "  let count = 0;\n  while (n > 0){\n    count++;\n    n--;\n  }\n  return\
    \ count;\n}\n", "  var count = 0;\n  for(var i=n-1;i>=0;i--){\n    if(n%10 ==\
    \ 1)\n      count++;\n    n=Math.floor(n/10);\n  }\n  return count;\n}\n", " \
    \ var count = [];\n  for(var i = 1;i <= n;i++)\n  {\n    if((i-1) % 10 == 1){\n\
    \      count.push(i);\n    }\n  }\n  return count;\n}\n", "\tvar count = 0;\n\t\
    for(var i = n;i > 0;i--){\n\t\tif(i / Math.pow(10,n) == 0)\n\t\t\tcount++;\n\t\
    }\n\treturn count;\n}", "\tlet ones = 0;\n\tlet one_start = 1;\n\tlet one_end\
    \ = 1;\n\tlet i;\n\tfor(i=1; i<=n; i++){\n\t\tones += (one_start*one_end);\n\t\
    \tone_start *= 10;\n\t\tone_end *= 10;\n\t}\n\treturn ones;\n}\n\n", "  var count\
    \ = 0;\n  var last;\n  for(var i=0;i<n;i++){\n    last = n % 10;\n    if(last\
    \ == 1){\n      count++;\n    }\n    last = parseInt(n/10,10)%10;\n    if(last\
    \ == 1){\n      count++;\n    }\n  }\n  return count;\n}", "  var count = 0;\n\
    \  \n  while(n > 0){\n    if(n % 10 === 1)\n      count++;\n    n = Math.floor(n/10);\n\
    \  }\n  return count;\n}\n", "  var ans = 0, i;\n  for(i = 0; i < n; i++){\n \
    \   ans += ((n - i) % 2) === 0;\n  }\n  return ans;\n}\n", "    if(n<=0)\n   \
    \     return 0;\n    var count = 0;\n    var temp = 1;\n    while(temp <= n){\n\
    \        if(temp === 1)\n            count++;\n        temp *= 10;\n    }\n  \
    \  return count;\n}\n", "  let count = 0;\n  for(let i=0;i<n;i++){\n    if(starts_one(i)){\n\
    \      count+=1;\n    }\n  }\n  return count;\n}\n", "  var count=0;\n  for(var\
    \ i=1;i<=n;i++){\n    if(i%10==1 || i%10==9){\n      count++;\n      if(count==n)return\
    \ count\n    }\n  }\n  return 0;\n}\nstarts_one_ends(100); //100\nstarts_one_ends(199);\
    \ //1\nstarts_one_ends(19999); //2\nstarts_one_ends(199900); //1\nstarts_one_ends(999);\
    \ //0\nstarts_one_ends(19991); //1\nstarts_one_ends(1999001); //0\nstarts_one_ends(9991);\
    \ //0\nstarts_one_ends(1999011); //1\nstarts_one_ends(199901101); //0\n", "  var\
    \ count = 0;\n  \n  for(var i = n; i > 0; i--){\n    if(i%10 == 1) count++;\n\
    \  }\n  \n  return count;\n}\n", "  if(n == 0 || n == 1)\n    return n;\n  if(n\
    \ % 10 == 1 && n % 100 != 11)\n    return 1;\n  if(n % 10 >= 2 && n % 10 <= 4\
    \ && (n % 100 < 10 || n % 100 >= 20) &&\n      (n % 100 % 10 == 1) && n % 100\
    \ != 11)\n    return 1;\n  return n - 1;\n}\n", "\tvar count = 0;\n\tvar i = 0;\n\
    \twhile(n > 0){\n\t\tif(n % 10 == 1) count++;\n\t\ti++;\n\t\tn = Math.floor(n\
    \ / 10);\n\t}\n\treturn count;\n}\n", "  let starts=0;\n  let ends=0;\n  for(let\
    \ i = n; i >= 1; i--){\n    let temp = i.toString().split('').reverse().join('');\n\
    \    if(temp == 1){\n      starts++;\n    }\n    else if(temp == 0){\n      ends++;\n\
    \    }\n  }\n  return [starts, ends];\n}\n", "  var sum=0;\n  for(var i=0;i<=n;i++){\n\
    \    var count=0;\n    var a=1;\n    for(var j=1;j<=n;j++){\n      if(j%i==0){\n\
    \        count=1;\n        break;\n      }\n      a=a*j;\n    }\n    if(count==0){\n\
    \      sum++;\n    }\n  }\n  return sum;\n}", "   let count = 0;\n   for (let\
    \ i = n; i; i/=10)\n      if (i%10==1) count++;\n   return count;\n}\n", "  var\
    \ count = 0;\n  for(var i = 1; i < n; i++){\n    if((i - 1) % i == 0){\n     \
    \ count += 1;\n    }\n  }\n  return count;\n}\n", "\tif (n%10==1 && n!==9) return\
    \ 0;\n\tif (n%10==9) return 1;\n\tif (n%10==0) return n+1;\n\treturn n;\n}\n",
  "  var count = 0;\n  var i = 1; \n  while (n / i >= 0){\n    count++;\n    i ++;\n\
    \  }\n  return count;\n}\n", "  var count = 0;\n  if(n > 0 && n % 100 === 1){\n\
    \    count += 100;\n  }\n  if(n >= 1 && n % 100 === 1){\n    count += 1;\n  }\n\
    \  if(n > 0 && n % 100 === 0){\n    count += 100;\n  }\n  if(n >= 1 && n % 100\
    \ === 0){\n    count += 1;\n  }\n  if(n === 1){\n    count += 1;\n  }\n  return\
    \ count;\n}\n", "  if(n==0 || n==1) return n;\n  if(n==2) return 2;\n  if(n %\
    \ 10 == 1 && n % 100 != 11) return 0;\n  if(n % 10 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 10)) * 10);\n  if(n % 100 == 0) return 1 + (starts_one_ends(Math.floor(n /\
    \ 100)) * 100);\n  if(n % 1000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 1000)) * 1000);\n  if(n % 10000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 10000)) * 10000);\n  if(n % 100000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 100000)) * 100000);\n  if(n % 1000000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 1000000)) * 1000000);\n  if(n % 10000000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 10000000)) * 10000000);\n  if(n % 100000000 == 0) return 1 + (starts_one_ends(Math.floor(n\
    \ / 100000000)) * 100000000);\n  return 1 + (starts_one_ends(Math.floor(n / 1000000000))\
    \ * 1000000000);\n}\n", "  var count = 0;\n  for(var i = 0; i < n; i++){\n   \
    \ if(is_one_end(i) || is_one_start(i)) count++;\n  }\n  return count;\n}", " \
    \ var count = 0;\n  for(var i = 2; i < n; i++){\n    if((n%10) == 0) count ++;\n\
    \    if(n == 1) return count;\n  }\n}\n", "    for(var i = 1;i <= n; ++i){\n \
    \       if(n % i == 0 && i != 0){\n            return i / i - 1;\n        }\n\
    \    }\n    return 0;\n}\n", "    var count = 0;\n    for(var i = 1;i <= n;i++)\n\
    \        if(n % i == 0){\n            count++;\n        }\n    return count;\n\
    }\n</code>\nIt might seem to be a little bit confusing at first but is actually\
    \ fairly easy to understand.\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis\
    \ works well for small numbers but has a time complexity of O(n^2) when the limit\
    \ is high, for instance n=10^14. With this approach, I can get my answer in a\
    \ couple of minutes using this particular number.\n<|/ c |>\n<| c |>\nOh yes,\
    \ it isn't the most optimised code, but I guess it works ok for those who don't\
    \ mind readability and just need an answer quickly and in a short time.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nYou can solve this using recursion, just like a binary\
    \ tree would work but you don't necessarily have to create a binary tree, the\
    \ way recursion works is it just keeps calling itself until the base case(a specific\
    \ condition that you specify) is met, this will be the case if the number is one\
    \ or 0, when that happens the function stops calling itself, which is done with\
    \ return 0 in this case, since the number you started with, was 1 or 0, which\
    \ is when the function stops calling itself and returns the number that starts\
    \ and ends with 1 or 0.\n<code>", "  let count = 0;\n  for (let i = 1;i <= n;++i){\n\
    \    if ( n % i == 0 ){\n      ++count;\n    }\n  }\n  return count;\n}\n", " \
    \ if(n < 0){\n    return -1;\n  }\n  if(n == 0){\n    return 0;\n  }\n  if(n ==\
    \ 1){\n    return 1;\n  }\n  return starts_one_ends(n/10) + starts_one_ends(n%10);\n\
    }\n", "  if(n==0){return 0;}\n  var x = 0;\n  var y = 0;\n  while(n!=0){\n   \
    \ var q = Math.floor(n/10);\n    x = x * 10 + q;\n    y = y * 10 + q;\n    n =\
    \ n % 10;\n  }\n  if(y%2==1){return x+y;}\n  return x+1;\n}\n", "\tif(n==0){\n\
    \t\treturn 0;\n\t}\n\tif(n<0){\n\t\tconsole.log(\"Negative input\");\n\t}\n\t\
    let res=[];\n\tlet arr=[...Array(n).keys()]\n\tfor(let i=0;i<arr.length;i++){\n\
    \t\tif(arr[i]%2==0){\n\t\t\tlet newRes=[arr[i]]\n\t\t\tfor(let j=i;j<arr.length-1;j++){\n\
    \t\t\t\tnewRes.push(arr[j]+arr[j+1]);\n\t\t\t}\n\t\t\tres.push(newRes);\n\t\t\
    }\n\t}\n\treturn res.reduce((acc,x)=>acc+x.reduce((a,b)=>a+b,0),0);\n}\n", "\t\
    let count = 0;\n\tfor(let i=1; i<=n; i++){\n\t\tif(i%10 == 1){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  var one_count = 0; //initialize count to\
    \ 0\n  var first_one = false; //initialize first_one to false\n  for(var i = 1;\
    \ i <= n; i++){\n    if(i%10 == 1){\n      first_one = true; //if i is 1, then\
    \ set first_one to true\n    }\n    if(i%10 == 0){\n      if(first_one){\n   \
    \     one_count++;\n      }\n      first_one = false; //resets first_one to false\n\
    \    }\n  }\n  return one_count; //return the count\n}\n", "  var count = 0;\n\
    \  while(n > 0){\n    var remainder = n % 10;\n    var digit = n - (remainder\
    \ * (10 ** (n - 1)));\n    if(digit == 1) count++;\n    n = remainder;\n  }\n\
    \  return count;\n}", "  return is_one_digit_number(n) ? n : (n + 1) >> 1;\n}\n",
  "    let count = 0;\n    let count = 0;\n    let count = 0;\n    let count = 0;\n\
    \    let count = 0;\n    \n    //let count = 1;\n    //let count = 0;\n    for(let\
    \ i = 1; i <= n; i++){\n        if(i == n){\n            count++;\n        }\n\
    \        else if(i % n == 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "  if(n <= 1) return 0;\n  \n  let count = 0;\n  let start = 1;\n\
    \  let end = 1;\n  let current_number = 1;\n  \n  while(end<=n){\n    current_number\
    \ = end + start;\n    if(current_number == 1){\n      count++;\n    } else {\n\
    \      if(current_number % 10 != 1) count++;\n    }\n    start = current_number\
    \ / 10;\n    end = current_number % 10;\n  }\n  \n  return count;\n}\n", "\tlet\
    \ count = 0;\n\tfor(i=1;i<=n;i++){\n\t\tif( (i/n)%1 === 0 ){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  let arr = [];\n  while(n){\n    let str\
    \ = n.toString();\n    let count = 0;\n    for(let i = 0; i < str.length; i++){\n\
    \      if(str[i] === '1'){\n        count++;\n      }\n    }\n    arr.push(count);\n\
    \    n = Math.floor(n / 10);\n  }\n  return arr;\n}\n", "    // Initialize your\
    \ return value\n    var count=0\n\n    // Check if the integer is 1 or less, if\
    \ not, exit.\n    if(n<1) return\n\n    // Initialize an iterator for the array\
    \ of integers up to n\n    for(var i=n; i>0; i--){\n        // If i'th digit is\
    \ 0 or 1, increment the count by 1.\n        if(n % 10 == 0){\n            count++\n\
    \        }\n        // If i'th digit is 1, exit the loop\n        else{\n    \
    \        break\n        }\n    }\n\n    // Return count\n    return count\n}\n\
    \n</code>\n<|/ a |>\n<| c |>\nThanks, I ended up doing something like this, but\
    \ i think yours would be more efficient.\n<|/ c |>\n<| c |>\nOk, I did some benchmarks,\
    \ yours is 2x faster :) I guess this is because you're running it in a loop for\
    \ every number. Mine is just doing it once.\n<|/ c |>\n<| c |>\nI ran both through\
    \ timeit to compare execution times.\n<|/ c |>\n<| a |>\n<code>", "  let count\
    \ = 0;\n  let arr = [];\n  while(n > 0){\n    arr.push(n%10);\n    n /= 10;\n\
    \  }\n  arr = arr.sort();\n  for(let i = 0; i<arr.length; i++){\n    if(arr[i]\
    \ == 1){\n      count++;\n    }\n  }\n  return count;\n}\n", "  var count=0\n\
    \  while(n > 0){\n    if(n%10 == 1){\n      count++\n    }\n    n/=10\n  }\n \
    \ return count\n}\n", "  // if n <= 10, return 0\n  if(n<=10) return 0;\n  //\
    \ If n >=10, return startsOneEnds\n  if(n >=10 ) return starts_one_ends(n/10)+1;\
    \ \n  // If n<10, return n\n  return n;\n}", "    n += ''; // coerce to string\n\
    \    n = n.split(''); //split string into array by new lines\n    n = n.filter(Boolean);\
    \ // filter out empty entries\n    n = n.filter(function(x){\n        return x\
    \ === '1'; // return only 1s\n    }); //filter out all but 1s\n    return n.length;\n\
    }\n", "  var nDigits = 0;\n  while(n>0){\n    var x = n%10;\n    nDigits = nDigits\
    \ + (x == 1);\n    n = Math.floor(n/10);\n  }\n  return nDigits;\n}\n\nvar one_start\
    \ = starts_one_ends(nDigits);\nvar one_end = starts_one_ends(nDigits-1);\n", "\t\
    var count = 0;\n\twhile(n > 1){\n\t\tif(n%10 == 1){\n\t\t\tcount++;\n\t\t}\n\t\
    \tn = Math.floor(n/10);\n\t}\n\treturn count;\n}\n", "  var count = 0;\n  while(n\
    \ >= 100){\n    count += n%100 == 0 ? 1 : 0;\n    n /= 100;\n  }\n  return count;\n\
    }\n</cell>\n<cell>\nstarts_one_ends(20)\n</cell>\n<text>\nRecursion\nNow that\
    \ we've seen the recursion approach, let's see how it works with a recursive function.\
    \ We'll define the factorial function and see how it works:\n\n\n</text>\n<cell>\n\
    var factorial = function(n){\n  if(n==1){\n    return 1;\n  }\n  return n*factorial(n-1);\n\
    }\n</cell>\n<cell>\nfactorial(5)\n</cell>\n<text>\nWe defined factorial as an\
    \ iterative function, but it's clear that it can be implemented recursively. Let's\
    \ see how it works:\n\n\n</text>\n<cell>\nfactorial(5)\n</cell>\n<text>\nWe've\
    \ seen that the factorial function returns the correct result for n=5, but how\
    \ does it work? Let's think about it for a moment. Initially we had a base case:\n\
    \nif(n==1){\n  return 1;\n}\nThat case doesn't work. Take a look at it closely.\
    \ We'll also need a recursive case:\n\nreturn n*factorial(n-1);\nLet's look at\
    \ how the return statement works:\n\nreturn n*factorial(n-1);\nHere we are multiplying\
    \ the argument n by the recursive call to factorial:\n\nreturn n*factorial(n-1);\n\
    Let's look at how the factorial function is called:\n\nn*factorial(n-1);\nLet's\
    \ think about this more closely. We are calling the factorial function twice.\
    \ First, with the argument n=1. We've already seen that this is correct because\
    \ we know that n! equals 1!.\n\nreturn n*factorial(n-1);\nNow, with n=2.\n\nreturn\
    \ n*factorial(n-1);\nAnd so on.\n\nSo we see that n! is being multiplied by the\
    \ recursive call n times. Since this is a recursive function, the base case is\
    \ never actually called, but we still need to keep track of how many times we've\
    \ called it because we still need to return n!.\n\nLet's see how this works.\n\
    \n\n</text>\n<cell>", "  var count = 0, i = 1, last = 0, counting_ends = false;\n\
    \  while(i <= n){\n    if(i % 10 == 1 && i % 100 != 11 || i % 100 == 10 && i %\
    \ 100 != 11){\n      count++;\n      if(count == 3 && counting_ends == false){\n\
    \        counting_ends = true;\n      }\n    } else {\n      counting_ends = false;\n\
    \    }\n    i++;\n  }\n  return count;\n}\n", "\tvar count = 0;\n\t\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tif(i%10 == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "  return n.toString().split('').reduce(function(a, b){\n    var\
    \ intValue = +a + (+b - a);\n    return Math.abs(intValue) == intValue && intValue\
    \ >= 1 &&\n           intValue <= Math.pow(10, b.length) ? ++a : a;\n  }, 0);\n\
    }", "  return Math.floor((n-1)/10) + 1;\n}\n", "  let count = 0;\n  \n  //If the\
    \ input number is less than 10, just return 0.\n  if(n<10)return 0;\n  \n  //Otherwise,\
    \ loop from 0 to n.\n  for(let i=0; i<n; i++){\n    //If the number is divisible\
    \ by 10, then add the one to the count.\n    if((i%10)==0)count++;\n  }\n  \n\
    \  //Return the count.\n  return count;\n}\n", "  var one_ends = 0;\n  for(var\
    \ i = 0; i < n; i++){\n    if(i % 10 === 1){\n      one_ends++;\n    }\n  }\n\
    \  return one_ends;\n}\n", "  var count = 1;\n  for(var i = 2; i <= Math.sqrt(n);\
    \ i++)\n    if(n % i == 0){\n      count += n - i \n    }\n  return count;\n}\n\
    </cell>\n<cell>", "    //This code uses three variables: num to count the occurrences\
    \ of digit\n    //starts, num_start to count the number of 1s before the start\
    \ of a\n    //number, and num_end to count the number of 1s after the end of the\n\
    \    //number.\n    var num, num_start, num_end;\n    //Count the number of 1s\
    \ before the start of the number.\n    num_start = 0;\n    while(n >= 1){\n  \
    \      num_start += n % 10;\n        n = ~~(n / 10);\n    }\n    //Count the number\
    \ of 1s after the end of the number.\n    num_end = 0;\n    while(n > 0){\n  \
    \      num_end += n % 10;\n        n = ~~(n / 10);\n    }\n    //Count the number\
    \ of occurrences of digit starts, which is the\n    //number of 1's before the\
    \ first occurrence of digit starts. \n    num = 0;\n    while(n > 0){\n      \
    \  if(n >= num_start){\n            num++;\n        }\n        n = ~~(n / 10);\n\
    \    }\n    //Count the number of occurrences of digit ends, which is the\n  \
    \  //number of 1's after the last occurrence of digit ends.\n    num = 0;\n  \
    \  while(n >= 1){\n        if(n <= num_end){\n            num++;\n        }\n\
    \        n = ~~(n / 10);\n    }\n    return num;\n}\n", "    var count = 0;\n\
    \    var start = 1;\n    while(n > 1){\n        if(n%10 == 1){\n            count++;\n\
    \        }\n        n = parseInt(n/10);\n    }\n    return count;\n}\n", "\tvar\
    \ count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif((i % 10) == 0){\n\t\t\tcount\
    \ += 2;\n\t\t\tif(((i + 1) % 10) == 0) count += 1;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    if(n==0) return 0;\n    if(n<0) return -1;\n    let one_count=0;\n\
    \    for(let i=1;i<=n;i++){\n        if(i%10==1 && i!=1){\n            one_count+=1;\n\
    \        }\n    }\n    return one_count;\n}", "  let starts = 0;\n  let ends =\
    \ 0;\n  let counter = n;\n  while(counter > 0){\n    if(counter % 10 == 1)\n \
    \     starts += 1;\n    if(counter % 10 == 0)\n      ends += 1;\n    counter /=\
    \ 10;\n  }\n  if(starts == 0 && ends == 0)\n    return 0;\n  return starts + ends;\n\
    }\n", "\tif (n == 0) return 0;\n\tlet count = 0;\n\tfor (let i = 2; i <= Math.sqrt(n);\
    \ i++){\n\t\tif (n % i == 0 && i > n / i){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\t\
    return count;\n}", "  return Math.pow(10, Math.round(n)-1) % 2 === 0;\n}\n", " \
    \ //Write your code here\n}\n", "\tif (n<10) return n;\n\tlet count=0;\n\tfor\
    \ (let i=0;i<n;i++){\n\t\tif (n%i==0) count++;\n\t}\n\treturn count;\n}", "  if\
    \ (n === 1){\n    return 1;\n  }\n  if (n === 0){\n    return 0\n  }\n  if (n%10\
    \ === 1 && n%100 === 1){\n    return Math.floor(n/10)\n  }\n  n = Math.round(n);\n\
    \  var count = 0;\n  while(n){\n    count += n % 10;\n    n /= 10;\n  }\n  return\
    \ count;\n}\n", "\tvar count = 0;\n\tvar startsWithOne = false;\n\tvar endsWithOne\
    \ = false;\n\tfor(var i=0;i<n;i++){\n\t\tif(i % 10 == 1 && i % 100 != 11){\n\t\
    \t\tendsWithOne = true;\n\t\t}\n\t\telse if(i % 10 == 1 && i % 100 == 11){\n\t\
    \t\tendsWithOne = false;\n\t\t}\n\t\tif(!endsWithOne && !startsWithOne){\n\t\t\
    \tcount += 1;\n\t\t}\n\t\tstartsWithOne = false;\n\t\tendsWithOne = false;\n\t\
    }\n\treturn count;\n}\n", "    var count = 0; \n    for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n        if((n - 1) * (i - 1) < i){\n            count++;\n        }\n\
    \    }\n    return count;\n}", "  var count = 0;\n  while(n > 0){\n    if(n %\
    \ 10 == 1 && n % 100 != 11){\n      count += 1;\n    }\n    n = Math.floor(n /\
    \ 10);\n  }\n  return count;\n}\n", "    var count=0;\n    for(var i=1;i<=n;i++){\n\
    \        if(i%10==1 && i/10==1){\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "  var count = 0;\n  for(var i=0;i<n;i++)\n  {\n    if(i>0\
    \ && i%10 == 1){\n      count++;\n    }\n    if(i<n && i%10 != 1){\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    if(n<=0){\n        return 0;\n    }\n\
    \    if(n===1 || n===11 || n===2 || n===12 || n===3\n        || n===13 || n===4\
    \ || n===14 || n===5\n        || n===15 || n===6 || n===16 || n===7\n        ||\
    \ n===17 || n===8 || n===18 || n===9\n        || n===19){\n        return 1;\n\
    \    }\n    if(n===20){\n        return 2;\n    }\n    if(n===21){\n        return\
    \ 3;\n    }\n    if(n===22){\n        return 4;\n    }\n    if(n===23){\n    \
    \    return 5;\n    }\n    if(n===24){\n        return 6;\n    }\n    if(n===25){\n\
    \        return 7;\n    }\n    if(n===26){\n        return 8;\n    }\n    if(n===27){\n\
    \        return 9;\n    }\n    if(n===28){\n        return 10;\n    }\n    if(n===29){\n\
    \        return 11;\n    }\n    if(n===30){\n        return 12;\n    }\n    if(n===31){\n\
    \        return 13;\n    }\n    if(n===32){\n        return 14;\n    }\n    if(n===33){\n\
    \        return 15;\n    }\n    if(n===34){\n        return 16;\n    }\n    if(n===35){\n\
    \        return 17;\n    }\n    if(n===36){\n        return 18;\n    }\n    if(n===37){\n\
    \        return 19;\n    }\n    if(n===38){\n        return 20;\n    }\n    if(n===39){\n\
    \        return 21;\n    }\n    if(n===40){\n        return 22;\n    }\n    if(n===41){\n\
    \        return 23;\n    }\n    if(n===42){\n        return 24;\n    }\n    if(n===43){\n\
    \        return 25;\n    }\n    if(n===44){\n        return 26;\n    }\n    if(n===45){\n\
    \        return 27;\n    }\n    if(n===46){\n        return 28;\n    }\n    if(n===47){\n\
    \        return 29;\n    }\n    if(n===48){\n        return 30;\n    }\n    if(n===49){\n\
    \        return 31;\n    }\n    if(n===50){\n        return 32;\n    }\n    if(n===51){\n\
    \        return 33;\n    }\n    if(n===52){\n        return 34;\n    }\n    if(n===53){\n\
    \        return 35;\n    }\n    if(n===54){\n        return 36;\n    }\n    if(n===55){\n",
  "    if(n === 0)\n        return 0;\n    var s = 1;\n    var i = n;\n    while(i\
    \ /= 10)\n        s += i%10==1;\n    return s;\n}", "    if (n <= 0)\n\treturn\
    \ 0;\n    return Math.floor(Math.log10(n)) + 1;\n}\n", "  var count = 0;\n  for(var\
    \ i = 0; i < n; i++){\n    var current_number = Math.floor(Math.pow(10, i) * Math.random())\
    \ + 1;\n    if(current_number === 1){\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  if(n < 10) return 1;\n  var count = 0;\n  if(n>0 && n % 10 == 1) count++;\n\
    \  if(n>0 && n % 10 == 0) count++;\n  if(n>1 && n % 100 == 1) count++;\n  if(n>1\
    \ && n % 100 == 0) count++;\n  if(n>2 && n % 1000 == 1) count++;\n  if(n>2 &&\
    \ n % 1000 == 0) count++;\n  return count;\n}\n", "  return Math.floor(n/10) +\
    \ 1 - Math.floor(n/100);\n}\n", "  if(n==0) return 0;\n  return Math.floor((Math.log(n))/Math.LN10);\n\
    }\n", "  let count = 0;\n  for(let i = 1; i <= n; i++){\n    if(i == 1 && n %\
    \ i == 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "\tvar sum = 0;\n\
    \tfor(var i = 1; i < Math.pow(10, n); i++)\n\t\tif(i === Math.pow(10, n) || i\
    \ >= n + 1)\n\t\t\tsum++;\n\treturn sum;\n}\n", "  var count = 0\n  var x = 1\n\
    \  while (x<=n){\n    if(x%10==1) count++\n    x++\n  }\n  return count\n}\n",
  "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 0) return starts_one_ends(n\
    \ - 1);\n\n  // TODO: optimize this\n  n++;\n  if (n > 10) return starts_one_ends(n);\n\
    \  var count = 0;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n\
    \    }\n    n /= 10;\n  }\n  return count;\n}\n", "\tvar count = 0;\n\tvar i;\n\
    \tfor(i = 0; i <= n; i++){\n\t\tif(Math.floor(i/Math.pow(10, n-1)) == Math.floor(i/Math.pow(10,\
    \ n))){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  //base case: n\
    \ is 0\n  if(n==0){\n    return 1;\n  }\n  //base case: n is 1\n  if(n==1){\n\
    \    return 1;\n  }\n  //recursive case: n is odd and 1 is at 0\n  if(is_odd(n)\
    \ && n==0){\n    return 1;\n  }\n  //recursive case: n is even and 0 is at 0\n\
    \  if(is_even(n) && n==0){\n    return 1;\n  }\n  //recursive case: n is odd and\
    \ n is at 1\n  if(is_odd(n) && n==1){\n    return 1;\n  }\n  //recursive case:\
    \ n is even and n is at 1\n  if(is_even(n) && n==1){\n    return 1;\n  }\n  //recursive\
    \ case: n is odd and the sum of digits is at n\n  if(is_odd(n) && sum_digits(n)==n){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ even and the sum of digits is at n\n  if(is_even(n) && sum_digits(n)==n){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ odd and 1 is at n\n  if(is_odd(n) && sum_digits(n)==n){\n    return 1 + starts_one_ends(sum_digits(n));\n\
    \  }\n  //recursive case: n is even and 0 is at n\n  if(is_even(n) && sum_digits(n)==n){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ odd and the sum of digits is at n+1\n  if(is_odd(n) && sum_digits(n)==n+1){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ even and the sum of digits is at n+1\n  if(is_even(n) && sum_digits(n)==n+1){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ odd and the sum of digits is at n-1\n  if(is_odd(n) && sum_digits(n)==n-1){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive case: n is\
    \ even and the sum of digits is at n-1\n  if(is_even(n) && sum_digits(n)==n-1){\n\
    \    return 1 + starts_one_ends(sum_digits(n));\n  }\n  //recursive ", "  var\
    \ res = 0\n  for (var i = 1; i <= n; i++){\n    if (n%i == 0){\n      res = res\
    \ + (n%i) - i\n    }\n  }\n  return res\n}", "  let count = 0;\n  for(let i =\
    \ 1; i < n; i++){\n    if(isStartsOne(i)){\n      count++;\n    }\n  }\n  return\
    \ count;\n}", "  let count = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_one_end(i))\n\
    \      count++;\n  }\n  return count;\n}\n", "  var count = 0;\n  var i = 1;\n\
    \  while(i * i <= n){\n    count += (i * i) === n && ((i + 1) * (i + 1) == n);\n\
    \    i += 2;\n  }\n  return count;\n}\n", "  return Array(n + 1).fill(0).map(function(_,\
    \ i){\n    if(i === 0){\n      return n;\n    }\n    return Math.abs(n % i) ===\
    \ 1;\n  }).reduce(function(a, b){\n    return a + b;\n  }, 0);\n}\n", "    var\
    \ ones = 0;\n    var start = 1;\n    while (n > start){\n        ones++;\n   \
    \     start *= 10;\n    }\n    return ones;\n}\n", "  // We use a recursive function\
    \ here to find all the numbers from 10 to n\n  // where the counts of those numbers\
    \ from 10 to n all start with 1 or\n  // end with 1. \n  //\n  // For example\
    \ for n=10, counts_one_ends(10) returns [1, 1, 1]\n  // for n=11, counts_one_ends(11)\
    \ returns [1, 1, 2, 1]\n  // and for n=11, counts_one_ends(12) returns [1, 1,\
    \ 2, 1, 1]\n  // ...and so on...\n\n  // We create an array of size 'n' that holds\
    \ the counts of numbers from 10 to \n  // n\n  var counts = new Array(n);\n\n\
    \  // We loop through each of the numbers from 10 to n\n  // and set all the values\
    \ to 0 initially\n  for(var i=10; i<n; i++){\n    counts[i] = 0;\n  }\n\n  //\
    \ We also create another array that holds the total value of each number\n  //\
    \ from 10 to n\n  var totals = new Array(n);\n\n  // For each number from 10 to\
    \ n\n  for(var i=10; i<n; i++){\n    // We start by adding 1 to the total of each\
    \ number from 10 to i\n    for(var j=10; j<=i; j++){\n      totals[j] += 1;\n\
    \    }\n    // If the total is greater than or equal to one, then we increase\
    \ the value\n    // of the count that corresponds to the number from 10 to i\n\
    \    if(totals[i] >= 1){\n      counts[i] += 1;\n    }\n  }\n  return counts;\n\
    }\n", "  var count = 0;\n  for(var i = 1;i <= n;i++){\n    if(i%10 == 1) count++;\n\
    \  }\n  return count;\n}\n", "    \n    if (n<1){\n        throw \"Error!\";\n\
    \    }\n    \n    if (n==1){\n        return 0;\n    }\n    \n    var count=0;\n\
    \    var nums=[];\n    var start=1;\n    \n    while (start<=n){\n        \n \
    \       if (n%10==1){\n            nums[nums.length]=start;\n            count++;\n\
    \        }\n        start=start*10;\n    }\n    \n    return count;\n}\n", " \
    \ if(n < 10) return 0;\n  if(n<100) return 1;\n  if(n<1000) return 2;\n  if(n<10000)\
    \ return 3;\n  if(n<100000) return 4;\n  if(n<1000000) return 5;\n  if(n<10000000)\
    \ return 6;\n  if(n<100000000) return 7;\n  if(n<1000000000) return 8;\n  if(n<10000000000)\
    \ return 9;\n  if(n<100000000000) return 10;\n  if(n<1000000000000) return 11;\n\
    \  if(n<10000000000000) return 12;\n  if(n<100000000000000) return 13;\n  if(n<1000000000000000)\
    \ return 14;\n  if(n<10000000000000000) return 15;\n  if(n<100000000000000000)\
    \ return 16;\n  if(n<1000000000000000000) return 17;\n  if(n<10000000000000000000)\
    \ return 18;\n  if(n<100000000000000000000) return 19;\n  if(n<1000000000000000000000)\
    \ return 20;\n  if(n<10000000000000000000000) return 21;\n  if(n<100000000000000000000000)\
    \ return 22;\n  if(n<1000000000000000000000000) return 23;\n  if(n<10000000000000000000000000)\
    \ return 24;\n  if(n<100000000000000000000000000) return 25;\n  if(n<1000000000000000000000000000)\
    \ return 26;\n  if(n<10000000000000000000000000000) return 27;\n  if(n<100000000000000000000000000000)\
    \ return 28;\n  if(n<1000000000000000000000000000000) return 29;\n  if(n<10000000000000000000000000000000)\
    \ return 30;\n  if(n<100000000000000000000000000000000) return 31;\n  if(n<1000000000000000000000000000000000)\
    \ return 32;\n  if(n<10000000000000000000000000000000000) return 33;\n  if(n<100000000000000000000000000000000000)\
    \ return 34;\n  if(n<1000000000000000000000000000000000000) return 35;\n  if(n<10000000000000000000000000000000000000)\
    \ return 36;\n  if(n<100000000000000000000000000000000000000) return 37;\n  if(n<1000000000000000000000000000000000000000)\
    \ return 38;\n  if(n<10000000000000000000000000000000000000000) return 39;\n \
    \ if(n<100000000000000000000000000000000000000000) return 40;\n  if(n<1000000000000000000000000000000000000000000)\
    \ return 41;\n  if(n<100000000000000000000000000000000000000000) return 42;\n\
    \  if(n<10000000000000000000000000000000000000000000) return 43;\n  if(n<100000000000000000000000000000000000000000000)\
    \ return 44;\n  if(n<1000000000000000000000000000000000000000000000) return 45;\n\
    \  if(n<", "  let count = 0\n  while(n>0){\n    count += n%10 == 1 || n%10 ==\
    \ 0 //counting how many times 1 starts or ends with 1\n    n /= 10\n  }\n  return\
    \ count\n}\n", "  var count = 0;\n  for(var i = 1; i <= n; i++){\n    if((n /\
    \ i) % 1 == 0)\n      count++;\n  }\n  return count;\n}", "\tvar count = 0;\n\t\
    for(var i = 0; i < n; i++){\n\t\tif(n % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\n<|/ file filename=Splash.js |>", "  var count = 0;\n  for(var\
    \ i = 0; i < n; i++){\n    var one_end = false;\n    for(var j = i; j < n; j++){\n\
    \      if(j + 1 < n && j % 10 == 1){\n        one_end = true;\n        break;\n\
    \      }\n    }\n    if(one_end){\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "    var count = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i\
    \ == 0){\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \   //Write your code here.\n    return count((n>=0) && (n<=10));\n}\n</cell>\n\
    <cell>\n%timeit starts_one_ends(100)\n</cell>\n<cell>\ndef counting_function():\n\
    \    '''\n    Count the number of even or odd numbers from 1 to 100,000 that start\
    \ with 1\n    '''\n    return sum(starts_one_ends(n) for n in range(1,100000))\n\
    </cell>\n<cell>\n%timeit counting_function()\n</cell>\n<text>\nYour turn:\n\n\
    Write a function that returns a list of all prime numbers up to N (where N is\
    \ a given number).\n\n\n</text>\n<text>\nSolution\n\n</text>\n<cell>\ndef primes_up_to(n):\n\
    \    '''\n    Returns a list of the prime numbers up to n.\n    \n    Prime numbers\
    \ are numbers that only divide evenly into themselves.\n    \n    For example,\
    \ the prime numbers 2, 3, 5 are not prime.\n    \n    Parameters:\n    n (int):\
    \ the number up to which to return the prime numbers\n    \n    Returns:\n   \
    \ primes (list of ints): the list of prime numbers up to n\n    '''\n    primes\
    \ = []\n    for i in range(2,n):\n        prime = True\n        for p in primes:\n\
    \            if i%p == 0:\n                prime = False\n                break\n\
    \        if prime:\n            primes.append(i)\n    return primes\n</cell>\n\
    <text>\nWe now have a function that returns all the prime numbers up to a certain\
    \ number. Let's test it out.\n\n\n</text>\n<cell>\nprimes_up_to(4)\n</cell>\n\
    <cell>\nprimes_up_to(10000)\n</cell>\n<cell>\nprimes_up_to(100000)\n</cell>\n\
    <cell>\ndef primes_up_to(n):\n    '''\n    Returns a list of the prime numbers\
    \ up to n.\n    \n    Prime numbers are numbers that only divide evenly into themselves.\n\
    \    \n    For example, the prime numbers 2, 3, 5 are not prime.\n    \n    Parameters:\n\
    \    n (int): the number up to which to return the prime numbers\n    \n    Returns:\n\
    \    primes (list of ints): the list of prime numbers up to n\n    '''\n    primes\
    \ = []\n    for i in range(2,n):\n        prime = True\n        for p in primes:\n\
    \            if i%p == 0:\n                prime = False\n                break\n\
    \        if prime:\n            primes.append(i)\n    return primes\n</cell>\n\
    <cell>\n%timeit primes_up_to(100)\n</cell>\n<cell>\n%timeit primes_up_to(100000)\n\
    </cell>\n<text>\nNow we have the prime numbers up to 100,000 we can use our ",
  "\tvar cnt = 0;\n\tfor(i=1; i<=n; i++){\n\t\tif(i%10 == 1){\n\t\t\tcnt++;\n\t\t\
    }\n\t\tif(i%10 == 0){\n\t\t\tcnt--;\n\t\t}\n\t}\n\treturn cnt;\n}\n", "  \n  return\
    \ Math.ceil(Math.log(n+1)/Math.LN10);\n}", "    for(i = 1;i<=n;i++)\n        if(n%i===0)\
    \ return i;\n    return -1;\n}\n", "  let count = 0;\n  for(i = 1; i<=n; i++){\n\
    \    if(i%10 == 1){\n      count += 1;\n    }\n    else if(i%10 == 0){\n     \
    \ count -= 1;\n    }\n  }\n  return count;\n}", "  var count = 0;\n  for(var i\
    \ = 1; i <= n; i++){\n    if(((n + 1) >= i) && ((n + 1) % i === 0)){\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  //Start with 1-digit positive integers\
    \ and count how many there are.\n  //If n is 1, return 1.\n  if(n>1){\n    var\
    \ cnt = 0;\n    for(i = 1; i<=n; i++){\n      if(is_pos_int_start(i))\n      \
    \  cnt += 1;\n    }\n    return cnt;\n  }\n  return 1;\n}\n", "\tvar i, k, count=0,\
    \ last=1;\n\tfor(i=0; i<=n; i++){\n\t\tk = (last << 1) | i;\n\t\tif((k-1) & i){\n\
    \t\t\tcount++;\n\t\t}\n\t\tlast=k;\n\t}\n\treturn count;\n}\n", "  var count =\
    \ 0;\n  for(var i = 1; i <= n; i++){\n    if((i & 1) == 1)\n      count++;\n \
    \ }\n  return count;\n}\n", "  if(n <= 0) return 0;\n  let cnt = 0;\n  if(n%10\
    \ == 1) cnt++;\n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n/Math.pow(10,i)\
    \ == n) return cnt;\n    if(n%Math.pow(10,i) == 0) cnt++;\n  }\n  return cnt;\n\
    }\n", "  // This is how we count the number of numbers that start\n  // or end\
    \ with 1\n  var count = 0;\n  for (var i = 1; i < n; i++){\n    if (n % i == 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
