name: HumanEval_145_order_by_points
language: js
results:
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sorted_nums = nums.sort(function (a,b){\n        let a_str = a.toString(),\
    \ b_str = b.toString();\n        let sumA = 0, sumB = 0;\n        for(let i =\
    \ 0; i < a_str.length; i++){\n            sumA += parseInt(a_str.charAt(i));\n\
    \        }\n        for(let i = 0; i < b_str.length; i++){\n            sumB +=\
    \ parseInt(b_str.charAt(i));\n        }\n        if(sumA < sumB){\n          \
    \  return -1;\n        }else if(sumA > sumB){\n            return 1;\n       \
    \ }else{\n            return 0;\n        }\n    });\n    return sorted_nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgk1rt727.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgk1rt727.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   //Write your code here.\n   let arr=[];\n   let map={};\n   for (let i=0;i<nums.length;i++){\n\
    \      let num=nums[i];\n      let mapnum=map[num];\n      if (mapnum==null){\n\
    \         mapnum={value:num,index:i};\n         arr[arr.length]=mapnum;\n    \
    \  }else{\n         let mapnum=map[num];\n         mapnum.value+=num;\n      \
    \   map[num]=mapnum;\n      }\n   }\n   return arr.sort((a,b)=>a.value-b);\n}\n\
    var nums=[];\nnums.push(-12);\nnums.push(-1);\nnums.push(-11);\nnums.push(1);\n\
    nums.push(11);\nnums.push(12);\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ { value: 1, index: 0 },\n  { value: 11,\
    \ index: 1 },\n  { value: -1, index: 2 },\n  { value: -11, index: 3 },\n  { value:\
    \ -12, index: 4 } ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp68ekeab8.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp68ekeab8.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    { value: 1, index: 0 },\n    { value:\
    \ 11, index: 1 },\n    { value: -1, index: 2 },\n    { value: -11, index: 3 },\n\
    \    { value: -12, index: 4 }\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tlet numsIndex = 0;\n\tlet sumOfNums = 0;\n\n\twhile (numsIndex < nums.length){\n\
    \t\tconst currentSumOfNums = nums.reduce((prev, curr) => {\n\t\t\treturn prev\
    \ + curr;\n\t\t}, 0);\n\t\tif (currentSumOfNums > sumOfNums){\n\t\t\tsumOfNums\
    \ = currentSumOfNums;\n\t\t}\n\t\tnumsIndex++;\n\t}\n\n\tconst result = [];\n\t\
    let currentSumOfNums = sumOfNums;\n\tlet currentIndex = -1;\n\n\twhile (currentIndex\
    \ < nums.length){\n\t\tcurrentSumOfNums = nums.reduce((prev, curr) => {\n\t\t\t\
    return prev + curr;\n\t\t}, 0);\n\t\tif (currentSumOfNums <= currentSumOfNums){\n\
    \t\t\tconst value = nums[currentIndex];\n\t\t\tresult.push(value);\n\t\t\tcurrentSumOfNums\
    \ += value;\n\t\t\tcurrentIndex++;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, 1, 11, -1, -11, -12 ]\n\nshould\
    \ equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpljp52fen.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpljp52fen.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, 1, 11, -1, -11, -12 ],\n  expected:\
    \ [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var new_nums = [];\n    var sum = 0;\n    for(var i=0;i<nums.length;i++){\n\
    \        sum += nums[i];\n        if(sum > 0){\n            new_nums.push(sum);\n\
    \            sum = 0;\n        }\n    }\n    return new_nums;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpujrr7lvg.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpujrr7lvg.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort(function(a, b){\n    var digits1 = get_digits(a),\n      \
    \  digits2 = get_digits(b);\n    \n    if(digits1 == digits2){\n      return a.index\
    \ - b.index;\n    }\n    \n    return digits1 - digits2\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvu4f6uhw.js:10\n    var digits1 = get_digits(a),\n            \
    \      ^\n\nReferenceError: get_digits is not defined\n    at /tmp/tmpvu4f6uhw.js:10:19\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpvu4f6uhw.js:9:15)\n\
    \    at test (/tmp/tmpvu4f6uhw.js:26:20)\n    at Object.<anonymous> (/tmp/tmpvu4f6uhw.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums.sort(function(a,b){\n    return (a+b) - (b*a);\n  });\n  return nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -12, -11, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp0tmd1dy3.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0tmd1dy3.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -12,\
    \ -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar a = nums.sort(function(a, b){return a - b;});\n\tvar result = [];\n\tvar\
    \ len = a.length;\n\tfor (var i = 0; i < len; i++){\n\t\tif (result[i]===undefined){\n\
    \t\t\tresult[i] = a[a.length - 1 - i];\n\t\t}\n\t\telse{\n\t\t\tresult[i] = result[i]\
    \ < a[a.length - 1 - i] ? result[i] + a[a.length - 1 - i] : result[i];\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgk2ssskp.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgk2ssskp.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        let a_sum = Math.floor(a/10);\n      \
    \  let b_sum = Math.floor(b/10);\n        if(a_sum != b_sum){\n            return\
    \ b_sum - a_sum;\n        }\n        return a - b;\n    });\n    return nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -12, -11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp2r28sa6p.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2r28sa6p.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -12, -11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort();\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar sum = 0;\n\t\t\
    for(var j = 0; j < nums.length; j++){\n\t\t\tif(i != j && nums[j] < nums[i]){\n\
    \t\t\t\tsum += nums[j];\n\t\t\t}\n\t\t}\n\t\tif(sum > 0){\n\t\t\tnums.splice(i,\
    \ 1, sum);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpx_t3oufk.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx_t3oufk.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sorted = nums.slice().sort((a,b)=>(a+b).toString(10).split('').sort((a,b)=>a-b).join(''))\n\
    \    if(sorted.length === 0) return sorted\n    let result = [sorted.shift()]\n\
    \    for(let i=0;i<nums.length;i++){\n        if(result[0] < nums[i]) result.unshift(nums[i])\n\
    \        else result.push(nums[i])\n    }\n    return result\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -12, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpotrndsu5.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpotrndsu5.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -12,\
    \ -1, -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sorted = 0;\n    const newArr = nums.map(function(num){\n        while(num\
    \ > 0){\n            sorted += Math.floor(num / 10);\n            num = num %\
    \ 10;\n        }\n        return sorted;\n    });\n    \n    return newArr.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var res = [];\n    var digitSums = {}; // key: sum, value: digit index\n\
    \    nums.forEach(function(n){\n        var digits = Math.floor(Math.log(n) /\
    \ Math.log(10));\n        var sum = 0;\n        for(var i = digits - 1; i >= 0;\
    \ i--){\n            sum += n % 10;\n            n = Math.floor(n/10);\n     \
    \   }\n        if(!digitSums[sum]) digitSums[sum] = [];\n        digitSums[sum].push(n);\n\
    \    });\n    for(var sum in digitSums){\n        var ordered = [];\n        var\
    \ index = 0;\n        for(var i = 0; i < digitSums[sum].length; i++){\n      \
    \      index = digitSums[sum][i] < nums.length ? digitSums[sum][i] : nums.length\
    \ - 1;\n            ordered.push(nums[index]);\n        }\n        res.push(ordered.reverse());\n\
    \    }\n    return res;\n}\n</textarea></div>\n\n    <script>\n      var editor\
    \ = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers:\
    \ true,\n        matchBrackets: true,\n        mode: \"text/x-csrc\",\n      \
    \  theme: \"neat\"\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/x-csrc</code>.</p>\n\n    <p>Development of the CodeMirror <a href=\"\
    codemirror.net/\">CodeMirror</a>\n    project, <a href=\"http://www.marijnhaverbeke.nl/codemirror\"\
    >version 3</a>\n    and <a href=\"http://www.eclipse.org/org/documents/ed2/index.html\"\
    >documentation, with a\n    <a href=\"http://www.eclipse.org/org/documents/ed2/reference\"\
    >reference</a>\n    to the Official C/C++ User's Manual of Style </a>\n    by\
    \ Christopher Kormann, used for\n    the development of The CodeMirror\n    <a\
    \ href=\"http://www.marijnhaverbeke.nl/info/\">CodeMirror</a>\n    editor.\n \
    \   \n    <p>CodeMirror adds two more project members to the\n    <a href=\"codemirror.net/stat.html\"\
    >statistics addon</a>:</p>\n    <dl>\n      <dt><code><strong>bigStats</strong>:\
    \ boolean</code></dt>\n      <dd>When activated, an addon can provide the same\
    \ information\n      on chunk and line basis.</dd>\n\n      <dt><code><strong>extraKeys</strong>:\
    \ object</code></dt>\n      <dd>Can be used to specify extra key bindings for\
    \ the editor,\n      alongside the ones defined\n      by <a href=\"manual.html#addKeyMap\"\
    ><code>addKeyMap</code></a>.</dd>\n\n      <dt><code><strong>scrollPastEnd</strong>:\
    \ boolean</code></dt>\n      <dd>When given, with the <code>CodeMirror-focused</code>\n\
    \      class applied, whenever scrollbars are drawn on the\n      \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz4r9_e36.js:32\n</textarea></div>\n^\n\nSyntaxError: Unexpected\
    \ token '<'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sum=0, tmp;\n\tvar num;\n\tfor(var i=0;i<nums.length;i++){\n\t\tnum=nums[i];\n\
    \t\tsum+=num*num;\n\t}\n\twhile(nums.length>1){\n\t\tnum=nums[nums.length-1];\n\
    \t\tsum+=num*num;\n\t\tnums.pop();\n\t}\n\treturn [num];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11 ]\n\nshould equal\n\n[ -1, -11, 1,\
    \ -12, 11 ]\n    at test (/tmp/tmp2buagnol.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2buagnol.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sorted = [];\n    var hash = {};\n    var sum = 0;\n    for (var i =\
    \ nums.length - 1; i >= 0; i--) {\n        var num = nums[i];\n        sum +=\
    \ num;\n        var digit = num.toString().replace(/[^0-9]/g, \"\");\n       \
    \ if (!hash[digit]) {\n            hash[digit] = num;\n            sorted.push(num);\n\
    \        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmp7p83wi23.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7p83wi23.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var order = [];\n  for (var i = 0; i < nums.length; i++){\n    var cur_nums\
    \ = nums.slice(0);\n    var cur_sum = 0;\n    for (var j = 0; j < cur_nums.length;\
    \ j++){\n      cur_sum += parseInt(cur_nums[j]);\n    }\n    order.push(cur_sum);\n\
    \  }\n  order = order.sort();\n  for (var j = 0; j < order.length; j++){\n   \
    \ if (order[j] != 0){\n      order[j] *= -1;\n    }\n  }\n  return order;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 12, 12, 12, 12, 12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpp2r7ikiu.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp2r7ikiu.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 12,\
    \ 12, 12, 12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var arr = [];\n  var sum = 0;\n  for(var i = 0; i < nums.length; i++){\n  \
    \  var digit = nums[i];\n    sum += digit;\n    arr.push(digit);\n  }\n  return\
    \ arr.sort((a, b) => sum - a < sum - b ? -1 : 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpczcdo0jz.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpczcdo0jz.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var ordered = [];\n  for (var i = 0; i < nums.length; i++) {\n    var num =\
    \ nums[i];\n    var digits = Math.floor(Math.log10(num));\n    var index = (digits\
    \ <= 1) ? digits: digits-2;\n    ordered.push(nums[index]);\n  }\n  return ordered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, undefined, undefined, undefined\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpmv7zzgc6.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmv7zzgc6.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, undefined, undefined, undefined\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  // Write your code here\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmppcqi0ipp.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppcqi0ipp.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sorted=[];\n  for(var i=0;i<nums.length;i++)\n  {\n    var total=0;\n \
    \   for(var j=0;j<nums[i].length;j++)\n    {\n      total+=nums[i][j];\n    }\n\
    \    sorted.push([total,i]);\n  }\n  sorted.sort();\n  for(var i=0;i<nums.length;i++)\n\
    \  {\n    sorted[i][1]=nums[i];\n  }\n  return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 0, 1 ], [ 0, 11 ], [ 0, -1 ], [ 0, -11\
    \ ], [ 0, -12 ] ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp5cux0jft.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5cux0jft.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 1 ], [ 0, 11 ], [ 0, -1 ], [ 0, -11\
    \ ], [ 0, -12 ] ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let points = new Array();\n  let point = new Array();\n  let index = 0;\n \
    \ let sum = 0;\n  \n  // Loop through each number in nums\n  for(let i = 0; i\
    \ < nums.length; i++){\n    // If the number has a digit, add it to sum\n    if(nums[i]\
    \ >= 0){\n      sum += nums[i];\n      // Otherwise, add its original index into\
    \ sum\n    } else {\n      sum += nums[i] * Math.pow(10, nums.length - i - 1);\n\
    \      points.push(index + 1);\n    }\n    \n    // Check if sum is larger than\
    \ current index\n    if(sum > index){\n      \n      // If the sum is larger than\
    \ the current index, then we have\n      // found a new largest sum, so store\
    \ that index\n      index = sum;\n    }\n  }\n  \n  // Return the points in order\n\
    \  return points;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 13, 13, 13 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmpw6_w0a81.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw6_w0a81.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 13, 13,\
    \ 13 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var len=nums.length,num;\n  var arr=new Array(len);\n  for(var i=0;i<len;i++){\n\
    \    num=\" \"+nums[i];\n    num=parseInt(num);\n    arr[i]=num;\n  }\n  arr.sort(function(a,b){\n\
    \    return  b-a;\n  });\n  return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp0nwr1ehl.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0nwr1ehl.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var newList = [];\n  for(var i = 0; i < nums.length; i++){\n    var index =\
    \ nums[i].toString().indexOf(\"\");\n    var num = (index % 2 == 0) ? nums[i]\
    \ - 1 : nums[i];\n    var n = nums[i].toString();\n    newList.push(num);\n  }\n\
    \  var list = new Set(newList);\n  newList = [];\n  for(i = 0; i < list.size;\
    \ i++){\n    var index = nums[i].toString().indexOf(\"\");\n    var num = (index\
    \ % 2 == 0) ? nums[i] - 1 : nums[i];\n    var n = nums[i].toString();\n    newList.push(num);\n\
    \  }\n  newList.sort();\n  return newList;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -13, -2, 0, 10 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnv7f78kl.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnv7f78kl.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -13,\
    \ -2, 0, 10 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let ans = [], sum = 0, n = nums.length;\n  for(let i = 0; i < n; i++){\n  \
    \  let item = nums[i];\n    sum += item;\n    ans.push(item);\n  }\n  for(let\
    \ i = 0; i < n; i++){\n    let item = nums[i];\n    if (sum > item || sum ===\
    \ item){\n      let j = i;\n      let x = sum - item;\n      while(j <= n && nums[j]\
    \ > x){\n        j++;\n      }\n      if (j === i){\n        ans.push(x);\n  \
    \    } else {\n        ans.push([nums[i], nums[j]]);\n      }\n      sum -= item;\n\
    \    } else {\n      ans.push(item);\n    }\n  }\n  return ans;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12, 1, 11, -1, -11, 0\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpplrut0u4.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpplrut0u4.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 11, -1, -11, -12,\n    1, 11, -1,\
    \ -11,   0\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sortable = [];\n  var index = 0;\n  for(var i=0; i<nums.length; i++){\n\
    \    var digits = nums[i].digits;\n    var n = parseInt(digits);\n    if(!sortable[index]){\n\
    \      sortable[index] = n;\n      index = index+1;\n    }else{\n      var prev\
    \ = sortable[index-1];\n      sortable[index - 1] = n;\n      if(prev != n){\n\
    \        sortable[index] = prev;\n        index = index-1;\n      }\n    }\n \
    \ }\n  return sortable;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ NaN, NaN, NaN, NaN, NaN ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpqau3ago0.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqau3ago0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN, NaN ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a, b) => {\n    const sumA = addPoints(a);\n    const sumB\
    \ = addPoints(b);\n    return sumA < sumB ? 1 : sumA > sumB ? -1 : sumA < 0 ?\
    \ -1 : 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplqurhitp.js:10\n    const sumA = addPoints(a);\n              \
    \   ^\n\nReferenceError: addPoints is not defined\n    at /tmp/tmplqurhitp.js:10:18\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmplqurhitp.js:9:15)\n\
    \    at test (/tmp/tmplqurhitp.js:21:20)\n    at Object.<anonymous> (/tmp/tmplqurhitp.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a,b){\n        return sum_of_digits(a) - sum_of_digits(b);\n\
    \    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmtre4lcr.js:10\n        return sum_of_digits(a) - sum_of_digits(b);\n\
    \        ^\n\nReferenceError: sum_of_digits is not defined\n    at /tmp/tmpmtre4lcr.js:10:9\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpmtre4lcr.js:9:10)\n\
    \    at test (/tmp/tmpmtre4lcr.js:20:20)\n    at Object.<anonymous> (/tmp/tmpmtre4lcr.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  if(nums.length == 0) return nums\n  nums.sort(function(a,b){\n    var sumA\
    \ = sumByDigit(a,nums)\n    var sumB = sumByDigit(b,nums)\n    if(sumA == sumB){\n\
    \      return nums.indexOf(a) - nums.indexOf(b)\n    }\n    return sumB - sumA\n\
    \  })\n  return nums\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8ber3a3i.js:11\n    var sumA = sumByDigit(a,nums)\n           \
    \    ^\n\nReferenceError: sumByDigit is not defined\n    at /tmp/tmp8ber3a3i.js:11:16\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp8ber3a3i.js:10:8)\n\
    \    at test (/tmp/tmp8ber3a3i.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8ber3a3i.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sorted_nums = [];\n    var min_sum = null;\n    var min_pos = null;\n\
    \    var i, pos, sum_of_digits = 0, sum = 0, digit, num;\n    for(i = 0; i < nums.length;\
    \ i++){\n        digit = nums[i];\n        pos = 0;\n        while(sum_of_digits\
    \ + digit >= 0){\n            sum_of_digits += digit;\n            pos += 1;\n\
    \        }\n        if(sum_of_digits < 0){\n            sum_of_digits += 10;\n\
    \            pos = 0;\n        }\n        sum = 0;\n        while(pos > 0){\n\
    \            num = sum_of_digits % 10;\n            sum = sum + num;\n       \
    \     sum_of_digits = sum_of_digits / 10;\n            pos -= 1;\n        }\n\
    \        sum = sum * 9;\n        if(min_sum == null || sum < min_sum){\n     \
    \       min_sum = sum;\n            min_pos = i;\n        }\n    }\n    return\
    \ sorted_nums.reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let nums = nums.sort((a,b) => Number(a.slice(1)) + Number(b.slice(1)))\n  return\
    \ nums\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzx1fnho_.js:9\n  let nums = nums.sort((a,b) => Number(a.slice(1))\
    \ + Number(b.slice(1)))\n      ^\n\nSyntaxError: Identifier 'nums' has already\
    \ been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n   \
    \ at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar arr = [];\n\tvar len = nums.length;\n\tvar max = 0;\n\tfor (var i=0; i <\
    \ len; i++) {\n\t\tvar n = nums[i];\n\t\tif (n > max) {\n\t\t\tmax = n;\n\t\t\
    }\n\t\telse {\n\t\t\tarr.push(n);\n\t\t}\n\t}\n\t\n\treturn arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmp1w4vl43n.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1w4vl43n.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var n = nums.length;\n    for(var i = n - 1;i>= 0;i--){\n        var num1\
    \ = nums[i];\n        var num2 = nums[n - i - 1];\n        if(num1 > num2){\n\
    \            var temp = num1;\n            num1 = num2;\n            num2 = temp;\n\
    \        }\n        var sum1 = 0;\n        var sum2 = 0;\n        for(var j =\
    \ i;j>=0;j--){\n            sum1 += nums[j];\n            sum2 += nums[j]*nums[j];\n\
    \        }\n        if(sum1 > sum2){\n            var temp = sum1;\n         \
    \   sum1 = sum2;\n            sum2 = temp;\n        }\n        var temp = sum1;\n\
    \        sum1 = sum2;\n        sum2 = temp;\n        var num3 = sum1 - (sum2*sum2\
    \ - (sum1^sum2)) / (sum2 - sum1);\n        var temp1 = num;\n        nums[n -\
    \ i] = num3;\n        nums[i] = temp1;\n    }\n    return nums;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nI liked this answer the best because it was very concise\
    \ and easy to understand. Though I wouldn't call this \"the simplest solution\"\
    , it's a great example of what one could do with Javascript Arrays.\n<|/ c |>\n\
    <| c |>\nI edited my answer to fix a bug in the second function. Thanks for pointing\
    \ it out. Also, the first function is just a short version of my second function.\n\
    <|/ c |>\n<| c |>\nNice use of recursion! Just a question: why did you use nums[i]\
    \ - nums[0] instead of Math.sign(nums[i] + nums[0])?\n<|/ c |>\n<| c |>\nBecause\
    \ Math.sign only takes one parameter, and it doesn't work on negative numbers\
    \ so I used Math.sign(nums[i] + nums[0]). It should probably be Math.sign(Math.abs(nums[i])\
    \ + Math.abs(nums[0]))\n<|/ c |>\n<| c |>\nThis implementation is wrong. I'm trying\
    \ my best to figure out why.\n<|/ c |>\n<| a tags=javascript,sorting dscore=2\
    \ |>\nThis question is a little bit old, but there is a more concise and efficient\
    \ solution to this problem using a variation on the bubble sort algorithm.\n<code>\n\
    var sort = function(nums) {\n    var swap = function(i, j){\n        var tmp =\
    \ nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    };\n    var\
    \ n = nums.length;\n    var i = 0;\n    while (i < n-1) {\n        var swapped\
    \ = false;\n        for (var j = 0; j < n - i - 1; j++) {\n            if (nums[j]\
    \ > nums[j+1]) {\n                swap(j, \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnc0msxtv.js:39\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let result = [];\n  nums.map(x => {\n    let sum = 0;\n    while (x > 0) {\n\
    \      sum += x % 10;\n      x /= 10;\n    }\n    if (sum > 0) {\n      result.push(x);\n\
    \    }\n  });\n  return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0 ]\n\nshould equal\n\n[ -1, -11, 1,\
    \ -12, 11 ]\n    at test (/tmp/tmp5oxgjj8z.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5oxgjj8z.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var i, sum = 0, max=0, temp;\n    var len = nums.length;\n    var results\
    \ = [];\n    for(i=0;i<len;i++){\n        temp = nums[i];\n        if(temp > max){\n\
    \            max = temp;\n        }\n        if(temp + sum > sum){\n         \
    \   sum = sum + temp;\n        }\n        results.push(temp);\n    }\n    for(i=0;i<len;i++){\n\
    \        results[i] = results[i] - max + sum;\n    }\n    return results;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 12, 0, -10, -11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpg4f3hw96.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg4f3hw96.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 12, 0,\
    \ -10, -11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        return parseInt(a) - parseInt(b);\n  \
    \  });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpi1z9ig1w.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi1z9ig1w.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sortArr = [], sumArr = [], numArr = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sumArr[i] = nums[i].toString();\n        sumArr[i] = sumArr[i].replace(/^(-?\\\
    d+)$/, '$1');\n        numArr[i] = parseInt(sumArr[i], 10);\n    }\n    numArr.sort();\n\
    \    for(let i = 0; i < numArr.length; i++){\n        sortArr[i] = numArr[i];\n\
    \    }\n    return sortArr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_k898mxn.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_k898mxn.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums = nums.sort(function (a, b){\n        return a[0] - b[0];\n    });\n\
    \    var result = [];\n    var flag = false;\n    var cur = 0;\n    for(var i\
    \ = 0; i < nums.length; i++){\n        cur += nums[i][1];\n        if(cur > 0){\n\
    \            result.push([cur, i, nums[i]]);\n        }else{\n            flag\
    \ = true;\n        }\n    }\n    if(flag){\n        for(var i = 0; i < result.length;\
    \ i++){\n            num = result[i][1];\n            tmp = [];\n            for(var\
    \ j = 0, len = num.length; j < len; j++){\n                tmp[num[j].order] =\
    \ num[j];\n            }\n            tmp.sort(function (a, b){\n            \
    \    return b[0] - a[0];\n            });\n            result[i] = tmp;\n    \
    \    }\n        return result;\n    }else{\n        return nums;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpaczqrfdc.js:46:10)\n    at Object.<anonymous> (/tmp/tmpaczqrfdc.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar len = nums.length;\n\tif (len == 0) return [];\n\n\tvar res = [];\n\tvar\
    \ maxLen = 0;\n\n\tfor (var i = 0; i < len; i++){\n\t\tvar num = nums[i];\n\t\t\
    var index = sum_to_digits(num);\n\t\tvar digit = num % Math.pow(10, index);\n\t\
    \tres.push(num);\n\t\tmaxLen = Math.max(maxLen, index);\n\t}\n\n\tres = res.sort(sort_by_digits(maxLen));\n\
    \t\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsc4p8d_9.js:17\n\t\tvar index = sum_to_digits(num);\n\t\t     \
    \       ^\n\nReferenceError: sum_to_digits is not defined\n    at order_by_points\
    \ (/tmp/tmpsc4p8d_9.js:17:15)\n    at test (/tmp/tmpsc4p8d_9.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpsc4p8d_9.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums = nums.slice();\n  nums.sort(function(a, b) {\n    return sumDigits(a)\
    \ - sumDigits(b);\n  });\n  return nums;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkemd1i1x.js:11\n    return sumDigits(a) - sumDigits(b);\n    ^\n\
    \nReferenceError: sumDigits is not defined\n    at /tmp/tmpkemd1i1x.js:11:5\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpkemd1i1x.js:10:8)\n\
    \    at test (/tmp/tmpkemd1i1x.js:20:20)\n    at Object.<anonymous> (/tmp/tmpkemd1i1x.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sum = 0;\n  var list = [];\n  var len = nums.length;\n  for(var i = 0;\
    \ i<len; i++){\n    sum = sum + nums[i]%10;\n    list.push(nums[i]);\n  }\n  for(var\
    \ i = len-1; i>0; i--){\n    sum = sum - nums[i]%10;\n    list.unshift(nums[i]);\n\
    \  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, -1, -11, -12, 1, 11, -1, -11, -12\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpom8qd8zx.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpom8qd8zx.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n     11, -1, -11, -12,\n      1, 11, \
    \ -1, -11,\n    -12\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sorted_nums = [];\n  var sorted_arr = [];\n  for (var i = 0; i < nums.length;\
    \ i++){\n    var current_sum_of_digits = nums[i]\n    var current_index = 0;\n\
    \    while (current_sum_of_digits != 0){\n      if (sorted_nums[current_index]\
    \ == undefined){\n        sorted_nums[current_index] = nums[i];\n      } else\
    \ {\n        var digit_index = sorted_nums[current_index].indexOf(0);\n      \
    \  sorted_nums[current_index] = sorted_nums[current_index].slice(0,digit_index)\
    \ + nums[i] + sorted_nums[current_index].slice(digit_index);\n      }\n      current_index++;\n\
    \      current_sum_of_digits -= Math.floor(current_sum_of_digits / 10);\n    }\n\
    \  }\n  for (var i = 0; i < sorted_nums.length; i++){\n    sorted_arr.push(sorted_nums[i]);\n\
    \  }\n  return sorted_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "\n<--- Last few GCs --->\n\n[76498:0x5ed0b60]     1081 ms: Scavenge 766.9\
    \ (800.0) -> 766.9 (800.0) MB, 24.7 / 0.0 ms  (average mu = 1.000, current mu\
    \ = 1.000) allocation failure \n[76498:0x5ed0b60]     1493 ms: Scavenge 1149.5\
    \ (1182.5) -> 1149.5 (1182.5) MB, 36.5 / 0.0 ms  (average mu = 1.000, current\
    \ mu = 1.000) allocation failure \n[76498:0x5ed0b60]     2109 ms: Scavenge 1723.3\
    \ (1756.3) -> 1723.3 (1756.3) MB, 55.3 / 0.0 ms  (average mu = 1.000, current\
    \ mu = 1.000) allocation failure \n\n\n<--- JS stacktrace --->\n\nFATAL ERROR:\
    \ invalid array length Allocation failed - JavaScript heap out of memory\n 1:\
    \ 0xa04200 node::Abort() [node]\n 2: 0x94e4e9 node::FatalError(char const*, char\
    \ const*) [node]\n 3: 0xb797be v8::Utils::ReportOOMFailure(v8::internal::Isolate*,\
    \ char const*, bool) [node]\n 4: 0xb79b37 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*,\
    \ char const*, bool) [node]\n 5: 0xd343c5  [node]\n 6: 0xd0cf05  [node]\n 7: 0xe9568e\
    \  [node]\n 8: 0xe957da  [node]\n 9: 0x1032b83 v8::internal::Runtime_GrowArrayElements(int,\
    \ unsigned long*, v8::internal::Isolate*) [node]\n10: 0x14011f9  [node]\n"
  exit_code: -6
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sum = 0;\n  var res = [];\n  for (var i = 0; i < nums.length; i++){\n \
    \   if (nums[i] < 0) nums[i] += 10;\n    res.push(nums[i]);\n    sum += nums[i];\n\
    \  }\n  res.sort(function(a, b){\n    return sum - a > b ? 1 : sum - a < b ? -1\
    \ : 0;\n  });\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 9, 11, -1, -2 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpa68xo2x9.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa68xo2x9.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9, 11,\
    \ -1, -2 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        return Math.abs(a - b); //Sort them based\
    \ on their absolute value.\n    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp4l3gkew7.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4l3gkew7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tlet sorted_nums = [];\n\tlet current_sum = 0;\n\tlet current_index = 0;\n\t\
    for(let num of nums){\n\t\tcurrent_sum += num;\n\t\tif(sorted_nums.find(function(el){return\
    \ el === current_sum;}) === undefined){\n\t\t\tsorted_nums.push(num);\n\t\t}else{\n\
    \t\t\tlet index = sorted_nums.indexOf(current_sum);\n\t\t\tsorted_nums.splice(index,\
    \ 1);\n\t\t\tsorted_nums.splice(index, 0, num);\n\t\t}\n\t}\n\tsorted_nums = sorted_nums.sort((a,b)\
    \ => {return a-b});\n\treturn sorted_nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpjzw7n52q.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjzw7n52q.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a,b){\n        var ret = a.value - b.value;\n        return\
    \ ret == 0 ? a.index - b.index : ret;\n    });\n    return nums;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp918nu846.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp918nu846.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sortedArray = nums.sort((a,b)=>{\n        let xSum = (a < b)?a:b;\n \
    \       let ySum = (a < b)?b:a;\n        let numsSum = xSum.toString().split('').reduce((a,b)=>a+b,0);\n\
    \        return ySum - numsSum;\n    });\n    return sortedArray;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpz680htx2.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz680htx2.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    return nums.sort(function (a, b){\n        return Math.abs(a) + Math.abs(b)\
    \ - Math.abs(parseInt(a + b, 10));\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpuubjvbpe.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuubjvbpe.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar result = nums.slice()\n\tresult.sort(function(a,b){\n\t\tvar sumA = sum_digits(a)\n\
    \t\tvar sumB = sum_digits(b)\n\t\treturn sumA - sumB\n\t})\n\treturn result\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphdw_kt_3.js:11\n\t\tvar sumA = sum_digits(a)\n\t\t           ^\n\
    \nReferenceError: sum_digits is not defined\n    at /tmp/tmphdw_kt_3.js:11:14\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmphdw_kt_3.js:10:9)\n\
    \    at test (/tmp/tmphdw_kt_3.js:23:20)\n    at Object.<anonymous> (/tmp/tmphdw_kt_3.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var result = [];\n  nums.forEach(function(num){\n    if(num < 0){\n      num\
    \ = -num;\n    }\n    var sum = 0;\n    while(num){\n      sum += num % 10;\n\
    \      num = Math.floor(num / 10);\n    }\n    result.push(sum);\n  });\n  result.sort(function(a,\
    \ b){\n    return a - b;\n  });\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1, 2, 2, 3 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmpfc_5hdz9.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfc_5hdz9.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 2, 3 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var points = []; //\u4FDD\u5B58\u6240\u6709\u6570\u5B57\u7684\u96C6\u5408\
    \n    for(var i=0;i<nums.length;i++){\n        points.push({\n            num:nums[i],\n\
    \            index:i\n        });\n    }\n    points.sort(function(a,b){\n   \
    \     return a.num-b.num;\n    });\n    var output = [];\n    for(var i=0;i<points.length;i++){\n\
    \        output.push(points[points[i].index]);\n    }\n    return output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ { num: 11, index: 1 },\n  { num: 1, index:\
    \ 0 },\n  { num: -1, index: 2 },\n  { num: -12, index: 4 },\n  { num: -11, index:\
    \ 3 } ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpen03e1q2.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpen03e1q2.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    { num: 11, index: 1 },\n    { num:\
    \ 1, index: 0 },\n    { num: -1, index: 2 },\n    { num: -12, index: 4 },\n  \
    \  { num: -11, index: 3 }\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var numsSorted= [];\n    numsSorted.push(nums[0]);\n    for (var i=1, len=nums.length;\
    \ i<len; i++){\n        var digit= nums[i]%10;\n        if (digit>0){\n      \
    \      digit= 10 - digit;\n        }\n        numsSorted.push(digit);\n    }\n\
    \    return numsSorted;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 9, -1, -1, -2 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpahjfmnyp.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpahjfmnyp.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 9, -1,\
    \ -1, -2 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var arr = [];\n    var temp;\n    var index = 1;\n    for (var i in nums){\n\
    \        temp = nums[i];\n        arr.push(temp);\n        index += temp.toString().length;\n\
    \    }\n    arr.sort(function(a, b){\n        if (a < b){\n            return\
    \ -1;\n        }\n        else if (a > b){\n            return 1;\n        }\n\
    \        else{\n            return 0;\n        }\n    });\n    return arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpvar_ubei.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvar_ubei.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums = nums.sort(function(a, b){\n\t\t// Get a to compare to b\n\t\tvar as_string\
    \ = a.toString();\n\t\tvar bs_string = b.toString();\n\n\t\t// Convert strings\
    \ to numbers (if not already)\n\t\ta = as_string > bs_string ? as_string - bs_string\
    \ : bs_string - as_string;\n\n\t\t// Get a sum\n\t\tvar sumOfDigits = a.reduce(function(sum,\
    \ value){\n\t\t\treturn sum + Number(value);\n\t\t}, 0);\n\n\t\t// Return -1 if\
    \ a < b, 1 if a > b and 0 if a = b\n\t\treturn sumOfDigits > 0 ? sumOfDigits :\
    \ a[0] - b[0];\n\t});\n\n\t// Return an ordered copy of the given list\n\treturn\
    \ nums.slice();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp92pr6fmn.js:18\n\t\tvar sumOfDigits = a.reduce(function(sum, value){\n\
    \t\t                    ^\n\nTypeError: a.reduce is not a function\n    at /tmp/tmp92pr6fmn.js:18:23\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp92pr6fmn.js:9:14)\n\
    \    at test (/tmp/tmp92pr6fmn.js:35:20)\n    at Object.<anonymous> (/tmp/tmp92pr6fmn.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var i, j, a, b, sum, digits, j, temp = [];\n    for(i = 0; i < nums.length;\
    \ i++){\n        digits = nums[i].toString().split('');\n        sum = 0;\n  \
    \      for(j = 0; j < digits.length; j++){\n            sum += parseInt(digits[j]);\n\
    \        }\n        temp.push(sum);\n    }\n    temp.sort(function(a, b){\n  \
    \      return b-a;\n    });\n    for(i = 0; i < nums.length; i++){\n        digits\
    \ = nums[i].toString().split('');\n        for(j = 0; j < digits.length; j++){\n\
    \            b = parseInt(digits[j]);\n            a = temp[j];\n            if(isNaN(a)){\n\
    \                a = -1;\n            }\n            if(isNaN(b)){\n         \
    \       b = -1;\n            }\n            if(b > a){\n                temp[j].splice(j,\
    \ 1);\n                nums.splice(i, 1);\n                j--;\n            \
    \    i--;\n            }\n        }\n    }\n    return nums;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9ya1l0yk.js:33\n                temp[j].splice(j, 1);\n       \
    \                 ^\n\nTypeError: temp[j].splice is not a function\n    at order_by_points\
    \ (/tmp/tmp9ya1l0yk.js:33:25)\n    at test (/tmp/tmp9ya1l0yk.js:47:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ya1l0yk.js:55:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums = nums.sort(function(a,b){return a-b;});\n\tnums = nums.map(function(n){\
    \ return Math.abs(n); });\n\treturn nums.filter(function(n){ return n > 0; });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 12, 11, 1, 1, 11 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp71bwet2r.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp71bwet2r.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 11,\
    \ 1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar len = nums.length;\n\tvar minLen = Number.MAX_VALUE;\n\tvar i, maxSum;\n\
    \tfor(i = 0; i < len; i++){\n\t\tmaxSum = 0;\n\t\tfor(var j = 0; j < len; j++){\n\
    \t\t\tmaxSum += nums[j];\n\t\t\tif(maxSum > 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif(maxSum > 0){\n\t\t\tfor(var j = 0; j < len; j++){\n\t\t\t\tif(nums[j]\
    \ > 0){\n\t\t\t\t\tnums[j] -= maxSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\
    var ans = [];\n\tfor(i = 0; i < len; i++){\n\t\tans.push(nums[i]);\n\t}\n\treturn\
    \ ans;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpyuqypvr7.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyuqypvr7.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let numsArray = nums.sort((a,b) => {\n    return parseInt(a.substring(0, 1))\
    \ + parseInt(b.substring(0, 1))\n  })\n  return numsArray;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcreq43nf.js:10\n    return parseInt(a.substring(0, 1)) + parseInt(b.substring(0,\
    \ 1))\n                      ^\n\nTypeError: a.substring is not a function\n \
    \   at /tmp/tmpcreq43nf.js:10:23\n    at Array.sort (<anonymous>)\n    at order_by_points\
    \ (/tmp/tmpcreq43nf.js:9:24)\n    at test (/tmp/tmpcreq43nf.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpcreq43nf.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var result = [];\n  nums.forEach(function(num){\n    var temp = num.toString();\n\
    \    var sum_digits = 1;\n    for(var i=0; i < temp.length; i++){\n      var cur_digit\
    \ = temp.charAt(i) - 0;\n      sum_digits *= 10;\n      sum_digits += cur_digit;\n\
    \    }\n    var index = result.indexOf(sum_digits);\n    if(index == -1){\n  \
    \    result.push(sum_digits);\n    }\n    else{\n      result[index] = num;\n\
    \    }\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 111, NaN, NaN, NaN ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp0h7x7ynw.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0h7x7ynw.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 111,\
    \ NaN, NaN, NaN ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums = nums.sort(function(a, b) {\n        a = Math.abs(a);\n        b =\
    \ Math.abs(b);\n        return b - a; \n    }); \n\n    return nums;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, 11, -11, 1, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpx6874z5v.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx6874z5v.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, 11,\
    \ -11, 1, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  //\n  // Write your code here.\n  //\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpp96ikhu7.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp96ikhu7.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var len = nums.length;\n    var mins = nums.map(function(num){return Math.floor(num);});\n\
    \    var sorted = [];\n    while(len--){\n        var minIndex = mins.indexOf(Math.min(...mins));\n\
    \        sorted.push(nums[minIndex]);\n        mins.splice(minIndex, 1);\n   \
    \ }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpouc4n07x.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpouc4n07x.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sorted = nums.concat().sort();\n\tvar reversed = sorted.reverse();\n\treturn\
    \ reversed;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -12, -11, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpiq4_77i0.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiq4_77i0.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -12,\
    \ -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  const sorted = [];\n  const sums = [];\n  let i;\n  for(i=0; i<nums.length;\
    \ i++){\n    sums.push(0);\n    for(let j=0; j<nums[i].length; j++){\n      sums[i]\
    \ += nums[i][j];\n    }\n  }\n  for(i=0; i<nums.length; i++){\n    for(let j=0;\
    \ j<nums[i].length; j++){\n      if(sums[i] < sums[j]){\n        sorted.push(nums[i][j]);\n\
    \        sums[j] = sums[i];\n      }\n    }\n  }\n  return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpb9rf_wvh.js:33:10)\n    at Object.<anonymous> (/tmp/tmpb9rf_wvh.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums.sort(function(a, b){\n    return parseInt(a.toString().split('').reduceRight(function(a,b){return\
    \ a*b}) + b.toString().split('').reduceRight(function(a,b){return a*b}),10)\n\
    \  })\n  return nums\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpzzwunsgc.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzzwunsgc.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar len = nums.length;\n\tif(len == 0) return nums;\n\tnums.sort(function(a,\
    \ b){return a+b});\n\tvar ret = [];\n\tvar curSum = 0;\n\tvar first = true;\n\t\
    for(var i=0;i<len;i++){\n\t\tif(!first){\n\t\t\tret[i] = nums[i];\n\t\t} else\
    \ {\n\t\t\tcurSum = 0;\n\t\t\tfirst = false;\n\t\t}\n\t\tcurSum += nums[i];\n\t\
    \tif(curSum > 0){\n\t\t\tret.push(nums[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 1, 11, -11, -1 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpardduo8j.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpardduo8j.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 11, -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(n1, n2){\n\t\tvar digit1 = n1.toString().split('').reverse().reduce(function(sum,\
    \ n){\n\t\t\treturn sum + Number(n);\n\t\t}, 0);\n\t\tvar digit2 = n2.toString().split('').reverse().reduce(function(sum,\
    \ n){\n\t\t\treturn sum + Number(n);\n\t\t}, 0);\n\t\treturn digit1 - digit2;\n\
    \t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp13zi_o3u.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp13zi_o3u.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var len=nums.length,\n      points=new Array(len),\n      i,\n      sum,\n\
    \      point,\n      order;\n\n  for(i=0;i<len;i++){\n    sum=0;\n    point=nums[i];\n\
    \    for(;point;point>>=1){\n      sum+=point;\n    }\n    points[i]=sum;\n  }\n\
    \n  points=points.sort(function(a,b){return b-a;});\n  order = new Array(len);\n\
    \  for(i=0;i<len;i++){\n    order[i] = i;\n  }\n  return function(i){\n    return\
    \ points[order[i]];\n  };\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums = nums.slice();\n    nums.sort(function(a, b){\n        var i = Number(a)\
    \ - Number(b);\n        if (i !== 0){\n            return i;\n        }\n    \
    \    return -i;\n    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgwtr9nxk.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgwtr9nxk.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  // Write your code here\n  let sum = 0\n  let arr = []\n  for (let num of nums){\n\
    \    sum += num\n    arr.push(sum)\n  }\n  arr = arr.sort((a, b) => a-b)\n  \n\
    \  let index = arr.indexOf(sum);\n  arr = arr.sort((a, b) => b-a)\n  \n  let temp\
    \ = nums[index]\n  nums[index] = nums[arr.indexOf(temp)]\n  nums[arr.indexOf(temp)]\
    \ = temp;\n  return nums\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, 11, 1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpmia3uus9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmia3uus9.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, 11,\
    \ 1, -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let res = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    sum += nums[i];\n    res.push(i);\n  }\n  res.sort((a, b) => sum - nums[b]\
    \ - nums[a]);\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4, 1, 0 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmp6cuj6og3.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6cuj6og3.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 1, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   nums = nums.sort(function(a, b){\n        return b-a;\n   });\n   return nums.sort(function(a,\
    \ b){\n        return a-b;\n   });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpuj3aks7i.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuj3aks7i.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    const sums = nums.map(n => n.toString().split('').map(Number).reduce((acc,\
    \ d) => acc + d, 0))\n    const index = {}\n    sums.forEach((s, i) => index[s]\
    \ = i)\n    return nums.sort((a, b) => index[a] - index[b])\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqisix14.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqisix14.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(a, b){\n\t\treturn ((a < 0) ? (b - a) * -1 : (a > b) ? 1\
    \ : 0);\n\t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnq7_msqe.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnq7_msqe.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar i, sum = 0;\n\tfor(i=0;i<nums.length;i++){\n\t\tsum += nums[i];\n\t}\n\t\
    var result = [];\n\tfor(i=0;i<nums.length;i++){\n\t\tresult.push([nums[i], sum]);\n\
    \t}\n\tresult.sort(sort_by_sum);\n\tfor(i=0;i<nums.length;i++){\n\t\tresult.push([nums[i],\
    \ sum]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw87srjh_.js:17\n\tresult.sort(sort_by_sum);\n\t            ^\n\n\
    ReferenceError: sort_by_sum is not defined\n    at order_by_points (/tmp/tmpw87srjh_.js:17:14)\n\
    \    at test (/tmp/tmpw87srjh_.js:29:20)\n    at Object.<anonymous> (/tmp/tmpw87srjh_.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var results = [];\n    nums.forEach(function(num){\n        var result =\
    \ 0;\n        while (num > 0) {\n            result = result * 10 + (num % 10);\n\
    \            num = Math.floor(num / 10);\n        }\n        results.push(result);\n\
    \    });\n    return results;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, 0, 0, 0 ]\n\nshould equal\n\n[\
    \ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp18jeqxzd.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp18jeqxzd.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, 0,\
    \ 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(a, b){\n\t\treturn to_number(add_digits(a)) > to_number(add_digits(b));\n\
    \t});\n\treturn nums;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpox7cf0vv.js:10\n\t\treturn to_number(add_digits(a)) > to_number(add_digits(b));\n\
    \t\t^\n\nReferenceError: to_number is not defined\n    at /tmp/tmpox7cf0vv.js:10:3\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpox7cf0vv.js:9:7)\n\
    \    at test (/tmp/tmpox7cf0vv.js:19:20)\n    at Object.<anonymous> (/tmp/tmpox7cf0vv.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var copy = nums.slice();\n  nums = [];\n  copy.forEach(function(item){\n  \
    \  nums.push(item.point);\n  })\n  copy.sort(function(a, b){\n    return a.point\
    \ - b.point;\n  });\n  return nums;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ undefined ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpruadqc4x.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpruadqc4x.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ undefined ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var len = nums.length\n    if (len == 0) return []\n    var i = 0\n    var\
    \ sum = 0, carry = 0, tmp\n    var res = []\n    for (; i < len; ++i) {\n    \
    \  tmp = nums[i] % 10\n      tmp += (10 * carry)\n      carry = parseInt(nums[i]\
    \ / 10)\n      sum += tmp\n      res.push(sum < 0 ? sum + 10 : sum)\n    }\n \
    \   return res\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 11, 10, 8 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpsokfgvwk.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsokfgvwk.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 11,\
    \ 10, 8 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums = nums.sort((a,b) => {\n        if (a < b){\n            return 1;\n\
    \        }\n        if (a > b){\n            return -1;\n        }\n        return\
    \ 0;\n    });\n    var res = [];\n    var last = -1;\n    for(var i = 0; i<nums.length;i++){\n\
    \        var num = nums[i];\n        res.push(num);\n        if (num === 0){\n\
    \            break;\n        }\n        if (num % 10 !== 0){\n            if(last\
    \ !== -1){\n                res.push(last);\n            }\n            last =\
    \ num;\n        }\n    }\n    if (last !== -1){\n        res.push(last);\n   \
    \ }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, 11, -1, 1, -11, -12, -11, -12 ]\n\
    \nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphy15boyf.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmphy15boyf.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n     11,   1,  11,  -1,\n      1, -11,\
    \ -12, -11,\n    -12\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var result = [];\n  nums.forEach(function(num){\n    var sum = 0;\n    var\
    \ digits = String(num).split(\"\");\n    digits.forEach(function(digit){\n   \
    \   sum += parseInt(digit);\n    });\n    var index = result.indexOf(sum);\n \
    \   if (index < 0){\n      result.push(sum);\n    } else {\n      result[index]\
    \ = num;\n    }\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, NaN, NaN, NaN ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpa0_tz6h4.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa0_tz6h4.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, NaN,\
    \ NaN, NaN ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var arr = [];\n  var index = 0;\n  var point = 0;\n  for(var i = 0; i<nums.length;\
    \ i++){\n    if(!isNum(nums[i])){\n      var reordered = arr.slice();\n      var\
    \ numsIndex = reordered.indexOf(i);\n      reordered[numsIndex] = nums[i];\n \
    \     arr.push(reordered);\n    }\n  }\n  console.log(arr);\n  for(var i = 0;\
    \ i<arr.length; i++){\n    for(var j = 0; j < arr[i].length; j++){\n      if(arr[i][j]\
    \ > point){\n        point += arr[i][j];\n        arr[i][j] = point;\n       \
    \ console.log(point, arr);\n      }\n    }\n  }\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcxydfq48.js:13\n    if(!isNum(nums[i])){\n    ^\n\nReferenceError:\
    \ isNum is not defined\n    at order_by_points (/tmp/tmpcxydfq48.js:13:5)\n  \
    \  at test (/tmp/tmpcxydfq48.js:38:20)\n    at Object.<anonymous> (/tmp/tmpcxydfq48.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sums = [];\n    for (let i = 0; i < nums.length; i++){\n        sums[i]\
    \ = (nums[i] * 10);\n    }\n    let results = [];\n    let index = 0;\n    while\
    \ ( index < sums.length){\n        let sum = 0;\n        let next_index = index\
    \ + 1;\n        let sumOfNextIndex = sums[next_index];\n        while (sumOfNextIndex){\n\
    \            sum += sumOfNextIndex;\n            next_index++;\n            sumOfNextIndex\
    \ = sums[next_index];\n        }\n        results.push(nums[index]);\n       \
    \ index = next_index;\n    }\n    return results;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1 ]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmphtq4_eka.js:35:10)\n    at Object.<anonymous> (/tmp/tmphtq4_eka.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ -1, -11, 1, -12, 11\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  const obj = {};\n  nums.forEach(function(num){\n    if (num in obj){\n    \
    \  obj[num].count++;\n      obj[num].sum += num;\n    } else {\n      obj[num]\
    \ = {\n        sum: num,\n        count: 1,\n      };\n    }\n  });\n  const arr\
    \ = [];\n  for (let num in obj){\n    arr.push(obj[num]);\n  }\n  arr.sort((a,\
    \ b) => {\n    return a.sum - b.sum;\n  });\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ { sum: -12, count: 1 },\n  { sum: -11,\
    \ count: 1 },\n  { sum: -1, count: 1 },\n  { sum: 1, count: 1 },\n  { sum: 11,\
    \ count: 1 } ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpducne1ti.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpducne1ti.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    { sum: -12, count: 1 },\n    { sum:\
    \ -11, count: 1 },\n    { sum: -1, count: 1 },\n    { sum: 1, count: 1 },\n  \
    \  { sum: 11, count: 1 }\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a, b) => {\n    return sum(a) - sum(b);\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbbh5e0mi.js:10\n    return sum(a) - sum(b);\n    ^\n\nReferenceError:\
    \ sum is not defined\n    at /tmp/tmpbbh5e0mi.js:10:5\n    at Array.sort (<anonymous>)\n\
    \    at order_by_points (/tmp/tmpbbh5e0mi.js:9:15)\n    at test (/tmp/tmpbbh5e0mi.js:19:20)\n\
    \    at Object.<anonymous> (/tmp/tmpbbh5e0mi.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var result = nums.slice();\n    var n = result[0];\n    for (var i = 1; i\
    \ < result.length; i++) {\n        var item = result[i];\n        n = compare_sum(item,\
    \ n, item);\n        if (n > 0) result.splice(i, 0, n);\n        else result.splice(i,\
    \ 0, item);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg54bn10p.js:13\n        n = compare_sum(item, n, item);\n     \
    \   ^\n\nReferenceError: compare_sum is not defined\n    at order_by_points (/tmp/tmpg54bn10p.js:13:9)\n\
    \    at test (/tmp/tmpg54bn10p.js:25:20)\n    at Object.<anonymous> (/tmp/tmpg54bn10p.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var copy_list = nums.slice();\n    var sorted_list = [];\n    var sum = 0;\n\
    \    var prev_sum = 0;\n    var index = 0;\n    while(index < copy_list.length){\n\
    \        var item = copy_list[index];\n        sum += item;\n        prev_sum\
    \ = sum;\n        while(sum >= 10){\n            sum -= 10;\n            sorted_list.unshift(copy_list.splice(index,1)[0]);\n\
    \            sum++;\n            index++;\n        }\n        if(sum === 0 &&\
    \ prev_sum === 0) return sorted_list;\n        else if(sum > 0 && sum < 10) return\
    \ sorted_list.push(copy_list.splice(index,1)[0]);\n        else if(sum === 0 &&\
    \ prev_sum < 10) return sorted_list.unshift(copy_list[index]);\n        else if(sum\
    \ < 0 && sum > -10) return sorted_list.push(copy_list.splice(index,1)[0]);\n \
    \       else if(sum > 0 && sum < -10) return sorted_list.unshift(copy_list[index]);\n\
    \        index++;\n    }\n    return sorted_list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmp1wzs1971.js:39:10)\n    at Object.<anonymous> (/tmp/tmp1wzs1971.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var _sum = 0;\n  var _max = 0;\n  var _min = 0;\n  var _res = [];\n  var _cur\
    \ = 0;\n  for(var i = 0; i<nums.length; i++){\n    var _num = nums[i];\n    _sum\
    \ += _num;\n    var _max = _num > _max ? _num : _max;\n    _min = _num < _min\
    \ ? _num : _min;\n    _res.push(_num);\n  }\n  \n  while(_sum > 0){\n    var _index\
    \ = _indexes[(_sum+_min)/(_max-_min)];\n    _res.splice(_index, 1);\n    _sum\
    \ -= _sum/_num;\n    _sum += _sum%_num;\n    _min = _max < _min ? _max : _min;\n\
    \    _max = _sum > _max ? _sum : _max;\n    _cur = _sum;\n    _sum = 0;\n    \n\
    \    for(var i=0; i<_res.length; i++){\n      _sum += _res[i];\n      if(_sum\
    \ > _cur){\n        var _index = _indexes[(_sum+_min)/(_max-_min)];\n        _res.splice(_index,\
    \ 0, _res[i]);\n        _sum -= _sum/_num;\n        _sum += _sum%_num;\n     \
    \   _min = _max < _min ? _max : _min;\n        _max = _sum > _max ? _sum : _max;\n\
    \        _cur = _sum;\n      }\n    }\n  }\n  return _res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp9buwk70j.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9buwk70j.js:61:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums = nums.sort();\n\tfor (var i = 0; i < nums.length; i++){\n\t\tvar j = nums[i];\n\
    \t\tvar k = nums[i + 1];\n\t\tif (j + k > 0) nums[j + k] = nums[j];\n\t\tnums[j]\
    \ = i;\n\t}\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1,\n  3,\n  -12,\n  1,\n  11,\n  ,\n\
    \  ,\n  ,\n  ,\n  ,\n  ,\n  4,\n  -11,\n  '-1': 0,\n  '-11': 12,\n  '-12': 2,\n\
    \  undefined: 10 ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp2ugts8cy.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ugts8cy.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    -1,       3,\n    -12,      1,\n \
    \   11,       <6 empty items>,\n    4,        -11,\n    '-1': 0,  '-11': 12,\n\
    \    '-12': 2, undefined: 10\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sorted = nums.slice().sort(function(a,b){\n        var sumA = a.slice().reduce(function(a,b){return\
    \ a+b},0);\n        var sumB = b.slice().reduce(function(a,b){return a+b},0);\n\
    \        var index = sumB - sumA;\n        if(index != 0) return index;\n    \
    \    return sumA - sumB;\n    });\n    return sorted;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0vfz8hcs.js:10\n        var sumA = a.slice().reduce(function(a,b){return\
    \ a+b},0);\n                     ^\n\nTypeError: a.slice is not a function\n \
    \   at /tmp/tmp0vfz8hcs.js:10:22\n    at Array.sort (<anonymous>)\n    at order_by_points\
    \ (/tmp/tmp0vfz8hcs.js:9:31)\n    at test (/tmp/tmp0vfz8hcs.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0vfz8hcs.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tconst sorted = nums.sort((a,b)=>{\n\t\tconst n1 = Math.abs(a), n2 = Math.abs(b);\n\
    \t\tif(n1<n2) return -1;\n\t\tif(n1>n2) return 1;\n\t\treturn 0;\n\t});\n\treturn\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, -1, 11, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp0p6u7tr2.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0p6u7tr2.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1, 11,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let ans = [];\n  for(let i=0; i<nums.length; i++){\n    let sum = 0;\n    for(let\
    \ j=0; j<nums[i].length; j++){\n      sum += nums[i][j];\n    }\n    ans.push(sum);\n\
    \  }\n  ans = ans.sort(function(a, b){\n    if(a > b) return 1;\n    else return\
    \ a - b;\n  });\n  let sorted_nums = [];\n  for(let i=0; i<ans.length; i++){\n\
    \    sorted_nums.push(ans[i]);\n  }\n  return sorted_nums;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmp3wq0am51.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3wq0am51.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort(function(a, b){\n    return (a-b);\n  });\n}\n</cell>\n<text>\n\
    Test\n\n</text>\n<cell>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw4o4njpc.js:13\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var points = [];\n    nums.sort(function(a, b){\n        var x = a.point;\n\
    \        var y = b.point;\n        if(x < y){\n            return -1;\n      \
    \  }\n        if(x > y){\n            return 1;\n        }\n        return 0;\n\
    \    });\n    for(var i = 0, l = nums.length; i < l; i++){\n        var num =\
    \ nums[i];\n        var point = num.point;\n        while(points.length <= point){\n\
    \            points.push(0);\n        }\n        points[point] += 1;\n       \
    \ num.point = points[point];\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnw_ju3q7.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnw_ju3q7.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let res = [];\n    nums.forEach(function(num){\n        let tmpSum = num.toString().split('').reduce((a,\
    \ b)=>a+b, 0);\n        let index = res.findIndex((e)=>e.sum === tmpSum);\n  \
    \      if(index===-1) res.push({sum:tmpSum, num:num});\n        else res[index]\
    \ = {sum:tmpSum, num:num}\n    });\n    return res.sort((a,b)=>b.sum - a.sum);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ { sum: '011', num: 11 },\n  { sum: '01',\
    \ num: 1 },\n  { sum: '0-1', num: -1 },\n  { sum: '0-11', num: -11 },\n  { sum:\
    \ '0-12', num: -12 } ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test\
    \ (/tmp/tmpr2q041q3.js:24:10)\n    at Object.<anonymous> (/tmp/tmpr2q041q3.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    { sum: '011', num: 11 },\n    { sum:\
    \ '01', num: 1 },\n    { sum: '0-1', num: -1 },\n    { sum: '0-11', num: -11 },\n\
    \    { sum: '0-12', num: -12 }\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        return a + b * sums_of_digits(a);\n  \
    \  });\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbokcozxb.js:10\n        return a + b * sums_of_digits(a);\n   \
    \                ^\n\nReferenceError: sums_of_digits is not defined\n    at /tmp/tmpbokcozxb.js:10:20\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpbokcozxb.js:9:10)\n\
    \    at test (/tmp/tmpbokcozxb.js:19:20)\n    at Object.<anonymous> (/tmp/tmpbokcozxb.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sorted_arr = [];\n  var digits = nums.map(Number).map(function(x){ return\
    \ x.toString().split('').reverse(); });\n  digits.forEach(function(digit, index,\
    \ arr){\n    digit.forEach(function(d, i, a){\n      if(a[i - 1] < 0)\n      \
    \  a[i - 1] += d;\n      else if (a[i - 1] > 0)\n        a[i - 1] -= d;\n    \
    \  else\n        a[i - 1] = d\n    })\n  });\n  sorted_arr = digits.reduce(function(sorted,\
    \ digit, index, arr){\n    sorted.push(digit);\n    return sorted;\n  }, []).map(function(x){\
    \ return x.toString().split('').reverse().join(''); });\n  return sorted_arr.filter(function(item,\
    \ index, arr){\n    return arr.indexOf(item) == index;\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '1', '1,0', '-,NaN', '-,NaN,0', '-,NaN,1'\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpls0u13pg.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpls0u13pg.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '1', '1,0', '-,NaN', '-,NaN,0', '-,NaN,1'\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sorted_nums\n    if(nums.length === 0) {\n        sorted_nums = []\n\
    \    } else {\n        var sorted_nums = nums.slice()\n        sorted_nums.sort(function(a,\
    \ b){\n            return sum_digits(a) - sum_digits(b)\n        })\n    }\n \
    \   return sorted_nums\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxsgh4zgd.js:15\n            return sum_digits(a) - sum_digits(b)\n\
    \            ^\n\nReferenceError: sum_digits is not defined\n    at /tmp/tmpxsgh4zgd.js:15:13\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpxsgh4zgd.js:14:21)\n\
    \    at test (/tmp/tmpxsgh4zgd.js:26:20)\n    at Object.<anonymous> (/tmp/tmpxsgh4zgd.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums.sort(function(a, b){\n    var a = Math.abs(a), b = Math.abs(b);\n    return\
    \ b-a;\n  });\n  return nums;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, 11, -11, 1, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdbmog1l0.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdbmog1l0.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, 11,\
    \ -11, 1, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sorted_nums = nums.slice();\n\tvar result = [];\n\tfor (var i = 0, l = nums.length;\
    \ i < l; i++){\n\t\tvar index = sorted_nums.indexOf(-nums[i]);\n\t\tif (index\
    \ != -1){\n\t\t\tsorted_nums.splice(index, 1);\n\t\t\tsorted_nums.push(nums[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmp_evgroyu.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_evgroyu.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    \n    if(nums.length < 2) return nums\n    \n    let sortedNums = []\n  \
    \  let largestSum = 0\n    \n    nums.forEach(num => {\n        let numString\
    \ = num.toString()\n        \n        let numSum = numString.split('').reduce((sum,\
    \ current) => sum + parseInt(current), 0)\n        \n        if(numSum > largestSum){\n\
    \            largestSum = numSum\n            sortedNums = [num]\n        }else\
    \ if(numSum === largestSum){\n            sortedNums.push(num)\n        }\n  \
    \      \n    })\n    \n    return sortedNums\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11 ]\n\nshould equal\n\n[ -1, -11, 1,\
    \ -12, 11 ]\n    at test (/tmp/tmpal4x1s4b.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpal4x1s4b.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let len = nums.length\n  if(len === 0){\n    return nums\n  }\n  const numsMap\
    \ = new Map()\n  for(let i = 0; i < len; i++){\n    let num = nums[i]\n    if(numsMap.has(num)){\n\
    \      numsMap.set(num, numsMap.get(num) + i)\n    }\n    else{\n      numsMap.set(num,\
    \ i)\n    }\n  }\n  return numsMap.keys()\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{}\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpy_lkapsu.js:31:10)\n    at Object.<anonymous> (/tmp/tmpy_lkapsu.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [Map Iterator] { 1, 11, -1, -11, -12 },\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var copy = nums.slice(0); //Copy nums\n  copy.sort(function(a, b){return (b\
    \ - a)*Math.floor(100/b.length); });\n  return copy.slice(0); //Return copy\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp3j869hp8.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3j869hp8.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sortedArr = [];\n  var maxSum = 0, sumOfDigits = 0;\n  for(var i = 0; i\
    \ < nums.length; i++){\n    var item = nums[i];\n    var newSum = sumOfDigits;\n\
    \    sumOfDigits = 0;\n    for(var j = 0; j < item.length; j++){\n      var digit\
    \ = parseInt(item.charAt(j));\n      sumOfDigits += digit;\n      var newSum -=\
    \ digit;\n      if(sumOfDigits < 0){\n        sumOfDigits *= -1;\n      }\n  \
    \  }\n    if(newSum > maxSum){\n      maxSum = newSum;\n      sortedArr = [item];\n\
    \    } else if(newSum == maxSum){\n      sortedArr.push(item);\n    }\n  }\n \
    \ return sortedArr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwo_sgg9r.js:18\n      var newSum -= digit;\n                 ^^\n\
    \nSyntaxError: Unexpected token '-='\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sorted = [],\n      digits = [],\n      sum = 0;\n  \n  //Store digits\
    \ to sort them in order\n  for(var i = 0, len = nums.length; i < len; i++){\n\
    \    digits.push(nums[i]);\n  }\n\n  //Sort digits\n  digits = digits.sort();\n\
    \n  //Reverse digits\n  for(var i = 0, len = digits.length; i < len; i++){\n \
    \   sum += digits[i];\n  }\n\n  //Re-sort numbers so they have most digit on their\
    \ left\n  for(var i = 0, len = nums.length; i < len; i++){\n    sorted.push(nums[i]);\n\
    \  }\n\n  //Re-sort digits\n  sorted = sorted.sort();\n  \n  //Get indices to\
    \ sort by sum\n  for(var i = 0, len = sorted.length; i < len; i++){\n    sorted.splice(i,\
    \ 0, i);\n  }\n\n  //Move all elements by sum of digits so they have same order\n\
    \  for(var i = 0, len = sorted.length; i < len; i++){\n    sorted.splice(sorted[sorted[sorted[i]]\
    \ - len], 0, sorted[sorted[i]]);\n  }\n  \n  return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,\
    \ 3, 4, -1, -11, -12, 1, 11 ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n   \
    \ at test (/tmp/tmp95pjcxu4.js:52:10)\n    at Object.<anonymous> (/tmp/tmp95pjcxu4.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    0,  0,   0,   0, 0,  0, 0,\n    0,\
    \  0,   0,   0, 1,  2, 3,\n    4, -1, -11, -12, 1, 11\n  ],\n  expected: [ -1,\
    \ -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    \n    // Sort the given list from smallest to largest in place\n    nums.sort(function(a,\
    \ b){return b-a;});\n\n    // Find the index of the digit with smallest sum\n\
    \    var smallest_sum_index = 0;\n    for(var i = 0; i < nums.length; i++){\n\
    \        var current_digit = nums[i];\n        smallest_sum_index += current_digit;\n\
    \        if(smallest_sum_index > 9){\n            break;\n        }\n    }\n\n\
    \    // Now sort those indices descending:\n    nums.sort((a, b) => b - a);\n\n\
    \    // The list of integers in ascending order is ready\n    return nums;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6q3carjp.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6q3carjp.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  if(nums.length == 0) return nums\n  var numsSum = nums.reduce(function(prev,\
    \ curr){\n    return prev + curr\n  }, 0)\n  var resnums = []\n  for(var i = 0,\
    \ len = nums.length; i < len; i++){\n    var curr = nums[i]\n    var idx = nums.indexOf(curr)\n\
    \    var prevIdx = nums.indexOf(nums[idx > 0 ? idx - 1 : idx])\n    if(prevIdx\
    \ > -1) nums.splice(prevIdx, 1)\n    resnums.push(curr)\n  }\n  resnums = resnums.concat(nums)\n\
    \  return resnums.sort((a, b) => a - b)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -12, -1, -1, 1, undefined, undefined\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpjtul5dk_.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjtul5dk_.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -12, -12, -1, -1, 1, undefined, undefined\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let len = nums.length;\n    let newNums = new Array(len);\n    for(let i\
    \ = 0; i < len; ++i){\n        let sum = 0;\n        for(let j = 0; j < len; ++j){\n\
    \            sum += nums[j].charCodeAt(j) - '0'.charCodeAt(0);\n        }\n  \
    \      newNums[i] = sum;\n    }\n    return newNums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbzhoem3h.js:14\n            sum += nums[j].charCodeAt(j) - '0'.charCodeAt(0);\n\
    \                           ^\n\nTypeError: nums[j].charCodeAt is not a function\n\
    \    at order_by_points (/tmp/tmpbzhoem3h.js:14:28)\n    at test (/tmp/tmpbzhoem3h.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpbzhoem3h.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sum = 0;\n    for (let num of nums) {\n        sum += num;\n    }\n \
    \   let result = [];\n    for (let num of nums) {\n        result.push(num);\n\
    \    }\n    for (let i = 0; i < result.length; i++) {\n        result[i].val =\
    \ sum - result[i].digits;\n    }\n    result.sort((a, b) => a.val - b.val);\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpvkhdih_k.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvkhdih_k.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(a, b){\n\t\tvar aSum = a.toString().split('').sort().join(''),\n\
    \t\t\tbSum = b.toString().split('').sort().join(''),\n\t\t\taSumArr = aSum.split(''),\n\
    \t\t\tbSumArr = bSum.split(''),\n\t\t\taLen = a.toString().length,\n\t\t\tbLen\
    \ = b.toString().length,\n\t\t\taSumInt = parseInt(aSumArr.join('')),\n\t\t\t\
    bSumInt = parseInt(bSumArr.join('')),\n\t\t\taSumStr = aSumArr.join(''),\n\t\t\
    \tbSumStr = bSumArr.join('');\n\t\taSumInt = aSumInt - (aLen - 1);\n\t\tbSumInt\
    \ = bSumInt - (bLen - 1);\n\t\treturn aSumInt - bSumInt;\n\t});\n\treturn nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpy48fesdf.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy48fesdf.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort((a,b)=>{\n        let sum = a.toString().length + b.toString().length;\n\
    \        return sum<0?-1:sum<0?1:0;\n    });\n    return nums;\n}\n</code>\n<|/\
    \ a tags=arrays,javascript,sorting |>\n<| c |>\nNice, short and sweet.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nTry this:\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk0ghzn2v.js:15\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a,b)=>{\n    let sum = (a+b)%10;\n    return sum==0 ? a-b\
    \ : sum;\n  })\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphs564gig.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphs564gig.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    // Write your code here.\n    return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6va56sal.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6va56sal.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let sorted_nums = nums;\n  let sorted_index = 0;\n  while (sorted_index<nums.length-1){\n\
    \    let sum = 0;\n    let digit_index = 0;\n    while (digit_index<sorted_nums.length){\n\
    \      sum += sorted_nums[digit_index];\n      digit_index++;\n    }\n    if (sum>sorted_nums[sorted_index+1]){\n\
    \      sorted_nums = sorted_nums.slice(0,sorted_index).concat(sorted_nums.slice(sorted_index+1,sorted_nums.length));\n\
    \      sorted_index++;\n    }\n  }\n  return sorted_nums;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    for(var i=0;i<nums.length;i++){\n        var num=nums[i];\n        if(num<0){\n\
    \            var num=nums[i];\n            var rest=nums.slice(i);\n         \
    \   rest.unshift(-num);\n            nums=rest;\n        }\n    }\n    return\
    \ nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 12, -12 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpj4wj9x93.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj4wj9x93.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, -12\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sum=0;\n    var max=nums.length-1;\n    var nums1=nums.slice();\n   \
    \ nums1.sort(function(a, b){\n        var sum1=a+b;\n        var sum2=sum1+sum;\n\
    \        if(sum1>sum2){\n            return 1;\n        }\n        if(sum1<sum2){\n\
    \            return -1;\n        }\n        return 0;\n    });\n    return nums1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis answer has been flagged for review\
    \ by some users, due to its length and content. Please be sure to explain your\
    \ answer in detail and provide any additional details in your answer. See [How\
    \ to Answer](http://stackoverflow.com/help/how-to-answer) for help on writing\
    \ answers that will be accepted or upvoted.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk5751jgh.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var out = [];\n    var len = nums.length;\n    var idx = nums.length;\n \
    \   while (idx--){\n        var digit = 0;\n        var num = nums[idx];\n   \
    \     while (num !== 0){\n            digit = num % 10 + digit;\n            num\
    \ = Math.floor(num / 10);\n        }\n        out.push(digit);\n    }\n    out.sort(function(x,\
    \ y){\n        var a = x - y;\n        if(a === 0) return x - y;\n        return\
    \ a;\n    });\n    return out;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var _arr = [];\n    for (var i = 0, len = nums.length; i < len; i += 1) {\n\
    \        _arr[i] = nums[i].toString();\n    }\n    _arr.sort(function(a, b){\n\
    \        var sumA = parseFloat(a.toString().split('').reduce(function(sum, digit)\
    \ {\n            return sum + parseInt(digit, 10);\n        }, 0));\n        var\
    \ sumB = parseFloat(b.toString().split('').reduce(function(sum, digit) {\n   \
    \         return sum + parseInt(digit, 10);\n        }, 0));\n        if(sumA\
    \ < sumB) {\n            return -1;\n        }\n        if(sumA > sumB) {\n  \
    \          return 1;\n        }\n        return 0;\n    });\n    return _arr;\n\
    }\nvar nums1 = order_by_points([1, 11, -1, -11, -12]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '1', '11', '-1', '-11', '-12' ]\n\nshould\
    \ equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpul2kny9v.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpul2kny9v.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '1', '11', '-1', '-11', '-12' ],\n  expected:\
    \ [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums.sort(function(a, b){\n    var a = sum(a);\n    var b = sum(b);\n    return\
    \ a - b;\n  });\n  return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo89lz8su.js:10\n    var a = sum(a);\n            ^\n\nReferenceError:\
    \ sum is not defined\n    at /tmp/tmpo89lz8su.js:10:13\n    at Array.sort (<anonymous>)\n\
    \    at order_by_points (/tmp/tmpo89lz8su.js:9:8)\n    at test (/tmp/tmpo89lz8su.js:22:20)\n\
    \    at Object.<anonymous> (/tmp/tmpo89lz8su.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var cur = 0;\n    var curSum = 0;\n    var ret = [];\n    var len = 0;\n\
    \    while(cur < nums.length){\n        curSum += nums[cur];\n        cur = curSum;\n\
    \        curSum = 0;\n        if(cur < 0){\n            ret[len++] = nums[cur];\n\
    \            cur = curSum + nums[cur] + 1;\n        }\n        else{\n       \
    \     ret[len++] = nums[cur];\n            cur = curSum;\n        }\n    }\n \
    \   return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "\n<--- Last few GCs --->\n\n[77045:0x4caab60]      936 ms: Scavenge 766.9\
    \ (800.2) -> 766.9 (800.2) MB, 27.4 / 0.0 ms  (average mu = 1.000, current mu\
    \ = 1.000) allocation failure \n[77045:0x4caab60]     1303 ms: Scavenge 1149.4\
    \ (1182.8) -> 1149.4 (1182.8) MB, 41.9 / 0.0 ms  (average mu = 1.000, current\
    \ mu = 1.000) allocation failure \n[77045:0x4caab60]     1852 ms: Scavenge 1723.2\
    \ (1756.6) -> 1723.2 (1756.6) MB, 62.0 / 0.0 ms  (average mu = 1.000, current\
    \ mu = 1.000) allocation failure \n\n\n<--- JS stacktrace --->\n\nFATAL ERROR:\
    \ invalid array length Allocation failed - JavaScript heap out of memory\n 1:\
    \ 0xa04200 node::Abort() [node]\n 2: 0x94e4e9 node::FatalError(char const*, char\
    \ const*) [node]\n 3: 0xb797be v8::Utils::ReportOOMFailure(v8::internal::Isolate*,\
    \ char const*, bool) [node]\n 4: 0xb79b37 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*,\
    \ char const*, bool) [node]\n 5: 0xd343c5  [node]\n 6: 0xd0cf05  [node]\n 7: 0xe9568e\
    \  [node]\n 8: 0xe957da  [node]\n 9: 0x1032b83 v8::internal::Runtime_GrowArrayElements(int,\
    \ unsigned long*, v8::internal::Isolate*) [node]\n10: 0x14011f9  [node]\n"
  exit_code: -6
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sortedNums = nums.sort(function(a,b){\n\t\tvar sumA = sum2(a);\n\t\tvar\
    \ sumB = sum2(b);\n\t\treturn sumA-sumB;\n\t});\n\treturn sortedNums;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprwnk3i2y.js:10\n\t\tvar sumA = sum2(a);\n\t\t           ^\n\nReferenceError:\
    \ sum2 is not defined\n    at /tmp/tmprwnk3i2y.js:10:14\n    at Array.sort (<anonymous>)\n\
    \    at order_by_points (/tmp/tmprwnk3i2y.js:9:24)\n    at test (/tmp/tmprwnk3i2y.js:22:20)\n\
    \    at Object.<anonymous> (/tmp/tmprwnk3i2y.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let digitSums = [...nums.map(x => x.toString().split('').reduce((prev, curr)\
    \ => prev + Number(curr), 0))];\n    digitSums.sort();\n    return nums.filter(x\
    \ => digitSums.indexOf(x) === -1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, -1, -11, -12 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp73uh990_.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp73uh990_.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tlet sorted_by_points = [];\n\tlet num_to_sum = 0;\n\tlet current_index = 0;\n\
    \t\n\twhile(current_index < nums.length){\n\t\tnum_to_sum += nums[current_index];\n\
    \t\tsorted_by_points.push(nums[current_index]);\n\t\tcurrent_index++;\n\t}\n\t\
    \n\tsorted_by_points.sort((a,b) => a - b);\n\twhile(current_index < nums.length){\n\
    \t\tsorted_by_points.splice(0, 0, nums[current_index]);\n\t\tcurrent_index++;\n\
    \t}\n\t\n\twhile(sorted_by_points.length){\n\t\tsorted_by_points.unshift(sorted_by_points.pop());\n\
    \t}\n\t\n\treturn sorted_by_points;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort((a,b) => sort_digits(a) - sort_digits(b));\n\treturn nums;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmg8nbmhp.js:9\n\tnums.sort((a,b) => sort_digits(a) - sort_digits(b));\n\
    \t                                  ^\n\nReferenceError: sort_digits is not defined\n\
    \    at /tmp/tmpmg8nbmhp.js:9:36\n    at Array.sort (<anonymous>)\n    at order_by_points\
    \ (/tmp/tmpmg8nbmhp.js:9:7)\n    at test (/tmp/tmpmg8nbmhp.js:18:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpmg8nbmhp.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let sum = 0;\n  for (let i=0;i<nums.length;i++){\n    sum += nums[i];\n  }\n\
    \  sum = sum % 10;\n  if (sum < 0){\n    sum = -sum;\n  }\n  return nums.sort((a,b)=>{\n\
    \    let aSum = a % 10;\n    let bSum = b % 10;\n    if (aSum+bSum==sum){\n  \
    \    return a<b ? -1 : 1;\n    } else {\n      return aSum+bSum - sum;\n    }\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_737v7qg.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_737v7qg.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sum = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar n = nums[i];\n\
    \t\tsum += Math.pow(10, nums.length - i - 1);\n\t\tif(n == 0){\n\t\t\tcontinue;\
    \ // ignore zeros.\n\t\t}\n\t\tif(n != 0 && Math.pow(10, nums.length - i - 1)\
    \ == Math.pow(10, nums.length - i)){\n\t\t\tsum -= Math.pow(10, nums.length -\
    \ i);\n\t\t}\n\t\telse if(n == 0 && Math.pow(10, nums.length - i) != 0){\n\t\t\
    \tsum -= Math.pow(10, nums.length - i - 1);\n\t\t}\n\t}\n\tnums.sort(function(a,\
    \ b){\n\t\treturn sum - Math.pow(10, nums.length - a - 1);\n\t});\n\treturn nums;\n\
    }\n\nvar num1 = new Number();\nvar num2 = new Number();\nvar num3 = new Number();\n\
    var num4 = new Number();\nvar num5 = new Number();\nvar num6 = new Number();\n\
    var num7 = new Number();\nvar num8 = new Number();\nvar num9 = new Number();\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp406d5mor.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp406d5mor.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a, b) => { return (a > b) ? 1 : -1; });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpjeei6gmy.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjeei6gmy.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a,b){\n        var sum = 0;\n        for(var i=0;i<a.length;i++){\n\
    \            sum+=parseInt(a[i].substr(1,a[i].length),10);\n        }\n      \
    \  sum+=parseInt(b.substr(1,b.length),10);\n        return sum-0;\n    });\n \
    \   return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0s71tfib.js:14\n        sum+=parseInt(b.substr(1,b.length),10);\n\
    \                        ^\n\nTypeError: b.substr is not a function\n    at /tmp/tmp0s71tfib.js:14:25\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp0s71tfib.js:9:10)\n\
    \    at test (/tmp/tmp0s71tfib.js:25:20)\n    at Object.<anonymous> (/tmp/tmp0s71tfib.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let sorted = []\n  nums.forEach((n)=>{\n    let index = -1\n    while ((index\
    \ = nums.indexOf(n,index+1)) == -1){\n      nums.splice(index, 0, n)\n    }\n\
    \    sorted.push(n)\n  })\n  return sorted\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp238_7g5t.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp238_7g5t.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var _arr=nums.slice(0),\n        arr=[];\n    function get_sum(num){\n  \
    \      return num.split(\"\").reduce((acc,x)=>acc+x%10+acc,0);\n    }\n    _arr.sort((a,b)=>get_sum(a)-get_sum(b)||a.localeCompare(b));\n\
    \    _arr.forEach((num)=>arr.push(num));\n    return arr;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe \"get_sum()\" function can be replaced with \"return Number(num.split(\"\
    \").reduce((acc,x)=>acc+x%10+acc,0)\"\n<|/ c |>\n<| c |>\nThe code has some bugs.\
    \ For example input `order_by_points([101, 110, 123, -12]); //returns [123, 110,\
    \ 101, -12, 11]`. It should be `-12` in the end.\n<|/ c |>\n<| c |>\nHi, you are\
    \ correct. I have corrected the code now. Thank you!\n<|/ c |>\n<| c |>\nI tested\
    \ your code and it is working perfectly. Thank you!\n<|/ c |>\n<| c |>\nI am glad\
    \ I could help!\n<|/ c |>\n<| a |>\nThe reason this doesn't work is because you\
    \ are sorting strings. I did this exercise for my programming class, for which\
    \ the solution was to use parseInt on the summed digits, after applying the sum\
    \ mod 10 to each digit, e.g.\n\nvar numbers = [\n  1, 11, -1, -11, -12\n];\n\n\
    <code>\nvar numbers = [\n  1, 11, -1, -11, -12\n];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_uan5i_q.js:18\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort(function(a, b){\n    var x = a.split('').reduce(function(a,\
    \ b){\n      return parseInt(a) + parseInt(b)\n    }, 0);\n    var y = b.split('').reduce(function(a,\
    \ b){\n      return parseInt(a) + parseInt(b)\n    }, 0);\n    return x - y\n\
    \  });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaabggxye.js:10\n    var x = a.split('').reduce(function(a, b){\n\
    \              ^\n\nTypeError: a.split is not a function\n    at /tmp/tmpaabggxye.js:10:15\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpaabggxye.js:9:15)\n\
    \    at test (/tmp/tmpaabggxye.js:24:20)\n    at Object.<anonymous> (/tmp/tmpaabggxye.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var ordered = [];\n  nums.forEach(function(point){\n    ordered[point] = nums.filter(function(n){\
    \ return n <= point })\n      .sort(function(a,b){\n        return Math.abs(a\
    \ - b) - Math.abs(Number(a) - Number(b));\n      });\n  });\n  return ordered;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ,\n  [ 1, -1, -11, -12 ],\n  ,\n  ,\n\
    \  ,\n  ,\n  ,\n  ,\n  ,\n  ,\n  ,\n  [ 1, 11, -1, -11, -12 ],\n  '-1': [ -1,\
    \ -11, -12 ],\n  '-11': [ -11, -12 ],\n  '-12': [ -12 ] ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpq7kf8p1_.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq7kf8p1_.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <1\
    \ empty item>,\n    [ 1, -1, -11, -12 ],\n    <9 empty items>,\n    [ 1, 11, -1,\
    \ -11, -12 ],\n    '-1': [ -1, -11, -12 ],\n    '-11': [ -11, -12 ],\n    '-12':\
    \ [ -12 ]\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var newnums=[];\n  for(var i=0;i<nums.length;i++){\n    var num=nums[i];\n\
    \    var dig_sum=num.toString().split('').sort((a,b)=>b-a).join('');\n    if(nums.indexOf(num)<0){\n\
    \      newnums.push(num);\n      if(newnums.indexOf(dig_sum)>-1){\n        newnums.splice(newnums.indexOf(dig_sum),1);\n\
    \      }\n    }else{\n      newnums.splice(newnums.indexOf(dig_sum),0,num);\n\
    \    }\n  }\n  return newnums;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, -1, -11, -12, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpg8ad7nne.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg8ad7nne.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, -1,\
    \ -11, -12, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(a, b){\n\t\tsumA = sumA + Number(a.toString().substr(0, 1));\n\
    \t\tsumB = sumB + Number(b.toString().substr(0, 1));\n\t\tif (sumA != sumB){\n\
    \t\t\treturn sumA - sumB;\n\t\t} else {\n\t\t\treturn a.toString().localeCompare(b.toString());\n\
    \t\t}\n\t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpho9ecy8u.js:10\n\t\tsumA = sumA + Number(a.toString().substr(0,\
    \ 1));\n\t\t^\n\nReferenceError: sumA is not defined\n    at /tmp/tmpho9ecy8u.js:10:3\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpho9ecy8u.js:9:7)\n\
    \    at test (/tmp/tmpho9ecy8u.js:26:20)\n    at Object.<anonymous> (/tmp/tmpho9ecy8u.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(function(a, b){\n\t\tvar sumA = point_sum(a);\n\t\tvar sumB = point_sum(b);\n\
    \t\tif(sumA !== sumB){\n\t\t\treturn sumA-sumB;\n\t\t}\n\t\treturn a-b;\n\t});\n\
    \treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp43evn0wi.js:10\n\t\tvar sumA = point_sum(a);\n\t\t           ^\n\
    \nReferenceError: point_sum is not defined\n    at /tmp/tmp43evn0wi.js:10:14\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp43evn0wi.js:9:7)\n\
    \    at test (/tmp/tmp43evn0wi.js:25:20)\n    at Object.<anonymous> (/tmp/tmp43evn0wi.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a, b) => a - b).reduce((arr, item) => {\n    const sum =\
    \ Math.round(item / 10) % 10\n    const index = arr.findIndex(item => item > 0\
    \ && sum === item)\n    if(index > -1) arr[index] = item\n    else arr.push(item)\n\
    \    return arr\n  }, []).sort((a, b) => a - b)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 11 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp1pt0it9a.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1pt0it9a.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  //Write your code here\n}\n</cell>\n<cell>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpazi1_mci.js:11\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   nums = nums.slice();\n   nums.sort(function(a,b){\n      var sumA = sum(b);\n\
    \      var sumB = sum(a);\n      if(sumA > sumB){\n         return 1;\n      }\n\
    \      else if(sumA == sumB){\n         return 0;\n      }\n      else{\n    \
    \     return -1;\n      }\n   });\n   return nums;\n}\nvar a = [1,11,-1, -11,\
    \ -12]\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg5wrpnqz.js:11\n      var sumA = sum(b);\n                 ^\n\n\
    ReferenceError: sum is not defined\n    at /tmp/tmpg5wrpnqz.js:11:18\n    at Array.sort\
    \ (<anonymous>)\n    at order_by_points (/tmp/tmpg5wrpnqz.js:10:9)\n    at test\
    \ (/tmp/tmpg5wrpnqz.js:31:20)\n    at Object.<anonymous> (/tmp/tmpg5wrpnqz.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var result = nums.slice();\n    result.sort((a,b)=>{\n        return a-b\n\
    \    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp7hqn9wxo.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7hqn9wxo.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var arr = [];\n  var results = [];\n  for(var i = 0, n = nums.length; i < n;\
    \ i++){\n    var num = (nums[i] < 0) ? -nums[i] : nums[i];\n    var index = arr.indexOf(num);\n\
    \    if(index > -1){\n      var sum = sumDigits(num);\n      arr.splice(index,\
    \ 1);\n      results.push(nums[index]);\n      arr.splice(index, 0, num);\n  \
    \  }else{\n      arr.push(num);\n      results.push(num);\n    }\n  }\n  if(arr.length\
    \ > 0){\n    results.sort(function(a, b){\n      return sumDigits(b) - sumDigits(a);\n\
    \    });\n  }\n  return results.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc04s_23s.js:15\n      var sum = sumDigits(num);\n             \
    \   ^\n\nReferenceError: sumDigits is not defined\n    at order_by_points (/tmp/tmpc04s_23s.js:15:17)\n\
    \    at test (/tmp/tmpc04s_23s.js:37:20)\n    at Object.<anonymous> (/tmp/tmpc04s_23s.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   nums = nums.map(parseFloat);\n   return nums.sort(function(a,b){\n      return\
    \ Math.abs(b-a);\n   });\n}\n</cell>\n<cell>\n# Write a function which returns\
    \ a list of numbers\n# in descending order, according to their value.\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdbo5dg6w.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var a = nums.concat().sort(function(a, b){\n    return (a > b)? 1: ((a < b)?\
    \ -1 : 0);\n  });\n  return a;\n}\n</cell>\n<cell>\nprint(order_by_points([]));\n\
    </cell>\n<text>\nPart 3: Count and Sum II\nWrite a function that counts the number\
    \ of digits in each positive number of the given list.\nFor example, [1, 2, 3]\
    \ has 3 digits and [1, 2, -2, 3] has 2 digits. Make sure it works in edge cases.\n\
    Note that in mathematics, a positive number with N digits has N - 1 digits. So\
    \ the digit count of an integer is the sum of its digits, not the number itself.\n\
    Examples:\ncount_digits(123) \u2192 2 digits, [1, 2, 3] has 3 digits\ncount_digits(-123)\
    \ \u2192 1 digit, [1, 2, 3] has 3 digits\ncount_digits(0) \u2192 0 digits, [1,\
    \ 2, 3] has 3 digits\ncount_digits(1) \u2192 0 digits, [1, 2, 3] has 3 digits\n\
    count_digits(12) \u2192 2 digits, [1, 2, 3] has 3 digits\ncount_digits(1234) \u2192\
    \ 3 digits, [1, 2, 3] has 3 digits\ncount_digits(-1234) \u2192 2 digits, [1, 2,\
    \ 3] has 3 digits\ncount_digits(-123456789) \u2192 5 digits, [1, 2, 3] has 3 digits\n\
    count_digits(-0.1) \u2192 0 digits, [1, 2, 3] has 3 digits\ncount_digits(1.0)\
    \ \u2192 0 digits, [1, 2, 3] has 3 digits\ncount_digits(1.000) \u2192 1 digit,\
    \ [1, 2, 3] has 3 digits\ncount_digits(9.999999) \u2192 6 digits, [1, 2, 3] has\
    \ 3 digits\n\n\n</text>\n<cell>\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmg6pj06u.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let res = [];\n  nums.forEach((n)=>{\n    let s = sum_of_digits(n);\n    let\
    \ index = nums.indexOf(n);\n    let i = nums.indexOf(nums.reduce((a,b)=>a+b, 0));\n\
    \    let j = nums.indexOf(nums.reduce((a,b)=>a+b, 0));\n    if(s!==0 && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))==0){\n      res.push(n);\n    }\n    if(index!==-1 && index!==i && index!==j\
    \ && nums.indexOf(nums.reduce((a,b)=>a+b, 0))==0){\n      res.push(nums[index]);\n\
    \    }\n    if(index!==-1 && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b, 0))<nums.indexOf(n)){\n     \
    \ res.push(nums[index]);\n    }\n    if(index!==-1 && index!==i && index!==j &&\
    \ nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))>nums.indexOf(n)){\n      res.push(nums[index]);\n    }\n    if(index!==-1\
    \ && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 &&\
    \ nums.indexOf(nums.reduce((a,b)=>a+b, 0))==nums.indexOf(n)){\n      res.push(nums[index]);\n\
    \    }\n    if(index!==-1 && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b, 0))>nums.indexOf(n)){\n     \
    \ res.push(nums[index]);\n    }\n    if(index!==-1 && index!==i && index!==j &&\
    \ nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))<nums.indexOf(n)){\n      res.push(nums[index]);\n    }\n  });\n  return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv4r0yrxo.js:11\n    let s = sum_of_digits(n);\n            ^\n\n\
    ReferenceError: sum_of_digits is not defined\n    at /tmp/tmpv4r0yrxo.js:11:13\n\
    \    at Array.forEach (<anonymous>)\n    at order_by_points (/tmp/tmpv4r0yrxo.js:10:8)\n\
    \    at test (/tmp/tmpv4r0yrxo.js:45:20)\n    at Object.<anonymous> (/tmp/tmpv4r0yrxo.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        var i, diff, sum = 0, a_digit, b_digit,\
    \ a_sum, b_sum;\n        // First compare the sum of the digits of both numbers\n\
    \        for(i=0;i<nums.length;i++){\n            a_digit = nums[i]%10;\n    \
    \        b_digit = nums[i+1]%10;\n            diff = a_digit - b_digit;\n    \
    \        sum  = sum + diff;\n        }\n        // After that, if one number has\
    \ more digits than the other,\n        // compare the sum of the digits of both\
    \ numbers\n        a_sum  = sum;\n        b_sum  = sum;\n        for(i=nums.length-1;i>0;i--){\n\
    \            a_digit = nums[i]%10;\n            b_digit = nums[i-1]%10;\n    \
    \        diff = a_digit - b_digit;\n            sum  = sum + diff;\n        }\n\
    \        // Finally, return -1 if both numbers have the same sum, otherwise\n\
    \        // return the original number from the input list\n        return sum===a_sum?-1:nums;\n\
    \    });\n    return nums;\n}\n</code>\n<|/ a dscore=3 tags=sorting,javascript\
    \ |>\n<| c |>\nNice! I'd like to note though that this is O(n^2) in the number\
    \ of digits, rather than O(n log n) in the number of elements. Of course this\
    \ is a very small number compared to the size of the input list, but still, it\
    \ could be an issue for large inputs.\n<|/ c |>\n<| a tags=sorting,javascript\
    \ |>\nUse this algorithm:\n\nSplit the numbers into groups of n digits each (e.g.\
    \ with substr function on String).\nFor each group:\n\nSum up all digits of the\
    \ group.\nRemove the last digit from the group (so each group will have exactly\
    \ one digit).\nIf the remaining group has exactly one digit, add it to the sorted\
    \ list.\nIf the remaining group has two digits, compare the sum of two last digits\
    \ of the group with the sum of two digits of the remaining group. If they are\
    \ equal, compare the first two digits. If they are equal, compare the first digit.\
    \ If they are equal, compare the second digit.\n\nIf the length of the list is\
    \ not even, the last group might not be a single digit. In this case you just\
    \ add it to the sorted list. This will always give you a sorted list with a single\
    \ digit in the end.\n<|/ a dscore=1 |>\n<| c |>\nThis should work, and is probably\
    \ the easiest solution, but it will also give you a list with the last digit of\
    \ every group swapped.\n<|/ c |>\n<| c |>\nYes, I just noticed that. I fixed my\
    \ answer to just put the last digit of every group in the correct position.\n\
    <|/ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp24481urj.js:34\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var _sum = 0;\n  var _max = Math.max.apply(Math, nums);\n  return nums.map(function(num){\n\
    \    _sum = Math.max(_sum, num);\n    return _sum;\n  }).sort(function(a, b){\n\
    \    return b-a;\n  }).map(function(num){\n    return num % 10;\n  });\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1, 1, 1, 1 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmpfjc81ebu.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfjc81ebu.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \treturn nums.sort((a,b)=>{\n\t\tif(isZero(a)){\n\t\t\treturn 1;\n\t\t}else if(isZero(b)){\n\
    \t\t\treturn -1;\n\t\t}else if(a[0]<b[0]){\n\t\t\treturn -1;\n\t\t}else if(a[0]>b[0]){\n\
    \t\t\treturn 1;\n\t\t}else{\n\t\t\treturn order_by_points(a.slice(1)).concat(order_by_points(b.slice(1)));\n\
    \t\t}\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6asdtks9.js:10\n\t\tif(isZero(a)){\n\t\t^\n\nReferenceError: isZero\
    \ is not defined\n    at /tmp/tmp6asdtks9.js:10:3\n    at Array.sort (<anonymous>)\n\
    \    at order_by_points (/tmp/tmp6asdtks9.js:9:14)\n    at test (/tmp/tmp6asdtks9.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmp6asdtks9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   const sorted_nums = nums.map(num => {\n    const sum = (num.toString().match(/\\\
    d/g) || []).reduce((sum, digit) => sum + digit, 0);\n    return sum;\n   });\n\
    \   nums.sort((a, b) => a - b);\n   return sorted_nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '01', '011', '01', '011', '012' ]\n\n\
    should equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp89q4mcb7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp89q4mcb7.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '01', '011', '01', '011', '012' ],\n  expected:\
    \ [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a,b)=>{\n    if(a.num>b.num)\n      return 1\n    if(a.num<b.num)\n\
    \      return -1\n    return 0\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp53j67bnj.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp53j67bnj.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var n = nums.length,\n    cost = nums.reduce(function(p,c){\n      return p+c;\n\
    \    });\n  return nums.sort(function(a,b){\n    return cost - Math.abs(a - b);\n\
    \  }).map(function(_,i){\n    return nums[i];\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 11, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpx1bekovj.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx1bekovj.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 11, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++){\n    sum += nums[i];\n\
    \  }\n  nums.sort((a,b)=>sum-a-b);\n  return nums;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 11, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphl_jzwl5.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphl_jzwl5.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 11, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let result = [];\n  let len = nums.length;\n  for (let i = 0; i < len; i++){\n\
    \    let sum = 0;\n    for (let j = i + 1; j < len; j++){\n      sum += nums[j];\n\
    \    }\n    result.push(nums[sum === 0 ? len - i + 1 : sum]);\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ -1 ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr98mgy9t.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr98mgy9t.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sums = new Array(nums.length),\n\t\tmax_sum = 0,\n\t\tmax_index;\n\tfor(var\
    \ i = 0; i < nums.length; i++){\n\t\tsums[i] = nums[i].toString().split('').reduce(function(sum,\
    \ item){\n\t\t\treturn sum + parseInt(item, 10);\n\t\t}, 0);\n\t\tif(sums[i] >\
    \ max_sum)\n\t\t\tmax_sum = sums[i];\n\t\tif(max_sum === 0)\n\t\t\tmax_index =\
    \ i;\n\t}\n\tnums.sort(function(x, y){\n\t\treturn sums[max_index] - sums[y];\n\
    \t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp4yn6t2im.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4yn6t2im.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  nums.sort((a,b) => (b-a));\n  for (let i = 0; i < nums.length; i++){\n    let\
    \ j = nums[i];\n    nums[i] = nums[j];\n    nums[j] = j;\n  }\n  return nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined,\n  1,\n  undefined,\n  undefined,\n\
    \  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n\
    \  undefined,\n  11,\n  '-1': -1,\n  '-11': -11,\n  '-12': -12,\n  undefined:\
    \ undefined ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp1tpkhjaj.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1tpkhjaj.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    undefined,  1,\n    undefined,  undefined,\n\
    \    undefined,  undefined,\n    undefined,  undefined,\n    undefined,  undefined,\n\
    \    undefined,  11,\n    '-1': -1,   '-11': -11,\n    '-12': -12, undefined:\
    \ undefined\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var len = nums.length,\n        sortFn = function(n1, n2){\n            var\
    \ tmp = n1.point,\n                n1_p = n1.point,\n                n1_n = n1.n,\n\
    \                n2_p = n2.point,\n                n2_n = n2.n,\n            \
    \    sum = tmp + n1_p + n2_p,\n                swap = n1_n < n2_n ? -1 : 1,\n\
    \                i,\n                tmp_p,\n                tmp_n;\n        \
    \    if(sum < 0){\n                tmp = -sum;\n                swap = -1;\n \
    \           }\n            tmp_n = n1_n;\n            tmp_p =  n1_p + n2_p;\n\
    \            for(i = 0; i !== len; i = ++i){\n                tmp += nums[i];\n\
    \                tmp_p = tmp + nums[swap + i];\n                if(tmp_p > tmp){\n\
    \                    swap = i;\n                }\n            }\n           \
    \ if(swap === -1){\n                return 1;\n            }else if(swap === 1){\n\
    \                return -1;\n            }\n            return tmp;\n        };\n\
    \    if(!len){\n        return [];\n    }\n    nums.sort(sortFn);\n    return\
    \ nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 11, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpbmeikeuw.js:53:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbmeikeuw.js:61:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 11, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums = nums.sort(function(a,b){\n\t\treturn a+b%10\n\t})\n\treturn nums.map(function(x){\n\
    \t\treturn x%10\n\t}).sort(function(a,b){\n\t\treturn a-b\n\t})\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -2, -1, -1, 1, 1 ]\n\nshould equal\n\n\
    [ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpixtdrbnp.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpixtdrbnp.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -2, -1,\
    \ -1, 1, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var ret = [];\n    var len = nums.length;\n    var index = 0;\n    for (var\
    \ i = 0; i < len; i++){\n        if (nums[i] > 0){\n            ret.push(nums[index]);\n\
    \            index++;\n        }\n    }\n    return ret;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpo00bo_fb.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo00bo_fb.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  const n = new Map()\n  const points = new Array()\n\n  for (let i = 0; i <\
    \ nums.length; i++){\n    const sum = Math.floor(nums[i]/10)\n\n    if (n.has(sum)){\n\
    \      n = n.get(sum)\n      n.push(i)\n    } else {\n      n.set(sum, [i])\n\
    \    }\n  }\n\n  for (let i = 0; i < n.size; i++){\n    points.push(...n.get(i))\n\
    \  }\n\n  return points.sort()\n}\n</code>\n<|/ a tags=python |>\n<| c |>\nThe\
    \ first solution doesn't work for me, though, because it sorts [-10, 0, -10] into\
    \ [-10, -10, 0] and [-10, 0] into [-10, 0].\n<|/ c |>\n<| c |>\nThanks for the\
    \ catch. I edited the code so that now it works with negative numbers\n<|/ c |>\n\
    <| a tags=python |>\nThe solution is simply to sort the list first, and then loop\
    \ through the sorted list, extracting only elements that are greater than or equal\
    \ to the previous one. Here's how I would do it:\n<code>\ndef order_by_digits(nums):\n\
    \    # sort first\n    nums.sort()\n\n    digits = [int(c) for c in str(sum(nums))]\n\
    \    indices.clear()\n\n    for i, v in enumerate(digits):\n        if v <= digits[i-1]:\n\
    \            indices.append(i)\n\n    # return the sorted list\n    return nums[indices]\n\
    </code>\nTest\n<code>\n>>> order_by_digits([10, 20, 30, 40])\n[10, 30, 40, 20]\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=1 |>\nA solution using Python's heapq:\n\
    <code>\ndef order_by_digits(nums):\n    sum_of_digits = [sum(n) for n in nums]\n\
    \    # heap sort\n    heapq.heapify(sum_of_digits)\n\n    # extract digits and\
    \ get new index\n    new_digits = [int(n) for n in str(sum(sum_of_digits))]\n\
    \    idx = [i for (i,n) in enumerate(new_digits) if n >= new_digits[i-1]][0]\n\
    \n    # return\n    return nums[idx]\n</code>\n<|/ a tags=python |>\n<| a tags=python\
    \ |>\nThis solution is also faster than the other solutions listed here (the timeit\
    \ module is useful here).\n<code>\ndef order_by_digits(nums):\n  nums.sort(reverse=True)\n\
    \  digits = [int(n) for n in str(sum(nums))]\n  indices.clear()\n\n  for i, v\
    \ in enumerate(digits):\n    if v <= digits[i-1]:\n      indices.append(i)\n\n\
    \  return nums[indices]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmponfepo37.js:29\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sum=0;\n\tvar nums_len=nums.length;\n\tif(nums_len==0){return nums;}\n\t\
    nums.sort(function(a, b){\n\t\tvar sum=(a+b);\n\t\treturn (sum%10==0)? (sum/10)*nums_len\
    \ : sum;\n\t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, 1, 11, -11, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpuaw4wvnz.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuaw4wvnz.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, 1,\
    \ 11, -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sum, digit;\n    if(nums.length == 0){\n        return nums;\n    }\n\
    \    digit = 0;\n    sum = 0;\n    for(var i = 0; i < nums.length; i++){\n   \
    \     digit = nums[i] - '0';\n        sum += digit*Math.pow(10, digits.length-i);\n\
    \    }\n    return nums.sort(function(a, b){\n        return sum - Math.abs(a\
    \ - b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpa4qnykn3.js:17\n        sum += digit*Math.pow(10, digits.length-i);\n\
    \                                  ^\n\nReferenceError: digits is not defined\n\
    \    at order_by_points (/tmp/tmpa4qnykn3.js:17:35)\n    at test (/tmp/tmpa4qnykn3.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpa4qnykn3.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var a = [];\n  nums.forEach(function(num){\n    a[0] += num;\n    a.splice(1,\
    \ 0, num);\n  });\n  return a.sort(function(a, b){\n    return a - b;\n  }).map(function(num,\
    \ i){\n    return nums.splice(i, 1)[0];\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, -1, -12, undefined, undefined, undefined\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpwijngbw_.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwijngbw_.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, -1, -12, undefined, undefined, undefined\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var ret=[];\n  nums.forEach(function(n,i){\n    var sum=i?0:n.length;\n   \
    \ for(var j=sum;j;j--)sum=(sum+(Number(n[j])||0))%10;\n    ret[ret.length]=sum;\n\
    \  });\n  return ret;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpyxozpxjy.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyxozpxjy.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0, 0, 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  return nums.sort((a,b) => {\n    const sum = (a + b).toString().split('').reduce((a,b)\
    \ => a + +b, 0);\n    if (sum === 0) {\n      return 0\n    }\n    return sum\
    \ - a > sum - b ? 1 : -1\n  })\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, 11, -11, 1, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpe_q60yo8.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe_q60yo8.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, 11,\
    \ -11, 1, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \treturn nums.sort(function(a, b){\n\t\tvar aInt = Math.floor(a/10), bInt = Math.floor(b/10);\n\
    \t\treturn (aInt + bInt) - (aInt * bInt);\n\t});\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -12, -11, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp9g8u4zo2.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9g8u4zo2.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -12,\
    \ -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \treturn nums.sort(function(a, b){\n\t\tvar a_num = parseInt(a), b_num = parseInt(b),\
    \ sum = 0;\n\t\twhile(a_num > 0){\n\t\t\tsum += a_num % 10;\n\t\t\ta_num = Math.floor(a_num/10);\n\
    \t\t}\n\t\twhile(b_num > 0){\n\t\t\tsum += b_num % 10;\n\t\t\tb_num = Math.floor(b_num/10);\n\
    \t\t}\n\t\tif(sum == 0){\n\t\t\treturn a_num - b_num;\n\t\t}else{\n\t\t\treturn\
    \ sum - b_num;\n\t\t}\n\t});\n}\n\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -12, -11, -1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpumnqhaan.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpumnqhaan.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -12,\
    \ -11, -1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var sorted = nums.slice().sort();\n  var result = [];\n  var temp = 0;\n  for\
    \ (var i = 0; i < nums.length; i++) {\n    temp = sorted[i] + temp;\n    if (temp\
    \ < 0 || temp > 9) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxgxd54om.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxgxd54om.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var sum = 0;\n    var index = 0;\n    nums.sort(function(a, b){\n       \
    \ sum += Math.pow(10, nums.length - index - 1);\n        if(!b) return 0;\n  \
    \      index ++;\n        return sum - b;\n    });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmp04mnylhe.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp04mnylhe.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a,b){return a+b-a});\n    return nums;\n}\n</cell>\n<cell>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<cell>\n\
    order_by_points([]) == []\n</cell>\n<text>\nGreedy Algorithm\n\n</text>\n<text>\n\
    Greedy algorithm is a best-first search algorithm with a running time of $O(n)$\n\
    \n\n</text>\n<text>\nPseudocode:\nInitialize a list S with $0$\nFor each number\
    \ n in G:\n\nAdd n to S\nIf S has a sum greater than or equal to $n$, add 1 to\
    \ T, and remove n from G\n\n\nIf the sum of S and G are equal, add 1 to T, and\
    \ remove all items from S\n\n\n\nPrint T\nTime Complexity: $O(n)$\n\n\n</text>\n\
    <cell>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpynizxwmc.js:12\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var ans = []\n  for (var i = 0, n = nums.length; i < n; i++)\n    if (nums[i]\
    \ > 0)\n      ans.push(nums[i])\n  for (var i = n - 1; i >= 0; i--)\n    if (nums[i]\
    \ > 0)\n      ans.push(nums[i])\n  return ans\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, 11, 1 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmpnh7pa4j9.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnh7pa4j9.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, 11,\
    \ 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \   nums.sort((a,b)=>{\n   let sum = 0;\n   for(let i=0; i<a.length; i++){\n \
    \     sum+=Number(a[i])*Math.pow(10,i);\n   }\n   return sum-Number(b);\n});\n\
    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 11, 1 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpvwgfk5gm.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvwgfk5gm.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 11, 1 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    for(var i in nums){\n        nums.splice(i,1);\n    }\n    nums.sort(function(a,b){\n\
    \        var sumA=a.toString().split(''),\n            sumB=b.toString().split(''),\n\
    \            sumAB=0,\n            i;\n        for(i=0;i<sumA.length;i++){\n \
    \           sumAB+=parseInt(sumA[i]);\n        }\n        for(i=0;i<sumB.length;i++){\n\
    \            sumAB+=parseInt(sumB[i]);\n        }\n        return sumAB-sumA;\n\
    \    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, -11 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpmr7qfn5t.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmr7qfn5t.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, -11\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let ordered = [];\n    let result = [];\n    for(let i = 0; i<nums.length;\
    \ i++){\n        let index = nums.indexOf(-nums[i]);\n        let sum = 0;\n \
    \       for(let j = 0; j < index; j++){\n            sum += nums[j];\n       \
    \ }\n        for(let j = index+1; j < nums.length; j++){\n            sum += nums[j];\n\
    \        }\n        result.push(-sum);\n    }\n    for(let i = 0; i < result.length;\
    \ i++){\n        let index = result.indexOf(ordered[i]);\n        ordered.push(nums[index]);\n\
    \    }\n    return ordered;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ undefined ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpsqogsjiw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsqogsjiw.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ undefined ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var r = [];\n  nums.forEach(function(num){\n    var digits = num.toString().split('');\n\
    \    var sum_of_digits = digits.reduce(function(a,b){\n      return a+b;\n   \
    \ });\n    r.push(num);\n    r.push(sum_of_digits);\n  });\n  r = r.sort();\n\
    \  return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, '-1', -11, '-11', -12, '-12', 1, '1',\
    \ 11, '11' ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpot0n20tk.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpot0n20tk.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    -1,    '-1', -11,\n    '-11', -12,\
    \  '-12',\n    1,     '1',  11,\n    '11'\n  ],\n  expected: [ -1, -11, 1, -12,\
    \ 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        var sum = 0;\n        var points = {\n\
    \            a:a,\n            b:b\n        };\n        var i;\n        for(i\
    \ = 0; i < 4; i++){\n            var value = points[i];\n            if(value){\n\
    \                sum += value;\n            }\n        }\n        return sum;\n\
    \    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp63zjsjao.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp63zjsjao.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var i, j, sort = function(a, b){\n        return (a-b)*Math.floor(a/b)\n\
    \    }\n    for(i = 0; i < nums.length; i++){\n        for (j = 0; j < nums.length;\
    \ j++){\n            if ( nums[j] > nums[j+1] ){\n                var tmp = nums[j];\n\
    \                nums[j] = nums[j+1];\n                nums[j+1] = tmp;\n    \
    \        }\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpzttgmlcv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzttgmlcv.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    \n    // Write your code here\n    \n    var total = 0;\n    var sorted =\
    \ [];\n    for(var i in nums){\n        total += nums[i];\n        sorted.push(nums[i]);\n\
    \    }\n    return sorted;\n    \n};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpjg9pogo1.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjg9pogo1.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var newArr = [];\n    var sum = 0;\n    var length = nums.length;\n    var\
    \ prevSum = nums[0]; //start with the smallest number\n    for(var i = 1; i <\
    \ length; i++){\n        sum = sum + parseInt(nums[i]); //get the sum of the digits\n\
    \        var index = sum - prevSum; //get the index of the item with the sum of\
    \ the digits\n        //if this item is smaller, set it to the smallest item\n\
    \        if(index > 0){\n            newArr[index - 1] = newArr[index - 1] ||\
    \ nums[i];\n        }else{\n            newArr[newArr.length] = nums[i];\n   \
    \     }\n        prevSum = sum;\n    }\n    return newArr;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , , , , , , , , , 11, -1, -11, -12 ]\n\
    \nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpqq3eyeui.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqq3eyeui.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <9 empty items>, 11, -1, -11, -12 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var result = [];\n    nums.map(function(num){\n        if (num > 0){\n  \
    \          var rem = num % 10;\n            var i = result.findIndex(function(item){\
    \ return item.rem == rem;});\n            if (i == -1){\n                result.push({'rem':rem,'num':\
    \ num});\n            } else {\n                result[i] = result[i].rem + rem;\n\
    \            }\n        }\n    });\n    if (result.length > 0){\n        result\
    \ = result.sort(function(a, b){\n            return b.num - a.num;\n        });\n\
    \        for(var i = 0; i < result.length; i++){\n            if (result[i].rem\
    \ == 0){\n                result = result.splice(i+1,1).concat(result);\n    \
    \        }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2 ]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmp_677qiy8.js:39:10)\n    at Object.<anonymous> (/tmp/tmp_677qiy8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ -1, -11, 1, -12, 11\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sorted = [];\n    let store = {};\n    let sum = 0;\n    nums.forEach((n)\
    \ => {\n        let num = (n.toString(10)).split('');\n        sum = sum + Number(num[0]);\n\
    \        num.splice(0, 1);\n        store.set(sum, num);\n        sorted.push(sum);\n\
    \        sum = 0;\n    });\n    let keys = store.keys();\n    console.log(keys);\n\
    \    return keys.sort().map((key) => {\n        return store.get(key)\n    });\n\
    }\n</code>\n<|/ a tags=data-structures,javascript,algorithm |>\n<| c |>\nWhat\
    \ if there are more than 1 items that share the same sum, for example [10, 7,\
    \ 8, 9, 1, 12, 6, 1, 11] which have the same sum?\n<|/ c |>\n<| c |>\nI added\
    \ an answer that seems to work better then this one.\n<|/ c |>\n<| c |>\nthank\
    \ you for noticing it\n<|/ c |>\n<| c |>\nYou're right that your solution seems\
    \ to work better than the original one. I think the problem is that the `store.set`\
    \ method adds a key only if it doesn't already exist.\n<|/ c |>\n<| c |>\nyes\
    \ thats the problem I had. Can you please tell me how can i avoid this? I mean\
    \ how can i check if a key exist?\n<|/ c |>\n<| a dscore=2 |>\nA very good way\
    \ to sort your array is to transform each number to a string and then to sort\
    \ its characters (this is what sort() does).\n\n<code>\nconst array = [10, 1,\
    \ 7, 8, 9, 1, 12, 6, 1, 11];\n\nconst sortedArray = array.map(n => n.toString())\n\
    \  .sort((a, b) => a.localeCompare(b))\n  .map(n => Number(n));\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmputpvfp7x.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  const ordered = [];\n  const numsSorted = nums.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  for(let i = 0; i < numsSorted.length; i++){\n    ordered.push(numsSorted[i]);\n\
    \  }\n  return ordered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6wa2lvve.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6wa2lvve.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    return nums.sort(function(a, b){\n        var x = Math.abs(a), y = Math.abs(b);\n\
    \        return x - y;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, -1, 11, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphpaclo4z.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphpaclo4z.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1, 11,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  var ret = [];\n  for(var i = 0; i < nums.length; i++){\n    if(nums[i] ===\
    \ 0){\n      ret.push(nums[i]);\n    }else{\n      var digits = Math.log10(nums[i]);\n\
    \      var num = nums[i];\n      while(num > 0){\n        num -= 10;\n       \
    \ ret.push(num);\n      }\n    }\n  }\n  return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -9, 1, -9 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpfvoyag2u.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfvoyag2u.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -9, 1, -9\
    \ ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let sortOrder = [];\n    let numsCopy = nums.slice();\n    numsCopy.sort((a,b)=>a-b);\n\
    \    for (let i = 0; i < nums.length; i++){\n        sortOrder.push(numsCopy[i]);\n\
    \    }\n    return sortOrder;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpazfp845i.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazfp845i.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let n = nums.length;\n    let arr = [];\n    for (let i=0; i<n; i++){\n \
    \       arr.push([nums[i], i]);\n    }\n    arr = arr.sort((a,b) => (a[0] < b[0]\
    \ ? -1 : (a[0] > b[0] ? 1 : 0)));\n    arr.sort((a,b) => a[1] - b[1]);\n    return\
    \ arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11,\
    \ -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 1, 0 ], [ 11, 1 ], [ -1, 2 ], [ -11,\
    \ 3 ], [ -12, 4 ] ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpv1hfe845.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1hfe845.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 0 ], [ 11, 1 ], [ -1, 2 ], [ -11,\
    \ 3 ], [ -12, 4 ] ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    return nums.sort(function(a, b){\n        //Find the difference of sum and\
    \ digits to sort\n        var sumDiff = sum_of_digits(a) - sum_of_digits(b);\n\
    \        var digitDiff = sum_of_digits(a) - sum_of_digits(b);\n\n        //If\
    \ sumDiff is negative then a must be before b\n        if(sumDiff < 0){\n    \
    \        return -1;\n        }\n        //If sumDiff is positive then a must be\
    \ after b\n        if(sumDiff > 0){\n            return 1;\n        }\n\n    \
    \    //If the difference of sums is 0, then sort by digit.\n        //Otherwise,\
    \ leave this list as it is.\n        return digitDiff;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprb29ro15.js:11\n        var sumDiff = sum_of_digits(a) - sum_of_digits(b);\n\
    \                      ^\n\nReferenceError: sum_of_digits is not defined\n   \
    \ at /tmp/tmprb29ro15.js:11:23\n    at Array.sort (<anonymous>)\n    at order_by_points\
    \ (/tmp/tmprb29ro15.js:9:17)\n    at test (/tmp/tmprb29ro15.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmprb29ro15.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tconst max_digit = nums.reduce((max, n) => max * 10 + n, [0, 0])[1]\n\tconst\
    \ sorted_nums = nums.sort((a, b) => b - a)\n\tconst sorted_indexs = sorted_nums.map(n\
    \ => Math.floor(n / max_digit))\n\treturn sorted_indexs.map(i => sorted_nums[i])\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ undefined ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpoc0ojvzh.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoc0ojvzh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ undefined ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    let list = new Array(nums.length);\n    let max_sum = 0;\n    for(let i =\
    \ 0; i < nums.length; i++){\n        let current_sum = 0;\n        for(let j =\
    \ 0; j < nums[i].length; j++){\n            current_sum += nums[i][j];\n     \
    \   }\n        if(current_sum > max_sum){\n            list = nums.slice();\n\
    \            list[i] = current_sum;\n            max_sum = current_sum;\n    \
    \    }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , , , ,  ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmp_grh1moj.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_grh1moj.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <5 empty\
    \ items> ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums = nums.sort(function(a, b){\n        return a - b;\n    });\n    nums.reverse();\n\
    \    return nums;\n}\n\nvar count_letters = function(num){\n    var nums = [];\n\
    \    var numstr = \"\";\n    var numstr = num.toString();\n    var numlen = numstr.length;\n\
    \    for(var i=0; i<numlen; i++){\n        nums.push(numstr[i]);\n    }\n    var\
    \ count_nums = order_by_points(nums);\n    var letters = [];\n    for(var i=0;\
    \ i<count_nums.length; i++){\n        letters.push(\"'\" + count_nums[i] + \"\
    '\");\n    }\n    return letters;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 11, 1, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpp48cwl44.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp48cwl44.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11, 1, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var res = [];\n    var hash = {};\n    nums.forEach(function(num){\n    \
    \    var numStr = num.toString();\n        hash[numStr] = hash[numStr] ? hash[numStr]\
    \ + 1 : 1;\n        for(var i = numStr.length-1; i >= 0; i--){\n            var\
    \ ch = numStr.charAt(i);\n            var digit = parseInt(ch);\n            var\
    \ preDigit = digit;\n            if(hash[numStr] == 0){\n                res.push(preDigit);\n\
    \                hash[numStr] = 1;\n            }\n            else if(hash[numStr]\
    \ > digit){\n                hash[numStr]--;\n                res.push(preDigit);\n\
    \            }\n            else{\n                hash[numStr]++;\n         \
    \       res.push(digit);\n            }\n        }\n    });\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1, 1, 1, NaN, 1, 1, NaN, 2, 1, NaN\
    \ ]\n\nshould equal\n\n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp26zll87w.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp26zll87w.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n      1, 1,   1, 1, NaN,\n      1, 1,\
    \ NaN, 2,   1,\n    NaN\n  ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    nums.sort(function(a, b){\n        var x = a.toString().split('').reverse().join('');\n\
    \        var y = b.toString().split('').reverse().join('');\n        return parseInt(x,\
    \ 10) - parseInt(y, 10);\n    });\n    return nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, -1, 11, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpepc9tv1i.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpepc9tv1i.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1, 11,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort((a,b)=>{\n\t\tlet sum1 = Math.round(a);\n\t\tlet sum2 = Math.round(b);\n\
    \t\tlet d = sum1 - sum2;\n\t\tif(d == 0){\n\t\t\treturn a.localeCompare(b);\n\t\
    \t}\n\t\treturn d;\n\t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, -11, -1, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6tr60bkz.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6tr60bkz.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -12, -11,\
    \ -1, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tif(!nums.length) return nums;\n\tnums.sort(function(a, b){\n\t\tvar a_num =\
    \ Math.abs(a), b_num = Math.abs(b);\n\t\tvar sum_a = a_num.toString().split('').sort().join('');\n\
    \t\tvar sum_b = b_num.toString().split('').sort().join('');\n\t\treturn sum_a\
    \ - sum_b;\n\t});\n\treturn nums;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, -1, 11, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpoom7oygx.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpoom7oygx.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1, 11,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var i, j, k, tmp, sorted_nums = [];\n    for(i = 0, j = nums.length - 1;\
    \ i < j; i++){\n        tmp = nums[i]+nums[j];\n        if(tmp > 0){\n       \
    \     sorted_nums.push(tmp);\n        }\n        else{\n            sorted_nums.push(nums[i]);\n\
    \        }\n    }\n    for(i = 0, j = nums.length - 1; i < j; i++){\n        for(k\
    \ = i+1; k < j; k++){\n            if(nums[i]+nums[k] < 0){\n                tmp\
    \ = nums[i] + nums[k];\n                nums[i] = tmp;\n                nums[k]\
    \ = tmp;\n            }\n        }\n    }\n    return sorted_nums;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11 ]\n\nshould equal\n\n[\
    \ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp5suqifwp.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5suqifwp.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  let sum = [];\n  let sorted = [];\n  nums.forEach((num,index) => {\n    sum[index]\
    \ = num.toString().split('').reduce((sum, digit) => {\n      return sum + parseInt(digit);\n\
    \    }, 0);\n  })\n  nums.forEach((num, index) => {\n    if(sum[index] == num){\n\
    \      sorted.push(num);\n    }\n  });\n  return sorted;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1 ]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpmy5nh72j.js:29:10)\n    at Object.<anonymous> (/tmp/tmpmy5nh72j.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ -1, -11, 1, -12, 11\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var order = [];\n    for (var i = 0, len = nums.length; i < len; i++){\n\
    \        // Sum all digits in the number\n        var numsSum = 0;\n        for\
    \ (var j = 0, k = i; j < k; j++){\n            numsSum += nums[j].digit;\n   \
    \     }\n        // If this is the smallest number in the original list,\n   \
    \     // then push the current number into the order\n        if (numsSum < 0){\n\
    \            order.push(nums[i]);\n        }\n    }\n    return order;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpmfio3h_m.js:30:10)\n    at Object.<anonymous> (/tmp/tmpmfio3h_m.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var arr = [];\n    var len = nums.length;\n    for(var i=0; i< len; i++){\n\
    \        var num = nums[i];\n        var sum = 0;\n        for(var j=0; j<num.length;\
    \ j++){\n            sum += num[j];\n        }\n        arr.push(sum);\n    }\n\
    \    arr.sort(function(a,b){\n        return a - b;\n    });\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0 ]\n\nshould equal\n\n[ -1,\
    \ -11, 1, -12, 11 ]\n    at test (/tmp/tmpdh4ig2w0.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdh4ig2w0.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    var copy = nums.slice();\n    copy.sort(function(a, b){\n        return sum_digits(a)\
    \ - sum_digits(b);\n    });\n    return copy;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7bsmhtia.js:11\n        return sum_digits(a) - sum_digits(b);\n\
    \        ^\n\nReferenceError: sum_digits is not defined\n    at /tmp/tmp7bsmhtia.js:11:9\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp7bsmhtia.js:10:10)\n\
    \    at test (/tmp/tmp7bsmhtia.js:21:20)\n    at Object.<anonymous> (/tmp/tmp7bsmhtia.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums.sort(sort_nums);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd403ujss.js:9\n\tnums.sort(sort_nums);\n\t          ^\n\nReferenceError:\
    \ sort_nums is not defined\n    at order_by_points (/tmp/tmpd403ujss.js:9:12)\n\
    \    at test (/tmp/tmpd403ujss.js:16:20)\n    at Object.<anonymous> (/tmp/tmpd403ujss.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tnums = nums.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tvar nums2 = nums.map(function(n){return\
    \ parseInt(n/10,10)});\n\tvar nums3 = nums2.map(function(n){return parseInt(n/100,10)});\n\
    \tvar nums4 = nums3.map(function(n){return parseInt(n/1000,10)});\n\tvar nums5\
    \ = nums4.map(function(n){return parseInt(n/10000,10)});\n\tvar nums6 = nums5.map(function(n){return\
    \ parseInt(n/100000,10)});\n\tvar nums7 = nums6.map(function(n){return parseInt(n/1000000,10)});\n\
    \tvar nums8 = nums7.map(function(n){return parseInt(n/10000000,10)});\n\treturn\
    \ nums8.sort(function(a,b){return a-b});\n}\n<|/ file filename=main.js source=github\
    \ dstars=1 |>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkhxw0fs9.js:21\n<|/ file filename=main.js source=github dstars=1\
    \ |>\n^\n\nSyntaxError: Unexpected token '<'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar sorted = nums.sort(function(a, b){\n\t\treturn sum_to_digits(a) - sum_to_digits(b);\n\
    \t});\n\treturn sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptbpvsfgo.js:10\n\t\treturn sum_to_digits(a) - sum_to_digits(b);\n\
    \t\t^\n\nReferenceError: sum_to_digits is not defined\n    at /tmp/tmptbpvsfgo.js:10:3\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmptbpvsfgo.js:9:20)\n\
    \    at test (/tmp/tmptbpvsfgo.js:20:20)\n    at Object.<anonymous> (/tmp/tmptbpvsfgo.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \    return nums.sort((a,b) => {\n        let sumOfDigits = a.toString().split('').reduce((a,b)\
    \ => +a + +b);\n        let indexSumOfDigits = nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b)).indexOf(a.toString());\n        if (sumOfDigits == +a.toString().split('').reduce((a,b)\
    \ => +a + +b) && indexSumOfDigits == +nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b))[indexSumOfDigits]) return 0;\n        else if (sumOfDigits == +a.toString().split('').reduce((a,b)\
    \ => +a + +b) && !indexSumOfDigits && indexSumOfDigits == +nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b))[0]) return 0;\n        else return +a.toString().split('').reduce((a,b)\
    \ => +a + +b) - +nums.map(x => x.toString().split('').reduce((a,b) => +a + +b))[0]\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgzfbtkz4.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgzfbtkz4.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \tvar result = [];\n\tnums.map(function(num){\n\t\tif(num>0){\n\t\t\tnum%10 >\
    \ 0 ? result.push(num) : result.push(num*-1);\n\t\t}\n\t});\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmph1ke2595.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph1ke2595.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n\
    \  //sort the points by their sum\n  return nums.sort((a, b) => a+b).filter(num\
    \ => num > 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11 ]\n\nshould equal\n\n[ -1, -11,\
    \ 1, -12, 11 ]\n    at test (/tmp/tmpou9jjj9d.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpou9jjj9d.js:26:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11 ],\n\
    \  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
