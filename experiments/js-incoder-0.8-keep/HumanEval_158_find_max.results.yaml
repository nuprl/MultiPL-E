name: HumanEval_158_find_max
language: js
results:
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max = 0;\n\tfor(var i = 0; i < words.length; i++){\n\
    \t\tfor(var j = 0; j < words[i].length; j++){\n\t\t\tvar count = 0;\n\t\t\tfor(var\
    \ k = 0; k < words.length; k++){\n\t\t\t\tif(words[k][j] == words[i][j]){\n\t\t\
    \t\t\tcount ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(max == 0){\n\t\treturn \"\";\n\t}\n\telse{\n\t\treturn\
    \ words[words.length-1][words[words.length-1].length-max];\n\t}\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'g'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpyaku3mae.js:35:10)\n    at Object.<anonymous> (/tmp/tmpyaku3mae.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'g',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar charsCounts = {};\n\tvar sortedWords = words.slice();\n\
    \tsortedWords.sort(function(a, b){return charsCounts[a] - charsCounts[b]});\n\t\
    var maxWord = sortedWords.pop();\n\twhile(words.length && charsCounts[maxWord]\
    \ < charsCounts[words[0]]){\n\t\tvar maxWord = words.pop();\n\t}\n\tif(words.length){\n\
    \t\tvar maxIndex = words.indexOf(maxWord);\n\t\treturn sortedWords[maxIndex];\n\
    \t}\n\treturn maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp8slcuze0.js:28:10)\n    at Object.<anonymous> (/tmp/tmp8slcuze0.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let dictionary = [];\n  words.forEach((word) => {\n    dictionary.push(word);\n\
    \  });\n  dictionary = dictionary.sort();\n  let maxNum = 0;\n  let maxWord =\
    \ \"\";\n  dictionary.forEach((word) => {\n    let numOfChars = dictionary.filter((word)\
    \ => {\n      return word == word;\n    }).length;\n    if(numOfChars > maxNum){\n\
    \      maxNum = numOfChars;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpcl7ek2df.js:33:10)\n    at Object.<anonymous> (/tmp/tmpcl7ek2df.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var word = \"\";\n  var letterCount = 0;\n  \n  for(var\
    \ i=0; i < words.length; i++){\n    letterCount = words.reduce((acc, word) =>\
    \ {\n      return word.split('').filter((letter) => word == letter).length;\n\
    \    }, 0);\n    \n    if(letterCount > letter) {\n      word = words[i];\n  \
    \    letter = letterCount;\n    }\n  }\n\n  return word;\n}\n</cell>\n<cell>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8njjb93y.js:25\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // Write your code here\n    var word = words[0];\n  \
    \  var uniqueChars = word.length;\n    for (var i = 1; i < words.length; i++){\n\
    \        var newWord = words[i];\n        var count = newWord.length;\n      \
    \  for (var j = 0; j < word.length; j++){\n            if (newWord.charAt(j) ==\
    \ word.charAt(j)){\n                count--;\n            }\n        }\n     \
    \   if (count > uniqueChars){\n            uniqueChars = count;\n            word\
    \ = newWord;\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpm9nbhkyo.js:34:10)\n    at Object.<anonymous> (/tmp/tmpm9nbhkyo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar maxWord = \"\";\n\tvar maxCount = 1;\n\tvar maxIndex\
    \ = 0;\n\tvar currentWord = \"\";\n\tvar currentCount = 1;\n\tfor (var i = 0;\
    \ i < words.length; i++){\n\t\tcurrentWord = words[i];\n\t\tcurrentCount = 1;\n\
    \t\tfor (var j = 0; j < words.length; j++){\n\t\t\tif (i != j){\n\t\t\t\tvar currentWord2\
    \ = words[j];\n\t\t\t\tvar currentCount2 = 1;\n\t\t\t\tif (currentWord.toLowerCase()\
    \ < currentWord2.toLowerCase()){\n\t\t\t\t\tcurrentWord = currentWord2;\n\t\t\t\
    \t\tcurrentCount = 1;\n\t\t\t\t}else{\n\t\t\t\t\tcurrentWord = currentWord2;\n\
    \t\t\t\t\tcurrentCount = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentCount++;\n\t\t}\n\
    \t\tif (currentCount > maxCount){\n\t\t\tmaxWord = currentWord;\n\t\t\tmaxCount\
    \ = currentCount;\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpv2f2r9r9.js:45:10)\n    at Object.<anonymous> (/tmp/tmpv2f2r9r9.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = 0;\n\tlet word = \"\";\n\tfor (let i = 0; i <\
    \ words.length; i++){\n\t\tlet count = 1;\n\t\tlet word2 = \"\";\n\t\tfor (let\
    \ j = 0; j < words[i].length; j++){\n\t\t\tword2 += words[i][j];\n\t\t\tif (words[i].indexOf(word2,\
    \ 0) != words[i].length){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > max){\n\
    \t\t\tmax = count;\n\t\t\tword = words[i];\n\t\t}\n\t}\n\treturn word;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpy5q9hqi_.js:34:10)\n    at Object.<anonymous> (/tmp/tmpy5q9hqi_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let word\
    \ of words) {\n    const uniqueChar = word.split('').sort().filter((char) => word\
    \ === char).length\n    if (uniqueChar > maxCount) {\n      maxCount = uniqueChar\n\
    \      maxWord = word\n    }\n  }\n  return maxWord\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp3rxowx47.js:26:10)\n    at Object.<anonymous> (/tmp/tmp3rxowx47.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = 0;\n\tlet current_word = \"\";\n\t\n\tfor(let\
    \ i = 0; i < words.length; i++){\n\t\tlet counter = 0;\n\t\tlet word = words[i];\n\
    \t\t\n\t\tfor(let j = 0; j < word.length; j++){\n\t\t\tif(counter == 0){\n\t\t\
    \t\tcurrent_word = word;\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\t\n\t\t\tfor(let k\
    \ = 0; k < current_word.length; k++){\n\t\t\t\tif(current_word[k] == word[j]){\n\
    \t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(counter == max){\n\
    \t\t\tmax = counter;\n\t\t\tcurrent_word = \"\";\n\t\t}\n\t}\n\t\n\tif(max > words.length\
    \ - 1){\n\t\treturn \"\";\n\t}\n\t\n\treturn current_word;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp58bdw8tt.js:49:10)\n    at Object.<anonymous> (/tmp/tmp58bdw8tt.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let result = words[0];\n  let map = new Map();\n  for (let\
    \ i = 0; i < words.length; i++) {\n    map.set(words[i], map.has(words[i]) ? map.get(words[i])\
    \ + 1 : 1);\n  }\n  map.forEach((value, key) => {\n    if (value > result.length)\
    \ result = key;\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpcr2ncix9.js:25:10)\n    at Object.<anonymous> (/tmp/tmpcr2ncix9.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    if (words.length === 0) {\n        return \"\";\n    }\n\
    \    \n    words.sort(function(a, b) {\n        return a.length < b.length ? -1\
    \ :\n               a.length > b.length ? 1 :\n               0;\n    });\n  \
    \  \n    return words[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpupsbws1p.js:27:10)\n    at Object.<anonymous> (/tmp/tmpupsbws1p.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let wordsList=words.map(word=> word.split(\"\").filter((v,i,self)=>\
    \ self.indexOf(v)===i));\n  let uniqueChar=wordsList.reduce((acc,array)=>{\n \
    \   return acc+array.length;\n  },0);\n  let maxIndex=wordsList.reduce((acc,array)=>{\n\
    \    let max=0;\n    for(let i=0;i<array.length;i++){\n      if(array[i].length>max){\n\
    \        max=array[i].length;\n      }\n    }\n    return acc;\n  },0);\n  if(uniqueChar>maxIndex){\n\
    \    return words[maxIndex];\n  }\n  return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpyb76elcs.js:33:10)\n    at Object.<anonymous> (/tmp/tmpyb76elcs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet word;\n\tlet length = words.length;\n\tfor(let i=0;i<length;i++){\n\
    \t\tlet j=i;\n\t\twhile(j<length){\n\t\t\tif(words[j].length > words[i].length){\n\
    \t\t\t\tword = words[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'enam'\n  \
    \  at test (/tmp/tmp6jl2by1g.js:31:10)\n    at Object.<anonymous> (/tmp/tmp6jl2by1g.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max = 0;\n    let word = \"\";\n    let words = [];\n\
    \    let uniqueCharacters = {};\n    words.forEach(word => {\n        let wordArray\
    \ = word.split('');\n        let uniqueChar = wordArray.filter(char => uniqueCharacters[char]\
    \ === undefined ? true : false);\n        uniqueCharacters = uniqueCharacters.concat(uniqueChar);\n\
    \    });\n    for(let char of uniqueCharacters){\n        if(uniqueCharacters[char]\
    \ > max){\n            max = uniqueCharacters[char];\n            word = char;\n\
    \        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1w3vl_7n.js:11\n    let words = [];\n        ^\n\nSyntaxError:\
    \ Identifier 'words' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  words = words.sort();\n  var max = 0;\n  var maxString =\
    \ \"\";\n  for(var i = 0; i < words.length; i++){\n    if(words[i].length>max){\n\
    \      max = words[i].length;\n      maxString = words[i];\n    }\n  }\n  return\
    \ maxString;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'prrk'\n\nshould equal\n\n'this'\n    at\
    \ test (/tmp/tmp7bxmt4mh.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7bxmt4mh.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n  expected: 'this',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max_words = \"\";\n  var max_number = 0;\n  \n  for\
    \ (var i = 0; i < words.length; i++) {\n    for (var j = 0; j < words[i].length;\
    \ j++) {\n      var counter = 0;\n      for (var k = 0; k < words.length; k++)\
    \ {\n        if (words[k][j] == words[i][j]) {\n          counter++;\n       \
    \ }\n      }\n      if (counter > max_number) {\n        max_number = counter;\n\
    \        max_words = words[i]\n      }\n    }\n  }\n  \n  return max_words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpso456o2s.js:35:10)\n    at Object.<anonymous> (/tmp/tmpso456o2s.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max = null;\n  let max_count = 0;\n  for (let i = 0;\
    \ i < words.length; i++){\n    let word = new Set(words[i]);\n    for (let j =\
    \ 0; j < word.length; j++){\n      max_count = Math.max(max_count, word[j]);\n\
    \    }\n  }\n  for (let i = 0; i < words.length; i++){\n    let word = new Set(words[i]);\n\
    \    for (let j = 0; j < word.length; j++){\n      if (max_count == word[j]){\n\
    \        continue;\n      }\n      if (word[j] == max_count){\n        return\
    \ words[i];\n      }\n    }\n  }\n  return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp00pjvirg.js:36:10)\n    at Object.<anonymous> (/tmp/tmp00pjvirg.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var result = \"\";\n  var counts = {};\n  for(var i = 0;\
    \ i < words.length; i++){\n    var word = words[i];\n    counts[word] = counts[word]\
    \ ? counts[word] + 1 : 1;\n    if(counts[word] > 1){\n      result = word;\n \
    \     break;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpusz6bhe0.js:27:10)\n    at Object.<anonymous> (/tmp/tmpusz6bhe0.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var len = words.length;\n    var maxCharCount = 0;\n \
    \   var wordCountMap = {};\n    for (var i=0;i<len;i++){\n        var word = words[i];\n\
    \        if (wordCountMap[word]){\n            wordCountMap[word]++;\n       \
    \ } else {\n            wordCountMap[word] = 1;\n        }\n        if (wordCountMap[word]\
    \ > maxCharCount){\n            maxCharCount = wordCountMap[word];\n        }\n\
    \    }\n    for (var i=0;i<len;i++){\n        var word = words[i];\n        if\
    \ (wordCountMap[word] == maxCharCount){\n            return word;\n        }\n\
    \    }\n    return \"\";\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp7glylx4s.js:36:10)\n    at Object.<anonymous> (/tmp/tmp7glylx4s.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max = words[0]\n    let index = words.findIndex(word\
    \ => word.length < word.length)\n    while(index >= 0){\n        if(words[index].length\
    \ < words[max].length){\n            max = index\n        }\n        index = words.findIndex(word\
    \ => word.length < word.length)\n    }\n    return words[max]\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp_maz1azj.js:24:10)\n    at Object.<anonymous> (/tmp/tmp_maz1azj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let dict = {};\n  words.map(word => {\n    let count = dict[word]\
    \ || 0;\n    dict[word] = count + 1;\n  })\n  let max = 0, maxStr = \"\";\n  for(let\
    \ word in dict){\n    if(dict[word] > max){\n      max = dict[word];\n      maxStr\
    \ = word;\n    }\n  }\n  return maxStr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp5lq0hzar.js:29:10)\n    at Object.<anonymous> (/tmp/tmp5lq0hzar.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = \"\", uniqueCount = 0, str = \"\";\n  words.forEach(function(word){\n\
    \    if(uniqueCount < word.length)\n      uniqueCount = word.length;\n    str\
    \ = word;\n    if(word == max)\n      str = str.toLowerCase();\n    if(str.length\
    \ > max)\n      max = str;\n  });\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmprqywst2m.js:27:10)\n    at Object.<anonymous> (/tmp/tmprqywst2m.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = {count:0, word:\"\"};\n  for(var i=0;i<words.length;i++){\n\
    \    if(max.count < words[i].length){\n      max = words[i];\n    }\n    if(max.count\
    \ > words[i].length){\n      max.word = words[i];\n    }\n  }\n  return max.word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp9xcjhz54.js:26:10)\n    at Object.<anonymous> (/tmp/tmp9xcjhz54.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max_chars = 0, max_word = \"\";\n    words.forEach(function(word){\n\
    \        word.length.forEach(function(c){\n            max_chars += 1;\n     \
    \   });\n        if (max_chars > word.length){\n            max_char = word;\n\
    \        }\n    });\n    return max_chars;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuaew4ooq.js:11\n        word.length.forEach(function(c){\n    \
    \                ^\n\nTypeError: word.length.forEach is not a function\n    at\
    \ /tmp/tmpuaew4ooq.js:11:21\n    at Array.forEach (<anonymous>)\n    at find_max\
    \ (/tmp/tmpuaew4ooq.js:10:11)\n    at test (/tmp/tmpuaew4ooq.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpuaew4ooq.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  // Your code here!\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp_6esu670.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_6esu670.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    words.sort();\n    var max = words[0];\n    for (var i\
    \ = 1; i < words.length; i++) {\n        var num_chars = words[i].split('').length;\n\
    \        if (num_chars > max.split('').length)\n            max = words[i];\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'prrk'\n\nshould equal\n\n'this'\n    at\
    \ test (/tmp/tmppac88cf9.js:31:10)\n    at Object.<anonymous> (/tmp/tmppac88cf9.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n  expected: 'this',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxLen = 0;\n    let maxStr = \"\";\n    for(let i\
    \ = 0; i < words.length; i++){\n        let str = words[i].split('')\n       \
    \ for(let j = 0; j < str.length; j++){\n            if(maxLen < str[j].length){\n\
    \                maxLen = str[j].length;\n                maxStr = words[i];\n\
    \            }\n        }\n    }\n    return maxStr\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpc5zzkp0l.js:28:10)\n    at Object.<anonymous> (/tmp/tmpc5zzkp0l.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var max_word = \"\";\n    for(var i=0;i<words.length;i++){\n\
    \        var word = words[i];\n        var count = words[i].split(\"\").length;\n\
    \        if(count>max){\n            max = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpa6rm00v6.js:28:10)\n    at Object.<anonymous> (/tmp/tmpa6rm00v6.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var best = \"\";\n    var num_unique = 0;\n    for (var\
    \ i=0;i<words.length;i++){\n        var word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            var c = word[j];\n            if(!best || num_unique <= num_unique[c]){\n\
    \                best = c; num_unique++;\n            }\n        }\n    }\n  \
    \  return best;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'n'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpuxxqzla0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpuxxqzla0.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var uniqueCharCounts = {}\n    var max = \"\"\n    var\
    \ word = \"\"\n    for (const word of words) {\n        var uniqueCharCount =\
    \ uniqueCharCounts[word]\n        if (uniqueCharCount == undefined) {\n      \
    \      uniqueCharCount = 1\n        } else {\n            uniqueCharCount++\n\
    \        }\n        if (uniqueCharCount > uniqueCharCounts[max]) {\n         \
    \   uniqueCharCounts[max] = uniqueCharCount\n            max = word\n        }\n\
    \    }\n    return max\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpya8s92em.js:32:10)\n    at Object.<anonymous> (/tmp/tmpya8s92em.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max=0;\n    var word=\"\";\n    for (var i=0;i<words.length;i++){\n\
    \        if (words.length>1 && word.length>0) {\n            max++;\n        }\n\
    \        word=words[i];\n        var n=word.length;\n        for (var j=0;j<n;j++){\n\
    \            var num=word.charAt(j).charCodeAt(0);\n            if (num>max)\n\
    \                max=num;\n        }\n        if (max>0) word=word.substring(0,max);\n\
    \    }\n    return word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpzybqn2un.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzybqn2un.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max=0;\n  let maxString=\"\";\n  let maxIndex=-1;\n\
    \  words.forEach((item, index) => {\n    if(max<item.length)\n    {\n      max=item.length;\n\
    \      maxIndex=index;\n      maxString=item;\n    }\n  })\n  return maxString;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpqnajqejw.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqnajqejw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar maxWord;\n\tvar maxCount = 0;\n\tfor (var i=0; i<words.length;\
    \ i++){\n\t\tvar uniqueChars = 0;\n\t\tfor (var j=0; j<words[i].length; j++){\n\
    \t\t\tif (words[i][j] === '-') {\n\t\t\t\tuniqueChars++;\n\t\t\t}\n\t\t}\n\t\t\
    if (uniqueChars > maxCount) {\n\t\t\tmaxWord = words[i];\n\t\t\tmaxCount = uniqueChars;\n\
    \t\t}\n\t}\n\treturn maxWord;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp6oj3ng_m.js:31:10)\n    at Object.<anonymous> (/tmp/tmp6oj3ng_m.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max;\n    var maxChar;\n    var maxCharNum = 0;\n\
    \    var maxCharNumIndex;\n    var maxWord;\n    var maxWordIndex;\n    var word;\n\
    \    var wordIndex;\n    \n    for (var i = 0; i<words.length; i++){\n       \
    \ word = words[i];\n        \n        for (var j = 0; j<word.length; j++){\n \
    \           \n            if (maxCharNumIndex == undefined){\n               \
    \ maxCharNumIndex = j;\n                maxCharNum = word[j];\n              \
    \  maxWord = word;\n                maxWordIndex = i;\n            }\n       \
    \     else if (maxCharNum < word[j]){\n                maxCharNumIndex = j;\n\
    \                maxCharNum = word[j];\n                maxWord = word;\n    \
    \            maxWordIndex = i;\n            }\n        }\n    }\n\n    return\
    \ maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpoa404xyd.js:47:10)\n    at Object.<anonymous> (/tmp/tmpoa404xyd.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    words.sort((a,b) => a.length - b.length)\n    var max_index\
    \ = -1\n    var max_count = 0\n    words.forEach(word => {\n        word = word.toString()\n\
    \        var count = words.filter(w => w.indexOf(word) != -1).length\n       \
    \ if (count > max_count) {\n            max_count = count\n            max_index\
    \ = words.indexOf(word)\n        }\n    })\n    return words[max_index]\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp_57mm46_.js:28:10)\n    at Object.<anonymous> (/tmp/tmp_57mm46_.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxWord = \"\";\n    let maxCount = 1;\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        let word = words[i];\n\
    \        for(let j = 0; j < word.length; j++){\n            for(let k = 0; k <\
    \ words[j].length; k++){\n                count += words[j][k];\n            }\n\
    \        }\n        if(maxCount < count){\n            maxCount = count;\n   \
    \         maxWord = word;\n        }\n    }\n    return maxWord;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9ik4s6yc.js:15\n            for(let k = 0; k < words[j].length;\
    \ k++){\n                                        ^\n\nTypeError: Cannot read property\
    \ 'length' of undefined\n    at find_max (/tmp/tmp9ik4s6yc.js:15:41)\n    at test\
    \ (/tmp/tmp9ik4s6yc.js:31:20)\n    at Object.<anonymous> (/tmp/tmp9ik4s6yc.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  if (words.length == 0) {\n    return \"\";\n  }\n  let maxCount\
    \ = 0;\n  let maxWord = \"\";\n  let minWord = \"\";\n  let minCount = Number.MAX_VALUE;\n\
    \  words.forEach(function(word){\n    let count = words.length;\n    for (let\
    \ i = 0; i < word.length; i++){ \n      if (word[i] != word[0]){ \n        count--;\n\
    \      }\n    }\n    if (count > maxCount){\n      maxCount = count;\n      maxWord\
    \ = word;\n    }\n    else if (count < minCount){\n      minCount = count;\n \
    \     minWord = word;\n    }\n  })\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp7mevgwd6.js:40:10)\n    at Object.<anonymous> (/tmp/tmp7mevgwd6.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var result = \"\";\n    var max = 0;\n    var word = \"\
    \";\n    for(var i = 0;i < words.length; i++){\n        word = words[i];\n   \
    \     for(var j = 0; j < word.length; j++){\n            var length = word[j].length;\n\
    \            for(var k = j;k < word.length;k++){\n                if(word[j] ==\
    \ word[k]){\n                    length--;\n                }\n            }\n\
    \            if(length >= max){\n                result = word;\n            \
    \    max = length;\n            }\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp8bn7au9q.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8bn7au9q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\twords.forEach(function(word){\n\t\tword.split(\"\").map(function(char){\n\
    \t\t\tif(chars.indexOf(char) < 0){\n\t\t\t\tchars.push(char);\n\t\t\t}\n\t\t})\n\
    \t});\n\t\n\treturn chars.reduce(function(prev, cur){\n\t\tvar count = words.filter(function(word){\n\
    \t\t\treturn word.indexOf(cur) > -1;\n\t\t}).length;\n\t\tif(count > prev.length){\n\
    \t\t\treturn cur;\n\t\t}\n\t\treturn prev;\n\t}, \"\");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2djpxe67.js:11\n\t\t\tif(chars.indexOf(char) < 0){\n\t\t\t^\n\n\
    ReferenceError: chars is not defined\n    at /tmp/tmp2djpxe67.js:11:4\n    at\
    \ Array.map (<anonymous>)\n    at /tmp/tmp2djpxe67.js:10:18\n    at Array.forEach\
    \ (<anonymous>)\n    at find_max (/tmp/tmp2djpxe67.js:9:8)\n    at test (/tmp/tmp2djpxe67.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2djpxe67.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let unique_chars = new Set();\n  let current_char = words[0];\n\
    \  for (let i = 1; i < words.length; i++) {\n    unique_chars.add(words[i]);\n\
    \    if (unique_chars.size > unique_chars.size) {\n      current_char = words[i];\n\
    \      unique_chars = new Set();\n    }\n  }\n  return current_char;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpzd3qtu2o.js:26:10)\n    at Object.<anonymous> (/tmp/tmpzd3qtu2o.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max=0;\n  let idx=0;\n  for(let i=0;i<words.length;i++){\n\
    \    for(let j=i+1;j<words.length;j++){\n      let c=words[i].length;\n      let\
    \ d=words[j].length;\n      if(c>d){\n        max=c;\n        idx = j;\n     \
    \ }\n      else{\n        max=d;\n        idx = i;\n      }\n    }\n  }\n  return\
    \ words[idx];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpz81itrjw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz81itrjw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let word_with_max_num_of_unique_chars = [];\n  for(let word\
    \ of words){\n    let num_of_unique_chars = word.length\n    for(let i = 0; i\
    \ < word.length; i++){\n      if(word.includes(word_with_max_num_of_unique_chars[i])){\n\
    \        num_of_unique_chars -= word_with_max_num_of_unique_chars[i].length;\n\
    \        if(num_of_unique_chars === 0){\n          word_with_max_num_of_unique_chars.push(word)\n\
    \          break\n        }\n      }\n    }\n  }\n  return word_with_max_num_of_unique_chars[0]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmp39oqwt_1.js:30:10)\n    at Object.<anonymous> (/tmp/tmp39oqwt_1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let arr = [];\n    words.forEach(word => {\n        arr.push(word.split(\"\
    \").filter((_, i) => !arr.includes(word[i])))\n    });\n    return arr.reduce((a,b)=>a.length>b.length?a:b).join(\"\
    \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpehnoz290.js:22:10)\n    at Object.<anonymous> (/tmp/tmpehnoz290.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = 0;\n  for(var i =0;i<words.length;i++){\n    var\
    \ unique_chars = 0;\n    for(var j=0;j<words[i].length;j++){\n      if(words[i].charCodeAt(j)\
    \ > 64 && words[i].charCodeAt(j) < 91){\n        unique_chars++;\n      }\n  \
    \  }\n    if(unique_chars > max){\n      max = unique_chars;\n    }\n  }\n  for(var\
    \ i =0;i<words.length;i++){\n    if(words[i].length === max){\n      return words[i];\n\
    \    }\n  }\n  return \"\";\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmptrp72qao.js:34:10)\n    at Object.<anonymous> (/tmp/tmptrp72qao.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // TODO fix me\n    let wordList = {}\n    for(let i=0;i<words.length;i++){\n\
    \        if(wordList[i]===undefined) wordList[i] = words[i]\n    }\n    let maxChars\
    \ = []\n    for(let i in wordList){\n        let wordCount = wordList[i]\n   \
    \     let numChars = words[i].length\n        if(numChars > maxChars.length) maxChars\
    \ = [words[i], numChars]\n    }\n    let retWord = maxChars[0]\n    for(let i=1;i<maxChars.length;i++){\n\
    \        if(maxChars[i][1] > maxChars[i-1][1]) retWord = maxChars[i][0]\n    }\n\
    \    return retWord\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpu5eiqr8q.js:33:10)\n    at Object.<anonymous> (/tmp/tmpu5eiqr8q.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var maxString = \"\";\n    for (var\
    \ i = 0; i < words.length; i++){\n        var count = 0;\n        var tempWord\
    \ = words[i];\n        for (var j = 0; j < tempWord.length; j++){\n          \
    \  if(words[i].indexOf(tempWord[j]) > -1){\n                count += 1;\n    \
    \        }\n        }\n        if(count > max){\n            max = count;\n  \
    \          maxString = tempWord;\n        }\n    }\n    return maxString;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpl3vdwbtw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpl3vdwbtw.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // sort the words by length first\n    words = words.slice().sort(function(a,b){return\
    \ a.length-b.length});\n    var max_word = words.pop();\n    var result = [];\n\
    \    var temp = [];\n    for(var i = 0;i < words.length;i++){\n        var word_count\
    \ = word_count_unique(words[i]);\n        if(word_count > 1){\n            result.push(words[i]);\n\
    \            temp = [words[i]];\n        }else{\n            if(temp.length >\
    \ 0){\n                result.push(find_max(temp));\n            }\n         \
    \   temp = [];\n        }\n    }\n    if(temp.length > 0){\n        result.push(find_max(temp));\n\
    \    }\n    if(result.length>0){\n        var result = find_max(result);\n   \
    \     if(result.length > words.length){\n            return \"\";\n        }else{\n\
    \            return result;\n        }\n    }else{\n        return max_word;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"\
    string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"\
    game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n\
    \  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmp2hqest1m.js:15\n        var word_count = word_count_unique(words[i]);\n\
    \                         ^\n\nReferenceError: word_count_unique is not defined\n\
    \    at find_max (/tmp/tmp2hqest1m.js:15:26)\n    at test (/tmp/tmp2hqest1m.js:46:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2hqest1m.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxCount = 0;\n    var maxValue = 0;\n    var maxValueIndex\
    \ = 0;\n    for(var i = 0; i<words.length; i++){\n        var word = words[i];\n\
    \        var count = 1;\n        var value = 0;\n        for(var j = 0; j < word.length;\
    \ j++){\n            value += word.charCodeAt(j);\n            count += 1;\n \
    \       }\n        if(count > maxCount){\n            maxCount = count;\n    \
    \        maxValue = value;\n            maxValueIndex = i;\n        }\n    }\n\
    \    return words[maxValueIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpdi0m8g_b.js:35:10)\n    at Object.<anonymous> (/tmp/tmpdi0m8g_b.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var largest = words[0];\n    for(var i = 1; i < words.length;\
    \ i++){\n        var word = words[i];\n        var len = word.length;\n      \
    \  var count = 0;\n        for(var j = 0; j < len; j++){\n            if(word.charAt(j)\
    \ == largest.charAt(j)){\n                count++;\n            }\n        }\n\
    \        if(count > largest.length){\n            largest = word;\n        }\n\
    \    }\n    return largest;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpwilqp0rb.js:30:10)\n    at Object.<anonymous> (/tmp/tmpwilqp0rb.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max_count = 0, \n      max_word = null, \n      i, \n\
    \      len = words.length;\n  for (i = 0; i < len; i++){\n    var w = words[i]\n\
    \    var count = countWord(w)\n    if (count > max_count){\n      max_count =\
    \ count\n      max_word = w\n    }\n  }\n  return max_word\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpba9p6nwu.js:15\n    var count = countWord(w)\n                ^\n\
    \nReferenceError: countWord is not defined\n    at find_max (/tmp/tmpba9p6nwu.js:15:17)\n\
    \    at test (/tmp/tmpba9p6nwu.js:29:20)\n    at Object.<anonymous> (/tmp/tmpba9p6nwu.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = 0;\n  var word = null;\n  for(var i = 0; i<words.length;\
    \ i++){\n    var length = words[i].length;\n    if(length > max){\n      max =\
    \ length;\n      word = words[i];\n    }\n  }\n  return word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp68uv9918.js:27:10)\n    at Object.<anonymous> (/tmp/tmp68uv9918.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var i in words){\n\
    \        word = words[i];\n        for(var j in word){\n            if(word[j]\
    \ == word[j]){\n                count++;\n            }else{\n               \
    \ count = 1;\n            }\n            if(count > max){\n                max\
    \ = count;\n                word = words[j];\n            }\n        }\n    }\n\
    \    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmptm0scs_b.js:15\n                count++;\n                ^\n\n\
    ReferenceError: count is not defined\n    at find_max (/tmp/tmptm0scs_b.js:15:17)\n\
    \    at test (/tmp/tmptm0scs_b.js:33:20)\n    at Object.<anonymous> (/tmp/tmptm0scs_b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max_word = words.sort((a,b) => b.length - a.length)[0]\n\
    \  return words.filter(word => word == max_word)[0]\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpgky93p7h.js:18:10)\n    at Object.<anonymous> (/tmp/tmpgky93p7h.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var sorted_words = [words[0]];\n    for(var i=1; i<words.length;\
    \ i++){\n        var count = 0;\n        for(var j=0; j<sorted_words.length; j++){\n\
    \            if(sorted_words[j].length > words[i].length){\n                break;\n\
    \            }\n            count += sorted_words[j].length;\n        }\n    \
    \    if(count == sorted_words[sorted_words.length-1].length){\n            sorted_words.push(words[i]);\n\
    \        }else{\n            sorted_words[sorted_words.length-1] = sorted_words[sorted_words.length-1]\
    \ + words[i];\n        }\n    }\n    return sorted_words[sorted_words.length-1];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI have implemented the above code but I am getting\
    \ a runtime error for this\n<|/ c |>\n<| c |>\nCan you please share your code\
    \ so I can debug it and find the problem\n<|/ c |>\n<| c |>\nI have updated my\
    \ question with the code I tried. It does not work for all the test cases and\
    \ I am not able to figure out the reason for this\n<|/ c |>\n<| c |>\nI have found\
    \ the reason, you are always adding character at index 'j' but 'j' can go till\
    \ the length of 'sorted_words'. So when you are trying to find 'aaaaaaa' at index\
    \ 'j' it is taking you to the end of list. Also when you are trying to find 'ccc'\
    \ at index 'j' it is taking you to the end of list hence the exception. You can\
    \ fix this by adding a condition before for loop to check whether the current\
    \ word has reached its maximum length.\n<|/ c |>\n<| a tags=string,c++,algorithm,c,arrays\
    \ |>\nYou could do it in O(n) time, but it's probably not the most efficient solution.\n\
    If all the strings you are going to work with are in alphabetical order, you can\
    \ build an array with the length of each string. You then iterate over all the\
    \ strings to find the one with the greatest length. Once you find it, you then\
    \ know the first character of the longest string, and can just start searching\
    \ for the next character starting from that character. This will find the longest\
    \ string in O(n) time.\nHere is a sample implementation.\n<code>\nint findLongest(string\
    \ words[])\n{\n    int largest = 0;\n\n    for(int i = 0; i < words.length; i++)\n\
    \    {\n        int length = words[i].length();\n\n        if(length >= largest)\n\
    \        {\n            largest = length;\n        }\n    }\n\n    for(int i =\
    \ 0; i < words.length; i++)\n    {\n        int length = words[i].length();\n\n\
    \        if(length == largest)\n        {\n            return words[i].substr(0,\
    \ 1);\n        }\n    }\n\n    return \"\";\n}\n</code>\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphim434_q.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let obj = {}\n    for(let word of words){\n      obj[word]\
    \ = obj[word] || 0\n      obj[word] += 1\n    }\n    \n    let res = 0\n    let\
    \ key = Object.keys(obj).reduce((a,b) => {\n      if(obj[b] > a){\n        return\
    \ res\n      }\n      return obj[b]\n    })\n    \n    if(Object.keys(obj).indexOf(key)\
    \ > 0) return key\n    return \"\"\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp3l4udgkb.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3l4udgkb.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var str = words.toString();\n  var max = words[0];\n  var\
    \ result = null;\n  var i = 1;\n  var len = words.length;\n  var temp = \"\";\n\
    \  for(i = 0; i < len; i++){\n    temp += words[i];\n    len = words[i].length;\n\
    \    for(; i < len; i++){\n      if(str.indexOf(temp) > str.lastIndexOf(temp)){\n\
    \        max = temp;\n        result = words[i];\n      }\n    }\n    temp = \"\
    \";\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp8bni1v_h.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8bni1v_h.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxNumUniqueChars = 0;\n    var maxWord = \"\";\n\n\
    \    var wordSet = {};\n    words.forEach(function(word){\n        if (wordSet[word]\
    \ == undefined){\n            wordSet[word] = 1;\n        }else{\n           \
    \ wordSet[word] = wordSet[word] + 1;\n        }\n    });\n\n    for (var key in\
    \ wordSet){\n        if (wordSet[key] > maxNumUniqueChars){\n            maxNumUniqueChars\
    \ = wordSet[key];\n            maxWord = key;\n        }\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpe3iy_ks2.js:35:10)\n    at Object.<anonymous> (/tmp/tmpe3iy_ks2.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var strs = [];\n    for(var i=0; i<words.length;i++){\n\
    \        var str = words[i];\n        var unique = [];\n        var max = 0;\n\
    \        for(var j=0; j<strs.length;j++){\n            var s = strs[j];\n    \
    \        for(var k=0; k<s.length; k++){\n                var ch = s.charAt(k);\n\
    \                if(ch in unique){\n                    unique[ch]++;\n      \
    \              if(unique[ch]>max){\n                        max = unique[ch];\n\
    \                        str = s;\n                    }\n                }else{\n\
    \                    unique[ch] = 1;\n                }\n            }\n     \
    \   }\n        strs.push(str);\n    }\n    return strs[0];\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpkdqf_b1a.js:38:10)\n    at Object.<anonymous> (/tmp/tmpkdqf_b1a.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max_count = 0;\n    let max_word = \"\";\n    words.forEach((word)\
    \ => {\n        if (word.length > max_count) {\n            max_count = word.length;\n\
    \            max_word = word;\n        }\n    });\n    return max_word;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp_vk0hn7n.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_vk0hn7n.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  // Sort array of words in lexicographical order\n  words\
    \ = words.sort();\n  // Declare variable that will store word's length\n  var\
    \ unique_chars = 0;\n  // Declare variable that will store index of word with\
    \ longest length\n  var max_index = 0;\n  // Declare variable that will store\
    \ current word\n  var current_word;\n  // Declare variable that will store current\
    \ length\n  var current_length;\n  // Iterate through the sorted array of words\n\
    \  for (var i = 0; i< words.length; i++){\n    // Assign the word at index i to\
    \ current_word variable\n    current_word = words[i];\n    // Assign the length\
    \ of the current word to current_length variable\n    current_length = current_word.length;\n\
    \    // Check if the word is already in an array or not, and if not, create an\
    \ empty array\n    var isAlreadyThere = words.indexOf(current_word);\n    if(isAlreadyThere\
    \ === -1){\n      words.push(current_word);\n    }\n    // Iterate through the\
    \ word's unique characters\n    for (var j = 0; j < current_word.length; j++){\n\
    \      // If character at j is already in an array and is not same as current\
    \ character\n      if(words.indexOf(current_word.charAt(j)) === -1 && current_word.charAt(j)\
    \ != current_char){\n        // Assign the value of current character to unique_chars\
    \ variable\n        unique_chars++;\n      }\n    }\n    // Check if the length\
    \ of the current word is greater than the longest length\n    if(current_length\
    \ > unique_chars){\n      max_index = i;\n    }\n  }\n  // If the length of longest\
    \ word is greater than unique_chars\n  if(unique_chars > max_index){\n    // Return\
    \ an empty string\n    return \"\";\n  }\n  // Return longest word\n  return words[max_index];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsph427i2.js:33\n      if(words.indexOf(current_word.charAt(j))\
    \ === -1 && current_word.charAt(j) != current_char){\n                       \
    \                                                            ^\n\nReferenceError:\
    \ current_char is not defined\n    at find_max (/tmp/tmpsph427i2.js:33:84)\n \
    \   at test (/tmp/tmpsph427i2.js:56:20)\n    at Object.<anonymous> (/tmp/tmpsph427i2.js:68:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    \n    let max_len = words.length;\n    let max_index =\
    \ -1;\n    let max_word = \"\";\n    \n    for(let i = 0; i < max_len; i++){\n\
    \        let word = \"\";\n        let counter = 0;\n        let index = -1;\n\
    \        \n        for(let j = 0; j < words.length; j++){\n            word +=\
    \ words[j] + \" \";\n            \n            if(words[j] === words[i]){\n  \
    \              counter++;\n                index = j;\n            }\n       \
    \ }\n        \n        if(counter > max_len){\n            max_len = counter;\n\
    \            max_index = index;\n            max_word = word;\n        }\n   \
    \ }\n    \n    return max_word;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpqsx2wdyl.js:42:10)\n    at Object.<anonymous> (/tmp/tmpqsx2wdyl.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0;i<words.length;i++)\n    {\n        if(words[i].length >maxCount)\n    \
    \    {\n            maxCount = words[i].length;\n            maxWord = words[i];\n\
    \        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmptzd292o4.js:28:10)\n    at Object.<anonymous> (/tmp/tmptzd292o4.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\treturn find_max_aux(words, 0, words.length);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7mbckrzs.js:9\n\treturn find_max_aux(words, 0, words.length);\n\
    \t^\n\nReferenceError: find_max_aux is not defined\n    at find_max (/tmp/tmp7mbckrzs.js:9:2)\n\
    \    at test (/tmp/tmp7mbckrzs.js:17:20)\n    at Object.<anonymous> (/tmp/tmp7mbckrzs.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var sorted = new Array();\n    \n    words.forEach(function(i){\n\
    \        sorted.push(i.toLowerCase());\n    });\n    \n    sorted.sort(function(x,\
    \ y){\n        return x.split('').length - y.split('').length;\n    });\n    \n\
    \    return sorted.shift() \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpdydv1opk.js:27:10)\n    at Object.<anonymous> (/tmp/tmpdydv1opk.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Your code here\n  var maxCharCount=words[0].length, index=0;\n\
    \  for(var i=0;i<words.length;i++){\n    for(var j=0;j<words[i].length;j++){\n\
    \      index++;\n      if(maxCharCount<words[i][j].length){\n        maxCharCount=words[i][j].length;\n\
    \      }\n    }\n  }\n  if(maxCharCount==words[0].length){\n    return \"\";\n\
    \  }\n  return words[index][words[index].length-1];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpbtj83tse.js:29:10)\n    at Object.<anonymous> (/tmp/tmpbtj83tse.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var result = [];\n    for(var i in words){\n\
    \        if(words[i].length >= max){\n            max = words[i].length;\n   \
    \         result = words[i]\n        }\n    }\n    if(max < words[0].length){\n\
    \        return \"\";\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpx7wqmtd_.js:28:10)\n    at Object.<anonymous> (/tmp/tmpx7wqmtd_.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var word_counter = {};\n    var result = [];\n    \n \
    \   words.forEach(function(word){\n        var wordCount = word_counter[word]\
    \ || 0;\n        word_counter[word] = wordCount + 1;\n        result.push(word);\n\
    \    });\n    \n    return words[result.indexOf(max_key(word_counter))]; \n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi1rgc05k.js:18\n    return words[result.indexOf(max_key(word_counter))];\
    \ \n                        ^\n\nReferenceError: max_key is not defined\n    at\
    \ find_max (/tmp/tmpi1rgc05k.js:18:25)\n    at test (/tmp/tmpi1rgc05k.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpi1rgc05k.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar unique_char_count = 0\n\tvar word_with_highest_count\
    \ = -1\n\tfor(var i = 0, len = words.length; i < len; i++){\n\t\tvar unique_chars\
    \ = words[i].split('')\n\t\tvar word_with_highest = ''\n\t\tfor(var j = 0; j <\
    \ unique_chars.length; j++){\n\t\t\tvar char = unique_chars[j];\n\t\t\tvar char_count\
    \ = unique_char_counts[char];\n\t\t\tunique_char_counts[char]++;\n\t\t\tif(char_count\
    \ > unique_char_count){\n\t\t\t\tunique_char_count = char_count;\n\t\t\t\tword_with_highest\
    \ = char;\n\t\t\t}\n\t\t}\n\t\tif(word_with_highest_count < unique_char_count){\n\
    \t\t\tword_with_highest_count = unique_char_count;\n\t\t}\n\t}\n\treturn word_with_highest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe_s1ie2_.js:16\n\t\t\tvar char_count = unique_char_counts[char];\n\
    \t\t\t                 ^\n\nReferenceError: unique_char_counts is not defined\n\
    \    at find_max (/tmp/tmpe_s1ie2_.js:16:21)\n    at test (/tmp/tmpe_s1ie2_.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpe_s1ie2_.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxLen = words[0].length;\n  let maxWord = words[0];\n\
    \  for(let i = 1 ; i < words.length ; i++){\n    let wordLength = words[i].length;\n\
    \    if(wordLength > maxLen){\n      maxLen = wordLength;\n      maxWord = words[i];\n\
    \    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpx0wa9q0a.js:27:10)\n    at Object.<anonymous> (/tmp/tmpx0wa9q0a.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max_chars = 0, max_string = null, max_word = null;\n\
    \tfor (var i = 0; i < words.length; i++){\n\t\tif (words[i].length > max_chars){\n\
    \t\t\tmax_chars = words[i].length;\n\t\t\tmax_string = words[i];\n\t\t\tmax_word\
    \ = words[i];\n\t\t}\n\t}\n\treturn max_chars < max_string.length ? max_string.replace(max_chars,\
    \ '') : max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpvxyc5ipn.js:26:10)\n    at Object.<anonymous> (/tmp/tmpvxyc5ipn.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var unique = words.reduce(function(result, word){\n  \
    \      var str = word.split(\"\").filter(function(char){\n            return char.match(/[a-z]/);\n\
    \        }).reduce(function(result, char){\n            return result + char;\n\
    \        }).split(\"\").length;\n        return unique > result ? unique : result;\n\
    \    }, 0)\n    return words[words.indexOf(words.reduce(function(result, word){\n\
    \        var str = word.split(\"\").filter(function(char){\n            return\
    \ char.match(/[a-z]/);\n        }).reduce(function(result, char){\n          \
    \  return result + char;\n        }).split(\"\").reverse().join(\"\")\n      \
    \  return unique > result ? unique : result;\n    }, 0));\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppj8_2vu2.js:24\n    }, 0));\n          ^\n\nSyntaxError: Unexpected\
    \ token ';'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = words[0];\n  var max_len = words[0].length;\n\
    \  var curr_char = max[0];\n  for(var i=1; i<words.length; i++){\n    var curr_word\
    \ = words[i];\n    for(var j=0; j<curr_word.length; j++){\n      if(curr_char.indexOf(curr_word[j])\
    \ == -1){\n        curr_char = curr_char.concat(curr_word[j]);\n      }else{\n\
    \        curr_char = curr_char.concat(curr_word[j]);\n        if(curr_char.length\
    \ > max_len){\n          max_len = curr_char.length;\n          max = curr_word;\n\
    \        }\n      }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpck96kvqv.js:35:10)\n    at Object.<anonymous> (/tmp/tmpck96kvqv.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let newArr = []\n    let maxNum = 0\n    let charArray\
    \ = new Array()\n    for (let i = 0; i < words.length; i++) {\n        charArray.push(words[i].length)\n\
    \    }\n    for (let j = 0; j < words.length; j++) {\n        let temp = 0\n \
    \       let currentWord = words[j]\n        for (let i = 0; i < words.length;\
    \ i++) {\n            if (charArray[i] > temp) {\n                temp = charArray[i]\n\
    \            }\n        }\n        if (charArray[j] > temp) {\n            maxNum\
    \ = charArray[j]\n            newArr.push(currentWord)\n        } else {\n   \
    \         newArr.push(currentWord)\n        }\n    }\n    if (newArr.length ===\
    \ 0) {\n        return \"\"\n    }\n    let max = newArr.reduce((a, b) => a.length\
    \ > b.length ? a : b);\n    return max\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpuaxnj919.js:42:10)\n    at Object.<anonymous> (/tmp/tmpuaxnj919.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let unique_char_count = {}\n\n  for (let word of words){\n\
    \    let word_list = word.split('')\n    for (let character of word_list){\n \
    \     let count = unique_char_count[character] ? unique_char_count[character]\
    \ + 1 : 1;\n      unique_char_count[character] = count;\n    }\n  }\n\n  let max_word\
    \ = ''\n  for (let character in unique_char_count){\n    if (unique_char_count[character]\
    \ > unique_char_count[max_word]){\n      max_word = character\n    }\n  }\n\n\
    \  return max_word\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpnqsvfwks.js:34:10)\n    at Object.<anonymous> (/tmp/tmpnqsvfwks.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var ret=\"\";\n  words.forEach(function(word){\n    var\
    \ num= count_unique_char(word);\n    if (num>ret.length){\n      ret=word;\n \
    \   }\n  });\n  return ret;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgob9ah_j.js:11\n    var num= count_unique_char(word);\n       \
    \      ^\n\nReferenceError: count_unique_char is not defined\n    at /tmp/tmpgob9ah_j.js:11:14\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmpgob9ah_j.js:10:9)\n\
    \    at test (/tmp/tmpgob9ah_j.js:24:20)\n    at Object.<anonymous> (/tmp/tmpgob9ah_j.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max_words = words[0];\n\tvar max = 0;\n\tvar i = 0;\n\
    \tvar len = words.length;\n\tfor (i; i < len; i++){\n\t\tvar letter = words[i].split('').sort().join('');\n\
    \t\tif (letter.length > max){\n\t\t\tmax = letter.length;\n\t\t\tmax_words = words[i];\n\
    \t\t}\n\t}\n\treturn max_words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp9v0mh0iq.js:29:10)\n    at Object.<anonymous> (/tmp/tmp9v0mh0iq.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // Write your code here\n    // console.log(words);\n\
    \    if(words.length == 0)\n        return \"\";\n\n    var maxWord = \"\";\n\
    \    var maxCount = 0;\n\n    for(var i = 0; i < words.length; i++){\n       \
    \ var count = 0;\n        for(var j = 0; j < words.length; j++){\n           \
    \ if(words[j].toLowerCase() == words[i].toLowerCase())\n                count++;\n\
    \        }\n\n        if(count > maxCount)\n        {\n            maxWord = words[i];\n\
    \            maxCount = count;\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpj4_ct6bb.js:38:10)\n    at Object.<anonymous> (/tmp/tmpj4_ct6bb.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let word = \"\";\n  let maxCnt = -1;\n  for (let i=0; i<words.length;\
    \ i++){\n    let cnt = words.filter( x => x === words[i]).length;\n    if (cnt\
    \ > maxCnt){\n      maxCnt = cnt;\n      word = words[i];\n    }\n  }\n  return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp08_b8oqt.js:26:10)\n    at Object.<anonymous> (/tmp/tmp08_b8oqt.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let dict = {};\n    for(let word of words)\n        for(let\
    \ i = 0; i < word.length; i++)\n            if(!dict.hasOwnProperty(word[i]))\n\
    \                dict[word[i]] = 1;\n    \n    for(let key in dict){\n       \
    \ if(dict[key] > 0){\n            return key;\n        }\n    }\n    \n    return\
    \ \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'n'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp76vijh3p.js:29:10)\n    at Object.<anonymous> (/tmp/tmp76vijh3p.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  // Write your code here\n  var max = 0;\n  var str = \"\"\
    ;\n  var count = 0;\n  words.forEach(function(element) {\n    if (max < element.length)\
    \ max = element.length;\n    if (count < element.length){\n      str = element;\n\
    \      count = element.length;\n    }\n  })\n  return str;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpioss1e2s.js:29:10)\n    at Object.<anonymous> (/tmp/tmpioss1e2s.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max = words[0];\n    let min = words[0];\n    for(let\
    \ i=1; i<words.length; i++){\n        if(words[i].length >words[i].length-max){\n\
    \            max = words[i].length;\n        }\n        if(words[i].length < words[i].length-min){\n\
    \            min = words[i].length;\n        }\n    }\n    return words[words.indexOf(max,min)];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpi2ygxeo3.js:27:10)\n    at Object.<anonymous> (/tmp/tmpi2ygxeo3.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  if (words.length === 0) {\n    return \"\";\n  }\n  let\
    \ maxNum = 0;\n  let maxStr = \"\";\n  for (let i = 0; i < words.length; i++){\n\
    \    let str = words[i]\n    let numOfUnique = str.split(\"\").reduce((a, item)\
    \ => a + (item.charCodeAt(0) >= 65 && item.charCodeAt(0) <= 90), 0);\n    if (numOfUnique\
    \ > maxNum) {\n      maxNum = numOfUnique;\n      maxStr = str;\n    }\n  }\n\
    \  return maxStr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmplo5el3g1.js:29:10)\n    at Object.<anonymous> (/tmp/tmplo5el3g1.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var sorted_words=words.slice();\n    sorted_words.sort(function(a,b)\
    \ {return a.length-b; });\n    var max_count=0;\n    var max_element=[];\n   \
    \ for(var i=0; i<sorted_words.length; i++){\n        var cur_count=0;\n      \
    \  for(var j=0; j<sorted_words[i].length; j++){\n            cur_count+=1;\n \
    \           if(cur_count > max_count){\n                max_element=sorted_words[i];\n\
    \                max_count = cur_count;\n            }\n        }\n    }\n   \
    \ return max_element;\n}\n</code>\n<|/ a tags=algorithm,string |>\n<| a tags=algorithm,string\
    \ |>\nA variation on Sedgewick's algorithm.\n<code>\nlet dict = {};\nlet max =\
    \ {};\nlet min = {};\nlet nums = [];\n\nfor (i = 0; i < str.length; i++) {\n \
    \ let [char, count] = str[i];\n  if (char in dict) {\n    dict[char]++;\n  } else\
    \ {\n    dict[char] = 1;\n  }\n  if (char in max) {\n    if (dict[char] > max[char])\
    \ {\n      max[char] = dict[char];\n    }\n  } else {\n    max[char] = dict[char];\n\
    \  }\n  if (char in min) {\n    if (dict[char] < min[char]) {\n      min[char]\
    \ = dict[char];\n    }\n  } else {\n    min[char] = dict[char];\n  }\n  nums.push(dict[char]);\n\
    }\n\nlet max_num = Math.max(...nums);\nlet min_num = Math.min(...nums);\n\nlet\
    \ max_char = Object.keys(max).find(key => max[key] == max_num);\nlet min_char\
    \ = Object.keys(min).find(key => min[key] == min_num);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprgub81u_.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    \n    //Sort the words by their number of unique characters\n\
    \    words.sort((a,b)=>{\n        let ua = new Set(a); //Create Set of unique\
    \ characters\n        let ub = new Set(b); //Create Set of unique characters\n\
    \        \n        let c = ua.size-ub.size; //Calculate unique character count\
    \ difference\n        return c;\n    });\n    \n    \n    \n    //Return the word\
    \ with maximum number of unique characters\n    return words[words.length-1];\n\
    }\n\nlet result = find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpthkp9g90.js:32:10)\n    at Object.<anonymous> (/tmp/tmpthkp9g90.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet maxString = \"\";\n\tlet maxCount = 0;\n\tfor (let i\
    \ = 0; i < words.length; i++){\n\t\tlet currentString = words[i];\n\t\tlet currentCount\
    \ = 0;\n\t\tfor (let j = 0; j < words.length; j++){\n\t\t\tif (words[j] == currentString){\n\
    \t\t\t\tcurrentCount++;\n\t\t\t}\n\t\t}\n\t\tif (currentCount > maxCount){\n\t\
    \t\tmaxCount = currentCount;\n\t\t\tmaxString = currentString;\n\t\t}\n\t}\n\t\
    return maxString;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp27cewv55.js:32:10)\n    at Object.<anonymous> (/tmp/tmp27cewv55.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var word = \"\";\n    words.forEach(function(element){\n\
    \        var unique_characters = element.toLowerCase().split('').filter(function(character){\
    \ \n            return element != character;\n        }).length;\n        if(unique_characters\
    \ > max){\n            word = element;\n            max = unique_characters;\n\
    \        }\n    });\n    return word;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript\
    \ |>\nMy solution\n<code>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjfs3t_gu.js:22\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var wordCount={};\n  var maxCount=-1;\n  var maxWord=\"\"\
    ;\n\n  words.forEach(function(word){\n    if (word in wordCount){\n      wordCount[word]=wordCount[word]+1;\n\
    \    }else{\n      wordCount[word]=1;\n    }\n  });\n\n  for(var word in wordCount){\n\
    \    if(wordCount[word]>maxCount){\n      maxCount=wordCount[word];\n      maxWord=word;\n\
    \    }\n  }\n\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp921yljhv.js:36:10)\n    at Object.<anonymous> (/tmp/tmp921yljhv.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxCount = 0;\n  let longest = \"\";\n  for(let word\
    \ of words){\n    let count = 0;\n    let wordArr = word.split('');\n    wordArr.forEach((ch)=>{\n\
    \      count += ch.match(/[a-z]/) ? ch.match(/[a-z]/g).length : 1;\n    });\n\
    \    if(count > maxCount){\n      maxCount = count;\n      longest = word;\n \
    \   }\n  }\n  return longest;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpfamq9_uc.js:31:10)\n    at Object.<anonymous> (/tmp/tmpfamq9_uc.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // Fill in this code block with your code\n}\n</cell>\n\
    <cell>\nassert find_max([\"string\"]) == \"string\", \"find_max(['string']) should\
    \ return 'string'\"\nassert find_max([\"string\",\"a\"]) == \"string\", \"find_max(['string','a'])\
    \ should return 'string'\"\nassert find_max([\"string\", \"a\", \"string\"]) ==\
    \ \"string\", \"find_max(['string','a','string']) should return 'string'\"\nassert\
    \ find_max([\"string\", \"a\", \"string\"]) == \"string\", \"find_max(['string','a','string'])\
    \ should return 'string'\"\nassert find_max([\"string\", \"a\", \"string\", \"\
    string\"]) == \"string\", \"find_max(['string','a','string','string']) should\
    \ return 'string'\"\nassert find_max([\"string\", \"a\", \"string\", \"string\"\
    , \"string\"]) == \"string\", \"find_max(['string','a','string','string','string'])\
    \ should return 'string'\"\nassert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) ==\
    \ \"\", \"find_max(['aaaaaaa','bb','cc']) should return ''\"\n</cell>\n<text>\n\
    Write a Python function max_count_char which accepts a list of strings. It returns\
    \ the word with maximum number of unique characters. If multiple words have maximum\
    \ number of unique characters, return the one which comes first in lexicographical\
    \ order.\n\n\n</text>\n<cell>\n# Write a Python function max_count_char which\
    \ accepts a list of strings.\n# The list contains different words. Return the\
    \ word with maximum number of unique\n# characters. If multiple words have maximum\
    \ number of unique characters, return the one which comes first in lexicographical\
    \ order.\ndef max_count_char(words):\n    # Fill in this code block with your\
    \ code\n    return None\n</cell>\n<cell>\nassert max_count_char([\"string\"])\
    \ == \"string\", \"max_count_char(['string']) should return 'string'\"\nassert\
    \ max_count_char([\"string\", \"a\"]) == \"string\", \"max_count_char(['string','a'])\
    \ should return 'string'\"\nassert max_count_char([\"string\", \"a\", \"string\"\
    ]) == \"string\", \"max_count_char(['string','a','string']) should return 'string'\"\
    \nassert max_count_char([\"string\", \"a\", \"string\"]) == \"string\", \"max_count_char(['string','a','string'])\
    \ should return 'string'\"\nassert max_count_char([\"string\", \"a\", \"string\"\
    , \"string\"]) == \"string\", \"max_count_char(['string','a','string','string'])\
    \ should return 'string'\"\nassert max_count_char([\"string\", \"a\", \"string\"\
    , \"string\", \"string\"]) == \"string\", \"max_count_char(['string\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqugzd9x9.js:11\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet sorted_list = words.sort();\n\tlet last_word = \"\"\
    ;\n\tlet unique_chars = 0;\n\tfor (let i = 0; i < sorted_list.length; i++){\n\t\
    \tlet currentWord = sorted_list[i];\n\t\tlet current_unique_chars = 1;\n\t\tfor\
    \ (let j = i; j < sorted_list.length; j++){\n\t\t\tlet otherWord = sorted_list[j];\n\
    \t\t\tif (currentWord < otherWord){\n\t\t\t\tcurrent_unique_chars++;\n\t\t\t}\n\
    \t\t\telse if (currentWord === otherWord){\n\t\t\t\tcurrent_unique_chars++;\n\t\
    \t\t\tunique_chars++;\n\t\t\t}\n\t\t\telse if (currentWord > otherWord){\n\t\t\
    \t\tcurrent_unique_chars--;\n\t\t\t}\n\t\t\tif (current_unique_chars < unique_chars){\n\
    \t\t\t\tlast_word = currentWord;\n\t\t\t\tunique_chars = current_unique_chars;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn last_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpz0mknxi_.js:42:10)\n    at Object.<anonymous> (/tmp/tmpz0mknxi_.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = words[0];\n\tlet count_max = 1;\n\tfor(let i =\
    \ 1; i < words.length; i++){\n\t\tlet count_i = words[i].length;\n\t\tlet count_word\
    \ = words[i].split(\"\").length;\n\t\tlet diff = Math.abs(count_max*count_i-count_word);\n\
    \t\tif(diff > count_max*count_i) count_max = count_i;\n\t}\n\treturn max;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpgnre6j7x.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgnre6j7x.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let result = \"\";\n    let count = 0;\n    for (let word\
    \ in words){\n        if (words[word].length >= count){\n            result =\
    \ words[word];\n        }\n        count += words[word].length;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'cba'\n\nshould equal\n\n'abc'\n    at test\
    \ (/tmp/tmptlv9mjuk.js:28:10)\n    at Object.<anonymous> (/tmp/tmptlv9mjuk.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'cba',\n  expected: 'abc',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = [];\n\tlet min = [];\n\twords.forEach(function(word){\n\
    \t\tlet letter = word.replace(/\\s/g, \"\"); //remove all whitespace from string\n\
    \t\tlet count = 0;\n\t\tlet prev = \"\";\n\t\tfor (let i = 0; i < word.length;\
    \ i++){\n\t\t\tlet charCount = letter[i].charCodeAt(0) - 97; //get ASCII value\
    \ of character and substract ASCII value for \"A\".\n\t\t\tcount += prev == \"\
    \" ? charCount : prev != letter[i] ? charCount : 0;\n\t\t\tprev = letter[i];\n\
    \t\t}\n\t\tif (count > max.length){\n\t\t\tmax = count;\n\t\t}\n\t\tif (count\
    \ < min.length){\n\t\t\tmin = count;\n\t\t}\n\t});\n\treturn max.length > min.length\
    \ ? words[min] : \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp7wqeazdm.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7wqeazdm.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let words_with_unique_count = {};\n    words.forEach(word\
    \ => {\n        for(let char of word){\n            if(!words_with_unique_count[char]){\n\
    \                words_with_unique_count[char] = 0;\n            }\n         \
    \   words_with_unique_count[char]++;\n        }\n    });\n    \n    let unique_chars\
    \ = [];\n    for (let char of words_with_unique_count.keys()){\n        if(words_with_unique_count[char]\
    \ === 1){\n            unique_chars.push(char);\n        }\n    }\n    \n    unique_chars.sort();\n\
    \    \n    return words[unique_chars.findIndex((char) => {\n        return words_with_unique_count[char]\
    \ === 1;\n    })];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8be6wdq8.js:20\n    for (let char of words_with_unique_count.keys()){\n\
    \                                             ^\n\nTypeError: words_with_unique_count.keys\
    \ is not a function or its return value is not iterable\n    at find_max (/tmp/tmp8be6wdq8.js:20:46)\n\
    \    at test (/tmp/tmp8be6wdq8.js:38:20)\n    at Object.<anonymous> (/tmp/tmp8be6wdq8.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max_len = 0;\n    var index = 0;\n    var word_set\
    \ = new Set(words);\n    for(var i = 0; i < words.length; i++){\n        var word_length\
    \ = words[i].length;\n        if(word_length == max_len){\n            index =\
    \ i;\n        }\n        else if(word_length > max_len){\n            max_len\
    \ = word_length;\n            index = i;\n        }\n    }\n    return words[index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp1x22zfac.js:31:10)\n    at Object.<anonymous> (/tmp/tmp1x22zfac.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let chars = {},\n    currentMax,\n    maxWord = \"\";\n\
    \  words.forEach(word => {\n    word = word.toLowerCase().replace(/ +/g, ' ');\n\
    \    word.split(\"\").forEach(char => {\n      if (chars[char] == undefined) {\n\
    \        chars[char] = 0;\n      }\n      chars[char]++;\n    });\n    currentMax\
    \ = Object.values(chars).reduce((a, b) => a > b ? a : b);\n    if (currentMax\
    \ > maxWord.length){\n      maxWord = currentMax == chars.length ? \"\" : word;\n\
    \    }\n  });\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpmsr3wng7.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmsr3wng7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let arr = []\n    for(let i of words)\n        for(let\
    \ j of i)\n            if(!arr.includes(j)) arr.push(j)\n    return arr.sort((a,b)\
    \ => (b.length - a.length)*-1)[0] \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'n'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp4wph7u8b.js:21:10)\n    at Object.<anonymous> (/tmp/tmp4wph7u8b.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var len = words.length;\n    var max_letters = [];\n \
    \   for(var i = 0; i < len; i++){\n        max_letters.push(0);\n    }\n\n   \
    \ for(var j = 0; j < words.length; j++){\n        var word = words[j];\n     \
    \   for(var i = 0; i < word.length; i++){\n            var letter = word.charAt(i);\n\
    \            if(max_letters[i] > max_letters[j][letter]){\n                max_letters[i]\
    \ = max_letters[j][letter];\n            }\n        }\n    }\n\n    for(var i\
    \ = 0; i < len; i++){\n        words[i] = \"\";\n    }\n\n    for(var i = 0; i\
    \ < len; i++){\n        var letter = max_letters[i];\n        if(letter){\n  \
    \          words[max_letters[i]] += letter;\n        }\n    }\n\n    return words[len\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp9bqsvqrp.js:44:10)\n    at Object.<anonymous> (/tmp/tmp9bqsvqrp.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  return words[0];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpueuhd860.js:16:10)\n    at Object.<anonymous> (/tmp/tmpueuhd860.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = -Infinity,\n      index = 0;\n  for(var i = 0,\
    \ l = words.length; i < l; i++){\n    var count = words[i]\n      .split('')\n\
    \      .reduce(function(count, b){\n        return count + (b.indexOf(c) !== -1\
    \ ? 1 : 0);\n      }, 0);\n    if(count > max){\n      max = count;\n      index\
    \ = i;\n    }\n  }\n  return words[index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpng24hd5s.js:15\n        return count + (b.indexOf(c) !== -1 ? 1\
    \ : 0);\n                                  ^\n\nReferenceError: c is not defined\n\
    \    at /tmp/tmpng24hd5s.js:15:35\n    at Array.reduce (<anonymous>)\n    at find_max\
    \ (/tmp/tmpng24hd5s.js:14:8)\n    at test (/tmp/tmpng24hd5s.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpng24hd5s.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxCount = 0\n  let maxWord = \"\"\n  let index = words.length-1\n\
    \  for (let i=0; i<words.length; i++){\n    const count = new Set(words[i].split(\"\
    \"))\n    if (count.size === 1){\n      maxCount = count.size\n      maxWord =\
    \ words[i]\n    } else {\n      if (count.size > maxCount){\n        maxCount\
    \ = count.size\n        maxWord = words[i]\n      }\n    }\n  }\n  return maxWord\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7pvzx196.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7pvzx196.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max = words[0].length;\n  let index = -1;\n  words.forEach(function(word){\n\
    \    for(var i = 0; i < word.length; i++){\n      if(word[i] === word[index]){\n\
    \        max = Math.max(max, word.length - i);\n        index = i;\n      }\n\
    \    }\n  });\n  return words[words.indexOf(words[index]) + 1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp_2lcsqga.js:27:10)\n    at Object.<anonymous> (/tmp/tmp_2lcsqga.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Write your code here\n  if(words == null || words.length\
    \ <= 0){\n    return \"\";\n  }\n  if(words[0].length <= 0){\n    return words[0];\n\
    \  }\n  var max = 0;\n  for(var i=0;i<words.length;i++){\n    if(words[i].length\
    \ >= max){\n      max = words[i].length;\n    }\n  }\n  for(var i=0;i<words.length;i++){\n\
    \    for(var j=0;j<words.length;j++){\n      if(i != j){\n        if(words[i].length\
    \ == max){\n          if(words[i].length > words[j].length){\n            return\
    \ words[j];\n          }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpvlrrdapg.js:41:10)\n    at Object.<anonymous> (/tmp/tmpvlrrdapg.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var str = words.toString();\n  var max = 0;\n  var result\
    \ = \"\";\n  for(var i = 0; i< str.length; i++){\n    for(var j = 0; j< str.length;\
    \ j++){\n      if(i != j){\n        var len = str.charAt(i).charCodeAt(0)-str.charAt(j).charCodeAt(0);\n\
    \        if(len > max){\n          max = len;\n          result = str.charAt(j);\n\
    \        }\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n','\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpcbvhvfjg.js:31:10)\n    at Object.<anonymous> (/tmp/tmpcbvhvfjg.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: ',',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let unique_count = words.length;\n    let max_word = words[0];\n\
    \    let min_count = unique_count;\n\n    for(let i = 1; i < words.length; i++){\n\
    \        let word = words[i];\n        for(let j = 0; j < word.length; j++){\n\
    \            let character = word.charAt(j);\n            let index = character.charCodeAt(0);\n\
    \            if(index < min_count || unique_count){\n                min_count\
    \ = index;\n                max_word = word;\n            }\n        }\n    }\n\
    \n    return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7hi6gnn6.js:34:10)\n    at Object.<anonymous> (/tmp/tmp7hi6gnn6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n   let count = {};\n   for (let word of words){\n      count[word]\
    \ = count[word] ? count[word] + 1 : 1;\n   }\n   return Object.keys(count).sort().reduce((a,\
    \ b) => count[a] > count[b] ? a : b)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpc3ui18aq.js:22:10)\n    at Object.<anonymous> (/tmp/tmpc3ui18aq.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var wordCounts = new Array();\n  for (var i=0; i<words.length;\
    \ i++){\n    wordCounts[words[i]] = 0;\n  }\n  for (var i=0; i<words.length; i++){\n\
    \    wordCounts[words[i]] += 1;\n  }\n  var maxWord = \"\";\n  var maxCount =\
    \ wordCounts[maxWord];\n  for(var word in wordCounts){\n    if(wordCounts[word]\
    \ == maxCount)\n      maxWord = word;\n  }\n  return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp35yh85ba.js:30:10)\n    at Object.<anonymous> (/tmp/tmp35yh85ba.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar sorted_words = [];\n\tvar unique_chars = {};\n\n\tfor\
    \ (var i = 0; i < words.length; i++){\n\t\tvar word = words[i];\n\t\tvar letters\
    \ = word.split('').sort();\n\t\tvar unique_char_count = 0;\n\t\tfor (var j = 0;\
    \ j < letters.length; j++){\n\t\t\tunique_char_count += unique_chars[letters[j]];\n\
    \t\t}\n\t\tif (unique_char_count > 0){\n\t\t\tunique_chars[letters.join('')] =\
    \ unique_char_count;\n\t\t}\n\t\telse{\n\t\t\tunique_char_count = 1;\n\t\t}\n\t\
    \tunique_char_count = unique_char_count - 1;\n\t\tif (unique_char_count == 0){\n\
    \t\t\tsorted_words.push(word);\n\t\t}\n\t\telse if (unique_char_count > words[i].length){\n\
    \t\t\tsorted_words.push(word);\n\t\t}\n\t\telse if (unique_char_count < words[i].length){\n\
    \t\t\tsorted_words = sorted_words.sort();\n\t\t\twhile (sorted_words[0].length\
    \ > words[i].length){\n\t\t\t\tsorted_words.shift();\n\t\t\t}\n\t\t}\n\t}\n\t\
    return sorted_words[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpf2xj32oj.js:47:10)\n    at Object.<anonymous> (/tmp/tmpf2xj32oj.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar largest = \"\"\n\tvar max_num_unique_characters = 0\n\
    \tfor(var i=0; i<words.length; i++){\n\t\tfor(var j=0; j<words[i].length; j++){\n\
    \t\t\tif(max_num_unique_characters < words[i].length){\n\t\t\t\tmax_num_unique_characters++\n\
    \t\t\t\tlargest = words[i]\n\t\t\t}\n\t\t\telse if(max_num_unique_characters ==\
    \ words[i].length){\n\t\t\t\tif(words[i].length > largest.length){\n\t\t\t\t\t\
    largest = words[i]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn largest\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp0cnmrp85.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0cnmrp85.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var ret = \"\";\n  var len = words.length;\n  for(var i\
    \ = 0; i< len; i++){\n    var val = words.reduce(function(prev, word){\n     \
    \ return prev + word.length;\n    }, 0);\n    if(len > 1 && val > ret.length){\n\
    \      ret = words[i];\n    }\n  }\n  return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp1gk54eio.js:28:10)\n    at Object.<anonymous> (/tmp/tmp1gk54eio.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxIndex = 0;\n    let maxCount = 0;\n    let word;\n\
    \    for(let i = 0; i < words.length; i++){\n        word = words[i];\n      \
    \  maxCount = 0;\n        for(let j = 0; j < word.length; j++){\n            if(!words[j].includes(word)){\n\
    \                maxCount++;\n            }\n        }\n        if(maxCount >\
    \ maxCount){\n            maxIndex = i;\n            maxCount = maxCount;\n  \
    \      }\n    }\n    return words[maxIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4n7vgk3j.js:16\n            if(!words[j].includes(word)){\n   \
    \                      ^\n\nTypeError: Cannot read property 'includes' of undefined\n\
    \    at find_max (/tmp/tmp4n7vgk3j.js:16:26)\n    at test (/tmp/tmp4n7vgk3j.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmp4n7vgk3j.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var uniqueChars = [];\n  words.forEach(function(word){\n\
    \    uniqueChars = uniqueChars.concat(word.split(''));\n  });\n  uniqueChars =\
    \ uniqueChars.filter(function(item, pos, self) {\n    return self.indexOf(item)\
    \ == pos;\n  });\n\n  uniqueChars = uniqueChars.reduce(function(p, c){\n    return\
    \ p.filter(function(e) { return e.indexOf(c) === -1; }).concat(c);\n  }, []);\n\
    \  uniqueChars = uniqueChars.reduce(function(p, c){\n    return p.filter(function(e)\
    \ { return e.indexOf(c) !== -1; }).length;\n  }, []);\n\n  return uniqueChars.reduce(function(p,\
    \ c){\n    return p.filter(function(e) { return e.indexOf(c) === -1; }).sort(function(a,\
    \ b){\n      return b.length - a.length;\n    })[0];\n  });\n}</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a |>\n<code>\nvar words = [\"dog\", \"cat\", \"mouse\", \"dog\", \"cat\"\
    , \"mouse\"];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpmb8yzddg.js:29\n}</code>\n ^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max;\n    let str = '';\n    let max_count = 0;\n\
    \    for (let i=0; i<words.length; i++){\n        if(max < words[i].length){\n\
    \            max = words[i].length;\n            str = words[i];\n        }\n\
    \        let count = 0;\n        for (let j=0; j<words.length; j++){\n       \
    \     str+=words[j];\n            if (str.length == max && str.length == words[j].length){\n\
    \                count++;\n            }\n        }\n        if (count > max_count){\n\
    \            max_count = count;\n        }\n    }\n    return str;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'nameofstringnameofstringnameofstring'\n\
    \nshould equal\n\n'string'\n    at test (/tmp/tmp23y6bvk9.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp23y6bvk9.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'nameofstringnameofstringnameofstring',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let unique_characters = {};\n    let max = \"\";\n   \
    \ words.forEach( word=>{\n        let temp = word.split(\"\");\n        temp.forEach(character=>{\n\
    \            if(unique_characters[character] === undefined){\n               \
    \ unique_characters[character] = 1;\n            }else{\n                unique_characters[character]++;\n\
    \            }\n        });\n        if(unique_characters[word] > max){\n    \
    \        max = unique_characters[word];\n        }\n        unique_characters\
    \ = {};\n    });\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpq9gt6dm0.js:33:10)\n    at Object.<anonymous> (/tmp/tmpq9gt6dm0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Write your code here\n  words.sort();\n  let maxCharCount\
    \ = 0;\n  let maxWord;\n\n  words.forEach((word) => {\n    let wordCharCount =\
    \ word.length;\n    if(wordCharCount > maxCharCount){\n      maxCharCount = wordCharCount;\n\
    \      maxWord = word;\n    }\n  })\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'prrk'\n\nshould equal\n\n'this'\n    at\
    \ test (/tmp/tmpcevmie_0.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcevmie_0.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n  expected: 'this',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let dict = {}\n  for (let i = 0; i < words.length; i++){\n\
    \    let word = words[i]\n    if (dict[word] !== undefined && dict[word] < i){\n\
    \      dict[word] = i\n    }\n  }\n  \n  return dict[Object.keys(dict)[0]]\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpdum2egfr.js:25:10)\n    at Object.<anonymous> (/tmp/tmpdum2egfr.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\t\n\tvar result = \"\";\n\tvar counter = [];\n\t\n\tfor(var\
    \ i=0; i<words.length; i++){\n\t\tvar word = words[i];\n\t\t\n\t\tif(!counter[word]){\n\
    \t\t\tcounter[word] = 1;\n\t\t\tresult += word;\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\
    \tcounter[word]++;\n\t\t}\n\t}\n\t\n\tfor(var key in counter){\n\t\tif(counter[key]\
    \ > result.length)\n\t\t\tresult = key;\n\t}\n\treturn result;\n\t\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'nameofstring'\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpgn3bwfr7.js:39:10)\n    at Object.<anonymous> (/tmp/tmpgn3bwfr7.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'nameofstring',\n  expected: 'string',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let result = \"\";\n  let count = 0;\n  words.forEach((word)\
    \ => {\n    let unique = word.toLowerCase().split(\"\").filter((char) => char\
    \ == char.toLowerCase()).length;\n    if (unique > count) {\n      count = unique;\n\
    \      result = word;\n    }\n  })\n  return result;\n}\n\nlet name = find_max([\"\
    name\", \"of\", \"string\"]);\nlet result = find_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmphei8fgo7.js:29:10)\n    at Object.<anonymous> (/tmp/tmphei8fgo7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let max = \"\";\n  let max_count = 0;\n  words.forEach(str\
    \ => {\n    let unique_count = 0;\n    for(let i=0; i<str.length; i++){\n    \
    \  if(str[i] === max){\n        unique_count++;\n      }\n    }\n    if(unique_count\
    \ > max_count){\n      max_count = unique_count;\n      max = str;\n    }\n  })\n\
    \  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpr9c795w3.js:31:10)\n    at Object.<anonymous> (/tmp/tmpr9c795w3.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxNum = 0;\n  let maxWord = \"\";\n  words.forEach((word)\
    \ => {\n    if (word.length == maxNum) {\n      maxWord = word;\n    }\n    maxNum\
    \ = maxNum + 1;\n  });\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpuzbt8gg7.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuzbt8gg7.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\treturn find_max_word(words);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzhtmkr_u.js:9\n\treturn find_max_word(words);\n\t^\n\nReferenceError:\
    \ find_max_word is not defined\n    at find_max (/tmp/tmpzhtmkr_u.js:9:2)\n  \
    \  at test (/tmp/tmpzhtmkr_u.js:17:20)\n    at Object.<anonymous> (/tmp/tmpzhtmkr_u.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = 0;\n  var index = -1;\n  for (var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var count = words.length - 1;\n    var\
    \ pos = 0;\n    for (var j = 0; j < word.length; j++){\n      if (words[j] ==\
    \ word){\n        count--;\n        if (count == 0) pos = j;\n      }\n    }\n\
    \    if (max < count){\n      max = count;\n      index = i;\n    }\n  }\n  return\
    \ words[(index >= 0) ? index : words.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp9nk557ns.js:34:10)\n    at Object.<anonymous> (/tmp/tmp9nk557ns.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // Your code here\n    var temp,temp1,temp2,temp3;\n \
    \   var counts=[];\n    for(var i in words){\n        counts.push(words[i].length);\n\
    \    }\n    counts.sort(function(a,b){\n        return a-b;\n    });\n    for(var\
    \ i=0;i<counts.length;i++){\n        temp=counts[i];\n        temp1=i;\n     \
    \   for(var j=i+1;j<counts.length;j++){\n            if(counts[j] < temp){\n \
    \               temp=counts[j];\n                temp1=j;\n            }\n   \
    \     }\n        temp2=temp1;\n        temp3=temp;\n        while(temp2 != temp){\n\
    \            counts[temp1] = counts[temp2];\n            temp1 = temp2;\n    \
    \        temp2 = temp3;\n            temp3 = temp;\n        }\n    }\n    for(var\
    \ i=0;i<counts.length;i++){\n        if(counts[i] == 1){\n            return words[i];\n\
    \        }\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp40uqjxhw.js:48:10)\n    at Object.<anonymous> (/tmp/tmp40uqjxhw.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = words.length;\n    var result = [];\n    for(var\
    \ i in words){\n        result.push(i);\n    }\n    result.sort();\n    var result\
    \ = \"\";\n    for(var i in result){\n        for(var j in words){\n         \
    \   if(words[result[i]] == words[j]){\n                words[result[i]] = \"\"\
    ;\n            }\n        }\n        for(var k in words){\n            if(words[k]\
    \ == \"\"){\n                result += words[k];\n                break;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpyfb_r4gg.js:37:10)\n    at Object.<anonymous> (/tmp/tmpyfb_r4gg.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  \n  if(words.length<2)return '';\n  \n  let max=0\n  let\
    \ index=-1;\n  \n  //Sort the array in descending order of lengths\n  words.sort((a,b)=>(a.length-b.length));\n\
    \  \n  //Iterate over the array comparing the first character of the word to \n\
    \  //the one with maximum character count\n  for(let i=0; i<words.length; i++){\n\
    \    \n    let c=words[i].slice(0,1);\n    \n    //Check if this character occurs\
    \ more than the previous max\n    if((index>=0 && c.search(max) > c.search(words[index-1]))||(index===0&&c.search(max)>0)){\n\
    \      max=c;\n      index=i;\n    }\n  }\n  \n  //Return the word which has the\
    \ longest length and has maximum number of unique characters\n  if(index!=-1)return\
    \ words[index];\n  \n  //No word with maximum number of unique characters is found\n\
    \  return '';\n  \n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp6i9nweei.js:43:10)\n    at Object.<anonymous> (/tmp/tmp6i9nweei.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let unique_char = \"\";\n  let max_index = 0;\n  let max_unique\
    \ = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let current_index =\
    \ words[i].length;\n    let current_unique = 1;\n\n    for(let j = 1; j < words[i].length;\
    \ j++) {\n      if(words[i][j] !== unique_char){\n        if(words[i][j] > unique_char){\n\
    \          unique_char = words[i][j];\n          max_index = i;\n          max_unique\
    \ = current_unique;\n        }\n        current_unique++;\n      }\n    }\n  }\n\
    \  return words[max_index][max_unique];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n't'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpqjxj95go.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqjxj95go.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 't',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar words_with_max_unique = [];\n\tvar max_unique = 0;\n\
    \tvar resulting_string = \"\";\n\tfor(var i=0; i< words.length;i++){\n\t\twords_with_max_unique.push(words[i]);\n\
    \t\tfor(var j=0;j<i;j++){\n\t\t\twords_with_max_unique.push(words[i]+words[j])\n\
    \t\t}\n\t}\n\twords_with_max_unique.sort();\n\tfor(var i=0; i< words_with_max_unique.length;\
    \ i++){\n\t\tvar current_unique = 0;\n\t\tfor(var j=0; j< words_with_max_unique.length;j++){\n\
    \t\t\tif(words_with_max_unique[j] == words_with_max_unique[i]){\n\t\t\t\tcurrent_unique++;\n\
    \t\t\t}\n\t\t}\n\t\tif(current_unique > max_unique){\n\t\t\tmax_unique = current_unique;\n\
    \t\t\tresulting_string = words_with_max_unique[i];\n\t\t}\n\t}\n\treturn resulting_string;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp9_a9goil.js:38:10)\n    at Object.<anonymous> (/tmp/tmp9_a9goil.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let wordsHash = new Set()\n    let sortedWords = words.sort();\n\
    \    words.forEach(word => {\n        if(wordsHash.has(word)){\n            wordsHash.delete(word);\n\
    \        } else {\n            wordsHash.add(word);\n        }\n    })\n    return\
    \ sortedWords[wordsHash.size - 1]\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpljrnuzu3.js:27:10)\n    at Object.<anonymous> (/tmp/tmpljrnuzu3.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // Write your code here\n    \n    var result = \"\"\n\
    \    var temp = []\n    \n    words.forEach(function(word) {\n        var count\
    \ = 0;\n        temp.forEach(function(a){\n            if(a.indexOf(word) > -1)\
    \ count++\n        })\n        \n        if(count > result.length){\n        \
    \    result = word;\n        }\n        if(temp.length < word.length){\n     \
    \       temp.push(word)\n        }\n    })\n    \n    return temp[temp.length-1]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpejm82olg.js:37:10)\n    at Object.<anonymous> (/tmp/tmpejm82olg.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    for(let i=0;i<words.length;i++)\n    {\n        let count\
    \ = {}\n        for(let j=0;j<words.length;j++)\n        {\n            count[words[j]]\
    \ = (count[words[j]]||0)+1\n        }\n        let max_word = null\n        let\
    \ max_count = 0\n        for(let j=0;j<words.length;j++)\n        {\n        \
    \    if(count[words[j]] > max_count)\n            {\n                max_word\
    \ = words[j]\n                max_count = count[words[j]]\n            }\n   \
    \     }\n        if(max_count === words.length-1)\n            return max_word\n\
    \    }\n    return \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpd1sfebz5.js:37:10)\n    at Object.<anonymous> (/tmp/tmpd1sfebz5.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\treturn find_max_aux(words,\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkzjw5zz5.js:9\n\treturn find_max_aux(words,\"\");\n\t^\n\nReferenceError:\
    \ find_max_aux is not defined\n    at find_max (/tmp/tmpkzjw5zz5.js:9:2)\n   \
    \ at test (/tmp/tmpkzjw5zz5.js:17:20)\n    at Object.<anonymous> (/tmp/tmpkzjw5zz5.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    if (words.length === 0) {\n        return \"\";\n    }\n\
    \    var max = words[0];\n    for (var i = 1; i < words.length; i++) {\n     \
    \   if (words[i].length >= max.length) {\n            return max;\n        }\n\
    \        max = words[i];\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpp2w_ybq7.js:27:10)\n    at Object.<anonymous> (/tmp/tmpp2w_ybq7.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let word = words[0];\n    let maxCount = 0;\n    for (let\
    \ i = 1; i < words.length; i++){\n        let count = words.filter((word) => words[i].includes(word)).length;\n\
    \        if(count > maxCount){\n            word = words[i];\n            maxCount\
    \ = count;\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpevdj8mqr.js:26:10)\n    at Object.<anonymous> (/tmp/tmpevdj8mqr.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>max){\n      max=words[i].length;\n      word=words[i];\n\
    \    }\n  }\n  return word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmphwcsnols.js:25:10)\n    at Object.<anonymous> (/tmp/tmphwcsnols.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var count = 0;\n  var max = words[0];\n  for (var i = 1;\
    \ i < words.length; i++){\n    if (words[i].length>max[i].length){\n      max\
    \ = words[i];\n    }\n    for (var j=0; j<words[i].length; j++){\n      count++;\n\
    \      if (count > max[j].length){\n        max[j] = words[i].charAt(j);\n   \
    \   }\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpamyt2c6_.js:12\n    if (words[i].length>max[i].length){\n     \
    \                          ^\n\nTypeError: Cannot read property 'length' of undefined\n\
    \    at find_max (/tmp/tmpamyt2c6_.js:12:32)\n    at test (/tmp/tmpamyt2c6_.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpamyt2c6_.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let count = new Map()\n  words.forEach(w => count.set(w,\
    \ count.get(w) + 1 || 1))\n  let [max] = Array.from(count.entries()).sort(([,a],\
    \ [,b]) => a-b)\n  return max.map(w => w[0]).join(\"\")\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'n'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp98q7g9sz.js:20:10)\n    at Object.<anonymous> (/tmp/tmp98q7g9sz.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max;\n  var found;\n  var word;\n  \n  for (var i =\
    \ 0; i < words.length; i++){\n    if(!found){\n      max = words[i];\n      found\
    \ = true;\n    } else {\n      found = max < words[i]\n    }\n  }\n  \n  if(!found){\n\
    \    return \"\";\n  } else {\n    return max;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp33m_th46.js:34:10)\n    at Object.<anonymous> (/tmp/tmp33m_th46.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max = 0;\n\tvar word = \"\";\n\tfor(var i = 0; i < words.length;\
    \ i++){\n\t\tvar count = words[i].reduce(function(prev, cur){\n\t\t\t\n\t\t\t\
    //Check if there are multiple same characters\n\t\t\tif(prev.filter(function(x){\
    \ return x == cur }).length >= max){\n\t\t\t\tprev = cur;\n\t\t\t\tmax = prev.filter(function(x){\
    \ return x == cur }).length;\n\t\t\t\tword = words[i];\n\t\t\t}\n\t\t\t\n\t\t\t\
    return prev + cur.length;\n\t\t}, 0);\n\t\tif(count > max){\n\t\t\tmax = count;\n\
    \t\t\tword = words[i];\n\t\t}\n\t}\n\treturn word;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmportdx10n.js:12\n\t\tvar count = words[i].reduce(function(prev,\
    \ cur){\n\t\t                     ^\n\nTypeError: words[i].reduce is not a function\n\
    \    at find_max (/tmp/tmportdx10n.js:12:24)\n    at test (/tmp/tmportdx10n.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmportdx10n.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxNumOfChars = 0;\n    var maxString = \"\";\n  \
    \  var maxStringIndex = 0;\n    for (var i = 0; i < words.length; i++) {\n   \
    \     var numOfChars = 0;\n        var string = \"\";\n        for (var j = 0;\
    \ j < words[i].length; j++) {\n            numOfChars += words[i][j].length;\n\
    \            string += words[i][j];\n        }\n        if (numOfChars > maxNumOfChars)\
    \ {\n            maxNumOfChars = numOfChars;\n            maxString = string;\n\
    \            maxStringIndex = i;\n        }\n    }\n    return words[maxStringIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7jkpu4n6.js:34:10)\n    at Object.<anonymous> (/tmp/tmp7jkpu4n6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var counter = {}; //A dictionary to store character occurence\
    \ of each word\n  words.forEach(function(word){\n    word.split('').forEach(function(letter){\n\
    \      if(!counter[letter]){\n        counter[letter] = 0;\n      }\n      counter[letter]++;\n\
    \    });\n  });\n  var max = 0;\n  var maxWord = '';\n  for(var char in counter){\n\
    \    if(counter[char] > max){\n      max = counter[char];\n      maxWord = char;\n\
    \    }\n  }\n  return maxWord;\n}\n\nvar maxChar = find_max(words);\ndocument.write(maxChar);</code>\n\
    <|/ a tags=javascript,jquery dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptuw6ts6e.js:30\ndocument.write(maxChar);</code>\n             \
    \           ^\n\nSyntaxError: Unexpected token '<'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxCount = 0;\n    let result = \"\";\n    for(let\
    \ word of words) {\n        let wordLength = word.length;\n        for(let i =\
    \ 0; i < wordLength; i++) {\n            let currentCharCount = word.charAt(i).length;\n\
    \            \n            if(maxCount < currentCharCount) {\n               \
    \ result = word;\n                maxCount = currentCharCount;\n            }\n\
    \            else if(maxCount > currentCharCount) {\n                result =\
    \ \"\";\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp2j4u84xo.js:34:10)\n    at Object.<anonymous> (/tmp/tmp2j4u84xo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var maxValue = 0;\n  var maxWord = \"\";\n  var maxIndex\
    \ = 0;\n  for (var i = 0; i < words.length; i++){\n    var thisValue = words[i].split(\"\
    \").length;\n    if (thisValue > maxValue) {\n      maxValue = thisValue;\n  \
    \    maxWord = words[i];\n      maxIndex = i;\n    } else if (thisValue == maxValue){\n\
    \      if (words[i] != maxWord){\n        maxValue = thisValue;\n        maxWord\
    \ = words[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp306r8s5d.js:35:10)\n    at Object.<anonymous> (/tmp/tmp306r8s5d.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var wordCounts = [];\n  words.forEach( function(word){\n\
    \    var count = wordCounts[word] ? wordCounts[word]+1 : 1\n    wordCounts[word]\
    \ = count;\n  });\n  return wordCounts.reduce(function(a, b) {\n    return a.length\
    \ > b.length ? a : b;\n  }, '')\n}\n\nvar myString = find_max([\"the\", \"cat\"\
    , \"over\", \"the\", \"dog\", \"over\", \"the\", \"house\", \"dog\", \"the\",\
    \ \"cat\"]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmps_5btini.js:25:10)\n    at Object.<anonymous> (/tmp/tmps_5btini.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var word;\n  var max = 0;\n  var ans;\n  for(var i in words){\n\
    \    word = words[i];\n    if(word.length > max){\n      max = word.length;\n\
    \      ans = word;\n    }\n  }\n  return ans;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmp28hooa7_.js:21\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxLen = 0;\n    let longest = \"\";\n    for(let\
    \ i=0; i<words.length; i++){\n        let word = words[i];\n        let wordLen\
    \ = word.length;\n        if(wordLen > maxLen){\n            maxLen = wordLen;\n\
    \            longest = word;\n        }\n    }\n    if(words.length == 1){\n \
    \       return longest;\n    }\n    return longest.substr(0, maxLen);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpnx3241st.js:31:10)\n    at Object.<anonymous> (/tmp/tmpnx3241st.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max = 0;\n    let maxIndex = 0;\n    let current =\
    \ \"\";\n    \n    words.forEach((word, index) => {\n        if(word.length >\
    \ max){\n            max = word.length;\n            maxIndex = index;\n     \
    \       current = word;\n        }\n    });\n    \n    return words[maxIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmppu6lsnfn.js:30:10)\n    at Object.<anonymous> (/tmp/tmppu6lsnfn.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxCharCount = 0\n  let maxWord = \"\"\n  words.forEach(word\
    \ => {\n    word.length //The length of the word\n    maxCharCount = Math.max(maxCharCount,\
    \ word.length) //Number of unique characters\n    maxWord = word //Word with maximum\
    \ unique characters\n  })\n  return maxWord\n}\nlet myString = \"Hello World\"\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpeae77inw.js:25:10)\n    at Object.<anonymous> (/tmp/tmpeae77inw.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n   let max_characters = words[0].length;\n   for (let i =\
    \ 1; i < words.length; i++){\n      if (words[i].length > max_characters){\n \
    \        max_characters = words[i].length;\n      }\n   }\n   let max_word = \"\
    \";\n   for (let i = 0; i < words.length; i++){\n      if (words[i].length ==\
    \ max_characters){\n         if (max_word == \"\"){\n            max_word = words[i];\n\
    \         }\n         else if (words[i].length > max_word.length){\n         \
    \   max_word = words[i];\n         }\n      }\n   }\n   return max_word;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp2xttdjb_.js:35:10)\n    at Object.<anonymous> (/tmp/tmp2xttdjb_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tconst uniques = {};\n\tconst maxKey = undefined;\n\tfor\
    \ (const word of words) {\n\t\tconst uniqueCharCount = Object.keys(uniques).filter(c\
    \ => uniques[c] > 0\n\t\t\t).length;\n\t\tif (uniqueCharCount > maxKey) {\n\t\t\
    \tmaxKey = uniqueCharCount;\n\t\t}\n\t\tuniques[word] = (uniques[word] || 0) +\
    \ 1;\n\t}\n\treturn maxKey ? words[Object.keys(uniques).sort((a, b) => uniques[a]\n\
    \t\t-uniques[b]).shift()] : \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp9hry61f3.js:28:10)\n    at Object.<anonymous> (/tmp/tmp9hry61f3.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let map = new Map();\n    words.forEach(function(word){\n\
    \        map.set(word,0)\n    })\n    words.forEach(function(word){\n        map[word]\
    \ = map.get(word)+1\n    })\n    words.sort(function(word1,word2){\n        let\
    \ c = map.get(word1)-map.get(word2)\n        if (c == 0) return word1.localeCompare(word2)\n\
    \        else return c\n    })\n    return words[0]\n}\n</code>\n<|/ a tags=javascript\
    \ dscore=0 |>\n<| a tags=javascript |>\nHere is a solution using Array.reduce().\
    \ It can handle empty array as well.\n\n<code>\nconst find_max = (arr) => arr.reduce((c,\
    \ v) => {\n  return c === undefined ? v : (arr.filter(x => x === v).length >=\
    \ c.length) ? v : c;\n}, '');\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo_qqakun.js:23\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max_count = 0;\n    var max_word = \"\";\n    \n \
    \   var len = words.length;\n    for(var i=0; i<len; i++){\n        var count\
    \ = 0;\n        var word = words[i];\n        for(var j=0; j<word.length; j++){\n\
    \            count += word[j].length;\n        }\n        if(count > max_count){\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpy2d9p573.js:33:10)\n    at Object.<anonymous> (/tmp/tmpy2d9p573.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\t//Sort the strings in lexicographical order\n\tsortedWords\
    \ = words;\n\tsortedWords.sort(function(a,b){return a.localeCompare(b);});\n\n\
    \t//Count the number of unique characters\n\tmaxCount = 0;\n\tfor (i in sortedWords)\
    \ {\n\t\tcount = sortedWords[i].length;\n\t\tif (count > maxCount) {\n\t\t\tmaxCount\
    \ = count;\n\t\t}\n\t}\n\n\t//Return null if there exists no words with max count\
    \ of unique characters\n\tif (maxCount == 0) {\n\t\treturn null;\n\t}\n\n\t//Return\
    \ word with max count of unique characters\n\tfor (i in sortedWords) {\n\t\tif\
    \ (sortedWords[i].length == maxCount) {\n\t\t\treturn sortedWords[i];\n\t\t}\n\
    \t}\n\treturn \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'prrk'\n\nshould equal\n\n'this'\n    at\
    \ test (/tmp/tmpzhsqnyye.js:48:10)\n    at Object.<anonymous> (/tmp/tmpzhsqnyye.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n  expected: 'this',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var count = {};\n  for (var i = 0; i < words.length; i++){\n\
    \    var word = words[i];\n    if (count[word] == undefined){\n      count[word]\
    \ = 1;\n    } else {\n      count[word]++;\n    }\n  }\n  var maxVal = 0;\n  var\
    \ maxKey;\n  for(var key in count){\n    if (count[key] > maxVal){\n      maxVal\
    \ = count[key];\n      maxKey = key;\n    }\n  }\n  return maxKey;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpwdvo5_18.js:34:10)\n    at Object.<anonymous> (/tmp/tmpwdvo5_18.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    //Write your code here.\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpqsu_k8br.js:17:10)\n    at Object.<anonymous> (/tmp/tmpqsu_k8br.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max_num_chars = 0, max_word = null, i, char_count, word,\
    \ j, uniques;\n\tuniques = [];\n\t\n\tfor (i = 0; i < words.length; i++){\n\t\t\
    char_count = 0;\n\t\tword = words[i];\n\t\tfor (j = 0; j < word.length; j++){\n\
    \t\t\tif (uniques.indexOf(word[j].toLowerCase()) == -1){\n\t\t\t\tuniques.push(word[j].toLowerCase());\n\
    \t\t\t\tchar_count++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (char_count > max_num_chars){\n\
    \t\t\tmax_num_chars = char_count;\n\t\t\tmax_word = word;\n\t\t}\n\t}\n\treturn\
    \ max_word;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpd19cy45o.js:37:10)\n    at Object.<anonymous> (/tmp/tmpd19cy45o.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let uniques = {}\n    for(let i = 0;i < words.length;i++){\n\
    \        let word = words[i]\n        for(let j = 0; j < word.length; j++){\n\
    \            let char = word.charAt(j)\n            if(char in uniques){\n   \
    \             uniques[char] += 1\n            }else{\n                uniques[char]\
    \ = 1\n            }\n        }\n    }\n\n    let maxChar = \"\"\n    let maxCount\
    \ = -1\n    for(let char in uniques){\n        if(uniques[char] > maxCount){\n\
    \            maxChar = char\n            maxCount = uniques[char]\n        }\n\
    \    }\n    return maxChar;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'n'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp4ebayatu.js:37:10)\n    at Object.<anonymous> (/tmp/tmp4ebayatu.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max_word = \"\";\n    var max_char_len = -1;\n   \
    \ for(var i=0; i<words.length; i++){\n        var current_word_len = words[i].length;\n\
    \        var current_char_len = words[i].split(\"\").length;\n        if(current_word_len\
    \ > max_char_len){\n            max_char = current_char_len;\n            max_word\
    \ = words[i];\n        }else if(current_word_len == max_char_len){\n         \
    \   if(current_char_len > max_char){\n                max_char = current_char_len;\n\
    \                max_word = words[i];\n            }\n        }\n    }\n    return\
    \ max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmphz_5awhp.js:32:10)\n    at Object.<anonymous> (/tmp/tmphz_5awhp.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max,\n      word;\n  words.forEach(function(word){\n\
    \    words.forEach(function(w){\n      if(w == word){\n        words.splice(words.indexOf(w),1);\n\
    \      }\n    });\n  });\n  words.forEach(function(word){\n    max = word.length\
    \ * words.length; //Find length of max word\n    words.forEach(function(word2){\n\
    \      if(word2.length * words.length < max){\n        if(word2 < word){\n   \
    \       max = word2.length * words.length;\n          word = word2;\n        }\n\
    \      }\n    });\n  });\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpmfx02u9r.js:37:10)\n    at Object.<anonymous> (/tmp/tmpmfx02u9r.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // your code here\n    var maxNum = \"\";\n    var maxCount\
    \ = 0;\n    for(var i=0; i<words.length; i++){\n        var thisCount = countChars(words[i],\
    \ maxNum);\n        if(thisCount > maxCount){\n            maxNum = words[i];\n\
    \            maxCount = thisCount;\n        }\n    }\n    return maxNum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3yab1az3.js:13\n        var thisCount = countChars(words[i], maxNum);\n\
    \                        ^\n\nReferenceError: countChars is not defined\n    at\
    \ find_max (/tmp/tmp3yab1az3.js:13:25)\n    at test (/tmp/tmp3yab1az3.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmp3yab1az3.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  words.sort();\n  var maxCount = {};\n  var maxChars = [];\n\
    \  for(var i=0; i<words.length; i++){\n    var currentCharCount = 0;\n    var\
    \ currentChar = \"\";\n    for(var j=0; j<words[i].length; j++){\n      if(maxCount[words[i][j]]){\n\
    \        if(currentCharCount < maxCount[words[i][j]]){\n          currentCharCount\
    \ = maxCount[words[i][j]];\n          currentChar = words[i][j];\n        }\n\
    \      }else{\n        currentCharCount = 0;\n        currentChar = words[i][j];\n\
    \      }\n      maxCount[words[i][j]] = currentCharCount+1;\n    }\n    maxChars.push(currentChar);\n\
    \  }\n  return maxChars.sort().reverse()[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'g'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpbcel8_i6.js:37:10)\n    at Object.<anonymous> (/tmp/tmpbcel8_i6.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'g',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var largest = words[0];\n  var highest_length = 0;\n\n \
    \ for(var i = 1; i < words.length; i++){\n    for(var j=0; j <words[i].length;\
    \ j++){\n      if(highest_length < words[i].length){\n        highest_length =\
    \ words[i].length;\n      }\n\n      if(words[i].length == highest_length && largest.length\
    \ > words[i].length){\n        largest = words[i];\n      }\n    }\n  }\n\n  return\
    \ largest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'of'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmp16y4qlqe.js:32:10)\n    at Object.<anonymous> (/tmp/tmp16y4qlqe.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = words[0].split(\"\").sort().toString();\n\tfor\
    \ (let i = 1; i < words.length; i++){\n\t\tlet count = words[i].split(\"\").sort().toString();\n\
    \t\tif (count > max){\n\t\t\tmax = count;\n\t\t}\n\t}\n\treturn max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'g,i,n,r,s,t'\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpuibgjgmr.js:24:10)\n    at Object.<anonymous> (/tmp/tmpuibgjgmr.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'g,i,n,r,s,t',\n  expected: 'string',\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let letters = [];\n    let word = [];\n    let max_word;\n\
    \    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (letters.indexOf(words[i][j]) == -1)\n            {\n\
    \                letters.push(words[i][j]);\n                words.push(word);\n\
    \                word.push(words[i][j]);\n            }\n        }\n    }\n  \
    \  for (let i = 0; i < words.length; i++) {\n        let current_words = [];\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (letters.indexOf(words[i][j])\
    \ == -1)\n            {\n                current_words.push(words[i][j]);\n  \
    \          }\n        }\n        if (current_words.length == 0)\n        {\n \
    \           max_word = words[i];\n        }\n        else\n        {\n       \
    \     if (current_words.length > words[i].length)\n            {\n           \
    \     max_word = words[i];\n            }\n        }\n    }\n    return max_word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'n', 'a', 'm', 'e', 'o', 'f', 's', 't',\
    \ 'r', 'i', 'g' ]\n\nshould equal\n\n'string'\n    at test (/tmp/tmphwf1x345.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmphwf1x345.js:62:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'n', 'a', 'm', 'e',\n    'o', 'f',\
    \ 's', 't',\n    'r', 'i', 'g'\n  ],\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  return find_max_aux(words, 0, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw8ligqai.js:9\n  return find_max_aux(words, 0, 0);\n  ^\n\nReferenceError:\
    \ find_max_aux is not defined\n    at find_max (/tmp/tmpw8ligqai.js:9:3)\n   \
    \ at test (/tmp/tmpw8ligqai.js:17:20)\n    at Object.<anonymous> (/tmp/tmpw8ligqai.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxCount = 0;\n    let maxWord = words[0];\n    for\
    \ (let i=1;i<words.length;i++){\n        if (words[i].length>maxCount){\n    \
    \        maxWord = words[i];\n            maxCount = words[i].length;\n      \
    \  }\n    }\n    return maxWord;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'bb'\n\nshould equal\n\n'aaaaaaa'\n    at\
    \ test (/tmp/tmpclduf382.js:26:10)\n    at Object.<anonymous> (/tmp/tmpclduf382.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'bb',\n  expected: 'aaaaaaa',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpkqmkwpwi.js:18:10)\n    at Object.<anonymous> (/tmp/tmpkqmkwpwi.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var result = \"\";\n  var charCounts = {};\n  for (var i\
    \ = 0; i < words.length; i++) {\n    var word = words[i];\n    var charCount =\
    \ charCounts[word];\n    if (!charCount) {\n      charCounts[word] = 1;\n    }\
    \ else {\n      charCounts[word]++;\n    }\n  }\n\n  console.log(charCounts);\n\
    \  console.log(words);\n  \n  \n  for (var i = 0; i < words.length; i++) {\n \
    \   var word = words[i];\n    var charCount = charCounts[word];\n    if (charCount\
    \ > 1) {\n      result = word;\n      break;\n    }\n  }\n\n  console.log(result);\n\
    \  \n  return result;\n}\n\nvar result = find_max([\"name\", \"enam\", \"game\"\
    ]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: "{ name: 1, enam: 1, game: 1 }\n[ 'name', 'enam', 'game' ]\n\n{ name: 1,\
    \ of: 1, string: 1 }\n[ 'name', 'of', 'string' ]\n\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp5brpespc.js:45:10)\n    at Object.<anonymous> (/tmp/tmp5brpespc.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    // return \"\"\n    let max = \"\"\n    let maxNumber\
    \ = 0\n    words.map(item =>{\n        console.log(item)\n        console.log(item.length)\n\
    \        // if(item.length>maxNumber){\n            //max = item\n           \
    \ // maxNumber = item.length\n        // }\n    })\n    return max\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: "name\n4\nof\n2\nstring\n6\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpw8bsxh2g.js:29:10)\n    at Object.<anonymous> (/tmp/tmpw8bsxh2g.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Sorts the array in descending order with highest characters\
    \ first and smallest characters last\n  //Returns empty string if length of array\
    \ is less than 2\n  var sortedWords = words.slice().sort();\n  \n  //Takes the\
    \ string length of the first element and subtracts it from all other string lengths\
    \ except the length of the string\n  //The result will give us the string with\
    \ highest number of unique characters.\n  var maxLength = sortedWords[0].length\
    \ - ( sortedWords.reduce(function(previousValue, currentValue){\n    return previousValue\
    \ + currentValue.length;\n  }, 0) - sortedWords[0].length);\n  \n  //Iterates\
    \ through all words and compares each word with previously sorted array till it\
    \ finds one with the same length\n  for(var i = 0; i < sortedWords.length; i++){\n\
    \    if(sortedWords[i].length === maxLength){\n      return sortedWords[i];\n\
    \    }\n  }\n  return \"\";\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp8qfc0ien.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8qfc0ien.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    \n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmprrmbsywr.js:16:10)\n    at Object.<anonymous> (/tmp/tmprrmbsywr.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  if(words.length==0) return '';\n  words=words.map(x => x.split(''));\n\
    \  words.sort((a,b)=> a.length < b.length ? 1 : a.length > b.length ? -1 : 0);\n\
    \  let maxChars = words[0].length;\n  let maxWord = words[0][0];\n  for (let i\
    \ = 1; i < words.length; i++) {\n    let word = words[i];\n    let maxCharsThisWord\
    \ = word[0].length;\n    if (maxCharsThisWord > maxChars) {\n      maxChars =\
    \ maxCharsThisWord;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n's'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpis39f5_i.js:30:10)\n    at Object.<anonymous> (/tmp/tmpis39f5_i.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 's',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet ret = \"\";\n\tlet counts = [];\n\tfor(let word of words){\n\
    \t\tcounts.push(word.length);\n\t\tret = word if counts[words.length-1] > counts[counts.length-1];\n\
    \t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbt5gi8lt.js:13\n\t\tret = word if counts[words.length-1] > counts[counts.length-1];\n\
    \t\t           ^^\n\nSyntaxError: Unexpected token 'if'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\treturn words[0]\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpf8087up7.js:18:10)\n    at Object.<anonymous> (/tmp/tmpf8087up7.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet wordCounts = [];\n\tfor(let word of words){\n\t\twordCounts[word.length]\
    \ = (wordCounts[word.length] || 0) + 1;\n\t}\n\tlet maxCount = 0;\n\tlet maxWord\
    \ = \"\";\n\tlet maxIndex = -1;\n\tfor(let i = 0; i < wordCounts.length; i++){\n\
    \t\tif(wordCounts[i] > maxCount){\n\t\t\tmaxIndex = i;\n\t\t\tmaxCount = wordCounts[i];\n\
    \t\t\tmaxWord = words[i];\n\t\t}\n\t}\n\treturn maxWord;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'enam'\n  \
    \  at test (/tmp/tmp6josvt0k.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6josvt0k.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let result = \"\";\n    \n    for (let i = 0; i < words.length;\
    \ i++){\n        let counts = [];\n        for (let j = 0; j < words.length; j++){\n\
    \            if (i != j && words[i].split('').length < words[j].split('').length){\n\
    \                if (words[i].split('').length < words[j].split('').length){\n\
    \                    counts.push(words[i]);\n                } else {\n      \
    \              counts.push(words[j]);\n                }\n            }\n    \
    \    }\n        \n        if (counts.length === words.length){\n            result\
    \ = words[i];\n            break;\n        }\n    }\n    \n    return result ?\
    \ result : \"\";\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmphc7b2bdu.js:36:10)\n    at Object.<anonymous> (/tmp/tmphc7b2bdu.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max_unique_count = 0;\n\tvar max_string = \"\";\n\t\
    for(var i = 0; i < words.length; i++){\n\t\tvar str = words[i];\n\t\tvar count\
    \ = uniqueCount(str);\n\t\tif(count > max_unique_count){\n\t\t\tmax_unique_count\
    \ = count;\n\t\t\tmax_string = str;\n\t\t}\n\t}\n\treturn max_string;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp09hn5o4.js:13\n\t\tvar count = uniqueCount(str);\n\t\t       \
    \     ^\n\nReferenceError: uniqueCount is not defined\n    at find_max (/tmp/tmpp09hn5o4.js:13:15)\n\
    \    at test (/tmp/tmpp09hn5o4.js:27:20)\n    at Object.<anonymous> (/tmp/tmpp09hn5o4.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n    \n   \
    \ for(var i in words){\n        var word = words[i];\n        if(word.length ==\
    \ maxCount){\n            maxWord = word;\n        }\n        if(word.length >\
    \ maxCount)\n            maxCount = word.length;\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmpacv2n8kh.js:28:10)\n    at Object.<anonymous> (/tmp/tmpacv2n8kh.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let maxCount = 0;\n  let maxIndex = -1;\n  words.forEach(word\
    \ => {\n    let count = word.length;\n    if(count > maxCount){\n      maxCount\
    \ = count;\n      maxIndex = word;\n    }\n  });\n  return maxIndex;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpnc_d8o62.js:27:10)\n    at Object.<anonymous> (/tmp/tmpnc_d8o62.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar max_c = 0;\n\tvar max_w;\n\tvar max_idx;\n\n\tfor(var\
    \ i=0; i< words.length; i++){\n\t\tvar unique_chars = words[i].length;\n\n\t\t\
    if(unique_chars > max_c){\n\t\t\tmax_c = unique_chars;\n\t\t\tmax_w = words[i];\n\
    \t\t\tmax_idx = i;\n\t\t}\n\t}\n\n\treturn max_w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp_7xofnsy.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_7xofnsy.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var wordMap = {},\n      max = 0,\n      word;\n\n  words.forEach(function(word){\n\
    \    word = word.replace(/\\s/g, \"\"); //remove all whitespaces from word\n \
    \   if(wordMap[word]){\n      wordMap[word]++; //increment word count for word\n\
    \    }else{\n      wordMap[word] = 1; //word is new, add word to word map with\
    \ 1\n    }\n    if(wordMap[word] > max){\n      max = wordMap[word]; //update\
    \ the max value\n    }\n  });\n\n  word = null; //set word to null\n\n  //if max\
    \ is 0, return empty string\n  if(max === 0){\n    return \"\";\n  }\n\n  for(var\
    \ word in wordMap){\n    if(wordMap[word] === max){ //if word has max number of\
    \ unique characters\n      word = word; //set word as max word\n    }\n  }\n\n\
    \  return word;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpncky9o_m.js:46:10)\n    at Object.<anonymous> (/tmp/tmpncky9o_m.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  return words[words.length-1]\n  words.map((word) => {\n\
    \    let uniqueChars = new Set()\n    for (let i=0;i<word.length;i++) {\n    \
    \  let char = word.charAt(i)\n      uniqueChars.add(char)\n    }\n    return uniqueChars.size\
    \ ? uniqueChars.first() : word\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp4ysbfits.js:26:10)\n    at Object.<anonymous> (/tmp/tmp4ysbfits.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    words.sort(function(a, b){\n        if(a.length < b.length){\n\
    \            return 1;\n        } else if(a.length > b.length){\n            return\
    \ -1;\n        } else {\n            return 0;\n        }\n    });\n    var res\
    \ = words[0];\n    var max = 0;\n    for(var i = 1; i < words.length; i++){\n\
    \        if(words[i].length >= max){\n            var curr = words[i].length;\n\
    \            if(curr <= max){\n                max++;\n                res = words[i];\n\
    \            } else {\n                max = curr;\n            }\n        }\n\
    \    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpv8ayeyjy.js:40:10)\n    at Object.<anonymous> (/tmp/tmpv8ayeyjy.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var max=0;\n  var result = \"\";\n  var len = words.length;\n\
    \  for(var i = 0; i < len; i++) {\n    var uniqueChars = words[i].length;\n  \
    \  if(uniqueChars > max) {\n      max = uniqueChars;\n      result = words[i];\n\
    \    }\n  }\n  return result;\n}</code>\n<code>\n.result{\n  color:red;\n}</code>\n\
    <code>\n<div class=\"list\">\n  <label>English</label>\n  <ul>\n    <li>\n   \
    \   <input type=\"text\" id=\"english\" class=\"word\">\n      <button id=\"english_button\"\
    >Add</button>\n    </li>\n  </ul>\n</div>\n\n<div class=\"list\">\n  <label>Russian</label>\n\
    \  <ul>\n    <li>\n      <input type=\"text\" id=\"russian\" class=\"word\">\n\
    \      <button id=\"russian_button\">Add</button>\n    </li>\n  </ul>\n</div>\n\
    \n<div id=\"result\">\n  <label>Result</label>\n  <p id=\"result\"></p>\n</div></code>\n\
    <|/ a tags=jquery,html,javascript dscore=0 |>\n<| c |>\nHow does this answer the\
    \ question?\n<|/ c |>\n<| c |>\nI think it answers the question in the first sentence.\
    \ OP wants to know how to find max character length in an array. I'm pretty sure\
    \ the code is pretty self-explanatory.\n<|/ c |>\n<| c |>\nI'm aware of how to\
    \ get the max character length of a string. But how to get it in a list of words\
    \ which is different strings than a single string?\n<|/ c |>\n<| c |>\nI have\
    \ updated my answer with an example of how to get the maximum length of a word.\
    \ You should be able to use that example to extend to find max length in a list.\n\
    <|/ c |>\n<| c |>\nThanks for your effort, but this doesn't seem to work with\
    \ a list of strings. I edited my question to make it more clear.\n<|/ c |>\n<|\
    \ a dscore=0 tags=jquery,html,javascript |>\nJust use sort() and slice() to get\
    \ the largest word from a list like this:\n\n<code>\nvar words = [\"this\", \"\
    is\", \"a\", \"list\", \"of\", \"words\"];\nvar largest = words.sort(function(a,\
    \ b) {\n  return b.length - a.length;\n})[0].slice(-1);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsw57h75x.js:20\n}</code>\n ^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  var res = \"\";\n  var i = 0;\n  for(i = 0; i < words.length;\
    \ i++){\n    var count = 0;\n    for(var j = 0; j < words.length; j++){\n    \
    \  if(words[j] == words[i]){\n        count++;\n      }\n    }\n    if(count >\
    \ i){\n      res = words[i];\n      if(count > words.length - i){\n        return\
    \ \"\";\n      }\n    }\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmpi_6sp18z.js:33:10)\n    at Object.<anonymous> (/tmp/tmpi_6sp18z.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  let result = '',\n    lengths = [],\n    unique;\n  words.forEach((word)\
    \ => {\n    lengths[word.length] = lengths[word.length] || 0;\n    lengths[word.length]++;\n\
    \  })\n  for (let i = 0; i < lengths.length; i++){\n    unique = true;\n    for\
    \ (let j = 0; j < lengths.length; j++){\n      if (lengths[j] > lengths[i] &&\
    \ lengths[i] < lengths[j]){\n        unique = false;\n      }\n    }\n    if (unique){\n\
    \      result = i;\n      break;\n    }\n  }\n  return words[result] || '';\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp7d_xkd_s.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7d_xkd_s.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var max = 0;\n    var best_word = \"\";\n    for(var i\
    \ = 0; i < words.length; i++){\n        if(words[i].length == max){\n        \
    \    best_word = words[i];\n        }\n        else if(words[i].length >= max){\n\
    \            var index = words[i].indexOf(max);\n            best_word = words[i].slice(0,\
    \ index);\n        }\n    }\n    return best_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'strin'\n\nshould equal\n\n'string'\n  \
    \  at test (/tmp/tmp_nvhxscq.js:28:10)\n    at Object.<anonymous> (/tmp/tmp_nvhxscq.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'strin',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet max = -1;\n\tlet index = 0;\n\t\n\tfor (let word of\
    \ words){\n\t\tlet char_count = word_charCount(word);\n\t\tif (char_count > max){\n\
    \t\t\tmax = char_count;\n\t\t\tindex = words.indexOf(word);\n\t\t}\n\t}\n\t\n\t\
    if (index == 0){\n\t\treturn words[0];\n\t}\n\t\n\twords.splice(index, 1);\n\t\
    \n\treturn find_max(words);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkbai7pc_.js:13\n\t\tlet char_count = word_charCount(word);\n\t\t\
    \                 ^\n\nReferenceError: word_charCount is not defined\n    at find_max\
    \ (/tmp/tmpkbai7pc_.js:13:20)\n    at test (/tmp/tmpkbai7pc_.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpkbai7pc_.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tvar maxCount = 0, maxChar = '';\n\twords.forEach(function(word)\
    \ {\n\t\tif(word.length >= maxCount){\n\t\t\tmaxChar = word;\n\t\t\tmaxCount =\
    \ word.length;\n\t\t}\n\t});\n\twords.forEach(function(word) {\n\t\tif(word.length\
    \ == maxCount){\n\t\t\tvar found = false;\n\t\t\twords.forEach(function(word2)\
    \ {\n\t\t\t\tif(word < word2){\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t});\n\
    \t\t\tif(!found){\n\t\t\t\treturn maxChar;\n\t\t\t}\n\t\t}\n\t});\n\treturn maxChar;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp3glx08vk.js:38:10)\n    at Object.<anonymous> (/tmp/tmp3glx08vk.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tlet counts = {}\n\twords.forEach(word => {\n\t\tword = word.replace(/[^a-zA-Z]/g,\
    \ \"\")\n\t\tlet count_word = counts[word]\n\t\tcounts[word] = count_word ? count_word+1\
    \ : 1 \n\t})\n\tlet max = Object.entries(counts).sort((a, b) => b[1] - a[1])[0][0]\n\
    \tlet index = words.findIndex(word => word == max)\n\treturn words[index]\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'string'\n   \
    \ at test (/tmp/tmp637rya31.js:24:10)\n    at Object.<anonymous> (/tmp/tmp637rya31.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Write your code in Javascript\n  \n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpy7f1835j.js:18:10)\n    at Object.<anonymous> (/tmp/tmpy7f1835j.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\tfor(var i = words.length - 1; i >= 0; i--){\n\t\tfor(var\
    \ j = words[i].length - 1; j >= 0; j--){\n\t\t\tif(words[i][j] > words[i][j +\
    \ 1]){\n\t\t\t\twords[i][j + 1] = words[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ words[words.length - 1][0];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n's'\n\nshould equal\n\n'string'\n    at\
    \ test (/tmp/tmpwmd2kbf7.js:24:10)\n    at Object.<anonymous> (/tmp/tmpwmd2kbf7.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 's',\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  //Write your code here\n}\n</cell>\n<cell>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpftyohgdx.js:11\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n  return words.sort(function(word1, word2){\n    return word1.split('').sort().join()\
    \ === word2.split('').sort().join()\n  }).join('')\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'nameofstring'\n\nshould equal\n\n'string'\n\
    \    at test (/tmp/tmpix9u62dn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpix9u62dn.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'nameofstring',\n  expected: 'string',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let uniqueCharNum={};\n    let maxNum={};\n    let maxItem={};\n\
    \    for(let i=0;i<words.length;i++){\n        let word=words[i];\n        let\
    \ numChars=0;\n        for(let j=0;j<word.length;j++){\n            if(!uniqueCharNum[word[j]]){\n\
    \                uniqueCharNum[word[j]]=1;\n            }else{\n             \
    \   uniqueCharNum[word[j]]++;\n            }\n            if(uniqueCharNum[word[j]]>numChars){\n\
    \                numChars=uniqueCharNum[word[j]];\n            }\n        }\n\
    \        if(numChars>maxNum[word]){\n            maxNum[word]=numChars;\n    \
    \        maxItem=word;\n        }\n    }\n    return maxItem;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{}\n\nshould equal\n\n'string'\n    at test\
    \ (/tmp/tmp47w0atvd.js:37:10)\n    at Object.<anonymous> (/tmp/tmp47w0atvd.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: {},\n  expected: 'string',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    words.sort(function(a,b){\n       return a.length - b.length;\n\
    \    });\n    var max;\n    var currWord = \"\";\n    words.forEach(function(word){\n\
    \        var uniqueCharsCount = word\n            .reduce(function(count, letter){\n\
    \                return count + (letter.charCodeAt(0)==9 && letter!=\"8\");\n\
    \            }, 0);\n        if(uniqueCharsCount > max){\n            max = uniqueCharsCount;\n\
    \            currWord = word;\n        }\n    });\n    return currWord;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3stltlwv.js:16\n            .reduce(function(count, letter){\n\
    \             ^\n\nTypeError: word.reduce is not a function\n    at /tmp/tmp3stltlwv.js:16:14\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmp3stltlwv.js:14:11)\n\
    \    at test (/tmp/tmp3stltlwv.js:32:20)\n    at Object.<anonymous> (/tmp/tmp3stltlwv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n   let max_cnt = 0;\n   let best_word = \"\";\n   for (let\
    \ i = 0; i < words.length; i++){\n       let cnt = Object.keys(words[i]).length;\n\
    \       if (cnt > max_cnt){\n          max_cnt = cnt;\n          best_word = words[i];\n\
    \       }\n   }\n   return best_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmp7d1r2ly3.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7d1r2ly3.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let max = words[0];\n    let count = 1;\n\n    for (let\
    \ i = 1; i < words.length; i++){\n        if(words.indexOf(words[i]) > words.indexOf(max)){\n\
    \            max = words[i];\n            count = 1;\n        }\n        else\
    \ if(words.indexOf(words[i]) == words.indexOf(max)){\n            count++;\n \
    \       }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'game'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpxo1ee60t.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxo1ee60t.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'game',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n\t// write code here\n\tconst wordSet = words.length;\n\t\
    let maxWord;\n\tlet maxCount;\n\tlet maxCountSet;\n\tlet maxCountSetIndex;\n\n\
    \tfor(let i = 0; i < wordSet; i++){\n\t\tlet count = words[i].length;\n\t\tlet\
    \ wordSetIndex = 0;\n\n\t\twhile(wordSetIndex < wordSet){\n\t\t\tcount -= words[wordSetIndex].length;\n\
    \t\t\tif(count <= 0){\n\t\t\t\tmaxCount = count;\n\t\t\t\tmaxWord = words[wordSetIndex];\n\
    \t\t\t\tmaxCountSet = wordSetIndex;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcountSetIndex\
    \ += words[wordSetIndex].length;\n\t\t\twordSetIndex++;\n\t\t}\n\t}\n\t\n\tif(maxCountSet\
    \ === wordSet){\n\t\treturn maxWord;\n\t}\n\n\treturn find_max(words.slice(maxCountSet+1,\
    \ wordSet));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmp0b6l1s9j.js:28\n\t\t\tcountSetIndex += words[wordSetIndex].length;\n\
    \t\t\t^\n\nReferenceError: countSetIndex is not defined\n    at find_max (/tmp/tmp0b6l1s9j.js:28:4)\n\
    \    at test (/tmp/tmp0b6l1s9j.js:45:20)\n    at Object.<anonymous> (/tmp/tmp0b6l1s9j.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    var maxes = [];\n    for(var i = 0;i < words.length;i++){\n\
    \        if(maxes.length == 0){\n            maxes.push(words[i]);\n        }else{\n\
    \            if(maxes[maxes.length - 1].length < words[i].length){\n         \
    \       maxes.push(words[i]);\n            }\n        }\n    }\n    return maxes[maxes.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'name'\n\nshould equal\n\n'enam'\n    at\
    \ test (/tmp/tmpmwky05nm.js:28:10)\n    at Object.<anonymous> (/tmp/tmpmwky05nm.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction\
    \ find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n    words.forEach((word)\
    \ => {\n        if(maxCount == word.length) maxWord = word;\n        else{\n \
    \           if(word.length >= maxCount) maxWord = word;\n        }\n        maxCount\
    \ = maxCount + word.length;\n    })\n    return maxWord;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,string,sorting |>\nThe accepted answer does not work\
    \ for strings with multiple duplicated words.  This version works correctly for\
    \ strings with multiple duplicated words.\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmptdlf2_.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
