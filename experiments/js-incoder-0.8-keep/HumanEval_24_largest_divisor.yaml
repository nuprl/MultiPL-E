name: HumanEval_24_largest_divisor
language: js
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n\
  \  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["    for(let i=2; i<n; i++){\n        if (n % i === 0) return i\n  \
    \  }\n    return n\n}\n", "  if(n<=1){\n    return 1;\n  }\n  let largest = 1\
    \ ;\n  let divisor = 1;\n  while (divisor < n){\n    if (n % divisor === 0) {\n\
    \      largest = divisor;\n    } else {\n      divisor ++;\n    }\n  }\n  return\
    \ largest;\n}\n", "  let divisor;\n  let largest_divisor;\n  let counter = 0;\n\
    \  for(let i = 1; i <= n; i++){\n    \n    if(n % i == 0){\n      counter++;\n\
    \      if(counter > largest_divisor){\n        largest_divisor = counter;\n  \
    \      divisor = i;\n      }\n    }\n  }\n  return divisor;\n}\n", "    if(n%2==0){\n\
    \        var i=3;\n        for(var factor=1;i<=n;i++){\n            if(n%i==0){\n\
    \                factor=i;\n                break;\n            }\n        }\n\
    \        return factor;\n    }\n    return n-1;\n}\n", "    var i, \n        divisor,\
    \ \n        divs = [];\n    \n    for (i=n;i>1;i--){\n        divisor = i-1;\n\
    \        divs.push(divisor);\n        if (n / divisor === Math.floor(n/divisor))\n\
    \            break;\n    }\n\n    return divs[divs.length-1];\n}", "    var i;\n\
    \    var max_divisor = n >> 1;\n    for(i=31; i>=0; i--){\n        if((n >> i)\
    \ % 2 == 0){\n            max_divisor = n >> i;\n            break;\n        }\n\
    \    }\n    return max_divisor;\n}\n", "\tn = n + 1;\n\tlet max_divisor = 1;\n\
    \tlet min_divisor = n;\n\n\tfor(let i=1; i<=n; i++){\n\t\tlet divisor = i/divisor;\n\
    \t\tif(divisor < min_divisor)\n\t\t\tmin_divisor = divisor;\n\t\tif(divisor >\
    \ max_divisor)\n\t\t\tmax_divisor = divisor;\n\t}\n\treturn max_divisor;\n}\n",
  "  var max_val = -1;\n  var max_factor = 1;\n  for (var i = 2; i <= Math.sqrt(n);\
    \ i++)\n  {\n    if (n % i == 0)\n    {\n      if (max_val < i)\n      {\n   \
    \     max_val = i;\n      }\n      if (max_factor < i)\n      {\n        max_factor\
    \ = i;\n      }\n    }\n  }\n  return max_factor;\n}", "\tvar max_divisor = 1;\n\
    \t\n\twhile((n%max_divisor)>0){\n\t\tmax_divisor++;\n\t}\n\t\n\treturn max_divisor;\n\
    }\n", "    for(var i = 1; i <= n; i++){\n        if((n % i) === 0){\n        \
    \    return i;\n        }\n    }\n    return n;\n}\n", "\tif(n < 0){\n\t\treturn\
    \ -1;\n\t}\n\n\tif(n === 0) {\n\t\treturn 1;\n\t}\n\n\tvar d = 2;\n\n\twhile(d\
    \ * d <= n){\n\t\td *= 2;\n\t}\n\n\treturn d;\n}\n", "  var largest = n\n  for(var\
    \ i = 2; i <= n; i++){\n    if (largest%i == 0){\n      largest = i\n    }\n \
    \ }\n  return largest\n}\n", "  var max_divisor = 1;\n  for(var i = 0; i < 8;\
    \ i++){\n    if(n % i == 0){\n      var q = Math.floor(n / i);\n      if(q > max_divisor){\n\
    \        max_divisor = q;\n      }\n    }\n  }\n  return max_divisor;\n}\n", " \
    \   let max_num = 0;\n    for (let i=1; i <= n; i++){\n        if (n % i === 0){\n\
    \            console.log(i);\n            if (i > max_num){\n                max_num\
    \ = i;\n            }\n        }\n    }\n    return max_num;\n}\n", "\tif(n ==\
    \ 1) return 1\n\n\tlet ans = 1\n\tlet n1 = n-1\n\n\tfor(let i = 2; i <= n1; i++){\n\
    \t\tif(n % i == 0){\n\t\t\tans = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ans\n\
    }\n", "  let max_divisor = 1;\n  for (let i = 1; i <= n; i++){\n    if (n % i\
    \ == 0){\n      max_divisor = i;\n      break;\n    }\n  }\n  return max_divisor;\n\
    }\n", "\tlet max_val = n\n\tfor(let i=1; i<n; i++){\n\t\tif(n % i == 0){\n\t\t\
    \tmax_val = i\n\t\t}\n\t}\n\treturn max_val\n}", "  // check if n is a square\
    \ number\n  if (n%n === 0) return n;\n  // check if n is a perfect square\n  if\
    \ (n%n === 0) return n;\n  // check if n is a prime\n  for (let i=2; i<=Math.sqrt(n);\
    \ i++){\n    if (n%i===0) return n;\n  }\n  return n;\n}\n", "  let max_div=0;\n\
    \  for(let div=1;div<=n;div++)\n  {\n   if(n%div===0) max_div=div;\n  }\n  return\
    \ max_div;\n}\n", "  var max_num = 0,\n    div = parseInt(n/2);\n\n  while (n\
    \ % div == 0) {\n    max_num = div;\n    div = parseInt(div/2);\n  }\n\n  return\
    \ max_num;\n}\n", "\tif(n%2==0)\n\t\tif(n>15)\n\t\t\treturn 1;\n\t\telse\n\t\t\
    \treturn 2;\n\telse if(n%2==1)\n\t\treturn largest_divisor(3*n+1)+1;\n\telse\n\
    \t\treturn largest_divisor(n/2);\n}", "  var factor = 1;\n  for (var i = 2; i\
    \ <= n; i += 1){\n    if (n % i === 0){\n      factor = i;\n      break;\n   \
    \ }\n  }\n  return factor;\n}\n", "    for(var i = 0; i < 10; ++i){\n        if(n\
    \ % i == 0) return i;\n    }\n    return n;\n}\n", "\tvar s = 1;\n\twhile( s <\
    \ n ) s = s*2;\n\treturn n;\n}\n\n", "    \n    if(n%2 === 0){\n        return\
    \ n;\n    }\n    var sqr = Math.sqrt(n);\n    for(var i = 3; i < sqr; i++){\n\
    \        if(n % i === 0){\n            return i;\n        }\n    }\n    \n}",
  "  if(n==0) return 0;\n  var q = Math.floor(n/2);\n  if(q*q == n){\n    return q;\n\
    \  }\n  if(q*q+q == n){\n    return q+1;\n  }\n  return -1;\n}", "    var i =\
    \ 1\n    var x = n\n    while( x < n ){\n        if( n % i == 0 )\n          \
    \  x = n / i\n        else\n            i++\n    }\n    return i\n}\n", "  var\
    \ max_divisor = 0;\n  var max_divisor_remainder = 0;\n  for(var i = 0; i <= n;\
    \ i++){\n    var mod = n % i;\n    if(mod > max_divisor_remainder){\n      max_divisor_remainder\
    \ = mod;\n      max_divisor = i;\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ for(var i=4;i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n}\n",
  "    for(let i = 0; i <= 9; i++){\n        if(n%i == 0){\n            return i\n\
    \        }\n    }\n}\n", "    for(var i = n; i > 0; i--){\n        if(i%n ===\
    \ 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "\tif(n <=\
    \ 0) throw new Error(\"n must be positive\");\n\tif(n < 2) return 1;\n\tvar max_factor\
    \ = 1;\n\tvar smallest_factor = 1;\n\t\n\tvar i = 2;\n\twhile(max_factor <= n){\n\
    \t\tif((n%i) == 0){\n\t\t\tif((n%(Math.sqrt(i))) == 0){\n\t\t\t\tmax_factor =\
    \ i;\n\t\t\t}else{\n\t\t\t\tsmallest_factor = i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\
    \t}\n\t\n\treturn max_factor;\n}\n", "    var next_l = 0;\n    var next_r = 0;\n\
    \    for (var i = 2; i < n; i++){\n        next_l = next_r + 1;\n        next_r\
    \ = next_l + 1;\n        if (next_l <= n / next_r){\n            next_l = next_r\
    \ + 1;\n        }else{\n            next_r = next_l + 1;\n        }\n    }\n \
    \   return next_r;\n}\n", "  let l = 1;\n  while(n % l === 0){\n    l++;\n  }\n\
    \  return l;\n}\n", "  let counter = 1;\n  while(n > counter){\n    n--;\n   \
    \ counter *= 2;\n  }\n  return n;\n}\n", "  var result = n;\n  var divisor_counter\
    \ = 1;\n  for(var i=1; i<=n; i++){\n    if(n % i == 0){\n      if(result == n){\n\
    \        //we found a divisor that is equal to n\n        result = i;\n      }\
    \ else {\n        //we found a divisor that is larger than n\n        result =\
    \ i;\n        break;\n      }\n    }\n  }\n  console.log(divisor_counter);\n \
    \ return result;\n}\n", "  var i;\n  var temp;\n  var divs = [];\n  for(i = n\
    \ + 1;i >= 1;i--){\n    temp = i / i;\n    if(temp === Math.floor(i/i)){\n   \
    \   divs.push(temp);\n    }\n  }\n  return Math.max.apply(null, divs);\n}\n",
  "\tlet divisors = [1]\n\tfor(let i = 1; i<=n; i++){\n\t\tdivisors.push(divisors[divisors.length-1]*i)\n\
    \t}\n\treturn Math.max.apply(null, divisors)\n}\n", "  var i = 1;\n  var counter\
    \ = 0;\n  while (true){\n    if (n % i == 0){\n      counter = i;\n      break;\n\
    \    }\n    if (i == Math.sqrt(n)){\n      counter = n;\n      break;\n    }\n\
    \    i++;\n  }\n  return counter;\n}\n", "    var divisor = Number.MAX_VALUE;\n\
    \    var candidate = n;\n    while(true){\n        if(!n % candidate){\n     \
    \       return candidate;\n        }\n        candidate++;\n        if(candidate\
    \ > Math.sqrt(n)){\n            return divisor;\n        }\n        divisor++;\n\
    \    }\n}\n", "    var d = 1;\n    while(n > d){\n        n = n/d;\n        d++;\n\
    \    }\n    return d;\n}", "\tvar s = Math.sqrt(n);\n\tvar t = n/s;\n\t\n\t//\
    \ iterate from largest to smallest\n\tfor(var i = 5; i <= s ; i ++){\n\t\tif(n\
    \ % i == 0){\n\t\t\tt = n;\n\t\t\tbreak;\n\t\t}\n\t\tif(n % i == 1){\n\t\t\tt\
    \ = n/i;\n\t\t\tbreak;\n\t\t}\n\t\tif(n % i == 2){\n\t\t\tt = n/i/2;\n\t\t\tbreak;\n\
    \t\t}\n\t\tif(n % i == 3){\n\t\t\tt = n/i/3;\n\t\t\tbreak;\n\t\t}\n\t\tif(n %\
    \ i == 4){\n\t\t\tt = n/i/4;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn t;\n}\n",
  "    let divisors = 0;\n    let max_divisor = 1;\n    let max_dividend = n;\n  \
    \  for(let i = 2; i < n; i++){\n        if(n % i == 0){\n            divisors\
    \ += 1;\n            if(max_dividend % i == 0){\n                max_divisor =\
    \ i;\n                max_dividend = max_dividend / i;\n            }\n      \
    \  }\n    }\n    return max_divisor;\n}\n", "  var i = 1;\n  while (i < n){\n\
    \    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return null;\n\
    }\n", "  if(n<1){return -1;}\n  var s=1;\n  for(var i=n;i>=1;i--){\n    if(n%i==0){\n\
    \      n=n/i;\n      break;\n    }\n  }\n  return s;\n}", "  var largest_divisor\
    \ = Math.pow(n, Math.floor(Math.log(Math.pow(10, n))/Math.log(10))+1);\n  return\
    \ largest_divisor;\n}\n", "\tif(n%1!=0){\n\t\treturn n;\n\t}\n\tvar primes=[],\n\
    \tprimes_count,\n\tnum\n\t\n\t\n\twhile(true){\n\t\tprimes_count=0;\n\t\tnum=n-1;\n\
    \t\t\n\t\twhile(num!=0){\n\t\t\tprimes[primes_count]=num;\n\t\t\tnum=num/2\n\t\
    \t\tprimes_count++;\n\t\t}\n\t\t\n\t\tif(primes_count<2){\n\t\t\treturn n;\n\t\
    \t}\n\t\t\n\t\tnum=3;\n\t\twhile(num<n){\n\t\t\tnum=num*3+2;\n\t\t}\n\t\t\n\t\t\
    \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n}\n", "    var maxDiv = Math.sqrt(n);\n\
    \    while(n > maxDiv){\n        maxDiv *= maxDiv;\n    }\n    return maxDiv;\n\
    }", "\t\n\tif(n===0){\n\t\treturn 0\n\t}\n\tif(n%2===0){\n\t\treturn n\n\t}\n\t\
    if(n%2===1){\n\t\treturn largest_divisor(Math.floor(n/2))\n\t}\n\telse{\n\t\t\
    return largest_divisor(Math.floor(n/2))+1\n\t}\n}\n", "  var max_i = Math.floor(n/2);\n\
    \  for(var i = max_i; n >= 1; i--){\n    if(n%i === 0) return i;\n  }\n  return\
    \ max_i; //2\n}\n", "    var max_divisor = 1;\n    for (var i = 31; i >= 1 ; i--){\n\
    \        max_divisor = i;\n        if (n % i == 0){\n            break;\n    \
    \    }\n    }\n    if (max_divisor * max_divisor > n){\n        return max_divisor;\n\
    \    }\n    else {\n        return n;\n    }\n}\n", "    if (n === 0) return 0;\n\
    \    var maxDiv = n;\n    var maxDiv2 = 0;\n    while (maxDiv2 <= n && maxDiv\
    \ * maxDiv <= n)\n    {\n        maxDiv = maxDiv * maxDiv;\n        maxDiv2 =\
    \ maxDiv2 * maxDiv2;\n    }\n    return maxDiv2 + 1;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nIf you're looking for a particular divisor, this is just too slow.\
    \ If you're looking for multiple divisors, it's as slow as `largest_divisor()`\n\
    <|/ c |>\n<| c |>\n: That's true but I thought the point was to find the largest\
    \ one and if there were multiple divisors you'd want to find all of them. If you\
    \ wanted all of them you could just iterate through all possible numbers and check\
    \ `n % divisor == 0` for each one.\n<|/ c |>\n<| c |>\n: It really depends what\
    \ you need it for. It might not be the right tool for the job if you need a particular\
    \ divisor. For instance if you are just looking for a prime number (`n % divisor\
    \ == 0` would not suffice). But if the point was to find all divisors then this\
    \ would be the way to go.\n<|/ c |>\n<| c |>\n: Yes but `largest_divisor()` is\
    \ not the right tool for the job because it is too slow for even numbers. It is\
    \ just a simple algorithm. There are faster algorithms for even numbers but it's\
    \ much more complicated.\n<|/ c |>\n<| c |>\n: Yes, I agree that largest_divisor()\
    \ does not do what you want, but this algorithm does work, just not optimally.\n\
    <|/ c |>\n<| a |>\nThis is an old thread, but as I stumbled upon this while searching\
    \ for the same thing, I thought I'd post my solution.\nI implemented it in JavaScript,\
    \ using recursion to keep searching until it finds something to divide into n.\n\
    <code>", "    var counter = 0;\n    while(n > 1){\n        if(n % 2 == 0){\n \
    \           n = n/2;\n        }\n        else{\n            n = 3*n + 1;\n   \
    \     }\n        counter++;\n    }\n    return counter;\n}\n", "  var maxDivisor\
    \ = 1, maxDivisorSmaller;\n  for(var i = 3; i <= n; i += 2){\n    if(n % i ==\
    \ 0){\n      maxDivisor = Math.max(i+1, maxDivisor);\n      maxDivisorSmaller\
    \ = Math.min(i-1, maxDivisorSmaller);\n    }\n  }\n  return Math.max(n, maxDivisor,\
    \ maxDivisorSmaller);\n}\n", "  let divisor = 1;\n  while (n != 1 && divisor <=\
    \ n) {\n    divisor++;\n    n = (n-1) / 2\n  }\n  return divisor;\n}\n", "\t\n\
    \t//Find the largest number that divides n evenly\n\tvar factor = 1;\n\twhile(n%factor\
    \ == 0){\n\t\tfactor++;\n\t}\n\treturn factor;\n}\n\n", "  let max_divisor = n\n\
    \  let max_n = n\n  let remainder\n\n  while(true){\n    remainder = n % max_divisor\n\
    \    if (remainder === 0){\n      break\n    }\n    max_divisor--\n    max_n =\
    \ remainder\n  }\n\n  return max_n\n}\n\n", "  if(n==0){\n    return 0;\n  }\n\
    \  if(n==1){\n    return 1;\n  }\n  let divs = 1;\n  let result = 1;\n  for (let\
    \ i=2;i<=n;i++){\n    if (n%i==0){\n      result = i;\n      divs = i+1;\n   \
    \ }\n  }\n  return divs*result;\n}\n", "    let max_divisor = n;\n    let divisor\
    \ = 1;\n    for(let i = 1; i < n; i++){\n        divisor *= i;\n        if(n %\
    \ divisor === 0){\n            max_divisor = divisor;\n        }\n    }\n    return\
    \ max_divisor;\n}\n", "  var result,\n      counter = 1\n  while(result === 0\
    \ || (result === Infinity && counter > 10000)){\n    if(n % counter === 0){\n\
    \      result = counter\n      counter = 0\n    }else{\n      counter++\n    }\n\
    \  }\n  return result\n}\n", "  var i = 2, \n      factor = 1;\n  \n  while(i\
    \ <= n){\n    factor *= i;\n    i++;\n  }\n  return factor;\n}\n", "    return\
    \ Math.ceil(n/Math.sqrt(n)) + 1;\n}\n", "\tfor(var i=0;i<=n;i++){\n\t\tvar d=Math.floor(n/i);\n\
    \t\tif(d*i!=n){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn n;\n}", "  return Math.ceil(Math.sqrt(n));\n\
    }\n", "\tvar div = n;\n\twhile(true){\n\t\tdiv += 1;\n\t\tif((div % 2) == 0){\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn div;\n}\n", "  if(n < 10) return 1;\n  if(n\
    \ < 100) return 2;\n  if(n < 1000) return 3;\n  if(n < 10000) return 5;\n  if(n\
    \ < 100000) return 15;\n  if(n < 1000000) return 25;\n  if(n < 10000000) return\
    \ 35;\n  if(n < 100000000) return 45;\n  if(n < 1000000000) return 55;\n  if(n\
    \ < 10000000000) return 65;\n  if(n < 100000000000) return 75;\n  if(n < 1000000000000)\
    \ return 85;\n  if(n < 10000000000000) return 95;\n  if(n < 100000000000000) return\
    \ 105;\n  if(n < 1000000000000000) return 115;\n  if(n < 10000000000000000) return\
    \ 125;\n  if(n < 100000000000000000) return 135;\n  if(n < 1000000000000000000)\
    \ return 145;\n  return 0;\n}\n", "\tif(n % 2 == 0) return n\n\tfor(let i = 3;\
    \ i <= n; i *= 2){\n\t\tif(n % i == 0){\n\t\t\treturn i\n\t\t}\n\t}\n\treturn\
    \ n\n}\n", "  var largest = 1;\n  var i = 1;\n\n  for(; i * i <= n; i += 1) \n\
    \    if((n % i) === 0) \n      largest = i;\n  return largest;\n}\n", "    var\
    \ s = 1;\n    var i;\n    for(i=2; i <= Math.sqrt(n); ++i){\n        if(n%i ==\
    \ 0){\n            s = i;\n        }\n    }\n    return s;\n}\n", "  for(var i\
    \ = 0; i < Math.floor(n/2); i++){\n    if(n%i === 0){\n      return i;\n    }\n\
    \  }\n}", "  var max_divisor = n;\n  var max_divisor_index = -1;\n  for (var i\
    \ = 2; i <= n; i++){\n    if (n % i == 0){\n      var divisor = i;\n      if (divisor\
    \ > max_divisor){\n        max_divisor = divisor;\n        max_divisor_index =\
    \ i;\n      }\n    }\n  }\n  return max_divisor_index;\n}", "  return Math.floor(Math.sqrt(n)/2);\n\
    }\n", "    return Math.ceil(n/largest_divisors);\n}\n", "\tfor(var i=2; i<n; i++){\n\
    \t\tif(n%i==0)\n\t\t\treturn i;\n\t}\n\treturn n;\n}\n", "  var counter = 1;\n\
    \  var i = 1;\n  while(counter < n) {\n    if(n % i == 0){\n      counter++;\n\
    \    }\n    else{\n      if(counter > n){\n        return i;\n      }\n    }\n\
    \    i++;\n  }\n  return counter;\n}\n", "\tvar x = Math.floor(n);\n\t\n\tfor(var\
    \ i = 2; i <= x/2; i++){\n\t\tif( n % i == 0){\n\t\t\tx /= i;\n\t\t\tbreak;\n\t\
    \t}\n\t}\n\treturn x;\n}\n", "    var s = 1;\n    var d = 0;\n    while(true){\n\
    \        if(n%d == 0)\n            return d;\n        d += 2;\n        s++;\n\
    \    }\n}\n", "  \n  let arr = [...Array(n+1).keys()];\n  let max_factor = 1;\n\
    \  \n  arr.forEach((index)=>{\n    \n    if(n % index ===0 && max_factor < index)\n\
    \      max_factor = index;\n  }); \n\n  return max_factor;\n}\n", "    var counter=0;\n\
    \    for (var i = 1; i < n; i++){\n        if(n%i===0){\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\n", "  var smallest, largest;\n  for(var\
    \ i=3; i<=Math.sqrt(n); i+=2){\n    if(n % i == 0){\n      smallest = i;\n   \
    \   break;\n    }\n  }\n  smallest = 2*smallest + smallest;\n  largest = smallest;\n\
    \  for(i=smallest+1; i<=n; i+=2){\n    if(n % i == 0){\n      largest = i;\n \
    \     break;\n    }\n  }\n  return largest;\n}", "\treturn Math.sqrt(n * n + 1);\n\
    }", "\tvar i = Math.floor(n/2),\n\t\tm = n%i,\n\t\tj = m ? largest_divisor(m)\
    \ : i,\n\t\tl = j+i;\n\treturn l*j*j*j*j\n}\n", "\tvar largest_divisor = n, \n\
    \t\ti = 1;\n\tfor(; n%i; i++);\n\twhile(i != n%i){\n\t\tlargest_divisor = i;\n\
    \t\ti = 1;\n\t\tfor(; n%i; i++);\n\t}\n\treturn largest_divisor;\n}\n\n", "  var\
    \ i=0;\n  var r=1;\n  while(r*r<=n){\n    r=2*r;\n    i++;\n  }\n  return i;\n\
    }\n", "    var max_divisor = 1;\n    var max_div = 1;\n\n    for(var divisor =\
    \ 2; divisor <= n; divisor++){\n        if(n % divisor === 0){\n            if((max_div\
    \ * divisor) < max_divisor){\n                max_divisor = max_div * divisor;\n\
    \            }\n            max_div = divisor;\n        }\n    }\n\n    return\
    \ max_divisor;\n}\n", "\tn = parseInt(n, 10);\n\tvar i = 1;\n\tfor(;i<=n/2;i++){\n\
    \t\tif(n%i===0) return i;\n\t}\n\treturn n;\n}\n", "\tvar i = n-1\n\twhile(i>0){\n\
    \t\tif(n%i===0) return i\n\t\ti-=1\n\t}\n\treturn 1\n}\n", "  var divisor = 1;\n\
    \  while( true){\n    if( n % divisor === 0) return divisor;\n    divisor++;\n\
    \  }\n}\n", "    var maxDiv = n;\n    for (var i = 1; i < n; i++){\n        if\
    \ (n % i == 0){\n            maxDiv = i;\n        }\n    }\n    return maxDiv;\n\
    }\n", "  var largest = -1;\n  for(var i = 1; i <= n; i++){\n    if((largest%i===0)\
    \ && largest>i){\n      largest = i;\n    }\n  }\n  return largest;\n}", "  let\
    \ d = 0;\n  let i = 0;\n  let j = 0;\n  let max_divisor;\n  for(let i = 2; i <\
    \ n; i++){\n    for(let j = i; j < n; j++){\n      if(j % i === 0 && j > max_divisor){\n\
    \        max_divisor = j;\n      }\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ var arr = new Array(n+1);\n  for(var i = 1; i <= n; i++){\n    arr[i] = Math.floor(Math.sqrt(n)/i);\n\
    \  }\n  return arr[Math.ceil(Math.sqrt(n) / arr.length)];\n}\n", "    var factors\
    \ = [];\n    while(n > 0){\n        factors.push(n);\n        n = Math.floor(n\
    \ / 2);\n    }\n    var largest = 1;\n    for(var i = 0; i < factors.length; i++){\n\
    \        if(factors[i] > largest){\n            largest = factors[i];\n      \
    \  }\n    }\n    return largest;\n}", "    var i = 2, max = i, div;\n    while(true){\n\
    \        if (i%2===0){\n            i = i*3+1;\n            continue;\n      \
    \  }\n        div = n/i;\n        if (div > max){\n            max = div;\n  \
    \      }\n        i++;\n    }\n    return max;\n}\n", "\tvar max_divi = 0;\n\t\
    for(var i = 0;i < n;i++){\n\t\tif(n%i == 0){\n\t\t\tvar current_divi = i;\n\t\t\
    \tif(current_divi > max_divi){\n\t\t\t\tmax_divi = current_divi;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn max_divi;\n}\n\n", "\tvar i = 1,\n\t\td = Math.sqrt(n),\n\t\t\
    f = 1;\n\t\n\twhile(i <= 15 && d <= n){\n\t\tif((n % d) === 0){\n\t\t\td = Math.sqrt(n);\n\
    \t\t\tf = f;\n\t\t}\n\t\ti++;\n\t}\n\treturn f;\n}\n<|/ file ext=.js |>", "  var\
    \ i, s = 1;\n  for(i=2; i<=n; ++i){\n    s *= i;\n    s %= n;\n  }\n  return s;\n\
    }\n", "  var max_divisor = 0, divisor, counter = 1;\n  while(counter <= n){\n\
    \    divisor = n * counter;\n    if(divisor > max_divisor) max_divisor = divisor;\n\
    \    counter += 1;\n  }\n  return max_divisor;\n}\n", "\tvar largest_divisor =\
    \ 1;\n\tvar i;\n\tvar factor;\n\tfor(i = 2; i <= n/2; i++){\n\t\tfactor = n/i;\n\
    \t\tif(n % i == 0){\n\t\t\tif(i*factor > largest_divisor){\n\t\t\t\tlargest_divisor\
    \ = i*factor;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest_divisor;\n}\n", "\tvar i,\
    \ max_i = 0;\n\tvar max_d = 0;\n\tfor(i=0;i<=n/2;i++){\n\t\tif(n%i===0){\n\t\t\
    \tif(n%(i+1)===0){\n\t\t\t\tmax_d = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmax_d =\
    \ i;\n\t\t}\n\t}\n\treturn max_d;\n}\n", "\tlet counter = 1;\n\tfor(let i = 2;\
    \ i * i <= n; i++){\n\t\tif(n%i === 0){\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn\
    \ counter;\n}\n\n", "\tvar highest_prime_factor=n;\n\tvar highest_divisor=1;\n\
    \tfor(var i=2; i<=highest_prime_factor; i++){\n\t\tif(n%i==0 && n/i!==0){\n\t\t\
    \thighest_prime_factor=i;\n\t\t\thighest_divisor=n/i;\n\t\t}\n\t}\n\treturn highest_prime_factor+\"\
    .\"+highest_divisor;\n}\n\n", "\tvar largest = n;\n\twhile (n > 1){\n\t\tif (n%2\
    \ == 0){\n\t\t\tlargest = n;\n\t\t}\n\t\tn = n/2;\n\t}\n\treturn largest;\n}\n\
    \n", "  if ( n == 0 ){\n    return 0\n  }\n  if ( n == 1 || n % 2 == 0 ){\n  \
    \  return n\n  }\n  let ld = largest_divisor(n / 2)\n  if ( n % ld == 0 ){\n \
    \   return ld\n  }\n  return n\n}\n", "\tlet numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \treturn numbers.filter((a)=>a%n===0).sort()[0];\n}\n", "  let max_divisor = 1;\n\
    \  for (let i = 1; i <= n; i++){\n    if((n % i) == 0){\n      max_divisor = i;\n\
    \      break;\n    }\n  }\n  return max_divisor;\n}\n", "\tif (n % 2 == 0){\n\t\
    \tn = n/2;\n\t\tif (n % 2 == 0){\n\t\t\tn = n/2;\n\t\t\tif (n % 2 == 0){\n\t\t\
    \t\tn = n/2;\n\t\t\t\tif (n % 2 == 0){\n\t\t\t\t\tn = n/2;\n\t\t\t\t\tif (n %\
    \ 2 == 0){\n\t\t\t\t\t\tn = n/2;\n\t\t\t\t\t\tif (n % 2 == 0){\n\t\t\t\t\t\t\t\
    n = n/2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ n;\n}\n", "  var smaller_divisor = 1;\n  for(var i = 1; i < n; i++){\n    if(n\
    \ % i == 0){\n      smaller_divisor = i;\n      break;\n    }\n  }\n  return smaller_divisor;\n\
    }\n", "    var i,\n        l=Number.MAX_VALUE,\n        d;\n    for (i=2;i<=n;i=i+2){\n\
    \        d = Math.floor(n/i);\n        if (d > l) {\n            l = d;\n    \
    \    }\n    }\n    return l;\n}\n", "\tvar i = 1,\n\t\tl = n - 1,\n\t\tdiv = 1;\n\
    \twhile (i < l){\n\t\tdiv = ++i * 2;\n\t\tif (div > n / 2){\n\t\t\ti = l = 1;\n\
    \t\t}\n\t\telse{\n\t\t\tl = i;\n\t\t}\n\t}\n\treturn div;\n}\n", "\tif(n === 0)\
    \ return 0;\n\tlet d = 2;\n\tlet i = 0;\n\twhile(d < n){\n\t\tif(n % d === 0)\
    \ return d;\n\t\ti++;\n\t\td++;\n\t}\n\treturn i;\n}", "\tvar max_divisor = 1;\n\
    \tvar min_divisor = n;\n\tfor(var i = 2; i <= n; i++){\n\t\tvar current_divisor\
    \ = i; \n\t\tfor(var j = 1; j <= n; j++){\n\t\t\tif(current_divisor % j == 0){\n\
    \t\t\t\tcurrent_divisor = j; \n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(current_divisor\
    \ > max_divisor){\n\t\t\tmax_divisor = current_divisor;\n\t\t}\n\t\telse if(current_divisor\
    \ < min_divisor){\n\t\t\tmin_divisor = current_divisor;\n\t\t}\n\t}\n\treturn\
    \ max_divisor;\n}\n", "    if(n <= 1) return n;\n    var max_divisor = 1;\n  \
    \  var max_div = 1;\n    for(var i = 1; i <= n; i++){\n        if(n % i == 0){\n\
    \            max_div = Math.max(max_div, i);\n            max_divisor = Math.max(max_divisor,\
    \ n/i); \n        }\n    }\n    return max_divisor;\n}\n</script>\n</code>\n<|/\
    \ a tags=primes,javascript,algorithm |>\n<| c |>\nI think you meant \"smaller\
    \ than n\".\n<|/ c |>\n<| c |>\n`Math.sqrt(n)` is just `n/Math.sqrt(n)` and not\
    \ \"smaller than n\".\n<|/ c |>\n<| c |>\nIt should also be noted that this method\
    \ can be improved by making it a generator function, and remembering the largest\
    \ divisor so far.  It also can be improved by using a sieve.\n<|/ c |>\n<| c |>\n\
    - Agreed.  The OP also might want to do some performance analysis to see how much\
    \ improvement the sieve might actually provide.\n<|/ c |>\n<| c |>\n- I wasn't\
    \ suggesting that the sieve is the right approach or that it would be the best\
    \ approach, I'm just giving an idea of how to get started.\n<|/ c |>\n<| a tags=primes,javascript,algorithm\
    \ |>\nYou can do as follows\n<code>", "\tlet largest_divisor = 1,\n\t\tlargest_divisor_n\
    \ = 1;\n\t\n\twhile (n > largest_divisor_n){\n\t\tlargest_divisor_n = largest_divisor_n\
    \ * largest_divisor;\n\t\tlargest_divisor = largest_divisor + 1;\n\t}\n\treturn\
    \ largest_divisor;\n}\n", "  if(n === 0){\n    return n;\n  }\n  if(n % 2 ===\
    \ 0){\n    return 2;\n  }\n  var max_factor = 0;\n  var min_factor = -1;\n  var\
    \ i = 1;\n  var j = n;\n  while(j > 1){\n    var c = j % i;\n    if(c === 0){\n\
    \      continue;\n    }\n    if(c > 0){\n      max_factor = c;\n      min_factor\
    \ = -c;\n      break;\n    }\n    i = c;\n  }\n  return j;\n}\n", "    let divisors\
    \ = []\n\n    for(let i = 1; i < n; i++){\n        if(n % i == 0){\n         \
    \   divisors.push(i)\n        }\n    }\n\n    let largest = divisors[divisors.length\
    \ - 1]\n    \n    if(largest * 2 >= n){\n        return largest\n    }\n    return\
    \ n\n}\n    ", "    let divisor = 1;\n    while(divisor <= n){\n        if(n %\
    \ divisor == 0){\n            divisor++;\n        }\n        else{\n         \
    \   break;\n        }\n    }\n    return divisor;\n}\n", "\tvar i, div = 1, res\
    \ = 0;\n\tfor(i = 1; i <= n; i++){\n\t\tif(n % i == 0){\n\t\t\tres = i;\n\t\t\t\
    break;\n\t\t}\n\t\tdiv++;\n\t}\n\treturn div;\n}\n", "\tif(n%1===0){\n\t\treturn\
    \ 0;\n\t}\n\tif(n%2===0){\n\t\treturn 1;\n\t}\n\tvar max_div = 2, max_div_val\
    \ = 2, div = 1;\n\twhile(max_div<n){\n\t\tif( (n%div)===0){\n\t\t\tmax_div_val\
    \ = max_div;\n\t\t\tmax_div = div;\n\t\t}\n\t\tdiv++;\n\t}\n\tmax_div--;\n\treturn\
    \ max_div;\n}\n", "  for(var i = 2; i < Math.sqrt(n); i++){\n    if(n % i == 0)\
    \ return i\n  }\n  return n\n}\n", "  var max_divisor = BigInt(1);\n  for(var\
    \ i = 1; i <= n; i++){\n    if(n % i == 0){\n      max_divisor = i;\n    }\n \
    \ }\n  return max_divisor;\n}\n", "\tif(n<=1){\n\t\treturn 1;\n\t}\n\tvar result=1;\n\
    \tfor(let i=1;i<=n;i++){\n\t\tif(n%i===0){\n\t\t\tresult=Math.max(result,i);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  var i = n,\n      d = 1,\n      m = n,\n\
    \      b;\n  while(i <= n){\n    do i++;\n    while( n % i == 0 ){\n      m =\
    \ i;\n      d = 1;\n    }\n    if(m > n){\n      break;\n    }\n    d *= i;\n\
    \  }\n  return d;\n}", "  if(n == 0 || n == 1){\n    return 1;\n  }\n\n  let divisor\
    \ = 1;\n  for(let i = 2; i <= n; i++){\n    if(n%i == 0){\n      divisor = i;\n\
    \      break;\n    }\n  }\n  return divisor;\n}\n", "\tif (n < 2){\n\t\tconsole.log(\"\
    Not a number that divides evenly\");\n\t\treturn;\n\t}\n\tfor(var i=3;i<=n;i++)\n\
    \t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn 1;\n}\n", "  let i = 1;\n  while(i\
    \ <= n){\n    if(n % i == 0){\n      n /= i;\n      i++;\n    }else{\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "  let max_divisor = 1;\n  let max_divisor_ind\
    \ = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_ind = 1;\n      }\n  \
    \    else {\n        max_divisor_ind += 1;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let m = 1, d = n\n  while(n > 1){\n    if(n % d == 0){\n      m = d\n\
    \    }else{\n      n = n / d\n    }\n    d = n\n  }\n  return m\n}\n", "  let\
    \ divisors=[]\n  for(let i=2; i<=n; i++){\n    if (n%i == 0) divisors.push(i)\n\
    \  }\n  return Math.max(...divisors)\n}\n", "  var max_div = 0;\n  for(var i =\
    \ 0; i < Math.floor(n/1); i++){\n    max_div = max_div * 1 + i;\n  }\n  if(max_div\
    \ > n){\n    max_div = n;\n  }\n  return max_div;\n}\n</code>\n<|/ a tags=algorithm\
    \ |>\n<| c |>\nThe question says _\"no brute force\"_. No mention of brute forcing\
    \ or testing all numbers. Why are you suggesting brute force when there is no\
    \ such mention of brute force in question?\n<|/ c |>\n<| c |>\n: I guess I meant\
    \ that the question doesn't mention brute force anywhere.\n<|/ c |>\n<| c |>\n\
    Yeah, I guess. But then your solution does use brute force.\n<|/ c |>\n<| a |>\n\
    Here is a solution I wrote in Ruby:\n<code>\ndef largest_divisor(n)\n  x = 1\n\
    \  while x <= n\n    div = x.quot(n)\n    next unless div.is_a? Integer\n    return\
    \ x if x > n\n    x += 1\n  end\n  1\nend\n</code>\n<|/ a tags=algorithm dscore=4\
    \ |>\n<| a tags=algorithm |>\nHere is a simple solution in Python. \n<code>\n\
    import math\ndef largest_divisor(n):\n    factors = []\n    while n != 1:\n  \
    \      factors.append(math.floor(n / 2))\n        n = math.floor(n / 2)\n    largest_divisor\
    \ = factors[0]\n    for i in range(len(factors) - 1):\n        if factors[i] >\
    \ largest_divisor:\n            largest_divisor = factors[i]\n    return largest_divisor\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=algorithm |>\nHere's my solution in C++:\n\
    <code>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main()\n\
    {\n    double largest_divisor(double n){\n        double largest_divisor;\n  \
    \      double current_divisor;\n        current_divisor = sqrt(n);\n        if\
    \ (current_divisor > n){\n            return 0;\n        }\n        while (current_divisor\
    \ != 1){\n            if (current_divisor > largest_divisor){\n              \
    \  largest_divisor = current_divisor;\n            }\n            current_divisor\
    \ /= 2;\n        }\n        return largest_divisor;\n    }\n    cout << largest_divisor(15);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis can be optimized. Instead of using\
    \ sqrt we can use the fact that every number has sqrt(2) divisors, which is sqrt(n)/2.\n\
    <|/", "    for(var i = 1;i <= n;i++)\n        for(var j = 1;j < n;j++)\n     \
    \       if(n % i == 0)\n                return i;\n    return n;\n}", "  if(n\
    \ > 0){\n      var max_divisor = 1;\n      var max_divisor_init = 1;\n      for(var\
    \ i = 2; i < n; ++i){\n        var divisor = n / i;\n        if(divisor > max_divisor){\n\
    \          max_divisor = divisor;\n        }\n        if(max_divisor_init){\n\
    \          if(max_divisor > i){\n            max_divisor = i;\n          }\n \
    \       }\n        max_divisor_init = true;\n      }\n      return max_divisor;\n\
    \  }\n  return 1;\n}\n", "  var counter = 0;\n  while (n > 1){\n    if (n % 2\
    \ == 0) counter++;\n    n--;\n  }\n  return counter;\n}\n", "  for(let i = 2;\
    \ i<=Math.floor(Math.sqrt(n)); i++){\n    if(n % i === 0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n</cell>\n<cell>", "\tvar i = n, divisor = 1;\n\t\
    while(i > 1) {\n\t\ti = i/2; divisor++;\n\t}\n\treturn divisor;\n}", "    var\
    \ i = Math.ceil(n/2);\n    while (i != Math.floor(i) && i > 1){\n        i = Math.floor(i/2);\n\
    \    }\n    return i;\n}\n", "\tvar n = n|0;\n\twhile (n%2 == 0) n/=2;\n\twhile\
    \ (n%3 == 0) n/=3;\n\twhile (n%5 == 0) n/=5;\n\twhile (n%7 == 0) n/=7;\n\twhile\
    \ (n%11 == 0) n/=11;\n\twhile (n%13 == 0) n/=13;\n\twhile (n%17 == 0) n/=17;\n\
    \twhile (n%19 == 0) n/=19;\n\twhile (n%31 == 0) n/=31;\n\twhile (n%37 == 0) n/=37;\n\
    \twhile (n%41 == 0) n/=41;\n\twhile (n%43 == 0) n/=43;\n\twhile (n%47 == 0) n/=47;\n\
    \twhile (n%53 == 0) n/=53;\n\twhile (n%59 == 0) n/=59;\n\twhile (n%61 == 0) n/=61;\n\
    \twhile (n%67 == 0) n/=67;\n\twhile (n%71 == 0) n/=71;\n\twhile (n%73 == 0) n/=73;\n\
    \twhile (n%79 == 0) n/=79;\n\twhile (n%81 == 0) n/=81;\n\twhile (n%87 == 0) n/=87;\n\
    \twhile (n%97 == 0) n/=97;\n\twhile (n%99 == 0) n/=99;\n\twhile (n%103== 0) n/=103;\n\
    \twhile (n%107 == 0) n/=107;\n\twhile (n%109 == 0) n/=109;\n\twhile (n%113 ==\
    \ 0) n/=113;\n\twhile (n%117 == 0) n/=117;\n\twhile (n%121 == 0) n/=121;\n\twhile\
    \ (n%123 == 0) n/=123;\n\twhile (n%127 == 0) n/=127;\n\treturn n;\n}\n", "\treturn\
    \ Math.floor(Math.sqrt(n));\n}\n", "  var m = 1, \n  i;\n\n  for (i = 2; i <=\
    \ n/i; i++){\n    if (n % i == 0){\n      m = i;\n      break;\n    }\n  }\n \
    \ return m;\n}", "  return Math.max(\n    largest_divisor(n/2),\n    largest_divisor(n/3),\n\
    \    largest_divisor(n/5),\n    largest_divisor(n/7),\n    largest_divisor(n/9)\n\
    \  )\n}\n", "    if(n<=1){\n        return 1;\n    }\n    var i = Math.floor(Math.sqrt(n));\n\
    \    var j;\n    for(j=1; j<i; j++){\n        if(n%j===0){\n            break;\n\
    \        }\n    }\n    return j;\n}\n\n", "  let i = 1;\n  while(n > i){\n   \
    \ i += 2;\n  }\n  return i - 1;\n}\n", "\tvar x = Math.sqrt(n);\n\tvar y = (n\
    \ + 1) * ((x + 1)/ 2);\n\tvar z = y * ((n + 1) * ((x + 1)/ 4));\n\t\n\treturn\
    \ x < y ? x : z;\n}\n", "  var i = n\n  while (i > 1){\n    if (i % 2 === 0){\n\
    \      i--;\n      break;\n    }\n    i--;\n  }\n  return i\n}\n", "  if(n < 2)\
    \ return 1\n  var max_factor\n  if((n % 2 === 0) && (n > 2)) max_factor = largest_divisor(n/2)\n\
    \  else if((n % 2 === 1) && (n > 1)) max_factor = largest_divisor(n/3)\n  else\
    \ if((n % 3 === 0) && (n > 3)) max_factor = largest_divisor(n/3)\n  else if((n\
    \ % 3 === 1) && (n > 2)) max_factor = largest_divisor(n/5)\n  else if((n % 5 ===\
    \ 0) && (n > 5)) max_factor = largest_divisor(n/5)\n  else if((n % 5 === 1) &&\
    \ (n > 4)) max_factor = largest_divisor(n/7)\n  else if((n % 7 === 0) && (n >\
    \ 7)) max_factor = largest_divisor(n/7)\n  else if((n % 7 === 1) && (n > 6)) max_factor\
    \ = largest_divisor(n/11)\n  else if((n % 11 === 0) && (n > 11)) max_factor =\
    \ largest_divisor(n/11)\n  else if((n % 11 === 1) && (n > 10)) max_factor = largest_divisor(n/13)\n\
    \  else if((n % 13 === 0) && (n > 13)) max_factor = largest_divisor(n/13)\n  else\
    \ if((n % 13 === 1) && (n > 12)) max_factor = largest_divisor(n/17)\n  else if((n\
    \ % 17 === 0) && (n > 17)) max_factor = largest_divisor(n/17)\n  else if((n %\
    \ 17 === 1) && (n > 16)) max_factor = largest_divisor(n/21)\n  else if((n % 21)\
    \ === 0) && (n > 16)) max_factor = largest_divisor(n/21)\n  else if((n % 21) ===\
    \ 1) && (n > 15)) max_factor = largest_divisor(n/23)\n  else max_factor = largest_divisor(n/2)\n\
    \  return max_factor\n}\n", "  if(n===0) return 0;\n  var d=0, i=0;\n  while(++i\
    \ < n){\n    while(n % ++d && n !== 0);\n  }\n  return d+1;\n}", "    var max_div\
    \ = 0;\n    for (var i = n; i > 1; i--){\n        var div = i / max_div;\n   \
    \     if (i % max_div == 0){\n            return div;\n        } else {\n    \
    \        if (max_div > div){\n                max_div = div;\n            }\n\
    \        }\n    }\n    return max_div;\n}\n", "\tvar d = 1;\n\tfor(var i = 2;\
    \ i <= n; i++){\n\t\tif( n % i == 0 ){\n\t\t\td = i;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn d;\n}", "\tif(n == 0)\n\t\treturn 0;\n\tvar maxDiv = 1e9, maxPrime\
    \ = 3, candidate = n, divisor = 2, isPrime = true;\n\twhile(true){\n\t\tif(isPrime){\n\
    \t\t\tif(n > candidate){\n\t\t\t\tdivisor = candidate - 1;\n\t\t\t\tisPrime =\
    \ false;\n\t\t\t}else{\n\t\t\t\tif(n >= candidate)\n\t\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif(divisor > maxDiv)\n\t\t\tmaxDiv = divisor;\n\t\tcandidate /= 2;\n\
    \t\tdivisor += 2;\n\t\tif(candidate > maxPrime)\n\t\t\tmaxPrime = candidate;\n\
    \t}\n\treturn maxPrime;\n}\n\n", "\tvar n = Math.ceil(n);\n\tfor(var d = 2; d\
    \ < n; d++)\n\t\tif(n % d == 0)\n\t\t\treturn d;\n\treturn n;\n}\n", "  let largest\
    \ = Math.pow(n, 1/3);\n  let divisor = 1;\n  while (divisor < n){\n    if (largest%divisor){\n\
    \      divisor++;\n    } else {\n      largest = divisor;\n      divisor = 1;\n\
    \    }\n  }\n  return largest;\n}\n", "    var divisor = 1,\n        d;\n    for(d\
    \ = 2; d <= Math.sqrt(n); d++){\n        if((n % d) === 0){\n            divisor\
    \ = d;\n            break;\n        }\n    }\n    return divisor;\n}\n\nmodule.exports\
    \ = largest_divisor;\n\n},{}],31:[function(require,module,exports){\nvar factorial\
    \ = require('./factorial');\nvar combinations = require('./combinations');\nvar\
    \ is_prime = require('./is_prime');\nvar is_integer = require('./is_integer');\n\
    var is_square = require('./is_square');\nvar is_power_of_2 = require('./is_power_of_2');\n\
    var is_power_of_3 = require('./is_power_of_3');\nvar is_power_of_5 = require('./is_power_of_5');\n\
    var is_power_of_6 = require('./is_power_of_6');\nvar is_prime_fast = require('./is_prime_fast');\n\
    \nmodule.exports = {\n    factorial: factorial,\n    combinations: combinations,\n\
    \    is_prime: is_prime,\n    is_integer: is_integer,\n    is_square: is_square,\n\
    \    is_power_of_2: is_power_of_2,\n    is_power_of_3: is_power_of_3,\n    is_power_of_5:\
    \ is_power_of_5,\n    is_power_of_6: is_power_of_6,\n    is_prime_fast: is_prime_fast\n\
    };\n\n},{\"./combinations\":28,\"./is_integer\":29,\"./is_prime\":30,\"./is_prime_fast\"\
    :31,\"./is_power_of_2\":32,\"./is_power_of_3\":33,\"./is_power_of_5\":34,\"./is_power_of_6\"\
    :35,\"./is_square\":36}],32:[function(require,module,exports){\nvar sqrt_n = require('./sqrt_n');\n",
  "\tif(n==0)return 0;\n\tfor(var i=2;i*i<n;i++)\n\t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\
    \treturn i;\n\t\t}\n\t}\n\treturn n;\n}", "\tfor(var i=2; i<=n; i*=2){\n\t\tif(n%i==0)return\
    \ i;\n\t}\n\treturn n;\n}", "  if (n < 1) return 1;\n  var q = 0;\n  var r = n;\n\
    \  while (r !== 0) {\n    q = r / 2;\n    r = q % n;\n  }\n  return q;\n}\n",
  "    var divs = [1]\n    for(var i = 1; i<=n; i++){\n        var k = Math.round(i/divs.length)\n\
    \        if(k*k <= n){\n            divs.push(k)\n            n = n / k\n    \
    \    }else{\n            break\n        }\n    }\n    return divs[divs.length-1]\n\
    }\n</code>\n<|/ a tags=javascript,numbers |>\n<| a |>\nI made a very simple javascript\
    \ function, that returns a list of prime numbers up to a given number. Hope it\
    \ helps.\n<code>", "\tif(n < 2) return 2;\n\t\n\tvar max_divisor = n;\n\t\n\t\
    for(var i = 3; i < n; i += 2){\n\t\tif(n%i == 0){\n\t\t\tmax_divisor = i;\n\t\t\
    }\n\t}\n\treturn max_divisor;\n}\n\n", "\tlet max_divisible = 0;\n\tlet max_divisor\
    \ = 0;\n\tfor(const val of primes){\n\t\tif(n%val==0){\n\t\t\tmax_divisible =\
    \ val;\n\t\t\tmax_divisor = val;\n\t\t}\n\t\telse if(n/val >= val){\n\t\t\tmax_divisible\
    \ = val;\n\t\t\tmax_divisor = val/val;\n\t\t}\n\t\telse{\n\t\t\tmax_divisible\
    \ = val/val;\n\t\t\tmax_divisor = val;\n\t\t}\n\t}\n\treturn max_divisible * max_divisor;\n\
    }\n", "  var i = 1;\n  while(true){\n    if(n%i == 0){\n      return i;\n    }\n\
    \    i = i*10;\n  }\n}\n", "\tvar max_divisor = n;\n\tvar max_divisor_number =\
    \ n;\n\tfor (var i = 2; i <= max_divisor; i += 2){\n\t\tif (n % i == 0){\n\t\t\
    \tmax_divisor_number = i;\n\t\t\tmax_divisor = i;\n\t\t}\n\t}\n\treturn max_divisor;\n\
    }\n", "\tvar largest_divisor = 1;\n\tfor (var x = 2; x < n; x++)\n\t\tif (n %\
    \ x == 0){\n\t\t\tif (x >= largest_divisor)\n\t\t\t\tlargest_divisor = x;\n\t\t\
    }\n\treturn largest_divisor;\n}\n", "    var i = 2;\n    var maxDivisor = 1;\n\
    \n    while (i * i <= n) {\n        i = i + 1;\n        maxDivisor = maxDivisor\
    \ + 1;\n    }\n\n    return maxDivisor;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nThe solution provided by jonathanhui is great and works well in most cases.\
    \  However in some cases it will not work correctly for large numbers (i.e. BigInteger\
    \ numbers).  For example for n = 15 the largest divisor is 3.  But for n = 25\
    \ the largest divisor is 5.\nThe largest divisor is 5 because 5 is the largest\
    \ integer that when divided by 2, will equal n.\nThis causes the function to return\
    \ 1 instead of 5.\nThe following code shows the correct solution for both small\
    \ and large numbers.\n<code>", "    var factor = 1;\n    var limit = n/2;\n  \
    \  while(limit > 1){\n        limit /= 2;\n        factor += limit;\n    }\n \
    \   return factor;\n}\n</code></pre>\n        </section>\n        <section class=\"\
    slide\" data-background=\"images/bg.png\" data-background-size=\"100%\">\n   \
    \         <h2>Exercise</h2>\n            <p>Work out the number of divisors of\
    \ a given number using recursion.</p>\n        </section>\n        <section class=\"\
    slide\">\n            <h2>Exercise</h2>\n            <p>Extend the previous function\
    \ so that it returns the largest divisor of n that divides n evenly.</p>\n   \
    \     </section>\n        <section class=\"slide\">\n            <h2>Exercise</h2>\n\
    \            <p>For n = 10, what is the smallest positive divisor of n that divides\
    \ 10 evenly?</p>\n        </section>\n        <section class=\"slide\" data-background=\"\
    images/bg.png\" data-background-size=\"100%\">\n            <h2>Exercise</h2>\n\
    \            <p>For n = 100, what is the smallest positive divisor of n that divides\
    \ 100 evenly?</p>\n        </section>\n        <section class=\"slide\">\n   \
    \         <h2>Exercise</h2>\n            <p>For n = 200, what is the smallest\
    \ positive divisor of n that divides 200 evenly?</p>\n        </section>\n   \
    \     <section class=\"slide\">\n            <h2>Exercise</h2>\n            <p>For\
    \ n = 300, what is the smallest positive divisor of n that divides 300 evenly?</p>\n\
    \        </section>\n        <section class=\"slide\">\n            <h2>Exercise</h2>\n\
    \            <p>For n = 600, what is the smallest positive divisor of n that divides\
    \ 600 evenly?</p>\n        </section>\n        <section class=\"slide\">\n   \
    \         <h2>Exercise</h2>\n            <p>For n = 700, what is the smallest\
    \ positive divisor of n that divides 700 evenly?</p>\n        </section>\n   \
    \     <section class=\"slide\">\n            <h2>Exercise</h2>\n            <p>For\
    \ n = 800, what is the smallest positive divisor of n that divides 800 evenly?</p>\n\
    \        </section>\n        <section class=\"slide\">\n            <h2>Exercise</h2>\n\
    \            <p>For n = 900, what is the smallest positive divisor of n that divides\
    \ 900 evenly?</p>\n        </section>\n        <section class=\"slide\">\n   \
    \         <h2>Exercise</h2>\n            <p>For n = 100, what is the smallest\
    \ positive divisor of n that divides 100 evenly (ignore remainder)?</p>\n    \
    \    </section>\n        <section class=\"slide\">\n            <h2>Exercise</h2>\n\
    \            <p>For n = 200, what is the smallest positive divisor of n that divides\
    \ 200 evenly (ignore remain", "    if(n < 2)\n        return 2;\n    return Math.ceil(Math.sqrt(n));\n\
    }", "    \n    // the largest divisor of 15 is 5, as 15 = 2 x 5 \n    \n    if(n%2\
    \ == 0) return 1;\n    \n    for(let i = 3; i <= n/2;i++){\n        if(n%i ==\
    \ 0){\n            return i;\n        }\n    }\n    \n    return n;\n}\n", " \
    \   let i=1;\n    while (n > i){\n        if (n % i == 0){\n            n = i\
    \ \n        }\n        i++;\n    }\n    return i;\n}\n</code>\nThe complexity\
    \ here is O(lg(n))\n<|/ a dscore=0 |>\n<| a |>\n<code>\nvar largest_divisor =\
    \ function (num) {\n  var numDivs = [];\n  for (var i = 0; i <= num; i++) {\n\
    \    if (num % i == 0) {\n      numDivs.push(i);\n    }\n  }\n  numDivs.sort((a,b)\
    \ => b-a);\n  return numDivs[numDivs.length-1];\n}\n", "    if(n<=1){\n      \
    \  return 1;\n    }\n    if(n%2===0){\n        return 2;\n    }\n    let largest\
    \ = 2*largest_divisor(n/2);\n    for(let i = 3;i<=largest;i+=2){\n        if(n\
    \ % i === 0){\n            largest = i;\n            break;\n        }\n    }\n\
    \    return largest;\n}\n", "  if(n===0)\n    return 0;\n  var i=10;\n  var j=Math.ceil(Math.log(n)/Math.log(j));\n\
    \  if(n%j===0){\n    return j;\n  }\n  while(j>i){\n    if(j%2){\n      n=n*j;\n\
    \    }\n    j=j>>1;\n  }\n  return j;\n}\n\n", "\tlet max_div = n;\n\tfor(let\
    \ i = 2;i <= Math.floor(Math.sqrt(n));i++){\n\t\tif(n % i === 0){\n\t\t\tif(max_div\
    \ / i < i){\n\t\t\t\tmax_div = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_div;\n}",
  "  var max_divisor = Math.floor(Math.sqrt(n));\n  \n  while(n%max_divisor === 0){\n\
    \    max_divisor++;\n  }\n  return max_divisor;\n}\n", "\tvar max_val = Math.floor(Math.sqrt(n));\n\
    \tvar max_factor = 0;\n\t\n\tfor(var i = 1; i <= max_val; i++){\n\t\tvar divisor\
    \ = parseInt(n / i);\n\t\tif(divisor > max_factor){\n\t\t\tmax_factor = divisor;\n\
    \t\t}\n\t}\n\treturn max_factor;\n}\n", "  if(n%2===0){\n    return n\n  }\n \
    \ for(var i=3; i<=Math.floor(Math.sqrt(n)); i++){\n    if(n%(i+2)===0){\n    \
    \  return i\n    }\n  }\n}", "\tvar divisor = 2;\n\tfor(var i = 3;i < n;i+=2){\n\
    \t\tif(n % i == 0){\n\t\t\tdivisor = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn divisor;\n\
    }\n", "    var i,\n        div,\n        largest_divisor = 1;\n    for(i=1;i<=n;i++){\n\
    \        div = n/i;\n        if(div%2 === 0){\n            if(n%i===0){\n    \
    \            largest_divisor = i;\n            }\n        }\n    }\n    return\
    \ largest_divisor;\n}\n</script>\n</code>\n<|/ a |>\n<| c |>\n`largest_divisor`\
    \ is a terrible name for a variable. `i` would be better\n<|/ c |>\n<| c |>\n\
    How would you suggest I call this function to get the highest number divisible\
    \ by `n` ?\n<|/ c |>\n<| c |>\n, why is it a terrible name for a variable?\n<|/\
    \ c |>\n<| c |>\nbecause it's not one thing - it's two. `i` is the counter variable\
    \ - `n` is the divisor. `largestDivisor(n)` should be something like `largestDivisor(n)`\
    \ - `largestDivisor(n)` returns `largest_divisor(n)`\n<|/ c |>\n<| c |>\nYou have\
    \ a point, I've changed it now.\n<|/ c |>\n<| a tags=javascript |>\nMy solution\
    \ is simple, fast and concise. I think it could be even more optimized, but I\
    \ have no clue how to do it in Javascript.\n<code>\nvar largestDivisor = function(n)\
    \ {\n    var result = 0;\n    var max = 0;\n    while(n > 1) {\n        if (n\
    \ % 2 === 0) {\n            max = n\n        } else {\n            n = n/2;\n\
    \        }\n    }\n    while (n % 2 === 0) {\n        result = n;\n        n =\
    \ n-1;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYes,\
    \ that's much better than my solution. Thanks.\n<|/ c |>\n<| c |>\nThat will loop\
    \ forever. `largestDivisor(100000000)` will take forever.\n<|/ c |>\n<| c |>\n\
    Yeah, I realized that shortly after I posted this. But it's ok, I'll try to improve\
    \ my answer as soon as possible.\n<|/ c |>\n<| c |>\n, It works now. I just changed\
    \ while loops so they would stop when they had reached n.\n<|/ c |>\n<| c |>\n\
    No problem - I'm glad I could help.\n<|/ c |>\n<| a dscore=0 |>\nHere's my solution\
    \ using functional programming style:\n<code>\nvar largestDivisor = function (n)\
    \ {\n    return Math.max(Math.floor(n", "  var max_divisor = 1\n  for(var i =\
    \ 2; i <= Math.sqrt(n); ++i){\n    if(n%i==0){\n      max_divisor = i\n    }\n\
    \  }\n  return max_divisor\n}", "    var i, result, largest_i\n    for(i = 1;\
    \ i<=n; i++){\n        result = 0\n        largest_i = i\n        for(var j =\
    \ 2; j*j <= i; j++){\n            if(i % j === 0) result = j\n        }\n    \
    \    if(result === i){\n            largest_i = i\n        }\n        if(largest_i\
    \ !== i){\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\n", "\tvar min_divisor = 2; //Make sure n is greater than 2\n\tfor(var i =\
    \ 3; i <= Math.sqrt(n); i = i+2){\n\t\tif(n % i == 0){\n\t\t\tif(i == min_divisor){\n\
    \t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tmin_divisor = i;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return min_divisor;\n}\n", "    var i = Math.ceil(Math.log(n) / Math.LN2);\n \
    \   if(n == 1) return 1;\n    if(n % i == 0) return n; //n is divisible by i\n\
    \    while(n % i == 0) n/=i;\n    return n;\n}\n", "    var i = 1, j = 1;\n  \
    \  var t = n;\n    while(t > i){\n        j++;\n        t /= i;\n    }\n    return\
    \ i;\n}\n", "  var divs = [0];\n  for(var i = 1; i < n; i++){\n    if(n % i ==\
    \ 0){\n      divs.push(i);\n      n /= i;\n    }\n  }\n  return Math.max.apply(null,\
    \ divs);\n}\n", "  var i, r = -1\n  for(i=1;i<=n;i++){\n    if(n%i===0 && i!==0){\n\
    \      if(r===-1 || r>i){\n        r=i\n      }\n    }\n  }\n  return r+1\n}\n",
  "\tvar i,\n\t\td = 1,\n\t\tm = Math.sqrt(n);\n\tfor(i=2;i<=m;i++){\n\t\tif(n%d==0){\n\
    \t\t\td = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn d;\n}\n", "  var i = 1;\n  if((n\
    \ % 2) == 0){\n    while(true){\n      i += 1;\n      if(n % i == 0){\n      \
    \  return i;\n      }\n      if(i > n){\n        return n;\n      }\n    }\n \
    \ } else {\n    while(true){\n      i += 2;\n      if(n % i == 0){\n        return\
    \ i;\n      }\n      if(i > n){\n        return n;\n      }\n    }\n  }\n}", " \
    \   var result = 0;\n    for(var i = 1; i <= n; i++)\n        if(n % i == 0) result\
    \ = i;\n    return result;\n}\n", "    var i, d=4, ii;\n    var dmp1 = function(){\n\
    \      if(--d>0){\n        ii=2;\n      }\n      else{\n        i=ii;\n      \
    \  while(true){\n          i*=2;\n          ii++;\n          if(i>=n){\n     \
    \       break;\n          }\n        }\n      }\n    };\n    dmp1();\n    return\
    \ i;\n}\n</code></pre>\n<h2>Test</h2>\n<pre><code class=\"language-js\">/*\n *\
    \ Test if an n is a perfect square\n * \n * Inverse of square_root\n * https://stackoverflow.com/questions/7615215/inverse-of-2s-square-root-in-python\n\
    \ *\n * return boolean if n is perfect square\n */", "  if(n<1) return 1;\n  if(n<2)\
    \ return 2;\n  if(n<3) return 3;\n  if(n<4) return 4;\n  if(n<5) return 5;\n \
    \ if(n<6) return 6;\n  if(n<7) return 7;\n  if(n<8) return 8;\n  if(n<9) return\
    \ 9;\n  if(n<10) return 10;\n  if(n<11) return 11;\n  if(n<12) return 12;\n  if(n<13)\
    \ return 13;\n  if(n<14) return 14;\n  if(n<15) return 15;\n  if(n<16) return\
    \ 16;\n  if(n<17) return 17;\n  if(n<18) return 18;\n  if(n<19) return 19;\n \
    \ if(n<20) return 20;\n  if(n<21) return 21;\n  if(n<22) return 22;\n  if(n<23)\
    \ return 23;\n  if(n<24) return 24;\n  if(n<25) return 25;\n  if(n<26) return\
    \ 26;\n  if(n<27) return 27;\n  if(n<28) return 28;\n  if(n<29) return 29;\n \
    \ if(n<30) return 30;\n  if(n<31) return 31;\n  if(n<32) return 32;\n  if(n<33)\
    \ return 33;\n  if(n<34) return 34;\n  if(n<35) return 35;\n  if(n<36) return\
    \ 36;\n  if(n<37) return 37;\n  if(n<38) return 38;\n  if(n<39) return 39;\n \
    \ if(n<40) return 40;\n  if(n<41) return 41;\n  if(n<42) return 42;\n  if(n<43)\
    \ return 43;\n  if(n<44) return 44;\n  if(n<45) return 45;\n  if(n<46) return\
    \ 46;\n  if(n<47) return 47;\n  if(n<48) return 48;\n  if(n<49) return 49;\n \
    \ if(n<50) return 50;\n  if(n<51) return 51;\n  if(n<52) return 52;\n  if(n<53)\
    \ return 53;\n  if(n<54) return 54;\n  if(n<55) return 55;\n  if(n<56) return\
    \ 56;\n  if(n<57) return 57;\n  if(n<58) return 58;\n  if(n<59) return ", "  if(n<1){\n\
    \    return n\n  }\n  let largest = n //Start with largest divisor\n  let factor\
    \ = 1\n  let x = n\n  while(x > 1) {\n    factor = factor*x\n    x = x/2\n  }\n\
    \  while (factor <= largest) {\n    x = x/factor\n    largest = factor\n  }\n\
    \  return largest\n}\n", "\tfor(var i=1;i<=n;i++){\n\t\tif(n%i===0){\n\t\t\treturn\
    \ i;\n\t\t}\n\t}\n\treturn n; //if n is prime return it directly\n}", "  var result,\n\
    \      x = Math.pow(10, Math.floor(Math.log(n) / Math.LN10)),\n      y = 1;\n\n\
    \  while ( y++ < x ){\n    var d = x / y;\n    if((n % d) == 0) result = d;\n\
    \  }\n  return result;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,performance,javascript,number-theory\
    \ |>\n<| c |>\nThis answer is incorrect and will miss the right answer on certain\
    \ inputs. Please see my answer for details.\n<|/ c |>\n<| c |>\nYour method will\
    \ miss correct solutions. For example, on input `8`, your method returns 3, while\
    \ the correct answer is 8.\n<|/ c |>\n<| c |>\n: I have read this question twice\
    \ and I only see a return 3 as possible correct answer. Can you give me an example\
    \ where it gets wrong?\n<|/ c |>\n<| c |>\nThe only correct input to the method\
    \ you gave is 8. Your method will return the wrong answer, which would be 3 in\
    \ this case. Try running your method on `0`, `1` and `15`, it will return `3`\
    \ and not `8`.\n<|/ c |>\n<| c |>\n: Yes, my method will return the wrong answer,\
    \ but I haven't seen such wrong answers on my tests. My test method has only one\
    \ test case as `8`, but it returns wrong answer as `3` instead of `8`. I haven't\
    \ read your answer at all, but I agree with you that there can be a problem of\
    \ reading the question. Do you know where I could read such problems so that I\
    \ can get to the point of finding errors on my own test cases?\n<|/ c |>\n<| a\
    \ dscore=0 tags=algorithm,performance,javascript,number-theory |>\nI wanted to\
    \ post a more detailed answer, because there might be a case where a correct answer\
    \ is given even though it is not the right answer.  That is why I posted this\
    \ answer as opposed to simply commenting on another answer.\nThe problem is that,\
    \ in some cases, there are two even divisors (such as 8 and 14) but neither is\
    \ prime.  Therefore, the correct answer can only be found via trial division and\
    \ is a prime number.  In other cases, both are prime, and you can therefore compute\
    \ an exact answer.  In other cases, they are both not prime, and an exact answer\
    \ cannot be found.\nThe following Python program is intended to show how to compute\
    \ a correct answer when one exists, while leaving out incorrect answers that are\
    \ not prime.  The input to the program is a list of positive integers (as strings).\n\
    <code>\ndef isPrime(n):", "  var i,\n      divisors = [],\n      nums = [];\n\n\
    \  for(i=0;i<=Math.floor(n/2); i++){\n    nums.push(i);\n  }\n  nums.push(1);\n\
    \n  for(var j=2; j<=n; j++){\n    for(var k=0; k<nums.length; k++){\n      if(nums[k]%j\
    \ === 0){\n        nums.splice(k,1);\n      }\n    }\n  }\n\n  for(k=0;k<nums.length;k++){\n\
    \    if(nums[k] === n){\n      divisors.push(nums[k]);\n    }\n  }\n\n  return\
    \ divisors[divisors.length-1];\n}\n</textarea>\n<style>\n.CodeMirror-code pre\
    \ {\n  line-height: 1.5em;\n}\n</style>\n\n<script id=\"codemirror-javascript\"\
    >\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"codemirror-javascript\"\
    ), {\n  lineNumbers: true,\n  matchBrackets: true,\n  mode: \"javascript\"\n});\n\
    </script>\n\n<script id=\"codemirror-javascript-mutable\">\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"\
    codemirror-javascript-mutable\"), {\n  lineNumbers: true,\n  matchBrackets: true,\n\
    \  mode: \"javascript\",\n  readOnly: true\n});\n</script>\n\n<script id=\"codemirror-javascript-passive\"\
    >\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"codemirror-javascript-passive\"\
    ), {\n  lineNumbers: true,\n  matchBrackets: true,\n  mode: \"javascript\",\n\
    \  readOnly: true,\n  passive: true\n});\n</script>\n\n<script id=\"codemirror-xml\"\
    >", "    var q=0;\n    while(true){\n        var i=1;\n        for(var c=1;c<n+q;c++){\n\
    \            if(n % c===0){\n                i=c+1;\n                break;\n\
    \            }\n        }\n        if(i===n+q){\n            break;\n        }\n\
    \        q=i;\n    }\n    return q;\n}\n</code>\nThe function largest_divisor\
    \ above is just used to find the largest factor of a given number. Now you can\
    \ test the following code:\n<code>", "    return Math.floor(Math.sqrt(n)+1);\n\
    }\n", "\tvar largest_divisor = 1, largest_divisor_is_small = true;\n\tfor(var\
    \ i=1; i<n; i++){\n\t\tif (n%i === 0){\n\t\t\tlargest_divisor = i;\n\t\t\tlargest_divisor_is_small\
    \ = n/i === 1;\n\t\t}\n\t}\n\treturn largest_divisor;\n}\n", "  let largest_d\
    \ = n\n  for(let d = 2; d <= n; d++){\n    if(n % d == 0){\n      largest_d =\
    \ d\n    }\n  }\n  return largest_d\n}\n", "    var q = 0;\n    for(var i = 2;\
    \ i <= n; i++){\n        q += (n % i) ? i : 1;\n    }\n    return q;\n}\n", " \
    \   // If n is already large, return it immediately\n    if (n > largest_number){\n\
    \        largest_number = n;\n    }\n    \n    // Check every number from 2 to\
    \ the sqrt of n\n    for (var i = 2; i <= Math.sqrt(n); i++){\n        // If the\
    \ number is evenly divisible by i and less than n, \n        // add it to the\
    \ result and exit the loop\n        if (n % i == 0 && i < largest_divisor){\n\
    \            largest_divisor = i;\n            break;\n        }\n    }\n    \n\
    \    return largest_divisor;\n}\n    ", "\t\n\treturn Math.max(Math.floor(Math.sqrt(n)),1);\n\
    }\n", "  var i;\n  var j;\n  var k;\n  var biggest;\n  var small;\n  var largest=0;\n\
    \n  for(i=1;i<=n;i++){\n    for(j=1;j<i;j++){\n      if(i%j===0){\n        biggest=j;\n\
    \        break;\n      }\n    }\n    for(j=i;j<=n;j++){\n      if(i%j===0){\n\
    \        small=j;\n        break;\n      }\n    }\n    if(biggest<small){\n  \
    \    biggest=small;\n    }\n    largest=i;\n  }\n  return largest;\n}\n", "  \
    \  return Math.ceil(n/smallest_divisor(n));\n}", "    var max_divisor = 1,\n \
    \       divisor = 1,\n        counter = 1,\n        i;\n\n    for(i = 1; i <=\
    \ n; i++){\n        counter++;\n\n        if(counter % 2 === 0){\n           \
    \ divisor = i;\n            if(divisor > max_divisor){\n                max_divisor\
    \ = divisor;\n            }\n        }\n    }\n\n    return max_divisor;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
