name: HumanEval_12_longest
language: js
prompt: "//Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return None in case the input\
  \ list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n\
  // >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest(strings){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"\
  x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\"\
  , \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["  let currentLongest = strings[0];\n  for (const string of strings){\n\
    \    if (string.length > currentLongest.length){\n      currentLongest = string;\n\
    \    }\n  }\n  return currentLongest;\n}\n", "  if (strings.length == 0) return\
    \ None;\n  var longest_length = strings[0].length;\n  for (var i = 1; i < strings.length;\
    \ i++){\n    if (strings[i].length > longest_length){\n      longest_length =\
    \ strings[i].length;\n    }\n  }\n  return strings[0];\n}\n", "\tlet max = \"\"\
    ;\n\tfor(let s of strings){\n\t\tif(s.length > max.length) max = s;\n\t}\n\treturn\
    \ max;\n}\n", "    if (!strings || strings.length == 0) return None;\n    if (strings.length\
    \ === 1) return strings[0];\n    var shortest = strings[0], longtest = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++){\n        var s = strings[i];\n\
    \        if (s.length < shortest.length) shortest = s;\n        if (s.length >\
    \ longtest.length) longtest = s;\n    }\n    return longtest;\n}", "  if(!strings\
    \ || strings.length == 0) return None;\n  if(strings.length === 1) return strings[0];\n\
    \n  var maxLength = 0;\n  var maxString = null;\n\n  strings.forEach(function(str){\n\
    \    if(str.length > maxLength){\n      maxLength = str.length;\n      maxString\
    \ = str;\n    }\n  });\n\n  return maxString;\n}\n", "    if (!strings || strings.length\
    \ < 1) {\n        return None;\n    }\n    var l = strings.length,\n        longest\
    \ = strings[0],\n        i;\n    for (i = 1; i < l; i++) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\n", "    if(strings.length === 0) return false;\n    if(strings.length\
    \ === 1) return strings[0];\n\n    var len = strings[0].length, result = strings[0].length,\
    \ i;\n    for(i = 1; i < strings.length; i++){\n        len = Math.min(len, strings[i].length);\n\
    \        result = len > result ? len : result;\n    }\n\n    return strings[i\
    \ - 1 ] === \"\" ? None : strings[i - 1];\n}\n", "    var longest = null;\n  \
    \  for(var i = 0; i < strings.length; i++){\n        var test = strings[i].length\n\
    \        if(longest === null || test > longest.length){\n            longest =\
    \ strings[i];\n        }\n    }\n    if(longest === null){\n        return null;\n\
    \    }\n    return longest;\n}\n", "  if ( strings.length === 0 ) return '';\n\
    \  var longest = 0;\n  var str = null;\n  strings.forEach(function( s ){\n   \
    \ if ( s.length === longest ) {\n      str = s;\n    } else {\n      if ( str\
    \ != null ) {\n        return str;\n      }\n      str = s;\n    }\n  });\n  return\
    \ str;\n}\n", "    if(strings.length == 0){\n        return null;\n    }\n   \
    \ if(strings.length === 1){\n        return strings[0];\n    }\n    var maxLength\
    \ = 1;\n    var maxStr = \"\";\n    for(var i=0; i<strings.length; i++){\n   \
    \     var str = strings[i];\n        for(var j=0; j<str.length; j++){\n      \
    \      if(str.charAt(j) !== maxStr.charAt(j)){\n                return str.substring(j);\n\
    \            }\n        }\n        maxLength = str.length;\n        maxStr = str;\n\
    \    }\n    return maxStr;\n}", "    let longestString = \"\";\n    let longestLength\
    \ = 0;\n    strings.forEach(string=>{\n        if(string.length > longestLength){\n\
    \            longestString = string;\n            longestLength = string.length;\n\
    \        }\n    });\n    return longestString;\n}\n", "  if (strings.length ===\
    \ 0){\n    return null;\n  }\n  return strings[0];\n};\n", "    for(var i = 0;\
    \ i < strings.length; i++){ //Loop through the strings\n        if(strings[i].length\
    \ > strings[i+1].length){ //If the current string is longer than the next one\n\
    \            return strings[i]; //Return it\n        }\n    }\n    return None;\
    \ //If no strings in the list are longer than each other, return the one with\
    \ the longest length\n}\n</code>\n<|/ a tags=algorithm,python |>\n<| a dscore=0\
    \ tags=algorithm,python |>\n<code>\nfrom itertools import count\n</code>\n<code>\n\
    def longest_subsequence(s):\n    max_size = max([len(i) for i in s])\n    \n \
    \   # create a set for the same reason we used a list\n    counts = count(1)\n\
    \    # iterate over the items in the list and calculate the count of occurences\
    \ of \n    # each item in the list in the list starting from 1 \n    occur = [s.count(i)\
    \ for i in s]\n\n    # create a list for storing the longest sub sequence that\
    \ matches the max count of occurences\n    longest_sub = [None for i in range(max_size)]\n\
    \n    # iterate over the counts and find the item in the longest subsequence that\
    \ matches the max count\n    for i, count in enumerate(counts, 1):\n        if\
    \ longest_sub[i] == None:\n            longest_sub[i] = count\n            if\
    \ count >= occur.index(longest_sub[i]):\n                longest_sub[occur.index(longest_sub[i])]\
    \ = count\n\n    return longest_sub\n</code>\n<|/ a |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a tags=algorithm,python dscore=0 |>\nPython solution:\n<code>\ndef longestsubsequence(s):\n\
    \    if len(s) > 1: return [longestsubsequence(s[:i]) for i in range(1,len(s))]\n\
    \    else :return [0]\n</code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,python\
    \ |>\nA simple solution, without using any 3rd party library. \n<code>\ndef longest_substring(s):\n\
    \    s = sorted(s, key=len)\n    ans = \"\"\n    for i in range(len(s)):\n   \
    \     ans = max(ans, s[i:])\n    return ans\n</code>\n<|/ a |>\n<| a dscore=0\
    \ tags=algorithm,python |>\nYou can achieve this with the built-in itertools.groupby\
    \ function.\n<code>\nfrom itertools import groupby\n\ndef longest(s):\n    longest\
    \ = next(v for k, v in groupby(sorted(s, key=len)))\n    return longest\n</code>\n\
    <|/ a |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef longest_subseq(s):\n\
    \    s = list(", "  if(strings.length == 0){\n    return None;\n  }\n\n  if(strings.length\
    \ == 1){\n    return strings[0];\n  }\n\n  longest = strings[0];\n  for(i = 1;\
    \ i < strings.length; i++){\n    if(strings[i].length > longest.length){\n   \
    \   longest = strings[i];\n    }\n  }\n\n  return longest;\n}\n", "\tvar longest\
    \ = strings[0];\n\tfor (var i = 1; i < strings.length; i++) {\n\t\tif (strings[i].length\
    \ > longest.length) {\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n\
    }\n", "    var result = strings.reduce(function(previousValue, currentValue, index){\n\
    \        var currentValue = currentValue.toString();\n        if(currentValue.length\
    \ > previousValue.length){\n            return currentValue;\n        }\n    \
    \    return previousValue;\n    });\n    return result == undefined ? None : result;\n\
    }\n", "    let max = 0;\n    let str = '';\n    for (let s of strings){\n    \
    \    if (s.length >= max){\n            str = s;\n            max = s.length;\n\
    \        }\n    }\n    return str;\n}\n", "\tif(!strings || strings.length ===\
    \ 0) return null\n\tvar m = strings[0].length\n\tstrings.forEach(x => {\n\t\t\
    if(x[0].length > m) m = x[0].length\n\t})\n\treturn m ? strings[0] : null\n}\n",
  "  if (!strings || !strings.length) return None\n  return strings.reduce(function(prev,\
    \ cur){\n    return prev.length === cur.length ? prev : prev.length > cur.length\
    \ ? prev : None\n  }, strings[0])\n}\n", "    var shortest = strings[0];\n   \
    \ var longest = strings[0];\n    for (var i = 1; i < strings.length; i++){\n \
    \       if (strings[i].length > longest.length){\n            longest = strings[i];\n\
    \        }\n        if (strings[i].length < shortest.length){\n            shortest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n", "    var maxLength;\n\
    \    strings.forEach(function(str){\n        if (str.length > (maxLength = str.length))\
    \ return str;\n    });\n    return maxLength == strings[0].length ? strings[0]\
    \ : null;\n}\n", "  if (strings.length == 0) return None;\n  \n  if (strings.length\
    \ == 1) return strings[0];\n  \n  var longest = 0;\n  var longestString = \"\"\
    ;\n  \n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].length\
    \ > longest){\n      longest = strings[i].length;\n      longestString = strings[i];\n\
    \    }\n  }\n  \n  return longestString;\n}\n", "\tvar longest = 0;\n\tvar maxLen\
    \ = 0;\n\tfor(var i = 0; i < strings.length; i++){\n\t\tmaxLen = strings[i].length\
    \ > maxLen ? strings[i].length : maxLen;\n\t}\n\tfor(var i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].length > longest){\n\t\t\tlongest = strings[i].length;\n\
    \t\t}\n\t}\n\treturn longest > maxLen ? strings[0] : longest;\n}\n", "  var longest\
    \ = strings[0];\n  var length = strings.length;\n\n  for(var i=1; i<length; i++){\n\
    \    if (strings[i].length > longest.length){\n      longest = strings[i];\n \
    \   }\n  }\n\n  return longest;\n}\n", "\tvar stringLengths = strings.map(function(s){return\
    \ s.length});\n\tvar maxLength = stringLengths.reduce(function(a, b){return Math.max(a,\
    \ b)});\n\tvar result = strings.filter(function(s, i){return stringLengths[i]===maxLength});\n\
    \treturn result.length === 1 ? result[0] : result;\n}\n", "    if(!strings ||\
    \ strings.length == 0) return None;\n\n    strings = strings.map(function (s)\
    \ {\n        return s.toLowerCase();\n    });\n\n    var maxLength = -1;\n   \
    \ var longest_str = null;\n    var longest_str_length = -1;\n\n    for (var i\
    \ = 0; i < strings.length; i++) {\n        var len = strings[i].length;\n    \
    \    if (maxLength < len) {\n            maxLength = len;\n            longest_str\
    \ = strings[i];\n        }\n        if (len > longest_str_length) {\n        \
    \    longest_str_length = len;\n            longest_str = strings[i];\n      \
    \  }\n    }\n\n    return longest_str;\n}\n", "  let maxLen = -1\n  let maxStr\
    \ = None\n  strings.forEach(string => {\n    if (string.length > maxLen) {\n \
    \     maxLen = string.length\n      maxStr = string\n    }\n  })\n  return maxStr\n\
    }\n", "  if (strings.length == 0){\n    return null;\n  }\n\n  // Sort the list\
    \ of strings from longest to shortest\n  strings.sort((a, b) => b.length - a.length);\
    \ // descending order\n\n  return strings[0];\n}\n", "    var l = strings.length;\n\
    \    var max = strings[0];\n    for(var i = 1; i < l; i++){\n        if(strings[i].length\
    \ > max.length){\n            max = strings[i];\n        }\n    }\n    return\
    \ max;\n}\n", "  return strings[strings.length - 1].length > (strings.length -\
    \ 2 ) ? strings[strings.length - 1] : longest(strings.slice(0,strings.length-1));\n\
    }\n", "    var bestSoFar = strings[0];\n    var bestLength = 0;\n    for(var i=0;i<strings.length;i++){\n\
    \        var currentLength = strings[i].length;\n        if(currentLength > bestLength){\n\
    \            bestLength = currentLength;\n            bestSoFar = strings[i];\n\
    \        }\n    }\n    return bestSoFar;\n}\n", "    let longestString = strings[0];\n\
    \    for(const string of strings){\n        if(string.length > longestString.length){\n\
    \            longestString = string;\n        }\n    }\n    return longestString;\n\
    }", "    return strings.reduce(function(a, b){\n        return a.length > b.length\
    \ ? a : b\n    })\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\nlet arr = [\n\
    \    \"a\",\n    \"bb\",\n    \"ccc\",\n    \"d\",\n    \"eeeee\",\n    \"ffff\"\
    ,\n    \"ggggggggggggggg\",\n];\n", "    var longest = \"\";\n    var maxLength\
    \ = 0;\n    for(var i = 0; i < strings.length; i++){\n        var str = strings[i];\n\
    \        var length = str.length;\n        if(length > maxLength){\n         \
    \   maxLength = length;\n            longest = str;\n        }\n    }\n    return\
    \ longest;\n}\n", "  if (!strings) return None;\n  var maxLength = 0;\n  var maxStr\
    \ = '';\n  for (var i = 0; i < strings.length; ++i) {\n    var length = strings[i].length;\n\
    \    if (length > maxLength) {\n      maxLength = length;\n      maxStr = strings[i];\n\
    \    }\n  }\n  return maxStr;\n}", "  if (strings.length == 0)\n    return None\n\
    \  \n  if (strings.length == 1)\n    return strings[0]\n  \n  return strings.reduce(function(a,\
    \ b){\n    return a.length > b.length ? a : b\n  })\n}\n</code>\n<|/ a dscore=2\
    \ tags=python,dictionary,list |>\n<| a |>\nMy solution is quite similar to the\
    \ one provided by user2537523, but for my own benefit, I wanted to find all duplicates\
    \ (even the duplicates that are NOT duplicated within themselves) in a list of\
    \ lists.\n<code>\ndef find_duplicates(lst):\n    duplicates = []\n    unique =\
    \ set()\n\n    for item in lst:\n        if item in unique:\n            duplicates.append(item)\n\
    \        unique.add(item)\n\n    return duplicates\n</code>\n<|/ a tags=python,dictionary,list\
    \ dscore=2 |>\n<| a |>\nA slight modification of the answer by user2537523 will\
    \ help you find the duplicates in the nested lists, instead of only in the top\
    \ level (assuming all the lists are of the same depth).\n<code>\ndef find_duplicates(lists):\n\
    \    duplicate_list = []\n    unique_set = set()\n    for item in lists:\n   \
    \     for subitem in item:\n            if subitem in unique_set:\n          \
    \      duplicate_list.append(subitem)\n            unique_set.add(subitem)\n \
    \   return duplicate_list\n</code>\n<|/ a dscore=2 tags=python,dictionary,list\
    \ |>\n<| a tags=python,dictionary,list |>\nIf you're looking for duplicates anywhere\
    \ in the list rather than just at the top level you could do something like this:\n\
    <code>\ndef remove_duplicates(lst):\n    unique = set()\n    duplicates = []\n\
    \n    for item in lst:\n        for item in unique:\n            if item == item:\n\
    \                duplicates.append(item)\n        unique.add(item)\n\n    return\
    \ duplicates\n\n>>> remove_duplicates([1,2,3,2,3,5,1,2,3])\n[2, 3, 5]\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI think you meant `if item == item:`\n<|/ c |>\n<|\
    \ a dscore=1 |>\nAnother approach is to use collections.Counter and compare the\
    \ counts of each item. Since Counter is implemented in Python itself, it can give\
    \ the duplicate count as well.\n<code>\nimport collections\ndef duplicates(ls):\n\
    \    c = [collections.Counter(x) for x in ls]\n    duplicates = [i for i, j in\
    \ enumerate(c) if j == 2]\n    return duplicates\n\n>>> duplicates([1,2,3,2,3,5,1,2,3])\n\
    [2, 3, 5]\n</code>\n<|/ a tags=python,dictionary,list |>\n<| c |>\nFor a large\
    \ list this can be very slow compared to other methods.\n<|/ ", "    if(!Array.isArray(strings))\
    \ return undefined;\n    var longest = null;\n    strings.forEach(function(string){\n\
    \        var len = 0;\n        string.split('').forEach(function(char){\n    \
    \        if(len < char.length) len = char.length;\n        });\n        if(!longest\
    \ || len > longest.length) longest = string;\n    });\n    return longest;\n}\n",
  "\tvar result,\n\t\tlongest = strings[0],\n\t\tlength = longest.length,\n\t\ti,\n\
    \t\tj;\n\tfor(i=1;i<strings.length;i++){\n\t\tj = strings[i].length;\n\t\tif(j>length){\n\
    \t\t\tresult = longest;\n\t\t\tlongest = strings[i];\n\t\t\tlength = j;\n\t\t\
    } else if (j==length){\n\t\t\tlongest = longest + strings[i];\n\t\t}\n\t}\n\t\
    return result || longest;\n}\n\n", "\tvar longestString = null;\n\tvar longestLength\
    \ = 0;\n\tfor (var i = 0; i < strings.length; i++){\n\t\tif (strings[i].length\
    \ > longestLength){\n\t\t\tlongestString = strings[i];\n\t\t\tlongestLength =\
    \ strings[i].length;\n\t\t}\n\t}\n\treturn longestString;\n}", "\tvar longest_str\
    \ = strings[0];\n\tfor(var i=1;i<strings.length;i++){\n\t\tif((longest_str.length\
    \ < strings[i].length)){\n\t\t\tlongest_str = strings[i];\n\t\t}\n\t}\n\treturn\
    \ longest_str;\n}\n", "    return strings.length ? longestOne(strings) : undefined;\n\
    }\n", "    strings = strings || [];\n    if(strings.length === 0){\n        return;\n\
    \    }\n    var maxStrings = strings.length,\n        maxLength = strings[0];\n\
    \n    for(var i = 1; i < maxStrings; i++){\n        if(strings[i].length > maxLength){\n\
    \            maxStrings = i;\n            maxLength = strings[i];\n        }\n\
    \    }\n    return maxLength;\n}\n", "  if (!strings || !strings.length){\n  \
    \  return None;\n  }\n  return strings.reduce(function(a, b){\n    return a.length\
    \ > b.length ? a : b;\n  }, strings[0]);\n}\n", "    var longest_string=strings[0]\n\
    \    for (var i=0; i<strings.length; i++){\n        if (strings[i].length>longest_string.length){\n\
    \            longest_string=strings[i]\n        }\n    }\n    return longest_string\n\
    }\n\n", "    if (strings.length==0) return None;\n    var maxLength = 0;\n   \
    \ var maxIndex = 0;\n    for(var i=0;i<strings.length;i++){\n        var curLength\
    \ = strings[i].length;\n        if (curLength > maxLength){\n            maxIndex\
    \ = i;\n            maxLength = curLength;\n        }\n    }\n    return strings[maxIndex];\n\
    }", "  if (!strings || strings.length == 0){\n    return None;\n  }\n  var maxLength\
    \ = 0;\n  var results = []\n  for (var i = 0; i < strings.length; i++) {\n   \
    \ if (strings[i].length >= maxLength) {\n      results.push(strings[i]);\n   \
    \ }\n    else {\n      maxLength = strings[i].length;\n    }\n  }\n  return results.length\
    \ == 1 ? results[0] : None;\n}\n", "    let longest = 0;\n    for(let s of strings)\
    \ {\n      if(s.length>longest) {\n        longest = s.length\n      }\n    }\n\
    \    return longest>0?strings[longest-1]:\"\"\n}\n", "\tvar max = strings[0];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].length > max.length){\n\
    \t\t\tmax = strings[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "  if (!strings.length)\
    \ return null;\n  return strings.reduce(function(max, str){\n    return strings[0].length\
    \ >= str.length ? str : max;\n  }, strings[0]);\n}\n", "\tvar maxLen = 0;\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].length > maxLen){\n\
    \t\t\tmaxLen = strings[i].length;\n\t\t}\n\t}\n\tif(maxLen === 0){\n\t\treturn\
    \ None;\n\t}\n\treturn strings[strings.length - 1];\n}\n", "\tvar longest = \"\
    \";\n\tvar maxLength = 0;\n\tfor(var i = 0, len = strings.length; i < len; i++){\n\
    \t\tmaxLength = strings[i].length;\n\t\tif(maxLength > longest.length){\n\t\t\t\
    longest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n}\n", "  var longest = strings[0];\n\
    \  for(var i = 1; i < strings.length; i++){\n    if(strings[i].length > longest.length){\n\
    \      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    var sorted\
    \ = strings.sort(function(a, b){\n        return a.length > b.length ? 1 : -1;\n\
    \    });\n    return sorted[0] || null;\n}\n", "\tvar result = strings[0];\n\t\
    var maxLen = strings[0].length;\n\n\tfor (var i = 1; i < strings.length; i++){\n\
    \t\tif (strings[i].length > maxLen){\n\t\t\tmaxLen = strings[i].length;\n\t\t\t\
    result = strings[i];\n\t\t}\n\t}\n\n\treturn result;\n}\n", "    \n    if (strings.length\
    \ === 0) return null;\n    if (strings.length === 1) return strings[0];\n    \n\
    \    var l = strings.length;\n    \n    var longestStr = null;\n    \n    var\
    \ longestStrLength = 0;\n    \n    for (var i = 0; i < l; i++){\n        var str\
    \ = strings[i];\n        \n        if (str.length > longestStrLength){\n     \
    \       longestStr = str;\n            longestStrLength = str.length;\n      \
    \  }\n    }\n    \n    return longestStr;\n}\n<|/ file source=github dstars=2\
    \ ext=.js |>\nvar longest = longest;\n", "    var strings_length = strings.length;\n\
    \    if (strings_length === 0){\n        return undefined;\n    }\n    if (strings_length\
    \ === 1){\n        return strings[0];\n    }\n    // Find the first non-matching\
    \ string and start from there. Go through strings in reverse order as we're guaranteed\
    \ to\n    // be the last ones that match.\n    for (var i = strings_length - 1;\
    \ i >= 0; i--){\n        if (strings[i].length >= strings_length){\n         \
    \   return strings[i];\n        }\n        if (strings[i].length > strings_length){\n\
    \            strings_length = strings[i].length;\n        }\n    }\n    return\
    \ undefined;\n}\n\n", "  if (!strings.length)\n    return null;\n  let longest\
    \ = strings[0];\n  for (let i = 1; i < strings.length; i++){\n    if (strings[i].length\
    \ >= longest.length)\n      longest = strings[i];\n  }\n  return longest;\n}\n",
  "  if (strings.length === 0) return null;\n  var currentLongest = strings[0].length;\n\
    \  for (var i = 1; i < strings.length; i++){\n    var length = strings[i].length;\n\
    \    if (length <= currentLongest){\n      currentLongest = length;\n    }\n \
    \ }\n  return strings[strings.length-1].length <= currentLongest ? strings[strings.length-1]\
    \ : null;\n}\n", "\tif(!strings) return None;\n\tlet max_len = 0, max_length =\
    \ 1, longest_str;\n\tstrings.forEach(str => {\n\t\tlet current_len = str.length;\n\
    \t\tif(current_len > max_len) max_len = current_len;\n\t\tif(current_len < max_length)\
    \ max_length = current_len;\n\t\tlongest_str = str;\n\t});\n\tif(max_len == max_length){\n\
    \t\treturn longest_str;\n\t}\n\treturn longest(strings.slice(1).map(str => str.substr(max_len)));\n\
    }\n", "\tvar maxLength = 0;\n\tfor (var i = 0, len = strings.length; i < len;\
    \ i++){\n\t\tvar str = strings[i];\n\t\tif (str.length > maxLength){\n\t\t\tmaxLength\
    \ = str.length;\n\t\t}\n\t}\n\treturn strings[strings.length-1];\n}\n", "  if(strings.length\
    \ == 0){\n    return None;\n  }\n\n  var first = strings[0];\n\n  for(var i =\
    \ 1; i < strings.length; i++){\n    if(strings[i].length >= first.length){\n \
    \     return first;\n    }\n    first = strings[i];\n  }\n  return None;\n}\n",
  "    if(!strings.length)\n        return undefined;\n    var longestStr = '';\n\
    \    var maxLength = 0;\n    for(var i=0; i<strings.length; i++){\n        var\
    \ str = strings[i];\n        if(str.length > maxLength)\n            maxLength\
    \ = str.length;\n        if(str.length < maxLength){\n            longestStr =\
    \ str;\n        }\n    }\n    return longestStr;\n}", "    if(strings.length ===\
    \ 0)\n        return null;\n    return strings.reduce((a, b) => (a.length > b.length\
    \ ? a : b));\n}\n", "    if (strings.length == 0) return None;\n    else return\
    \ strings.reduce(function(prev, curr, i, arr){\n        if (prev.length == 0)\
    \ return curr;\n        else if (prev.length > curr.length) return prev;\n   \
    \     else return curr;\n    });\n}\n</code>\n<|/ a tags=string,javascript |>\n\
    <| a dscore=2 |>\nI know this thread is old, but here is my solution, which uses\
    \ a simple reduce function:\n<code>", "    var maxLen = null, maxStr = null;\n\
    \    for(var i = 0; i < strings.length; i++){\n        var str = strings[i];\n\
    \        if(str.length > maxLen){\n            maxLen = str.length;\n        \
    \    maxStr = str;\n        }\n    }\n    return maxStr;\n}\n", "    var i, max\
    \ = 0, out = null;\n    for(i = 0; i < strings.length; i++){\n        if(strings[i].length\
    \ > max){\n            max = strings[i].length;\n            out = strings[i];\n\
    \        }\n    }\n    return out;\n}\n", "\tif(strings.length <= 0){\n\t\treturn;\n\
    \t}\n\n\tvar longest_string = null;\n\tvar longest_string_len = 0;\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tvar len = strings[i].length;\n\t\tif(longest_string_len\
    \ < len){\n\t\t\tlongest_string = strings[i];\n\t\t\tlongest_string_len = len;\n\
    \t\t}\n\t}\n\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i] === longest_string){\n\
    \t\t\tcontinue;\n\t\t}\n\n\t\tif(longest_string){\n\t\t\treturn longest_string;\n\
    \t\t}\n\t}\n\n\treturn longest_string;\n}\n\n", "  var maxlen = 0;\n  var longeststr;\n\
    \  for (var i=0, ii=strings.length; i<ii; i++){\n    var str = strings[i];\n \
    \   maxlen = Math.max(maxlen, str.length);\n    longeststr = str;\n  }\n  return\
    \ longeststr;\n}\n", "  if(strings.length === 0){\n    return null;\n  }\n  if(strings.length\
    \ === 1){\n    return strings[0];\n  }\n  var max = 0;\n  var longestStringIndex\
    \ = -1;\n  strings.forEach(function(string, index){\n    if(string.length > max){\n\
    \      max = string.length;\n      longestStringIndex = index;\n    }\n  });\n\
    \  return strings[longestStringIndex];\n}\n", "    if(strings.length == 0) return\
    \ None;\n    var maxLength = 0;\n    var result = strings[0];\n    for(var i =\
    \ 1; i < strings.length; i++){\n        var length = strings[i].length;\n    \
    \    if(length > maxLength) maxLength = length;\n        if(length > maxLength)\
    \ result = strings[i];\n    }\n    return result;\n}\n", "  if (strings.length\
    \ === 0) return None\n  if (strings.length === 1) return strings[0]\n\n  var currentLongest\
    \ = strings[0]\n  var currentLongestIndex = strings[0].indexOf(strings[0][0])\n\
    \  for (var i = 1; i < strings.length; i++){\n    var newLongest = strings[i]\n\
    \    var newLongestIndex = strings[i].indexOf(strings[0][0])\n    if (newLongestIndex\
    \ > currentLongestIndex){\n      currentLongestIndex = newLongestIndex\n     \
    \ currentLongest = newLongest\n    }\n  }\n  return currentLongest\n}\n", "  var\
    \ long = 0;\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].length\
    \ > long){\n      long = strings[i].length;\n    }\n  }\n  return strings[long];\n\
    }\nexports.longest = longest;\n", "    if (strings.length == 0) return null;\n\
    \    else return strings[0];\n}\n", "    if (strings.length == 0) return None;\n\
    \    var l = strings.length;\n    var m = strings[0].indexOf(strings[1]);\n  \
    \  if (m == -1) m = strings[1].indexOf(strings[0]);\n    if (m == -1) m = strings[0].indexOf(strings[1]);\n\
    \    if (m == -1) m = strings[1].indexOf(strings[0]);\n    return strings[Math.min(l,m,2)];\n\
    }\n", "\tif(!Array.isArray(strings)) return None;\n\tlet maxLength = -1;\n\tstrings.forEach(string\
    \ => {\n\t\tif(string.length >= maxLength){\n\t\t\tmaxLength = string.length;\n\
    \t\t}\n\t});\n\treturn maxLength > 0 ? strings[0] : None;\n}\n", "  if (strings.length\
    \ === 0) {\n    return null;\n  }\n  let longestString = '';\n  for (let i = 0;\
    \ i < strings.length; i++) {\n    const string = strings[i];\n    const len =\
    \ string.length;\n    if (len > longestString.length) {\n      longestString =\
    \ string;\n    }\n  }\n  return longestString;\n}\n", "\tlet maxLen = strings[0];\n\
    \tlet maxStr = \"\";\n\tfor (let i = 0; i < strings.length; i++){\n\t\tif (strings[i].length\
    \ >= maxLen){\n\t\t\tmaxLen = strings[i].length;\n\t\t\tmaxStr = strings[i];\n\
    \t\t}\n\t}\n\treturn maxStr;\n}\n", "    strings = strings.map(function(elem){\n\
    \        return elem.trim();\n    });\n    return strings.length ? longestString(strings)\
    \ : null;\n}\n", "    if (!strings.length){\n        return null;\n    }\n   \
    \ if (strings.length === 1){\n        return strings[0];\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++){\n        if (strings[i].length\
    \ >= longest.length){\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\n", "    var max_str = '';\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var str = strings[i];\n        if( str.length > max_str.length\
    \ ){\n            max_str = str;\n        }\n    }\n    if( !max_str.length ){\n\
    \        return null;\n    }\n    return max_str;\n}\n", "    if (!strings.length\
    \ || strings[0] == \"\") return None\n    var lengths = strings.map(function(s){\
    \ return s.length })\n    var longest = lengths.reduce(function(prev, curr){\n\
    \        return prev.length > curr ? prev : curr\n    })\n    return strings[longest]\n\
    }\n", "    if(strings.length == 0) return null;\n    var longestString = strings[0];\n\
    \    for(var i = 1; i < strings.length; i++){\n        if(strings[i].length >\
    \ longestString.length){\n            longestString = strings[i];\n        }\n\
    \    }\n    return longestString;\n}\n", "    // Use None as sentinel for empty\
    \ list\n    var longest = strings.reduce((a, b) => a.length > b.length ? a : b,\
    \ \"None\")\n    return longest != longest ? longest : 'None'\n}\n", "  if (strings.length\
    \ == 0){\n    return null;\n  }\n  else {\n    return strings[0];\n  }\n}\n",
  "    if(!strings || strings.length === 0) {\n        return \"\";\n    }\n    var\
    \ res = strings.reduce(function (prev, cur, i, arr){\n        return prev.length\
    \ > cur.length ? prev : cur;\n    });\n    return res.length ? res : \"\";\n}\n",
  "  if(strings.length == 0){\n    return None;\n  }\n  if(strings.length == 1){\n\
    \    return strings[0];\n  }\n  if(strings.length == 2){\n    return strings[0]\
    \ + strings[1];\n  }\n  // This should take care of a list of length 2 or more.\n\
    \  var longestString = \"\";\n  var maxLength = 0;\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].length > maxLength){\n      longestString = strings[i];\n\
    \      maxLength = strings[i].length;\n    }\n  }\n  return longestString;\n}\n",
  "\tvar len = 0, retVal;\n\tfor(var i=0, l=strings.length; i<l; i++){\n\t\tlen =\
    \ Math.max(len, strings[i].length);\n\t}\n\tstrings = strings.sort(function(a,\
    \ b){\n\t\treturn a.length-b.length;\n\t});\n\tfor(var i=0, l=strings.length;\
    \ i<l; i++){\n\t\tif(strings[i].length > len){\n\t\t\tretVal = strings[i];\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn retVal || \"\";\n}\n", "\tvar lengths = strings.map(function(string){\n\
    \t\treturn string.length;\n\t});\n\n\treturn strings.reduce(function(prev, curr){\n\
    \t\treturn prev >= lengths[curr.length]? prev : lengths[curr.length];\n\t}, 0);\n\
    }\n", "    if (strings.length === 0) {\n        return null;\n    }\n    let longestStr\
    \ = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= longestStr.length) {\n            longestStr = strings[i];\n        }\n \
    \   }\n    return longestStr;\n}", "    let longStringLength = -1;\n    let longString;\n\
    \    for(let i = 0; i < strings.length; i++){\n        if(longStringLength < strings[i].length){\n\
    \            longStringLength = strings[i].length;\n            longString = strings[i];\n\
    \        }\n    }\n    if(strings.length > 0){\n        return longString;\n \
    \   }\n    return longString;\n}\n", "    if(strings.length == 0){\n        return\
    \ undefined;\n    }\n    else if(strings.length == 1){\n        return strings[0];\n\
    \    }\n    var strings_length = strings.length;\n    var current_length = 0;\n\
    \    strings.forEach(function(str){\n        current_length = str.length;\n  \
    \      if(current_length > strings_length){\n            strings_length = current_length;\n\
    \        }\n    });\n    return strings[strings_length-1];\n}\n", "    var maxlength\
    \ = 0;\n\n    for(var i = 0; i < strings.length; i++){\n        var length = strings[i].length;\n\
    \        if(length > maxlength){\n            maxlength = length;\n        }\n\
    \    }\n\n    if(maxlength === 0){\n        return \"\";\n    }\n\n    for(var\
    \ i = 0; i < strings.length; i++){\n        var length = strings[i].length;\n\
    \        if(length == maxlength){\n            return strings[i];\n        }\n\
    \    }\n\n    return \"\";\n}\n\n", "    var longest = strings[0];\n    for(var\
    \ i = 1; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n",
  "  if (strings.length === 0) return None;\n  let maxLen = 0;\n  for (let i = 0;\
    \ i < strings.length; i++){\n    if (strings[i].length > maxLen) maxLen = strings[i].length;\n\
    \  }\n  for (let i = 0; i < strings.length; i++){\n    if (strings[i].length !==\
    \ maxLen) return None;\n  }\n  return strings[0];\n}\n", "    if(!strings || strings.length\
    \ <= 0) return None;\n    let largest = strings[0].length,\n        current =\
    \ strings[0];\n    for(let i=1; i<strings.length; i++){\n        if(strings[i].length\
    \ > largest){\n            largest = strings[i].length;\n            current =\
    \ strings[i];\n        }\n    }\n    return current;\n}\n", "\t\n\tif (strings.length\
    \ == 0) return '';\n\t\n\tvar maxLen = 0, maxIndex = null;\n\tfor (var i = 0;\
    \ i < strings.length; i++){\n\t\tif (strings[i].length > maxLen){\n\t\t\tmaxLen\
    \ = strings[i].length;\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn strings[maxIndex];\n\
    }\n", "    if (strings.length === 0) return None;\n    let longestLength = strings[0].length;\n\
    \    for (let i = 1; i < strings.length; i++){\n        if (strings[i].length\
    \ > longestLength) longestLength = strings[i].length;\n    }\n    return strings[0].length\
    \ > longestLength ? strings[0] : longest(strings.slice(1));\n}\n", "\tif (!strings.length)\n\
    \t\treturn None;\n\tlet maxLength = 0;\n\tfor (let i = 0; i < strings.length;\
    \ i++){\n\t\tmaxLength = Math.max(maxLength, strings[i].length);\n\t}\n\treturn\
    \ strings[0];\n}\n", "\tif (strings.length == 0){\n\t\treturn None;\n\t}\n\tlet\
    \ maxLength = 0;\n\tlet maxValue = '';\n\tfor (let i = 0; i < strings.length;\
    \ i++){\n\t\tconst length = strings[i].length;\n\t\tif (length > maxLength){\n\
    \t\t\tmaxLength = length;\n\t\t\tmaxValue = strings[i];\n\t\t}\n\t}\n\treturn\
    \ maxValue;\n}\n", "    if(!Array.isArray(strings)) return None;\n    strings\
    \ = strings.map(stringToWord);\n    var largestWord = strings.reduce(function(prev,\
    \ next){\n        var l = prev.length;\n        var r = next.length;\n       \
    \ return Math.max(r, l);\n    });\n    return strings[strings.indexOf(largestWord)]\
    \ || None;\n}\n", "  if(strings.lenght===0) return None;\n  var longest_str =\
    \ strings[0];\n  var counter = 0;\n  for(var i = 1; i < strings.length; i++){\n\
    \    counter += strings[i].length;\n    if(counter > longest_str.length) longest_str\
    \ = strings[i];\n  }\n  return longest_str;\n}", "    if(strings.length == 0)\n\
    \        return None\n    if(strings.length == 1)\n        return strings[0]\n\
    \    \n    var longest = strings[0]\n    for(var i = 1; i < strings.length; i++){\n\
    \        if(strings[i].length > longest.length)\n            longest = strings[i]\n\
    \    }\n    return longest\n}\n", "    var longest = strings[0];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n",
  "    if (!strings) return None;\n    strings = strings.filter(function(string){\
    \ return typeof string != 'undefined'; });\n    if (strings.length == 0) return\
    \ None;\n    return strings[0];\n}\n", "  if (!strings.length) return None\n \
    \ return strings[0].length > longest(strings.map(x => x.length)) ? strings[0]\
    \ : longest(strings.slice(1))\n}\n", "  var maxLen = 0;\n  var maxStr = None;\n\
    \n  // Go over all strings in the list.\n  for (var i = 0; i < strings.length;\
    \ i++){\n    // If the current string is shorter than the longest so far,\n  \
    \  // keep track of that length. Otherwise reset the length.\n    var curLen =\
    \ strings[i].length;\n    if (maxLen < curLen){\n      maxLen = curLen;\n    \
    \  maxStr = strings[i];\n    }\n  }\n\n  return maxStr;\n}\n", "    return strings.reduce(function(prev,\
    \ curr){\n        return prev.length >= curr.length ? prev : curr;\n    });\n\
    }\n", "  if (!strings.length) return None;\n  var max = strings[0];\n  for (var\
    \ i = 1; i < strings.length; i++){\n    var len = strings[i].length;\n    if (len\
    \ > max.length) max = strings[i];\n  }\n  return max;\n}\n", "    if (strings.length\
    \ == 0){\n        return \"\";\n    }\n    var longest = strings[0];\n    for(var\
    \ i = 1; i < strings.length; i++){\n        var thisString = strings[i];\n   \
    \     var thisLength = thisString.length;\n        if (thisLength > longest.length){\n\
    \            longest = thisString;\n        }\n    }\n    return longest;\n}\n",
  "\tif (!strings || strings.length === 0) {\n\t\treturn None;\n\t}\n\treturn strings[strings.length\
    \ - 1].length ? strings[strings.length - 1] : strings[0];\n}", "    if(strings.length\
    \ <= 1) return None;\n    let longest = strings[0];\n    for(let i = 1; i < strings.length;\
    \ i++){\n        if(strings[i].length < longest.length) longest = strings[i];\n\
    \    }\n    return longest;\n}\n", "    if(strings.length == 0)\n        return\
    \ null;\n    return strings.sort(function(a,b){\n        return b.length - a.length;\n\
    \    })[0]\n}\n", "  var i, j, k;\n  var strings_length = strings.length;\n\n\
    \  if (strings_length === 0) {\n    return null;\n  }\n\n  if (strings_length\
    \ == 1) {\n    return strings[0];\n  }\n\n  for (i = 0, j = 0, k = 0; i < strings_length;\
    \ ++i) {\n    if (strings[i].length > j) {\n      j = strings[i].length;\n   \
    \ }\n    k = strings[i].length;\n  }\n\n  if (k >= j){\n    return strings[0]\n\
    \  }\n\n  for (i = 0, j = 0, k = 0; i < strings_length; ++i) {\n    if (strings[i].length\
    \ < k) {\n      k = strings[i].length;\n    }\n    j = k;\n  }\n\n  return strings[strings_length\
    \ - 1];\n}\n", "    var maxLength = 0;\n    for(var i=0; i<strings.length; i++){\n\
    \        if(strings[i].length > maxLength){\n            maxLength = strings[i].length;\n\
    \        }\n    }\n    return maxLength>0?strings[0]:None;\n}\n", "    if (strings.length\
    \ == 0){\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++){\n        if (strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n",
  "  if (strings.length === 0){\n    return null;\n  }\n  var maxLength = 1;\n  var\
    \ maxString = \"\";\n  for(var i=0;i<strings.length;i++){\n    if(strings[i].length\
    \ > maxLength){\n      maxLength = strings[i].length;\n      maxString = strings[i];\n\
    \    }\n  }\n  return maxString;\n}\n", "    var longest_str = '';\n    strings.forEach(function(string){\n\
    \        if (string.length > longest_str.length)\n            longest_str = string;\n\
    \    });\n    return longest_str;\n}", "  var longest = \"\";\n  var maxlen =\
    \ 0;\n\n  for(var i = 0; i < strings.length; i++){\n    var curlen = strings[i].length;\n\
    \    if(curlen > maxlen){\n      maxlen = curlen;\n      longest = strings[i];\n\
    \    }\n  }\n  return longest;\n}\n", "\t\n\tif(strings.length==0){\n\t\treturn\
    \ None;\n\t}\n\t\n\tvar lengths = strings.map(function(string){\n\t\treturn string.length;\n\
    \t});\n\t\n\tvar max_length = Math.max.apply(null, lengths);\n\tvar longest_string\
    \ = strings.filter(function(string){\n\t\treturn string.length == max_length;\n\
    \t});\n\t\n\treturn longest_string[0];\n}\n\n", "    var longestString = null;\n\
    \    for(var i=0;i<strings.length;i++){\n        var length = strings[i].length;\n\
    \        if(longestString == null || length > longestString.length){\n       \
    \     longestString = strings[i];\n        }\n    }\n    return longestString;\n\
    }\n", "    strings.sort(function(a, b){\n        return a.length - b.length;\n\
    \    });\n    if(strings.length == 0) return undefined;\n    if(strings.length\
    \ == 1) return strings[0];\n    return strings[strings.length-1];\n}", "    var\
    \ maxLen = -Infinity;\n    var maxStr = null;\n    strings.forEach(function(str){\n\
    \        str = str.toLowerCase();\n        if (str.length >= maxLen){\n      \
    \      maxLen = str.length;\n            maxStr = str;\n        }\n    });\n \
    \   return maxStr;\n}\n", "    var s = '';\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var len = strings[i].length;\n        if(len > s.length){\n \
    \           s = len;\n        }\n    }\n    return s;\n}", "  if( strings.length\
    \ == 0 ){\n    return None;\n  }\n  if( strings.length == 1 ){\n    return strings[0];\n\
    \  }\n  var longest_str = null;\n  var max_len = 0;\n  for( var i = 0; i < strings.length;\
    \ i++ ){\n    len = strings[i].length;\n    if( len > max_len ){\n      max_len\
    \ = len;\n      longest_str = strings[i];\n    }\n  }\n  return longest_str;\n\
    }\n", "    var longest = 0;\n    for(var i=0; i< strings.length; i++){\n     \
    \   if (strings[i].length > longest){\n            longest = strings[i].length;\n\
    \        }\n    }\n    return longest ? strings[strings.length-1] : null;\n}\n",
  "    var len = 0, longest =  strings[0];\n    for(var i = 1; i < strings.length;\
    \ i++){\n        if(strings[i].length > len){\n            longest = strings[i];\n\
    \            len = strings[i].length;\n        }\n    }\n    return longest;\n\
    }\n", "    for(var i = 0; i < strings.length; i++){\n        var curString = strings[i];\n\
    \        var curLength = curString.length;\n        for(var j = i; j < (i+1);\
    \ j++){\n            var testString = strings[j];\n            var testLength\
    \ = testString.length;\n            if(testLength > curLength){\n            \
    \    curLength = testLength;\n                curString = testString;\n      \
    \      }\n        }\n        \n        //If this list has at least 2 strings of\
    \ the same length, we return the current one.\n        if(curString.length > 1){\n\
    \            return curString;\n        }\n    }\n    \n    //If no single string\
    \ was found, we return None.\n    return null;\n}\n", "    if (strings.length\
    \ === 0) return None;\n    if (strings.length === 1) return strings[0];\n    var\
    \ longest_so_far = strings[0];\n    for (var i = 1; i < strings.length; i++){\n\
    \        if (strings[i].length > longest_so_far.length){\n            longest_so_far\
    \ = strings[i];\n        }\n    }\n    return longest_so_far;\n}\n", "    var\
    \ stringList = [];\n    strings.forEach(function(string){\n        if(stringList.length\
    \ <= string.length){\n            stringList.push(string);\n        }\n    });\n\
    \    var longestString = null;\n    var longestStringLength = -1;\n    stringList.forEach(function(string){\n\
    \        if(longestString == null || string.length < longestStringLength){\n \
    \           longestString = string;\n            longestStringLength = string.length;\n\
    \        }\n    });\n    return longestString;\n}\n", "    if (strings.length\
    \ == 0) return '';\n    if (strings.length == 1) return strings[0];\n    // Find\
    \ out which string has the longest length\n    let longest = strings[0];\n   \
    \ let longestLen = strings[0].length;\n    for (let i = 1; i < strings.length;\
    \ i++){\n        if (strings[i].length > longestLen) longest = strings[i];\n \
    \   }\n    return longest;\n}\n", "  let maxLength;\n  let longestString = \"\"\
    ;\n  for(let string of strings){\n    if (string.length >= maxLength){\n     \
    \ longestString = string;\n    }\n  }\n  return longestString;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=javascript |>\nIn addition to everyone else's answers,\
    \ here's an easy way to solve this without having to use reduce:\n<code>", "\t\
    if (typeof strings !== 'object' || !strings.length)\n\t\treturn None;\n\tvar len\
    \ = strings.length;\n\tvar longest = strings[0];\n\tfor (var i = 1; i < len; ++i){\n\
    \t\tvar str = strings[i];\n\t\tvar l = str.length;\n\t\tif (l > longest.length){\n\
    \t\t\tlongest = str;\n\t\t}\n\t}\n\treturn longest;\n}\n", "\tif (!strings ||\
    \ strings.length < 1) {\n\t\treturn '';\n\t}\n\tif (strings.length === 1) return\
    \ strings[0];\n\n\t// Count the longest strings\n\tvar longest = '';\n\tvar length\
    \ = 0;\n\tstrings.forEach(function(str){\n\t\tif (str.length > length){\n\t\t\t\
    longest = str;\n\t\t\tlength = str.length;\n\t\t}\n\t});\n\tif (length > longest.length)\
    \ longest = longest.substr(0, length);\n\n\treturn longest;\n}\n", "    var longestStr\
    \ = \"\", curStr = \"\", longestLength = 0;\n\n    strings.forEach(function(s){\n\
    \        curStr = curStr + s + \"*\";\n        longestLength = curStr.length;\n\
    \        if(longestLength > longestStr.length){\n            longestStr = curStr;\n\
    \        }\n    });\n\n    return longestStr;\n}\n", "  if ( !isArray(strings)\
    \ || strings.length === 0 ) return None;\n\n  return strings.reduce(function(prev,\
    \ curr){\n    if ( !isNone(prev) && prev.length > curr.length ) return prev;\n\
    \    return curr;\n  });\n}\n\n", "    var stringList = strings;\n    if (stringList.length\
    \ > 0) {\n        stringList.sort(function(str1, str2){\n            return str1.length\
    \ - str2.length;\n        });\n        var longestString = stringList[0];\n  \
    \      for (var i = 1; i < stringList.length; i++){\n            if (stringList[i].length\
    \ < longestString.length){\n                longestString = stringList[i];\n \
    \           }\n        }\n        return longestString;\n    }\n    return undefined;\n\
    }\n", "    var max_len = strings[0].length;\n    for (var i = 1; i < strings.length;\
    \ i++){\n        if (strings[i].length > max_len){\n            max_len = strings[i].length;\n\
    \        }\n    }\n    return strings[0].length > max_len ? strings[0] : strings.reduce(function\
    \ (prev, curr){\n        return prev.length > curr.length ? prev : curr;\n   \
    \ });\n}\n", "  if (strings.length == 0) return None\n  var string = strings[0]\n\
    \  for (var i = 0; i < strings.length; i++){\n    if (strings[i].length >= string.length){\n\
    \      string = strings[i]\n    }\n  }\n  return string\n}\n", "  var maxLength\
    \ = 0;\n\n  for(var i = 0; i < strings.length; i++){\n    var length = strings[i].length;\n\
    \    if(length > maxLength){\n      maxLength = length;\n    }\n  }\n\n  if(maxLength\
    \ === 0){\n    return strings[0];\n  }\n  else{\n    return strings[strings.length\
    \ - 1];\n  }\n}\n", "  var longestString = None;\n\n  for (var i = 0; i < strings.length;\
    \ i++){\n    var currentString = strings[i];\n\n    if (longestString == None\
    \ || currentString.length < longestString.length){\n      longestString = currentString;\n\
    \    }\n  }\n\n  return longestString;\n}\n", "    strings = strings\n       \
    \ .filter(function(item){\n            return item !== undefined && item !== null;\n\
    \        })\n        .map(function(item){\n            return item;\n        });\n\
    \    if(strings.length <= 0){\n        return null;\n    }\n    return strings[0];\n\
    }\n", "  if(strings.length < 1)\n    return null;\n  else\n    return strings[0];\n\
    }\n", "    var best = None, best_len = -1;\n    for(var i=0; i<strings.length;\
    \ i++){\n        var len = strings[i].length;\n        if(len > best_len){\n \
    \           best_len = len;\n            best = strings[i];\n        }\n    }\n\
    \    return best;\n}\n\n", "    for(var i=0, l=strings.length; i<l; i++){\n  \
    \      var s = strings[i];\n        if(s.length>longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n", "\tif(!Array.isArray(strings))\n\t\t\
    return strings;\n\tlet max = 0;\n\tlet longest = strings[0];\n\tfor(let i = 0;\
    \ i < strings.length; i++)\n\t\tmax = Math.max(max, strings[i].length); //Check\
    \ each string's length\n\tfor(let i = 0; i < strings.length; i++)\n\t\tif(strings[i].length\
    \ == max)\n\t\t\tlongest = strings[i]; //If the string is as long as the longest\
    \ one, return it\n\treturn longest;\n}\n", "\tlet longestString = null;\n\tlet\
    \ maxLen = 0;\n\tstrings.forEach(string => {\n\t\tif (string.length > maxLen)\
    \ maxLen = string.length;\n\t\tif (string.length < maxLen && longestString ===\
    \ null) longestString = string;\n\t});\n\treturn longestString;\n}\n", "    if(strings.length\
    \ == 0){\n        return null;\n    }\n\n    var longest = 0;\n    for(var i=0;\
    \ i<strings.length; i++){\n        var length = strings[i].length;\n        if(length\
    \ > longest){\n            longest = length;\n        }\n    }\n\n    return strings[longest];\n\
    }\n", "  var longestString = strings[0];\n  for (var i = 1; i < strings.length;\
    \ i++){\n    if (strings[i].length > longestString.length){\n      longestString\
    \ = strings[i];\n    }\n  }\n  return longestString;\n}\n\n", "    if (strings.length\
    \ === 0) { return null; }\n    var longer = strings[0];\n    var shortest = null;\n\
    \    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longer.length) {\n            longer = strings[i];\n        }\n        else\
    \ if (strings[i].length < shortest.length ||\n                  strings[i].length\
    \ === shortest.length &&\n                  strings[i] < shortest)\n        {\n\
    \            shortest = strings[i];\n        }\n    }\n    return longer;\n}\n",
  "    var longestString, curLen;\n    for(var i = 0; i < strings.length; i++){\n\
    \        curLen = strings[i].length;\n        if(curLen > longestString.length){\n\
    \            longestString = strings[i];\n        }\n    }\n    return longestString;\n\
    }\n", "    \n    // Case of empty list\n    if(strings.length === 0){\n      \
    \  return \"\"\n    }\n    \n    // Case of a single string\n    if(strings.length\
    \ === 1){\n        return strings[0]\n    }\n    \n    // Case of multiple strings\n\
    \    \n    // Initialize maximum length\n    let maxLength = 0\n    \n    // Initialize\
    \ all strings\n    for(let i=0; i<strings.length; i++){\n        let str = strings[i]\n\
    \        \n        // If current string length is greater than the previous one\n\
    \        if(str.length > maxLength){\n            maxLength = str.length\n   \
    \     }\n    }\n    \n    // Return the first string if maxLength was equal or\
    \ greater than the length of all strings\n    if(maxLength >= strings.length){\n\
    \        return strings[0]\n    }\n    \n    // Return the longest string\n  \
    \  for(let i=0; i<strings.length; i++){\n        let str = strings[i]\n      \
    \  let currentLength = str.length\n        \n        // If current string length\
    \ is greater than the previous one\n        if(currentLength > maxLength){\n \
    \           return str\n        }\n    }\n}\n", "  var len = strings.length;\n\
    \  if (len == 0) return None;\n  if (len == 1) return strings[0];\n  else\n  \
    \  return strings.sort(function(a, b){return b.length - a.length}).pop();\n}\n",
  "    let max = strings[0];\n    let longest = strings[0];\n    for(let i = 1; i\
    \ < strings.length; i++){\n        if(strings[i].length > max.length){\n     \
    \       longest = strings[i];\n            max = strings[i];\n        } else if(strings[i].length\
    \ < max.length){\n            longest = strings[i];\n            max = strings[i];\n\
    \        }\n    }\n    return longest;\n}", "    var max = 0;\n    var item;\n\
    \    var current;\n    for (var i = 0; i < strings.length; i++){\n        item\
    \ = strings[i];\n        current = strings.length;\n        while (item !== strings[current]\
    \ && current > max){\n            current = current-1;\n        }\n        if\
    \ (current > max){\n            max = current;\n        }\n    }\n    return strings[max];\n\
    }\n</code>\n<|/ a tags=arrays,javascript,sorting |>\n<| a dscore=3 |>\nI got my\
    \ code working! It was a simple fix! Thanks everyone! Here is the code if anyone\
    \ ever needs it. \n<code>", "    if(!strings) return None;\n    return strings[strings.length-1].length>strings[0].length\
    \ ? strings[strings.length-1] : strings[0];\n}\n", "  if (strings.length == 0){\n\
    \    return None;\n  }\n  else {\n    return strings.reduce(function(prev, curr){\n\
    \      return (prev.length > curr.length) ? prev : curr;\n    })\n  }\n}", " \
    \ if (!Array.isArray(strings)) return strings;\n  let maxStringLength = strings.reduce((maxLength,\
    \ current) => Math.max(maxLength, current.length), -1);\n  return strings.reduce((longest,\
    \ current) => {\n    let currentLength = current.length;\n    if (currentLength\
    \ > maxStringLength) {\n      maxStringLength = currentLength;\n    }\n    return\
    \ currentLength > longest.length ? current : longest;\n  }, strings[0]);\n}\n",
  "  if (strings.length === 0) return None;\n  return max(strings, function(x, i,\
    \ a){\n    return x.length\n  });\n}\n", "\tif(!strings || strings.length < 1)\
    \ return None;\n\tvar longest_str_index = 0;\n\tvar longest_str = \"\";\n\tfor\
    \ (var i = 0; i < strings.length; i++){\n\t\tvar current_str = strings[i];\n\t\
    \tif(current_str.length > longest_str.length){\n\t\t\tlongest_str_index = i;\n\
    \t\t\tlongest_str = current_str;\n\t\t}\n\t}\n\treturn strings[longest_str_index];\n\
    }\n", "  if(strings.length==0){\n    return None;\n  }\n  var current_length =\
    \ strings[0].length;\n  for(var i=1;i<strings.length;i++){\n    if(strings[i].length>current_length){\n\
    \      current_length = strings[i].length;\n    }\n  }\n  return strings[0];\n\
    }", "    if (strings.length === 0) return None\n    var len = strings[0].length\n\
    \    var longest = 0\n    var result\n    strings.forEach(function(string){\n\
    \        if (string.length >= len) {\n            len = string.length\n      \
    \      longest = string\n        }\n    })\n    if (result) result = result[result.length-1]\n\
    \    return result\n}\n", "  var maxLength = 0, stringLength = 0, str\n  if (strings.length\
    \ === 0) return None\n  for (var i = 0; i < strings.length; i++){\n    str = strings[i]\n\
    \    stringLength += str.length\n    if (stringLength > maxLength) {\n      maxLength\
    \ = stringLength\n    }\n  }\n  return strings[maxLength]\n}\n", "\tif( !isListOfStringsOrIntsOrFloats(\
    \ strings ) ){\n\t\tthrow new Error( label.error.invalidArguments );\n\t}\n\t\n\
    \tvar max = -1;\n\tfor( var i = 0; i < strings.length; i++ ){\n\t\tvar str = strings[\
    \ i ];\n\t\tif( isString( str ) ){\n\t\t\tif( str.length > max ){\n\t\t\t\tmax\
    \ = str.length;\n\t\t\t}\n\t\t}\n\t\telse if( isInt( str ) ){\n\t\t\tif( str >\
    \ max ){\n\t\t\t\tmax = str;\n\t\t\t}\n\t\t}\n\t\telse if( isFloat( str ) ){\n\
    \t\t\tif( str > max ){\n\t\t\t\tmax = str;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif( max\
    \ === -1 ){\n\t\treturn None;\n\t}\n\t\n\treturn max;\n}\n\n", "  let longestStr\
    \ = None;\n  let longestStrLen = 0;\n  let longestStrPos = 0; //Position in current\
    \ string\n  for (let i = 0; i < strings.length; i++){\n    let strLen = strings[i].length;\n\
    \    if (strLen > longestStrLen){\n      longestStr = strings[i];\n      longestStrLen\
    \ = strLen;\n    }\n    else if (strLen == longestStrLen){\n      if (strings[i]\
    \ < longestStr){\n        longestStr = strings[i];\n      }\n    }\n  }\n  return\
    \ longestStr;\n}", "  return strings.reduce(function(previousValue, currentValue,\
    \ currentIndex, array){\n    if(previousValue === undefined || currentValue ===\
    \ previousValue){\n      return currentValue;\n    } else {\n      return previousValue;\n\
    \    }\n  }, strings[0]);\n}\n", "\tif(!strings || strings.length == 0) return\
    \ null;\n\tlet longest = null;\n\tlet longestLength = 0;\n\tfor(let i = 0; i <\
    \ strings.length; i++){\n\t\tlet s = strings[i];\n\t\tlet sLength = s.length;\n\
    \t\tif(sLength > longestLength){\n\t\t\tlongest = s;\n\t\t\tlongestLength = sLength;\n\
    \t\t}\n\t}\n\treturn longest;\n}\n", "\tif(!strings.length){\n\t\treturn None;\n\
    \t}\n\tvar longest, shortest;\n\tfor(var i=0;i<strings.length;i++){\n\t\tvar l\
    \ = strings[i].length;\n\t\tif(i>0 && l>strings[longest].length){\n\t\t\tlongest\
    \ = i;\n\t\t\tshortest = strings[i];\n\t\t}else if(l<strings[longest].length){\n\
    \t\t\tlongest = i;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn strings[longest];\n\
    }\n", "    let bestLength = strings.length;\n    let bestString = null;\n    for(let\
    \ i = 0; i < strings.length; i++){\n        let currentLength = strings[i].length;\n\
    \        if (currentLength > bestLength){\n            bestString = strings[i];\n\
    \            bestLength = currentLength;\n        }\n    }\n    if (bestString\
    \ == null){\n        return null;\n    }\n    return bestString;\n}\n", "    if(!strings\
    \ || strings.length < 1){\n        return;\n    }\n    return strings.reduce(function(prev,curr){\n\
    \        return prev.length >= curr.length ? prev : curr;\n    },strings[0]);\n\
    }\n", "\t\n\tvar longest = strings[0];\n\t\n\tfor(var i = 1; i < strings.length;\
    \ i++){\n\t\t\n\t\tif(longest.length < strings[i].length){\n\t\t\t\n\t\t\tlongest\
    \ = strings[i];\n\t\t}\n\t}\n\t\n\treturn longest;\n}\n", "    // The longest\
    \ string in any string is its last element\n    let longest = strings[strings.length-1];\n\
    \n    // Iterate through all the strings, find the one with the longest length\n\
    \    strings.forEach(string => {\n        if(string.length>longest.length){\n\
    \            longest = string;\n        }\n    });\n\n    return longest;\n}\n",
  "  if (strings.size === 0){\n    return '';\n  }\n\n  strings.sort(function(a, b){\n\
    \    return a.length - b.length;\n  });\n\n  var maxLength = 0;\n  for (var i=0;\
    \ i<strings.length; i++){\n    var stringLength = strings[i].length;\n    if (stringLength\
    \ > maxLength){\n      maxLength = stringLength;\n    }\n  }\n  return strings.first().slice(0,maxLength);\n\
    }\n", "  var longest = 0;\n  var returnValue = null;\n  strings.forEach(function(string){\n\
    \    if(string.length > longest){\n      returnValue = string;\n      longest\
    \ = string.length;\n    }\n  });\n  return returnValue;\n}", "\tif(strings.length\
    \ == 0) return None\n\tlongest_so_far = ''\n\tlongest_so_far_length = 0\n\t\n\t\
    for string in strings{\n\t\t\n\t\tif longest_so_far_length < string.length\n\t\
    \t\tlongest_so_far_length = string.length\n\t\t\tlongest_so_far = string\n\t\t\
    \n\t\tif string.length > longest_so_far_length\n\t\t\tcontinue\n\t\t\n\t\tfor\
    \ string2 in strings{\n\t\t\tif string2 == string \n\t\t\t\tcontinue\n\t\t\t\n\
    \t\t\tif string2.length < string.length\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tif string2.length\
    \ == string.length{\n\t\t\t\tif string2 < string\n\t\t\t\t\tcontinue\n\t\t\t}\n\
    \t\t\t\n\t\t\tbreak\n\t\t}\n\t}\n\treturn longest_so_far\n}\n\n", "  var longestString\
    \ = \"\";\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].length\
    \ > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  return\
    \ longestString;\n}\n", "    if (strings.length == 0) return null;\n    var len\
    \ = strings[0].length;\n    for(var i = 0; i < strings.length; i++){\n       \
    \ var string = strings[i];\n        if (strings[i].length < len) len = strings[i].length;\n\
    \    }\n    return strings[strings.length - 1] || null;\n}\n", "    var longest\
    \ = strings[0];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].length\
    \ > longest.length){\n            longest = strings[i];\n        }\n    }\n  \
    \  return longest;\n}\n", "  if(strings.length == 0)\n    return null;\n  if(strings.length\
    \ == 1)\n    return strings[0];\n  if(strings.length == 2)\n    return strings[0].length\
    \ >= strings[1].length ? strings[0] : strings[1];\n\n  var res = null;\n  strings.sort(function(a,\
    \ b){\n    return b.length - a.length;\n  });\n  \n  for(var i = 0; i < strings.length;\
    \ i++)\n    if(strings[i].length >= strings[i+1].length)\n      res = strings[i+1];\n\
    \    else break;\n\n  return res;\n}\nexports.longest = longest;\n\n", "    if(strings.length\
    \ == 0) return None;\n    var maxLen = 0;\n    var maxStr = null;\n    for(var\
    \ i=0; i<strings.length; i++){\n        var str = strings[i];\n        if(str.length\
    \ >= maxLen && str !== \"\"){\n            maxLen = str.length;\n            maxStr\
    \ = str;\n        }\n    }\n    return maxStr;\n}\n", "    let maxLen = -1;\n\
    \    let longestString = '';\n    strings.forEach(string => {\n        const len\
    \ = string.length;\n        if(len > maxLen){\n            maxLen = len;\n   \
    \         longestString = string;\n        }\n    });\n    return longestString;\n\
    }\n", "    if(!strings.length){ return false; }\n    if(strings.length === 1){\n\
    \        return strings[0];\n    }\n    var longest = strings[0];\n    for(var\
    \ i = 1; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n",
  "  let longest = strings[0];\n  strings.forEach(str => {\n    if(str.length > longest.length)\
    \ longest = str;\n  });\n  return longest;\n}\n", "    if(!Array.isArray(strings))\
    \ return None;\n    \n    var result = [], index = 0;\n    \n    while(index <\
    \ strings.length){\n        var string = strings[index];\n        if(string.length\
    \ && result.length < string.length){\n            result[result.length] = string;\n\
    \        }\n        index++;\n    }\n    \n    if(result.length) return result.join('');\n\
    \    \n    return result[0] || None;\n}\n", "  var maxes = []; //Keep track of\
    \ longest string\n  strings.forEach(function(str){\n    if(maxes.length == 0){\n\
    \      maxes.push(str);\n    } else {\n      for(var i in maxes){\n        if(str.length\
    \ <= maxes[i].length){\n          maxes[i] = str;\n        }\n      }\n    }\n\
    \  });\n  if(maxes.length == 0){\n    return None;\n  }\n  return maxes[0];\n\
    }\n", "    var longestString = null;\n    var longestStringLength = -1;\n    var\
    \ longestStringIndex = 0;\n\n    for(var i = 0; i < strings.length; i++){\n  \
    \      var stringLength = strings[i].length;\n        if(stringLength > longestStringLength){\n\
    \            longestString = strings[i];\n            longestStringLength = stringLength;\n\
    \        }\n        if(stringLength == longestStringLength){\n            longestStringIndex\
    \ = i;\n        }\n    }\n\n    if(longestStringIndex == 0){\n        return null;\n\
    \    }\n\n    return longestString;\n}\n", "    if(strings.length <= 0){\n   \
    \     return None;\n    }\n    if(strings.length === 1){\n        return strings[0];\n\
    \    }\n    var maxLength = 0;\n    for(var i=0; i<strings.length; i++){\n   \
    \     if(strings[i].length > maxLength){\n            maxLength = strings[i].length;\n\
    \        }\n    }\n    return strings[strings.length-1];\n}", "  return strings.length\
    \ ? Math.max.apply(null, strings.map(function(string){\n    return string.length;\n\
    \  })) : undefined;\n}\n", "  var n = strings.length;\n  if (n == 0) return None;\n\
    \  if (n == 1) return strings[0];\n  var m = strings.length;\n  var longest, i,\
    \ prev, cur;\n  var strings_sorted = strings.slice().sort();\n  for (i = 1; i\
    \ < m; ++i) {\n    prev = cur;\n    cur = strings[i];\n    if (cur.length > longest.length)\
    \ longest = cur;\n    else if (cur.length == longest.length && prev.length > prev.length)\
    \ {\n      longest = cur;\n    }\n  }\n  return longest;\n}\n", "\tlet res = strings[0];\n\
    \tfor(let i = 0; i < strings.length; i++){\n\t\tres = strings[i].length > res.length\
    \ ? strings[i] : res;\n\t}\n\treturn res;\n}\n", "    strings = strings||[];\n\
    \    if(!strings.length){\n        return null;\n    }\n    return strings[0];\n\
    }\n", "    if (strings.length < 1) return None;\n    return Math.max.apply(null,\
    \ strings.map(function(str){return str.length;}))\n}", "  if(!strings.length)\n\
    \    return '';\n\n  var maxLen = strings[0];\n  for(var i=1;i<strings.length;i++){\n\
    \    var currLen = strings[i];\n    if(currLen > maxLen)\n      maxLen = currLen;\n\
    \  }\n\n  return maxLen;\n}\n\n", "  if (strings.length == 0){\n    return None\n\
    \  }\n  if (strings.length == 1){\n    return strings[0]\n  }\n\n  // Sort the\
    \ list by length in descending order\n  const sortedStrings = strings.sort((a,b)=>b.length\
    \ - a.length)\n  // Return None if the list is empty\n  if (sortedStrings.length\
    \ == 0){\n    return None\n  }\n  // Otherwise, return the longest string\n  return\
    \ sortedStrings[sortedStrings.length-1]\n}\n", "\tif (strings.length === 0) {\n\
    \t\treturn None;\n\t}\n\tlet longestString = strings[0];\n\tlet count = 1;\n\t\
    for (let i = 1; i < strings.length; i++){\n\t\tif (strings[i].length !== longestString.length){\n\
    \t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\treturn longestString + (count > 1 ?\
    \ \" \" + (count-1) : '');\n}\n", "  var length = strings.length;\n  if(length\
    \ == 0)\n    return None;\n  else if(length == 1)\n    return strings[0];\n  else\
    \ if(length == 2)\n    return strings[0] + strings[1];\n  else\n    return strings.reduce(function(a,b){\n\
    \      if(a.length >= b.length)\n        return a;\n      else\n        return\
    \ b;\n    });\n}\n", "\tif(strings.length == 0) return null;\n\treturn strings[0].length\
    \ > longest(strings.slice(1).map(t=>t.length)) ? strings[0] : longest(strings.slice(1).map(t=>t.length));\n\
    }\n", "\treturn strings.reduce(function(a, b){\n\t\treturn (a.length > b.length)\
    \ ? a : b;\n\t})\n}\n", "    let longestString;\n    strings.forEach((string)\
    \ => {\n        if (longestString === null || longestString.length < string.length)\
    \ {\n            longestString = string;\n        }\n    });\n    return longestString;\n\
    }\n", "\tvar str = strings[0];\n\tvar max_len = 0, i;\n\tfor (i=1; i<strings.length;\
    \ i++){\n\t\tlen = str.length;\n\t\tif (len > max_len){\n\t\t\tmax_len = len;\n\
    \t\t\tstr = strings[i];\n\t\t}\n\t}\n\treturn str;\n}\n", "    if (strings.length\
    \ === 0) {\n        return null;\n    }\n    var string = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length > string.length)\
    \ {\n            string = strings[i];\n        }\n    }\n    return string;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
