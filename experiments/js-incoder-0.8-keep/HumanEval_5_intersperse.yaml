name: HumanEval_5_intersperse
language: js
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5,\
  \ 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2],\
  \ 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  return numbers.reduce(function(acc, n, i){\n    return acc.concat(i\
    \ > 0 && i < numbers.length-1 ? [delimeter] : []).concat(n);\n  });\n}\n", " \
    \ return numbers.reduce(function(acc, el, i){\n    if(i === 0) return [el]\n \
    \   if(i === numbers.length - 1) return [el, acc]\n    return [el, delimeter,\
    \ acc]\n  })\n}\n</cell>\n<text>\n6. Find\nGiven a list or array of numbers nums,\
    \ return the first number that is a multiple of 5 and less than or equal to 20.\
    \ If there is no such number, return 20.\n\nA Multiples Of 5 problem solved using\
    \ reduce is\n\narr.reduce(function(memo, num){\n  return memo + num;\n})\nWrite\
    \ a function that takes a list and returns the first number that is a multiple\
    \ of 5 and less than or equal to 20. If there is no such number, return 20.\n\n\
    The first number is 15, a multiple of 5 and is less than 20\nThe second number\
    \ is 21, a multiple of 5 and is less than 20\nThe third number is 20, a multiple\
    \ of 5 and is less than 20\n\n</text>\n<cell>", "  return numbers.reduce(function(result,\
    \ number){\n    if(number){\n      result.push(number);\n      result.push(delimeter);\n\
    \    }\n    return result;\n  }, []);\n}\n", "\treturn numbers.reduce(function(acc,\
    \ number){\n\t\treturn acc.concat(acc.length > 0 ? [delimeter, number] : [number]);\n\
    \t}, []);\n}\n", "  if (isArr(numbers) && numbers.every(isNum)) {\n    return\
    \ numbers.reduce((acc, n) => {\n      if (n) {\n        acc.push(n);\n      }\n\
    \      return acc;\n    }, []).join(delimeter);\n  }\n  return null;\n}\n", " \
    \ numbers = numbers.reduce(function(acc, curr){\n    return acc.concat(delimter\
    \ ? [curr] : [curr,delimter]);\n  }, []);\n  return numbers.length ? numbers.shift()\
    \ : [];\n}\n},{\"./intersperse\":183}],185:[function(require,module,exports){\n\
    'use strict';\n", "  var nums = [];\n  for(var i=0; i < numbers.length; i++){\n\
    \    nums.push(numbers[i]);\n    if(i%2 == 0) nums.push(delimeter);\n  }\n  return\
    \ nums;\n}\n", "  \n  var len = numbers.length;\n  var res = [];\n\n  for(var\
    \ i = 0; i < len; i++){\n    res.push(numbers[i]);\n\n    if(i + 1 < len){\n \
    \     res.push(delimeter);\n    }\n  }\n\n  return res;\n}\n", "  return numbers.reduce(function(arr,\
    \ num){\n    return arr.concat( [num], num !== numbers[numbers.length-1] ? [delimeter]\
    \ : []);\n  }, []);\n}\n", "  if(numbers.length === 0) return [];\n  if(numbers.length\
    \ === 1) return numbers[0];\n\n  var result = new Array(numbers[0].length);\n\n\
    \  for(var i = 0, ii = numbers.length; i < ii; i++){\n    result[i] = [];\n\n\
    \    for(var j = 0, jj = numbers[i].length; j < jj; j++){\n      result[i][j]\
    \ = numbers[i][j];\n    }\n  }\n\n  return result;\n}\n", "  var result = [],\n\
    \      i = 0,\n      length;\n\n  numbers = numbers.split(delimeter);\n  length\
    \ = numbers.length;\n\n  for (; i < length; i++){\n    result.push(numbers[i]);\n\
    \    if (i < length-1) {\n      result.push(delimeter);\n    }\n  }\n\n  return\
    \ result;\n}\n", "  var result = [];\n  for (var i = 0; i < numbers.length; i\
    \ += 1) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) result.push(delimeter);\n\
    \  }\n  return result;\n}\n", "  numbers = numbers.reduce(function(result, number){\n\
    \    result.push(number);\n    return result;\n  }, []);\n  numbers = numbers.reduce(function(result,\
    \ number){\n    if(result.length < delimeter){\n      result.push(number);\n \
    \   }\n    return result;\n  }, []);\n  return numbers;\n}\n", "  var result =\
    \ [];\n  for (var i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n\
    \    if ((i < numbers.length - 1) && numbers[i+1] != undefined){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}", "  return numbers.reduce((a, b) => a.concat(b).join(delimeter),\
    \ []);\n}\n", "    if ( arguments.length < 1 ){\n        throw new TypeError(\"\
    intersperse expects at least 1 argument\");\n    }\n\n    var result = [];\n \
    \   for ( var i = 0; i < numbers.length; i++ ){\n        result.push( numbers[i]\
    \ );\n        if ( i !== 0 && i % delimeter == 0 ){\n            result.push(\
    \ delimeter );\n        }\n    }\n    return result;\n}\n", "  return numbers.reduce(function(previous,\
    \ current, index){\n    return previous + delimeter + current;\n  }, '');\n}\n",
  "  return numbers.reduce(function(previous, current){\n    return previous + delimeter\
    \ + current;\n  }, '');\n}", "  if (numbers.length <= 1) return numbers;\n  return\
    \ numbers.reduceRight(function(soFar, number, index){\n    var nextNumber = index\
    \ + 1 < numbers.length ? numbers[index+1] : undefined;\n    return soFar.concat([delimeter,\
    \ number, nextNumber]);\n  }, [numbers[0]]);\n}\n", "  if(numbers.length == 0)\
    \ return [];\n  if(numbers.length == 1) return numbers;\n  delimeter = typeof\
    \ delimeter === 'number' ? delimeter : ',';\n  \n  var result = [];\n  var count\
    \ = 0;\n  var i;\n  for(i = 0; i < numbers.length; i++){\n    count++;\n    if(i\
    \ == numbers.length -1){\n      result[count] = numbers[i];\n    } else if(numbers[i+1]\
    \ == numbers[i]){\n      result[count] = numbers[i] + delimeter + numbers[i+1];\n\
    \      i = i+2;\n    } else {\n      result[count] = numbers[i] + delimeter;\n\
    \    }\n  }\n  return result;\n}\n", "  return numbers.reduce(function(newNumbers,\
    \ number){\n    if(!newNumbers.length){\n      newNumbers = newNumbers.concat([]);\n\
    \    }\n    newNumbers.push(number);\n    newNumbers = newNumbers.concat(numbers.shift());\n\
    \    return newNumbers;\n  }, []).join(delimeter);\n}\n", "  if(numbers.length\
    \ === 0){\n    return [];\n  }\n  var result = [];\n  for(var i = 0; i < numbers.length\
    \ - 1; i++){\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i+1]);\n\
    \  }\n  return result;\n};\n", "  if(delimeter == null || delimeter === undefined){\n\
    \    delimeter = '';\n  }\n  \n  numbers = numbers\n    .filter(function (x) {\n\
    \      return x != null;\n    })\n    .reduce(function(arr, number){\n      return\
    \ arr.concat([number]);\n    }, []);\n  \n  var output = [];\n  var lastIndex\
    \ = numbers.length - 1;\n  \n  numbers = numbers.map(function(number, index){\n\
    \    var nextNumber = numbers[index + 1];\n    \n    output.push(number);\n  \
    \  \n    if (nextNumber !== undefined && nextNumber !== '') {\n      output.push(delimeter);\n\
    \    }\n    \n    return output;\n  });\n  \n  return output.join('');\n}\n",
  "    var len = numbers.length,\n        result = [],\n        i;\n    for(i = 0;\
    \ i < len; i += 1) {\n        result.push(numbers[i]);\n        if (i !== len\
    \ - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n\
    }\n", "  if(Array.isArray(numbers)){\n    if(numbers.every(function(num){\n  \
    \    return Array.isArray(num);\n    })){\n      return numbers.map(function(num){\n\
    \        return intersperse(num,delimeter)\n      });\n    } else {\n      return\
    \ intersperse([numbers],delimeter);\n    }\n  } else {\n    return numbers.split(delimeter);\n\
    \  }\n}\n", "  if(numbers.length == 0){\n    return [];\n  }\n\n  return intersperse_rec(numbers,\
    \ delimeter, 0, 0);\n}\n", "    delimeter = delimeter || \"\";\n    if(numbers.length\
    \ === 0) return \"\";\n    var out = numbers.join(\"\") + delimeter;\n    var\
    \ l = out.length - 1;\n    while(l--){\n        while(out.charAt(l) === delimeter)\
    \ out = out.substr(0, l) + out.substr(l+1);\n        if(out.length > 0) out =\
    \ out.substr(0, out.length - 1);\n    }\n    return out;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThank you very much for your answer! It works great on python,\
    \ and I did realize that my question was a bit too vague. Sorry about that. I\
    \ would like to keep the comments in the code, but I don't think that comments\
    \ are allowed in SO answers, would you be willing to take a look at the code and\
    \ help me with my question? I haven't been able to find other questions similar\
    \ to this one.\n<|/ c |>\n<| c |>\nJust saw the update to your question. Well,\
    \ yes, that would help. I tried to explain the code but I could not.\n<|/ c |>\n\
    <| c |>\nSorry for the delay, your answer was very helpful. I don't know why I\
    \ thought it would be more complicated than that. I had an idea about how to do\
    \ it and that made me think that there might be something that could be done in\
    \ a single line of code, which your answer showed me how to do, thanks again!\n\
    <|/ c |>\n<| c |>\nI was curious so I wrote it up in python and converted it to\
    \ javascript. [Here's the gist](https://gist.github.com/hughchristensen/74d1bc5457a348ff33487899abefe2f4)\n\
    <|/ c |>\n<| c |>\nNo problem. I was thinking about it a lot when I was writing\
    \ it. I thought it would be a lot easier if I just had a function that took a\
    \ delimiter as input and returned the list of interspersed numbers.\n<|/ c |>\n\
    <| a |>\nYou can use the following code to intersperse items in the array with\
    \ a delimiter between two consecutive items\n<code>", "  let result = [];\n  let\
    \ index = 0;\n  let len = numbers.length;\n  if(delimeter > len){\n    delimeter\
    \ = len;\n  }\n  for (let i = 0; i < len; i++){\n    if(i === 0){\n      result.push(numbers[index]);\n\
    \      index++;\n      continue;\n    }\n    result.push(numbers[index], delimeter);\n\
    \    index++;\n  }\n  return result;\n}\n", "\tif(!delimeter) delimeter = ',';\n\
    \tif(numbers.length < 2) return numbers;\n\tvar result = numbers.slice();\n\t\
    result.splice(0,0,delimeter);\n\treturn result.join('');\n}\n", "  var newNumbers\
    \ = []\n  for(var i = 0; i < numbers.length - 1; i++){\n    newNumbers.push(numbers[i])\n\
    \    newNumbers.push(delimeter)\n  }\n  newNumbers.push(numbers[numbers.length\
    \ - 1])\n  return newNumbers\n}\n", "  var result = [];\n  for (var i = 0, len\
    \ = numbers.length; i < len; i++){\n    result.push(numbers[i]);\n    if (i <\
    \ (len - 1)){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n",
  "  return numbers.reduce(function (output, num){\n    return output.concat([num,\
    \ delimeter, num]);\n  }, []);\n}\n", "  var list = [];\n  for(var i = 0; i <\
    \ numbers.length; i++){\n    list.push(numbers[i]);\n    if(i === 0){\n      list.push(delimeter);\n\
    \    }\n  }\n  return list;\n}\n", "  var result = [];\n  for (var i = 0; i <\
    \ numbers.length - 1; i++){\n    result.push(numbers[i]);\n    result.push(delimeter);\n\
    \    result.push(numbers[i + 1]);\n  }\n  return result;\n};\n", "  //If not an\
    \ array, return arguments as it is\n  if(!Array.isArray(numbers)){\n    return\
    \ numbers;\n  }\n  var result = [];\n  //If numbers is empty, return an empty\
    \ array as result\n  if(numbers.length === 0){\n    return result;\n  }\n  var\
    \ currentNumber = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n  \
    \  result.push(currentNumber);\n    currentNumber = numbers[i];\n    result.push(delimeter);\n\
    \  }\n  result.push(currentNumber);\n  return result;\n}\n", "  return numbers.reduce(function(acc,\
    \ n){\n    return acc.concat(n);\n  }, []).join(delimeter)\n}\nmodule.exports\
    \ = intersperse;\n\n},{}],6:[function(require,module,exports){", "  var length\
    \ = numbers.length\n  if(delimeter===undefined) delimeter = \" \"\n  var result\
    \ = numbers.reduce(function(result, item, index){\n    return result + delimeter\
    \ + item\n  }, '')\n  if(length<delimeter.length){\n    result += (length-delimeter.length)*delimeter\n\
    \  }\n  return result\n}\n", "  return numbers.reduce(function(acc, curr){\n \
    \   if(acc != null){\n      return acc.concat([delimeter, curr]);\n    }else{\n\
    \      return [curr];\n    }\n  }, null);\n}\n</code>\n<|/ a dscore=4 |>\n<| a\
    \ dscore=3 |>\nThe other answers here were helpful, but I felt I had to do a complete\
    \ solution so I decided to write a library for it so I could reuse it across different\
    \ projects without having to worry about implementation details or having to maintain\
    \ multiple versions of the same function.  It also comes with some basic testing\
    \ code to help out in development.  You can find the library here.\nA basic example\
    \ might look like this:\n<code>\nimport { intersperse } from 'intersperse';\n\
    describe('Intersperse', () => {\n  it('can intersperse a delimiter between an\
    \ array of numbers', () => {\n    const interspersedNumbers = intersperse([1,\
    \ 2, 3], ',');\n    expect(interspersedNumbers).toEqual([1, ',', 2, ',', 3]);\n\
    \  });\n  it('can intersperse a delimiter between an array of objects', () =>\
    \ {\n    const interspersedObjects = intersperse([\n      { a: 1, b: 2 },\n  \
    \    { a: 3, b: 4 },\n      { a: 5, b: 6 }\n    ], ',');\n    expect(interspersedObjects).toEqual([\n\
    \      { a: 1, b: 2 },\n      { a: 3, b: 4 },\n      { a: 5, b: 6 },\n    ]);\n\
    \  });\n});\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you! This\
    \ is awesome. I've been using lodash for most of my projects, but this is really\
    \ cool!\n<|/ c |>\n<| a |>\nA bit late to the party here, but I thought I'd just\
    \ share my own take on a solution, inspired by this question:\n<code>", "  if(numbers.length\
    \ === 0 || delimeter === undefined) return\n  var length = numbers.length\n  var\
    \ result = []\n  var i = 0\n  while(i<length){\n    result.push(numbers[i])\n\
    \    result.push(delimeter)\n    i++\n  }\n  return result\n}\n\n},{}],13:[function(require,module,exports){\n\
    var parse = require('../parse/index.js')\nvar stringify = require('../stringify/index.js')\n\
    \nvar DATE = /^(\\d\\d\\d\\d)(-)?(\\d\\d)(-)?(\\d\\d)$/\nvar DAY = /^(\\d\\d)(-)?(\\\
    d\\d)$/\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\\
    d\\d)?)?$/\nvar WEEK = /^(\\d\\d\\d\\d)(-)?(\\d\\d)$/\nvar MONTH = /^(\\d\\d)(-)?(\\\
    d\\d)$/\nvar YEAR = /^(\\d\\d)(-)?(\\d\\d)$/\n\nvar setUTCSeconds = Date.prototype.setUTCSeconds\n\
    var setUTCMinutes = Date.prototype.setUTCMinutes\nvar setUTCHours = Date.prototype.setUTCHours\n\
    var setUTCDay = Date.prototype.setUTCDay\nvar setUTCISOYear = Date.prototype.setUTCFullYear\n\
    var setUTCMonth = Date.prototype.setUTCMonth\nvar setUTCDate = Date.prototype.setUTCDate\n\
    var setUTCWeek = Date.prototype.setUTCFullYear\n\nvar MILLISECONDS_IN_HOUR = 3600000\n",
  "  var first = true;\n  var num;\n  while((num = numbers.shift())){\n    if (first){\n\
    \      first = false;\n    } else {\n      numbers.unshift(num);\n    }\n    if\
    \ (numbers.length === 0) return [];\n    numbers.unshift(num);\n  }\n  return\
    \ numbers;\n}\n", "  if(numbers.length <= 1) {\n    return numbers;\n  }\n  var\
    \ result = [];\n  var j = 0;\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[j]);\n\
    \    j++;\n  }\n  return result;\n}\n", "  return numbers.reduce(function(acc,\
    \ n){\n    return acc.concat( [n, delimeter, n] );\n  });\n}\n", "    if(numbers.length\
    \ == 0) return [];\n    var output = [],\n        counter = 1;\n    for (var i\
    \ = 0; i < numbers.length; ++i){\n        if (i) output.push(delimeter); //insert\
    \ a delimeter\n        output.push(numbers[i]);\n        counter += 1;\n     \
    \   if (counter >= numbers.length) counter = 1;\n    }\n    return output;\n}\n",
  "  var result = [];\n  numbers.forEach(function(el, i) {\n    result.push(el);\n\
    \    if(i) result.push(delimeter);\n  });\n  return result;\n}\n},{}],154:[function(require,module,exports){\n\
    'use strict';\n\nvar each = require('async-each-series');\nvar reduce = require('async-reduce');\n\
    var slice = require('sliced');\nvar extend = require('xtend');\nvar has = require('has');\n\
    var debounce = require('debounce');\nvar defaults = require('defaults');\nvar\
    \ pluck = require('lodash.pluck');\nvar reduceRight = require('reduce-right');\n\
    var isPlainObject = require('is-plain-object');\n\nvar defaultOptions = {\n  delay:\
    \ 500,\n  errorHandler: function(e){\n    throw e;\n  },\n  requestHeaders: {},\n\
    \  retry: {\n    maxAttempts: 3,\n    retryDelay: 1000,\n  }\n};\n", "  if(arguments.length\
    \ <= 1){\n    numbers = [];\n  }\n  \n  return numbers.reduce(function(acc, cur){\n\
    \    if(acc.length){\n      acc.push(cur);\n    }else{\n      acc.push(cur, delimeter);\n\
    \    }\n    \n    return acc;\n  }, []);\n}", "  var result = [];\n  var i = 0;\n\
    \  while(i < numbers.length){\n    result.push((typeof delimeter == 'number')\
    \ ? numbers[i] : numbers[i]);\n    i++;\n  }\n  return result;\n}\n", "    var\
    \ result = [],\n        len = numbers.length,\n        i;\n\n    for(i=0; i<len;\
    \ i++){\n        result.push(numbers[i]);\n        if (i !== len-1) {\n      \
    \      result.push(delimeter);\n        }\n    }\n\n    return result;\n}\n",
  "  if (!isArray(numbers) || numbers.length <= 0) {\n    return numbers\n  }\n  var\
    \ result = []\n  var i = 0\n  while (i + 1 < numbers.length){\n    result.push(numbers[i++])\n\
    \    result.push(delimeter)\n    result.push(numbers[i++])\n  }\n  if (i === numbers.length)\
    \ {\n    result.push(numbers[i])\n  }\n  return result\n}\n", "  var result =\
    \ [];\n  intersperse:\n  for(var i = 0, n = numbers.length; i < n; i++){\n   \
    \ var number = numbers[i];\n    result.push(number);\n    if(number === delimeter)\
    \ continue intersperse;\n    for(var j = i + 1; j < n; j++){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n};\nexports.default = intersperse;\n", "    var\
    \ result = []\n    if(numbers.every(function(n){return typeof n === \"number\"\
    })){\n        numbers = numbers.map(function(n){return String(n)});\n    }\n \
    \   var temp;\n    if(numbers.length < 2){\n        return result;\n    }\n  \
    \  if(delimeter === undefined){\n        result.push(numbers[0])\n        if(numbers.length\
    \ > 1){\n            result.push(delimeter + numbers[1]);\n        }\n       \
    \ return result;\n    }\n    else if(numbers.every(function(n){return typeof n\
    \ === \"string\"})){\n        numbers = numbers.map(function(n){return n.toString()});\n\
    \    }\n    temp = numbers.shift()\n    while(numbers.length > 0){\n        result.push(temp)\n\
    \        temp = numbers.shift()\n        result.push(delimeter + temp)\n    }\n\
    \    return result\n}\n", "  var results = [];\n  var index = -1;\n  while (numbers.length\
    \ > ++index) results.push(numbers.splice(0,2).join(delimeter));\n  return results;\n\
    }", "  var len = numbers.length,\n      array = new Array(len+1);\n  for(var i=0,\
    \ val; i<len; i++){\n    val = numbers[i];\n    if(i){\n      array[--i] = val;\n\
    \    }\n  }\n  array[len] = val;\n  return array;\n}\n},{}],33:[function(_dereq_,module,exports){",
  "  var result = [], len = numbers.length;\n  for(var i = 0; i < len; i++){\n   \
    \ result.push(numbers[i]);\n    if( i < len - 1){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}", "  var interspersed = [];\n  for(var i = numbers.length\
    \ - 1; i >= 0; i--){\n    interspersed.push(numbers[i]);\n    if(i !== 0){\n \
    \     interspersed.push(delimeter);\n    }\n  }\n  return interspersed;\n}\n",
  "\tif (numbers.length === 0) {\n\t\treturn [];\n\t}\n\tif (numbers.length === 1)\
    \ {\n\t\treturn [numbers[0]];\n\t}\n\tvar returnArray = [];\n\t\n\t// intersperse\
    \ first element as first element\n\treturnArray.push(numbers[0]);\n\t\n\t// intersperse\
    \ delimeter between first and second elements\n\treturnArray.push(delimeter);\n\
    \t\n\t// insert delimeter and intersperse remaining elements\n\tfor (var i = 1;\
    \ i < numbers.length; i++) {\n\t\treturnArray.push(numbers[i]);\n\t\treturnArray.push(delimeter);\n\
    \t}\n\t\n\t// return interspersed list and finish processing\n\treturn returnArray.reverse();\n\
    }\n", "  if (Array.isArray(numbers) === false){\n    throw new TypeError('`numbers`\
    \ is not an Array')\n  }\n  if (delimeter === null || typeof delimeter !== 'object'){\n\
    \    throw new TypeError('`delimeter` is not an object')\n  }\n  if (Array.isArray(delimeter)\
    \ === false){\n    throw new TypeError('`delimeter` is not an Array')\n  }\n \
    \ var result = []\n  var index = 0\n  var current = null\n  for (var i = 0; i\
    \ < numbers.length; i++) {\n    current = numbers[i]\n    delimeterIndex = index\n\
    \    while (delimeterIndex > 0 && delimeter[delimeterIndex - 1] === current){\n\
    \      delimeterIndex--\n    }\n    result.splice(delimeterIndex + 1, 0, current)\n\
    \    index++\n  }\n  return result\n}\n", "\tvar lastIndex = numbers.length-1;\n\
    \tif(numbers.length == 0) return [\"\"];\n\tif(delimeter instanceof Array){\n\t\
    \treturn numbers.reduce(function(prev, curr, index, arr){\n\t\t\treturn prev.concat(delimeter.map(function(item){\n\
    \t\t\t\treturn item + curr;\n\t\t\t}));\n\t\t});\n\t}\n\treturn numbers.reduce(function(prev,\
    \ curr, index){\n\t\tif(index != lastIndex){\n\t\t\treturn prev.concat([curr]);\n\
    \t\t}\n\t\treturn prev;\n\t}).concat([delimeter]);\n}\n", "  var len = numbers.length;\n\
    \  var res = numbers[0];\n  for (var i = 1; i < len; i++){\n    if (i < len-1){\n\
    \      res += delimeter + numbers[i];\n    } else {\n      res += numbers[i];\n\
    \    }\n  }\n  return res;\n}\n", "  return numbers\n    .slice(0, 1)\n    .concat([delimeter])\n\
    \    .concat(numbers.slice(1));\n}\n", "  var output = [];\n  for(var i = 0; i<numbers.length;i++){\n\
    \    output.push(numbers[i]);\n  }\n  for(var j=1; j<delimeter.length; j++){\n\
    \    output.unshift(output.shift());\n  }\n  return output;\n}", "  var length\
    \ = numbers.length;\n  if(numbers.length > 1){\n    var numbersWithoutDelimeter\
    \ = numbers.slice(0, delimeter + 1);\n    var numbersWithDelimeter = numbers.slice(delimeter,\
    \ length);\n    return numbersWithoutDelimeter.concat(delimeter, numbersWithDelimeter);\n\
    \  }\n  return numbers;\n}\n", "  return numbers.reduce(function(acc, num){\n\
    \    acc.push(num);\n    if(numbers.length) acc.push(delimeter); \n    return\
    \ acc;\n  }, []);\n}\n", "    var result = numbers.reduce(function(previous, current){\n\
    \        return previous + delimeter + current;\n    }, '');\n    return numbers.length\
    \ === 1 ? result[0] : result;\n}", "  // Initialize result array\n  var result\
    \ = [];\n  // Initialize a 'counter' variable\n  var counter = 0;\n  // Iterate\
    \ through input numbers\n  for(var i=0, len=numbers.length; i<len; i++){\n   \
    \ // If the current element of input array is not empty, \n    // add the current\
    \ element to result array\n    if(numbers[i]){\n      result[result.length] =\
    \ numbers[i];\n      // Increment 'counter' variable\n      counter++;\n    }\n\
    \    // If the 'counter' variable has reached its limit (2 in this case),\n  \
    \  // push element 'delimeter' to the result array\n    if(counter == 2){\n  \
    \    result[result.length] = delimeter;\n      // Reset the counter\n      counter\
    \ = 0;\n    }\n  }\n  // Return the result array\n  return result;\n}\n", "\t\
    var result = [];\n\tfor(var i = 0, len = numbers.length; i < len; i+=1){\n\t\t\
    result.push(numbers[i]);\n\t\tif(numbers[i] === delimeter){\n\t\t\tresult.push(numbers[i+1]);\n\
    \t\t\ti += 1;\n\t\t}\n\t}\n\treturn result;\n}\n", "  if(numbers.length === 0)\
    \ return [];\n  if(delimeter === undefined) delimeter = ',';\n  var result = [];\n\
    \  var len = numbers.length;\n  for(var i=0; i<len-1; i++){\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n    result.push(numbers[i+1]);\n  }\n  if(len >\
    \ 0) result.push(numbers[len-1]);\n  return result;\n}\n", "  if (numbers.length\
    \ === 0) return []; // numbers is []\n\n  return numbers.reduce(function(list,\
    \ number){\n    return list.concat(intersperse([number], delimeter));\n  }, []).concat(delimeter).join(\"\
    \"); //return number + intersperse(number + number, delimeter)\n}\n", "  if(delimeter===void\
    \ 0)\n    delimeter = ',';\n\n  if(!is.array(numbers)){\n    return numbers;\n\
    \  }\n  if(!is.number(delimeter))\n    return intersperse(numbers.toString().split(',\
    \ '), delimeter);\n\n  var output = List.empty();\n  List.iter(function(number){\n\
    \    output = output.cons(number);\n  }, numbers);\n  return output.to_array();\n\
    }\n", "  if (isNil(numbers) || isNil(delimeter)){\n    return numbers;\n  }\n\
    \  \n  if(isNil(numbers[0])){\n    return [numbers.join('')];\n  }\n  \n  let\
    \ length = numbers.length;\n  let result = [];\n  \n  for (let i = 0; i < length;\
    \ i++) {\n    if (i > 0) {\n      result.push(delimeter);\n    }\n    \n    result.push(numbers[i]);\n\
    \  }\n  \n  return result;\n}\n", "  return numbers.reduce(function(array, number){\n\
    \    if (number != 0) array.unshift(number);\n    if (number === delimeter) return\
    \ array;\n    else return array.concat([number]);\n  }, []);\n}\n", "  var out\
    \ = [];\n  for(var i = 0, len = numbers.length; i < len; i++){\n    out.push(numbers[i]);\n\
    \    if(i < (len - 1)){\n      out.push(delimeter);\n    }\n  }\n  return out;\n\
    }\n", "    delimeter = delimeter || ',';\n    var output = [];\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        output.push.apply(output, numbers.slice(i,\
    \ i + 2));\n    }\n    return output.join(delimeter);\n}\n", "  var numbersInRange;\n\
    \  \n  if(delimeter === undefined){\n    delimeter = ',';\n  }\n  \n  numbersInRange\
    \ = numbers.reduce(function(previousValue, currentValue, index, array){\n    var\
    \ currentNumber;\n    \n    if(index === 0){\n      previousValue.push(currentValue);\n\
    \      return previousValue;\n    }\n    \n    currentNumber = previousValue[previousValue.length\
    \ - 1];\n    \n    if(index === array.length - 1){\n      currentNumber += delimeter\
    \ + currentValue;\n      return previousValue.concat([currentNumber]);\n    }\n\
    \    \n    previousValue.push(currentNumber);\n    return previousValue;\n  },\
    \ []);\n  \n  return numbersInRange;\n}\n", "  numbers = numbers === undefined\
    \ ? [] : numbers;\n  delimeter = delimeter === undefined ? ',' : delimeter;\n\
    \  var interspersedNumbers = [];\n  interspersedNumbers.length = numbers.length;\n\
    \  var i = 0;\n  var j = numbers.length - 1;\n  while(i <= j){\n    interspersedNumbers[i\
    \ + 0] = numbers[i++];\n    interspersedNumbers[i + 1] = numbers[j--];\n  }\n\
    \  interspersedNumbers[i + 0] = numbers[j];\n  interspersedNumbers.length = j\
    \ + 1;\n  return interspersedNumbers;\n}\n", "  \n  // if the length of numbers\
    \ is 0 or delimeter is 0\n  // return the numbers as is\n  // else return numbers\
    \ + 'delimeter' + intersperse(numbers, delimeter-1)\n  \n  if(numbers.length ==\
    \ 0 || delimeter == 0){\n    return numbers;\n  }\n  \n  // else return the numbers\
    \ + 'delimeter' + intersperse(numbers, delimeter-1)\n  return numbers.concat(delimeter).concat(intersperse(numbers,\
    \ delimeter-1));\n}\n", "  if(numbers.length < 2)\n    return numbers;\n  var\
    \ newArr = [];\n  var newArrLen = numbers.length;\n  var numbersInserted = 0;\n\
    \  var previousNumber = numbers[0];\n  var previousIndex = numbersInserted;\n\
    \  for(var i = 0; i < newArrLen; i++){\n    var currentNumber = numbers[i];\n\
    \    var currentIndex = i;\n    while(currentIndex > numbersInserted && currentNumber\
    \ === previousNumber){\n      currentIndex--;\n      previousIndex++;\n    }\n\
    \    newArr.splice(previousIndex, 0, currentNumber);\n    newArrLen++;\n    numbersInserted\
    \ += 1;\n    previousNumber = currentNumber;\n    previousIndex = currentIndex;\n\
    \  }\n  newArr.splice(previousIndex, 1);\n  return newArr;\n}", "\tfor(var i =\
    \ numbers.length - 1; i > -1; i--){\n\t\tnumbers.splice(i, 0, delimeter);\n\t\
    }\n\treturn numbers;\n}\n\n", "  var numbersWithDelimeter = [], // A number with\
    \ a delimeter\n      numbersWithoutDelimeter = [],\n      temp;\n\n  numbers.forEach(function(number){\n\
    \    numbersWithDelimeter.push(number);\n  });\n  \n  temp = numbers.shift();\n\
    \  while (numbers.length > 0) {\n    numbersWithoutDelimeter.push(temp);\n   \
    \ temp = numbers.shift();\n  }\n  \n  return numbersWithDelimeter.concat(numbersWithoutDelimeter).join(delimeter);\n\
    }\n", "  if(numbers.length <= 1) return numbers;\n  \n  var result = [];\n  var\
    \ count = 0;\n  \n  for(var i = 0; i < numbers.length-1; i++){\n    count++;\n\
    \    if((count % 2) == 1) result.push(delimeter);\n    result.push(numbers[i]);\n\
    \  }\n  \n  result.push(delimeter);\n  \n  return result.concat(intersperse(numbers.slice(numbers.length-1),\
    \ delimeter));\n}\n},{}],13:[function(require,module,exports){", "  var result\
    \ = []\n  if(numbers.length <= 1) return numbers\n  for(var i = 0, l = numbers.length;\
    \ i < l; i++){\n    result.push(numbers[i])\n    if(i + 1 < l) result.push(delimeter)\n\
    \  }\n  return result\n}\n", "  var output = [],\n      idx;\n\n  for (idx = 0;\
    \ idx < numbers.length-1; idx++){\n    output.push(numbers[idx]);\n    output.push(delimeter);\n\
    \    output.push(numbers[idx+1]);\n  }\n  output.push(numbers[idx]);\n  return\
    \ output;\n}\n", "  if (numbers.length == 0) return []\n  if (numbers.length ==\
    \ 1) return numbers[0]\n  return [ numbers[0], ...intersperse(numbers.slice(1),\
    \ delimeter), delimeter].join(\"\")\n}\n", "  if (delimeter == null) {\n    return\
    \ intersperseNumber(numbers);\n  } else {\n    var result = new intersperseObject(numbers,\
    \ delimeter);\n    return result;\n  }\n}\n", "    numbers = _.toArray(numbers);\n\
    \    delimeter = _.isString(delimeter) ? delimeter : defaultDelimiter(delimeter);\n\
    \    return numbers.join(delimeter).replace(/[0-9]/g, function(match){\n     \
    \   return delimeter + match;\n    });\n}\n", "\treturn numbers.reduce(\n\t\t\
    function(acc, num){\n\t\t\tvar numsWithDelimeter = [num].concat(acc);\n\t\t\t\
    return numsWithDelimeter.join(delimeter);\n\t\t},\n\t\t[]\n\t);\n}\n", "  var\
    \ interspersed=[]\n  numbers.forEach(function(number){\n    interspersed.push(number)\n\
    \  })\n  return interspersed.join(delimeter)\n}", "    if(numbers.length === 0)\
    \ return [];\n    return [\n        ...numbers.slice(0, -1), // copy all but the\
    \ last element\n        ...delimeter,\n        ...numbers.slice(-1, numbers.length),\
    \ // copy the last element\n    ]\n}\n", "  if (!Array.isArray(numbers)) return\
    \ numbers;\n  var length = numbers.length;\n  var result = new Array(length+1);\n\
    \  result[length] = numbers[0];\n  for(var i=1; i<length; i++){\n    result[i]\
    \ = result[i - 1] + delimeter + numbers[i];\n  }\n  return result;\n}\n", "  if(numbers.length\
    \ == 0) return [];\n  if(delimeter == undefined) delimeter = ' ';\n  return numbers.map(function(number,\
    \ index){\n    return index == 0 ? number : delimeter + number;\n  }).join('');\n\
    }", "  var interspersednumbers = []\n  for(var i = 0; i<numbers.length; i++){\n\
    \    interspersednumbers.push(numbers[i])\n  }\n  for(var i = 0; i<interspersednumbers.length;\
    \ i++){\n    interspersednumbers.push(delimeter)\n  }\n  return interspersednumbers\n\
    }\n", "  let count = 0;\n  return numbers.reduceRight((prev, curr) => {\n    count++;\n\
    \    if (count > delimeter) {\n      count = 1;\n      return [curr];\n    } else\
    \ {\n      return [...prev, curr];\n    }\n  }, []);\n}\n", "  var arr = numbers.slice();\n\
    \  return arr.map(function(a){\n    return delimeter ? a+delimeter : a\n  }).join(\"\
    \");\n}\nmodule.exports = intersperse;\n\n},{}],33:[function(_dereq_,module,exports){",
  "  return numbers.reduce(function (acc, num){\n    return acc.concat(num, delimeter);\n\
    \  }, []).slice(1).join(delimeter);\n}\n", "  return numbers.reduce(function(acc,\
    \ n){\n    return acc.concat(n ? [delimeter, n] : []);\n  }, []);\n}\n", "   \
    \ var output = [];\n    for(var i = 0; i < numbers.length - 1; i++){\n       \
    \ output.push(numbers[i]);\n        output.push(delimeter);\n        output.push(numbers[i+1]);\n\
    \    }\n    output.push(numbers[numbers.length - 1]);\n    return output;\n}\n",
  "    if(numbers.length === 0) return [];\n    return numbers.reduce(function(list,\
    \ number){\n        if(number === delimeter) return list;\n        if(number !==\
    \ delimeter) list = [number, list];\n        return list;\n    });\n}\n</textarea>\n\
    \t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h2 class=\"mume-header\" id=\"\
    functions\">Functions</h2>\n\t\t\t\t\t<p>A function takes in arguments and performs\
    \ a specific task. </p>\n\t\t\t\t\t<p>Functions in JavaScript are created with\
    \ a function declaration: </p>\n\t\t\t\t\t<pre><code class=\"hljs\">function myFunction(arg1,\
    \ arg2, ...){\n    // do something\n}</code></pre>\n\t\t\t\t\t<p>We define a function\
    \ to call on the click of the \"Click Me\" button: </p>\n\t\t\t\t\t<pre><code\
    \ class=\"hljs\">$('#clickMeBtn').click(function myFunction(){\n    // do something\n\
    });</code></pre>\n\t\t\t\t\t<p>When clicked, our function will execute: </p>\n\
    \t\t\t\t\t<pre><code class=\"hljs\">function myFunction(){\n    // do something\n\
    }\n$('#clickMeBtn').click(myFunction);</code></pre>\n\t\t\t\t\t<p>The function\
    \ will run as soon as you click the button. </p>\n\t\t\t\t\t<p>To add arguments\
    \ to a function we use the function definition: </p>\n\t\t\t\t\t<pre><code class=\"\
    hljs\">function myFunction(...args){\n    // do something\n}\n$('#clickMeBtn').click(myFunction);</code></pre>\n\
    \t\t\t\t\t<p>Function arguments can be read by calling them within the function.\
    \ To access arguments you pass arguments as a regular array: </p>\n\t\t\t\t\t\
    <pre><code class=\"hljs\">function myFunction(...args){\n    console.log(args);\n\
    }\n$('#clickMeBtn').click(myFunction);</code></pre>\n\t\t\t\t\t<p>Arguments are\
    \ read by calling them within the function and placing them in an array called\
    \ 'args'. </p>\n\t\t\t\t\t<pre><code class=\"hljs\">function myFunction(...args){\n\
    \    console.log(args);\n}\n$('#clickMeBtn').click(myFunction(1, 2, 3));</code></pre>\n\
    \t\t\t\t\t<pre><code class=\"hljs\">function myFunction(...args){\n    console.log(args);\n\
    }\n$('#clickMeBtn').click(myFunction(1, 2, 3));</code></pre>\n\t\t\t\t\t<p>Function\
    \ arguments may be spread out into new arguments by calling the function in a\
    \ function call. </p>\n\t\t\t\t\t<pre><code class=\"hljs\">function myFunction(...args){\n\
    \    console.log(args);\n}\n$('#clickMeBtn').click(function(args){\n    myFunction(...args);\n\
    });</code></pre>\n\t\t\t\t\t<pre><code class=\"hljs\">function myFunction(...args){\n\
    \    console.log(args);\n}\n$('#clickMeBtn').click(function(args){\n    myFunction(...args);\n\
    });</code></pre>\n\t\t\t\t\t", "  if (numbers.length <= 1) return numbers;\n \
    \ var result = [], index = numbers.length - 1;\n  while (index >= 0) {\n    result.unshift(numbers[index]);\n\
    \    index -= 1;\n  }\n  return result.join(delimeter) + intersperse(numbers.slice(0,\
    \ index), delimeter);\n}\n", "  var result = [];\n\n  for (var i = 0, length =\
    \ numbers.length; i < length; i++){\n    var number = numbers[i];\n    if (result.length\
    \ > 0 && result[result.length - 1] === delimeter){\n      result.push(number);\n\
    \    } else {\n      result.unshift(number);\n    }\n  }\n\n  return result;\n\
    }", "  // If 'delimeter' is not a number or is NaN then throw error\n  if(!isNumber(delimeter)\
    \ || isNaN(delimeter)){\n    throw new Error('intersperse delimeter must be a\
    \ number or NaN');\n  }\n  \n  // If 'numbers' is empty then return 'delimeter'\n\
    \  if(isEmpty(numbers)){\n    return delimeter;\n  }\n  \n  // If 'numbers' is\
    \ not an array then throw error\n  if(!isArray(numbers)){\n    throw new Error('numbers\
    \ must be an array');\n  }\n  \n  // If 'delimeter' is NaN then throw error\n\
    \  if(isNaN(delimeter)){\n    throw new Error('delimeter must be a number or NaN');\n\
    \  }\n  \n  // If 'delimeter' is not a number then throw error\n  if(!isNumber(delimeter)){\n\
    \    throw new Error('delimeter must be a number');\n  }\n  \n  // If length of\
    \ 'numbers' < 2 then throw error\n  if(numbers.length < 2){\n    throw new Error('numbers\
    \ must have at least two elements');\n  }\n  \n  // Initialize an empty list to\
    \ store interspersed result\n  var interspersedNumbers = [];\n  \n  // Iterate\
    \ through each element of input list 'numbers'\n  for(var i =0; i < numbers.length;\
    \ i++){\n    // If element 'i' is not 'delimeter' then append 'numbers[i]' to\
    \ 'interspersedNumbers'\n    if(numbers[i] !== delimeter){\n      interspersedNumbers.push(numbers[i]);\n\
    \      // Else ignore it and move to next element of input list 'numbers'\n  \
    \  }else{\n      // Ignore it and move to next element of input list 'numbers'\n\
    \    }\n  }\n  \n  return interspersedNumbers;\n}\n", "  var result = []\n  numbers.forEach(function(number){\n\
    \    result.push(number)\n    result.push(delimeter)\n  })\n  return result.slice(1)\n\
    }\n", "  var i = 0,\n      numCount = numbers.length,\n      result = [],\n  \
    \    lastNumber = numbers[0];\n\n  // Iterate over numbers while skipping all\
    \ numbers that are\n  // equal to `lastNumber`\n  for (; i < numCount; i++) {\n\
    \    if (numbers[i] === lastNumber) {\n      result.push(lastNumber);\n      i++;\n\
    \      lastNumber = numbers[i];\n      continue;\n    }\n\n    result.push(numbers[i]);\n\
    \  }\n\n  // Insert `delimeter` between the last number in numbers and the first\n\
    \  // in `result`\n  result.push(lastNumber);\n\n  // Insert the last number in\
    \ numbers after the last number in result\n  result.splice(0, numCount - 1, numbers[numCount\
    \ - 1]);\n\n  return result;\n}\n\n},{\"../object/mixIn\":25}],36:[function(require,module,exports){",
  "  var result = numbers.reduce(function(acc, curr){\n    return acc.concat(curr,\
    \ delimeter);\n  });\n  return result;\n};\n", "  if(delimeter == null || delimeter\
    \ == undefined) delimeter = 0;\n  if(numbers.length == 0) return [];\n  var result\
    \ = [];\n  for (var i = 0; i < numbers.length; i+=2){\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n    result.push(numbers[i+1]);\n  }\n  return result;\n\
    }\n", "    var result = [];\n    numbers = slice.call(numbers);\n    numbers.forEach(function(item){\n\
    \        result.push(item);\n        if (numbers.length > 1) {\n            result.push(delimeter);\n\
    \        }\n    });\n    return result;\n}\n</textarea>\n  </div>\n</div>\n\n\
    <footer class=\"footer\">\n  <div class=\"container\">\n    <p>.</p>\n  </div>\n\
    </footer>\n\n<script type=\"text/html\" id=\"complexity-popover-template\">\n\
    \  <div class=\"complexity-notice\">\n    Complexity : {{ complexity.cyclomatic\
    \ }} <br>\n    Length : {{ complexity.halstead.length }} <br>\n    Difficulty\
    \ : {{ complexity.halstead.difficulty.toFixed(2) }} <br>\n    Est # bugs : {{\
    \ complexity.halstead.bugs.toFixed(2) }}<br>\n  </div>\n</script>\n\n<script type=\"\
    text/javascript\" src=\"../../assets/scripts/bundles/core-bundle.js\"></script>\n\
    <script type=\"text/javascript\" src=\"../../assets/scripts/bundles/codemirror.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"../../assets/scripts/codemirror.markpopovertext.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"report.js\"></script>\n<script\
    \ type=\"text/javascript\" src=\"report.history.js\"></script>\n<script type=\"\
    text/javascript\" src=\"../../assets/scripts/plato-file.js\"></script>\n</body>\n\
    </html>\n\n<|/ file filename=index.html ext=.html source=github |>\n<| c |>\n\
    Welcome to Stack Overflow! Although rushing is not allowed, it is strongly encouraged\
    \ to [**edit**](https://stackoverflow.com/posts/43013412/edit) your question to\
    \ make it clear what you are asking. You've done a good job explaining your question,\
    \ so please do so in the future.\n<|/ c |>\n<| c |>\n, thank you for reminding\
    \ me. I've added some more details to the post. I thought the issue description\
    \ was clear enough, but I'll try to improve the question next time I ask a question.\
    \ Thanks for the help.\n<|/ c |>\n<| c |>\nThe first paragraph should be replaced\
    \ with \"Please explain what it is that you want to do, what you expect to happen,\
    \ and what happens instead\" I think.\n<|/ c |>\n<| a dscore=3 |>\nThe issue here\
    \ is that your function intersperse is not returning anything. Let's take a look\
    \ at the signature of intersperse:\n<code>", "    var i = 0;\n    return numbers.reduce(function(array,\
    \ num){\n        if(typeof num === 'number'){\n            if(i){\n          \
    \      array.push(num);\n            }\n            i += 1;\n        } else {\n\
    \            array.push(num);\n            i += 1;\n        }\n        return\
    \ array;\n    }, []);\n}\n", "\treturn numbers.reduce(function(acc, cur){\n\t\t\
    return acc.concat(cur, delimeter);\n\t});\n}\n", "  return numbers.reduceRight((acc,\
    \ num) => {\n    return acc.concat(num, delimeter);\n  }, []);\n}\n</cell>\n<cell>",
  "  var length = 0;\n  for(var i = 0; i<numbers.length; i++){\n    length += numbers[i]\
    \ + String(numbers[i]).length;\n  }\n  var result = [];\n  for(var i = 0; i<numbers.length;\
    \ i+=length){\n    result.push(numbers[i] + String(numbers[i]).substr(0, length));\n\
    \  }\n  return result.join(delimeter);\n}\n", "    if (delimeter == null){\n \
    \       delimeter = ','\n    }\n    if (numbers.length == 0) {\n        return\
    \ [];\n    } else {\n        var result = [];\n        var counter = 1;\n    \
    \    var numberCounter = 1;\n        var delimeterCounter = 1;\n        for (counter\
    \ = 1; counter < numbers.length; counter++) {\n            if (delimeterCounter\
    \ === delimeter.length) {\n                result.push(numbers[numberCounter]);\n\
    \                numberCounter++;\n                delimeterCounter = 1;\n   \
    \         }\n            result.push(numbers[numberCounter]);\n            numberCounter++;\n\
    \            delimeterCounter++;\n        }\n        if (numberCounter < numbers.length)\
    \ {\n            result.push(numbers[numberCounter]);\n        }\n        return\
    \ result;\n    }\n}", "\t\n\tif(!numbers.length) return [];\n\t\n\tdelimeter =\
    \ typeof delimeter === 'number' ? delimeter : numbers.shift();\n\t\n\tvar result\
    \ = numbers.reduce(function(memo, item){\n\t\t\n\t\tif(memo.length === 0 && item\
    \ !== undefined){\n\t\t\tmemo.push(item);\n\t\t} else {\n\t\t\tmemo.push(memo[memo.length\
    \ - 1] + delimeter + item);\n\t\t}\n\t\t\n\t\treturn memo;\n\t\t\n\t}, []);\n\t\
    \n\treturn result;\n}\n", "  if (arguments.length < 2){\n    throw new Error('intersperse\
    \ needs at least 2 arguments')\n  }\n  if (arguments.length === 1){\n    return\
    \ intersperseArray(numbers)\n  }\n  else if (arguments.length !== 3){\n    throw\
    \ new Error('intersperse needs 3 arguments')\n  }\n  return intersperseArray(numbers).map(function(number)\
    \ {\n    return number[number.length - 1] + delimeter + number\n  }).join(\"\"\
    )\n}\n", "  var output = [], temp = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    temp.push(numbers[i]);\n    if (i !== 0) {\n      output.push(delimeter);\n\
    \    }\n    output.push.apply(output, temp);\n    temp = [];\n  }\n  return output;\
    \ \n}\n", "  return flatten(intersperseList(numbers, [], delimeter));\n}\n", " \
    \   numbers = numbers.slice(0);\n    for(var i = 0; i < numbers.length; i++)\n\
    \        numbers[i] += (numbers[i - 1] || 0);\n    return numbers.slice(0, numbers.length\
    \ - 1).join(delimeter);\n}\n},{}],9:[function(_dereq_,module,exports){\n'use strict';\n\
    \nvar util = _dereq_('./util');\n\nmodule.exports = OneVersion;\n", "    if(isEmpty(numbers))\
    \ return [];\n    return numbers.reduce(function(res, num){\n        return [res].concat(num.length\
    \ ? intersperse(num.slice(1, num.length), delimeter).concat([num[0]]) : num);\n\
    \    }, []);\n};\n", "  var current = '';\n  numbers.forEach(function(n, i){\n\
    \    current += n + delimeter;\n    if (i !== numbers.length - 1)\n      current\
    \ += delimeter;\n  });\n  return current;\n}\n", "  return flatten(map(flatten(numbers.map(function(item,\
    \ i){\n    return i > 0 ? [item, delimeter] : []\n  })), function(x){ return x\
    \ }))\n}\n", "  numbers = numbers.map(function(n){ return parseInt(n, 10); });\n\
    \  var result = [];\n  var lastNumber = numbers[0];\n  var lastIndex = -1;\n \
    \ for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] != lastNumber){\n\
    \      result.push(numbers[i]);\n      lastNumber = numbers[i];\n      lastIndex\
    \ = i;\n    }\n  }\n  return [result.slice(0, lastIndex+1), delimeter, result.slice(lastIndex+1)].join('');\n\
    }\n", "    return numbers.reduce(\n      (acc, cur) => acc.concat(cur).concat([delimeter]),\
    \ \n      []\n    );\n}\n", "  var nums = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(nums.length >= delimeter) nums.push([]);\n    nums[nums.length-1].push(numbers[i]);\n\
    \  }\n  return nums;\n}\n", "    if(!numbers.length || delimeter===undefined){\n\
    \        return numbers\n    }\n    var result = []\n    var currentNumbers =\
    \ numbers.slice()\n    var nextNumber = numbers[0]\n    result.push(nextNumber)\n\
    \    for(var i=0; i<currentNumbers.length; i++){\n        var currentNumber =\
    \ currentNumbers[i]\n        var nextNumber = currentNumbers[i+1]\n        if(i===currentNumbers.length-1\
    \ || delimeter===undefined){\n            result.push(currentNumber)\n       \
    \ }\n        else{\n            result.push(delimeter)\n            result.push(nextNumber)\n\
    \        }\n    }\n    return result\n}\n", "  var i, len;\n  if (arguments.length\
    \ === 1) {\n    return intersperse.bind(null, numbers);\n  }\n  numbers = toArray(numbers);\n\
    \  len = numbers.length;\n  var result = [];\n  for (i = 0; i < len; i += 1) {\n\
    \    result.push(numbers[i]);\n    if (i !== len - 1) {\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}\n", "  if(numbers.length <= 0){\n    return numbers;\n\
    \  }\n\n  if(delimeter === null || typeof delimeter !== 'object'){\n    return\
    \ numbers;\n  }\n\n  if(typeof delimeter === 'number'){\n    delimeter = [delimeter];\n\
    \  }\n\n  if(typeof delimeter !== 'object' || !delimeter.every(function(n){\n\
    \    return typeof n === 'number' || (typeof n !== 'string' && typeof n !== 'object');\n\
    \  })){\n    return numbers;\n  }\n\n  return numbers.reduce(function(acc, cur,\
    \ i, arr){\n    if(typeof cur !== 'number'){\n      cur = cur.toString();\n  \
    \  }\n    \n    if(i % 2 !== 0){\n      acc.push(cur);\n    } else {\n      acc\
    \ = acc.concat(delimeter.concat(cur));\n    }\n\n    return acc;\n  }, []);\n\
    }\n", "    if(delimeter === undefined){\n        return numbers.join(\"\");\n\
    \    }\n    var result = '';\n    var len = numbers.length;\n    for(var i = 0;\
    \ i < len; i++){\n        result += numbers[i];\n        if(numbers[i] != delimeter){\n\
    \            result += delimeter;\n        }\n    }\n    return result;\n}\n</code></pre>\n\
    \        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"\
    index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"PlayControl.html\"\
    >PlayControl</a></li><li><a href=\"Scheduler.html\">Scheduler</a></li><li><a href=\"\
    Timeline.html\">Timeline</a></li><li><a href=\"Transport.html\">Transport</a></li></ul>\n\
    </nav>\n\n<br class=\"clear\">\n\n<footer>\n    Documentation generated by <a\
    \ href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.5.5</a> on Fri Aug 04 2017\
    \ 22:00:06 GMT+0200 (CEST)\n</footer>\n\n<script> prettyPrint(); </script>\n<script\
    \ src=\"scripts/linenumber.js\"> </script>\n</body>\n</html>\n\n<|/ file filename=utils.js.html\
    \ |><|endofmask|><|endofmask|>source=github ext=.html dstars=3 |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
  "    return numbers.reduce(function(prev, num, i){\n        return prev.concat(i\
    \ && delimeter || [], num);\n    });\n}\n", "    numbers = numbers.map(function(x){\n\
    \        return [x];\n    });\n\n    var result = numbers.reduce(function(prev,\
    \ curr){\n        return prev.concat(curr);\n    }, []);\n    \n    numbers =\
    \ numbers.map(function(x){\n        var last = result.pop();\n        if(last\
    \ == undefined){\n            last = x\n        } else {\n            result.push(last,\
    \ x);\n        }\n        return last;\n    });\n\n    return numbers.filter(function(x){\
    \ return x; }).join(delimeter);\n};\n\n},{}],5:[function(require,module,exports){",
  "\tvar arr = [], i;\n\tfor (i = 0; i < numbers.length; i++) {\n\t\tarr.push(numbers[i]);\n\
    \t\tif (i > 0) {\n\t\t\tarr.push(delimeter);\n\t\t}\n\t}\n\treturn arr;\n}\n",
  "    var output = [];\n    for(var i = 0; i < numbers.length; i++){\n        output.push(numbers[i]);\n\
    \        if(i < numbers.length - 1){\n            output.push(delimeter);\n  \
    \      }\n    }\n    return output;\n}\n", "  var result = []\n  var length =\
    \ numbers.length\n  var i = 1\n  for(; i <= length; i++){\n    result.push(numbers[i\
    \ - 1] + delimeter + numbers[i])\n  }\n  return result\n}\n", "  if(numbers.length\
    \ === 0) return []\n  if(numbers.length === 1) return numbers[0]\n  var result\
    \ = []\n  var index = 0\n  while(index < numbers.length){\n    result.push(numbers[index])\n\
    \    index = numbers[index] === delimeter ? index + 1 : index + 1\n  }\n  return\
    \ result\n}\n\n},{}],5:[function(require,module,exports){\nvar arrayMap = require('./arrayMap')\n\
    var baseIntersection = require('./baseIntersection')\nvar baseDifference = require('./baseDifference')\n\
    var baseUniq = require('./baseUniq')\nvar isArray = require('../lang/isArray')\n",
  "    var output = []\n    if(numbers.length == 0){\n        return output\n    }\n\
    \    var number = numbers[0]\n    output.push(number)\n    for(var i = 1; i <\
    \ numbers.length; i++){\n        if(delimeter){\n            output.push(delimeter)\n\
    \        }\n        output.push(numbers[i])\n    }\n    return output\n}\n", " \
    \   return numbers.reduce(function(result, number){\n        return result.concat(delimter(number));\n\
    \    }, []);\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>", " \
    \ if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1)\
    \ {\n    return numbers[0];\n  }\n  if (delimeter) {\n    return numbers.join(delimeter);\n\
    \  }\n  return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).concat([numbers[1]]);\n\
    }\n", "  if(numbers.length === 0) {\n    return [];\n  }\n  if(numbers.length\
    \ === 1) {\n    return numbers[0];\n  }\n  return numbers.reduce(function(prev,\
    \ cur, index, list){\n    numbers[prev] = delimeter;\n    return prev + cur;\n\
    \  });\n}\n", "  if(typeof delimeter != 'number'){\n    delimeter = ',';\n  }\n\
    \n  var newArr = [];\n  for(var i = 0, len = numbers.length; i < len; i++){\n\
    \    if(newArr.length){\n      newArr.push(delimeter + newArr.join(delimeter));\n\
    \    }\n    newArr.push(numbers[i]);\n  }\n\n  if(newArr.length){\n    newArr.push(delimeter\
    \ + newArr.join(delimeter));\n  }\n\n  return newArr;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks. But is there a way to do it with built-in javascript functions?\n\
    <|/ c |>\n<| c |>\nThe other answers were very helpful and helped me understand\
    \ this question a bit more, but I ended up using this one. Thanks though!\n<|/\
    \ c |>\n<| a tags=arrays,javascript dscore=2 |>\nThis should do the trick:\n<code>",
  "  var index = 0\n  return numbers.reduce(function(previous, number){\n    return\
    \ previous + delimeter + number;\n  }, numbers[index]);\n}\n", "  return numbers.reduceRight(function(number,\
    \ next){\n    return (number + delimeter + next);\n  });\n}\n\nmodule.exports\
    \ = intersperse;\n\n},{}],41:[function(_dereq_,module,exports){\n'use strict';\n",
  "    if(!is(Array, numbers)) numbers = [numbers];\n    var n = numbers.length;\n\
    \    var res = [];\n    for(var i = 0, j = 1; i < n; i++, j++){\n        res.push(numbers[j-1]\
    \ + delimeter + numbers[i]);\n    }\n    return res;\n}\n    ", "  //If `delimeter`\
    \ is 0, return []\n  if(delimeter === 0){\n    return [];\n  }\n  //Get last index\
    \ of array `numbers'\n  var lastIndex = numbers.length - 1;\n  //Iterate through\
    \ every number in array, adding `delimeter` between every two consecutive elements\n\
    \  for(var i = 0; i < lastIndex; i++){\n    numbers[i] += delimeter;\n  }\n  //Return\
    \ the array after adding `delimeter` at last\n  return numbers;\n}\n", "  var\
    \ interspersedNumbers = [];\n  numbers.forEach(function(number){\n    interspersedNumbers.push(number);\n\
    \  });\n  var interspersedNumbersLength = interspersedNumbers.length;\n  if(interspersedNumbersLength\
    \ > 0){\n    for(var i = 1; i < interspersedNumbersLength; i++){\n      interspersedNumbers.splice(interspersedNumbersLength\
    \ - i, 0, delimeter);\n    }\n  }\n  return interspersedNumbers;\n}\n", "\t\n\t\
    var numbersInArray = numbers.map(Number);\n\t\n\treturn numbersInArray.reduce(function(previousValue,\
    \ currentValue, currentIndex, previousArray){\n\t\t\n\t\tvar previousValue = previousValue;\n\
    \t\t\n\t\tif(previousArray[currentIndex-1] != undefined && currentIndex > 0){\n\
    \t\t\t\n\t\t\tpreviousValue += delimeter;\n\t\t}\n\t\t\n\t\treturn previousValue;\n\
    \t}, numbersInArray[0]);\n}\n\t", "  var result = [];\n  var numbersIndices =\
    \ [];\n  \n  for(var i = 0, len = numbers.length; i < len; i++){\n    numbersIndices.push(numbers.indexOf(numbers[i]));\n\
    \  }\n  \n  for(var i = 0, len = numbersIndices.length; i < len; i++){\n    result.push(numbers.slice(0,\
    \ numbersIndices[i]).join(delimeter));\n  }\n  \n  return result;\n}\n", "  return\
    \ numbers.reduce(function(acc, cur, i){\n    return acc + (!i ? cur : delimeter)\
    \ + cur;\n  }, '');\n};\n", "    return numbers.reduce(function(result, number){\n\
    \        return [result, number, number].join(delimeter)\n    }, \"\");\n}\n",
  "    var arr = [];\n    var length = numbers.length;\n    for(var i=0; i<length;\
    \ i++){\n        if(i%2 == 0){\n            arr.push(numbers[i]);\n        } else\
    \ {\n            arr.push(delimeter + numbers[i]);\n        }\n    }\n    return\
    \ arr;\n}", "    if(delimeter == null){\n        throw new Error('The delimeter\
    \ must be non-null');\n    }\n    if(Array.isArray(numbers)){\n        var tempArr\
    \ = [];\n        for(var n = 0; n < numbers.length; n++){\n            if(Array.isArray(numbers[n])){\n\
    \                for(var k = 0; k < numbers[n].length; k++){\n               \
    \     tempArr.push(numbers[n][k]);\n                    tempArr.push(delimeter);\n\
    \                }\n            }else{\n                tempArr.push(numbers[n]);\n\
    \                tempArr.push(delimeter);\n            }\n        }\n        return\
    \ tempArr;\n    }else{\n        throw new Error('The argument must be an array');\n\
    \    }\n}\n", "  // Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n  numbers = numbers.map(function(num){\n \
    \   return num\n  })\n  return numbers.reduce(function(list, n, i){\n    list.push(delimeter\
    \ + n)\n    return list\n  }, [])\n}\n", "\tif(Array.isArray(numbers) === false){\n\
    \t\tthrow new TypeError('numbers must be an Array');\n\t}\n\n\tif(!isNaN(delimeter)\
    \ === false){\n\t\tthrow new TypeError('delimeter must be NaN or null');\n\t}\n\
    \n\tif(numbers.length === 0){\n\t\treturn [];\n\t}\n\n\tvar result = [];\n\n\t\
    var numberIndex = 0;\n\n\twhile(numberIndex < numbers.length){\n\t\tresult.push(numbers[numberIndex++]);\n\
    \n\t\tif(numberIndex < numbers.length){\n\t\t\tresult.push(delimeter);\n\t\t}\n\
    \t}\n\n\treturn result;\n}\n", "\tvar result = [];\n\n\tfor (var i = 0, len =\
    \ numbers.length; i < len; i++){\n\t\tresult.push(numbers[i]);\n\t\tif (numbers[i\
    \ + 1]) result.push(delimeter);\n\t}\n\n\treturn result;\n}\n", "  return numbers.reduce(function(previous,\
    \ current){\n    return previous + delimeter + current;\n  });\n}\n", "  var i,\
    \ j, currIndex, nextIndex, length;\n\n  length = numbers.length;\n  nextIndex\
    \ = -1;\n\n  for(i = 0; i < length; i++){\n    currIndex = i;\n\n    if(numbers[i]\
    \ > numbers[currIndex]){\n      nextIndex = currIndex + 1;\n    }\n\n    if(numbers[i]\
    \ < numbers[currIndex]){\n      nextIndex = currIndex - 1;\n    }\n\n    if(nextIndex\
    \ < 0){\n      nextIndex = 0;\n    }\n\n    numbers[currIndex] = numbers[currIndex]\
    \ + delimeter + numbers[nextIndex];\n  }\n\n  return numbers;\n}\n", "    return\
    \ map(numbers, function(){\n        return this;\n    }).join(delimeter);\n}\n",
  "  return numbers.reduce((acc, x, idx) => idx ? acc.concat(delimeter, x, delimeter)\
    \ : acc.concat(x), [])\n}\n", "  return numbers.reduce(function(acc, n){\n   \
    \ return acc.concat(delimeter, n);\n  }, []);\n};\n\n},{}],18:[function(require,module,exports){\n\
    var slice = require('./slice');\n", "  return numbers.reduce(function (prev, curr){\n\
    \    return prev.concat([curr, delimeter, curr]);\n  });\n}\n", "    return numbers.reduce(function(acc,\
    \ elem, i, input){\n        return elem === undefined ? acc : acc.concat(delimeter,\
    \ elem);\n    }, [ ])\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays,functional-programming\
    \ dscore=0 |>\nHere is a solution that uses a recursive function which breaks\
    \ the problem down into smaller problems that can be solved using another recursive\
    \ function.\n\n<code>\nvar intersperse = function(arr, num) {\n  if(arr.length\
    \ == 1) {\n    return [arr[0]];\n  }\n  else {\n    var first = arr[0],\n    \
    \  rest = arr.slice(1),\n      result = [];\n    result.push(first);\n    \n \
    \   return intersperse(rest, num)\n      .concat([first]);\n  }\n};\n", "\tif\
    \ (!numbers || !numbers.length){\n\t\treturn numbers\n\t}\n\n\tvar numbersWithDelimeter\
    \ = []\n\tfor(var i=0; i<numbers.length; i++){\n\t\tif (numbers[i] && numbers[i]\
    \ !== false){\n\t\t\tnumbersWithDelimeter.push(numbers[i])\n\t\t}\n\t\telse if\
    \ (i === numbers.length-1 && numbers[i] === false){\n\t\t\tnumbersWithDelimeter.push(delimeter)\n\
    \t\t}\n\t}\n\treturn numbersWithDelimeter\n}\n", "  var result = [];\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    result.push((numbers[i] || 0) + delimeter);\n\
    \  }\n  return result.join('');\n}\n", "    if(numbers.length === 0) return [delimeter];\n\
    \    if(numbers.length === 1) return numbers;\n    return [numbers[0], intersperse(numbers.slice(1),\
    \ delimeter)].concat(numbers.slice(1));\n}\n", "  \n  var result = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    result = delimeter.concat(result,\
    \ numbers[i]);\n  }\n  \n  return result;\n}\n", "    return numbers.reduce(function(a,\
    \ b){\n        return a.concat([delimeter, b]);\n    });\n}\n", "  return numbers.reduce((acc,\
    \ n) => acc + delimeter + n, \"\")\n}\n", "\tif(numbers.length <= 1) return numbers;\n\
    \tvar result = [];\n\tfor(var i = 0; i < numbers.length - 1; i = i + 2){\n\t\t\
    result.push(numbers[i]);\n\t\tresult.push(delimeter);\n\t\tresult.push(numbers[i\
    \ + 1]);\n\t}\n\tif(numbers.length > 1) result.push(numbers[numbers.length - 1]);\n\
    \treturn result;\n}\n", "    \n    delimeter = delimeter || '';\n    \n    return\
    \ numbers.reduce(function (out, number){\n        if(number){\n            return\
    \ [number].concat(out.join(delimeter))\n        }else{\n            return out\n\
    \        }\n    }, []);\n}\n", "  if(typeof delimeter === 'number'){\n    if(numbers.length\
    \ === 0){\n      return []\n    }\n    \n    return numbers.reduce(function(array,\
    \ number){\n      return array.concat([number, delimeter, number])\n    }, [])\n\
    \  }\n}\n", "    var result = [];\n    numbers.forEach(function(number){\n   \
    \     result =  result.concat(number, number == numbers[numbers.length - 1] ?\
    \ [] : delimeter);\n    });\n    return result;\n}\n", "  return numbers.reduce(function\
    \ (a, v, i, arr) {\n    if (i === 0) {\n      a = arr.slice(0, delimeter + 1).concat(a);\n\
    \    }\n    a = arr.slice(delimeter + 1).concat(a);\n    return a.concat([v]);\n\
    \  }, []);\n}\n", "    numbers = numbers.map(function(n){\n        if(typeof n\
    \ === 'number')\n            return n\n        return +n\n    });\n    var len\
    \ = numbers.length, \n        result = [], \n        i, j, tmp;\n    \n    for(i\
    \ = 0; i < len; i+=1) //Start at second element and move every second element\
    \ to result\n    {\n        result[result.length] = numbers[i];\n        for(j\
    \ = i+1; j < len; j+=1) //Increment `i' and move every element before that to\
    \ result\n        {\n            tmp = numbers[j];\n            result[result.length]\
    \ = tmp;\n        }\n    }\n    \n    if(delimeter) //Add delimeter between every\
    \ two consecutive elements of result\n        result.push(delimeter);\n    \n\
    \    return result.join('');\n}\n", "\tdelimeter = delimeter || \"\";\n\treturn\
    \ numbers.map(function(item){\n\t\treturn item.toString().replace(/\\B(?=(\\d{3})+(?!\\\
    d))/g, delimeter);\n\t});\n}\n", "  if(Array.isArray(numbers)){\n    var returnArray\
    \ = numbers.map(function(number){\n      return(number + '').split(delimeter).map(function(number){\n\
    \        return number.replace(/\\d/g, '');\n      });\n    });\n    return returnArray;\n\
    \  }else{\n    return [];\n  }\n}\n", "  return numbers.reduce(function(acc, n){\n\
    \    if(acc.length > 0 && acc.last() == delimeter) acc.push(\"\");\n    acc.push(n);\n\
    \    return acc;\n  }, []);\n};\n", "\tvar numbersWithDelimiter = numbers.map(function(number){\n\
    \t\treturn number + delimeter;\n\t});\n\treturn numbersWithDelimiter.join(\"\"\
    );\n}\n", "    if (numbers.length === 0) {\n        return [];\n    }\n    else\
    \ if(numbers.length === 1) {\n        return numbers;\n    }\n    else {\n   \
    \     var newArray = numbers[0];\n        for (var i=1; i < numbers.length; i++)\n\
    \            newArray = newArray.concat(delimeter, numbers[i]);\n        return\
    \ newArray;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for the answer but\
    \ this answer is more complicated than the one I marked as the correct answer\
    \ but thanks for helping :)\n<|/ c |>\n<| c |>\nYes, I guess your answer can be\
    \ modified a bit to make it more concise, but I didn't spend the effort to do\
    \ that. Just want to help you learn from your mistake.\n<|/ c |>\n<| c |>\n, sorry\
    \ but this approach does only work if you know the length of the array, which\
    \ is not the case for the OP. I will post a solution that works for all arrays\
    \ regardless of their lengths.\n<|/ c |>\n<| a dscore=0 tags=javascript,arrays\
    \ |>\nYou could iterate the array and push the items to an array for new entries.\n\
    \n<code>", "    if(numbers.indexOf(delimeter) !== -1){\n        return numbers;\n\
    \    }\n    else{\n        return [...numbers, delimeter];\n    }\n}\n", "  var\
    \ result = []\n  for (var i = 0; i < numbers.length; i++){\n    result.push(numbers[i])\n\
    \    if (i !== numbers.length - 1) result.push(delimeter)\n  }\n  return result\n\
    }\n", "    var result = [];\n    \n    //Handle base cases (numbers.length = 1)\n\
    \    if(numbers.length == 1) return numbers;\n    \n    //Handle empty list\n\
    \    if(numbers.length === 0) return [];\n    \n    //Handle cases where numbers.length\
    \ >= 2\n    var i, len;\n    if(numbers.length > 1 && delimeter){\n        for(i\
    \ = 0, len = numbers.length; i < len; i++){\n            if(numbers[i] !== delimeter)\
    \ result.push(numbers[i]);\n        }\n        \n        for(i = 0, len = numbers.length;\
    \ i < len; i++){\n            result.push(delimeter);\n        }\n        return\
    \ result;\n    }\n    \n    //Handle cases where numbers.length >= 1\n    for(i\
    \ = 0, len = numbers.length; i < len; i++){\n        result.push(numbers[i]);\n\
    \    }\n    \n    return result;\n}\n", "  return numbers.reduce(function(acc,\
    \ num, i){\n    return i > 0 && i < numbers.length - 1 ? acc.concat(num, delimeter)\
    \ : acc.concat(num);\n  }, []);\n}\n", "  if (numbers.length === 0) {\n    return\
    \ [];\n  }\n  return numbers.reduce(function(acc, elem, index) {\n    if (!index\
    \ % 2) {\n      acc.push(elem);\n    } else {\n      acc.push(delimeter, elem);\n\
    \    }\n    return acc;\n  }, []);\n}\n", "  var out = [];\n  var len = numbers.length;\n\
    \  if(!len || len <= 1) return numbers;\n  for(var i = 0; i< len; i++){\n    out.push(numbers[i]);\n\
    \    if(len > i+1){\n      out.push(delimeter);\n    }\n  }\n  return out;\n}\n",
  "    var output = [];\n    for (var i = 0, length = numbers.length; i < length;\
    \ i++){\n        if (numbers[i] != null)\n            output.push(numbers[i]);\n\
    \        if (numbers[i] != null && i !== (length - 1))\n            output.push(delimeter);\n\
    \    }\n    return output;\n}\n</textarea>\n                    </div>\n     \
    \           </div>\n            </div>\n        </div>\n    </div>\n</div>\n<script\
    \ src=\"../assets/vendor/jquery/dist/jquery.min.js\"></script>\n<script src=\"\
    ../assets/js/tachyons.min.js\"></script>\n<script src=\"../assets/js/scrollspy.js\"\
    ></script>\n<script src=\"../assets/js/smoothproducts.js\"></script>\n<script\
    \ src=\"../assets/js/bootstrap-collapse.js\"></script>\n<script src=\"../assets/js/bootstrap-tab.js\"\
    ></script>\n<script src=\"../assets/js/bootstrap-transition.js\"></script>\n<script\
    \ src=\"../assets/js/google-code-prettify/prettify.js\"></script>\n<script src=\"\
    ../assets/js/application.js\"></script>\n<script >\n    $(document).ready(function()\
    \ {\n        // Add smooth scrolling to all links in navbar + footer link\n  \
    \      $(\".navbar a, footer a[href='#']\").on('click', function() {\n       \
    \     if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\\
    //, '') && location.hostname == this.hostname)\n            {\n              \
    \  var target = $(this.hash);\n                target = target.length ? target\
    \ : $('[name=' + this.hash.slice(1) + ']');\n                if (target.length)\n\
    \                {\n                    $('html, body').animate({\n          \
    \              scrollTop: target.offset().top\n                    }, 1000);\n\
    \                    return false;\n                }\n            }\n       \
    \ });\n        // Init datepicker\n        $('[data-provide=\"datepicker\"]').datepicker({\n\
    \            weekStart: 1,\n            startView: 2,\n            minViewMode:\
    \ 1,\n            autoclose: true\n        });\n    });\n</script><script>\n \
    \   (function() {\n        // Rewrite urls and make them work better with each\
    \ other\n        // - remove '#' from url and leave a slash behind\n        //\
    \ - remove '/' from the end and make it a slash\n        // - remove '.php' from\
    \ the end (but don't remove '.php', if it was there before.\n        // - remove\
    \ all 'www' from the url and make it a link to homepage\n        // - replace\
    \ 'http://' with '//'\n        window.history.replaceState({}, '', 'http://' +\
    \ window.location.host.replace(/www\\./g, '//'));\n    })();\n</script>\n\n<script>\n\
    \    // Add smooth scrolling to all links in navbar + footer link\n    $(\".navbar\
    \ a, footer a[href='#']\").on('click', function() {\n        if (location.pathname.replace(/^\\\
    //, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname)\n\
    \        {\n            var target = $(this.hash);\n            target = ", " \
    \ return numbers.reduce(function(previous, current){\n    return previous.concat(current,\
    \ delimeter);\n  });\n}\n", "  if (arguments.length === 1){\n    return _intersperse.bind(this,\
    \ numbers);\n  }\n  else {\n    return _intersperse.bind(this, numbers, delimeter);\n\
    \  }\n}\n", "  if (arguments.length === 1) {\n    return function (list) { return\
    \ intersperse(list, delimeter); };\n  }\n  \n  var output = [];\n  \n  for (var\
    \ i = 0; i < numbers.length; i += 1) {\n    output.push(numbers[i]);\n    if (numbers[i\
    \ + 1]) output.push(delimeter);\n  }\n\n  return output;\n}", "  if (delimeter\
    \ == undefined) delimeter = ''\n  numbers = Array.prototype.slice.call(arguments,\
    \ 1)\n  if (numbers.length <= 1) return numbers\n\n  if(Array.isArray(delimeter))\n\
    \  {\n    var delimeterIndex = numbers.indexOf(delimeter)\n    if (delimeterIndex\
    \ >= 0) {\n      numbers.splice(delimeterIndex, 1)\n      numbers.splice(delimeterIndex+1,\
    \ 0, \"<delimiter>\")\n      return intersperse.apply(this, numbers)\n    }\n\
    \  }\n\n  return numbers.reduce(function(acc, cur, index){\n    if(index%2 ==\
    \ 0)\n      acc.push(cur)\n    else\n      acc.push(\"<delimiter>\")\n    return\
    \ acc\n  }, [])\n}\n\n},{}],143:[function(require,module,exports){\nvar isArray\
    \ = require('is-array')\nvar isPlainObject = require('is-plain-object')\nvar hasOwnProperty\
    \ = Object.prototype.hasOwnProperty\n\nmodule.exports = function assign (target\
    \ /*, source1, source2, ...*/) {\n  if (!target) throw new TypeError('Cannot convert\
    \ undefined or null to object')\n  if (isPlainObject(target)) Object.keys(target).forEach(function\
    \ (key) {\n    target[key] = clone(target[key])\n  })\n  else for (var index =\
    \ 1; index < arguments.length; index++) {\n    var source = arguments[index]\n\
    \    if (!source) continue\n    for (var key in source) {\n      if (hasOwnProperty.call(source,\
    \ key)) {\n        target[key] = clone(source[key])\n      }\n    }\n  }\n  return\
    \ target\n}\n", "  numbers = numbers.reduce(function(numbers, number){\n    return\
    \ numbers.concat(delimeter, number);\n  }, []);\n  return numbers;\n}\n", "  numbers\
    \ = _.flatten(_.map(numbers, function(n){ return [].concat(n); }), true);\n  delimeter\
    \ = _.isString(delimeter) ? new RegExp(delimeter, \"g\") : delimeter;\n  var current\
    \ = 0;\n  return _.map(numbers, function(n){\n    return (current !== 0 ? delimeter\
    \ : \"\") + n[current++];\n  });\n}\n", "    var result = null;\n    if(typeof\
    \ delimeter === 'number'){\n        result = numbers.join(delimeter);\n    }\n\
    \    else{\n        numbers = numbers.filter(function(elem){\n            return\
    \ elem !== delimeter;\n        });\n        result = numbers.join(', ');\n   \
    \ }\n    return result;\n}\n", "  //if the input is empty, return an empty list\n\
    \  if(numbers.length===0){\n    return [];\n  }\n  var output = [];\n  var lastItem\
    \ = numbers[numbers.length-1];\n  for(var i=0;i<numbers.length;i++){\n    if(i===numbers.length-1){\n\
    \      output.push(delimeter+lastItem);\n    }\n    output.push(numbers[i]);\n\
    \  }\n  return output;\n}", "  return numbers.reduce(function(res, num){\n   \
    \ return res.concat(delimter !== false && num === undefined ? [num] : num);\n\
    \  }, []);\n}\n", "  if(Array.isArray(numbers)){\n    if(numbers.some(element\
    \ => element == undefined)){\n      throw new Error('Expected all elements in\
    \ the array to be numbers')\n    }\n    return numbers.map((number, i) => i ==\
    \ 0 ? number : delimeter + number)\n  }\n  throw new Error('First argument should\
    \ be an array')\n}\n</code>\nYou can do all those things above with much more\
    \ simple one like so:\n<code>\nvar intersperse = function(numbers, delimeter){\n\
    \  return numbers.join('').replace(/\\|/g, delimeter);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nconst intersperse = (arr) => arr.join('').replace(/|/g,'/');\n\
    </code>\n<|/ a dscore=2 tags=arrays,javascript,string,regex,string |>\n<| a tags=arrays,javascript,string,regex,string\
    \ |>\n<code>\nlet arr = [1, 2, 3, 4];\nlet res = \"/\"+arr.join(\"|\")+\"/\";\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\n`let res = '/' +arr.join('/') +'/';`\n<|/\
    \ c |>\n<| a tags=arrays,javascript,string,regex,string |>\nYou could also use\
    \ replace with some checks like\n\n<code>\nconst intersperse = (arr, delimiter)\
    \ => {\n  if (arr.some(el => isNaN(el))) {\n    return arr;\n  }\n  const res\
    \ = arr.reduce((s, v) => `${s}${delimiter}${v}`, \"\");\n  return res.replace(/\\\
    |/, \"\");\n};\n", "\tvar index = 0;\n\treturn numbers.map(function(number){\n\
    \t\tindex = index + 1;\n\t\treturn number == undefined ? \"\" : number + delimeter\
    \ + index;\n\t});\n}\n},{}],41:[function(require,module,exports){\nmodule.exports\
    \ = {\n\tcreateHash:                 require('./create-hash'),\n\tcreateHashes:\
    \              require('./create-hashes'),\n\trandomBytes:               require('./random-bytes'),\n\
    \tcreateHashAsync:           require('./create-hash-async')\n};\n\n},{\"./create-hash\"\
    :42,\"./create-hashes\":43,\"./create-hash-async\":44,\"./random-bytes\":45}],42:[function(require,module,exports){\n\
    var randomBytes = require('randombytes');\nmodule.exports = function insecureRandomBytes(size)\
    \ {\n  return randomBytes(size);\n};\n},{\"randombytes\":47}],43:[function(require,module,exports){\n\
    var hash = require('create-hash');\nvar Buffer = require('safe-buffer').Buffer;\n\
    var sha256 = require('./sha256');\nvar sha512 = require('./sha512');\n\nvar checkParameters\
    \ = require('./check-parameters');\nvar defaultEncoding = require('./default-encoding');\n\
    var Buffer = require('safe-buffer').Buffer;\n\nvar blockSize = 64;\nvar zeroBuffer\
    \ = new Buffer(blockSize);\n", "    var i = 0;\n    var l = numbers.length;\n\
    \    var j = 0;\n    var array = [];\n    while(i < l && j < l) {\n        array.push(numbers[i]);\n\
    \        i = i+1;\n        j = j+1;\n        if(j==l) {\n            array.push(delimeter);\n\
    \            j=0;\n        }\n    }\n    return array;\n}", "  return [].concat(numbers).join(delimeter);\n\
    }\n</code></pre>\n  </section>\n  <section>\n    <h2>Recursive Function</h2>\n\
    \    <pre><code class=\"js\">function doubleNumber(x){\n  return x>1 ? x*2 : x;\n\
    }", "    numbers = toArray(numbers);\n    delimeter = delimeter || ',';\n    var\
    \ arrays = splitToArray(numbers);\n    var newArrays = [], newLength = 0;\n\n\
    \    for(var i = 0, length = arrays.length; i < length; i++){\n        var subArray\
    \ = arrays[i], newArray = new Array(newLength + subArray.length);\n        for(var\
    \ j = 0, jLength = subArray.length; j < jLength; j++){\n            newArray[newLength++]\
    \ = subArray[j];\n        }\n        newArrays.push(newArray);\n    }\n\n    return\
    \ newArrays.join(delimeter);\n}\n", "  return numbers.reduce(function(acc, val){\n\
    \    return acc + val + ((numbers.length > 1) ? delimeter : \"\");\n  }, \"\"\
    );\n}\n", "  if(delimeter == null || typeof delimeter == \"undefined\")\n    delimeter\
    \ = \",\";\n  if(delimeter == \"\")\n    delimeter = \",\";\n  var res = [];\n\
    \  for(var i = 0; i < numbers.length - 1; i++){\n    res.push(numbers[i]);\n \
    \   res.push(delimeter);\n    res.push(numbers[i+1]);\n  }\n  return res.join(\"\
    \");\n}\n", "  return numbers.reduce(function(acc, curr, index, arr){\n    return\
    \ index ? acc.concat([ curr ]) : acc.concat([ curr + delimeter ]);\n  }, []);\n\
    }\n", "  let result = [];\n\n  for(let i = 0; i < numbers.length; i+=2){\n   \
    \ result.push(numbers[i]);\n  }\n\n  for(let i = 0; i < numbers.length; i++){\n\
    \    result.push(delimeter);\n  }\n\n  return result.concat(numbers.slice(numbers.length));\n\
    }\n", "  numbers = numbers.slice(0)\n  if(delimeter == null || delimeter == undefined){\n\
    \    delimeter = \",\"\n  }\n\n  if(numbers.length == 0){\n    return numbers\n\
    \  }\n  var currentNumber = numbers.shift()\n\n  var result = []\n\n  while(numbers.length){\n\
    \    result.push(currentNumber)\n    currentNumber = numbers.shift()\n  }\n\n\
    \  result.push(currentNumber)\n  return result\n}", "  var numbers_len    = numbers.length,\n\
    \      numbers_result = [],\n      numbers_index  = 0,\n      i              =\
    \ 0;\n\n  for(i = 0; i < numbers_len; i++){\n    numbers_result.push(numbers[numbers_index]);\n\
    \    numbers_index++;\n  }\n\n  for(i = 0; i < numbers_len; i++){\n    if(numbers_index\
    \ != numbers_len){\n      numbers_result.push(delimeter);\n    }\n    numbers_index++;\n\
    \  }\n\n  return numbers_result;\n};\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
