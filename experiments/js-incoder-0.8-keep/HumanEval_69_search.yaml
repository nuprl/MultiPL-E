name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["  var max = lst[0];\n  var count = 1;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n    count += 1;\n\
    \  }\n  if(count >= max){\n    return -1;\n  }\n  return max;\n}\n", "  lst.sort((a,b)=>a-b);\n\
    \  let min=0;\n  let max=lst.length-1;\n  while(max>min){\n    let mid=Math.floor((max+min)/2);\n\
    \    if(lst[mid]>0){\n      max=mid-1;\n    }else{\n      min=mid+1;\n    }\n\
    \  }\n  return min;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nSolution with dynamic\
    \ programming\n\n<code>", " let obj = {}\n lst.map(i => {\n  obj[i] = obj[i]?\
    \ obj[i]+ 1 : 1;\n })\n \n let ans = -1;\n Object.entries(obj).forEach(([key,\
    \ value]) => {\n  if (value > ans) ans = key;\n })\n return ans;\n}\n", "  let\
    \ max;\n  for(let i=1;i<lst.length;i++){\n    max = Math.max(max, lst[i])\n  }\n\
    \  return max >= lst[0] ? max : -1;\n}\n", "  let l=0;\n  for(let i of lst){\n\
    \    if(l>=i)return i\n    else l++;\n  }\n  return -1;\n}\n", "  lst.sort();\n\
    \  var max = -Infinity;\n  var index = 0;\n  for (var i=0; i < lst.length; i++){\n\
    \    if (lst[i]>max){\n      max = lst[i];\n      index = i;\n    }\n  }\n  return\
    \ index >= 0 ? index : -1;\n}\n", "  var max = Number.MIN_SAFE_INTEGER;\n  var\
    \ index = -1;\n  for(var i=0, len = lst.length; i<len; i++){\n    var value =\
    \ lst[i];\n    if (value >= max){\n      max = value;\n      index = i;\n    }\n\
    \  }\n  return index;\n}\n", "\tvar index = -1;\n\t\n\tif(lst.length > 0){\n\t\
    \tvar min = Math.min(...lst);\n\t\tvar max = Math.max(...lst);\n\t\t\n\t\tindex\
    \ = lst.reduce(function(acc, cur){\n\t\t\treturn (acc > cur || acc == -1) ? acc\
    \ : -1;\n\t\t});\n\t\t\n\t\tif(index != -1){\n\t\t\tif(index == min) index++;\n\
    \t\t}\n\t}\n\t\n\treturn index;\n}\n", "    let low = 0;\n    let high = lst.length\
    \ - 1;\n    let mid = 0;\n    let frequency = lst[0] === 0 ? 0 : 1;\n    while(low\
    \ <= high){\n        mid = (low + high) >>> 1;\n        if(lst[mid] === frequency){\n\
    \            return mid;\n        }else if(lst[mid] < frequency){\n          \
    \  low = mid + 1;\n        }else{\n            high = mid - 1;\n        }\n  \
    \  }\n    return -1;\n}\n", "  if(lst.length <= 0)\n    return -1\n  let max =\
    \ 0\n  let ans = -1\n  for(let i = 0; i <= lst.length; i++){\n    let c = lst[i]\n\
    \    for(let j = i - 1; j >= 0; j--){\n      if(lst[j] === c){\n        ans =\
    \ Math.max(ans, j)\n        if(max < j)\n          max = j\n        break\n  \
    \    }\n    }\n  }\n  return ans > 0 ? ans : -1\n}", "    if(lst.length > 0){\n\
    \        var max = arr.reduce(function(max,value){\n            return value >\
    \ max ? value : max;\n        },lst[0]);\n        var index = lst.indexOf(max);\n\
    \        if(index >= 0) return arr[index];\n        return -1;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI think you can use the following\
    \ logic:\n<code>", "\t\n\tlet max=0;\n\t\n\tfor(let i=0;i<lst.length;i++){\n\t\
    \t\n\t\tif(lst[i]>max)\n\t\t\tmax=lst[i];\n\t}\n\t\n\tfor(let i=0;i<lst.length;i++){\n\
    \t\tif(lst[i]>=max)\n\t\t\treturn max;\n\t}\n\t\n\treturn -1;\n}\n\n", "    var\
    \ max = Number.MIN_VALUE;\n    var maxIndex = 0;\n    \n    for(var i=0; i<lst.length;\
    \ i++){\n        if( lst[i] > max && lst[i] > 0){\n            max = lst[i];\n\
    \            maxIndex = i;\n        }\n    }\n    \n    return maxIndex >= 0 ?\
    \ maxIndex : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou could use this:\n\
    <code>", "  return lst.sort(function(a, b){\n    return a-b;\n  }).reverse().find(function(e,\
    \ i, a){\n    return e>=0 && e<a[i]\n  }) || -1\n}", " let maxFreq=lst[0]\n let\
    \ maxFreqIndex=-1\n for(let i=0; i< lst.length; i++){\n  if(lst[i]>maxFreq){\n\
    \   maxFreq=lst[i]\n   maxFreqIndex=i\n  }\n }\n \n if(maxFreqIndex>-1){\n  return\
    \ maxFreqIndex+1\n }\n return -1\n}\n", "    for(let i=0;i<lst.length;i++){\n\
    \        for(let j=0;j<lst.length;j++){\n            if(lst[i]>lst[j]){\n    \
    \            return lst[i]\n            }\n        }\n    }\n    return -1\n}",
  "    let max = 0;\n    let vals = [];\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > 0){\n            if(vals.indexOf(lst[i]) < 0){\n        \
    \        vals.push(lst[i]);\n            }\n        }\n    }\n    for(let i =\
    \ 0; i < vals.length; i++){\n        if(vals[i] >= max){\n            max = vals[i];\n\
    \        }\n    }\n    return max;\n}", "\tlet arr = [];\n\tfor(let i=0; i<lst.length;\
    \ i++){\n\t\tlet number = lst[i];\n\t\tfor(let j=0; j<arr.length; j++){\n\t\t\t\
    if(arr[j] == number){\n\t\t\t\tarr[j] += 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    \tif(arr.length == 0){\n\t\t\tarr[0] = number;\n\t\t}\n\t}\n\tlet number = Math.max.apply(Math,\
    \ arr);\n\tfor(let i=0; i<arr.length; i++){\n\t\tif(arr[i] >= number){\n\t\t\t\
    number = arr[i];\n\t\t}\n\t}\n\tif(!number){\n\t\tnumber = -1;\n\t}\n\treturn\
    \ number;\n}\n", "    let maxFrequency = -Infinity;\n    let maxValue = -1;\n\
    \    let found = false;\n    for(const num of lst){\n      if(num > maxValue){\n\
    \        maxValue = num;\n      }\n      if(num === maxValue){\n        maxFrequency\
    \ ++;\n        if(maxFrequency >= num){\n          found = true;\n          break;\n\
    \        }\n      }\n    }\n    return found? maxValue: -1;\n}\n", "  var min;\n\
    \  for(var i=0;i<lst.length;i++){\n    if(lst[i]!==-1&&(lst[i]>0)&&(lst[i]!==min)){\n\
    \      min=lst[i];\n    }\n  }\n  return min;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nplease read my edit please, how can you solve the problem using the loop?\n\
    <|/ c |>\n<| c |>\ncan you please give me a solution using only loop?\n<|/ c |>\n\
    <| c |>\ni did it!\n<|/ c |>\n<| a tags=data-structures,arrays,algorithm,javascript,sorting\
    \ dscore=0 |>\nYou can do like this;\n<code>", "    // Write your code here\n\
    \    let maxElem = lst[0];\n    let freq = lst.filter(x => x > 0).length;\n  \
    \  for (let i = 1; i < lst.length; i++){\n        if(lst[i] > maxElem && freq\
    \ >= lst[i]){\n            maxElem = lst[i];\n            freq = lst[i];\n   \
    \     }\n    }\n    return maxElem;\n}\n</code>\n<|/ a tags=javascript dscore=1\
    \ |>\n<| a tags=javascript |>\nThe most effective solution is using Math.min.\n\
    The first element in the array is compared to the minimum value of the array,\
    \ and the second element to compare to the minimum value of that array. This process\
    \ is repeated until the minimum value of all elements is found. \n<code>", " \
    \   let i = 0;\n    while( i < lst.length && lst[i] > 0){\n        i++;\n    }\n\
    \    if (i == lst.length) return -1;\n    return lst[i];\n}\n", "\tvar first =\
    \ 0;\n\tvar last = lst.length - 1;\n\twhile (first <= last) {\n\t\tvar mid = Math.floor((first\
    \ + last) / 2);\n\t\tif (lst[mid] > lst[mid + 1]) {\n\t\t\tfirst = mid + 1;\n\t\
    \t} else {\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn lst[first] > lst[0] ?\
    \ lst[first] : -1;\n}", "\tvar max = -Infinity;\n\tvar maxFreq = 0;\n\tvar maxIndex\
    \ = -1;\n\tvar arr = [];\n\n\tlst.forEach(function(item){\n\t\tvar f = arr.filter(function(e){\n\
    \t\t\treturn e.freq === item;\n\t\t}).length;\n\t\tif(f > maxFreq){\n\t\t\tmaxFreq\
    \ = f;\n\t\t\tmaxIndex = item;\n\t\t}\n\t\tarr.push({freq:item, index:0});\n\t\
    });\n\n\tif(maxFreq >= 0){\n\t\tarr.forEach(function(item){\n\t\t\tif(maxIndex\
    \ === item.index){\n\t\t\t\tmax = Math.max(max, item.freq);\n\t\t\t}\n\t\t});\n\
    \t}\n\n\treturn max;\n}\n", "    for(let i=0;i<lst.length;i++){\n        let item\
    \ = lst[i];\n        let counter = freq(item);\n        if(counter>freqMax){\n\
    \            freqMax = counter;\n            freqItem = item;\n        }\n   \
    \ }\n    return freqItem;\n}\n", "    var max=0;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i].times>max){\n            max=lst[i].times;\n        }\n   \
    \ }\n    return max;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nvar search\
    \ = function( list, value ){\n    var result;\n    for( var i=0; i<list.length;\
    \ ++i ){\n        if( list[ i ].value === value ){ \n            result = list[\
    \ i ];\n            break;\n        }\n    }\n    return result ? result.freq\
    \ : -1;\n};\n</code>\n<|/ a tags=javascript,algorithm,data-structures |>\n<| a\
    \ dscore=1 |>\n<code>", "  for(var i=0; i<lst.length; i++){\n    if(lst[i] > 0){\n\
    \      var count = 0;\n      for(var j=0; j<lst.length; j++){\n        if(lst[j]\
    \ === lst[i]){\n          count++;\n        }\n      }\n      if(count > lst[i]){\n\
    \        return lst[i];\n      }\n    }\n  }\n  return -1;\n}\n", "  var arr =\
    \ lst.sort((a, b) => b - a),\n    l = arr[0],\n    r = arr[arr.length - 1]\n \
    \ \n  if(arr[0] === 0 && r === 0) return r\n  if(arr[0] === 0) return l\n  if(arr[0]\
    \ === r) return r\n  \n  while((arr[0] < r) && (arr.length > 1)){\n    if(arr[0]\
    \ <= (arr[l] + arr[r])){\n      l = arr[0]\n      arr.shift()\n    } else {\n\
    \      r = arr[0]\n      arr.shift()\n    }\n  }\n  \n  if(arr[0] === (arr[l]\
    \ + arr[r])) return arr[0]\n  else return -1\n}\n</cell>\n<text>\nSearch\nThe\
    \ search function is fairly straightforward, and involves just three simple steps:\n\
    \nFind the biggest number that appears in the list.\nFind the smallest number\
    \ that is greater than the biggest number.\nFind the frequency of that number.\n\
    \n\n</text>\n<text>\nThe function first sorts the list from largest to smallest,\
    \ and then goes through each value in the list one at a time.\n\nIf the number\
    \ is smaller than the largest number that appears in the list, we shift the number\
    \ out of the list.\nIf the number exceeds the largest number that appears in the\
    \ list, but smaller than the smallest number that is greater than the biggest\
    \ number that appears in the list, we shift the number out of the list.\nIf none\
    \ of the conditions above are true, we return -1.\n\n\n</text>\n<text>\nNotice\
    \ that if we shift the number out of the list, we don't actually have to modify\
    \ the array.\n\nIf we find more than one number that is greater than the biggest\
    \ number that appears in the list, we stop.\n\n\n</text>\n<text>\nNotice also\
    \ that we could have shifted all of the numbers of the list without ever seeing\
    \ them in the first place.\n\nThis is because the shift function returns the removed\
    \ element rather than modifying the array in place.  It is worth noting here that\
    \ we are not actually mutating the array at all!  We are simply returning the\
    \ element that was removed.  This means we can just shift the array without ever\
    \ seeing any of it.\n\n\n</text>\n<text>\nAs an example, let's look at a few different\
    \ scenarios where we can see how this function would behave.  In each case, we\
    \ are sorting the list from largest to smallest so that we will start at the beginning\
    \ of the list and work our way down.\n\n\n</text>\n<cell>", "  let ans = -1;\n\
    \  for (let i = 0; i < lst.length; i++){\n    if (lst[i] > 0 && lst[i] >= ans){\n\
    \      ans = lst[i];\n    }\n  }\n  return ans;\n}\n", "\tlet max = 0;\n\tfor\
    \ (let num of lst){\n\t\tif (num > max){\n\t\t\tmax = num;\n\t\t}\n\t\tif (num\
    \ == max){\n\t\t\tif (num >= lst.length){\n\t\t\t\treturn -1;\n\t\t\t} else {\n\
    \t\t\t\tmax = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}", "  let n = lst.length;\n\
    \  if(!n || n==1)return n;\n  let max = 1;\n  for(let i=0; i<n-1; i++){\n    if(lst[i]>lst[i+1]){\n\
    \      max = lst[i+1];\n    }\n  }\n  return max;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nthanks for your time. the code doesn't output the right answer but you helped\
    \ me to fix it.\n<|/ c |>\n<| a |>\n<code>", "    const min = -Infinity;\n   \
    \ let freq = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i]\
    \ == min){\n            freq += 1;\n            if (freq > lst[i]){\n        \
    \        min = lst[i];\n                freq -= 1;\n            }\n        } else\
    \ {\n            break;\n        }\n    }\n    return -1\n}\n", "\tvar max,\n\t\
    \t\ti,\n\t\t\tsum = 0,\n\t\t\tfreq = 0,\n\t\t\tmin = lst[0];\n\n\t// Loops through\
    \ the array for counts\n\tfor(i=0,len=lst.length;i<len;i++){\n\t\t// Checks if\
    \ the current number is higher than the previous and \n\t\t// if so updates the\
    \ sum, frequency and min\n\t\tif(lst[i] >= min){\n\t\t\tsum += lst[i];\n\t\t\t\
    freq++;\n\t\t}\n\t\t// Checks if the current number is equal to the previous and\
    \ \n\t\t// if so updates the sum, frequency and min\n\t\tif(lst[i] == min){\n\t\
    \t\tsum += lst[i];\n\t\t\tfreq++;\n\t\t}\n\t}\n\n\t// Checks if there was a value\
    \ for max\n\tif(freq > 0){\n\t\t// Gets the greatest number in the array\n\t\t\
    max = sum;\n\t\t// Gets the number of times it appears\n\t\tmax = freq;\n\t\t\
    // Gets the first number in the array\n\t\tmin = lst[0];\n\t\t// Gets the value\
    \ of the first number\n\t\tsum = lst[0];\n\t\t// Gets the frequency of the first\
    \ number\n\t\tfreq = 1;\n\t\t// Loops through the array for counts\n\t\tfor(i=1;i<lst.length;i++){\n\
    \t\t\t// Checks if the current number is higher than the previous and \n\t\t\t\
    // if so updates the sum, frequency and min\n\t\t\tif(lst[i] > max){\n\t\t\t\t\
    max = lst[i];\n\t\t\t\tfreq++;\n\t\t\t}\n\t\t\t// Checks if the current number\
    \ is equal to the previous and \n\t\t\t// if so updates the sum, frequency and\
    \ min\n\t\t\tif(lst[i] == max){\n\t\t\t\tsum += max;\n\t\t\t\tfreq++;\n\t\t\t\
    }\n\t\t}\n\t\t// Checks if there was a value for max\n\t\tif(freq > 0){\n\t\t\t\
    //return max;\n\t\t\treturn sum;\n\t\t}\n\t\t//return -1;\n\t\treturn 0;\n\t}\n\
    \telse return -1;\n}\n", "    var maxFreq=0;\n    var maxNum=-1;\n    for(var\
    \ i=0; i<lst.length;i++){\n        if (lst[i]<0)\n            return -1;\n   \
    \     else if (lst[i]<maxNum)\n            maxNum=lst[i];\n        else\n    \
    \        maxFreq=lst[i];\n    }\n    return maxFreq>maxNum? maxFreq:maxNum;\n\
    }\n", "    var maxIndex=0;\n    for(var i=0;i<lst.length;i++){\n        if((lst[i]\
    \ > 0)&&(lst[i]>maxIndex)){\n            maxIndex=lst[i];\n        }\n    }\n\
    \    if(maxIndex == lst[0]){\n        return -1;\n    }\n    return maxIndex;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nHere is my solution in JS\n<code>", "    let result\
    \ = -1;\n    let frequency = 0;\n    for(let num of lst){\n        for(let j=1;j<frequency+1;j++){\n\
    \            if(num == j){\n                result = num;\n                frequency\
    \ = j;\n                break;\n            }\n        }\n    }\n    return result\
    \ != -1? result : -1;\n}\n", "  var len = lst.length;\n  var maxFreq = 0;\n  for(var\
    \ i=0; i<len; i++){\n    if(lst[i] == maxFreq){\n      return maxFreq;\n    }\n\
    \    \n    maxFreq += lst[i];\n  }\n  return -1;\n}\n", "    let maxFreq = -1\n\
    \    let maxVal = -1\n    for(let i=0; i<lst.length; i++){\n        let item =\
    \ lst[i]\n        if(item == maxVal && maxFreq >= 1){\n            return maxVal\n\
    \        }\n        for(let j=0; j<item.freq; j++){\n            if(item.val+j\
    \ > maxVal && maxFreq >= 1){\n                maxVal = item.val+j\n          \
    \      maxFreq = item.freq\n            }\n        }\n    }\n    return -1\n}\n",
  "    for(var i=0; lst[i]; i++){\n        if(lst[i]>0){\n            //If greater\
    \ than 0, increment the count by one and return\n            return 1 + search(lst.slice(i));\n\
    \        }\n    }\n    return -1;\n}", "    let max = 0;\n    for(let i=0;i<lst.length;i++){\n\
    \        if(lst[i]>max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}", "    var ls = lst.length;\n    var max = -1;\n    var count = 0;\n\
    \    for(var i =0; i<ls; i++){\n        var temp = lst[i];\n        if(temp >\
    \ max){\n            max = temp;\n            count = 1;\n        }else if(temp\
    \ === max){\n            count ++;\n        }\n    }\n    return max > -1 ? max:\
    \ -1;\n}\n</cell>\n<cell>\na = [4,1,2,2,3,1];\nb = [1, 2, 2, 3, 3, 3, 4, 4, 4];\n\
    c = [5, 5, 4, 4, 4];\n</cell>\n<cell>\nsearch(a);\n</cell>\n<cell>\nsearch(b);\n\
    </cell>\n<cell>\nsearch(c);\n</cell>\n<text>\n4.3 Counting Sorting\n\n</text>\n\
    <text>\nCounting sorting is a sorting algorithm that works in similar fashion\
    \ as the bubble sort in c++, however it counts the number of repetitions of a\
    \ certain element. \nIt is used to sort data with repeated values such as integers\
    \ in a list. \nThe algorithm works by repeatedly swapping the largest element\
    \ with the smallest element. If the number you are swapping with is equal to the\
    \ largest element in the list, then you add one to the count of the element you\
    \ are swapping with. After all the elements in the list have been swapped, you\
    \ repeat the process with the new list.\n\n\n</text>\n<text>\nThe algorithm first\
    \ checks to see if the list is empty. If it is, it returns. Else it checks to\
    \ see if the smallest element in the list is the same as the largest element in\
    \ the list. If it is, then the list is sorted and can return. If it is not, the\
    \ algorithm swaps the largest element in the list with the smallest element. Once\
    \ the list has been sorted and there are no more elements in the list, the algorithm\
    \ returns the count of how many times each element appears.\n\n\n</text>\n<text>\n\
    For example, if the list is [3, 1, 4, 1, 5, 9], it first checks to see if the\
    \ list has a length greater than 1. if it is not, it returns. Then it checks to\
    \ see if the smallest element in the list is 1 larger than the largest element\
    \ in the list. If it is, then the list is sorted and can return. If it is not,\
    \ the algorithm swaps the largest element in the list with the smallest element.\
    \ Once the list has been sorted and there are no more elements in the list, the\
    \ algorithm returns the count of how many times each element appears.\n\n\n</text>\n\
    <cell>\ndef counting_sort(lst):\n    if len(lst) <= 1:\n        return lst\n \
    \   else:\n        max = lst[0]\n        count = 1\n        for i in range(len(lst)-1):\n\
    \            if lst[i] > max:\n                max = lst[i]\n                count\
    \ = i+1\n        if lst[count-1] > max:\n            max = lst[count-1]\n    \
    \        count = 1\n        return count", "    let maxIndex = 0;\n    let maxFreq\
    \ = 0;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] > maxFreq){\n\
    \            maxFreq = lst[i];\n            maxIndex = i;\n        }\n    }\n\
    \    if(maxFreq > 0){\n        return lst[maxIndex];\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    return lst.reduce(function(prev, curr){\n        return\
    \ prev > 0 ? Math.max(prev, curr) : curr;\n    }, -1);\n}\n", "    lst = lst.sort();\n\
    \    for(var i = 0; i < (lst.length - 1); i++){\n        if (lst[i] === lst[i+1]\
    \ && lst[i+1] > 0){\n            return lst[i+1];\n        }\n    }\n    return\
    \ -1;\n}\n", "    let maxNum = -1;\n    let currNum = lst[0];\n    let currFreq\
    \ = lst.reduce((a,b) => {\n        return Math.max(a,b); \n    })\n\n    for(let\
    \ i = 1; i < lst.length; i++){\n        if(lst[i] > currNum){\n            currNum\
    \ = lst[i];\n        }\n        if(currNum == lst[i]){\n            currFreq++;\n\
    \        }\n        if(currFreq >= currNum){\n            maxNum = currNum;\n\
    \            break;\n        }\n    }\n    return maxNum\n}\n", "    var max =\
    \ -Infinity;\n    var res = -1;\n    var freq = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        freq[lst[i]] = freq[lst[i]] ? freq[lst[i]]+1 : 1;\n        if(freq[lst[i]]\
    \ > max){\n            max = freq[lst[i]];\n            res = lst[i];\n      \
    \  }\n    }\n    return res\n}", "    var max;\n    for(var i=0;i<lst.length;i++){\n\
    \      if(lst[i]>max){\n        max=lst[i];\n      }\n      if(lst[i]==max){\n\
    \        if(lst[i]>lst[i+1]){\n          max=lst[i+1];\n        }\n      }\n \
    \   }\n    if(max==lst[lst.length-1]){\n      return -1;\n    }\n    return max;\n\
    }", "\tvar maxFreq = 0;\n\tfor(var i=0; i<lst.length; i++){\n\t\tif(maxFreq <\
    \ lst[i]) maxFreq = lst[i];\n\t\tif(maxFreq == lst[i]) maxFreq++;\n\t}\n\tif(maxFreq\
    \ == lst.length) return -1; //if no such number exist return -1.\n\treturn maxFreq;\n\
    }\n", "\tlet max = lst[0];\n\tlet min = 0;\n\tfor(let i=0; i<lst.length; i++){\n\
    \t\tif(lst[i] < min) min = lst[i];\n\t\tif(lst[i] > max) max = lst[i];\n\t}\n\t\
    return (min > max) ? -1 : max;\n}\n", "    var result=-1;\n    var count= 0;\n\
    \    for(var i=0;i<lst.length;i++){\n        count+=lst[i];\n        if(count>result){\n\
    \            result=count;\n        }\n    }\n    return result;\n}\n", "    let\
    \ max = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] > max){\n\
    \            max = lst[i];\n        }\n    }\n    let index = -1;\n    for (let\
    \ i = 0; i < lst.length; i++){\n        if (lst[i] == max){\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index != -1){\n        for\
    \ (let i = index; i < lst.length; i++){\n            if (lst[i] > max){\n    \
    \            max = lst[i];\n            }\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks so much for the help! But I am wondering\
    \ why are we returning `-1` instead of `0`. Do you know the reason? If so, what\
    \ do you think would be the best solution?\n<|/ c |>\n<| c |>\nBecause if the\
    \ list is empty, it cannot possibly contain a value greater than 0. For your second\
    \ example, it is not necessary for the first element to have a frequency greater\
    \ than or equal to the value of the first element. For the third example, it is\
    \ not necessary for the second element to have a frequency greater than or equal\
    \ to the value of the first element. So `-1` would mean no such value existed,\
    \ whereas `0` would mean that all elements had a frequency greater than or equal\
    \ to the value of the first element.\n<|/ c |>\n<| c |>\nGot it! Thank you!\n\
    <|/ c |>\n<| a |>\nUsing HashMap and Iterating through\n<code>\npublic static\
    \ int search(int[] arr) {\n    HashMap<Integer, Integer> hm = new HashMap<>();\n\
    \    int result = -1;\n    for(int val: arr){\n        hm.put(val, hm.get(val)\
    \ == null ? 1 : hm.get(val) + 1);\n    }\n    Iterator<Integer> itr = hm.keySet().iterator();\n\
    \    while(itr.hasNext()){\n        int currentVal = itr.next();\n        if(hm.get(currentVal)\
    \ > 0){\n            if(currentVal > result){\n                result = currentVal;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ tags=arrays,java |>\n<| c |>\nThank you so much for the help! It works perfectly\
    \ fine but it is weird that we are returning `-1` instead of the highest number\
    \ that has a frequency greater than or equal to the value of the first element.\
    \ Do you know why?\n<|/ c |>\n<| c |>\nIt returns -1 because it is not possible\
    \ to have a greater number that has a frequency greater than or equal to the value\
    \ of the first element. For the second element, it is possible to have it with\
    \ a frequency greater than or equal to the value of the first element.\n<|/ c\
    \ |>\n<| c |>\nGot it! Thank you!\n<|/ ", "    let index = -1;\n    for( let i=0;\
    \ i<lst.length; i++ ){\n        if( lst[i] == lst[i-1] ) index = i;\n        if(\
    \ lst[i] == 0 ){\n            index = i;\n            break;\n        }\n    }\n\
    \    return index;\n}\n", "    var max;\n    for(var i = 0; i < lst.length; i++){\n\
    \      if(lst[i] > max){\n        max = lst[i];\n      } else if(lst[i] === max){\n\
    \        if(lst[i] >= lst[lst.length - 1]){ \n          return -1;\n        }\n\
    \      }\n    }\n    return max;\n  }\n", "  let res = [];\n  for (let i = 0;\
    \ i < lst.length; i++){\n    let num = lst[i];\n    res.push(num);\n  }\n  res.sort((a,\
    \ b) => b - a);\n  let ans = -1;\n  let freq = -1;\n  for (let i = 0; i < res.length;\
    \ i++){\n    if (res[i] == res[i-1]){\n      freq--;\n    } else {\n      ans\
    \ = Math.max(ans, freq);\n      freq = res[i];\n    }\n  }\n  return ans;\n}\n",
  "\t\n}\n", "    \n    for(i in lst){\n        if (lst[i] >= 0) {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\n", "  let maxValue = -1\n  lst.forEach((v)\
    \ => {\n    if(v > maxValue){\n      maxValue = v\n    }\n  })\n  if(maxValue\
    \ > 0){\n    let maxCount = -1\n    lst.forEach((v, i) => {\n      if(v === maxValue){\n\
    \        maxCount = i\n      }\n    })\n    if(maxCount > 0){\n      return maxValue\n\
    \    }\n  }\n  return -1\n}\n", "    if(lst.length <= 0)\n        return -1;\n\
    \    let freq = lst.map(x => ++x).reduce((a,b)=>a+b);\n    let max = -1;\n   \
    \ for(let i=1;i<lst.length;i++)\n        if(lst[i] == lst[i-1]) continue;\n  \
    \      if(lst[i] > lst[i-1] && freq >= lst[i])\n            max = lst[i-1];\n\
    \    return max;\n}\n", "  let largest = 0\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i] > largest && lst[i] >= lst[largest]){\n      largest = i\n    }\n\
    \  }\n  return largest == lst.length - 1 ? -1 : largest\n}\n", "    for(var i\
    \ of lst){\n        if(i > 0){\n            for(var j of lst){\n             \
    \   if(j > i && lst[j] > lst[i] + 1 ){\n                    return i;\n      \
    \          }\n            }\n        }\n    }\n    return -1;\n}\n", "    \n \
    \   var maxNum = -Infinity;\n    var maxFreq = -1;\n    \n    for(var i = 0; i\
    \ < lst.length; i++){\n        var item = lst[i];\n        if(item > maxNum){\n\
    \            maxNum = item;\n            maxFreq = 1;\n        }\n        else\
    \ if(item == maxNum && maxFreq < item){\n            maxFreq++;\n        }\n \
    \   }\n    return maxNum;\n}\n", "\tlet res = []\n\tfor(let i=0; i< lst.length;\
    \ i++){\n\t\tlet index = lst.indexOf(lst[i])\n\t\tlet freq = index > -1 ? index+1\
    \ : 0\n\t\tres.push(freq)\n\t}\n\t\n\treturn res.reduce((prev, curr)=>{\n\t\t\
    if(prev > curr){\n\t\t\treturn prev\n\t\t}else{\n\t\t\treturn curr\n\t\t}\n\t\
    })\n}\n", "  var maxIndex = lst.findIndex(item => item > 0);\n  return maxIndex\
    \ >= 0 ? lst[maxIndex] : -1;\n}\n", "  return lst.sort((a,b) => b-a).reduce(\n\
    \    (acc,cur) => (cur>acc && cur<=lst.length ? cur : acc), -1);\n}\n\nconst search\
    \ = (lst) =>\n  lst.sort((a,b) => b-a).reduce((acc, cur) => (cur > acc && cur\
    \ <= lst.length ? cur : acc), -1);\n\nconst search = (lst) => lst.reduce((acc,\
    \ cur) => (cur > acc && cur <= lst.length ? cur : acc), -1);\n", "  var maxFreq\
    \ = -1;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].freq > maxFreq){\n\
    \      maxFreq = lst[i].freq;\n    }\n  }\n  if(maxFreq == -1){\n    return -1;\n\
    \  }\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].freq == maxFreq){\n  \
    \    return lst[i].num;\n    }\n  }\n  return -1;\n}\n", "  lst.sort();\n  let\
    \ index = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n \
    \     if(index < 0 || lst[i] > lst[index])\n        index = i;\n    }\n  }\n \
    \ return index > 0 ? lst[index] : -1;\n}\n", "  \n  lst.sort(function(x,y){\n\
    \    return x-y;\n  });\n  \n  for(var i = 0;i<lst.length;i++){\n    if((lst[i]>0)\
    \ && (i==lst.indexOf(lst[i]))){\n      return i;\n    }\n  }\n  \n  return -1;\n\
    }\n\n", "  var ans = -1;\n  var freq = 0;\n\n  for(var i = 0;i < lst.length;i++){\n\
    \    if(lst[i] >= 0){\n      freq++;\n    }else{\n      if(ans === -1 || freq\
    \ > ans){\n        ans = freq;\n      }\n      freq = 1;\n    }\n  }\n  return\
    \ ans;\n}\n", "\tif(lst.filter(v => v>=0).length===0) return -1;\n\tvar i=0;\n\
    \twhile(i<lst.length && lst[i]<=0){\n\t\ti++;\n\t}\n\tif(i<lst.length) \n\t\t\
    return lst[i];\n\telse return -1;\n}\n", "\tlet max = 0;\n\tfor(let i = 0; i <\
    \ lst.length; i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tif(lst[i]\
    \ >= max && lst[i] < lst[i+1]){\n\t\t\treturn max;\n\t\t}\n\t}\n\treturn -1;\n\
    }\n", "\tlet max = 0;\n\tlet maxFreq = 0;\n\tfor (let i = 0; i < lst.length; i++){\n\
    \t\tif (lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t\tmaxFreq = i;\n\t\t} else if\
    \ (lst[i] === max && lst[i] > maxFreq){\n\t\t\tmaxFreq = lst[i];\n\t\t}\n\t}\n\
    \treturn maxFreq ? maxFreq : -1;\n}\n", "    var max = 0;\n    var found = false;\n\
    \    for(var i=0;i<lst.length;i++){\n        if(lst[i]>max){\n            max\
    \ = lst[i];\n        }\n        if(lst[i]==max){\n            found = true;\n\
    \        }\n    }\n    if(!found){\n        return -1;\n    }\n    return max;\n\
    }\n", "    let counter = lst.map( (item) => {\n        return lst.filter(x =>\
    \ x != item).length\n    })\n    return Math.max(...counter);\n}", "  for (let\
    \ i = lst.length - 1; i > 0; i--) {\n    const num = lst[i];\n    const count\
    \ = lst.filter(item => item === num).length;\n    if (count > num) return num;\n\
    \  }\n  return -1;\n}\n", "\tlet max = 0;\n\tlet val = lst[0];\n\tfor(let i =\
    \ 1; i < lst.length; i++){\n\t\tif(lst[i] > val){\n\t\t\tval = lst[i];\n\t\t}\n\
    \t}\n\tfor(let i = 1; i < lst.length; i++){\n\t\tif(val === lst[i]){\n\t\t\treturn\
    \ i;\n\t\t}\n\t}\n\treturn -1;\n}\n<|/ file dstars=1 source=github |>\n<| a tags=arrays,algorithm,javascript,sorting\
    \ |>\n<code>\nvar search = function (nums) {\n    for (let i = 1; i < nums.length;\
    \ i++) {\n        let val = nums[i];\n        let index = i;\n        for (let\
    \ j = i; j < nums.length; j++) {\n            if (val > nums[j]) {\n         \
    \       index = j;\n                break;\n            }\n        }\n       \
    \ if (val === nums[index]) {\n            return index;\n        }\n    }\n  \
    \  return -1;\n};\n", "    // Write your code here\n    if (lst.length == 0) {\n\
    \        return -1;\n    }\n\n    var maxFreq = 0;\n    var maxVal = lst[0];\n\
    \n    for (var i = 0; i < lst.length; i++) {\n        var curVal = lst[i];\n \
    \       var curFreq = countOccurrences(lst, curVal);\n        if (curFreq > maxFreq)\
    \ {\n            maxFreq = curFreq;\n            maxVal = curVal;\n        }\n\
    \    }\n    return maxVal;\n}\n", "    if(lst.length == 0) return -1\n    let\
    \ maxVal = lst[0]\n    let freq = 1\n    for(let i = 1; i < lst.length; i++){\n\
    \        if(lst[i] >= maxVal){\n            maxVal = lst[i]\n        }else if(lst[i]\
    \ == maxVal && lst[i] >= freq){\n            freq = lst[i]\n        }\n    }\n\
    \    return maxVal\n}\n", "  for(var i=0;i<lst.length;i++){\n  \tif(lst[i]>0 &&\
    \ freq[lst[i]]>=freq[lst[0]]){\n  \t\treturn lst[i];\n  \t}\n  \telse{\n  \t\t\
    return -1;\n  \t}\n  }\n  return -1;\n}\n", "    var max = 0;\n    var maxFreq\
    \ = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] > max){\n    \
    \        max = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ max;\n}\n", "    return lst.filter(function(elem){\n        return elem > 0\n\
    \    }).reduce(function(acc, el){\n        return acc > el ? acc : el\n    },\
    \ -1);\n}\n", "\tvar i = lst.length - 1;\n\tvar freq = lst[i];\n\n\twhile(i>=0\
    \ && lst[i]>freq){\n\t\ti--;\n\t\tfreq = lst[i];\n\t}\n\n\tif(i >= 0){\n\t\treturn\
    \ i;\n\t}\n\telse return -1;\n}\n", "  if(lst.length < 2){\n    return -1;\n \
    \ }\n  var largestFrequency = 1;\n  var lastElement = lst[0];\n  var lastFrequency\
    \ = 1;\n  var i = 1;\n  for(; i < lst.length; i++){\n    if(lst[i] === lastElement){\n\
    \      lastFrequency++;\n    }else{\n      if(lastFrequency >= largestFrequency){\n\
    \        return lastElement;\n      }\n      lastElement = lst[i];\n      lastFrequency\
    \ = 1;\n    }\n  }\n  return lastElement;\n}\n", "    var result = -1;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] >= 0 && lst[i] <= lst[result]){\n\
    \            result = i;\n        }\n    }\n    return result;\n}\n", "  \n  if(lst.includes(-1)){\n\
    \    return -1;\n  }\n  let largest = lst[0]; \n  let greatestLargest = -1;\n\
    \  let frequency = 1;\n  let lastFreq = -1;\n  for(let i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] === largest){\n      lastFreq = frequency;\n      frequency++;\n\
    \      if(lastFreq >= lst[i]){\n        greatestLargest = lastFreq;\n      }\n\
    \    } else {\n      if(lastFreq === -1){\n        greatestLargest = frequency;\n\
    \      }\n      lastFreq = -1;\n      frequency = 1;\n    }\n  }\n  return greatestLargest;\n\
    }\n", "    \n    let max = lst[0], freq = 1;\n\n    for(let i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n            freq\
    \ = 1;\n        } else if(lst[i] == max){\n            freq++;\n        }\n  \
    \  }\n    return -1*freq;\n    \n}\n", "    if(lst.length > 0){\n        let maxIndex\
    \ = 0, max = 0;\n        lst.forEach(element => {\n            if(element > max){\n\
    \                max = element;\n                maxIndex = lst.indexOf(max);\n\
    \            }\n        });\n        if(maxIndex === lst.length -1){\n       \
    \     return -1;\n        } else {\n            return maxIndex;\n        }\n\
    \    } else {\n        return -1;\n    }\n}\n", "\tlet max=0;\n\tfor (let i of\
    \ lst){\n\t\tif (i>max){\n\t\t\tmax=i;\n\t\t}\n\t}\n\tfor (let i of lst){\n\t\t\
    if (i>max && i>lst[lst.length-1]){\n\t\t\tmax=i;\n\t\t}\n\t}\n\treturn max;\n\
    }\n", "\tif(lst == null || lst.length == 0) return -1;\n\tvar freq = {};\n\tfor(var\
    \ i = 0; i < lst.length; i++){\n\t\tvar val = lst[i];\n\t\tfreq[val] = freq[val]\
    \ || 0;\n\t\tfreq[val]++;\n\t}\n\tvar res = -1;\n\tfor(var p in freq){\n\t\tif(freq[p]\
    \ >= res && val == p) res = p;\n\t}\n\treturn res;\n}", "    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i]>0){\n            for(var j=i+1; j<lst.length; j++){\n\
    \                if(lst[j]>0){\n                    return lst[i]\n          \
    \      }\n            }\n        }\n    }\n    return -1;\n}", "    if(lst.length\
    \ === 0) return -1;\n    var result = -Infinity;\n    var max = -Infinity;\n \
    \   var maxIndex = 0;\n    for(var i of lst){\n        var index = i - 1;\n  \
    \      if(result > -Infinity){\n            var res = Math.pow(Math.abs(result),\
    \ Math.abs(index));\n            if(res > max){\n                max = res;\n\
    \                maxIndex = index;\n            }\n        }\n        result =\
    \ i;\n    }\n    return maxIndex;\n}\n", "    var max = 0;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i]>0){\n            max = Math.max(lst[i],max);\n        }\n \
    \   }\n    return max;\n}", "  var i;\n  for(i=0;i<lst.length;i++){\n    if(lst[i]>0&&arr(lst,i)>0){\n\
    \      return lst[i];\n    }\n  }\n  return -1;\n}", "\tlet maxVal = Number.MAX_SAFE_INTEGER;\n\
    \tlet maxFreq = 0;\n\tlet numArr = [];\n\tlet num;\n\tfor(num of lst){\n\t\tnumArr.push(num);\n\
    \t}\n\tfor(num of numArr){\n\t\tlet freq = lst.filter(x => x == num).length;\n\
    \t\tif(freq > maxFreq){\n\t\t\tmaxFreq = freq;\n\t\t\tmaxVal = num;\n\t\t}\n\t\
    }\n\treturn maxVal;\n}", "\tvar counter=0;\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tif((lst[i]==-1)&&(!i)){\n\t\t\tcounter=lst[i]*-1;\n\t\t\tbreak;\n\t\t}\n\t\
    \telse if(lst[i]==lst[i-1]){\n\t\t\tcounter+=lst[i]\n\t\t}\n\t\telse if(lst[i]>lst[i-1]){\n\
    \t\t\tcounter=lst[i]*-1;\n\t\t}\n\t}\n\treturn counter;\n}\n", "  for (let i =\
    \ 0; i < lst.length; i++){\n    if (lst[i] >= lst[i+1]){\n      return lst[i]\n\
    \    }\n  }\n  return -1\n}\n", "    \n    let greatestIndex=-1;\n    let greatest=-1;\n\
    \    for(let i=0;i<lst.length;i++){\n        let currentIndex=lst[i]\n       \
    \ if(greatestIndex>=0&&greatest<lst[i]){\n            return -1;\n        }\n\
    \        if(lst[i]<0||greatestIndex>=0){\n            return -1;\n        }\n\
    \        for(let j=0;j<lst.length;j++){\n            if(lst[j]==currentIndex){\n\
    \                greatest=currentIndex\n                greatestIndex=j;\n   \
    \         }\n        }\n    }\n    return greatest;\n}\n", "  var max = 0;\n \
    \ for(var i=0; i< lst.length; i++){\n    max = Math.max(lst[i], max);\n  }\n \
    \ return max;\n}\n", "  let lastIndex = lst.length - 1\n  let i = 0\n  let frequency\
    \ = 0\n  let maxFrequency = -1\n  while(i < lastIndex){\n    if(lst[i] > maxFrequency){\n\
    \      maxFrequency = lst[i]\n      i = 0\n    }\n    i++\n  }\n  while(i < lastIndex){\n\
    \    if(lst[i] == maxFrequency){\n      frequency++\n      i++\n    }else{\n \
    \     if(lst[i] > maxFrequency){\n        maxFrequency = lst[i]\n        frequency\
    \ = 0\n      }\n    }\n  }\n  if(frequency >= maxFrequency){\n    return -1\n\
    \  }else{\n    return maxFrequency\n  }\n}\n", "  let maxIndex = -1\n  let minIndex\
    \ = 0\n  for(let i = 0; i<lst.length; i++){\n    if (lst[i] < lst[minIndex])\n\
    \      minIndex = i\n    if (lst[i] > lst[maxIndex])\n      maxIndex = i\n  }\n\
    \  if (maxIndex < lst.length-1)\n    return lst[maxIndex]\n  if (minIndex > 0)\n\
    \    return lst[minIndex-1]\n  return -1\n}\n", "  var maxVal = -1, min = 0, maxIndex\
    \ = 0;\n  var cnt = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] < 0){\n\
    \      cnt += lst[i];\n      continue;\n    }\n    cnt += lst[i];\n    if(max\
    \ < cnt){\n      max = cnt;\n      maxIndex = i;\n    }\n    if(cnt >= lst[i]){\n\
    \      cnt -= lst[i];\n      min++;\n    }\n  }\n  return maxIndex == 0 ? -1 :\
    \ min;\n}\n", "    return Math.max.apply(null, lst).filter(e => lst.reduce((a,b)\
    \ => a+1 === b ? e : a) > e.length);\n}\n", "  var maxIndex = 0;\n  var maxFreq\
    \ = -1;\n  var currIndex = -1;\n  var currFreq = -1;\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]<=0 || lst[i]==lst[currIndex]){\n      currFreq++;\n      currIndex\
    \ = i;\n      continue;\n    }\n    currFreq--;\n    if(currFreq>maxFreq){\n \
    \     maxFreq = currFreq;\n      maxIndex = i;\n    }\n  }\n  if(maxFreq>=0){\n\
    \    return lst[maxIndex];\n  }else{\n    return -1;\n  }\n}", "  var maxVal =\
    \ lst[0]\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > maxVal){\n \
    \     maxVal = lst[i]\n    }\n  }\n  for(var i = 1; i < lst.length; i++){\n  \
    \  if(lst[i] >= maxVal){\n      return i\n    }\n  }\n  return -1\n}\n", "   \
    \ var result = 0;\n    for (var i in lst){\n        if(lst.hasOwnProperty(i) &&\
    \ lst[i] > 0){\n            var numFreq = lst[i];\n            var numVal = i;\n\
    \            while (numFreq > result){\n                result = numVal;\n   \
    \             numFreq = numFreq - 1;\n            }\n        }\n    }\n    if(result\
    \ == -1){\n        console.log(\"nope\")\n    }else{\n        console.log(result)\n\
    \    }\n}\nsearch([4, 1, 2, 2, 3, 1])</code>\n<|/ a |>\n<| a dscore=0 tags=javascript,arrays,algorithm\
    \ |>\n<code>", "    \n    let maxNum = lst.reduce((acc, val) =>{\n       \n  \
    \      return (acc.freq >= val)? acc : val\n    }, 0)\n\n    return maxNum\n \
    \   \n}\n", "\tlet highestNum = 0;\n\tlet highestFreq = -1;\n\tfor (let i = 0;\
    \ i < lst.length; i++){\n\t\tlet freq = lst[i].frequency;\n\t\tif(freq >= highestFreq){\n\
    \t\t\thighestNum = lst[i].num;\n\t\t\thighestFreq = freq;\n\t\t}\n\t}\n\treturn\
    \ highestNum;\n}", "  let max = 0;\n  let freq = 0;\n  lst.forEach(item => {\n\
    \    if(item > 0){\n      freq++\n    }else{\n      max = item;\n    }\n  })\n\
    \  if(max > 0 ){\n    return max\n  }else{\n    return -1\n  }\n}", "  var max\
    \ = 0;\n  for(var i = 0; i< lst.length; i++){\n     if(lst[i] > max){\n      \
    \  max = lst[i];\n     }\n  }\n  return max;\n}\n", "  var greatest=-1;\n  var\
    \ frequency = 1;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]===greatest){\n\
    \      frequency = frequency+1;\n    }\n    if(lst[i]===-1){\n      return -1;\n\
    \    }\n    \n    if(frequency>lst[i]) break;\n    \n    greatest = lst[i];\n\
    \    frequency=1;\n  }\n  return greatest;\n}\n", "  if(lst.length < 1)\n    return\
    \ -1;\n  \n  let freq = 0;\n  for(let i = 0; i < lst.length; i++){\n    freq +=\
    \ lst[i];\n  }\n  \n  if(freq >= lst[0])\n    return lst[0];\n  \n  let min =\
    \ -1;\n  let max = lst[0];\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ >= max && lst[i] > 0){\n      max = lst[i];\n    }\n    \n    if(lst[i] <= min\
    \ && lst[i] < 0){\n      min = lst[i];\n    }\n  }\n  \n  return min > 0 ? min\
    \ : -1;\n}\n", "    let maxCount = 0;\n    let maxNum = lst[0];\n    let maxValue\
    \ = 0;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == maxNum){\n\
    \            maxCount = lst[i];\n        } else {\n            for(let j = 0;\
    \ j < lst.length; j++){\n                if(j == i){\n                    continue;\n\
    \                }\n                if(lst[j] == maxNum){\n                  \
    \  maxCount = maxCount + 1;\n                    maxNum = lst[i];\n          \
    \          maxValue = i;\n                    console.log(maxValue);\n       \
    \         }\n            }\n        }\n    }\n    return maxValue;\n}\n", "  \
    \  let freqs = lst.map(x => [x]).map(x => Object.values(x)[0]);\n    let largest\
    \ = freqs.reduce((acc, cur) => Math.max(acc, cur));\n    let index = freqs.findIndex(x\
    \ => x > largest);\n    return index >= 0 ? index + 1 : 0;\n}\n", "\tlet len =\
    \ lst.length;\n\tlet freq = [];\n\tlet max;\n\tfor(let i=0;i<len;i++){\n\t\tif(lst.includes(i)){\n\
    \t\t\tfreq.push(1);\n\t\t}else{\n\t\t\tfreq.push(freq[i-1]+1);\n\t\t}\n\t\tif(freq[i-1]>max){\n\
    \t\t\tmax = freq[i-1];\n\t\t}\n\t}\n\treturn max;\n}", "\tvar len = lst.length\n\
    \tvar freq = {}\n\tfor(var i = 0; i < len; i++){\n\t\tfreq[lst[i]] = freq[lst[i]]\
    \ ? freq[lst[i]] + 1 : 1\n\t}\n\t\n\tfor(var v in freq){\n\t\tif(v >= 0 && freq[v]\
    \ >= lst.length)\n\t\t\treturn v\n\t}\n\treturn -1\n}\n", "    let greatestNum\
    \ = -1\n    let freq = 0\n\n    for (let num of lst) {\n        freq += 1\n  \
    \      if (freq >= greatestNum) {\n            greatestNum = num\n        }\n\
    \    }\n    if (greatestNum < 0) {\n        return -1\n    } else {\n        return\
    \ greatestNum\n    }\n}\n", "\t\n\tlet max = 0;\n\t\n\tfor(let i = lst.length\
    \ - 1; i >= 0; i--){\n\t\t\n\t\tif(lst.includes(i) && lst.filter(i).length >=\
    \ i){\n\t\t\t\n\t\t\tmax = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn max;\n}\n",
  "    var result,\n        index,\n        counter = 0;\n\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        index = lst[i];\n        if(index > 0){\n\
    \            if(counter++ >= index){ //if index's frequency > counter, stop comparing\n\
    \                result = index\n                break;\n            }\n     \
    \   }else{\n            if(counter >= index) break;\n        }\n    }\n\n    return\
    \ result;\n}\n", "    let l=lst.length\n    let freq={}\n    for(let i=0;i<l;i++){\n\
    \        let x=lst[i]\n        if (freq[x] == undefined) freq[x]=0\n        freq[x]++\n\
    \    }\n    for(let k in freq){\n        if (freq[k]<=0)\n            return -1\n\
    \    }\n    let max=0\n    for(let k in freq){\n        if (freq[k]>max){\n  \
    \          max=freq[k]\n        }\n    }\n    return max+1\n}\n", "    if(lst.length\
    \ < 1){\n        return -1;\n    }\n    let max = lst[0];\n    for(let i = 1,len\
    \ = lst.length;i < len;i++){\n        if(lst[i] > max){\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}\n", "\tlst.forEach(function(element, index,\
    \ arr){\n\t\tif(element >= 0)\n\t\t\tarr[index] = arr[index] + 1;\n\t});\n\treturn\
    \ Math.max.apply(null, arr);\n}\n<|/ file |>\n<| c |>\nThis question is not about\
    \ Javascript. Its more about understanding how a question should be posed on a\
    \ certain platform. So I removed the tag.\n<|/ c |>\n<| a dscore=0 |>\nYou don't\
    \ need to use any library. Below is the code using reduce and filter.\n<code>",
  "    var max = 0;\n    var cur = 0;\n    for(var i=0;i<lst.length;i++){\n      \
    \  if(lst[i]>=cur){\n            cur++;\n        }else{\n            max = Math.max(max,cur);\n\
    \            cur++;\n        }\n    }\n    return max;\n}", "    if(lst.length\
    \ === 0) return -1;\n    if(lst[0] > 0){\n        let max = -1;\n        let count\
    \ = 0;\n        for(let i=0; i<lst.length; i++){\n            if(lst[i] === max){\n\
    \                count++;\n            }\n            if(max === -1 || count >=\
    \ (lst[max]-max)){\n                max = i;\n                count = 1;\n   \
    \         }\n        }\n        return max;\n    }else{\n        return -1;\n\
    \    }\n}\n", "    for(var i=0;i<lst.length;i++){\n        if(i>=lst.length-1\
    \ || lst[i]>=lst[i+1]){\n            return -1;\n        }\n    }\n    return\
    \ lst[0];\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if(lst.every(v\
    \ => v > 0)) //check if every number is > 0\n    {\n        let maxValue = lst[0];\
    \ //first element is most likely to be a large number\n        let maxCount =\
    \ 1; // frequency of number\n        for(let i = 1; i < lst.length; i++) //loop\
    \ through rest of array\n        {\n            let value = lst[i];\n        \
    \    if(value > maxValue) //if current value is greater than current maximum\n\
    \            {\n                maxValue = value; //update maxValue\n        \
    \        maxCount = 1;\n            }\n            if(value == maxValue) //if\
    \ current value is equal to the current maximum, increment count\n           \
    \ {\n                maxCount++;\n            }\n        }\n        return maxValue\
    \ > 0 ? maxValue : -1; //return -1 if there is no such number\n    }\n    return\
    \ -1;\n}", "    var index = -1;\n    var counter = 0;\n    for(var i in lst){\n\
    \      if(lst[i] >= 0 && lst[i] <= counter){\n        index = lst[i];\n      }\n\
    \      counter++;\n    }\n    return index;\n}\n", "\tlet freqs = new Map();\n\
    \tfor(let i=0; i<lst.length; i++){\n\t\tif(!freqs.has(lst[i])){\n\t\t\tfreqs.set(lst[i],\
    \ 0);\n\t\t}\n\t\tfreqs.set(lst[i], freqs.get(lst[i])+1);\n\t}\n\tlet maxFreq\
    \ = -1;\n\tfor(let i=0; i<lst.length; i++){\n\t\tif(freqs.get(lst[i]) > maxFreq){\n\
    \t\t\tmaxFreq = freqs.get(lst[i]);\n\t\t}\n\t}\n\treturn maxFreq > 0 ? maxFreq\
    \ : -1;\n}\n", "    var i = 1,\n        max = lst[0],\n        cnt = 0;\n    while(i\
    \ < lst.length && cnt < max){\n        if(lst[i] > max) max = lst[i];\n      \
    \  if(lst[i] == max){\n            cnt += 1;\n        }\n        i += 1;\n   \
    \ }\n    if(cnt == max){\n        return -1;\n    }\n    return cnt;\n}\n", "\t\
    var maxIndex = 0\n\tfor (var i = 0; i< lst.length; i++){\n\t\tif (lst[i] > maxIndex\
    \ && lst[i] > lst[maxIndex]){\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\tif (maxIndex\
    \ === 0){\n\t\treturn -1\n\t} else if (maxIndex < lst.length - 1){\n\t\treturn\
    \ maxIndex + 1\n\t} else {\n\t\treturn -1\n\t}\n}\n", "    let minIndex=lst.length-1;\n\
    \    let minVal=lst[minIndex];\n    let counter=0;\n    for(let i=0;i<lst.length;i++){\n\
    \        if(lst[i]==minVal){\n            counter++;\n        }\n        else{\n\
    \            if(counter>minVal){\n                minIndex=i;\n              \
    \  minVal=counter;\n                counter=1;\n            }\n            else{\n\
    \                counter=0;\n            }\n        }\n    }\n    if(minIndex==lst.length-1){\n\
    \        return -1;\n    }\n    return minIndex;\n}", "    return lst.filter(function(element,\
    \ index, array){\n        return index != array.indexOf(element);\n    }).sort(function(a,\
    \ b){\n        return a - b;\n    }).shift();\n}", "\tlet highest = 1;\n\tlet\
    \ index = 0;\n\tfor(let i = 1; i < lst.length; i++){\n\t\tif(lst[i] > highest){\n\
    \t\t\thighest = lst[i];\n\t\t\tindex = i;\n\t\t}\n\t\telse if(lst[i] == highest){\n\
    \t\t\thighest = lst[i] + 1;\n\t\t}\n\t}\n\treturn index;\n}\n", "  let max = Math.max(...lst);\n\
    \  let counter = lst.filter(e => e === max).length;\n  return max >= 0 ? counter:\
    \ -1;\n}\n", "    for (let i = 0; i < lst.length; i++){\n        if (lst[i] ==\
    \ lst[i+1]){\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "    let freq = lst.map(x => [x]).flat().reduce((a,b) => a + b);\n    for(let i=0;i<lst.length;i++)\n\
    \        if(lst[i] >= 0 && lst[i] <= freq && freq >= lst[i])\n            return\
    \ lst[i];\n    return -1;\n}", "\tif(lst.indexOf(0)==-1){return -1;}\n\tlet max=0;\n\
    \tfor(let i=0;i<lst.length;i++){\n\t\tif(max<lst[i]&&lst[i]>0){\n\t\t\tmax=lst[i];\n\
    \t\t}\n\t}\n\tif(max>0){\n\t\tfor(let i=0;i<lst.length;i++){\n\t\t\tif(max<lst[i]&&lst[i]>0){\n\
    \t\t\t\tmax=lst[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\telse{\n\t\treturn\
    \ -1;\n\t}\n}\n", "    if(lst.length == 0)\n        return -1;\n    var max =\
    \ lst[0], count = 0;\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n            count = 0;\n        }\n    \
    \    if(lst[i] == max)\n            count++;\n    }\n    return count >= max?max:-1;\n\
    }", "  let maxNum = Number.MAX_SAFE_INTEGER;\n  lst.forEach((num) => {\n    if\
    \ (num <= 0) return false;\n    if (num > maxNum) maxNum = num;\n  });\n  return\
    \ maxNum;\n}\n", "    const max = Math.max(...lst);\n    const freq = lst.reduce((a,b)=>\
    \ a>b? a : b )\n    return freq>max? -1 : 0;\n}", "    let highest = Number.NEGATIVE_INFINITY;\n\
    \    let curr = 0;\n    for (let item of lst){\n        curr += item;\n      \
    \  if (curr > highest){\n            highest = curr;\n        }\n    }\n    if\
    \ (highest > Number.NEGATIVE_INFINITY){\n        return highest;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=1 tags=javascript,algorithm |>\n<| a |>\nThis\
    \ is my solution:\n<code>", "\tlet max = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tfor(let i =\
    \ 0; i < lst.length; i++){\n\t\tif(lst[i] >= max){\n\t\t\treturn i;\n\t\t}\n\t\
    }\n\treturn -1;\n}", "  var i;\n  for (i = 0; i < lst.length; i++) {\n    var\
    \ num = lst[i];\n    if (num >= 0 && list.indexOf(num) != -1) {\n      return\
    \ num;\n    }\n  }\n  return -1;\n}\n", "    if(lst.length == 0)\n        return\
    \ -1;\n    var maxFreq = 0;\n    for(var i = 0; i< lst.length; i++){\n       \
    \ if(lst[i].frequency >= maxFreq){\n            maxFreq = lst[i].frequency;\n\
    \            \n        }\n    }\n    for(var i = 0; i< lst.length; i++){\n   \
    \     if(lst[i].frequency == maxFreq){\n            return lst[i].value;\n   \
    \     }\n    }\n    return -1;\n}\n ", "  var max,i,frequency;\n  max = 0;\n \
    \ for(i=0;i<lst.length;i++){\n    if (lst[i] == 0) {\n      return -1;\n    }\n\
    \    frequency = lst[i];\n    if(frequency > max){\n      max = frequency;\n \
    \   }\n  }\n  return max;\n}\n", "    let arr = [];\n    lst.forEach(function(item,\
    \ index){\n        if(arr.indexOf(item) < 0){\n            arr.push(item);\n \
    \           arr[index] = item;\n        }\n    });\n    for(let i in arr){\n \
    \       if(arr[i] != -1){\n            return arr[i]\n        }\n    }\n    return\
    \ -1;\n}\n", "    if (lst.length <= 0) {\n        return -1;\n    }\n    let maxValue\
    \ = lst[0];\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > maxValue) {\n            maxValue = lst[i];\n          \
    \  maxCount = 1;\n        } else {\n            if (lst[i] == maxValue) {\n  \
    \              maxCount++;\n            }\n        }\n    }\n    return maxValue;\n\
    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\n`The frequency of an integer\
    \ is the number of times it appears in the list.` so you should use max count\n\
    <|/ c |>\n<| c |>\nYes, I missed that part. Thanks.\n<|/ c |>\n<| a |>\nHere's\
    \ a possible solution:\n\n<code>\nconst search = (list) => {\n  let maxValue =\
    \ -1;\n  let maxCount = 0;\n  list.forEach((v) => {\n    let count = list.filter(a\
    \ => a >= v).length;\n    maxValue = v > maxValue ? v : maxValue;\n    maxCount\
    \ = count > maxCount ? count : maxCount;\n  });\n  return maxValue;\n};\n", " \
    \ return lst.find(function(el){\n    let freq = 1;\n    for(let i = 0; i < lst.length;\
    \ i++){\n      if((el === lst[i]) && el > 0){\n        freq++;\n      }\n    }\n\
    \    return freq >= el;\n  })\n}\n", "    for(var i = 0; i< lst.length; i++){\n\
    \        if(lst[i] >= lst[lst.length - i]){\n            return lst[i];\n    \
    \    }\n    }\n    return -1;\n}\n", " \n}\n</cell>\n<cell>", "  var maxValue\
    \ = Number.MIN_SAFE_INTEGER;\n  var maxIndex = 0;\n\n  for(var i = 0; i < lst.length;\
    \ i++){\n    var value = lst[i];\n    if(value > maxValue){\n      maxValue =\
    \ value;\n      maxIndex = i;\n    }\n  }\n\n  if(maxIndex > 0){\n    maxValue\
    \ = maxValue - lst[maxIndex];\n  }\n\n  return maxValue;\n}\n", "    var min =\
    \ lst[0];\n    var maxIndex = -1;\n    for(var i=0;i<lst.length;i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n            maxIndex = i;\n \
    \       }\n    }\n    if(maxIndex < 0){\n        return -1;\n    }\n    var freq\
    \ = lst[maxIndex];\n    var searchResult = lst[0];\n    for(var i=0;i<lst.length;i++){\n\
    \        var element = lst[i];\n        if(freq === element){\n            searchResult\
    \ = element;\n        }\n        if(freq > element){\n            break;\n   \
    \     }\n    }\n    return searchResult;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>", "  var i = 0;\n  var max = -1;\n\n  while(i <\
    \ lst.length){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n    i++;\n\
    \  }\n  return max;\n}", "    var l=0;\n    for(var i=0;i<lst.length;i++){\n \
    \       if(lst[i]>0){\n            lst[i]--;\n            return lst[i];\n   \
    \     }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=arrays,javascript,algorithm\
    \ |>\nI thought it would be worth adding a Python solution, since it is more concise\
    \ and efficient. I'm sure the performance would be similar.\n<code>\ndef search(lst):\n\
    \    lst = list(lst)\n    n = len(lst)\n    for i in reversed(range(n)):\n   \
    \     if lst[i] > 0 and (lst[i] - 1) in lst[n:]:\n            return lst[i]\n\
    \    return -1\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    var max = -Infinity;\n\
    \    var maxV = -1;\n    lst.forEach(element => {\n        if(element < 0){\n\
    \            max = Infinity;\n            maxV = -1;\n            return;\n  \
    \      }\n        if(element >= max){\n            max = element;\n          \
    \  maxV = element;\n        }\n        if(element >= maxV){\n            maxV\
    \ = element;\n        }\n    })\n    return maxV;\n}\n", "    var max = -Infinity\n\
    \    var maxCount = 0\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]\
    \ >= max){\n            max = lst[i]\n            maxCount = 1\n        } else\
    \ if(lst[i] == max && maxCount < lst.length){\n            maxCount++\n      \
    \  }\n    }\n    return maxCount == lst.length ? -1 : max\n}\n", "    var sum\
    \ = 0;\n    var freq = [];\n    for(var i = 0; i < lst.length; i++){\n       \
    \ freq[i] = lst[i]-1;\n        sum += freq[i];\n    }\n    for(var j = 0; j <\
    \ freq.length; j++){\n        if(freq[j] > sum){\n            return -1;\n   \
    \     }\n    }\n    return freq[freq.length-1];\n}\n", "\tvar maxIndex = -1;\n\
    \tfor(var i=0; i<lst.length;i++){\n\t\tif(lst[i] > maxIndex){\n\t\t\tmaxIndex\
    \ = lst[i]\n\t\t}\n\t}\n\treturn maxIndex;\n}\n", "\tlet maxIndex = 0;\n\tlet\
    \ maxVal = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] > maxVal){\n\
    \t\t\tmaxIndex = i;\n\t\t\tmaxVal = lst[i];\n\t\t}\n\t}\n\treturn maxIndex;\n\
    }\nmodule.exports = {\n\tsearch: search\n};\n},{}],4:[function(require,module,exports){",
  "  let counter = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] ==\
    \ lst[counter]) {\n      counter++\n    }\n  }\n  if (counter > 0) {\n    return\
    \ lst[counter]\n  } else {\n    return -1\n  }\n}", "  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]<0){\n      return -1;\n    }\n    if(find(lst,lst[i])){\n     \
    \ return lst[i];\n    }\n  }\n  return -1;\n}", "  var num = 0;\n  var freq =\
    \ [];\n  for(var i=0; i<lst.length; i++){\n    if(num === lst[i]){\n      freq[i]\
    \ = freq[i] + 1;\n    }\n    else{\n      num = lst[i];\n      freq.push(1);\n\
    \    }\n  }\n  return num > 0 ? freq[freq.length-1] : -1;\n}\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\n#include<iostream>\n\nusing namespace std;\n\nint main()\n{\n\
    \    int n;\n    cout<<\"enter the length of sequence\";\n    cin>>n;\n    cout<<\"\
    enter the sequence\";\n    int a[n];\n    int i;\n    for (i=0;i<n;i++){\n   \
    \     cin>>a[i];\n    }\n    for (i=0;i<n;i++){\n        if (i>0){\n         \
    \   if (a[i-1]==a[i]){\n                cout<<\"-1\";\n                break;\n\
    \            }\n            else{\n                int j;\n                for\
    \ (j=i;j<n;j++){\n                    if (a[j]>a[j]){\n                      \
    \  break;\n                    }\n                    else{\n                \
    \        cout<<a[i];\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}\n</code>\n\
    <|/ a tags=c++ dscore=0 |>\n<| a tags=c++ dscore=0 |>\nHere is my answer, the\
    \ question is about the find and sort algorithm. \n<code>\n#include<stdio.h>\n\
    #include<stdlib.h>\n\nint main()\n{\n    int n,i,j,count=0;\n    int num;\n  \
    \  printf(\"Enter the size of the array\\n\");\n    scanf(\"%d\",&n);\n    int\
    \ arr[n];\n    printf(\"Enter %d integers\\n\",n);\n    for(i=0;i<n;i++)\n   \
    \ {\n        scanf(\"%d\",&arr[i]);\n    }\n\n    for(i=0;i<n;i++)\n    {\n  \
    \      for (j=i+1;j<n;j++)\n        {\n            if (arr[j]>arr[i])\n      \
    \      {\n                temp = arr[i];\n                arr[i] = arr[j];\n \
    \               arr[j] = temp;\n            }\n        }\n    }\n\n    printf(\"\
    Sorted array is\\n\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d\\n\"\
    ,arr[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        for (j=i+1;j<n;j++)\n \
    \       {\n            if (arr[i]<arr[j])\n            {\n                temp\
    \ = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\
    \            }\n        }\n    }\n\n    printf(\"Sorted array is\\n\");\n    for(i=0;i<n;i++)\n\
    \    {\n        printf(\"%d\\n\",arr[i]);\n    }\n    for(i=0;i<n;", "    let\
    \ newArr = [];\n    let maxIndex = 0;\n    lst.forEach(function(el){\n       \
    \ newArr.push(el);\n        newArr[newArr.length-1]++;\n    });\n    newArr.sort((a,b)=>{\n\
    \        return b-a;\n    })\n    for(let i=0;i<newArr.length;i++){\n        if(newArr[i]==1){\n\
    \            for(let j=newArr[i];j<newArr.length-1;j++){\n                newArr[j]=newArr[j+1];\n\
    \            }\n            newArr.splice(newArr.length-1,1);\n        }\n   \
    \ }\n    for(let i=newArr.length-1;i>=0;i--){\n        if(newArr[i]!=1){\n   \
    \         for(let j=newArr[i];j<newArr.length-1;j++){\n                newArr[j]=newArr[j+1];\n\
    \            }\n            newArr.splice(newArr.length-1,1);\n        }\n   \
    \ }\n    return maxIndex >= newArr[0]?maxIndex:-1;\n}\n", "    let max=0;\n  \
    \  let pos=0;\n    for (let i=0;i<lst.length;i++){\n        if (lst[i]>max){\n\
    \            max=lst[i]\n            pos=i\n        }\n    }\n    if (lst[pos]>max)\n\
    \        return -1\n    return pos\n}", "    var max;\n    var maxCount = 0;\n\
    \    var i;\n    for(i = 0; i < lst.length; i++){\n        if(maxCount <= lst[i])\
    \ continue;\n        if(lst[i] > max){\n            max = lst[i];\n          \
    \  maxCount = 1;\n        }else{\n            maxCount++;\n        }\n    }\n\
    \    return max;\n}\nvar search;\n", "  if(lst.length===0){\n    return -1;\n\
    \  }\n  \n  var maxIndex = 0;\n  var maxVal = lst[0];\n  for(var i=1; i<lst.length;\
    \ i++){\n    if(lst[i]>maxVal){\n      maxVal = lst[i];\n      maxIndex = i;\n\
    \    }\n  }\n  return maxIndex;\n}\n", "    let freqArr = Array.from(new Set(lst)).sort((a,b)=>a-b);\n\
    \    return freqArr.find(x=>x>0)+1;\n}\n", "    let index = -1;\n    lst.forEach(item\
    \ => {\n        if(item > 0 ){\n            index = item;\n        }\n    });\n\
    \    return index;\n}\n", "    let freq = {};\n    for(let i=0; i<lst.length;\
    \ i++){\n        if(!freq.hasOwnProperty(lst[i])){\n            freq[lst[i]] =\
    \ 1;\n        }else{\n            freq[lst[i]]++;\n        }\n    }\n    for(let\
    \ key in freq){\n        if(freq[key] > 0){\n            return key;\n       \
    \ }\n    }\n    return -1;\n}\n", "  var max= -Infinity;\n  var maxNum= 0\n  for(var\
    \ i = 0; i < lst.length; i++){\n    var num = lst[i]\n    if(num > max){\n   \
    \   max = num\n      maxNum = i\n    }\n  }\n  if(maxNum == lst.length - 1){\n\
    \    return maxNum;\n  }\n  else{\n    return -1;\n  }\n}\n", "    var maxEle\
    \ = lst[0],\n        counter = lst[0]\n    for(var i = 1; i < lst.length; i++){\n\
    \        if(lst[i] > maxEle){\n            maxEle = lst[i]\n        }\n      \
    \  if(lst[i] < maxEle && lst[i] > counter){\n            counter = lst[i]\n  \
    \      }\n    }\n    return maxEle\n}\n", "  var arr=[];\n  var res=-1;\n  lst.forEach(function(ele){\n\
    \    if(arr.indexOf(ele)==-1){\n      arr.push(ele);\n    }\n    for(var i=0;i<arr.length;i++){\n\
    \      if(ele===arr[i]){\n        arr.splice(i,1);\n        i--;\n        if(arr[0]>res){\n\
    \          res=arr[0];\n        }\n      }\n    }\n  })\n  return res;\n}\n</code>\n\
    <|/ a |>\n<| a tags=arrays,algorithm dscore=1 |>\nWe can use a hash table to store\
    \ the frequency of integers in an array. Initialize all the elements in the hash\
    \ table as 0. \nFor each element in the array, if the element exists in the hash\
    \ table, increment the value by 1. If the element does not exist in the hash table,\
    \ add the element to the hash table with a value of 1. \nOnce the input is complete,\
    \ we can traverse the hash table and if the value of this element in the hash\
    \ table is greater than 0, then the element which had the highest frequency will\
    \ be the answer in the array.\n<|/ a |>\n<| c |>\nThe complexity is O(n) in case\
    \ of hash table and O(n^2) in case of array. Which one will be more efficient?\n\
    <|/ c |>\n<| c |>\n: Yes, for large lists the hash table will outperform the array\
    \ approach in complexity.\n<|/ c |>\n<| c |>\nThe array approach is O(n^2), but\
    \ since you have to iterate over all the array elements, this gives an O(n) solution.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere is another solution using hash table and sorting.\
    \ \nThis algorithm is better than the one which uses array and sorting because\
    \ of its time complexity. \n<code>\npublic class Solution {\n    public int search(int[]\
    \ nums) {\n        int max = Integer.MIN_VALUE;\n        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n\n        for(int num: nums) {\n            if(map.containsKey(num))\
    \ {\n                map.put(num, map.get(num)+1);\n            } else {\n   \
    \             map.put(num, 1);\n            }\n\n            if(map.get(num) >\
    \ max) {\n                max = map.get(num);\n            }\n        }\n\n  \
    \      return max == Integer.MIN_VALUE ? -1 : max;\n    }\n}\n</code>\n<|/ a tags=arrays,algorithm\
    \ |>\n<| a dscore=1 tags=arrays,algorithm |>\nHere is a solution using hashtable\
    \ and ArrayList\n<code>\npublic class Solution {\npublic int search(int[] nums)\
    \ {\n    int max = Integer.MIN_VALUE;\n    HashMap<Integer, Integer> map = new\
    \ HashMap<>();\n    ArrayList<Integer> arrList = new ArrayList<>();", "  var max\
    \ = 0;\n  var i = 0;\n  for(i=0;i<lst.length;i++){\n    if(lst[i]>max){\n    \
    \  max = lst[i];\n    }\n  }\n  return max;\n}\n", "    let max;\n    let min;\n\
    \    let max = arr.reduce((a,b)=>{return Math.max(a,b);});\n    let min = arr.reduce((a,b)=>{return\
    \ Math.min(a,b);});\n    for(let i=0;i<arr.length-1;i++){\n        if(arr[i]>0\
    \ && arr[i]>arr[i+1]){\n            max = Math.max(arr[i],arr[i+1]);\n       \
    \ }\n    }\n    for(let i=0;i<arr.length-1;i++){\n        if(arr[i]<0 && arr[i]<arr[i+1]){\n\
    \            min = Math.min(arr[i],arr[i+1]);\n        }\n    }\n    if(max >\
    \ min){\n        return -1;\n    }\n    else {\n        return max;\n    }\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like the recursive answer!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nconst search = (arr, n) => {\n  if (arr.length === 1) return arr[0]\
    \ === n ? arr[0] : -1;\n  return search(arr.slice(1), n) > arr[0] === n ? search(arr.slice(1),\
    \ n) : search(arr.slice(0, arr.length - 1), n);\n};\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| c |>\nPlease add some explanation to your code such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\nYou can try this\n<code>", "\tconst maxIndex\
    \ = _.findIndex(lst,num=>num>0);\n\tif(maxIndex==-1)return -1;\n\treturn lst[maxIndex];\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < lst.length; i++){\n      \
    \  if (lst[i] > 0 && lst[i] == lst[result]){\n            result++;\n        }\
    \ else {\n            result = -1;\n        }\n    }\n    return result;\n}",
  "  var max = 0;\n  var val = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ > val){\n      val = lst[i];\n    }\n  }\n  for(var i = lst.length-1; i >= 0;\
    \ i--){\n    if(lst[i] >= val){\n      if(lst[i] > max){\n        max = lst[i];\n\
    \      }\n    }else{\n      if(lst[i] < val){\n        return -1;\n      }\n \
    \   }\n  }\n  return max;\n}\n", "  var max;\n  var freq;\n  if(lst.length===0){return\
    \ -1;}\n  max = Math.max(lst[0]);\n  freq = 0;\n  for(var i=1;i<lst.length;i++){\n\
    \    if(lst[i]===max){\n      freq++;\n    }else{\n      if(freq==0){\n      \
    \  return -1;\n      }else{\n        max = lst[i];\n        freq = freq - 1;\n\
    \      }\n    }\n  }\n  return max;\n}", "    if(lst.length === 0) return -1;\n\
    \    \n    var maxVal = lst[0];\n    \n    lst.forEach(function(val){\n      \
    \  if(val > maxVal){\n            maxVal = val;\n        }\n    });\n    \n  \
    \  var result = 0;\n    for(var i = 0, l = lst.length; i < l; i++){\n        if(lst[i]\
    \ >= maxVal){\n            if(lst[i] !== maxVal) result = -1;\n            break;\n\
    \        }\n        else if(lst[i] > maxVal) break;\n    }\n    \n    return result;\n\
    }\n<|/ file ext=.js source=github |>\n<| c |>\nThis is not the correct answer.\
    \ With your input it returns 4 for example (it should be 2).\n<|/ c |>\n<| c |>\n\
    , you are right, i will update the answer with correct code. Thanks\n<|/ c |>\n\
    <| c |>\n, I updated the answer with the correct code. Thanks for noticing me\n\
    <|/ c |>\n<| a |>\n<code>", "  var ans = -1;\n  for(var i in lst){\n    if(lst[i]\
    \ === lst[i-1]){\n      ans++;\n    } else {\n      ans = -1;\n      break;\n\
    \    }\n  }\n  return ans;\n}\n", "    let max = -1;\n    for(let i=0; i<lst.length;\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    return max;\n}\n", "  var arr = [];\n  for(i=0;i<lst.length;i++){\n \
    \   for(j=0;j<arr.length;j++){\n      if(arr[j] == lst[i]){\n        if(lst[i]\
    \ > arr[j]){\n          arr[j] = lst[i];\n        }\n      }\n    }\n  }\n  if(arr.length\
    \ < 1){\n    return -1;\n  }else{\n    var max = arr[0];\n    var maxFreq = lst.length;\n\
    \    for(i=0;i<lst.length;i++){\n      if(arr[i] > max){\n        max = arr[i];\n\
    \        maxFreq = lst.length - i;\n      }\n    }\n    return max;\n  }\n}\n",
  "\tvar i, l, sum, cur, max = 0;\n\tfor(i = 0, l = lst.length; i < l; i++){\n\t\t\
    sum += lst[i];\n\t\tif(sum > max){\n\t\t\tcur = sum;\n\t\t\tmax = sum;\n\t\t}\
    \ else if(sum === max){\n\t\t\tcur = sum;\n\t\t}\n\t}\n\tif(max === 0){\n\t\t\
    return -1;\n\t} else {\n\t\treturn cur;\n\t}\n}\n", "    var max = 0;\n    var\
    \ index = -1;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]>max){\n \
    \           max = lst[i];\n            index = i;\n        }\n    }\n    return\
    \ max;\n}\n<|/ file source=github |>\n<| c |>\nThanks so much for the detailed\
    \ answer. It really helped me to understand better the code and improve my skills.\n\
    <|/ c |>\n<| c |>\nGlad to hear that. Also, a little bit of advice : if you don't\
    \ know any coding language, it would help a lot if you know some javascript, some\
    \ python or ruby. Also, if you want your code to be easy to read, please have\
    \ a look at  https://medium.com/@dan_abramov/beautiful-javascript-with-es6-and-d3-7cf9bbfd88c2\n\
    <|/ c |>\n<| c |>\nGood advice, I'll definitely look at those websites.\n<|/ c\
    \ |>\n<| a |>\n<code>", "    var res = [],\n        max = lst[0],\n        sum\
    \ = 0,\n        i = 0,\n        sumCount = 0;\n\n    for(; i < lst.length; i++){\n\
    \        sum += lst[i];\n        sumCount += 1;\n\n        if(sum == max){\n \
    \           res.push(sumCount);\n            max = sumCount;\n            sumCount\
    \ = 0;\n        }\n        if(sum > max){\n            return -1;\n        }\n\
    \    }\n\n    return Math.max.apply(null, res);\n}\n", "  \n  if (lst.length <=\
    \ 0){\n    return -1;\n  }\n  \n  let arr = [];\n  let maxNum = lst[0];\n  let\
    \ maxIndex = -1;\n  arr.push(maxNum);\n  \n  for (let i = 1; i < lst.length; i++){\n\
    \    \n    if (lst[i] > maxNum){\n      maxNum = lst[i];\n      maxIndex = i;\n\
    \    }\n    \n    arr.push(maxNum);\n  }\n  \n  return arr[maxIndex + 1];\n  \n\
    }\n", "  var greatest=0;\n  var freq=[];\n  for(var i=0;i<lst.length;i++){\n \
    \   freq.push(0);\n  }\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]<0) return\
    \ -1;\n    freq[lst[i]]++;\n  }\n  for(var i=0;i<lst.length;i++){\n    if(freq[i]>=lst[i]){\n\
    \      greatest=i;\n    }\n  }\n  return greatest;\n}\n", "  for (let i of lst){\n\
    \    if(i > 0)\n      return i\n  }\n  return -1\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a tags=javascript,arrays |>\n<code>", "  let hash = {};\n  lst.forEach(num\
    \ => {\n    hash[num] = hash[num] ? hash[num] + 1 : 1;\n  });\n  for (let num\
    \ in hash){\n    if (hash[num] >= lst.filter(x => x == num).length) return num;\n\
    \  }\n  return -1;\n}\n\nsearch([5, 5, 4, 4, 4]); // -1</code>\n<|/ a |>\n<| c\
    \ |>\nThis is great, but can you explain what it's doing?\n<|/ c |>\n<| c |>\n\
    It's an elegant solution indeed, but a bad one. Firstly, it creates a hash map\
    \ for all the unique numbers in the list. Then, it iterates over the hash map\
    \ and counts how many times each number appears. Finally it iterates over all\
    \ the unique numbers and picks the number whose count is greatest. So, for search([5,\
    \ 5, 4, 4, 4]) the hash map would be: `{5: 1, 4: 2, 1: 3}` and the result would\
    \ be `4`, because `4` is greater than `5` and `4` appears three times in the list\
    \ and the number appears 4 times. That should be `4`, but your code says `5`.\n\
    <|/ c |>\n<| c |>\nThe first problem with this answer is that it iterates over\
    \ the entire hash map before it returns the number with the highest frequency.\
    \ This means `search([4, 1, 2, 2, 3, 1]) == 3` but `search([4, 1, 2, 2, 3, 1])\
    \ == 2`.\n<|/ c |>\n<| c |>\nThanks for that. I have fixed the issue. :)\n<|/\
    \ c |>\n<| a tags=javascript,arrays,algorithm,performance |>\nYou can use an object\
    \ and increment the value of the property of the object with the value as the\
    \ array index and then return the property of the object as the result.\n\n<code>",
  "  return lst.sort(function(a, b){\n    return a - b;\n  }).filter(function(x, index,\
    \ array){\n    return array.indexOf(x) == index;\n  })[0];\n}\n", "  var maxNum\
    \ = lst[0];\n  var minNum = lst[0];\n  for(var i = 1; i < lst.length; i++){\n\
    \    var curNum = lst[i];\n    if(curNum < minNum){\n      minNum = curNum;\n\
    \    }\n    if(curNum > maxNum){\n      maxNum = curNum;\n    }\n  }\n  return\
    \ maxNum;\n}\n", "\tvar max=-1;\n\tvar counter=0;\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tif(lst[i]>max){\n\t\t\tmax=lst[i]\n\t\t}\n\t\telse if(lst[i]==max){\n\t\t\t\
    counter++;\n\t\t}\n\t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn (counter>0)?\
    \ max : -1;\n}\n", "    var maxV=lst[0]-1;\n    for(var i=1;i<lst.length;i++){\n\
    \        if(lst[i]>maxV){\n            maxV=lst[i];\n        }\n    }\n    if(maxV>0){\n\
    \        return maxV;\n    }\n    return -1;\n}\n", "  var max = -1;\n  var len\
    \ = lst.length;\n  for(var i=0; i<len; i++){\n    var cur = lst[i];\n    if(cur\
    \ > 0 && cur === lst[cur-1]){\n      max++;\n    } else {\n      max = -1;\n \
    \   }\n  }\n  return max;\n}\n", "    lst = lst.sort((a, b) => a - b);\n    var\
    \ result = 0;\n    var i;\n    for (i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ >= 0 && lst[i] === lst[i-1]){\n            result++;\n        }\n    }\n   \
    \ return (result >= lst.length) ? -1 : lst[result];\n}\n", "    let max = 0;\n\
    \    let freq = 0;\n    let i;\n    for(i = 0; i < lst.length; i++){\n       \
    \ if(max < lst[i]){\n            max = lst[i];\n        }\n        freq++;\n \
    \   }\n    for(i = 0; i < lst.length; i++){\n        if(freq >= max){\n      \
    \      return lst[i];\n        }\n        freq--;\n    }\n    return -1;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is a nice solution, and it works for any list\
    \ of positive integers, but it's not very elegant and may give incorrect results\
    \ for input values that are not unique in a list (e.g. [3,3,3]).\n<|/ c |>\n<|\
    \ c |>\nI have been trying to figure this out for ages. Thanks !\n<|/ c |>\n<|\
    \ a tags=algorithm,data-structures |>\nMy attempt at it:\n<code>\ndef maximum_frequency(lst):\n\
    \    max = 0\n    freq = 0\n    for i in lst:\n        if i > max:\n         \
    \   max = i\n        freq = freq + 1\n        if freq > max:\n            return\
    \ i\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is a nice solution, and it works\
    \ for any list of positive integers, but it's not very elegant and may give incorrect\
    \ results for input values that are not unique in a list (e.g. [3,3,3]).\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nint max(int n, int m)\n{\n    int i,max;\n \
    \   int count=0;\n\n    for(i=n;i>=m;i--)\n    {\n        count+=i;\n    }\n\n\
    \    max= n/count;\n\n    for(i=count;i>=0;i--)\n    {\n        if(max==n/i)\n\
    \        {\n            return i;\n        }\n    }\n\n    return -1;\n}\n</code>\n\
    <|/ a tags=algorithm,data-structures |>\n<| a tags=algorithm,data-structures |>\n\
    <code>\nint maxFrequency(int[] list)\n{\n    int maxFreq=1;\n\n    for(int i=0;i<list.length;i++)\n\
    \    {\n        if(maxFreq>list[i])\n            maxFreq=list[i];\n    }\n\n \
    \   return maxFreq;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere is\
    \ recursive solution without using extra variables:\n<code>\npublic static int\
    \ maxFrequency(int[] array) {\n    if (array == null || array.length <= 0)\n \
    \       return -1;\n\n    if (array[0] == 0)\n        return 0;\n\n    return\
    \ max(array[0], maxFrequency(Arrays.copyOfRange(array, 1, array.length)));\n}\n\
    \nprivate static int max(int x, int y) {\n    return x > y ? ", "  return lst.reduce((max,\
    \ val) => {\n    if(max === -1)\n      return val;\n    else if(val > max)\n \
    \     return val;\n    else if(val === max)\n      return max + 1;\n    else if(val\
    \ === 0)\n      return -1;\n  });\n}\n", "    \n    if(lst.length == 0){\n   \
    \     return -1;\n    }\n    var freq = {};\n    for(var i = 0; i< lst.length;\
    \ i++){\n        var val = lst[i];\n        freq[val] = freq[val] ? freq[val]+1\
    \ : 1;\n    }\n    for(var i in freq){\n        if(freq[i] >= freq[lst[0]]){\n\
    \            return i;\n        }\n    }\n    return -1;\n}\n", "    let counter\
    \ = 0;\n    for(let i=0;i<lst.length;i++){\n        for(let j=i+1;j<lst.length;j++){\n\
    \            if(lst[i] > lst[j]){\n                let tmp = lst[i];\n       \
    \         lst[i]=lst[j];\n                lst[j]=tmp;\n            }\n       \
    \ }\n    }\n    for(let i=0;i<lst.length;i++){\n        if(lst[i] > 0){\n    \
    \        counter++;\n        }\n    }\n    return counter > 0 ? lst[lst.length-1]\
    \ : -1;\n}\n", "    let max = Math.max(...lst);\n    let count = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] == max) count++;\n    }\n  \
    \  return count >= max ? -1 : max;\n}", "  var max=lst[0];\n  var freq=1;\n  var\
    \ index=0;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]==max){\n      freq++;\n\
    \    }else{\n      if(freq>=lst[i]){\n        index=i;\n        freq=lst[i];\n\
    \      }\n    }\n  }\n  return index==-1?-1:max;\n}", "    let cnt=lst.filter(num=>num>0).length\n\
    \    if (cnt==0) return -1\n    let max=-1\n    let max=lst.reduce((x,y)=>{\n\
    \      if (x<y) x=y\n      return x\n    },0)\n    return lst.reduce((x,y)=>{\n\
    \      if (x==max){\n        if (y>max)max=y\n      }\n      else{\n        if\
    \ (x<y)return y\n      }\n      return x\n    },0)\n  }\n  \n  "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
