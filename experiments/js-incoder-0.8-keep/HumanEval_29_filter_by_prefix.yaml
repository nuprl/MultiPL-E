name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings,\
  \ prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["    prefix = prefix.toUpperCase();\n    var strings_copy = strings.slice(0);\n\
    \    for(var i = 0; i < strings_copy.length; i++){\n        if(strings_copy[i].substring(0,\
    \ prefix.length) == prefix){\n            strings_copy.splice(i, 1);\n       \
    \ }\n    }\n    return strings_copy;\n}\n", "    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            strings.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    return strings;\n}\n\n", "  const\
    \ filtered = [];\n\n  for (let i = 0; i < strings.length; i++){\n    if (strings[i].startsWith(prefix)){\n\
    \      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n}\n", "   \
    \ if (strings == null) {\n        strings = [];\n    }\n\n    if (typeof prefix\
    \ === 'undefined' || prefix === null ||\n        typeof prefix !== 'string') {\n\
    \        throw new Error('Expected a string prefix, received ' + prefix);\n  \
    \  }\n\n    var match = function(item) {\n        return item.toLowerCase().indexOf(prefix.toLowerCase())\
    \ === 0;\n    };\n\n    return objects.filter(match);\n}\n", "\tprefix = prefix.toLowerCase();\n\
    \tvar matches = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tvar str =\
    \ strings[i];\n\t\tif(typeof str === 'string'){\n\t\t\tif(str.indexOf(prefix)\
    \ === 0){\n\t\t\t\tmatches.push(str);\n\t\t\t}\n\t\t}else if(str instanceof Array){\n\
    \t\t\tmatches = matches.concat(filter_by_prefix(str, prefix));\n\t\t}\n\t}\n\t\
    return matches;\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(el){\n\
    \        if(el.indexOf(prefix) === 0){\n            return true;\n        }\n\
    \    });\n}\n", "    return strings.filter(function(elem){\n        return (elem.substring(0,\
    \ prefix.length) === prefix);\n    });\n}\n", "    var filtered = [];\n    strings.forEach(function\
    \ (string){\n        if (string.slice(0, prefix.length) == prefix) {\n       \
    \     filtered.push(string);\n        }\n    });\n    return filtered;\n}\n",
  "  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "    return strings.filter(function(str){\n        return str.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\tvar filtered = strings.filter(function(string){\n\t\
    \treturn string.indexOf(prefix) === 0;\n\t});\n\treturn filtered.length > 0 ?\
    \ filtered : false;\n}\n", "    return _.filter(strings, function(x){\n      \
    \  return x.substr(0, prefix.length) === prefix;\n    });\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.substr(0, prefix.length) === prefix;\n\t});\n}\n", "    var\
    \ ret = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix.length) == prefix){\n            ret.push(strings[i]);\n        }\n \
    \   }\n    return ret;\n}\n", "    var filtered_strings = [];\n    for(var i =\
    \ 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}", "  return strings.filter(s => s.startsWith(prefix))\n\
    }\n", "    return strings.filter(function (i){\n        return i.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "  return strings.filter(function(s){\n    return s.startsWith(prefix);\n\
    \  });\n}\n", "    var filtered_strings = [];\n    \n    strings.forEach(function(s){\n\
    \        if(s.startsWith(prefix))\n            filtered_strings.push(s);\n   \
    \ });\n    \n    return filtered_strings;\n}\n</cell>\n<cell>", "\tprefix = prefix.toLowerCase();\n\
    \tvar filtered_strings = [];\n\tfor (var i=0;i<strings.length;i++){\n\t\tif (strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "    if(prefix === ''){\n        return strings;\n    }\n    var is_str_list\
    \ = (typeof strings === 'string') ? true : false;\n    if(!is_str_list){\n   \
    \     throw new Error('filter_by_prefix() expects a string or a list of strings\
    \ as input');\n    }\n    var new_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            new_strings.push(strings[i]);\n\
    \        }\n    }\n    return new_strings;\n}\n", "\tlet filtered_strings = [];\n\
    \tfor(let i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ === prefix){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ filtered_strings;\n}\n", "\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tstrings.splice(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn strings;\n\
    }\n\n", "  if(prefix == '') return strings\n  var newStrings = []\n  for (var\
    \ i = 0; i < strings.length; i++)\n    if (strings[i].substring(0, prefix.length)\
    \ == prefix)\n      newStrings.push(strings[i])\n  return newStrings\n}\n", " \
    \   var new_list = []\n    for(var i = 0; i < strings.length; i++){\n        var\
    \ str = strings[i];\n        if(str.indexOf(prefix) === 0){\n            new_list.push(str);\n\
    \        }\n    }\n    return new_list;\n}\n", "\tvar filtered_list = [];\n\t\
    for(var i=0; i<strings.length; i++){\n\t\tif (strings[i].substr(0, prefix.length)\
    \ == prefix){\n\t\t\tfiltered_list.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_list;\n\
    }\n", "    return strings.filter(function (string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "  return strings.filter(function(item){\n    return item.startsWith(prefix);\n\
    \  });\n}\n", "  return strings.filter(function(item){\n    return item.indexOf(prefix)\
    \ === 0;\n  });\n}\n", "  var filtered = [];\n  angular.forEach(strings, function(string){\n\
    \    if (string.indexOf(prefix) === 0)\n      filtered.push(string);\n  });\n\
    \  return filtered;\n}\n", "  var ret = [];\n  for(var i = 0; i<strings.length;\
    \ i++){\n    var string = strings[i];\n    if(string.indexOf(prefix) === 0){\n\
    \      ret.push(string);\n    }\n  }\n  return ret;\n}\n", "\tvar filtered_strings\
    \ = [];\n\tfor(var i=0, len = strings.length; i < len; i++){\n\t\tif(strings.indexOf(strings[i])\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "  return strings.filter(function(str){\n    return str.slice(0, prefix.length)\
    \ === prefix;\n  });\n}\n", "    var plen = prefix.length;\n    return strings.filter(function(e){\n\
    \        return e.substr(0, plen) === prefix;\n    });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n", "\tvar strings_length\
    \ = strings.length;\n\tif(strings_length == 0){\n\t\treturn [];\n\t}\n\tvar first_substring_length\
    \ = strings[0].length;\n\tfor(var i = 0; i < strings_length; i++){\n\t\tvar substring_length\
    \ = strings[i].length;\n\t\tif(substring_length < first_substring_length){\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif(substring_length > first_substring_length){\n\t\t\
    \treturn [];\n\t\t}\n\t\tfor(var j = 0; j < first_substring_length; j++){\n\t\t\
    \tif(strings[i].charAt(j) != prefix.charAt(j)){\n\t\t\t\treturn [];\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn strings;\n}\nexports.filter_by_prefix = filter_by_prefix;\n",
  "\tvar out = [];\n\tfor (var i=0; i<strings.length; i++){\n\t\tif (strings[i].slice(0,\
    \ prefix.length) == prefix){\n\t\t\tout.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ out;\n}", "    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            strings.splice(strings.indexOf(string), 1);\n        }\n    });\n\
    \    return strings;\n}\n", "    return strings.filter(function(str){\n      \
    \  return str.startsWith(prefix);\n    });\n}\n", "  var filtered_strings = [];\n\
    \  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "    return strings.filter(function(string){\n        return string.substr(0,\
    \ prefix.length) === prefix;\n    });\n}\n", "    var matches = [];\n    for(var\
    \ i in strings){\n        if(strings[i].substring(0, prefix.length) === prefix){\n\
    \            matches.push(strings[i]);\n        }\n    }\n    return matches;\n\
    }\n", "  var filtered = [];\n  for(var i=0, len=strings.length; i < len; i++){\n\
    \    if(strings[i].indexOf(prefix) === 0){\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}", "  var out = []\n  for(var i=0; i<strings.length;\
    \ i++){\n    if(strings[i].indexOf(prefix) === 0)\n      out.push(strings[i])\n\
    \  }\n  return out\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(word){\n\
    \        return word.indexOf(prefix) === 0;\n    });\n}\n", "  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.slice(0, prefix.length)\
    \ == prefix){\n      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(word){\n    return word.startsWith(prefix);\n\
    \  });\n}\n", "  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix)\
    \ === 0){\n      strings.splice(i, 1);\n      i--;\n    }\n  }\n  return strings;\n\
    }\n", "    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tvar output = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].indexOf(prefix) === 0)\n\t\t\toutput.push(strings[i]);\n\t}\n\
    \treturn output;\n}\n", "  var re = new RegExp('^'+prefix+'\\\\w+');\n  return\
    \ strings.filter(function(string){\n    return string.match(re);\n  });\n}\n",
  "    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "  var filtered_strings = strings.filter(function(string){\n \
    \   return string.startsWith(prefix);\n  });\n  return filtered_strings;\n}\n",
  "  return _.reject(strings, function(str){\n    return str.indexOf(prefix) == 0;\n\
    \  });\n}\n", "\tfor(var i in strings){\n\t\tvar string = strings[i];\n\t\tif(string.substring(0,\
    \ prefix.length) == prefix){\n\t\t\tstrings[i] = string; // Store the string\n\
    \t\t}\n\t}\n\treturn strings;\n}\n", "  var re = new RegExp('^' + prefix + '([a-zA-Z0-9_]*)$');\n\
    \  return strings.filter(function(str){\n    return re.test(str);\n  });\n}\n",
  "    var result = [];\n    strings.forEach(function(string){\n        if (string.substr(0,\
    \ prefix.length) == prefix) {\n            result.push(string);\n        }\n \
    \   });\n    return result;\n}\n", "    var filtered = [];\n    for(var i=0; i<strings.length;\
    \ i++){\n        if (strings[i].indexOf(prefix) === 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\tlet filtered_strings = [];\n\
    \t\n\tfor (let i = 0; i < strings.length; i++){\n\t\tif (strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\t\n\treturn filtered_strings;\n\
    }\n", "  var filtered_strings = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    if(strings[i].substring(0, prefix.length) == prefix){\n      filtered_strings.unshift(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\nexports.filter_by_prefix = filter_by_prefix;\n",
  "    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            strings.splice(i--, 1);\n        }\n    }\n    return strings;\n\
    }\n", "\tvar filtered = [];\n\tfor (var i = 0; i < strings.length; i++){\n\t\t\
    if (strings[i].substr(0, prefix.length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n", "    var result = []\n    for (var i = 0,\
    \ len = strings.length; i < len; i++){\n        var s = strings[i]\n        if\
    \ (s.indexOf(prefix) === 0)\n            result.push(s)\n    }\n    return result\n\
    }\n", "    var filtered = [];\n    for(var i=0; i<strings.length; i++){\n    \
    \    if(strings[i].indexOf(prefix) == 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "    return strings.filter(function(val){\n\
    \        return (val.indexOf(prefix) === 0);\n    });\n}\n", "    return strings.filter(function(item){\n\
    \        return item.startsWith(prefix);\n    });\n}\n", "    var p = new RegExp('^'\
    \ + prefix + '\\\\b')\n\n    return strings.filter(function(word) {\n        return\
    \ p.test(word)\n    })\n}\n", "    return strings.filter(function(el){\n     \
    \   return el.startsWith(prefix);\n    });\n}\n", "\treturn strings.filter(function(str){return\
    \ str.startsWith(prefix);});\n}\n", "  if(strings.length == 0){\n    return [];\n\
    \  }\n  var filtered_strings = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    if(strings[i].indexOf(prefix) == 0){\n      filtered_strings.push(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\n", "    var filtered_strings = [];\n\
    \    for(var i = 0, len = strings.length; i < len; i++){\n        var str = strings[i];\n\
    \        if(str.indexOf(prefix) === 0){\n            filtered_strings.push(str);\n\
    \        }\n    }\n    return filtered_strings;\n}\n\n", "    prefix = prefix\
    \ || '';\n    return strings.filter(function(s){\n        return s.indexOf(prefix)\
    \ === 0;\n    });\n}\n\n", "    for(var i = 0; i< strings.length; i++){\n    \
    \    if(strings[i].indexOf(prefix) === 0)\n            strings.splice(i, 1);\n\
    \    }\n    return strings;\n}\n\n", "  if(strings.length === 0) return [];\n\
    \  if(strings.length === 1) return strings.filter(function(str){\n    return str.substr(0,\
    \ prefix.length) === prefix;\n  });\n  return strings.filter(function(str){\n\
    \    return str.substr(0, prefix.length) === prefix;\n  }).map(function(str){\n\
    \    return str.substr(prefix.length);\n  });\n}", "\tvar filtered = [];\n\t_.each(strings,\
    \ function(string){\n\t\tif (string.startsWith(prefix)){\n\t\t\tfiltered.push(string);\n\
    \t\t}\n\t});\n\treturn filtered;\n}\n", "    strings.forEach(function(string)\
    \ {\n        if(string.startsWith(prefix)){\n            strings.splice(strings.indexOf(string),\
    \ 1);\n        }\n    });\n    return strings;\n}\n", "    return strings.filter(function(string){\
    \ return string.startsWith(prefix) });\n}\n", "\tif(!strings) return [];\n\tvar\
    \ ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif( strings[i].indexOf(prefix)\
    \ == 0 ) ret.push(strings[i]);\n\t}\n\treturn ret;\n}\n", "  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tvar string = strings[i];\n\t\tif(string.indexOf(prefix) === 0){\n\t\t\tresult.push(string);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  var matches = [];\n  for (var i = 0; i\
    \ < strings.length; i++){\n    if (strings[i].indexOf(prefix) === 0){\n      matches.push(strings[i]);\n\
    \    }\n  }\n  return matches;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "\tprefix = prefix.toLowerCase();\n\
    \tvar matching_strings = [];\n\t_.each(strings, function(string){\n\t\tif( string.startsWith(prefix)\
    \ ){\n\t\t\tmatching_strings.push(string);\n\t\t}\n\t});\n\treturn matching_strings;\n\
    }\n\n", "    return strings.filter(function(x){return x.indexOf(prefix) === 0;});\n\
    }\n", "    strings = strings || [];\n    prefix = prefix || '';\n    return strings.filter(function(str){\n\
    \        return str.slice(0, prefix.length) === prefix;\n    });\n}\n", "\tvar\
    \ filtered_strings = [];\n\t\n\tfor(var i=0; i<strings.length; i++){\n\t\tvar\
    \ string = strings[i];\n\t\tif(string.substr(0, prefix.length) == prefix){\n\t\
    \t\tfiltered_strings.push(string);\n\t\t}\n\t}\n\t\n\treturn filtered_strings;\n\
    }\n", "    prefix = prefix || '';\n    var filtered_strings = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        var string = strings[i];\n       \
    \ if(string.indexOf(prefix) === 0){\n            filtered_strings.push(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\n", "    return strings.filter(function(value){\n\
    \        return value.indexOf(prefix) === 0;\n    });\n}\n", "  if(!prefix ||\
    \ !strings || !strings.length){\n    return [];\n  }\n\n  strings = strings.map(function(str){\n\
    \    return str.trim();\n  });\n\n  var filtered_strings = [];\n\n  strings.forEach(function(str){\n\
    \    if(str.indexOf(prefix) === 0){\n      filtered_strings.push(str);\n    }\n\
    \  });\n\n  return filtered_strings;\n}\n", "    if(!prefix || prefix.length ==\
    \ 0)\n        return strings;\n\n    return strings.filter(function(str){\n  \
    \      return (str.substr(0, prefix.length) == prefix);\n    });\n}\n", "    prefix\
    \ = prefix || '';\n    var output = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.substr(0, prefix.length) === prefix;\n    });\n}\n", "\treturn\
    \ strings.filter(function(string){\n\t\treturn string.indexOf(prefix) == 0;\n\t\
    });\n}\n", "    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "  return strings.filter(function\
    \ (string){\n    return string.startsWith(prefix);\n  });\n}\n", "    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0\n    })\n}\n", "  var matches = [];\n\
    \  strings.forEach(function(str){\n    if (str.indexOf(prefix) === 0){\n     \
    \ matches.push(str);\n    }\n  });\n  return matches;\n}\n\n", "  return strings.filter(function(str){\n\
    \    return str.indexOf(prefix) === 0;\n  });\n}\n", "  return _.filter(strings,\
    \ function match_prefix (string){\n    return string.startsWith(prefix);\n  });\n\
    }\n", "  var out = [];\n  for(var i=0; i< strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      out.push(strings[i]);\n    }\n  }\n  return out;\n}\n\n", "  var\
    \ newStrings = [];\n  for(var i in strings){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      newStrings.push(strings[i]);\n    }\n  }\n  return newStrings;\n\
    }", "  if (strings.length <= 0) return strings;\n\n  prefix = prefix.toLowerCase();\n\
    \n  return strings.filter(function(string){\n    return string.substr(0, prefix.length)\
    \ === prefix;\n  });\n}\n", "    var result = [];\n    angular.forEach(strings,\
    \ function(string){\n        var index = string.indexOf(prefix);\n        if(index\
    \ > -1){\n            result.push(string);\n        }\n    });\n    return result;\n\
    }\n", "\tvar filtered_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\
    \tif(strings[i].substr(0, prefix.length) == prefix){\n\t\t\tfiltered_strings.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered_strings;\n}\n", "    return $.grep(strings, function(str)\
    \ {\n        return str.slice(0, prefix.length) == prefix;\n    });\n}\n", " \
    \ return strings.filter(function(str){\n    return str.indexOf(prefix) === 0;\n\
    \  });\n}\n", "  var newStrings = [];\n  for (var i = 0; i < strings.length; i++)\
    \ {\n    var string = strings[i];\n    if (string.indexOf(prefix) === 0) {\n \
    \     newStrings.push(string);\n    }\n  }\n  return newStrings;\n}\n", "  prefix\
    \ = prefix || '';\n  var output = [];\n  for (var i = 0; i < strings.length; i++){\n\
    \    if (typeof strings[i] === 'string'){\n      if (strings[i].indexOf(prefix)\
    \ === 0){\n        output.push(strings[i]);\n      }\n    }\n  }\n  return output;\n\
    }\n", "  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n", "    for(var i = 0; i < strings.length; i++){\n       \
    \ if(strings[i].indexOf(prefix) === 0)\n            strings.splice(i, 1);\n  \
    \  }\n    return strings;\n}\n", "    var filtered = [];\n    strings.forEach(function(element){\n\
    \        if (element.startsWith(prefix))\n            filtered.push(element);\n\
    \    });\n    return filtered;\n}\n", "\tvar re = new RegExp(\"^\"+prefix);\n\t\
    var matches = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tvar string\
    \ = strings[i];\n\t\tif(string.search(re) == 0){\n\t\t\tmatches.push(string);\n\
    \t\t}\n\t}\n\treturn matches;\n}\n", "    var filtered_strings = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) ===\
    \ 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n", "    var filtered = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var str = strings[i];\n        if(str.indexOf(prefix) === 0){\n\
    \            filtered.push(str);\n        }\n    }\n    return filtered;\n}\n",
  "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tvar str =\
    \ strings[i];\n\t\tvar start_i = str.indexOf(prefix);\n\t\tif(start_i === 0)\n\
    \t\t\tfiltered.push(str);\n\t\telse if(start_i !== -1)\n\t\t\tfiltered.push(str.substr(0,\
    \ start_i));\n\t}\n\treturn filtered;\n}\n", "    return strings.filter(function(x){\
    \ return x.startsWith(prefix); });\n}\n", "  var filtered_strings = [];\n  if(strings){\n\
    \    for(var i = 0; i < strings.length; i++){\n      if(strings[i].indexOf(prefix)\
    \ === 0)\n        filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "  var filtered_strings = [];\n  for (var i = 0; i < strings.length; i++){\n\
    \    var str = strings[i];\n    if (str.substring(0, prefix.length) == prefix){\n\
    \      filtered_strings.push(str);\n    }\n  }\n  return filtered_strings;\n}\n",
  "  return strings.filter(function(i){ return i.startsWith(prefix); });\n}", "  \
    \  if (!strings) {\n        return [];\n    }\n    var filtered_strings = [];\n\
    \    strings.forEach(function(string) {\n        if (string.startsWith(prefix))\
    \ {\n            filtered_strings.push(string);\n        }\n    });\n    return\
    \ filtered_strings;\n}\n", "  for (var i = 0; i < strings.length; i++){\n    if\
    \ (strings[i].indexOf(prefix) === 0){\n      return strings[i];\n    }\n  }\n\
    \  return [];\n}\n", "\tvar result = [];\n\tstrings.forEach(function(el){\n\t\t\
    if(el.indexOf(prefix) === 0){\n\t\t\tresult.push(el);\n\t\t}\n\t});\n\treturn\
    \ result;\n}\n\n", "    \n    return strings.filter(function(item){\n        return\
    \ (item.indexOf(prefix) === 0);\n    });\n}\n\n", "\tprefix = prefix || '';\n\t\
    var filtered_strings = [];\n\n\tstrings.forEach(function(item){\n\t\tif(item.indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(item);\n\t\t}\n\t});\n\n\treturn filtered_strings;\n\
    }\n", "    var returnList = [];\n    strings.forEach(function(string, index, strings)\
    \ {\n        if (string.startsWith(prefix)) {\n            returnList.push(string);\n\
    \        }\n    });\n    return returnList;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n", "    var filtered_strings\
    \ = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].substr(0,prefix.length)\
    \ == prefix){\n            filtered_strings.push(strings[i]);\n        }\n   \
    \ }\n    return filtered_strings;\n}\n", "    return strings.filter(function(el)\
    \ {\n        return el.startsWith(prefix);\n    });\n}\n", "    var out = [];\n\
    \    strings.forEach(function(string) {\n        if (string.startsWith(prefix)){\n\
    \            out.push(string);\n        }\n    });\n    return out;\n}\n", " \
    \   var results = [];\n    for (var i = 0; i < strings.length; i++){\n       \
    \ if (strings[i].indexOf(prefix) === 0){\n            results.push(strings[i]);\n\
    \        }\n    }\n    return results;\n}\n", "    const filtered_strings = strings.filter(function(string){\n\
    \        return string.substr(0, prefix.length) === prefix;\n    });\n    return\
    \ filtered_strings;\n}\n</script>\n\n<script type=\"text/x-mathjax-config\">\n\
    \  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\\
    (\",\"\\\\)\"] ],\n      displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ],\n\
    \      processEscapes: true,\n      processEnvironments: true\n    },\n    TeX:\
    \ {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\\alpha}',\n        bc:\
    \ '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n        bg: '\\\\mathbf{g}',\n\
    \        bq: '\\\\mathbf{q}',\n        bu: '\\\\mathbf{u}',\n        bv: '\\\\\
    mathbf{v}',\n        bw: '\\\\mathbf{w}',\n        bx: '\\\\mathbf{x}',\n    \
    \    by: '\\\\mathbf{y}',\n        bz: '\\\\mathbf{z}',\n        bsigma: '\\\\\
    mathbf{\\\\sigma}',\n        sign: '\\\\operatorname{sign}',\n        diag: '\\\
    \\operatorname{diag}',\n        real: '\\\\mathbb{R}',\n      },\n      equationNumbers:\
    \ { autoNumber: 'AMS' }\n      }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\"\
    >\n  MathJax.Hub.Config({\n    \"HTML-CSS\": { scale: 90, linebreaks: { automatic:\
    \ true } },\n    TeX: { extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] }\n  });\n\
    </script>\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n\
    \    \"HTML-CSS\": { scale: 90, linebreaks: { automatic: true } },\n    TeX: {\
    \ extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] }\n  });\n</script>\n\n<script\
    \ type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n  \
    \    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      displayMath: [ ['$$','$$'],\
    \ [\"\\\\[\",\"\\\\]\"] ],\n      processEscapes: true,\n      processEnvironments:\
    \ true\n    },\n    TeX: {\n      Macros: {\n        balpha: '\\\\boldsymbol{\\\
    \\alpha}',\n        bc: '\\\\mathbf{c}',\n        be: '\\\\mathbf{e}',\n     \
    \   bg: '\\\\mathbf{g", "\tvar filtered_strings = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.startsWith(prefix)){\n\t\t\tfiltered_strings.push(string);\n\t\t\
    }\n\t});\n\treturn filtered_strings;\n}\n", "    const regex = new RegExp(prefix);\n\
    \    return strings.filter(string => regex.test(string));\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n}\n", "\tif(!strings.length){ return\
    \ []; }\n\tprefix = prefix.toLowerCase();\n\tvar new_strings = [];\n\t\n\tfor(var\
    \ i=0; i<strings.length; ++i){\n\t\tvar str = strings[i];\n\t\tvar lower_str =\
    \ str.toLowerCase();\n\t\tvar prefix_index = lower_str.indexOf(prefix);\n\t\t\
    if(prefix_index !== -1){\n\t\t\tnew_strings.push(str);\n\t\t}\n\t}\n\t\n\treturn\
    \ new_strings;\n}\n", "  if (prefix == '') {\n    return strings\n  }\n  else\
    \ {\n    var prefix_length = prefix.length;\n    return strings.filter(function(string){\n\
    \      return string.substr(0, prefix_length) === prefix;\n    });\n  }\n}\n",
  "\tvar result = [];\n\tfor(var i = 0, len = strings.length; i < len; i++){\n\t\t\
    var string = strings[i];\n\t\tif(string.substr(0, prefix.length) == prefix){\n\
    \t\t\tresult.push(string);\n\t\t}\n\t}\n\treturn result;\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(prefix) === 0;\n\t});\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n</script>\n</head>\n<body>\n\
    \n<div class=\"exercise\">\n<p class=\"problem\">Click on this <span class=\"\
    info\">problem</span> to see the solution.\n<p><input id=\"input\" type=\"text\"\
    \ value=\"\" size=\"20\"/>\n<p><input id=\"submit\" type=\"button\" value=\"Submit\"\
    />\n</div>\n\n<div id=\"output\"></div>\n\n<script>", "    \n    if ( !Array.isArray(strings)\
    \ ) {\n        strings = [strings];\n    }\n    if ( !strings.length ) {\n   \
    \     return [];\n    }\n    if ( typeof prefix === 'undefined' || prefix ===\
    \ null ) {\n        return strings;\n    }\n\n    var filtered_strings = [],\n\
    \        str = prefix,\n        str_index;\n\n    for ( var i=0; i < strings.length;\
    \ i++ ) {\n        \n        str_index = strings[i].indexOf(str);\n        if\
    \ ( str_index !== -1 ) {\n            filtered_strings.push(strings[i]);\n   \
    \     }\n    }\n    return filtered_strings;\n}\n", "    var out = [];\n    for\
    \ (var i = 0; i < strings.length; i++){\n        if (strings[i].substr(0, prefix.length)\
    \ == prefix){\n            out.push(strings[i]);\n        }\n    }\n    return\
    \ out;\n}\n", "    var output = [];\n    for (var i = 0; i < strings.length; i++){\n\
    \        if (strings[i].substr(0, prefix.length) == prefix){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s){\n        return s.indexOf(prefix) === 0;\n    });\n}\n", "  prefix = prefix.toLowerCase();\n\
    \  return strings.filter(function(str){\n    return str.startsWith(prefix);\n\
    \  });\n}\n", "\tvar ret = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\
    \tif(strings[i].indexOf(prefix) === 0){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t\
    }\n\treturn ret;\n}", "    prefix = prefix.toLowerCase();\n    return strings.filter(function(string){\n\
    \        return string.slice(0, prefix.length) == prefix;\n    });\n}\n", "  return\
    \ strings.filter(function(item){\n    return item.indexOf(prefix) === 0;\n  });\n\
    }\n", "\tvar ret = [];\n\tstrings.forEach(function(string){\n\t\tif(string.indexOf(prefix)\
    \ == 0){\n\t\t\tret.push(string);\n\t\t}\n\t});\n\treturn ret;\n}\n", "\tvar filtered\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif((strings[i].indexOf(prefix)\
    \ === 0) && (strings[i] !== prefix)){\n\t\t\tfiltered.push(strings[i]);\n\t\t\
    }\n\t}\n\treturn filtered;\n}\n", "    return $.grep(strings, function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n\n", "    if(!prefix){\n\
    \        return strings;\n    }\n    return objects.filter(function(word){\n \
    \       return word.startsWith(prefix);\n    });\n}\n", "  var new_strings = []\n\
    \  strings.forEach(function(str){\n    if(str.startsWith(prefix)){\n      new_strings.push(str)\n\
    \    }\n  })\n  return new_strings\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "  var filtered\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    var str = strings[i];\n\
    \    if(str.substr(0, prefix.length) == prefix){\n      filtered.push(str);\n\
    \    }\n  }\n  return filtered;\n}\n", "  var filtered_strings = [];\n  for(var\
    \ i = 0; i < strings.length; i++){\n    if(strings[i].substr(0, prefix.length)\
    \ == prefix){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return\
    \ filtered_strings;\n}\n", "    return objects.filter(function(string){\n    \
    \    return string.indexOf(prefix) === 0;\n    });\n}\n", "  return strings.filter(function(str){\n\
    \    return str.startsWith(prefix);\n  });\n}\n", "\treturn strings.filter(function(item){\n\
    \t\treturn (item.indexOf(prefix) === 0);\n\t});\n}\n", "  var filtered = [];\n\
    \  strings.forEach(function(str){\n    if(str.substr(0, prefix.length) == prefix){\n\
    \      filtered.push(str);\n    }\n  });\n  return filtered;\n}\n", "    var results\
    \ = [];\n    strings.forEach(function(str){\n        var startsWith = str.substring(0,\
    \ prefix.length) === prefix;\n        if(startsWith){\n            results.push(str);\n\
    \        }\n    });\n    return results;\n}\n", "  return strings.filter(function(item){\n\
    \    return item.startsWith(prefix);\n  });\n}\n", "    var result = [];\n   \
    \ for(var i = 0; i < strings.length; i++){\n        var string = strings[i];\n\
    \        if(string.slice(0, prefix.length) === prefix){\n            result.push(string);\n\
    \        }\n    }\n    return result;\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(prefix) === 0;\n\t});\n}\n", "    return objects.filter(function\
    \ (string) {\n        return (\n            (string.startsWith(prefix)) ?\n  \
    \              true :\n                false\n            );\n    });\n}\n", " \
    \   return filter(filter(strings.split(' '), function(string){return string.slice(0,\
    \ prefix.length) === prefix;}),\n                function(string){return string.length\
    \ > prefix.length;});\n}\n", "\treturn strings.filter(function (string){\n\t\t\
    return string.substr(0, prefix.length) == prefix;\n\t});\n}\n", "\tvar re = new\
    \ RegExp('^' + prefix);\n\tvar result = [];\n\tvar i;\n\n\tfor(i = 0; i < strings.length;\
    \ i++){\n\t\tif(re.test(strings[i])){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "  var result = [];\n  for(var i = 0; i < strings.length;\
    \ i++){\n    if(strings[i].indexOf(prefix) == 0){\n      result.push(strings[i]);\n\
    \    }\n  }\n  return result;\n};\n", "    var filtered_strings = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].substring(0, prefix.length)\
    \ === prefix){\n            filtered_strings.push( strings[i] );\n        }\n\
    \    }\n    return filtered_strings;\n}\n", "    return _.filter(strings, function(string){\n\
    \        return string.substr(0, prefix.length) == prefix;\n    });\n}\n", " \
    \   var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n       \
    \ if(strings[i].substr(0, prefix.length) == prefix) filtered.push(strings[i]);\n\
    \    }\n    return filtered;\n}\n", "    var filtered_strings = [];\n    for(var\
    \ i = 0; i< strings.length; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            filtered_strings.push(strings[i]);\n        }\n    }\n    return\
    \ filtered_strings;\n}\n</code>\n<|/ a |>\n<| a |>\nHere is an alternative implementation\
    \ using underscore and ramda.\n<code>\nconst filterByPrefix = R.pipe(\n  R.filter(R.includes('a')),\n\
    \  R.map(R.split('a'))\n)\n\nfilterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')",
  "    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n</script>\n\n<div class=\"cell border-box-sizing text_cell rendered\"\
    >\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div\
    \ class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Filtering by\
    \ list membership is another useful operation in Python: it gives the indices\
    \ of all elements that satisfy a certain condition.  As a simple example, let's\
    \ find all the words in our list that start with 'a':</p>\n\n</div>\n</div>\n\
    </div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n\
    <div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[14]:</div>\n\
    <div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight\
    \ hl-ipython3\"><pre><span></span><span class=\"n\">words</span> <span class=\"\
    o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"\
    n\">word_list</span><span class=\"p\">)</span>\n<span class=\"n\">a_words</span>\
    \ <span class=\"o\">=</span> <span class=\"n\">filter_by_prefix</span><span class=\"\
    p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"\
    s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">words</span>\n\
    </pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div\
    \ class=\"output\">\n\n\n<div class=\"output_area\">\n<div class=\"prompt output_prompt\"\
    >Out[14]:</div>\n\n\n\n<div class=\"output_text output_subarea output_execute_result\"\
    >\n<pre>[&#39;aardvark&#39;,\n &#39;abacus&#39;,\n &#39;abbess&#39;,\n &#39;abbey&#39;,\n\
    \ &#39;abbot&#39;,\n &#39;abdomen&#39;,\n &#39;abduce&#39;,\n &#39;abductor&#39;,\n\
    \ &#39;abe&#39;,\n &#39;abelian&#39;,\n &#39;aberrant&#39;,\n &#39;abhor&#39;,\n\
    \ &#39;abhorrent&#39;,\n &#39;abhorrently&#39;,\n &#39;abilities&#39;,\n &#39;ability&#39;,\n\
    \ &#39;abject&#39;,\n &#39;abjure&#39;,\n &#39;abjuration&#39;,\n &#39;abjured&#39;,\n\
    \ &#39;abjurement&#39;,\n &#39;abjurer&#39;,\n &#39;ablate&#39;,\n &#39;ablatement&#39;,\n\
    \ &#39;ablates&#39;,\n &#39;ablation&#39;,\n &#39;ablative&#39;,\n &#39;ablaut&#39;,\n\
    \ &#39;ablution&#39;,\n &#39;ablutor&#39;,\n &#39;abnegate&#39;,\n &#39;abnegation&#39;,\n\
    \ &#39;abnegator&#39;,\n &#39;aboard&#39;,\n &#39;abode&#39;,\n &#39;aboriginal&#39;,\n\
    \ &#39;aborigine&#39;,\n", "    prefix = prefix || '';\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "  var new_list = [];\n\
    \  \n  strings.forEach(function(string){\n    if(string.indexOf(prefix) === 0){\n\
    \      new_list.push(string);\n    }\n  });\n\n  return new_list;\n}\n", "  return\
    \ _(strings).filter(function(str){\n    return str.indexOf(prefix) === 0;\n  });\n\
    }\n", "    prefix = prefix || '';\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n", "    if (strings.length\
    \ <= 1) return [];\n    if (!prefix) return strings;\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n", "  var filtered_strings\
    \ = [];\n  strings.forEach(function(string) {\n    if (string.startsWith(prefix))\
    \ {\n      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "  var filtered = [];\n  strings.forEach(function(str){\n    if\
    \ (str.indexOf(prefix) === 0) filtered.push(str);\n  });\n  return filtered;\n\
    }\n", "    var new_strings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            new_strings.push(strings[i]);\n\
    \        }\n    }\n    return new_strings;\n}\n", "    var res = [];\n\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) ===\
    \ 0){\n            res.push(strings[i]);\n        }\n    }\n\n    return res;\n\
    }\n", "    var ret = [];\n    for(var i = 0; i &lt; strings.length; i++){\n  \
    \      if(strings[i].substring(0, prefix.length) === prefix){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "  return strings.filter(function(str){\n\
    \    return str.substr(0, prefix.length) == prefix;\n  });\n}", "  var filtered\
    \ = [];\n  \n  strings.forEach(function (string){\n    if (string.startsWith(prefix)){\n\
    \      filtered.push(string);\n    }\n  });\n  \n  return filtered;\n}\n", " \
    \ const filtered_strings = [];\n  strings.forEach((string) => {\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string)\n    }\n  });\n  return filtered_strings;\n\
    }\n", "\tif(!strings || !prefix)\n\t\treturn [];\n\n\tvar filtered = [];\n\tfor(var\
    \ i = 0, l = strings.length; i < l; i++){\n\t\tvar str = strings[i];\n\t\tvar\
    \ len = str.indexOf(prefix);\n\t\tif(len != 0){\n\t\t\tfiltered.push(str);\n\t\
    \t}\n\t}\n\treturn filtered;\n}\n", "\treturn strings.filter(function(val){\n\t\
    \treturn val.indexOf(prefix) === 0;\n\t});\n}", "  return strings.filter(function(elem){\n\
    \    return elem.indexOf(prefix) === 0;\n  });\n}\n", "  var ret = [];\n  strings.forEach(function(string)\
    \ {\n    if (string.indexOf(prefix) == 0) {\n      ret.push(string);\n    }\n\
    \  });\n  return ret;\n}\n", "  return strings.filter(function(str){\n    return\
    \ str.startsWith(prefix);\n  });\n}\n", "    var matches = [];\n    strings.forEach(function(item){\n\
    \        if(item.indexOf(prefix) === 0){\n            matches.push(item);\n  \
    \      }\n    });\n    return matches;\n}\n", "\tvar result = [];\n\tfor(var i\
    \ = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) === 0){\n\t\
    \t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "    var ret\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n", "  var newStrings = strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n  return newStrings;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
