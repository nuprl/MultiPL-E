name: HumanEval_130_tri
language: js
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return a list of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2,\
  \ 8]\nfunction tri(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
  \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
  \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n\
  \  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8,\
  \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["    let a = [1, 3];\n    let b = [1];\n    let c = [1];\n    \n   \
    \ if(n%2==1){\n        a.push(tri(Math.floor(n/2)+1));\n    }else{\n        b.push(tri(Math.floor(n/2)-1));\n\
    \    }\n    \n    if(n%2==0){\n        c.push(tri(n-1)+tri(n+1));\n    }\n   \
    \ \n    return a.concat(b).concat(c);\n}\n", "    var result = [];\n    if(n<1)\
    \ return result;\n    if(n==1) return result;\n    for(var i=0;i<=n;i+=2){\n \
    \       result.push(i);\n    }\n    for(var i=1;i<=n;i++){\n        var tri=i;\n\
    \        for(var j=0;j<=n-i;j++){\n            tri+=tri;\n        }\n        result.push(tri);\n\
    \    }\n    return result;\n}\n", "  return [3, (1 + n) / 2, ...tri(n - 1)].slice(0,n+1);\n\
    }", "    let arr = [];\n    arr.push(3);\n    for(let i=2;i<=n;i++){\n       \
    \ arr.push((tri(i-1)+tri(i-2)+tri(i+1))%10);\n    }\n    return arr;\n}", "  var\
    \ arr = [];\n  for(var i = 1; i <= n; i++){\n    arr.push(tri(i-1));\n  }\n  arr.push(tri(n));\n\
    \  return arr;\n}\n", "  let result=[];\n  result[0]=1;\n  result[1]=3;\n  \n\
    \  for(let i=2;i<n;i++){\n    let temp=result[i-1]+result[i-2];\n    result.push(temp);\n\
    \  }\n  return result;\n}\n", "\tvar arr = [];\n\tfor(var i = 1; i <= n; i +=\
    \ 2)\n\t\tarr.push(i);\n\tfor(var i = n; i >= 0; i--)\n\t\tarr.push(n - i + i);\n\
    \treturn arr;\n}", "    let result = [1,3];\n    let numbers = Array.from(Array(n+2).keys()).map(x\
    \ => x+1);\n    let sum = 0;\n    \n    numbers.map(i => sum = sum + result[i-1]\
    \ + result[i-2] + result[i-3]);\n    \n    return result;\n}\n", "  if(n<=0){\n\
    \    return [];\n  }\n  if(n==1 || n==2){\n    return [1];\n  }\n  return [tri(n-1)+tri(n-2),tri(n-1)+tri(n-1)+tri(n)]\n\
    }\n", "\tif(n<=3) return [];\n\tvar a = new Array(n+1);\n\ta[0]=a[1]=a[2]=1;\n\
    \tfor(var i=3; i>1; i--){\n\t\ta[i] = a[i-1] + a[i-2];\n\t\tif(i%2===0) a[i]=a[i-2]\
    \ + a[i-1];\n\t}\n\treturn a;\n}\n", "  var a = [], b = [1,1];\n  for(var i =\
    \ 1; i < n; i++){\n    a.push(b[i % 2] + a[(b[i % 2].toString().charAt(0)+\"1\"\
    ).substr(-1)]);\n    b.push((b[i % 2].toString().charAt(0)+\"1\").substr(-1));\n\
    \  }\n  return a;\n}\n", "  let result = []\n  let first = 0\n  let second = 1\n\
    \  let third = 2\n  for (let i = 0; i < n; i++){\n    result.push(third)\n   \
    \ third = second + first + third\n    second = first\n    first = third\n  }\n\
    \  return result\n}\n", "  var arr = [];\n  if(n % 2 === 0){\n    arr.push(1);\n\
    \  }\n  for(var i = 3; i <= Math.pow(n, 1/2); i = i + 2){\n    arr.push(i + tri(i\
    \ - 2) + tri(i - 1));\n  }\n  return arr;\n}\n", "  if(n<=1){\n    return [1,1,1]\n\
    \  }\n  else{\n    if(n % 2 === 0){\n      return [tri(n - 1),tri(n - 2),tri(n\
    \ - 1)]\n    }else{\n      return  [tri(n - 1),tri(n - 2),tri(n - 1)].concat(tri(n\
    \ - 2))\n    }\n  }\n}\n", "\tlet res = [];\n\tlet a = 1, b = 2, c = 1;\n\tfor\
    \ (let i = 3; i <= n; i++){\n\t\tres.push(a);\n\t\ta = b;\n\t\tb = c;\n\t\tc =\
    \ a + b;\n\t}\n\treturn res;\n}\n", "  if (n < 0){\n    return [-1, 0, 1];\n \
    \ } else if (n === 1){\n    return [1, 1, 1];\n  } else if (n === 2){\n    return\
    \ [1, 1];\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n - 3); \n  }\n\
    }\n", "    if (n < 3) \n        return [1,n];\n    var result = [];\n    var temp1\
    \ = [3,1];\n    var temp2 = [3,2];\n    var temp3 = [];\n    for (var i = 0; i\
    \ < n; i++)\n        result.push(temp3[i]);\n        temp3.push(temp1[i] + temp2[i]);\n\
    \        if (temp1[i] + temp2[i] === temp3[i]) \n            temp3.push(temp3[i]\
    \ + 1);\n        if (temp2[i] + temp3[i] === temp1[i]) \n            temp3.push(temp3[i]\
    \ - 1);\n    return result;\n}", "  let a = [3]\n  if (n < 2) {\n    return a\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    let sum = a.slice(0,-1).reduce((a,\
    \ b) => a + b, 0) + a.pop() + a[a.length - 1]\n    a.push(sum)\n  }\n  return\
    \ a\n}\n", "    let a = [];\n    for(let i = 0; i <= n; i++){\n        if(i%2\
    \ == 0){\n            a.push(tri(i-1)+tri(i-2))\n        }\n        else{\n  \
    \          a.push(tri(i-1)+tri(i-2)+tri(i+1))\n        }\n    }\n    return a\n\
    }\n", "    let result = [];\n    let one = n;\n    let two = n;\n    let three\
    \ = n + 1;\n    \n    if(n % 2 == 0){\n        result.push(one);\n        result.push(two);\n\
    \        result.push(three);\n    }\n    else{\n        one = one+1;\n       \
    \ two = two+2;\n        three = three+3;\n        result.push(one);\n        result.push(two);\n\
    \        result.push(three);\n    }\n\n    return result;\n}\n", "    var t =\
    \ 0;\n    var result = new Array();\n    for(var i = 0; i < (n + 1) / 2; i++){\n\
    \        t = Math.pow(2, i);\n        if(i % 2 == 0){\n            result.push(t);\n\
    \        }else{\n            result.push(t - 1);\n        }\n    }\n    return\
    \ result;\n}\n", "    if(n<=2) return n; //no need of recursion when n<=2\n  \
    \  else return tri(n-1) + tri(n-2) + tri(n+1);\n}\n", "  var arr = [];\n  if(n\
    \ >= 0) return tri(n + 1) + tri(n + 2) + tri(n -1);\n  arr.push(n);\n  arr.push(1);\n\
    \  arr.push(1);\n  return arr;\n}\n", "  if (n<=1) {return n}\n  return tri(n-1)\
    \ + tri(n - 2) + tri(n + 1);\n}", "  return n > 1 ? tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) : [];\n}\n", "  var res = []; \n  res.push(1); \n  res.push(2);\n\
    \  res.push(3);\n  if (n & 1) {\n    var temp = res[res.length - 1];\n    var\
    \ first = res[0];\n    res.push(first);\n    for (var i = 1; i < res.length; i++){\n\
    \      res[i] = res[i-1] + res[i-2];\n    }\n    res.push(temp);\n  }\n  if(n\
    \ === res.length){\n    return res;\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + res[res.length - 1];\n}", "  if (n < 2) return [];\n  let array = [];\n\
    \  for (let i=1; i <= n; i++) {\n    array.push(i);\n    array.push(n - i - 1);\n\
    \    array.push(n - 1 + 2 * i - 1);\n  }\n  return array;\n}\n", "    var result\
    \ = [];\n    if (n < 0) return result;\n    if (n === 1) return [1];\n    if (n\
    \ % 2 === 0) return tri(n - 1) + (tri(n - 2) + tri(n + 1));\n    else return tri(n\
    \ - 2) + (tri(n - 1) + tri(n + 1));\n}\n</code>\n<|/ a dscore=0 tags=arrays,javascript\
    \ |>\n<| a tags=arrays,javascript dscore=0 |>\nHere is another solution. \n<code>",
  "  var result = [1]\n  for(let i = 1; i <= n; i++){\n    result.unshift(result[i-1]\
    \ + result[i-2])\n  }\n  return result\n}", "    let array = [];\n    let sum\
    \ = 0;\n    for (let i = 0; i <=n; i++) {\n        sum += i;\n        array.push(sum);\n\
    \    }\n    array.push((array[n] + array[n-1] + array[n-2]) / 3);\n    return\
    \ array;\n}\n", "\tvar list = [0],\n\t\tsum = 0;\n\tfor (var i=1; i<=n; i++) {\n\
    \t\tlist.push(list[i-1] + list[i-2] + list[i-3]);\n\t\tsum += list[i];\n\t}\n\t\
    return sum;\n}\n", "  let arr = [3,1];\n  if (n<3) return 0;\n  if (n%2===0) arr.push(1);\n\
    \  else arr.push(arr[n-1] + arr[n-2] + arr[n-3]);\n  return arr;\n}", "    var\
    \ arr = [];\n    var a = 0;\n    var b = 0;\n    var c = 1;\n    var d;\n    for(var\
    \ i=1; i<=n; i++){\n        d = a + b + c;\n        arr[i] = d;\n        a = c;\n\
    \        b = d;\n        c = d;\n    }\n    return arr;\n}\n", "    if(n%2 ==\
    \ 0){\n        return tri(n-1) + tri(n-2)\n    }\n    else{\n        return tri(n-1)\
    \ + tri(n-2) + tri(n+1)\n    }\n}\n", "  if (n < 3) {\n    return [];\n  }\n \
    \ else if (n === 3) {\n    return [];\n  }\n  else {\n    var result = [];\n \
    \   result.push(3);\n    for (var i = 4; i <= n; i++) {\n      result.push(tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1));\n    }\n    return result;\n  }\n}\n", "  if\
    \ (n === 0) return [3, 1];\n  if (n === 1) return [3, 2];\n  \n  let [a,b] = tri(n-1);\n\
    \  let [c,d] = tri(n-2);\n  return [...a, ...c, ...b, ...d];\n}\n", "\tif (n <=\
    \ 1) return []\n\tlet arr = [1, (n+1)/2]\n\tif (n % 2 == 0) arr.push(arr[arr.length-1])\n\
    \treturn arr.map(x => x*x)\n}", "    var arr = [];\n    if(n<=0){\n        return\
    \ arr;\n    }\n    arr.push(n);\n    if(n%2===0){\n        arr.push(tri(Math.floor(n\
    \ / 2)));\n    }\n    arr.push(tri(Math.floor(n / 2) + 1));\n    return arr;\n\
    }\n", "\tvar arr = [];\n\tfor(var i=1; i<n; i++){\n\t\tvar r = n-i;\n\t\tif(n\
    \ < 0){\n\t\t\tr += n;\n\t\t}\n\t\tarr.push(r);\n\t}\n\treturn arr;\n}\nvar result\
    \ = tri(7);", "    // tri base case\n    if (n === 1 || n === 2) {\n        return\
    \ [1, 1, 3];\n    }\n\n    // tri recursive case\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)];\n}\n", "    let sequence = [0,1,2,0];\n    for(let i = 3;\
    \ i <= n; i++){\n        sequence.push(sequence[i] + sequence[i-1] + sequence[i-2]);\n\
    \    }\n    return sequence;\n}\n</code>\n<|/ a tags=javascript,math,algorithm,time-complexity\
    \ |>\n<| a tags=javascript,math,algorithm,time-complexity |>\nWe can achieve this\
    \ by using a variation of dynamic programming concept.\n<code>\nvar n = 5;\nvar\
    \ ans = [];\nvar i = 3 ;\nvar j = 0;\nfor(; j < n ; j++){\n    while(i <= n){\n\
    \        ans[j] = ans[j] + i;\n        i++;\n    }\n    i = 3 ;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=javascript,math,algorithm,time-complexity |>\n<code>",
  "    \n    for(let i = 1; i <= n; i++){\n        \n        if(i % 2 == 0){\n   \
    \         \n            if((i*i) == n){\n                \n                return\
    \ [i*i];\n            }\n            \n            else{\n                \n \
    \               return [i * i + i + 1];\n            }\n            \n       \
    \ }\n        \n        else{\n            \n            return [i * i + 1];\n\
    \        }\n        \n    }\n    \n}\n", "\tvar numbers = [];\n\tfor(var i = 1,\
    \ j; i <= n; i++){\n\t\tnumbers.push(i);\n\t\tif((i & 1) == 0){\n\t\t\tj = (j\
    \ + 1) % 2;\n\t\t\tnumbers.push(j);\n\t\t}\n\t}\n\treturn numbers;\n}\n", "  if(n\
    \ === 1){\n    return [3,1];\n  }\n  if(n === 2){\n    return [3,2];\n  }\n  return\
    \ [tri(n - 1)[0] + tri(n - 2)[1] + tri(n - 2)[2], tri(n - 1) + tri(n - 2)];\n\
    }\n</code>\n<|/ a tags=recursion,javascript,algorithm,fibonacci |>\n<| a dscore=0\
    \ |>\n<code>\nvar fibs = function(n){\n    if(n<2){\n       return 1;\n    }\n\
    \    return fibs(n-2) + fibs(n-1);\n}\n</code>\n<|/ a tags=recursion,javascript,algorithm,fibonacci\
    \ |>\n<| a tags=recursion,javascript,algorithm,fibonacci dscore=0 |>\n<code>\n\
    var fibs = function(n){\n    if(n<=0)\n        return 1;\n    if(n===0)\n    \
    \    return 0;\n    return fibs(n-1) + fibs(n-2);\n};\n</code>\n<|/ a |>\n<| c\
    \ |>\nWhat does \"not working\" mean?\n<|/ c |>\n<| c |>\nI mean that it doesn't\
    \ give me the expected results.\n<|/ c |>\n<| a dscore=0 tags=recursion,javascript,algorithm,fibonacci\
    \ |>\n<code>", "  if(n<=0){\n    return [];\n  }\n  if(n === 1 || n === 2){\n\
    \    return [1];\n  }\n  return [n/2, 3*n/2, n];\n}\n", "    if(n<1){\n      \
    \  throw new RangeError('Tribonacci sequence is defined for non-negative number');\n\
    \    }\n    var res = [];\n    var a = 1;\n    var b = 1;\n    var temp;\n   \
    \ for(let i=1; i<=n; i++){\n        temp = a+b;\n        a = b;\n        b = temp;\n\
    \        res.push(a);\n    }\n    return res;\n}\n", "    if(n<2) return [];\n\
    \    let result = [];\n    for(let i=0;i<n;i++){\n        result.push(tri(n-1)[tri(n-1)[i]]+tri(n-2)[tri(n-2)[i]]+tri(n+2)[tri(n+2)[i]]);\n\
    \    }\n    return result;\n}\n", "  var result = [];\n  for(var i = 1; i <= n;\
    \ i++){\n    var temp = [];\n    var num1 = i;\n    var num2 = (i-1)/2;\n    var\
    \ num3 = (i+1)/2;\n    while(num1 != num2){\n      temp.push(num1);\n      num1\
    \ = num2;\n      num2 = (num1-1)/2;\n    }\n    while(num3 != num1){\n      temp.push(num3);\n\
    \      num3 = (num3+1)/2;\n    }\n    result.push(temp);\n  }\n  return result;\n\
    }\n", "    var tri = [0,1,2,3];\n    if (n==1)\n        return tri;\n    var tri1\
    \ = tri[tri.length - 1];\n    var tri2 = tri[tri.length - 2];\n    var tri3 =\
    \ tri[tri.length - 3];\n    if (n%2===0){\n        return tri1 + tri2 + tri3;\n\
    \    }\n    return tri1 + tri3;\n}", "  let arr = []\n  for(let i = 0; i < (n\
    \ + 1) / 2; i++){\n    if(n % 2 === 0) {\n      arr.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n      arr.push(tri(n - 1) + tri(n - 2))\n  \
    \  }\n  }\n  return arr;\n}\n", "\tif(n === 0){\n\t\treturn [0];\n\t}\n\telse\
    \ if(n === 1){\n\t\treturn [3,1];\n\t}\n\treturn tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n}\n", "  let result = [];\n  \n  //If n is even\n  if(n%2 === 0){\n \
    \   //Add first two numbers\n    result.push(n);\n    result.push(n-1);\n    \n\
    \    //Add last two numbers (in reverse order)\n    for(let i = 2; i < n; i++){\n\
    \      result.push(n-i);\n    }\n  }\n  //If n is odd\n  else{\n    //Add first\
    \ two numbers\n    result.push(n);\n    result.push(n-1);\n    \n    //Add last\
    \ two numbers (in reverse order)\n    for(let i = 2; i < n; i++){\n      result.push(n+i);\n\
    \    }\n  }\n  \n  return result;\n}\n", "    let res = [];\n    for(let i = 0;\
    \ i < n; i++){\n        res.push(fibonacci(i));\n    }\n    return res;\n}\n",
  "\tlet a = [];\n\tlet result = [];\n\tif (n <= 2) {\n\t\ta.push(n);\n\t} else {\n\
    \t\tif (n % 2 === 0) {\n\t\t\ta.push(n);\n\t\t\tresult.push(...tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n\t\t} else {\n\t\t\ta.push(n);\n\t\t\tresult.push(...tri(n\
    \ - 1) + tri(n - 2));\n\t\t}\n\t}\n\treturn result;\n}\n", "  // Base cases:\n\
    \  if (n === 1) return [1,3];\n  if (n === 2) return [1,2,1];\n  if (n === 3)\
    \ return [1,2,3,1];\n  \n  //recursion step:\n  let arr = []; \n  let arr2 = [tri(n\
    \ - 1), tri(n - 2), tri(n + 1)]\n  arr.push(arr2[0]);\n  arr.push(arr2[1]);\n\
    \  arr.push(arr2[2]);\n  \n  arr.push(arr2[3]); \n  \n  return arr; \n}\nlet tri\
    \ = tri(5);", "  let list = []\n  if(n<1) return list\n  if(n%2 === 0) list.push(3)\n\
    \  else list.push(n)\n  while(list[n-1] >= list[n-2]) list.push(list[n-2])\n \
    \ list.push(list[n-1])\n  return list\n}\n", "    let result = [3]\n    for(let\
    \ i=4;i<=n;i++){\n        let temp\n        if(n % 2 === 0){\n            temp\
    \ = tri(i / 2) + (tri(i-1) + tri(i-2))\n        }else{\n            temp = tri(i\
    \ / 2) + (tri(i-2) + tri(i-3))\n        }\n        result.push(temp)\n    }\n\
    \    return result\n}", "    var result=[];\n    var temp=1;\n    for(var i=0;i<=n;i++){\n\
    \        if(temp%2===0){\n            result.push(temp);\n            temp++;\n\
    \        }\n        else{\n            result.push(temp);\n            temp++;\n\
    \            temp++;\n        }\n    }\n    return result;\n}\n", "\tlet list\
    \ = [];\n\tlist.push(3);\n\tif(n % 2 == 0){\n\t\tfor(let i = 0; i <= n; i = i\
    \ + 2){\n\t\t\tlist.push(i + 1);\n\t\t}\n\t\tfor(let i = n + 2; i <= n; i = i\
    \ + 2){\n\t\t\tlist.push(i);\n\t\t}\n\t\treturn list;\n\t}\n\tlet x = Math.floor(n\
    \ / 2);\n\tlist.push(x);\n\tfor(let i = x + 1; i <= n; i = i + 2){\n\t\tlist.push(i);\n\
    \t}\n\treturn list;\n}\n", "  // Your code here\n  var result = [1];\n  if (n\
    \ === 1) return result;\n  if (n === 2) return [3, 1];\n  for(var i = 3; i <=\
    \ n; i++){\n    if(i % 2 === 0){\n      result.push(tri(i - 1) + tri(i - 2) +\
    \ tri(i + 2));\n    } else {\n      result.push(tri(i - 2) + tri(i - 1) + tri(i\
    \ + 2));\n    }\n  }\n  return result;\n}", "    let arr = [];\n    let first\
    \ = 2;\n    let second = 1;\n    let third = 1;\n    while(n >= 0){\n        arr.push(first);\n\
    \        arr[n-2] = arr[n - 1] + arr[n - 2];\n        first= second;\n       \
    \ second = third;\n        third = arr[n-1];\n        n--;\n    }\n    return\
    \ arr;\n}\n", "\tvar arr = [];\n\tfor(i = 0; i <= n; i++){\n\t\tif(i === 0){\n\
    \t\t\tarr.push(3);\n\t\t} else {\n\t\t\tarr.push((i + 1)*(i + 2)/2);\n\t\t}\n\t\
    }\n\treturn arr;\n}\n", "  return n < 3 ? [1]\n       : n%2 === 1 ? [tri(n - 1)\
    \ + tri(n - 2)]\n       : [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n}\n</cell>\n\
    <cell>\nprint(tri(9)) // [3, 3, 5, 14, 21, 28, 35, 42, 49, 64]\n</cell>\n<cell>",
  "  let array = [];\n  \n  if(n<=2){\n    array.push(1)\n  }else{\n    array.push(tri(n-1))\n\
    \    array.push((tri(n-2))+(tri(n+1)));\n  }\n  \n  return array\n}", "    let\
    \ tri1 = [];\n    tri1.push(1);\n    tri1.push(1);\n    tri1.push(1);\n    tri1.push(1);\n\
    \    tri1.push(1);\n    for(let i = 2; i <= n; i++){\n      tri1.push(tri1[i-2]\
    \ + tri1[i-1])\n    }\n    return tri1\n  }\n  ", "  var list = [];\n  for(var\
    \ i = 0; i < n; i++){\n    if(n % 2 == 0){\n      list.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }else{\n      list.push(tri(n - 1) + tri(n - 2));\n\
    \    }\n  }\n  return list;\n}", "  if (n <= 2) {\n    return []\n  }\n  return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n", "    if(n < 1){\n        return\
    \ [];\n    }\n    else if(n === 1){\n        return [1];\n    }\n    else if(n\
    \ === 2){\n        return [1, 1];\n    }\n    else{\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n    }\n}", "    if(n === 1) return [];\n    let\
    \ list = [];\n    let temp = 0;\n    let fibonacciList = [];\n    for(let i =\
    \ 0; i <= n; i++){\n        list.push(fibonacciList.length);\n    }\n    for(let\
    \ i = 1; i <= n; i++){\n        temp = list[i-1];\n        list[i-1] = list[i-2];\n\
    \        list[i-2] = list[i] + temp;\n        fibonacciList.push(list[i]);\n \
    \   }\n    return fibonacciList;\n}\n", "    var res = [];\n    if(n === 0 ||\
    \ n === 1 || n === 2){\n        res.push(1);\n    }\n    for(var i = 3; i <= n;\
    \ i++){\n        res.push(tri(i - 1) + tri(i - 2) + tri(i + 1));\n    }\n    return\
    \ res;\n}\n", "  if(n === 0){\n    return [1, 2, 3]\n  }\n  if(n === 1){\n   \
    \ return [1]\n  }\n  return [n].concat(tri(n - 2) + tri(n - 1 + 1))\n}\n", " \
    \   let n1 = n/2;\n    let n2 = n-1+n1/2;\n    return n1 === 0 && n2 === 1 ? [n]\
    \ : [n1,n2,n1+n2];\n}\n", "  var result = [];\n  \n  function triInner(low,high){\n\
    \    if (low === high) return result[low];\n    \n    var mid = (low + high) >>\
    \ 1;\n    \n    if (mid === low) result[mid] = 3;\n    else if (mid === high)\
    \ result[mid] = tri(mid - 1) + tri(mid + 1) + tri(mid);\n    else result[mid]\
    \ = 1 + tri(mid - 2) + tri(mid + 2);\n    \n    return triInner(low, mid - 1)\
    \ + triInner(mid + 1, high);\n  }\n  \n  return triInner(0, n-1);\n}\n", "   \
    \ if (n <= 2) return [1]\n    const nums = [];\n    nums.push(tri(n - 1)[0]);\n\
    \    nums.push(tri(n - 2)[0] + tri(n - 1)[1])\n    return nums;\n}\n", "\tvar\
    \ arr = [];\n\tfor(var i=0;i<=n;i++){\n\t\tarr.push((i%2)==0)?(i+2)/2:i;\n\t}\n\
    \treturn arr;\n}\n", "\tif (n === 0) return [0];\n\tif (n === 1) return [1];\n\
    \tif (n === 2) return [1, 3];\n\treturn [tri(n - 1), tri(n - 2), tri(n - 1) +\
    \ tri(n - 2)].map(e => e*e);\n}", "  let result = [];\n  if (n === 0) result.push(3);\n\
    \  if (n === 1) result.push(1);\n  if (n % 2 === 0) result.push(1);\n  result.push(n);\n\
    \  for (let i = 2; i < n; i++) {\n    result.push(tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1))\n  }\n  return result;\n}", "    let arr = [1,3,2];\n    if(n%2===0){\n\
    \        arr.push(n/2);\n    }\n    for(let i=3;i<=n+1;i++){\n        arr.push(arr[i-2]\
    \ + arr[i-1] + arr[i]);\n    }\n    return arr;\n}\n", "  if (n <= 1){\n    return\
    \ [];\n  }\n  if (n % 2 == 0){\n    return [tri(n - 1)[0], tri(n - 2)[0]];\n \
    \ }\n  return [tri(n - 1)[0] + tri(n - 2)[0], tri(n - 1)[0] + tri(n - 1)[1]];\n\
    }\n", "\tvar numbers = [];\n\tfor(var i = 0; i <= n; i++){\n\t\tnumbers.push((i%2\
    \ == 0 && i%3 == 0) || (i%2 == 1 && i%5 == 0) || (i%5 == 1 && i%7 == 0) ? 1 :\
    \ (i%2 == 0 || i%5 == 0 || i%7 == 0) ? 2 : 3);\n\t}\n\treturn numbers;\n}\n",
  "    var arr = [];\n    for(var i = 2; i <= n; i++)\n        arr.push(i*(i+1)/2);\n\
    \    \n    return arr;\n}\n", "    if(n === 0) return 0;\n    if(n === 1) return\
    \ 1;\n    if(n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n + 2);\n    return\
    \ tri(n - 1) + tri(n - 2);\n}\n", "  if (n === 0) return [];\n  if (n === 1) return\
    \ [1];\n  if (n % 2 === 0) return [tri(n - 1) + tri(n - 2)];\n  return [tri(n\
    \ - 1)  + tri(n - 2) + tri(n + 1)];\n}\n", "  const arr = [];\n  if(n < 1){\n\
    \    return [];\n  }\n  let arr1 = [1,2,3];\n  let arr2 = [1,2,3];\n  for(let\
    \ i = 0; i <= n; i++){\n    arr.push(arr2[i % 2]);\n    arr1.push(arr2[i % 2]\
    \ - arr1[(i-1) % 2]);\n    arr2.push(arr1[(i+1) % 2] - arr2[(i-1) % 2]);\n  }\n\
    \  return arr;\n}\n\nconst input = 8;\nconst result = tri(input);", "  return\
    \ [1, 1, 1].reduce((acc, cur, index, array) => {\n    return acc.concat(array[index\
    \ + 1] + array[index + 2])\n  }, [])\n}\n", "  let result = []\n  let current\
    \ = 0\n  let index = 0\n  for(let i = 1; i <= n; i++){\n    result.push(current)\n\
    \    if(n % 2 === 1){\n      current += i + 1\n      if(current > index){\n  \
    \      index = current\n      }\n    }else{\n      current -= i - 1\n      if(current\
    \ < index){\n        index = current\n      }\n    }\n  }\n  result.push(index)\n\
    \  return result\n}\n", "    var arr = [];\n    for(var i = 1; i <= n; i++){\n\
    \        if(i%2 == 0){\n            arr.push((i+1)*(i+1));\n        }else{\n \
    \           arr.push(((i-1)*(i-2))+(i+1));\n        }\n    }\n    return arr;\n\
    }\n", "\tif(n===1) return [];\n\tif(n===2) return [1,3];\n\tlet a=[],b=[];\n\t\
    if(n%2 === 0) return [a[1]+n+1,a[0]+n+1,a[2]+n+1];\n\tif(n%2 === 1) return [a[3]+n+1,a[1]+n+1,a[0]+n+1];\n\
    \ta[1]=a[0]+n+1;a[2]=a[1]+n+1;a[3]=a[2]+n+1;\n\tfor(let i=3; i>1; i--) a[i]=(a[i-2]+a[i-1]+a[i])/3;\n\
    \treturn a;\n}\nlet n=4;\nlet arr=tri(n);", "  if (n === 1 || n === 2) return\
    \ [];\n  return [tri(n - 1)[0] + tri(n - 2)[0] + tri(n - 3)[0], tri(n - 1)[1]\
    \ + tri(n - 2)[1] + tri(n - 3)[1]];\n}\n", "    let result = [];\n    \n    if(n\
    \ === 1) return [3, 1];\n    \n    for(let i = 0; i < (n + 1) / 2; i++) {\n  \
    \      result.push(tri(n - i) + tri(n - i - 1) + tri(n + i));\n    }\n    \n \
    \   return result;\n}\n", "  if(n === 0 || n === 1 || n === 2){\n    return [n,\
    \ n, n];\n  }\n  let a = tri(n - 1);\n  let b = tri(n - 2);\n  let c = tri(n -\
    \ 3);\n  return [a[0]+b[0]+c[0], a[1]+b[1]+c[1], a[2]+b[2]+c[2], a[3]+b[3]+c[3]];\n\
    }\n", "  let result = [];\n  result[0] = result[1] = result[2] = 3;\n  \n  for(let\
    \ i = 3; i <= n; i++){\n    if(n % 2 === 0){\n      result[i] = result[i-1] +\
    \ result[i-2] + result[i+1];\n    }\n    else{\n      result[i] = result[i-1]\
    \ + result[i-2] + result[i+1] + result[i-3]; \n    }\n  }\n  return result;\n\
    }\n", "    let arr = [];\n    arr.push(n);\n    let sum = 1;\n    for (let i =\
    \ 2; i <= n; i++) {\n        sum = sum + i / 2;\n        arr.push(sum);\n    }\n\
    \    return arr;\n}\n", "  return [...Array(n + 1).keys()].map(i => tri(n - i)\
    \ + tri(n - i - 1) + tri(n - i - 2))\n}\n", "  var result = [];\n  result.push(3);\n\
    \  if (n % 2 == 0){\n    result.push(1 + n / 2);\n  } else {\n    var n = n -\
    \ 1;\n    result.push(tri(n-1) + tri(n-2) + tri(n+1));\n  }\n  return result;\n\
    }\n", "  const arr = [1,3,2];\n  let i = 0;\n  while(true){\n    arr[i] = arr[i\
    \ ? i-1 : arr.length-2];\n    i++;\n    if(i>arr.length-1){\n      i--;\n    \
    \  break;\n    }\n    if(!i%2){\n      arr[i+1] = arr[i] + arr[i+1];\n    }\n\
    \  }\n  return arr;\n}\n", "  let trilist = [];\n  let temp = [];\n  for(let i\
    \ = 1; i <= n; i++){\n    temp[i] = i;\n  }\n  for(let i = 3; i <= n; i++){\n\
    \    temp[i] = temp[i-1] + temp[i-2] + temp[i+1];\n    trilist.push(temp[i]);\n\
    \  }\n  return trilist;\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=java,arrays,for-loop,tribonacci,for-loop\
    \ |>\nHere is a simple recursive solution:\n<code>\npublic int[] fibo(){\n   \
    \ int n = 0;\n    int[] arr = new int[n+1];\n    arr[0] = arr[1] = arr[2] = 1;\n\
    \    int lastArr = 3;\n    arr[n] = (lastArr + lastArr/2 + lastArr/3) + lastArr/6;\n\
    \    return arr;\n}\n</code>\n<|/ a |>\n<| a |>\nYou can do it with while loop\
    \ and recursion. \nIn while loop you count the nth number \n<code>\n public int\
    \ tri(int n){\n    int count = 1;\n    while(count<n){\n      count++;\n    }\n\
    \    return count;\n }\n</code>\nThen you define recursive function \n<code>\n\
    \ public int tri(int n){\n    if(n<2){\n        return 1;\n    }\n    return tri(n-1)+tri(n-2);\n\
    \ }\n</code>\nThen you call this function in while loop\n<code>\n public int tri(int\
    \ n){\n    int sum = 0;\n    int count;\n    while(n>0){\n        sum = sum +\
    \ tri(n);\n        n--;\n    }\n    return sum;\n }\n</code>\n<|/ a tags=java,arrays,for-loop,tribonacci,for-loop\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\n\npublic class Tribonacci\
    \ {\n    public static void main(String[] args) {\n\n        Scanner sc = new\
    \ Scanner(System.in);\n        System.out.println(\"Enter the number n: \");\n\
    \        int n = sc.nextInt();\n        sc.close();\n        System.out.println(\"\
    The first \" + n + \" tribonacci numbers are: \");\n        displayTribonacci(n);\n\
    \    }\n\n    public static void displayTribonacci(int n) {\n        int[] list\
    \ = new int[n + 1];\n        System.out.println(\"The first \" + n + \" tribonacci\
    \ numbers are: \");\n        list[0] = 1;\n        list[1] = 2;\n        list[2]\
    \ = 3;\n        System.out.println(\"The first \" + n + \" tribonacci numbers\
    \ are: \");\n        for (int i = 2; i <= n; i++) {\n            list[i] = list[i",
  "    var result = [];\n    if (n === 0 || n === 1)\n        return [n];\n    if\
    \ (n % 2 === 0)\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    else\n        result.push(tri(n - 2) + tri(n - 1) + tri(n + 1));\n    return\
    \ result;\n}", "\tvar list = [];\n\tfor (var i = 1; i <= n; i++){\n\t\tvar currentTribonacci\
    \ = calcTribonacci(i);\n\t\tvar currentAddend = 0;\n\t\tif (i%2===1){\n\t\t\t\
    currentAddend = currentTribonacci + calcTribonacci(i-1);\n\t\t}\n\t\tlist.push(currentAddend);\n\
    \t}\n\treturn list;\n}", "\tif (n<2)return [];\n\tlet triArray=[1,2];\n\tlet counter=2;\n\
    \tfor (let i=3;i<=n;i++){\n\t\tcounter++;\n\t\ttriArray.push(triArray[triArray.length-1]+triArray[triArray.length-2]+triArray[triArray.length+1])\n\
    \t}\n\treturn triArray\n}", "    let arr = [];\n    for (let i = 1; i < n + 1;\
    \ i++){\n        arr.push((Math.floor(n / i) + (n % 2 !== 0)));\n    }\n    arr.push((Math.floor(n\
    \ / i) + (n % 2 === 0)));\n    return arr;\n}", "  if (n < 0) return [];\n  var\
    \ arr = [];\n  var first = (n+1)/2;\n  var second = first;\n  var third = first;\n\
    \  while (third < n) {\n    arr.push(first);\n    first++;\n    third++;\n  }\n\
    \  arr.push(first);\n  return arr;\n}\n", "  var result = []\n  for(var i = 1;\
    \ i < n; i++){\n    result.push(tri(i))\n  }\n  return result\n}\n", "    return\
    \ n > 1? tri(n - 1) + tri(n - 2) + tri(n + 1): [];\n}\n", "  var result = [];\n\
    \  if (n < 3) return [];\n  for(var i = 1; i<=n; i++){\n   result.push( i + (n-1)\
    \ + (n-2) );\n  }\n  return result;\n}\n", "\tif (n === 0) return [];\n\telse\
    \ if (n === 1) return [3, 2, 1];\n\telse if (n % 2 === 0) return [tri(n / 2)[0]\
    \ + 3, tri(n / 2)[1] + 3];\n\treturn tri(n - 1) + tri(n - 2) + tri(n - 3); \n\
    }\n", "    \n    function tri(){\n        if (n==0)\n            return 1;\n \
    \       if (n==1)\n            return 3;\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n    }\n    \n    return tri();\n}\n", "    let triArr = []\n\
    \    if (n == 1)\n        return [n, n, n]\n    triArr[0] = n\n    triArr[1] =\
    \ triArr[0] + triArr[1] - triArr[1]\n    triArr[2] = triArr[0] + triArr[1] + triArr[2]\n\
    \    triArr[triArr.length - 1] = triArr.slice(0,triArr.length - 1) + triArr.slice(triArr.length\
    \ - 2)\n    return triArr\n}", "  return (n>1)?[tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n) + tri(n - 1)]:\n           n==1 ? [n] : [];\n}\n",
  "    if(n==0) return [];\n    if(n==1) return [0];\n    var arr=[];\n    var arr1=[];\n\
    \    arr[0]=tri(n-1)+tri(n-2)+tri(n+1);\n    for(var i=1;i<arr.length;i++){\n\
    \        arr1=[];\n        for(var j=0;j<arr.length;j++){\n            arr1.push(arr[j]+arr[j+1]+arr[j-1]);\n\
    \        }\n        arr=arr1;\n    }\n    return arr;\n}\n", "  if (n < 3) {\n\
    \    return [];\n  }\n  var a = 1;\n  var b = 1;\n  var c = 1;\n  var result =\
    \ [];\n  for (var i = 3; i < n; i+=1) {\n    result.push(a);\n    a = b;\n   \
    \ b = c;\n    c = a + b;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=5 tags=javascript,algorithm,math,fibonacci\
    \ |>\n<| c |>\nThis works great for me. I just used a for loop instead of the\
    \ for each\n<|/ c |>\n<| c |>\nI think it would be better to have `result` declared\
    \ as an empty array at the top of the function.\n<|/ c |>\n<| c |>\nAwesome solution,\
    \ works perfectly and is also very elegant. Thanks!\n<|/ c |>\n<| c |>\nWhat about\
    \ `return [1, 1, 1];` ?\n<|/ c |>\n<| c |>\nNice, elegant solution. I would change\
    \ the loop to `for (var i = 2; i <= n; i+=2)` and return `result` instead.\n<|/\
    \ c |>\n<| a tags=javascript,algorithm,math,fibonacci |>\nI have written a code\
    \ snippet that will help you understand how this works\n<code>\nvar fib = function\
    \ (n) {\n\n    var current = 1;\n    var next = 1;\n    var previous = 1;\n  \
    \  var result = [];\n\n    for(var i = 0; i < n; i++) {\n        previous = current;\n\
    \        current = next;\n        next = (current + previous) % 10;\n        result.push(current);\n\
    \    }\n\n    return result;\n};\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is\
    \ a more elegant solution\n<|/ c |>\n<| c |>\nThis also worked for me. I modified\
    \ it a little bit but this worked for me.\n<|/ c |>\n<| a dscore=4 |>\nHere is\
    \ a simple solution that does not use recursion or loops. \n<code>\nvar fibonacci\
    \ = function (n) {\n    var nums = [1, 1, 1];\n    while (n < nums.length) nums.unshift(nums[nums.length-1]\
    \ + nums[nums.length-2]);\n    return nums;\n};\n</code>\n<|/ a tags=javascript,algorithm,math,fibonacci\
    \ |>\n<| c |>\nI like how this doesn't rely on recursion but rather does a calculation\
    \ by iterating through it.\n<|/ c |>\n<| a tags=javascript,algorithm,math,fibonacci\
    \ |>\nHere are two simple recursive solutions:\n<code>", "    let result = [];\n\
    \    let base = 3;\n    let addNum = 3;\n    let resultNum = 2;\n    \n    while\
    \ (n >= base){\n        if (n % 2 === 0){\n            result.push(addNum);\n\
    \            n = (n - addNum) / 2;\n            addNum = 3;\n            resultNum\
    \ += 2;\n        }\n        else if (n % 2 === 1){\n            result.push(resultNum);\n\
    \            n = (n - resultNum) / 2;\n            resultNum += 2;\n        }\n\
    \        else if (n % 2 === 0){\n            result.push(addNum);\n          \
    \  n = (n - addNum) / 2;\n            addNum += 3;\n            resultNum += 2;\n\
    \        }\n    }\n    return result.slice(0, n + 1);\n}\n", "\tvar result = [],\n\
    \t\ttri1 = [1,3,5,7,9],\n\t\ttri2 = [2,4,6,8,10];\n\n\tif(n%2 == 0){\n\t\tfor(var\
    \ i=0;i<tri1.length;i++){\n\t\t\tresult.push(tri1[i]);\n\t\t}\n\t\tfor(var i=0;i<tri2.length;i++){\n\
    \t\t\tresult.push(tri2[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tfor(var i=0;i<tri1.length;i++){\n\
    \t\tresult.push(tri1[i]);\n\t}\n\tfor(var i=0;i<tri2.length;i++){\n\t\tresult.push(tri2[i]);\n\
    \t}\n\treturn result;\n}", "\tvar arr = [];\n\t\n\tfor(var i=0;i<=n;i++){\n\t\t\
    if(n % 2 === 0){\n\t\t\tarr.push(i);\n\t\t\tn = n/2;\n\t\t}else{\n\t\t\tarr.push(tri(tri(n-1))\
    \ + tri(tri(n-2)));\n\t\t\tn = n+1;\n\t\t}\n\t}\n\t\n\treturn arr;\n}\n", "  let\
    \ arr = [1, 3, 2];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i-1] +\
    \ arr[i-2] + arr[i+1]);\n  }\n  return arr;\n}\n", "\tlet arr=[];\n\tif(n<=1){\n\
    \t\tarr.push(1);\n\t\treturn arr;\n\t}\n\tarr.push(tri(n-1)+tri(n-2))\n\tif(n%2==1){\n\
    \t\tarr.push(tri(n-1)+tri(n+1))\n\t}\n\treturn arr;\n}\n", "\tvar arr = [];\n\t\
    if(n % 2 === 0){\n\t\tarr.push(1);\n\t}\n\tfor(var i = 1; i <= n ; i++){\n\t\t\
    arr.push(tri(i - 1) + (tri(i - 2) + tri(i + 1)));\n\t}\n\treturn arr;\n}\n", "\t\
    if (n == 1) return [];\n\telse if (n == 2) return [1, 1];\n\telse if (n % 2 ==\
    \ 0) return tri(Math.floor(n / 2)) + tri(Math.floor(n / 2) + 1);\n\telse return\
    \ tri(Math.floor(n / 2)) + tri(Math.floor(n / 2) + 1) + [tri(Math.floor(n / 2)\
    \ + 2)];\n}\n", "  var result = [];\n  if(n == 0) return [];\n  if(n == 1) return\
    \ [0];\n  var x = n-1;\n  var y = n-1;\n  while(x--){\n    result.push(x + y);\n\
    \  }\n  x = n-2;\n  y = n-2;\n  while(x--){\n    result.push(x + y);\n  }\n  return\
    \ result;\n}\n", "    var result = [];\n    function getN(index,r){\n        if(r\
    \ === 0){\n            result.push(index);\n        }else{\n            getN(index+1,r-1);\n\
    \            getN(index+1,r-1);\n            getN(index+1,r-1);\n        }\n \
    \   }\n    getN(0,n);\n    return result;\n}", "    var arr = [];\n    for(var\
    \ i = 0; i<=n; i++){\n        if(n%2 === 0){\n            arr.push(3);\n     \
    \   }else{\n            arr.push(1 + n/2);\n        }\n    }\n    return arr;\n\
    }\n", "    let arr = [];\n    if(n % 2 == 1){\n        arr.push(3);\n        arr.push(1);\n\
    \    }\n    \n    for(let i = 2; i < n; i+=2){\n        arr.push(i+3);\n     \
    \   arr.push(i+1);\n    }\n    \n    return arr;\n}\n", "    let list = [];\n\
    \    if(n === 0){\n        list.push(0);\n    }\n    if(n === 1){\n        list.push(1);\n\
    \    }\n    if(n === 2){\n        list.push(2);\n    }\n    if(n % 2 === 0){\n\
    \        list.push(tri(n-1) + tri(n-2) + tri(n+1));\n    }\n    else {\n     \
    \   list.push(tri(n-1) + tri(n+1) + tri(n-2));\n    }\n    \n    return list;\n\
    }\n", "    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i%2 ===\
    \ 0){\n            arr.push(i);\n        }else{\n            arr.push(tri(i -\
    \ 1) + tri(i - 2) + tri(i + 1));\n        }\n    }\n    return arr;\n}\n", " \
    \ let arr = [];\n  \n  for (let i = 1; i < n; i+=1){\n    let j = n - 1;\n   \
    \ let k = n - 1;\n    \n    while (j > 0){\n      arr.push(k);\n      j -= 1;\n\
    \      k--;\n    }\n  }\n  return arr;\n}\n", "    var arr = [];\n    for(var\
    \ i=0;i<=n;i++){\n        arr.push(Math.trunc(Math.pow(3,(i/2))+Math.pow(Math.trunc(Math.pow(i+2,2))-1,2)));\n\
    \    }\n    arr.sort();\n    return arr;\n}\n", "    let list = [];\n    \n  \
    \  for(let i=0;i<n;i++){\n        let temp = [tri(tri(tri(i))),tri(i+1)];\n  \
    \      list.push(temp);\n    }\n    \n    return list;\n}\n", "    var n1 = n\
    \ + 1;\n    var n2 = n1 + 1;\n    var n3 = n2 + 1;\n    return [n1, n2, n3, n2\
    \ + n1];\n}\n", "  if (n < 0){\n    return 0;\n  }\n  if (n === 0){\n    return\
    \ [3];\n  }\n  if (n === 1){\n    return [1];\n  }\n\n  return [\n    tri(n -\
    \ 1) + tri(n - 2) + tri(n - 3), \n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n\
    \    tri(n - 1) + tri(n + 2) + tri(n - 3), \n    tri(n - 1) + tri(n + 2) + tri(n\
    \ + 1)\n  ];\n}\n", "\tif (n < 0) return [];\n\tif (n === 0 || n === 1) return\
    \ [n, n];\n\treturn [tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 2)];\n}\n",
  "    if(n === 0) return [3,1,1,0];\n    if(n === 1) return [1,3];\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    const fibo = n => {\n    let a = 0\n    let b = 1 \n    \n    for(let i=2; i <=\
    \ n; i++) {\n        let c = a + b\n        \n        a = b\n        b = c\n \
    \   }\n    \n    return a\n}\n", "  if (n <= 2)\n    return [n, n+1]\n  else {\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n +1)\n  }\n}\n", "\tvar arr = [];\n\
    \tvar last = [];\n\tvar curr = last = [n];\n\n\twhile(curr.length < n+1){\n\t\t\
    last.push(curr[curr.length-1]);\n\t\tcurr.push((curr[curr.length-2] + curr[curr.length-1])/2);\n\
    \t}\n\treturn arr.concat(last);\n}\n", "  let arr = [];\n  for(let i = 1; i <=\
    \ n; i+=2) arr.push(i); \n  for(let i = 3; i <= n; i+=2) arr.push(i+1);\n  return\
    \ arr;\n}", "\tif(!n || n > 9){\n\t\tthrow new Error('n must be an integer from\
    \ 0 to 9');\n\t}\n\tif(n === 0){\n\t\treturn [];\n\t}\n\tif(n === 1){\n\t\treturn\
    \ [3];\n\t}\n\treturn [tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 2) + tri(n\
    \ - 1)];\n}\n", "    if(n===0) return [];\n    if(n==1) return [1];\n    if(n==2)\
    \ return [1,2,1];\n    if(n<0) return null;\n    if(n%2==0) return tri(n-1) +\
    \ tri(n-2)+ tri(n-1);\n    else return tri(n-1) + tri(n-2)+ tri(n-2) + tri(n-1);\n\
    }\n</code>\n<|/ a tags=algorithm,fibonacci,javascript |>\n<| a dscore=4 |>\nFor\
    \ those who want to learn how to do it in javascript, here's the code:\n<code>",
  "  let list = [1, 3];\n  if(n===0) return list;\n  if(n%2===0) list.push(list[1]+list[2]);\n\
    \  if(n%2!==0) list.push(list[list[1]+list[2]]+list[3]);\n  return list;\n}\n",
  "\tif(n<=0){\n\t\treturn [];\n\t}\n\tvar arr=[];\n\tarr[0]=1;\n\tarr[1]=3;\n\tfor(var\
    \ i=2;i<n+1;i++){\n\t\tarr[i]=arr[i-1]+arr[i-2]+arr[i+1];\n\t}\n\treturn arr;\n\
    }\n", "\tlet res = [];\n\tlet triNum = 1;\n\tlet triNum2 = 1;\n\tlet triNum3 =\
    \ 1;\n\tlet triNum4 = 1;\n\tlet triNum5 = 1;\n\tlet triNum6 = 1;\n\tfor(let i\
    \ = 2; i <= n; i++){\n\t\tres.push(triNum);\n\t\tif(i%2==0){\n\t\t\ttriNum2 =\
    \ triNum+triNum2+triNum3;\n\t\t\ttriNum3 = triNum2+triNum2+triNum4;\n\t\t\ttriNum4\
    \ = triNum3+triNum3+triNum5;\n\t\t\ttriNum5 = triNum4+triNum4+triNum6;\n\t\t\t\
    triNum6 = triNum5+triNum5+triNum;\n\t\t}\n\t\telse{\n\t\t\ttriNum2 = triNum+triNum2+triNum4;\n\
    \t\t\ttriNum3 = triNum2+triNum2+triNum6;\n\t\t\ttriNum4 = triNum3+triNum3+triNum5;\n\
    \t\t\ttriNum5 = triNum4+triNum4+triNum3;\n\t\t\ttriNum6 = triNum5+triNum5+triNum2;\n\
    \t\t}\n\t}\n\treturn res;\n}\n</cell>\n<cell>", "  return Array.from({length:n+1},(_,i)=>i+1).map((item,index)=>index%2===0?item:(index+1)%2===0?(item+item+item)%2:item+item);\n\
    }\n", "  var result = [];\n  for(var i = 1; i <= n; i++){\n    result.push((i%2\
    \ === 0 && i!==1)? i - 1 + i : i);\n  }\n  return result;\n}\n", "  let firstNumberOfTribonacciSequence\
    \ = [1];\n  while(firstNumberOfTribonacciSequence.length < n + 2){\n    firstNumberOfTribonacciSequence.push(firstNumberOfTribonacciSequence[firstNumberOfTribonacciSequence.length-1]\
    \ + firstNumberOfTribonacciSequence[firstNumberOfTribonacciSequence.length-2]\
    \ + firstNumberOfTribonacciSequence[firstNumberOfTribonacciSequence.length-1]);\n\
    \  }\n  return firstNumberOfTribonacciSequence;\n}\n", "  let arr = [];\n  for\
    \ (let i = 1; i <= n; i++){\n    arr.push(i + tri(i - 1) + tri(i - 2));\n  }\n\
    \  return arr;\n}\n", "  var f = [1,2];\n  for(var i = 3; i <= n; i++){\n    f.push(f[f[f[0]]+f[f[1]]+f[f[2]]]);\n\
    \  }\n  return f;\n}\n", "  if(n <= 1) return [];\n  return [ 1 + n/2, n%2 ? tri(n\
    \ - 1) + tri(n - 2) : tri(n - 1) + tri(n - 2) + tri(n + 1) ];\n}", "  var result\
    \ = [];\n  for(var i = 0; i <= n; i++){\n    result.push((i%2 == 0)? 3+i/2: (i%2\
    \ === 1)? 3+(i-1)/2+i/2: (i%2 === 2)? 3+(i-2)/2: i+1);\n  }\n  return result;\n\
    }\n", "  if(n<1) return [];\n  if(n % 2==0) return [tri(n - 1) + tri(n - 2)];\n\
    \  return [tri(n - 1), tri(n - 2) + tri(n + 1)]\n}", "    \n    var temp = [];\n\
    \    for(var i = 0; i<n+1; i++){\n        temp.push(1);\n    }\n    \n    for(var\
    \ i = 1; i< n; i++){\n        temp[i] = temp[i-1] + temp[i-2];\n    }\n    \n\
    \    return temp;\n}\n", "  var arr = [];\n  for(var i = 1; i <= n; i++) {\n \
    \   var s = n + i / 2;\n    if(i % 2 == 0){\n      arr.push(s);\n    } else {\n\
    \      arr.push(tri(s));\n    }\n  }\n  return arr;\n}", "  if(n === 1) return\
    \ [n];\n  var a = [1, n-2];\n  if(n%2) a[1] = a[1] + a[1] / 2;\n  return a.concat(tri(n\
    \ - 1));\n}\n\nvar tri = tri(3);", "  let arr = [];\n  let pre = 1;\n  for(let\
    \ i = 1; i < n + 1; i++){\n    if(i === 3){\n      arr.push(pre);\n    }else{\n\
    \      arr.push(pre = pre+pre+i);\n    }\n  }\n  return arr;\n}\n", "  if(n<=0){\n\
    \    return [];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n}\n",
  "  var nums = [];\n  var num1 = 1;\n  var num2 = 1;\n  var num3 = 1;\n  for (var\
    \ i = 1; i <= n; i++) {\n    nums.push(num1);\n    num1 += num2;\n    num2 +=\
    \ num3;\n    num3 += num1;\n  }\n  return nums;\n}\n", "  if (n < 2){\n    return\
    \ [];\n  }\n  return [n,tri(n-1),tri(n-2),tri(n-3)];\n}\n", "\tlet result = [];\n\
    \tif (n <= 0) return result;\n\tif (n % 2 == 0) return [tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)];\n\treturn [tri(n - 1) + tri(n), tri(n)]\n}\n", "  if (n<=0) return\
    \ [];\n  if (n==1) return [1];\n  return tri(n-1) + [tri(n - 1)[0]] + tri(n -\
    \ 2);\n}\n", "\tlet result = []\n\tfor(let i=0;i<n;i++){\n\t\tresult.push(tri(i\
    \ - 1)+tri(i - 2)+tri(i + 1))\n\t}\n\treturn result\n}", "  let res = [];\n  let\
    \ a = 1;\n  let b = 1;\n  for (let i = 2; i < n; i++){\n    res.push(a);\n   \
    \ res.push(b);\n    a = a + b;\n    b = a - b;\n  }\n  return res.concat([a]);\n\
    }\n", "\tif(n<0) return [];\n\tif(n==1) return [3];\n\tvar result=[n];\n\tvar\
    \ current=1;\n\tfor(var i=2;i<=n;i++){\n\t\tresult.push(current);\n\t\tcurrent+=n/i\n\
    \t}\n\treturn result;\n}\n", "  return [ tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ ];\n}\n", "\tif (n === 0 || n === 1)\n\t\treturn [];\n\telse if (n % 2 === 0){\n\
    \t\tvar n1 = tri(n / 2);\n\t\tvar n2 = tri(n / 2);\n\t\treturn [n1, n2, n1 + n2,\
    \ n1 + n2 + n2];\n\t}\n\telse{\n\t\tvar n1 = tri(n - 1) + tri(n - 2) + tri(n -1);\n\
    \t\tvar n2 = tri(n - 1) + tri(n - 2) + tri(n -1);\n\t\treturn [n1, n2, n1 + n2,\
    \ n1 + n2 + n2];\n\t}\n}", "  if(n<=0) return [];\n  var arr = [];\n  if(n%2==0)\
    \ arr.push(n);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n\
    }", "  if(n === 0){\n    return [];\n  }\n  if(n === 1){\n    return [1,3];\n\
    \  }\n  return [n,(tri(n-1) + tri(n-2))];\n}\n", "    let list = [1,3];\n    for(let\
    \ i=1; i<=n; i++){\n        let j=1;\n        while(j<i){\n            j++;\n\
    \        }\n        list.push(list[i-1]+list[j-1]);\n    }\n    return list;\n\
    }\n", "    let arr = [];\n    for(let i=1; i<=n; i++){\n        arr.push(i);\n\
    \    }\n    return arr;\n}\n", "  var result = [];\n  if (n === 1 || n === 2){\n\
    \      result.push(1);\n  }\n  if (n === 1 || n % 2 === 0){\n      result.push(1);\n\
    \      result.push(n % 2);\n  }\n  if (n % 2 === 0){\n      result.push(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  result.push(tri(n + 1) + tri(n));\n  return result;\n\
    }", "    let arr = [];\n    let num1 = (n & 1);\n    let num2 = n >> 1;\n    let\
    \ num3 = num1 + num2;\n\n    if(num2 === 0 && num1 !== 0){\n        arr = arr\
    \ + [num3];\n        return arr;\n    } else {\n        if(num3 === 0){\n    \
    \        arr = arr + [num1];\n            return arr;\n        } else {\n    \
    \        arr = arr + [num1] + tri(n - 1) + tri(n - 2) + tri(num3 + 1); \n    \
    \        return arr;\n        }\n    }\n}\n", "  var arr = [];\n  if(n % 2 ===\
    \ 0){\n    arr.push(tri(tri(tri(n-1))));\n  }else{\n    arr.push(tri(tri(n-1)));\n\
    \    arr.push(tri(tri(n-2)));\n  }\n  return arr;\n}", "  let arr = []\n  if (n\
    \ === 0) return arr\n  if (n === 1) return [n]\n  if (n === 2) return arr.concat([1,2])\n\
    \  arr.push(tri(n - 1)[0] + tri(n - 2)[0])\n  arr.push(tri(n - 1)[1] + tri(n -\
    \ 2)[1])\n  if (n % 2 === 1) arr.push(tri(n + 2)[2])\n  return arr\n}\n", "  //\
    \ base case\n  if(n === 0)\n    return []\n  // If n is even, return two sequences\
    \ recursively\n  if(n % 2 === 0)\n    return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1)\n  // If n is odd, return three sequences recursively\n  return tri(n - 3)\
    \ + tri(n - 2) + tri(n - 1)\n}\n", "    return (n%2==0)?[(n>=1)?tri(n - 1) + tri(n\
    \ - 2):3, tri(n - 2) + tri(n - 1)]:\n                  (n>=1)?[tri(n - 2) + tri(n\
    \ - 1), tri(n - 1) + tri(n + 1)]:[];\n}\n", "    let arr = [3,1];\n    let prev\
    \ = 0;\n    let current = 1;\n    let sum = 0;\n\n    for(let i = 2; i < n; i++){\n\
    \        prev += current;\n        current = sum;\n        sum = prev + current;\n\
    \        arr.push(sum);\n    }\n\n    return arr;\n}\n", "  var result = [];\n\
    \  var i = 0;\n  for(; i<=n; i++){\n    var temp = tri(n-i);\n    result.push(temp[i]);\n\
    \    result.push(temp[i+1]);\n    result.push(temp[i+2]);\n  }\n  return result;\n\
    }\n", "    return Array.from({ length: n+1 }, (v, i) => i === 0 || i === 1 ? 3\
    \ : (2 * i));\n}\n", "    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n\
    \    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    for(let i = 0;\
    \ i<n; i++){\n        if(i % 2 === 0){\n            arr.push(arr1.push(arr2.push(arr3.push(arr4.push(arr5\
    \ = [])))));\n        }\n        else{\n            arr.push(arr1.push(arr2.push(arr3.push(arr4.push(arr5\
    \ = [])))));\n        }\n    }\n    return arr;\n}\n", "    let arr = []\n   \
    \ arr[0] = 3\n    arr[1] = arr[0] + arr[1]\n    if(n % 2 == 0){\n        arr[2]\
    \ = arr[1] + arr[2]\n    }\n    return arr[n]\n}", "  if (n == 1) return [1];\n\
    \  \n  var newList = [];\n  \n  for(var i = 2; i <= n; i++){\n    newList.push(tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1));\n  }\n  return newList;\n}", "  const res =\
    \ [];\n  if (n === 0 || n === 1){\n    res.push(1);\n    return res;\n  }\n  if\
    \ (n % 2 === 0){\n    const a = tri(n-2);\n    a.push(2);\n    res.push(a);\n\
    \  } else {\n    const a = tri(n-2);\n    a.push(2);\n    res.push(a);\n    const\
    \ b = tri(n-1);\n    b.push(1);\n    res.push(b);\n  }\n  return res;\n}\n", "\t\
    return new Array(1,n+1).fill().map((_,i)=>i+(n-i-1)*2+1).slice(0,n+1);\n}\n",
  "  if(n < 1) return [];\n  var tris = [];\n  for(var i=0;i<n;i++){\n    if(i % 2\
    \ == 0){\n      tris.push(tris[i+1] + tris[i+2]);\n    }else{\n      tris.push(tris[i+2]\
    \ + tris[i+1]);\n    }\n  }\n  return tris;\n}\n", "  if(n<=2) return n\n  return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n}", "  if (n < 2) return [];\n  var a\
    \ = 1;\n  var b = 1;\n  var c = 1;\n  var nums = [];\n  var i;\n  for (i = 1;\
    \ i <= n; i++){\n    nums.push(a);\n    nums.push(b);\n    c = a + b + c;\n  \
    \  a = b;\n    b = c;\n  }\n  return nums;\n}\n", "  if(n===0) return []; \n \
    \ if(n==1) return [1];\n  return [tri(n-1)+tri(n-2), tri(n-1)+tri(n-2)+tri(n+1)];\n\
    }", "  let result = []\n  if(n == 0){\n    return result\n  }\n  if(n == 1){\n\
    \    return [[1,3,1]]\n  }\n  let list = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  result.push(list[0])\n  return result\n}\n\nmodule.exports = tri</code>\n\n\
    <code>", "  if(n<=1){\n    return [];\n  }\n  return tri(n-1) + tri(n - 2) + tri(n\
    \ + 1);\n}\n", "  var result = [];\n  for(var i = 1, x = 1; i <= n; i++){\n  \
    \  result.push(x);\n    x = x + i/2;\n  }\n  return result;\n}", "  return Array(n+1).fill(1).reduce(\
    \ (a, _, i) => a + i*(i+1)/2, 1);\n}\n", "  if(n === 0 || n === 1){\n    return\
    \ [];\n  }\n  if(n === 2){\n    return [1];\n  }\n  if(n === 3){\n    return [1,3];\n\
    \  }\n  var result = [];\n  for(var i = 0; i < n; i++){\n    result.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1));\n  }\n  return result;\n}\n", "  let fibonacciArray\
    \ = [];\n  let temp = 1;\n  let temp1 = 1;\n  let temp2 = 1;\n  let temp3 = 1;\n\
    \n  if(n===0) return 0;\n  if(n===1) return 1;\n  if(n===2) return 2;\n\n  if(n%2===0)\
    \ {\n    temp=1;\n    temp1=0;\n    temp2=1;\n    temp3=0;\n  }\n  else if(n%2===1)\
    \ {\n    temp=0;\n    temp1=1;\n    temp2=1;\n    temp3=0;\n  }\n  else {\n  \
    \  temp=1;\n    temp1=1;\n    temp2=1;\n    temp3=0;\n  }\n\n  fibonacciArray.push(temp);\n\
    \  fibonacciArray.push(temp1);\n  fibonacciArray.push(temp2);\n  fibonacciArray.push(temp3);\n\
    \n  for(let i = 4; i < n; i++){\n    temp1 = fibonacciArray[i-1] + fibonacciArray[i-2];\n\
    \    temp2 = fibonacciArray[i-3];\n    temp3 = fibonacciArray[i-1];\n\n    fibonacciArray[i-1]\
    \ = temp1;\n    fibonacciArray[i-2] = temp2;\n    fibonacciArray[i-3] = temp3;\n\
    \n  }\n\n  return fibonacciArray;\n}\n", "    var list = [];\n    \n    for(var\
    \ i = 0; i<n; i++){\n        list.push(1);\n    }\n    \n    if(n%2===0){\n  \
    \      list[n] = tri(n-1) + tri(n-2) + tri(n+1);\n    }\n    else{\n        list[n]\
    \ = tri(n-1) + tri(n-2);\n    }\n    \n    return list;\n}\n", "  return [...Array(1+n).keys()].slice(0,n).reduce((res,x)=>res+(x*(x+1)/2),1);\n\
    }", "    var a = 1 + n,\n        b = 3 + n,\n        c = a + b,\n        arr =\
    \ [a, c, b, n];\n    return arr;\n}\n", "  if(n === 0)\n    return [];\n  if((n\
    \ & 1) === 0)\n    return [((n / 2) | ((n / 2) & 1)) + 1, ((n / 2) | ((n / 2)\
    \ & 1)) + 1, (n / 2)];\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n",
  "    var arr = []\n    if(n<1) return arr\n    for(var i=1; i<=n; i++){\n      \
    \  arr.push((i+1)*(i+2)/3)\n    }\n    return arr\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nvar numbers = [];\nvar num1 = 1;\nvar num2 = 1;\nvar n\
    \ = 10; //n will be the length of the array\nfor(var i = 1 ; i <= n ; i++){\n\
    \    numbers[i] = num1;\n    num1 = num2;\n    num2 = num1 + num2;\n}\n</code>\n\
    <|/ a tags=javascript,fibonacci dscore=0 |>\n<| c |>\nThis code is really confusing.\
    \ You have no explanation about what you did there.\n<|/ c |>\n<| c |>\nWhile\
    \ this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| c |>\nWhile this code snippet may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a tags=javascript,fibonacci dscore=0 |>\n<code>\n\
    const fibonacci = (n) => {\n  let a = 0\n  let b = 1 \n  let result = [];\n  let\
    \ i = 0\n  while (i<n){\n    result.push(a);\n    a = b;\n    b = a + b;\n   \
    \ i++\n  }\n  return result\n}\n</code>\n<|/ a |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explan", "  let result = [];\n  while(n > 0){\n    if(n % 2 === 0){\n      result.push(3);\n\
    \      n -= 1;\n    }\n    else {\n      result.push(...[tri(n - 2) + tri(n -\
    \ 1)]);\n      n -= 2;\n    }\n  }\n  return result;\n}\n\nconst tst = tri(5);",
  "\tlet first = [1, 2]\n\tlet second = [3, 4]\n\tlet third = [5, 6]\n\tlet result\
    \ = []\n\n\tif(n === 1) return first\n\tif(n === 2) return second\n\t\n\tlet tri_tri_tri_tri_tri_tri\
    \ = third\n\n\tif(n % 2 === 0) tri_tri_tri_tri_tri_tri = third.concat(second)\n\
    \telse tri_tri_tri_tri_tri_tri = second.concat(first).concat(third)\n\n\tlet tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri\
    \ = tri_tri_tri_tri_tri_tri_tri_tri.concat(first)\n\n\tfor(let i = 3; i < n; i++){\n\
    \t\tlet tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri = tri_tri_tri_tri_tri_tri_tri_tri.concat(first)\n\
    \t}\n\n\treturn tri_tri_tri_tri_tri_tri_tri_tri_tri_tri_tri.concat(second)\n}\n",
  "  if(n===0)return [];\n  if(n<=1)return [n];\n  return [tri(tri(n-1)+tri(n-2))].concat(tri(n+1))\n\
    }\n", "\tif(n<=0){\n\t\treturn null;\n\t}\n\tlet temp = [];\n\ttemp.push(1);\n\
    \ttemp.push(2);\n\tif(n%2===0){\n\t\ttemp.push(3);\n\t}else{\n\t\ttemp.push(3);\n\
    \t\ttemp.push(1);\n\t\ttemp.push(2);\n\t}\n\tfor(let i=3;i<n+1;i++){\n\t\ttemp.push(temp[i-1]+temp[i-2]+temp[i+1])\n\
    \t}\n\treturn temp;\n}\n", "  // If n is even, return first tri(n / 2) + 1, starting\
    \ from tri(1) = 3.\n  if (n % 2 == 0){\n    var firstTri = tri(n / 2);\n    var\
    \ nextTri = tri(n / 2) + 1;\n    return firstTri.concat(nextTri);\n  }\n  // If\
    \ n is odd, return tri(n / 2) concatenated with tri(n / 2) + 1. \n  else{\n  \
    \  var firstTri = tri(n / 2);\n    var nextTri = tri(n / 2);\n    return firstTri.concat(nextTri);\n\
    \  }\n}\n", "    if(n === 0 || n === 1){\n        return [n];\n    }\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
