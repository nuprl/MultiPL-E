name: HumanEval_117_select_words
language: js
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
  little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
  , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
  Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
  Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
  a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
completions: ["  if (s == \"\") return [];\n  let words = s.split(' ').sort();\n \
    \ let count = 0;\n  let index = 0;\n  while(words.length > 0 ){\n    count = countConsonants(words[index]);\n\
    \    if (count === n){\n      return words.slice(0,index);\n    }\n    index++;\n\
    \  }\n  return [];\n}\n", "    // Convert n to a string and remove all non-letters\
    \ and convert to lowercase\n    var n = n.toString();\n    var regex = new RegExp(\"\
    [^a-z ]\");\n    n = n.toLowerCase();\n    \n    // Split on spaces to get an\
    \ array of words\n    var words = s.split(\" \");\n    \n    // Return an empty\
    \ list if there are no words\n    if(words.length === 0){\n        return [];\n\
    \    }\n    \n    // Return an array of words that contain the specified number\
    \ of consonants.\n    // Keep track of the current word being examined by pushing\
    \ the current \n    // word onto the list of words examined so far.\n    var result\
    \ = [];\n    var curr = \"\";\n    for(var i = 0; i < words.length; i++){\n  \
    \      \n        // If the current word contains n consonants then push it to\
    \ result\n        var word = words[i];\n        if(word.indexOf(n) !== -1){\n\
    \            result.push(curr);\n            curr = word;\n        }\n       \
    \ // Otherwise, increment the current word counter\n        else {\n         \
    \   curr += \" \" + word;\n        }\n    }\n    \n    // The last word is the\
    \ remaining word(s)\n    result.push(curr);\n    \n    // Return the result as\
    \ an array\n    return result;\n}\n", "  if (s.length === 0) {\n    return [];\n\
    \  }\n  if (n === 1) {\n    return [s];\n  }\n  let arr = [];\n  for (let i =\
    \ 0; i < s.length; i++){\n    let c = s[i];\n    if (c === \"a\" || c === \"e\"\
    \ || c === \"i\" || c === \"o\" || c === \"u\"){\n      arr.push(s[i]);\n    }\n\
    \  }\n  let ans = [];\n  for (let j = 0; j < arr.length; j++){\n    if (arr.indexOf(arr[j])\
    \ === n-1){\n      ans.push(arr[j]);\n    }\n  }\n  return ans;\n}\n", "    var\
    \ results = [];\n    for(var i = 0, len = s.length; i < len; i++){\n        var\
    \ c = s.charAt(i);\n        var word = s.substring(i);\n        if(c == '')\n\
    \            results.push([]);\n        else{\n            if(n <= 0) break;\n\
    \            else{\n                if(words.indexOf(word) >= 0)\n           \
    \         results.push(word);\n                else\n                    select_words(word,\
    \ n-1);\n            }\n        }\n    }\n    return results;\n}\n", "    \n \
    \   let arr = [];\n    \n    if(s.length == 0){\n        return arr;\n    }\n\
    \    \n    let count = 0;\n    \n    let start = 0;\n    \n    for(let i = s.length\
    \ - 1; i > start; i--){\n        \n        if(s[i] === \" \" && count > n){\n\
    \            \n            arr.unshift(s.substring(start, i));\n            \n\
    \            start = i + 1;\n            \n            count--;\n        }\n \
    \       \n        else if(s[i] === \" \"){\n            \n            count++;\n\
    \        }\n        \n    }\n    \n    arr.unshift(s.substring(start));\n    \n\
    \    return arr;\n}\n", "\t// Your code here\n\tvar ret = [];\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar pos = s.indexOf(\" \");\n\t\tif(pos!=-1){\n\t\t\t\
    var sLeft = s.substring(0,pos);\n\t\t\tvar sRight = s.substring(pos);\n\t\t\t\
    if(sLeft.indexOf(\" \") == -1){\n\t\t\t\tret.push(sLeft);\n\t\t\t}\n\t\t\tif(sRight.indexOf(\"\
    \ \") == -1){\n\t\t\t\tret.push(sRight);\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n\
    }\n", "    \n}\n</cell>\n<cell>\nvar myArray = [\"Mary had a little lamb\", \"\
    \ Mary had a little lamb\"]\nvar myArray2 = [\" Mary had a little lamb\", \"Mary\
    \ had a little lamb\"]", "    return s.split(\" \").filter(function(x){ return\
    \ n.toString().split(x).length == n; }).map(function(x){ return x.split(\" \"\
    ).join(\"\"); }); \n}\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| a |>\n\
    The answer provided by is correct and should be marked as the correct answer.\
    \ Here is another solution which I used recently to solve this problem.\n<code>",
  "\tvar list = s.split(' ');\n\tlist.sort(function(a, b){\n\t\treturn a.length -\
    \ b.length;\n\t});\n\tvar result = [];\n\tfor(var i = 0; i < list.length; i++){\n\
    \t\tif(list[i].match(/[^aeiou]/ig)){\n\t\t\tif(list[i].length == n){\n\t\t\t\t\
    result.push(list[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "    let res\
    \ = '';\n    for (let i=0; i<s.length; i++){\n        let re = select_word(s,i);\n\
    \        if (re.length > n) {\n            for(let j=0; j<re.length; j++){\n \
    \               if (j >= n){\n                    res += re.join(\"\");\n    \
    \                break;\n                }\n            }\n        }\n    }\n\
    \    return res;\n}\n", "}\n", "  var words= [];\n  var i, c, j;\n  if (s.length\
    \ === 0) return words;\n  for (i = 0; i < s.length; i++){\n    c= s.charAt(i);\n\
    \    if (c === ' ' || c === '' || c === ','){\n      for (j=i; j < s.length; j++){\n\
    \        c= s.charAt(j);\n        if (c === ' ' || c === '' || c === ','){\n \
    \         words.unshift(s.substring(i,j+1));\n          i= j;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return words.slice(0, n);\n}\n\n", "  var words\
    \ = [];\n  var current_word = \"\";\n  var count = 0;\n  for(var i =0; i<s.length;\
    \ i++){\n    count++;\n    if(s.charAt(i) == \" \"){\n      if(current_word !=\
    \ \"\"){\n        words.push(current_word);\n        current_word = \"\";\n  \
    \    }\n    }\n    if(count == n){\n      if(current_word != \"\"){\n        words.push(current_word);\n\
    \      }\n      count = 0;\n    }else{\n      current_word += s.charAt(i);\n \
    \   }\n  }\n  return words;\n}\n", "\tvar res = [];\n\tvar vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n\tfor(var i = 0, length = s.length; i < length; i++){\n\t\t\
    var cur = s[i];\n\t\tif(vowels.indexOf(cur) != -1){\n\t\t\tres.push(cur);\n\t\t\
    \tfor(var j = i, k = 0; k < n; j++, k++){\n\t\t\t\tif(s[j] === 'a' || s[j] ===\
    \ 'e' || s[j] === 'i' || s[j] === 'o' || s[j] === 'u'){\n\t\t\t\t\tres.push(s.substr(j,\
    \ k));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", " \
    \ let words = [];\n  for (let i = 0; i < s.length; i++){\n    let char = s[i];\n\
    \    for (let j = 1; j < n; j++){\n      if (char != s[j]){\n        break;\n\
    \      }\n      else{\n        words.push(char);\n        s.length--;\n      \
    \  break;\n      }\n    }\n  }\n  return words;\n}\n", "  if (s.length == 0) {\n\
    \    return [];\n  }\n  var words = [];\n  for (var i = 0; i < s.length; i++){\n\
    \    if (s.charAt(i) == \" \"){\n      continue;\n    }\n    \n    var ls = [];\n\
    \    for (var j = 0; j < n; j++){\n      if (s.charAt(i) == \" \" || s.charAt(i)\
    \ == \".\" || s.charAt(i) == \"-\" || s.charAt(i) == \"\"){\n        continue;\n\
    \      }\n      if (s.charAt(i) == s.charAt(i+j)){\n        ls.push(s.charAt(i));\n\
    \      }\n      \n    }\n    if (ls.length == n){\n      words.push(ls.join(\"\
    \"));\n    }\n  }\n  return words;\n}\n", "\tvar ans = [];\n\tvar s = s.replace(/\\\
    W/g, '');\n\tif(s.length == 0){\n\t\treturn ans;\n\t}\n\tvar arr = [], i=0, l\
    \ = s.length, word, flag = false;\n\tfor(i=0;i<l;i++){\n\t\tword = s[i];\n\t\t\
    if(word.length == 1){\n\t\t\tarr.push(word);\n\t\t}\n\t\tif(arr[i].indexOf(word)\
    \ == -1){\n\t\t\tflag = true;\n\t\t}\n\t}\n\tif(!flag){\n\t\treturn ans;\n\t}\n\
    \tvar l = arr.length;\n\tfor(i=0;i<l;i++){\n\t\tif(!contains(arr[i], s, n)){\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tfor(i=l-1;i>=0;i--){\n\t\tif(!contains(arr[i], s,\
    \ n)){\n\t\t\tans.push(arr[i]);\n\t\t}\n\t}\n\treturn ans;\n}\n", "    return\
    \ \n}\n", "\tlet list = \"\";\n\tfor (let i=0; i<s.length; i++){\n\t\tif (s.charAt(i)\
    \ === \" \" || s.charAt(i) === \".\" || s.charAt(i) === \",\"){\n\t\t\tlet temp\
    \ = s.split(s.charAt(i));\n\t\t\tif (list.length >= n){\n\t\t\t\tfor (let i=0;\
    \ i<temp.length; i++){\n\t\t\t\t\tlist += temp[i];\n\t\t\t\t\tlist += \" \";\n\
    \t\t\t\t}\n\t\t\t\tlist = list.trim();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return list.trim();\n}\n", "\tvar words = [];\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tvar word = s[i];\n\t\tvar count = select_word_count(word, n);\n\t\tif(count==0)\
    \ words.push(word);\n\t}\n\treturn words;\n}", "}\n", "    if (s.length===0) return\
    \ [];\n    let result=[]\n    for (const w of s) {\n        let r = [];\n    \
    \    let i=0;\n        while (i<n-1) {\n            if (w.match(new RegExp(\"\
    [bcdfghjklmnpqrstvwxyz]*\"+s[i]+\"[bcdfghjklmnpqrstvwxyz]*\"))) {\n          \
    \      r.push(w);\n                i++;\n            }\n            else i++;\n\
    \        }\n        if (r.length>0) result.push(r.join(''));\n    }\n    return\
    \ result\n}", "  const list = select_words(s,0,n)\n  const result = []\n  for\
    \ (let i=0;i<list.length;i++){\n    if (result.includes(list[i])) continue\n \
    \   result.push(list[i])\n  }\n  return result\n}\n", "  let words = [];\n  let\
    \ index = 0;\n  while(index < s.length){\n    let temp = s.substr(index, n);\n\
    \    if(temp.match(/(\\s)/)){\n      let temp1 = temp.split(/(?=\\s)/);\n    \
    \  for(let j = 0; j < temp1.length; j++){\n        if(temp1[j] !== \"\"){\n  \
    \        words.push(temp1[j]);\n        }\n      }\n    }\n    index++;\n  }\n\
    \  return words;\n}\n", "  \n};\n</cell>\n<text>\nQ6.4 (15 points)\nGiven a string\
    \ s consisting of lowercase English letters, reverse the string. \nFor example,\
    \ suppose that the string s is \"hello\", then the function should return \"olleh\"\
    . \nWrite a function that returns a string consisting of the reversed string.\n\
    \nIf the string s is empty then the function should return an empty string.\n\n\
    \n</text>\n<cell>", "\tn = parseInt(n);\n\tif(s === \"\" || isNaN(s)){\n\t\treturn\
    \ [];\n\t}\n\treturn s.split(\" \").filter(word => {\n\t\tlet count = 0;\n\t\t\
    for(let i=0; i<word.length; i++){\n\t\t\tcount += word.charCodeAt(i);\n\t\t}\n\
    \t\treturn (count % n === 0) ? true : false;\n\t});\n}\n", "  let words = [];\n\
    \  let temp = \"\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s.charAt(i) == \" \"){\n      if (s.length == count){\n        words.push(temp);\n\
    \        temp = \"\";\n        count = 0;\n      }\n      else {\n        temp\
    \ += s.charAt(i);\n        count ++;\n      }\n    }\n    else {\n      if (count\
    \ != n){\n        temp += s.charAt(i);\n        count++;\n      }\n      else\
    \ {\n        words.push(temp);\n        temp = \"\";\n        count = 0;\n   \
    \   }\n    }\n  }\n  if (count != n){\n    words.push(temp);\n  }\n  return words;\n\
    }\n</code>\nThe above code takes O(n) time and O(n) space because we are storing\
    \ and comparing each letter in the string and in the worst case when n is even\
    \ the program will run in O(n^2) time if the input string is empty and in O(1)\
    \ space if the input string contains only spaces/letters.\nFor n even and for\
    \ string with spaces the time complexity is O(n^2) but in the worst case scenario\
    \ the time complexity will be O(n).\nThis solution works perfectly for strings\
    \ with spaces or letters but fails when the input string is empty and hence we\
    \ add an additional check at the beginning of the function as follows:\n<code>",
  "  var lst = [];\n  var i;\n  if(s === ''){\n    return lst;\n  }\n  for(i = 0;\
    \ i < s.length; i++){\n    if(s[i] == ' '){\n      continue;\n    }\n    var j;\n\
    \    for(j = 0; j < n; j++){\n      if(s[j] === ''){\n        continue;\n    \
    \  }\n      if(s[j] === s[i]){\n        break;\n      }\n    }\n    if(j == n){\n\
    \      lst.push(s[i]);\n    }\n  }\n  return lst;\n}\n", "    if (s == \"\"){\n\
    \        return []\n    }\n    let ls = find_all(s, n);\n    let res = [];\n \
    \   for (let i = 0; i < ls.length; i++){\n        let temp = ls[i];\n        for\
    \ (let j = 0; j < temp.length; j++){\n            if (res.indexOf(temp[j]) ===\
    \ -1){\n                res.push(temp[j])\n            }\n        }\n    }\n \
    \   return res\n}", "    let strArray = s.split(' ');\n    strArray.map(function(word){\n\
    \        let hasN = (word.split('').filter(function(letter){\n            return\
    \ /[a-z]/.test(letter);\n        }).length) == n;\n        if(hasN){\n       \
    \     return word;\n        }\n    })\n}\n", "  var arr = [];\n  if (s.length\
    \ == 0 || n == 1) {\n    return arr;\n  }\n  for (var i = 0; i <= s.length - n\
    \ + 1; i++){\n    if (s.slice(i, i + n).join('') != '') arr.push(s.slice(i, i\
    \ + n));\n  }\n  return arr;\n}\n", "    let arr = [];\n    let strArr = s.split(\"\
    \ \");\n    for(let word of strArr){\n        let count = 0;\n        for(let\
    \ letter of word){\n            count += nLetterCount(letter);\n        }\n  \
    \      if(count == n){\n            arr.push(word);\n        }\n    }\n    if(arr.length\
    \ == 0){\n        return [];\n    }\n    return arr;\n}", "  let words = [];\n\
    \  \n  // Your code here\n  if (s == \"\") {\n    return words;\n  }\n  s = s.toLowerCase();\n\
    \  let lastLetter = \"\";\n  let i = 0;\n  \n  while (i < s.length) {\n    if\
    \ (s[i] != ' ') {\n      words.push(s[i]);\n    }\n    i++;\n  }\n  \n  while\
    \ (i < s.length) {\n    if (s[i] != ' ') {\n      if (s.slice(i, i + n).split(\"\
    \").length == n) {\n        if (s[i] == lastLetter) {\n          words.push(s.slice(i,\
    \ i + n));\n        } else {\n          lastLetter = s[i];\n          words.push(s.slice(i,\
    \ i + n));\n        }\n      }\n    }\n    i++;\n  }\n  return words;\n}\n", " \
    \ return s.split(\" \")\n    .filter( w => w.split(\"\").filter( letter => [\"\
    a\",\"e\",\"i\",\"o\",\"u\"].indexOf(letter) == -1 ).length == n );\n}\n", " \
    \   var result = [];\n    \n    // Base case\n    if (s === \"\") {\n        return\
    \ result;\n    }\n\n    // First split the string into words based on spaces\n\
    \    let words = s.split(\" \");\n\n    // Second split the string into characters\
    \ based on spaces\n    let chars = s.split(\"\");\n\n    // Third filter the words\
    \ by length and append the characters of that word that match n\n    words.filter(word\
    \ => word.length > n).forEach(word => {\n        let charsOfWord = word.split(\"\
    \");\n        let foundChars = [];\n        charsOfWord.forEach((char, i) => {\n\
    \            if (chars.indexOf(char) !== -1) {\n                foundChars.push(char);\n\
    \            }\n        });\n        result.push(foundChars.join(\"\"));\n   \
    \ });\n\n    return result;\n}\n\nselect_words(\"Mary had a little lamb\", 4)\
    \ ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    select_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\",\
    \ 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\", 4) ==> [\"world\"\
    ]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\"\
    , 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"\
    Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\"\
    , 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\", 4) ==> [\"world\"\
    ]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Hello world\"\
    , 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"\
    Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
    ]\nselect_words(\"Hello world\", 4) ==> ", "\tif (s.length <= n) return [];\n\n\
    \t// Create a map of the possible substring lengths\n\tconst substr_lengths =\
    \ new Map();\n\tfor (let i = s.length; i > 0; i--){\n\t\tsubstr_lengths.set(s.length\
    \ - i, new Set());\n\t}\n\n\t// Add the first n characters\n\tfor (let i = s.length;\
    \ i <= n; i++){\n\t\tsubstr_lengths.get(s.length - i).add(i);\n\t}\n\n\tlet result\
    \ = [];\n\tfor (let i = 0; i < s.length; i++){\n\t\tlet word_found = false;\n\t\
    \tfor (let j = 0; j < s.length; j++){\n\t\t\tif (!substr_lengths.get(s.length\
    \ - j).has(i)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!word_found){\n\t\t\t\
    result.push(s.substr(i, j));\n\t\t\tword_found = true;\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "  // your code here\n}\n</cell>\n<cell>", "  let words = s.split(\" \"\
    );\n  let count = 0;\n  let return_list = [];\n  for(let i = 0; i < words.length;\
    \ i++){\n    let word = words[i];\n    count += word.length;\n    if(count ==\
    \ n){\n      return_list.push(word);\n    }\n  }\n  return return_list;\n}\n",
  "\treturn [];\n}\n</cell>\n<text>\nGreat! Now that you know how to solve this problem,\
    \ you can see how your solution compares against the built-in string method.\n\
    \n\n</text>\n<cell>\n%timeit \"Mary had a little lamb\".split(\" \").select_words(4)\n\
    %timeit \"Mary had a little lamb\".split(\" \").select_words(3)\n%timeit \"simple\
    \ white space\".split(\" \")\n%timeit \"Hello world\".split(\" \")\n%timeit \"\
    Uncle sam\".split(\" \")\n</cell>\n<text>\nNotice that much of the runtime is\
    \ spent on creating the new list from the words we extracted from the original\
    \ string.\n\n\n</text>\n<text>\nGreat! Now let's see how we can turn this problem\
    \ into a stream processing problem.\n\nWe'll use Kafka!\n\n\n</text>\n<text>\n\
    Step 1: Write a Kafka Streams application that uses Groovy to read in strings\
    \ as records and emit words in order\n\n</text>\n<text>\nTo use KafkaStreams,\
    \ we first need to create a stream processor that can process streams of data.\
    \ One way to do this is to extend the AbstractProcessor class, and provide a \"\
    process\" method.\n\nThe \"process\" method needs to accept an input record which\
    \ is of type \"KeyValue\" and process it into a string that is emitted. For example,\
    \ if we emit the word \"Mary\" and then a \"KeyValue\" containing the word's offset\
    \ and key, we get \"Mary 0\".\n\nWe'll use Groovy to create a Kafka Streams application\
    \ that processes records in Groovy language. We then run the program using a local\
    \ Kafka Streams instance (similar to the example in the Kafka Streams quickstarts).\n\
    \n\n</text>\n<cell>\nimport org.apache.kafka.common.serialization.Serdes\nimport\
    \ org.apache.kafka.streams.KafkaStreams\nimport org.apache.kafka.streams.StreamsConfig\n\
    \nclass MyProcessor extends AbstractProcessor<KeyValue<String, String>> {\n\t\
    public void process(KeyValue<String, String> record) {\n\t\tString value = record.value();\n\
    \t\tString[] parts = value.split(\" \");\n\t\tfor (String part : parts) {\n\t\t\
    \tcontext.forward(record, new Values(part));\n\t\t}\n\t}\n}\n\ndef config = new\
    \ Properties();\nconfig.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\"\
    );\nconfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, zkConnect);\nconfig.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,\
    \ Serdes.String().getClass());\nconfig.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,\
    \ Serdes.", "    // Write your solution here\n}\n", "    var result = [];\n  \
    \  if (s.length==0){\n        return result;\n    }\n    \n    \n    for (var\
    \ i = 0; i < n; i++){\n        var isFound = false;\n        for (var j = 0; j\
    \ < s.length; j++){\n            if (s.charAt(j) == ' ' || s.charAt(j) == ',')\
    \ {\n                isFound = true;\n                break;\n            }\n\
    \        }\n        if (!isFound){\n            result.push(s.charAt(i));\n  \
    \      }\n    }\n    \n    return result;\n}\n", "    var result = [];\n    for(var\
    \ i=0; i<s.length; i++){\n        var word = \"\";\n        for(var j=0; j<s.length;\
    \ j++){\n            if(s.charAt(j) == s.charAt(i)){\n                word +=\
    \ s.charAt(j);\n            }\n        }\n        if(word.length == n){\n    \
    \        result.push(word);\n        }\n    }\n    return result;\n}\n", "\tvar\
    \ str = new String(s);\n\tvar result = \"\";\n\t\n\tfor(var i = 0; i < str.length;\
    \ i++){\n\t\tvar character = str[i];\n\t\t\n\t\tif(character == \"a\" || character\
    \ == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" ||\
    \ character == \"A\" || character == \"E\" || character == \"I\" || character\
    \ == \"O\" || character == \"U\"){\n\t\t\tvar isFound = true;\n\t\t\tfor(var j\
    \ = 0; j < n; j++){\n\t\t\t\tvar next = str[i + 1];\n\t\t\t\t\n\t\t\t\tif(next\
    \ != \"a\" && next != \"e\" && next != \"i\" && next != \"o\" && next != \"u\"\
    \ && next != \"A\" && next != \"E\" && next != \"I\" && next != \"O\" && next\
    \ != \"U\"){\n\t\t\t\t\tisFound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\
    \n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\tif(isFound){\n\t\t\t\tresult += character;\n\
    \t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tif(result == \"undefined\"){\n\t\tresult = [];\n\
    \t}\n\t\n\treturn result;\n}\n", "    var list = [];\n    var c = 0;\n    var\
    \ lastindex = 0;\n    \n    var i = 0;\n    \n    while(i < s.length){\n     \
    \   var c = s.charAt(i);\n        if(c == \" \"){\n            i++;\n        \
    \    while(i < s.length && s.charAt(i) != \" \"){\n                i++;\n    \
    \        }\n            if(i < s.length){\n                list.push(s.substr(lastindex,\
    \ i - lastindex));\n                lastindex = i + 1;\n            }\n      \
    \  }else{\n            while(i < s.length && s.charAt(i) != c){\n            \
    \    i++;\n            }\n            if(i < s.length){\n                list.push(s.substr(lastindex,\
    \ i - lastindex));\n                lastindex = i + 1;\n            }\n      \
    \  }\n        i++;\n    }\n    list.push(s.substr(lastindex));\n    return list;\n\
    }\n", "  // code goes here\n  if (n === 0){\n    return []\n  }\n\n  var consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  var res = []\n  for (var\
    \ i = 0; i < s.length; i++){\n    var pos = s.indexOf(i, 0)\n    if (pos > -1\
    \ && s.substring(pos + 1, pos + 2).split(consonants.charAt(n - 1)).join(\"\")\
    \ === consonants){\n      res.push(s.substring(0,pos))\n    }\n  }\n  return res\n\
    }\n", "  return s.split(\"\").filter(function(word) {\n    return s.split(\"\"\
    ).filter(function(letter) {\n      return word == letter || word.split(\"\").filter(function(letter2)\
    \ {\n        return letter == letter2 && letter2 != letter;\n      }).length ==\
    \ n;\n    }).length == n;\n  });\n}", "   if(!s || n == 0){\n      return [];\n\
    \   }\n   let list = [];\n   let index = 0;\n   while(index<s.length){\n     \
    \ let word = s.substring(index, index+n);\n      if(is_consonant(word)){\n   \
    \      list.push(word);\n      }\n      index = index+n+1;\n   }\n   return list;\n\
    }\n", "\tlet list = [];\n\tlet index = 0;\n\twhile(index<s.length){\n\t\tlet consonants\
    \ = s.substring(index,index+n).match(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g);\n\
    \t\tif(consonants!=null){\n\t\t\tconsonants.forEach((consonant,index)=>{\n\t\t\
    \t\tlist.push(consonant);\n\t\t\t});\n\t\t}\n\t\tindex+=n;\n\t}\n\treturn list;\n\
    }\n", "  let ans = []\n  if(s === undefined || n === undefined || s.length < 1\
    \ || n < 0){\n    return ans\n  }\n  s = s.toLowerCase().split(\" \");\n  for\
    \ (let i=0; i < s.length; i++){\n    if (s.includes(n) ){\n      ans.push(s[i]);\n\
    \    }\n  }\n  return ans\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your help but i can't run it as it says \" Uncaught TypeError: Cannot read property\
    \ 'toLowerCase' of undefined\". \nHow do i fix this?\n<|/ c |>\n<| c |>\ni tried\
    \ removing the .toLowerCase() it still does not work and it also says \"Uncaught\
    \ ReferenceError: select_words is not defined\"\n<|/ c |>\n<| c |>\nWhat browser\
    \ are you using?\n<|/ c |>\n<| c |>\nim using chrome\n<|/ c |>\n<| c |>\nAre you\
    \ running the function on the page or in a separate javascript file? If you are\
    \ not running it on page load then you should define the function at the top of\
    \ the page or in a separate file.\n<|/ c |>\n<| a tags=javascript |>\n<code>",
  "    var ret = []\n    for(var i=0;i<s.length;i++){\n        var index = strToInt(s[i]);\n\
    \        var c = s[i+1];\n        var isConsonant = c==c && index==index+1 &&\
    \ strToInt(c)==strToInt(s[i+2])\n        if(isConsonant){\n            ret.push(s[i+1])\n\
    \        }\n        if(index == n && isConsonant){\n            return ret;\n\
    \        }\n    }\n}\n", "  return s.split(' ').filter(function(x){\n    return\
    \ x.split('').filter(function(char){\n      return char.match(/[b-df-hj-np-tv-z]{n}/i)\
    \ !== null;\n    }).length == n;\n  }).join(' ');\n}\n", "\tvar res = [];\n\t\
    for(var i = 0; i < s.length; i++){\n\t\tvar word = s[i];\n\t\tvar count = 0;\n\
    \t\tfor(var j = 0; j < word.length; j++){\n\t\t\tfor(var k = 0; k < n; k++){\n\
    \t\t\t\tif(word[j].match(/[aeiou]/i) && word[j+1].match(/[aeiou]/i)){\n\t\t\t\t\
    \tif(word[j] == word[j+1]){\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\tres.push(word);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "\ts = s.toLowerCase();\n\tn = n.toLowerCase();\n\tn = n.replace(/[^aeiou]/g,\
    \ \"\");\n\tvar words = s.split(\" \");\n\tvar result = new Array();\n\tfor(var\
    \ i = 0, l = words.length; i < l; i++){\n\t\tresult.push(words[i]);\n\t}\n\tvar\
    \ wordset = new Array();\n\tvar counts = new Array();\n\tfor(var i = 0, l = result.length;\
    \ i < l; i++){\n\t\tvar w = result[i].toLowerCase();\n\t\tif(w.length == n){\n\
    \t\t\twordset.push(w);\n\t\t\tcounts[w] = counts[w] + 1 || 1;\n\t\t}\n\t}\n\t\
    var sortedCount = new Array();\n\tfor(var k in counts){\n\t\tsortedCount.push(k);\n\
    \t}\n\tsortedCount.sort();\n\tfor(var i = 0, l = sortedCount.length; i < l; i++){\n\
    \t\tresult.push(wordset[sortedCount[i]]);\n\t}\n\treturn result;\n}\n", "\tif\
    \ (s === \"\") {\n\t\treturn [];\n\t}\n\tvar words = [];\n\tfor (var i = 0; i\
    \ < s.length - n + 1; i++) {\n\t\tvar word = s.slice(i, i+n);\n\t\tif (words.indexOf(word)\
    \ === -1) {\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words;\n}\n", "  let\
    \ ar = [];\n  let res = [];\n  for (let i = 0; i < s.length; i++){\n    if (s.indexOf(i)\
    \ != -1){\n      let ar = []\n      for (let j = 0; j < n; j++){\n        ar.push(s.indexOf(s.indexOf(i)\
    \ + j))\n      }\n      ar.sort();\n      if (ar.length == n){\n        res.push(s.slice(i,\
    \ i + n));\n      }\n    }\n  }\n  return res;\n}", "    var res = [];\n    var\
    \ l = s.length;\n    var word = null;\n    for(var i = 0; i < l; i++){\n     \
    \   word = \"\";\n        for(var j = 0; j < n; j++){\n            word += s.charAt(i);\n\
    \        }\n        for(var j = 0; j < n; j++){\n            word += s.charAt(i);\n\
    \        }\n        for(var j = 0; j < n; j++){\n            word += s.charAt(i);\n\
    \        }\n        for(var j = 0; j < n; j++){\n            word += s.charAt(i);\n\
    \        }\n        if(s.indexOf(word) === 0){\n            res.push(word);\n\
    \        }\n    }\n    return res;\n}\n", "  if(s == \"\"){\n    return [];\n\
    \  }\n  if(s.length <= n){\n    return [];\n  }\n  if(n === 1){\n    return [s];\n\
    \  }\n  \n  var wordsArray = [];\n  var lastLetter = s[0];\n  for(var i = 1; i\
    \ < s.length; i++){\n    if(s[i] === s[i - 1] && s[i - 1] == s[i - 2]){\n    \
    \  wordsArray[wordsArray.length] = s[i - 1];\n    }\n    \n    if(s[i] === lastLetter){\n\
    \      wordsArray[wordsArray.length] = s[i - 1];\n    }\n    \n    lastLetter\
    \ = s[i];\n  }\n  \n  return wordsArray;\n}", "\tvar out = [];\n\tfor (var i =\
    \ 0; i < s.length; i++) {\n\t\tfor (var j = 0; j < n; j++) {\n\t\t\tvar a = s.charAt(i);\n\
    \t\t\tvar b = s.charAt(i + 1);\n\t\t\t//console.log(a, b);\n\t\t\tif (a === b)\
    \ out.push(s.substring(i, j));\n\t\t}\n\t}\n\treturn out;\n}\n", "    var ans\
    \ = [];\n    var re = new RegExp(String.fromCharCode(97) + String.fromCharCode(98)\
    \ + String.fromCharCode(99) + String.fromCharCode(100), \"g\");\n    s = s.replace(/\\\
    s+/g, \" \").split(re);\n    for(var i = 0; i < s.length; i++){\n        if(s.indexOf(\"\
    a\" + s[i] + s[i+1]) == -1 && s.indexOf(\"b\" + s[i] + s[i+1]) == -1){\n     \
    \       ans.push(s[i]);\n        }\n        if(ans.length == n || s.length ==\
    \ n)\n            break;\n    }\n    return ans;\n}\n", "\tlet a = s.split(\"\
    \ \");\n\tlet newArr = [];\n\tlet newArr2 = [];\n\tfor(let i = 0; i < a.length;\
    \ i++) {\n\t\tlet cons = a[i].split(\"\");\n\t\tfor(let j = 0; j < cons.length;\
    \ j++){\n\t\t\tif(cons[j].match(/[b-df-hj-np-tv-z]/ig)){\n\t\t\t\tlet subArr =\
    \ [];\n\t\t\t\tsubArr.push(a[i]);\n\t\t\t\tlet arr = cons[j].split(\"\");\n\t\t\
    \t\tfor(let k = 0; k < arr.length; k++){\n\t\t\t\t\tif(arr[k].match(/[b-df-hj-np-tv-z]/ig)){\n\
    \t\t\t\t\t\tnewArr.push(subArr);\n\t\t\t\t\t\tnewArr2.push(cons[j]);\n\t\t\t\t\
    \t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(newArr2.length < n) return [];\n\treturn\
    \ newArr;\n}\n", "  if (s.length === 0) return [];\n  var res = [];\n  var cur\
    \ = 0;\n  while (cur < s.length){\n    var curWord = s.slice(cur, cur + n);\n\
    \    for (var i=0; i < curWord.length; i++){\n      var index = curWord.indexOf(char2num[s[i]],\
    \ 0);\n      if (index != -1){\n        res.push(curWord.slice(0, index));\n \
    \       cur += index + 1;\n      }\n    }\n  }\n  return res;\n}\n", "    let\
    \ words = s.split(\" \")\n    let res = []\n    for(let i = 0; i < words.length;\
    \ i++){\n        if(words[i].split(\"\").reduce((a,b) => a + b) == n)\n      \
    \      res.push(words[i])\n    }\n    if(s.length == 0)\n        return res;\n\
    \    return res.length === 0 ? [] : res;\n}", "  var words = \"\";\n  if(s.length\
    \ === 0){\n    return words;\n  }\n\n  var count = 0;\n  for(var i = 0; i < s.length;\
    \ i++){\n    if(s[i] !== \" \"){\n      if(count === n){\n        words += s[i]\
    \ + \" \";\n      }\n      else {\n        count++;\n      }\n    }\n  }\n  return\
    \ words;\n}\n", "    var words = [];\n    if(s == \"\") return words;\n    var\
    \ i = 0;\n    var len = s.length;\n    var letters = [];\n    var isFirstLetter\
    \ = true;\n    while(i < len){\n        if(s[i].match(/\\w/g) != null){\n    \
    \        if(isFirstLetter){\n                letters.push(s[i]);\n           \
    \     isFirstLetter = false;\n            }else{\n                words.concat(letters);\n\
    \                letters = [];\n                letters.push(s[i]);\n        \
    \        isFirstLetter = true;\n            }\n        }\n        i++;\n    }\n\
    \    words.concat(letters);\n    return words.filter(function(word){\n       \
    \ return word.length === n;\n    });\n}\n", "    var result = [];\n    var count\
    \ = 0;\n    \n    //Loop through all the consonants present in the string\n  \
    \  for(var i = 0; i< s.length; i++){\n        //Add consonants to the result array\n\
    \        if(s.charAt(i) == vowels[count]){\n            result.push(s.substr(0,\
    \ i));\n            count++;\n            \n            //If n matches the number\
    \ of consonants in the string, then break out of the loop\n            if(count\
    \ == n){\n                break;\n            }\n        }\n    }\n    \n    //Return\
    \ the result array\n    return result;\n}\n", "\t\n\t// Initialize the result\
    \ list with an empty string\n\tvar result = \"\";\n\t\n\t// Initialize a boolean\
    \ to keep track of the string \n\t// currently being scanned for consonants.\n\
    \tvar inConsonant = false;\n\t\n\t// Initialize a boolean to keep track of the\
    \ string \n\t// currently being scanned for vowels.\n\tvar inVowel = false;\n\t\
    \n\t// Initialize a variable to hold the current character being scanned.\n\t\
    // This is the string we are scanning through.\n\tvar currentChar = s[0];\n\t\n\
    \t// Initialize a variable to hold an index to the last character scanned.\n\t\
    // This is the index of the last character in the string we are scanning through.\n\
    \tvar lastChar = -1;\n\t\n\t\n\t// Scanning through the string, check if the current\
    \ character is a vowel\n\t// or consonant, then add it to the result list if it\
    \ is either.\n\t// If the character is not a vowel or consonant at the end of\
    \ the\n\t// string, we check if it is the last character in the string. If it\
    \ is\n\t// the last character, we scan the string again to see if there are \n\
    \t// more consonants or vowels remaining.\n\twhile (currentChar !== \"\") {\n\t\
    \t\n\t\t// Check if the character is a vowel or a consonant.\n\t\tif (isVowel(currentChar)\
    \ || isConsonant(currentChar)) {\n\t\t\t\n\t\t\t// If the character is a vowel\
    \ or a consonant, then check to \n\t\t\t// see if we are at the end of the string\
    \ and if there are\n\t\t\t// more consonants or vowels remaining. If there are,\
    \ we add \n\t\t\t// this consonant or vowel to the result list.\n\t\t\tif (currentChar\
    \ === \"\" || !isVowel(currentChar) && !isConsonant(currentChar)) {\n\t\t\t\t\n\
    \t\t\t\t// Check to see if we have reached the end of the string by \n\t\t\t\t\
    // checking if we are at the end of the string before we\n\t\t\t\t// scan again.\n\
    \t\t\t\tif (currentChar === \"\" && lastChar === s.length - 1) {\n\t\t\t\t\t\n\
    \t\t\t\t\t// We scan the string again to see if we are at the end \n\t\t\t\t\t\
    // of the string or not to see if there are more consonants \n\t\t\t\t\t// or\
    \ vowels remaining.\n\t\t\t\t\tif (lastChar === s.length - 1) {\n\t\t\t\t\t\t\n\
    \t\t\t\t\t\t// If the string is the end of the string, then we \n\t\t\t\t\t\t\
    // should return an empty list.\n\t\t\t\t\t\tresult = \"\";\n\t\t\t\t\t} else\
    \ {\n\t\t\t\t\t\t// We are at the end of a string, but we still have \n\t\t\t\t\
    \t\t// more vowels or consonants remaining.\n\t\t\t\t\t\tcurrentChar = s[++lastChar];\n\
    \t\t\t\t\t\t\n\t\t\t\t\t\t// If the string is the end of the string, then we \n\
    \t\t\t\t\t\t// should return an empty list.\n\t\t\t\t\t\tif (currentChar === \"\
    \") {\n\t\t\t\t\t\t\tresult = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n",
  "\tlet res = Array.from(s.split(\" \"));\n\treturn res.length === 0 ? [] : res.filter((x)\
    \ => x.split(\"\").filter((y) => y === \"c\").length === n);\n}\n", "  var words\
    \ = [];\n  s = s.split(\" \");\n  var len = s.length;\n  var count = 0;\n  for(var\
    \ i=0;i<len;i++){\n    if(is_consonant(s[i]) == true){\n      count++;\n    }\n\
    \    if(count == n){\n      words.push(s[i]);\n    }\n  }\n  return words;\n}\n",
  "    return s;\n}\n", "    return s.split(/\\s+/).filter( x => x.match(new RegExp('^'+n+'[^'+n+']+'))\
    \ )\n}\n", "    let arr = s.split(\" \");\n    let arr2 = arr.filter(x=> x==x.toUpperCase());\n\
    \    let arr3 = [];\n    for(let i=0; i<arr2.length; i++){\n        if(arr2[i].indexOf(n)\
    \ >= 0){\n            arr3.push(arr2[i]);\n        }\n    }\n    return arr3;\n\
    }\n", "\tvar list = [];\n\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \tvar consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n\ts = s.toLowerCase();\n\tvar l = s.length;\n\tfor(var i = 0; i\
    \ < l; i++){\n\t\tif(vowels.indexOf(s.charAt(i)) === -1) list.push(s.charAt(i));\n\
    \t\telse if(consonants.indexOf(s.charAt(i)) === -1) list.push(s.charAt(i));\n\t\
    }\n\tlist.sort();\n\tlist = select_rec(list, n, vowels, consonants);\n\treturn\
    \ list.filter(function(val){return val; });\n}\n", "  let arr = [];\n  for (let\
    \ i = 0; i < s.length; i++) {\n    let count = 1;\n    let index = 0;\n    while\
    \ (s[i] == s[index]) {\n      index++;\n      count++;\n    }\n    if (count ==\
    \ n) {\n      arr.push(s.substring(i, i + count));\n      i += count;\n    }\n\
    \  }\n  return arr;\n}", "  //  Write your code here.\n  \n  if(s == \"\"){\n\
    \    return [];\n  }\n  let arr = [];\n  let firstIndex = s.indexOf(\"a\")+1;\n\
    \  let secondIndex = s.indexOf(\"e\")+1;\n  let thirdIndex = s.indexOf(\"i\")+1;\n\
    \  let fourthIndex = s.indexOf(\"o\")+1;\n  let fifthIndex = s.indexOf(\"u\")+1;\n\
    \  if(firstIndex < secondIndex){\n    arr.push(s.substring(firstIndex, secondIndex));\n\
    \  }\n  if(secondIndex < thirdIndex){\n    arr.push(s.substring(secondIndex, thirdIndex));\n\
    \  }\n  if(thirdIndex < fourthIndex){\n    arr.push(s.substring(thirdIndex, fourthIndex));\n\
    \  }\n  if(fourthIndex < fifthIndex){\n    arr.push(s.substring(fourthIndex, fifthIndex));\n\
    \  }\n  if(fifthIndex < s.length){\n    arr.push(s.substring(fifthIndex, s.length));\n\
    \  }\n  return arr;\n}\n", "    let str = \"\";\n    for(let i = 0; i < n; i++){\n\
    \        str += s;\n    }\n    str = str.split(\"\");\n    let num;\n    let final\
    \ = \"\";\n    let finalList = [];\n    for(let i = 0; i < str.length; i++){\n\
    \        for(let j = 0; j < str[i].length; j++){\n            num = str[i].charCodeAt(j);\n\
    \            if(num == 44 || num == 45 || num == 47 || num == 58 || num == 61\
    \ || num == 64 || num == 65){\n                for(let k = i + 1; k < str.length\
    \ - 1; k++){\n                    num = str[k].charCodeAt(j);\n              \
    \      if(num == 44 || num == 45 || num == 47 || num == 58 || num == 61 || num\
    \ == 64 || num == 65){\n                        finalList += str[k];\n       \
    \             }\n                }\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < finalList.length; i++){\n        final = final + finalList[i] + \"\
    \ \";\n    }\n    final = final.split(\" \");\n    if(final == \"\"){\n      \
    \  final = [];\n    }\n    return final;\n}", "  var result = [];\n  \n  s = s.toLowerCase();\n\
    \  if (s.length == 0) {\n    return result;\n  }\n  \n  var vowelsArray = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n  var consonantsArray = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  var vowels = vowelsArray.concat(consonantsArray);\n\
    \  var vowelsLength = vowels.length;\n  \n  var letter;\n  var currentLetter;\n\
    \  var currentLetterCount = 0;\n  var previousLetter;\n  var nextLetter;\n  var\
    \ nextLetterCount = 0;\n  \n  for (var i=0; i< s.length; i++){\n    letter = s.charAt(i);\n\
    \    currentLetter = letter.toLowerCase();\n    \n    for (var j=0; j< vowelsLength;\
    \ j++){\n      if (vowels[j] == currentLetter){\n        currentLetterCount++;\n\
    \      }\n    }\n    \n    if (currentLetterCount == n){\n      result.push(letter);\n\
    \    }\n    \n    for (var j=0; j< consonantsLength; j++){\n      if (consonantsArray[j]\
    \ == currentLetter){\n        currentLetterCount++;\n      }\n    }\n    \n  \
    \  if (currentLetterCount > n){\n      previousLetter = letter;\n      nextLetter\
    \ = s.charAt(i+1);\n      \n      for (var j=0; j< vowelsLength; j++){\n     \
    \   if (vowels[j] == nextLetter){\n          nextLetterCount++;\n        }\n \
    \     }\n      \n      if (nextLetterCount > n){\n        break;\n      }\n  \
    \  }\n    \n    previousLetter = letter;\n    nextLetter = s.charAt(i+1);\n  }\n\
    \  \n  return result;\n}\n", "    let res = \"\";\n    let words = s.split(\"\
    \ \");\n    for (let word of words) {\n        let count = word.length\n     \
    \   while(count>n){\n            count = count-1;\n            res += word.charAt(count)\n\
    \        }\n        if (count==n){\n            res += \" \" + word\n        }\n\
    \    }\n    return res.split(\" \")\n}", "\tlet ret = [];\n\tlet words = s.trim().toLowerCase().split(\"\
    \ \");\n\tfor (let i = 0; i < words.length; i++){\n\t\tlet count = words[i].split('').filter(v\
    \ => v === v).length\n\t\tif (count === n){\n\t\t\tret.push(words[i]);\n\t\t}\n\
    \t}\n\treturn ret;\n}\n", "}\n", "  var arr=s.split(\" \");\n  n=n<arr.length?n:arr.length;\n\
    \  if(s.length===0){\n    return [];\n  }\n  if(n===arr.length){\n    return arr;\n\
    \  }\n  var result=[];\n  for(var i=0;i<arr.length;i++){\n    var count=0;\n \
    \   var x=arr[i].split(\"\");\n    for(var j=0;j<x;j++){\n      if(x[j].match(/[aeiou]/)){\n\
    \        count++;\n      }\n    }\n    if(count===n){\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar result = [];\n\tvar re = new RegExp\
    \ (\"[^\"+s+\"]+\");\n\t\n\tfor (var i = 0; i < s.length; i++){\n\t\tif (re.test(s)){\n\
    \t\t\tvar word = s.replace(re, \"\");\n\t\t\tif (word.length == n){\n\t\t\t\t\
    result.push(word);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "    // your\
    \ code here\n    if(s === null || n === 0){\n        return [];\n    }\n    let\
    \ res = [];\n    for (let i = 0; i < s.length; i++) {\n        let flag = 0;\n\
    \        for (let j = 0; j < n; j++) {\n            if (s.charAt(i) === s.charAt(i\
    \ + j)) {\n                flag = 1;\n            }\n        }\n        if (flag\
    \ === 0) {\n            res.push(s.substring(i, i + n));\n        }\n    }\n \
    \   return res;\n}\n", "  if (s===\"\") return [];\n  return s.split(\" \").filter(w\
    \ => w.length===n && w.match(new RegExp(`(${Array.from({ length: n }).fill(\"\
    a\").join(\"|\")})`, \"g\")));\n}\n", "    var result = []\n    for (var i = 0;\
    \ i <= s.length; i++){\n        for (var j = 0; j < s.length; j++){\n        \
    \    if (s[i] == s[j] && s[i] != \" \" && s[j] != \" \"){\n                if\
    \ (n == 1){\n                    result.push(s.slice(i, j))\n                }\n\
    \                if (n == 2){\n                    result.push(s.slice(i, j))\n\
    \                    result.push(s.slice(j + 1, j + 2))\n                }\n \
    \               if (n == 3){\n                    result.push(s.slice(i, j))\n\
    \                    result.push(s.slice(j + 1, j + 2))\n                    result.push(s.slice(j\
    \ + 2, j + 3))\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "\tlet list = [];\n\tlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tlet vowels = \"AEIOUaeiou\";\n\tlet letters = consonants+vowels+\" \";\n\t\
    \n\tfor(let word of s.split(\" \")){\n\t\tif(word.length >= n){\n\t\t\tlist.push(word);\n\
    \t\t}\n\t\tfor(let i = 0; i < letters.length; i++){\n\t\t\tif(word.includes(letters[i])){\n\
    \t\t\t\tlist.push(word);\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n", "\tvar count\
    \ = 0;\n\tvar selected_words = [];\n\tfor(var i = 0;i < s.length;i++){\n\t\tif(s[i].match(/[a-zA-Z\
    \ ]/)){\n\t\t\tcount += s[i].split(\" \").length - 1;\n\t\t\tif(count >= n){\n\
    \t\t\t\tselected_words.push(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn selected_words;\n\
    }\n", "\tlet w = [];\n\tlet words = [];\n\tlet counts = {};\n\t\n\tfor(let i =\
    \ 0; i < s.length; i++){\n\t\tlet ch = s.charAt(i);\n\t\t\n\t\tif(counts[ch] ===\
    \ undefined){\n\t\t\tcounts[ch] = 1;\n\t\t}\n\t\telse{\n\t\t\tcounts[ch] += 1;\n\
    \t\t}\n\t}\n\t\n\tfor(let c in counts){\n\t\tif(counts[c] === n){\n\t\t\tfor(let\
    \ j = 0; j < s.length; j++){\n\t\t\t\tlet ch = s.charAt(j);\n\t\t\t\t\n\t\t\t\t\
    if(ch === c){\n\t\t\t\t\tw.push(j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(let\
    \ i = 0; i < w.length; i++){\n\t\twords.push(s.substring(w[i], w[i] + n));\n\t\
    }\n\t\n\treturn words;\n}\n", "    if(!s){\n        return []\n    }\n    //Your\
    \ code here\n    chars = s.replace(/[^ A-Za-z]/g,\"\").split(\" \").sort().join(\"\
    \");\n    charsN = chars.split(\"\").filter(function(char){return char.match(/[^\
    \ A-Za-z]/g)});\n    \n    charsN.forEach(function(char){\n        if(chars.indexOf(char)\
    \ == n-1){\n            charsN = charsN.filter(function(char){return char != char});\n\
    \            charsN.push(char);\n        }\n    });\n    \n    return charsN;\n\
    }\n", "    // Fill in your code below!\n    return s;\n}\n", "    var words =\
    \ [];\n    if (n == 0)\n        return words;\n    else {\n        for (var i\
    \ = 0; i < s.length; i++) {\n            for (var i = 0; i < n; i++) {\n     \
    \           if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i]\
    \ != 'u' \n                && s[i] != 'y' && s[i] != 's' && s[i] != 'h' && s[i]\
    \ != 'l' && s[i] != 'd') {\n                    break;\n                }\n  \
    \              else {\n                    words.push(s.slice(0, i + 1));\n  \
    \                  s = s.slice(i + 1);\n                    n = n - 1;\n     \
    \           }\n            }\n        }\n        return words;\n    }\n}\n", "\t\
    // Write your solution here\n}\n", "    var list = s.split(\" \");\n    var counts\
    \ = {};\n    var output = [];\n    for(var i=0;i<list.length;i++){\n        if(counts[list[i]]\
    \ === undefined){\n            counts[list[i]] = 0;\n        }\n        if(counts[list[i]]\
    \ < n){\n            output.push(list[i]);\n        }\n        counts[list[i]]\
    \ += 1;\n    }\n    return output;\n}\n", "\tlet list = s.split(\" \");\n\tlet\
    \ final = [];\n\tfor(let i = 0; i < list.length; i++){\n\t\tlet temp = [];\n\t\
    \tfor(let j = 0; j < list[i].length; j++){\n\t\t\tif(j + 1 == list[i].length){\n\
    \t\t\t\ttemp.push(list[i].substr(j));\n\t\t\t}\n\t\t\telse if(list[i].substr(j,\
    \ 1) == list[i].substr(j + 1)){\n\t\t\t\ttemp.push(list[i].substr(j));\n\t\t\t\
    }\n\t\t}\n\t\tif(temp.length == n){\n\t\t\tfinal.push(temp);\n\t\t}\n\t}\n\treturn\
    \ final;\n}\n", "  var w = s.split(\" \");\n  w.sort(function(a, b){\n    return\
    \ a.length - b.length;\n  });\n  var res = w.filter(function(v){\n    return v.split('').filter(function(i){\n\
    \      return (i == n-1 || i == n) ? true : false;\n    }).length == n;\n  });\n\
    \  return res;\n}\n", "\t// code here\n\tif (s.length === 0) {\n\t\treturn [];\n\
    \t}\n\tlet list = [];\n\tlet j = 0;\n\tfor (let i = 0; i < s.length; i++){\n\t\
    \tif (s.charAt(i) === \" \") {\n\t\t\tlist.push(s.substring(j, i));\n\t\t\tj =\
    \ i;\n\t\t}\n\t}\n\tlist.push(s.substring(j));\n\treturn list.filter(a => a.split(\"\
    \ \").length == n)\n}\n", "  var list = [];\n  var chars = s.split(\" \");\n \
    \ for(var i=0; i<chars.length; i++){\n    if(chars[i].length == n){\n      list.push(chars[i]);\n\
    \    }\n  }\n  return list;\n}\n", "  let result = []\n  for (let i = 0; i < s.length;\
    \ i++){\n    if (s.indexOf(s.charAt(i)) == n){ //the index of the character in\
    \ the string\n        result.push(s.substring(i+1))\n    }\n  }\n  return result\n\
    }\n", "}\n", "  var list = [];\n  n = parseInt(n);\n  var word = s;\n  if(s.length\
    \ == 0){\n    return list;\n  }\n  var vowels = \"AEIOUaeiou\";\n  var index =\
    \ 0;\n  var vowel_count = 0;\n  while(index <= s.length){\n    var word = s.substring(index,\
    \ index + 1);\n    if(word == \"\"){\n      break;\n    }\n    if(vowels.indexOf(word[0])\
    \ == -1){\n      word = word.toLowerCase();\n      if(vowels.indexOf(word[0])\
    \ == -1){\n        list.push(word);\n      }\n    }\n    if(vowel_count >= n){\n\
    \      break;\n    }\n    index = index + 1;\n    vowel_count++;\n  }\n  return\
    \ list;\n}\n", "  let result = [];\n\n  if(!s) return result;\n\n  if(s.length\
    \ <= n) return result;\n\n  let letters = s.split('');\n\n  letters.forEach((letter,\
    \ i) => {\n    if(letter.length == n){\n      result.push(letter);\n    }\n  });\n\
    \n  return result;\n}\n", "    var list = [];\n    if (s !== \"\"){\n        list\
    \ = s.split(' ');\n    }\n    var result = [];\n    for (var i = 0; i <= list.length;\
    \ i++){\n        if (list[i].split('').filter(function(x){return x === n;}).length\
    \ !== 0){\n            result.push(list[i])\n        }\n    }\n    return result;\n\
    }", "\treturn Array.from(new Set(s.split(\"\")))\n\t\t.filter((x) => x.split(\"\
    \").filter((y) => y == x).length == n)\n}\n", "}\n</cell>\n<cell>", "  let words\
    \ = [];\n  let letters = [];\n  \n  for (let i = 0; i < s.length; i++){\n    letters\
    \ = s.replace(/[^a-zA-Z ]/g, \"\").split(\" \");\n    \n    if (letters.length\
    \ == n){\n      words.push(letters);\n    }\n  }\n  \n  return words;\n}\n", " \
    \   var words = [];\n    \n    if(n === 0 || s.length === 0){\n        return\
    \ words;\n    }\n    \n    var start = 0;\n    var end = 0;\n    var temp = 0;\n\
    \    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var vowels = \"aeiou\";\n\
    \    \n    while(end < s.length){\n        temp = 0;\n        start = end;\n \
    \       \n        while(start < s.length && temp < n){\n            end = start\
    \ + 1;\n            \n            if(s[start].match(/[aeiou]/i) === null){\n \
    \               temp += 1;\n            }\n            \n            if(s[end].match(/[aeiou]/i)\
    \ === null){\n                temp += 1;\n            }\n            \n      \
    \      start += 1;\n        }\n        \n        if(temp === n){\n           \
    \ words.push(s.slice(start, end));\n        }\n    }\n    \n    return words;\n\
    }\n", "    let array = []\n    const arr2 = s.split(\" \");\n    for (let i of\
    \ arr2){\n        if (i.split('').filter(x => x.match(/[a-zA-Z]/)).length ===\
    \ n){\n            array.push(i)\n        }\n    }\n    return array\n}\n", " \
    \   const words = s.split(\" \");\n    return words.filter(word => word.length\
    \ == n);\n}\n", "    \n}", "  //write your code here\n}\nselect_words(\"Hello\
    \ world\", 4) ", "    \n    if (n === 0){\n        return s;\n    }\n    if (s.length\
    \ ===0){\n        return [];\n    }\n    \n    return select_words2 (s, n).filter(word=>word.length===n);\n\
    }\n\n", "  let set = new Set()\n  for (let i=0; i<s.length; i++){\n    for (let\
    \ j=0; j<s.length; j++){\n      if (s.charAt(i)==s.charAt(j) && s.charAt(i)!=\"\
    \ \"){\n        set.add(\"word\")\n      }\n    }\n  }\n  console.log(set)\n \
    \ let words = []\n  set.forEach(element => { words.push(element) })\n  console.log(words)\n\
    }\n", "    // +++ TODO +++\n    // solution code\n    let list = [];\n    for\
    \ (let i=0; i<s.length; i++){\n        if ((s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u') && s.indexOf(\"aeiou\")<s.indexOf(s[i]))\
    \ list.push(s[i]);\n        else if ((s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') && s.indexOf(\"aeiou\")==s.indexOf(s[i])) list.push(s.substring(0,i+1));\n\
    \    }\n    return list;\n}\n", "    if (s == \"\") {\n        return [];\n  \
    \  }\n\n    let words = [];\n    let i = 0;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (is_vowel(s[i])) {\n            continue;\n        }\n  \
    \      let j = 0;\n        while (j < n && s[i] !== ' ') {\n            i++;\n\
    \            ++j;\n        }\n        if (j == n) {\n            words.push(s.slice(i,\
    \ i + n));\n        }\n    }\n    return words;\n}\n", "\tvar p = 0;\n\tvar arr\
    \ = [];\n\tvar word = \"\";\n\tfor(var i = 0; i<s.length; i++){\n\t\tif(s[i] ===\
    \ \"a\"){\n\t\t\tif(p == n){\n\t\t\t\tarr.push(word);\n\t\t\t\tword = \"\";\n\t\
    \t\t}\n\t\t\tp++;\n\t\t}\n\t\telse{\n\t\t\tword += s[i];\n\t\t}\n\t}\n\tif(s.length\
    \ > 0){\n\t\tarr.push(word);\n\t}\n\treturn arr;\n}\n", "\tlet words = [];\n\t\
    for(var i = 0; i < s.length; i++){\n\t\tlet count = 0;\n\t\tfor(var j = 0; j <\
    \ s.length; j++){\n\t\t\tif((s.charAt(i) == s.charAt(j)) && (s.charAt(j) != '\\\
    '')){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.slice(i,\
    \ s.length));\n\t\t}\n\t}\n\treturn words;\n}", "   //Your code here\n}\n</cell>\n\
    <text>\nQuestion 10 - Implementation\n\n</text>\n<cell>", "  var res = [];\n \
    \ \n  // Base case\n  if(s == \"\"){\n    return [];\n  }\n  \n  // Recursion\n\
    \  for(var i=0; i<s.length; i++){\n    // Only consider the current letter if\
    \ the current word contains at least n \n    // characters. Otherwise, skip that\
    \ character.\n    if(s.charAt(i) == \" \"){\n      for(var j=0; j<n; j++){\n \
    \       if(s.charAt(i) == \" \"){\n          break;\n        }\n        i++;\n\
    \      }\n    }\n    res.push(s.substr(0, i+1));\n    s = s.substr(i+1);\n  }\n\
    \  return res;\n}\n", "  \n  var words = s.split(\" \");\n\n  var result = [];\n\
    \  for(var i = 0 ; i < words.length ; i++){\n    var wordArr = words[i].split(\"\
    \");\n    var count = 0;\n    for(var j = 0; j < wordArr.length ; j++){\n    \
    \  if(wordArr[j].match(/[a-z]/)){\n        count++;\n      }\n    }\n    if(wordArr.length\
    \ <= n && count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n\
    }\n", "\tvar words = [];\n\t//iterate through each letter in s \n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar letter = s[i];\n\t\t\n\t\t//If letter is a consonant\
    \ and there are more consonants left in the \n\t\t//string, then add it to the\
    \ words list \n\t\tif(letter==\"C\"){\n\t\t\tfor(var j=0; j<s.length; j++){\n\t\
    \t\t\tif(s[j]==\"C\")\n\t\t\t\t\twords.push(s.slice(0,j));\n\t\t\t}\n\t\t}\n\t\
    \t\n\t\t//If there are more consonants left in the string, but \n\t\t//the current\
    \ letter is not a consonant, then add it to the words \n\t\t//list \n\t\tif(s.length-1==i){\n\
    \t\t\twords.push(s);\n\t\t}\n\t}\n\treturn words;\n}\n", "  if (n == 1) return\
    \ [s]\n  var w = select_words(s, (n-1)/2)\n  if (n & 1) return w.concat([s])\n\
    \  return w\n}", "\tlet words = \"\";\n\tlet last = 0;\n\tfor(let i = 0; i < s.length;\
    \ i++){\n\t\tlet index = s.indexOf(\" \", last);\n\t\tlet word = s.substring(last,\
    \ index);\n\t\tlast = index + 1;\n\t\tlet c = word.length && select_chars(word,\
    \ n, i);\n\t\t\n\t\tif (c){\n\t\t\twords += c;\n\t\t}\n\t}\n\t\n\tif (s.length\
    \ == 0){\n\t\treturn [];\n\t}\n\t\n\treturn words;\n}\n", "    \n}\n", "}\n",
  "    var result = new Array();\n    for(var i=0; i<s.length; i++){\n        for(var\
    \ j=0; j<s.length; j++){\n            if(s[i] === s[j]){\n                result.push(s.slice(0,i));\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  s = s.toUpperCase();\n  if (s.length == 0 || n == 0) return [];\n  \n\
    \  let list = new Array();\n  let count = 0;\n  let index = 0;\n  let letters\
    \ = 0;\n  let current_letter = '';\n  \n  while (letters < n){\n    current_letter\
    \ = s.charAt(index);\n    letters++;\n    if (current_letter == ' '){\n      list.push(s.substr(index,\
    \ s.length));\n      count++;\n      index++;\n      letters = 0;\n    } else\
    \ if (current_letter == '\\n'){\n      list.push(s.substr(index, s.length));\n\
    \      index++;\n      letters = 0;\n    } else {\n      if (current_letter ==\
    \ s.charAt(index-1)){\n        index++;\n      } else {\n        count++;\n  \
    \      index++;\n      }\n    }\n  }\n  list.push(s.substr(index, s.length));\n\
    \  return list;\n}\n", "  return s.split(\" \").filter(x => select_word(x, n).length\
    \ == n)\n}\n", "    var arr = [], i, j, c = 0;\n    for (i = 0, j = s.length;\
    \ i < j; i++){\n        if (s.charAt(i) != \" \") {\n            arr[c] = s.substring(i,\
    \ i+1);\n            c++;\n        }\n    }\n    i = -1;\n    while (++i < n)\
    \ {\n        c = 1;\n        for (j = arr.length-1; j >= 0; j--){\n          \
    \  if (arr[j].indexOf(arr[0]) >= 0){\n                arr[c] = arr[j];\n     \
    \           break;\n            }\n            c++;\n        }\n    }\n    return\
    \ arr;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is my solution to this problem\
    \ using recursion with javascript. I also used a for loop for this solution.\n\
    \n<code>\nconst myWordsContainingConsonants = (str) => {\n  let consonants = false\n\
    \  let arr = []\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[^aeiou]/))\
    \ {\n      arr.push(str[i])\n      consonants = true\n    }\n    if (str[i] ===\
    \ \" \" && !consonants) {\n      arr = []\n      consonants = false\n    }\n \
    \ }\n\n  if (consonants) {\n    return arr.concat([''])\n  } else {\n    return\
    \ arr\n  }\n}\n", "    // Write your code here\n}\n", "    //Your code here\n\
    };\n", "    // Initialize an empty list.\n    var results = [];\n    // Return\
    \ an empty list if there are no consonants in the string s.\n    if (s.length\
    \ == 0){\n        return results;\n    }\n    // Get the first consonant and set\
    \ the current letter index to 1.\n    var letter = s[0];\n    var index = 1;\n\
    \    // While there are still letters in the string s.\n    while (index < s.length){\n\
    \        // If that letter is equal to the current consonant, push it to the list.\n\
    \        if (s[index] == letter){\n            results.push(s.substring(index,\
    \ index + 1));\n            // If there are more letters after this one, then\
    \ increase the \n            // current letter index and increment the index to\
    \ go through the string\n            // again to get the next consonant.\n   \
    \         if (index < s.length){\n                letter = s[index];\n       \
    \         index++;\n            }\n        }\n        // If there are no more\
    \ letters, then exit the while loop.\n        else {\n            break;\n   \
    \     }\n    }\n    return results;\n}", "    let res = [];\n    while(n != 0){\n\
    \        if(s.indexOf(\" \") == -1){\n            res.push(s.slice(0, n));\n \
    \           return res;\n        }\n        let s = s.replace(/[^a-zA-Z ]/g, \"\
    \");\n        if(s.indexOf(\" \") == -1){\n            res.push(s.slice(0, n));\n\
    \        }\n        s = s.split(\" \");\n        n = n - 1;\n    }\n    return\
    \ res;\n}\n", "    \n    // your code here\n    // return [];\n    \n}\n", " \
    \   var words = s.split(\" \");\n    var result = [];\n    var temp = [];\n  \
    \  for(var i=0; i<words.length; i++){\n        temp=[];\n        for(var j=0;\
    \ j<words[i].length; j++){\n            temp.push(words[i][j]);\n        }\n \
    \       if(temp.length==n)\n            result.push(temp.join(\"\"));\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| c |>\n\
    This doesn't output \"hello\" in your example because it contains only two consonants:\
    \ h and e. Only the example in the question contains one consonant and one vowel,\
    \ so the word hello should be excluded.\n<|/ c |>\n<| c |>\nOops, sorry I missed\
    \ that part\n<|/ c |>\n<| c |>\nNo worries, I didn't see that either. :) Just\
    \ FYI, the only vowels in the input string are a, e, i, o, and u.\n<|/ c |>\n\
    <| c |>\nOkay, I missed that too :) Thanks for catching it\n<|/ c |>\n<| c |>\n\
    I see you've now edited your question to include these restrictions. I updated\
    \ the answer to reflect these changes. The only thing I don't understand is the\
    \ difference between your original question and the updated one. Did you mean\
    \ to write 'hello' in your original question?\n<|/ c |>\n<| a tags=javascript\
    \ |>\nIf you have a large collection of characters, you can generate all permutations\
    \ and then filter them with a custom predicate.\n<code>", "    var ans = [];\n\
    \    for(var i of s){\n        if(i.length == n){\n            ans.push(i);\n\
    \        }\n    }\n    if(ans.length == 0){\n        return [];\n    }\n    return\
    \ ans;\n}\n", "\tvar list = [];\n\tvar last = 0;\n\twhile(last < s.length){\n\t\
    \tvar first = s.indexOf(\"[\", last);\n\t\tvar last = s.indexOf(\"]\", first);\n\
    \t\tvar word = \"\";\n\t\tif(first>last){\n\t\t\tword = s.substring(last+1, first);\n\
    \t\t\tlast = first+1;\n\t\t}\n\t\tif(word.length > n){\n\t\t\tlist.push(word);\n\
    \t\t}\n\t\tlast = s.indexOf(\"]\", last);\n\t}\n\treturn list;\n}\n", "\tvar l=[],\
    \ i=0, j;\n\twhile(i<s.length){\n\t\tj=0;\n\t\twhile(j<n && (s[i]!=\" \" || s[i]==\"\
    \ \")){j++;}\n\t\tl.push(s.substring(i, j+1));\n\t\ti=i+j+1;\n\t}\n\treturn l;\n\
    }\n", "    let words = [];\n    for (let i = 0; i < s.length; i++){\n        if\
    \ ((s.charAt(i) == s.charAt(i).toUpperCase()) && (s.charAt(i) == s.charAt(i).toLowerCase())){\n\
    \            words.push(s.substr(0, i+1));\n        }\n    }\n    return words;\n\
    }\n", "\tvar a= [];\n\tfor(var i=0;i<s.length; i++){\n\t\tif(n==0){\n\t\t\tbreak;\n\
    \t\t}\n\t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s.charAt(i)==s.charAt(j)){\n\
    \t\t\t\tif(s.charAt(i+1)==s.charAt(j+1)){\n\t\t\t\t\ta.push(s.substr(i,j-i+2));\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tn--;\n\t}\n\treturn a;\n}\n", "  var words = [];\n\
    \  s = s.split(\"\");\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substring(i, i+n+1).trim());\n    }\n  }\n  \n\
    \  return words;\n}\n", "\tif(n==0){\n\t\treturn [];\n\t}\n\tlet list = [];\n\t\
    let count = 0;\n\twhile(count<s.length){\n\t\tlist.push(s[count]);\n\t\tcount++;\n\
    \t}\n\treturn list.filter((ele) => {\n\t\treturn ((ele.split(\"\").filter((elem)\
    \ => elem === s.charAt(count)).join('')).length) === n;\n\t});\n}\nselect_words(\"\
    Mary had a little lamb\", 4); //[\"little\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3); //[\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2);\
    \ //[]\nselect_words(\"Hello world\", 4); //[\"world\"]\nselect_words(\"Uncle\
    \ sam\", 3); //[\"Uncle\"]\nselect_words(\"Uncle sam\", 0); //[]\nselect_words(\"\
    Uncle sam\", 10); //[]\nselect_words(\"Uncle sam\", 11); //[]\nselect_words(\"\
    Uncle sam\", 12); //[]\nselect_words(\"Uncle sam\", 13); //[]\nselect_words(\"\
    Uncle sam\", 14); //[]\nselect_words(\"Uncle sam\", 15); //[]\nselect_words(\"\
    Uncle sam\", 16); //[]\nselect_words(\"Uncle sam\", 17); //[]\nselect_words(\"\
    Uncle sam\", 18); //[]\nselect_words(\"Uncle sam\", 19); //[]\nselect_words(\"\
    Uncle sam\", 20); //[]\nselect_words(\"Uncle sam\", 21); //[]\nselect_words(\"\
    Uncle sam\", 22); //[]\nselect_words(\"Uncle sam\", 23); //[]\nselect_words(\"\
    Uncle sam\", 24); //[]\nselect_words(\"Uncle sam\", 25); //[]\nselect_words(\"\
    Uncle sam\", 26); //[]\nselect_words(\"Uncle sam\", 27); //[]\nselect_words(\"\
    Uncle sam\", 28); //[]\nselect_words(\"Uncle sam\", 29); //[]\nselect_words(\"\
    Uncle sam\", 30); //[]\nselect_words(\"Uncle sam\", 31); //[]\nselect_words(\"\
    Uncle sam\", 32); //[]\nselect_words(\"Uncle sam\", 33); //[]\nselect_words(\"\
    Uncle sam\", 34); //[]\nselect_words(\"Uncle sam\", 35); //[]\nselect_words(\"\
    Uncle sam\", 36); //[]\nselect_words(\"Uncle sam\", 37); //[]\nselect_words(\"\
    Uncle sam\", 38); //[]\n", "  // Your code here\n}\n", "\t// Base cases\n\tif(s.length\
    \ <= 0){\n\t\treturn [];\n\t}\n\tif(s.length == 1){\n\t\tif(s.toLowerCase().includes(s.charAt(0))){\n\
    \t\t\treturn [s];\n\t\t}\n\t\treturn [];\n\t}\n\t\n\t// Recursive call\n\tlet\
    \ result = select_words(s.substring(0,s.length), n);\n\t\n\t// If it returns an\
    \ empty list, it means no words can contain exactly n consonants\n\tif(result.length\
    \ == 0){\n\t\treturn [];\n\t}\n\t\n\t// Loop through each word in result\n\tfor(let\
    \ i = 0; i < result.length; i++){\n\t\tlet index = result.indexOf(result[i]);\n\
    \t\tfor(let j = index; j > 0; j--){\n\t\t\t\n\t\t\t// If the next character is\
    \ also a consonant then add it to the list\n\t\t\tif(s.toLowerCase().includes(result[j-1])){\n\
    \t\t\t\tresult.splice(j, 0, result[j-1]);\n\t\t\t\tresult.splice(j+1, 0, result[j]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Return the list\n\treturn result;\n\
    }\n", "  // Insert your code here\n  \n}\nassert(select_words(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\nassert(select_words(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\nassert(select_words(\"simple white space\", 2)\
    \ == [])\nassert(select_words(\"Hello world\", 4) == [\"world\"])\nassert(select_words(\"\
    Uncle sam\", 3) == [\"Uncle\"])\n\n", "    let result=[];\n    let words=[];\n\
    \    s=s.split(\" \");\n    for(let i=0;i<s.length;i++){\n        let count=0\n\
    \        for(let j=0;j<s[i].length;j++){\n            if(s[i].charAt(j)!==\" \"\
    ){\n                count++\n            }\n        }\n        if(count===n){\n\
    \            result.push(s[i]);\n        }\n    }\n    return result\n}\n", " \
    \ var result = [];\n  var temp = [];\n  var i = 0;\n  var j = 0;\n  var n = n-1;\n\
    \  if(s.length == 0){\n    return result;\n  }\n  while(s.length>0){\n    if(s[i]\
    \ == \" \"){\n      temp[i] = s.substr(j, n);\n      i++;\n      j = 0;\n    \
    \  n --;\n    }else if(s[i] == \" \"){\n      n --;\n      i++;\n    }else{\n\
    \      j++;\n      temp.push(s[i]);\n    }\n  }\n  for(i = 0; i < temp.length;\
    \ i++){\n    for(j = 0; j < n; j++){\n      if(temp[i] == temp[j]){\n        result.push(temp[i]);\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const list = s.split(' ');\n\
    \  const result = [];\n  let count = 0;\n  for (const word of list){\n    if (count++\
    \ >= n){\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "\tvar\
    \ words = [];\n\tif(s == \"\") return words;\n\tfor(var i = 0; i<s.length; i++){\n\
    \t\tvar consonants = \"bcdfghjklmnpqrstvwxyz\";\n\t\tvar count = 0;\n\t\tfor(var\
    \ j=0; j<consonants.length; j++){\n\t\t\tif(consonants[j] == s.charAt(i)) count++;\n\
    \t\t}\n\t\tif(count == n) words.push(s.substr(i, n));\n\t}\n\treturn words;\n\
    }\n", "  var words = [];\n  if (n == 0) return words;\n  \n  var s = s.replace(/\\\
    s+/g, '');\n  var arr1 = s.split(\" \");\n  var arr2 = [];\n  var count = {};\n\
    \  var maxCount = 0;\n  \n  for(var i = 0; i < arr1.length; i++){\n    var arr\
    \ = arr1[i].split(\"\");\n    var count = 0;\n    for (var j = 0; j < arr.length;\
    \ j++){\n      if (count[arr[j]] === undefined) count[arr[j]] = 0;\n      count[arr[j]]\
    \ = count[arr[j]] + 1;\n      if (count[arr[j]] == n) {\n        maxCount = Math.max(maxCount,\
    \ count);\n        arr2.push(arr[j]);\n      }\n    }\n  }\n  \n  for (var i =\
    \ 0; i < arr2.length; i++){\n    if (count[arr2[i]] === maxCount) {\n      words.push(arr2[i]);\n\
    \    }\n  }\n  \n  return words;\n}\n", "\tvar l=select_words.length, ret=[];\n\
    \tfor(var i=0;i<l;i++){\n\t\tvar w=select_words[i];\n\t\tvar wl=w.length, nw=w.split(\"\
    \").filter(function(n){return n!==' '}).length;\n\t\tif(n===wl || nw===n){ ret.push(w);\
    \ }\n\t}\n\treturn ret;\n}\n", "    let words=[];\n    let str=s.toLowerCase();\n\
    \    let len=str.length;\n    for(let i=0;i<len;i++){\n        for(let j=0;j<n;j++){\n\
    \            if(str.charAt(i)==str.charAt(j) && str.charAt(i)!='_'){\n       \
    \         words.push(str.charAt(i));\n                n=n-1;\n               \
    \ if(n==0) break;\n            }\n        }\n    }\n    return words;\n}", " \
    \ let words = [];\n  if(s != null && s.length > 0){\n    let lastChar = s[0];\n\
    \    for(let i = 1; i < s.length; i++){\n      if(s[i] !== lastChar){\n      \
    \  words.push(lastChar);\n      }\n      lastChar = s[i];\n    }\n  }\n  return\
    \ words;\n}\n", "  if (s === \"\") return [];\n  var arr = [];\n  var list = [];\n\
    \  var count = {};\n  for (var i=0; i<s.length; i++){\n    for (var j=0; j<s.length;\
    \ j++){\n      if (s[i] == s[j]){\n        if (count <= n) {\n          count[s[i]]\
    \ = count[s] + 1;\n        }\n        else {\n          arr.push(s[i])\n     \
    \   }\n        list.push(s[s.length - j - 1]);\n      }\n    }\n  }\n  return\
    \ arr;\n}\n", "\tvar i;\n\tvar arr = [];\n\t\n\tfor(i=0; i< s.length; i++){\n\t\
    \tfor(i=0; i<s.length; i++){\n\t\t\tif(s.charAt(i) == ' ' || s.charAt(i) == ''){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(s.charAt(i) == n){\n\t\t\t\tarr.push(s.substr(i,\
    \ n+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n", "    var words\
    \ = \"\";\n    var splitStr = s.split(\" \");\n    for(var i=0; i<splitStr.length;\
    \ i++){\n        if(splitStr[i].length >= n){\n            words += splitStr[i]\
    \ + \" \";\n        }\n    }\n    return words.split(\" \");\n}", "}\n", "  let\
    \ results = [];\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n\n  for(let i = s.length - 1; i >= 0; i--){\n    let\
    \ word = s.split(\" \");\n\n    if (word.length == 0) return [];\n\n    let count\
    \ = 0;\n\n    for (let j = 0; j < word.length; j++){\n      if(consonants.includes(word[j]))\
    \ {\n        count++;\n      }\n    }\n\n    if (n == count) {\n      results.unshift(word[0]);\n\
    \    }\n  }\n\n  return results;\n}", "  if (s === \"\") return [];\n  s = s.split(\"\
    \");\n  var a = [];\n  \n  // for each letter in string\n  for (var i = 0; i <\
    \ s.length; i++){\n    //remove letter and count how many consonants there are\n\
    \    var c = s.slice(0, i).join(\"\").match(/[b-df-hj-np-tv-z]/g).length;\n  \
    \  //if there aren't enough consonants then remove letter from string\n    if\
    \ (c < n) continue;\n    //if no more letters left then add to array\n    if (i\
    \ == s.length - 1) a.push(s.slice(i).join(\"\"));\n  }\n  \n  return a;\n}\n",
  "\tif (s.length == 0) {\n\t\treturn [];\n\t}\n\tvar result = [];\n\tfor (var i =\
    \ 0; i< s.length; i++){\n\t\tif (s.charAt(i) == 'c'){\n\t\t\tvar result = select_words_with_count(s,\
    \ n);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n", "\t// Your code goes\
    \ here\n}\n", "\tif (s.length === 0){\n\t\treturn [];\n\t}\n\t\n\tvar arr = [];\n\
    \t\n\tvar counter = 0;\n\t\n\tfor (var i = 0; i < s.length; i++){\n\t\t\n\t\t\
    for(var j = 0; j < n; j++){\n\t\t\tif (s.charAt(i) === s.charAt(j)){\n\t\t\t\t\
    counter++;\n\t\t\t}\n\t\t}\n\t\tif (counter === n){\n\t\t\tarr.push(s.slice(i,\
    \ i + n));\n\t\t\tcounter = 0;\n\t\t}\n\t}\n\t\n\treturn arr;\n}\n", "\tconst\
    \ count = new Map();\n\tlet words = [];\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tconst letter = s[i];\n\t\tcount[letter] = (count.get(letter) || 0) + 1;\n\t\
    }\n\tcount.forEach((value, key) => {\n\t\tif(value === n){\n\t\t\twords.push(key);\n\
    \t\t}\n\t});\n\treturn words;\n}\n", "\tlet words = [];\n\tlet list = [];\n\t\
    let counter = 0;\n\tlet i = 0;\n\tlet k = 0;\n\tlet j = 0;\n\tlet l = s.length\
    \ - 1;\n\t\n\tfor(let l = 0; l <= l; l++){\n\t\tif(s[l] == \" \"){\n\t\t\tcounter++;\n\
    \t\t}\n\t\telse{\n\t\t\tif(counter == n){\n\t\t\t\twords.push(s.slice(i, j+1));\n\
    \t\t\t\ti = j;\n\t\t\t\tj = l+1;\n\t\t\t\tcounter = 0;\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tcounter = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\twords.push(s.slice(i, j+1));\n\t\
    return words;\n}\n", "  var result = [];\n  s = s.split('');\n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.indexOf(s[i], i) == i){\n      if(s.length - i > n){\n     \
    \   result.push(s.slice(i, i+n+1))\n      }\n    }\n  }\n  if(s.length > 0){\n\
    \    var tmp = [];\n    for(var i=0; i<s.length; i++){\n      if(s.indexOf(s[i],\
    \ i) == i){\n        if(s.length - i > n){\n          tmp.push(s.slice(i, i+n+1))\n\
    \        }\n      }\n    }\n    result.push(tmp);\n  }\n  return result;\n}\n",
  "\t\n\t// Create a dictionary to count the number of times each word appears in\
    \ s\n\tvar d = {};\n\tvar word_list = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\
    \t\t\n\t\t// Get the word and increment it's value if it doesn't already exist\n\
    \t\tvar word = s.substr(i, i+1);\n\t\tif(!d[word]){\n\t\t\td[word] = 1;\n\t\t\
    }else{\n\t\t\td[word]++;\n\t\t}\n\t\t\n\t\t\n\t\t// If the current word is more\
    \ than n characters and it's also a key in the dictionary\n\t\t// then add the\
    \ current word to the result list\n\t\t\n\t\tif(d[word] > n && word in d){\n\t\
    \t\tword_list.push(word);\n\t\t}\n\t}\n\t\n\treturn word_list;\n}\n", "\t// base\
    \ case\n\tif (s.length === 0) {\n\t\treturn [];\n\t}\n\t// return array of words\
    \ that are contained in s\n\t\n\tvar words = [];\n\tvar current_word = s;\n\t\n\
    \t// search each letter in s\n\tfor (var i = 0; i < s.length; i++){\n\t\t\n\t\t\
    // if current letter in s\n\t\t\n\t\tif (s[i] in vowels) {\n\t\t\t\n\t\t\t// add\
    \ current letter to current word\n\t\t\t\n\t\t\tcurrent_word += s[i];\n\t\t\t\n\
    \t\t\t// add words to return array\n\t\t\t\n\t\t\twords.push(current_word);\n\t\
    \t\t\n\t\t\t// if current letter in s\n\t\t\t\n\t\t\tcurrent_word = '';\n\t\t\t\
    \n\t\t\t// reset current word \n\t\t\t\n\t\t}\n\t}\n\t\n\t// return array of words\
    \ contained in s\n\t\n\treturn words;\n\t\n}\n", "  var res = [];\n  for(var i=0;\
    \ i<s.length; i++){\n    var word = s.substring(i,i+n);\n    res.push (word);\n\
    \  }\n  return res;\n}\n", "  let ar = [];\n  if(s.length == 0){\n    return ar;\n\
    \  }\n  for(let i = 0;i < s.length;i++){\n    if(s.length - i <= n || s.length\
    \ - i == 0){\n      ar.push(s.slice(i, s.length));\n    }\n  }\n  return ar;\n\
    }\n", "  var words = s.split(\" \");\n  var list = [];\n  words.forEach(function(s){\n\
    \    for(var i = 0;i < s.length - n; i++){\n      if(s.substring(i, i+n).match(/([aeiou])/g)){\n\
    \        list.push(s);\n        break;\n      }\n    }\n  });\n  if(s.length ===\
    \ 0){\n    list = [];\n  }\n  return list;\n}\n", "    return s;\n}\n", "    \n\
    \    let arr = [];\n    \n    if (s.length === 0) return arr;\n    let words =\
    \ s.replace(/\\s+/ig,\"\").split(\" \");\n    \n    for (let i = 0; i < words.length;\
    \ i++){\n        let reg = new RegExp(`.*[${vowels.join(\"\")}]${words[i]}`,\"\
    gi\");\n        if (reg.test(s)) arr.push(words[i]);\n    }\n    \n    return\
    \ arr;\n}\n\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"\
    Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white\
    \ space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little lamb\", 1) ==>\
    \ []\nselect_words(\"Mary had a little lamb\", 2) ==> []\nselect_words(\"Mary\
    \ had a little lamb\", 3) ==> []\nselect_words(\"Mary had a little lamb\", 4)\
    \ ==> []\nselect_words(\"Mary had a little lamb\", 5) ==> []\nselect_words(\"\
    Mary had a little lamb\", 6) ==> []\nselect_words(\"Mary had a little lamb\",\
    \ 7) ==> []\nselect_words(\"Mary had a little lamb\", 8) ==> []\nselect_words(\"\
    Mary had a little lamb\", 9) ==> []\nselect_words(\"Mary had a little lamb\",\
    \ 10) ==> []\nselect_words(\"Mary had a little lamb\", 11) ==> []\nselect_words(\"\
    Mary had a little lamb\", 12) ==> []\nselect_words(\"Mary had a little lamb\"\
    , 13) ==> []\nselect_words(\"Mary had a little lamb\", 14) ==> []\nselect_words(\"\
    Mary had a little lamb\", 15) ==> []\nselect_words(\"Mary had a little lamb\"\
    , 16) ==> []\nselect_words(\"Mary had a little lamb\", 17) ==> []\nselect_words(\"\
    Mary had a little lamb\", 18) ==> []\nselect_words(\"Mary had a little lamb\"\
    , 19) ==> []\nselect_words(\"Mary had a little lamb\", 20) ==> []\nselect_words(\"\
    Mary had a little lamb\", 21) ==> []\nselect_words(\"Mary had a little lamb\"\
    , 22) ==> []\nselect_words(\"Mary had a little lamb\", 23) ", "  if(s === null\
    \ || s === \"\"){\n    return [];\n  }\n\n  if(n === 0){\n    return s;\n  }\n\
    \n  let arr = [];\n  let pos = 0;\n  let start = 0;\n  let end = 0;\n  while(pos\
    \ <= s.length){\n    start = s.indexOf(\"a\", pos);\n    end = s.indexOf(\"e\"\
    , pos);\n    if(end === -1 || end < start){\n      arr.push(s.substring(start,\
    \ pos));\n      pos = s.length + 1;\n    }else{\n      arr.push(s.substring(start,\
    \ end)); \n      pos = end + 1;\n    }\n  }\n  return arr;\n}\n", "  let arr =\
    \ s.split(\" \");\n  let res = [];\n  for(let i = 0; i < arr.length; i++){\n \
    \   let str = arr[i].split(\"\");\n    let count = 0;\n    for(let j = 0; j <\
    \ str.length; j++){\n      if(str[j] === \" \"){\n        count++;\n      }\n\
    \      if(count === n){\n        res.push(arr[i]);\n      }\n    }\n  }\n  return\
    \ res;\n}\n", "\tvar arr = s.split(' ');\n\tvar words = arr.filter(function(word){\n\
    \t\treturn word.split('').filter(function(char){\n\t\t\treturn char.match(/[Cc]onsonant/);\n\
    \t\t}).length === n;\n\t});\n\treturn words;\n}", "  \n  if (s === ''){\n    return\
    \ [];\n  }\n\n  var list = [];\n  \n  for (var i = 0; i < s.length; i++){\n  \
    \  if (s.substr(i, n + 1).indexOf(\"con\") === -1){\n      list.push(s.substr(i,\
    \ n + 1));\n    }\n  }\n  \n  return list;\n}\n", "  \n}\n</cell>\n<text>\nProblem\
    \ 8\nYou are given a list of words and a list of corresponding frequencies.  Your\
    \ task is to find all of the words that appear exactly once and in order.\n\n\
    For example, given the list of words and frequencies below:\n\nwords = ['i', 'have',\
    \ 'problems', 'with', 'solving', 'contests']\nfrequencies = [3, 1, 2, 2, 4, 0]\n\
    You should return the following list:\n\n['i', 'have', 'problems', 'with', 'solving',\
    \ 'contests']\n\n</text>\n<cell>\nvar words = ['i', 'have', 'problems', 'with',\
    \ 'solving', 'contests'];\nvar frequencies = [3, 1, 2, 2, 4, 0];\n", "    // Your\
    \ code goes here\n    var result = [];\n    var words = [];\n    for(var i = 0;\
    \ i < s.length; i++){\n        words.push(s.charAt(i));\n    }\n    var count\
    \ = 0;\n    for(var i = 0; i < words.length; i++){\n        if(words[i] === 'a'\
    \ || words[i] === 'e' || words[i] === 'i' || words[i] === 'o' || words[i] ===\
    \ 'u' || words[i] === 'y' || words[i] === '\xE6'){\n            count++;\n   \
    \     }\n    }\n    for(var i = 0; i < words.length; i++){\n        if(words[i]\
    \ === 'a' || words[i] === 'e' || words[i] === 'i' || words[i] === 'o' || words[i]\
    \ === 'u' || words[i] === 'y' || words[i] === '\xE6'){\n            result.push(words[i]);\n\
    \        }\n    }\n    for(var i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o'\
    \ || s.charAt(i) === 'u' || s.charAt(i) === 'y' || s.charAt(i) === '\xE6'){\n\
    \            count--;\n        }\n    }\n    return result.length === n ? result\
    \ : [];\n}", "  return s.split(' ').filter(function(word) {\n    return (select_cons(word,\
    \ n) > 0);\n  });\n}\n", "  var list = [];\n  for(var i = 0; i<s.length; i++){\n\
    \    if(s.charAt(i) != '\\0'){\n      var list2 = select_word(s.substring(i),\
    \ n);\n      list = list.concat(list2);\n    }\n  }\n  return list;\n}\n", " \
    \ // TODO: your implementation here.\n}\n", "\ts = s.split(\" \");\n\treturn s.filter(function(v){\n\
    \t\tvar count = v.split('').filter(function(l){\n\t\t\treturn l != ' ' && l !=\
    \ '.';\n\t\t}).length;\n\t\treturn count === n;\n\t});\n};\n", "    var words\
    \ = [];\n    var l = s.length;\n    var last = 0;\n    var i = 0;\n    var j =\
    \ 0;\n    var k = 0;\n    var m;\n    var v;\n    while(i < l){\n        m = s.substr(last,\
    \ i - last);\n        words.unshift(m);\n        last = i;\n        i += m - m\
    \ + 1;\n        while(i < l){\n            v = s.substr(last, i - last);\n   \
    \         if(v.match(/^[a-zA-Z]+$/)){\n                k = i;\n              \
    \  break;\n            }\n            i += v.length;\n        }\n        if(k\
    \ > i){\n            words.unshift(s.substr(last, k - last));\n        }\n   \
    \ }\n    if(words.length < n){\n        words.push(\"...\");\n    }\n    return\
    \ words;\n}\n", "  if(s.length === 0){\n    return [];\n  }\n  let count = new\
    \ Array(n).fill(0);\n  let newWords = [];\n  let pos = 0;\n  let index = 0;\n\
    \  while (pos < s.length){\n    for(let i = 0; i < n; i++){\n      if(s.charAt(pos)\
    \ === s.charAt(pos + i)){\n        count[i]++;\n        pos += i + 1;\n      \
    \  break;\n      }\n    }\n    if(count[n - 1] === 0){\n      newWords.push(s.slice(index,\
    \ pos));\n      index = pos;\n      pos = 0;\n    }\n  }\n  return newWords;\n\
    }\n", "    let list = [''];\n    let words = select_word(s,0,n,list);\n    if\
    \ (words.length === 0) return list;\n    return words;\n}\n", "    return [];\n\
    }\n", "\treturn s.split(\" \").filter(function(w){\n\t\treturn w.split(\"\").length==n;\n\
    \t});\n}\n", "  //Implement here\n}\n", "\tlet l = [];\n\tlet count = 0;\n\tfor(let\
    \ i = 0; i < s.length; i++){\n\t\tlet temp = s.charAt(i);\n\t\tif(temp.match(/[a-z]/)\
    \ && temp.match(/[aeiou]/)){\n\t\t\tfor(let j = 0; j < n; j++){\n\t\t\t\tif(s.charAt(i\
    \ + j) !== temp.charAt(j)){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount\
    \ += 1;\n\t\t\tl.push(temp);\n\t\t}\n\t}\n\treturn l;\n}\n", '}', "\tvar ans =\
    \ [], i, w, ws=s.split(' ');\n\tfor(i=0; i< ws.length; i++){\n\t\tw = ws[i];\n\
    \t\tif(w.indexOf(\"a\") > -1 && w.indexOf(\"e\") > -1 && w.indexOf(\"i\") > -1\
    \ && w.indexOf(\"o\") > -1 && w.indexOf(\"u\") > -1 ){\n\t\t\tans.push(w);\n\t\
    \t}\n\t\tif(w.indexOf(\"b\") > -1 && w.indexOf(\"e\") > -1 && w.indexOf(\"i\"\
    ) > -1 && w.indexOf(\"o\") > -1 && w.indexOf(\"u\") > -1 ){\n\t\t\tans.push(w);\n\
    \t\t}\n\t\tif(w.indexOf(\"e\") > -1 && w.indexOf(\"i\") > -1 && w.indexOf(\"o\"\
    ) > -1 && w.indexOf(\"u\") > -1 ){\n\t\t\tans.push(w);\n\t\t}\n\t\tif(w.indexOf(\"\
    i\") > -1 && w.indexOf(\"o\") > -1 && w.indexOf(\"u\") > -1 ){\n\t\t\tans.push(w);\n\
    \t\t}\n\t\tif(w.indexOf(\"o\") > -1 && w.indexOf(\"u\") > -1 ){\n\t\t\tans.push(w);\n\
    \t\t}\n\t}\n\treturn ans;\n}\n", "    return [];\n}\n", "  return s;\n}\n", " \
    \ if (s === \"\") return [];\n  let count = 0;\n  const words = s.split(\" \"\
    );\n  let result = [];\n  words.forEach(word => {\n    if (word.split(\"\").filter((char)\
    \ => char === \",\").length === n){\n      result.push(word);\n      count++;\n\
    \    }\n  })\n  return count === 0 ? result : [];\n}\n", "    // TODO\n}\n</cell>\n\
    <text>\nProblem 8: Implement the function select_words_indexed\nGiven a string\
    \ s and a natural number n, you have been tasked to implement \na function that\
    \ returns a list of all words from string s that contain exactly \nn consonants,\
    \ in order these words appear in the string s.\nIf the string s is empty then\
    \ the function should return an empty list.\nNote: you may assume the input string\
    \ contains only letters and spaces.\nExamples:\nselect_words_indexed(\"Mary had\
    \ a little lamb\", 4) ==> [1, 5]\nselect_words_indexed(\"Mary had a little lamb\"\
    , 3) ==> [5, 6]\nselect_words_indexed(\"simple white space\", 2) ==> []\nselect_words_indexed(\"\
    Hello world\", 4) ==> [2, 3]\nselect_words_indexed(\"Uncle sam\", 3) ==> [7, 8]\n\
    select_words_indexed(\"Uncle sam\", 4) ==> []\nselect_words_indexed(\"Uncle sam\"\
    , 2) ==> []\nselect_words_indexed(\"Hello World\", 2) ==> []\nselect_words_indexed(\"\
    Hello World\", 1) ==> []\nselect_words_indexed(\"Hello World\", 5) ==> []\n\n\n\
    </text>\n<cell>", "\tlet words = [];\n\tlet s = s.replace(/[^\\w\\s]/gi, ' ');\n\
    \tlet words = s.match(/([\\w\\s]*)/g);\n\tlet count = {};\n\tfor (let i = 0; i\
    \ < words.length; i++) {\n\t\tlet word = words[i];\n\t\tlet counts = count[word];\n\
    \t\tif (!counts) {\n\t\t\tcounts = count[word] = [];\n\t\t}\n\t\tcounts.push(word);\n\
    \t}\n\tlet results = [];\n\tfor (let word in count) {\n\t\tlet counts = count[word];\n\
    \t\tlet count = 0;\n\t\tfor (let i = 0; i < counts.length; i++) {\n\t\t\tcount++;\n\
    \t\t\tif (count == n) {\n\t\t\t\tresults.push(counts[i]);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn results;\n}\n", "    var result = [];\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    var vowels = \"aeiou\";\n    var vowels_count = vowels.length;\n    for(var\
    \ i=0; i<s.length; i++){\n        var index = consonants.indexOf(s[i]);\n    \
    \    if(index > -1){\n            var vowels_index = index;\n            var vowel_next\
    \ = s.charAt(index + 1);\n            var vowel_prev = s.charAt(index - 1);\n\
    \            if(vowel_next == vowels[index]){\n                if(vowel_prev ==\
    \ vowels[index]){\n                    vowels_index += 2;\n                }\n\
    \            }\n            index = vowels_index - vowels_count;\n           \
    \ result.push(s.slice(index, index+n));\n        }\n    }\n    return result;\n\
    }\n</cell>\n<text>\nTest your code\nRun the cell below to test the select_words\
    \ function on several different test cases. We should expect the following results\
    \ for several of these cases:\n\nThe word \"Mary\" should have exactly three letters\n\
    The word \"Hello\" should have exactly two letters\nThe word \"Hello\" should\
    \ be at the end of the list.\n\n\n</text>\n<cell>\nprint(\"The words 'Mary', 'hello',\
    \ and 'goodbye' have three letters: \",\n      select_words(\"Mary had a little\
    \ lamb\", 3))\nprint(\"The words 'Mary', 'hello', and 'goodbye' have two letters:\
    \ \",\n      select_words(\"Hello world\", 2))\nprint(\"The word 'hello' should\
    \ be at the end of the list: \",\n      select_words(\"Hello world\", 4))\n</cell>\n\
    <text>\nSolution\nRun the code cell below to select the words that match your\
    \ selection.\n\n\n</text>\n<cell>\nselect_words(s, n)\n</cell>\n<text>\nAs a final\
    \ note, your solution should ensure that the function is always passed a valid\
    \ sentence, as it will error if it is given invalid input. For example, if you\
    \ call the function select_words with input s = \"Mary had a little lamb\" and\
    \ n = 4, it will output an error - because there is no word that contains four\
    \ letters as per the specification.\n\nYou will also need to use the .split()\
    \ method to convert the sentence into a list of individual words; this is covered\
    \ in a later notebook.\n\n\n</text>\n<text>\nPart 3: Test your Code\nRun the cell\
    \ block below to test your code.\n\n\n</text>\n<cell>\nrun_and_print(select_words)\n\
    </cell>\n<text>\nSolution\nRun the cell block below to test your code.\n\n\n</text>\n\
    <cell>\nrun_and_print(select_words, s=s)\n</cell>\n<text>\nPart 4: Apply your\
    \ Function to Sentences Not in the Dictionary\nIn addition to testing your function,\
    \ you will now apply it to the sentence \"Hi mom, and ", "  if(!s){\n    return\
    \ []\n  }\n  let words = []\n  for(let char of s){\n    if(char.match(/[aeiou]/g)){\n\
    \      words.push(char)\n    }\n  }\n  return words.filter((word, i) => {\n  \
    \  return word.match(/[aeiouy]+/g).length === n\n  }).sort((a, b) => {\n    let\
    \ aIndex = a.indexOf(b)\n    if(aIndex === -1){\n      return -1\n    }\n    if(aIndex\
    \ === b.length){\n      return 1\n    }\n    return aIndex - b.length\n  })\n\
    }\n", "  let list = [];\n\n  // Your Code Here\n  for (let i = 0; i < s.length;\
    \ i++){\n    for (let j = 0; j < n; j++){\n      if (s.includes(consonants[j])){\n\
    \        list.push(s);\n      }\n    }\n  }\n  \n  return list;\n}\n", "  if(n===0)\
    \ return [];\n  var words=[];\n  var word=false;\n  var first=false;\n  for(var\
    \ i=0; i<s.length; i++){\n    first=false;\n    if(s[i]==\" \"){\n      word=true;\n\
    \      if(words) words.push(words);\n      words=[];\n    }else if(s[i]==\" \"\
    ){\n      word=true;\n      words.push(words);\n      words=[];\n    }else{\n\
    \      if(word) words.push(s);\n      word=false;\n      first=true;\n    }\n\
    \    if(first) words.push(s);\n  }\n  words=[];\n  for(var i=0; i<words.length;\
    \ i++){\n    var temp=[];\n    for(var j=0; j<words[i].length; j++){\n      temp=temp.concat(select_char(words[i][j]));\n\
    \    }\n    words[i]=temp;\n  }\n  return words;\n}\n", "    if (s === \"\" ||\
    \ n <= 0){\n        return [];\n    }\n    var arr = s.split(\" \");\n    return\
    \ arr.filter(function(item){\n        return item.length >= n && item.match(/[^aeiou]/g)\
    \ == null;\n    });\n}\n", "  var count = 0;\n  var arr = new Array();\n  for(var\
    \ i=0; i<s.length; i++){\n    if(s[i]==' '){\n      if(count==n){\n        arr.push(s.slice(i,\
    \ i+n+1));\n      }\n      count=0;\n    }\n    else{\n      count++;\n    }\n\
    \  }\n  return arr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
