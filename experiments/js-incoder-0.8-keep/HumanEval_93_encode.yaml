name: HumanEval_93_encode
language: js
prompt: "//Write a function that takes a message, and encodes in such a \n// way that\
  \ it swaps case of all letters, replaces all vowels in \n// the message with the\
  \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
  \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n//\
  \ >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
  Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
  This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt\
  \ KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
completions: ["  if(!message.length) return message;\n  var alphabet = \n      'abcdefghijklmnopqrstuvwxyz'.split('');\n\
    \  var newmessage = message\n      .replace(/[a-z]/g, function(c){\n        var\
    \ idx = alphabet.indexOf(c);\n        if(idx === 0) return c;\n        return\
    \ alphabet[alphabet.indexOf(c) + 2];\n      });\n  return newmessage;\n}", " \
    \ const dictionary = {};\n  for(let i=0; i<message.length; i++){\n    const letter\
    \ = message[i];\n    if(!dictionary.hasOwnProperty(letter)){\n      dictionary[letter]\
    \ = `a${i}`;\n    }\n  }\n  const res = [];\n  for(let i=0; i<message.length;\
    \ i++){\n    const letter = message[i];\n    const newLetter = dictionary[letter];\n\
    \    const isVowel = dictionary.hasOwnProperty(letter + 1);\n    if(newLetter\
    \ !== letter){\n      res.push(newLetter);\n      if(isVowel){\n        res.push(`v${newLetter}`);\n\
    \      }\n    }\n  }\n  return res.join('');\n}\n", "    return message.split('').map(function(c)\
    \ {\n        return c\n            .toLowerCase()\n            .replace(/[aeiou]/gi,\
    \ function(m) {\n                return m.toUpperCase();\n            })\n   \
    \         .replace(/[aeiou]{2}/g, 'Z')\n    })\n    .join('');\n}\n", "  \n  var\
    \ result = ''\n  \n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message[i]\n    if(letter != ' ' && letter != '_'){\n      letter = letter.toUpperCase()\n\
    \    }\n    \n    if(letter != 'A' && letter != 'E' && letter != 'I' && letter\
    \ != 'O' && letter != 'U'){\n      letter = letter.charCodeAt(0)\n    }\n    \n\
    \    switch(letter){\n      case 97: // a\n      case 98: // b\n      case 99:\
    \ // c\n      case 100: // d\n      case 101: // e\n      case 102: // f\n   \
    \   case 103: // g\n      case 104: // h\n      case 105: // i\n      case 106:\
    \ // j\n      case 107: // k\n      case 108: // l\n      case 109: // m\n   \
    \   case 110: // n\n      case 111: // o\n      case 112: // p\n      case 113:\
    \ // q\n      case 114: // r\n      case 115: // s\n      case 116: // t\n   \
    \   case 117: // u\n      case 118: // v\n      case 119: // w\n      case 120:\
    \ // x\n      case 121: // y\n      case 122: // z\n        result += letter\n\
    \        break\n      case 65: // a\n      case 66: // b\n      case 67: // c\n\
    \      case 68: // d\n      case 69: // e\n      case 70: // f\n      case 71:\
    \ // g\n      case 72: // h\n      case 73: // i\n      case 74: // j\n      case\
    \ 75: // k\n      case 76: // l\n      case 77: // m\n      case 78: // n\n  \
    \    case 79: // o\n      case 80: // p\n      case 81: // q\n      case 82: //\
    \ r\n      case 83: // s\n      case 84: // t\n      case 85: // u\n      case\
    \ 86: // v\n      case 87: // w\n      case 88: // x\n      case 89: // y\n  \
    \    case 90: // z\n        result += 'A'\n        break\n      case 97: // a\n\
    \      case 98: // b\n      case 99: // c\n      case 100: // d\n      case 101:\
    \ // e\n      case 102: // f\n      case 103: // g\n      case 104: // h\n   \
    \   case 105: // i\n      case 106: // j\n      case 107: // k\n      case 108:\
    \ // l\n      case 109: // m\n      case 110: // n\n      case 111: // o\n   \
    \   case 112: // p\n      case 113: // q", "    let encoded = message;\n    let\
    \ vowels = 'aeiouAEIOU';\n    let vowelsCounts = {};\n    for(let i = 0; i < vowels.length;\
    \ i++){\n        vowelsCounts[vowels[i]] = [];\n    }\n    for(let i = 0; i <\
    \ message.length; i++){\n        let currentVowel = message.charAt(i);\n     \
    \   let nextVowel = message.charAt(i + 1);\n        if(vowelsCounts[currentVowel]){\n\
    \            vowelsCounts[currentVowel].push(nextVowel);\n        }\n    }\n \
    \   for(let vowel in vowelsCounts){\n        let vowels = vowelsCounts[vowel];\n\
    \        let replacement = vowels[Math.floor(vowels.length / 2)];\n        for(let\
    \ i = 0; i < vowels.length; i++){\n            if(vowels[i] === replacement){\n\
    \                encoded = encoded.replace(vowels[i], replacement);\n        \
    \        break;\n            }\n        }\n    }\n    return encoded;\n}\n", " \
    \   var res = ''\n    var vowels = ['a', 'e', 'i', 'o', 'u']\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i)\n     \
    \   if(vowels.indexOf(letter) > -1) letter += letter.toLowerCase()\n        res\
    \ += letter\n    }\n    return res\n}\n", "    const vowels = 'aeiouAEIOU';\n\
    \    const message = message.toLowerCase();\n    \n    for (let i = 0; i <= message.length;\
    \ i++){\n        let letter = message.charAt(i);\n        if(letter === vowels[i]\
    \ || i === message.length){\n            letter = vowels[(i+1)%vowels.length];\n\
    \        }\n        message += letter;\n    }\n    return message;\n}", "  var\
    \ result = \"\";\n  for (var i = 0; i < message.length; i++) {\n    var letter\
    \ = message.charAt(i);\n    var firstLetter = letter.charCodeAt(0);\n    var nextLetter\
    \ = message.charAt(i + 1);\n    if (firstLetter - 2 < 26 && nextLetter - 2 < 26)\
    \ {\n      result += String.fromCharCode(firstLetter + 2 - 26);\n      result\
    \ += String.fromCharCode(nextLetter + 2 - 26);\n    } else {\n      result +=\
    \ letter;\n    }\n  }\n  return result;\n}", "  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\
    \ \n  let res = ''; \n  let i = 0;\n  for(let j = 0; j < message.length; j++){\n\
    \    let letter = message[j]\n    for(let k = 0; k < alphabet.length; k++){\n\
    \      if(letter == alphabet[k]){\n        let temp = alphabet[k]\n        alphabet[k]\
    \ = alphabet[k+1]\n        alphabet[k+1] = temp\n      }\n    }\n    for(let k\
    \ = 0; k < alphabet.length; k++){\n      if(alphabet[k] == alphabet[i+j]){\n \
    \       res += letter\n        break\n      }\n    }\n    res += alphabet[i+j]\n\
    \    i += j\n  }\n  return res\n}", "    var letters = [];\n    for(var i = 0;\
    \ i<message.length; i++){\n        var letter = message[i].toUpperCase();\n  \
    \      if(letters.indexOf(letter)===-1){\n            letters.push(letter);\n\
    \        }\n    }\n    var messageLetters = [];\n    var tempLetter;\n    for(var\
    \ j=0; j<letters.length; j++){\n        tempLetter = letters[j];\n        var\
    \ positionOfLetter = j;\n        messageLetters.push(tempLetter);\n        for(var\
    \ k=0; k<message.length-1; k++){\n            if(message[k] === tempLetter){\n\
    \                positionOfLetter = k;\n                break;\n            }\n\
    \        }\n        letters[j] = english[positionOfLetter];\n    }\n    var finalMessage\
    \ = '';\n    for(var k=0; k<messageLetters.length; k++){\n        finalMessage\
    \ += messageLetters[k];\n    }\n    return finalMessage;\n}", "  var output =\
    \ '';\n  for(var i=0;i<message.length;i++){\n    var letter = message.charCodeAt(i);\n\
    \    var index = letter % 33;\n    letter = String.fromCharCode(letter - index);\n\
    \    output += letter;\n    index = index - 3;\n    if(index>2){\n      var letter2\
    \ = message.charCodeAt(i+1);\n      var index2 = letter2 % 33;\n      letter2\
    \ = String.fromCharCode(letter2 - index2);\n      output += letter2;\n    }\n\
    \  }\n  return output;\n}\n", "    var messageArr = message.split('');\n    var\
    \ encoded = [];\n    for (var i = 0; i < messageArr.length; i++) {\n        var\
    \ letter = messageArr[i].toUpperCase();\n        var swap = letter.split('');\n\
    \        var reversedLetter = swap.reverse().join('');\n        reversedLetter\
    \ = reversedLetter.toLowerCase();\n        var index = alphabet.indexOf(reversedLetter);\n\
    \        var twoLettersAhead = alphabet.indexOf(reversedLetter, index + 1);\n\
    \        var encoded = encoded.concat(twoLettersAhead);\n        encoded = encoded.concat(letter);\n\
    \    }\n    return encoded.join('');\n}\n", "    let newMessage = '';\n    for\
    \ (let i = 0; i < message.length; i++){\n        const letterIndex = message.charAt(i).toLowerCase().charCodeAt(0)\
    \ - 97;\n        let letter = String.fromCharCode(letterIndex);\n        for (let\
    \ j = i - 1; j >= 0; j--) {\n            const letterIndex = message.charAt(j).toLowerCase().charCodeAt(0)\
    \ - 97;\n            if (letterIndex === letter) {\n                letter = String.fromCharCode(letterIndex\
    \ + 2);\n            }\n        }\n        newMessage += letter;\n    }\n    return\
    \ newMessage;\n}\n", "  let encodedMessage = ''\n  for(let char of message){\n\
    \    const lowerChar = char.toLowerCase()\n    if(/[a-z]/g.test(lowerChar)){\n\
    \      let letter = char.charCodeAt(0)\n      let vowels = ['a','e','i','o','u','y']\n\
    \      for(let i=0; i<vowels.length; i++){\n        if(letter === vowels[i]){\n\
    \          letter -= 26\n        }\n      }\n      encodedMessage += String.fromCharCode(letter)\n\
    \    }\n  }\n  return encodedMessage\n}\n", "  let newMessage = '';\n  for(var\
    \ i = 0; i < message.length; i++){\n    let currentLetter = message[i];\n    let\
    \ letterIndex = letters.indexOf(currentLetter);\n    newMessage += letters[letterIndex\
    \ % letters.length];\n  }\n  return newMessage;\n}\n", "  var newMessage = message.toUpperCase()\n\
    \  var newMessageArr = newMessage.split('')\n  var newMessageArr2 = []\n  var\
    \ len = newMessageArr.length\n  var i = 0\n  for (i = 0; i < len; i++){\n    var\
    \ letter = newMessageArr[i]\n    var letterIndex = letter.toLowerCase().charCodeAt(0)\
    \ - 'a'.charCodeAt(0)\n    var letterToSwap = letter \n    var letterToSwapIndex\
    \ = letterIndex - 2\n    letterToSwapIndex = letterToSwapIndex % 26\n    letterToSwap\
    \ = String.fromCharCode(letterToSwapIndex + 'a'.charCodeAt(0) + letterToSwapIndex)\n\
    \    newMessageArr2.push(letterToSwap)\n  }\n  var newMessageNew = newMessageArr2.join('')\n\
    \  return newMessageNew\n}\n</code>\n<|/ a |>\n<| a tags=string,javascript |>\n\
    A simple way to do this would be to split your message into an array of characters,\
    \ and then filter it using Array.prototype.filter() by applying some function\
    \ to each of the characters in the array. For each character in the message, if\
    \ the character is an uppercase letter, then we swap the current character with\
    \ an uppercased character one letter ahead in the alphabet. If it is an uppercase\
    \ letter and it is followed by another uppercase letter, then we swap the two\
    \ characters.\nTo get the character one letter ahead of the current character,\
    \ we could use String.fromCharCode(). To get the character two characters ahead\
    \ of the current character, we could use String.fromCharCode() + 1.\n\n<code>",
  "  var encodedMessage = \"\";\n  var vowel = \"A\";\n  var nextVowel = \"a\";\n\
    \  for(var i = 0; i < message.length; i++){\n    encodedMessage += message[i].toUpperCase();\n\
    \    if(message[i].toLowerCase() != message[i].toUpperCase()){\n      encodedMessage\
    \ += nextVowel;\n      nextVowel = \"b\";\n    }\n    else if(message[i] == vowel){\n\
    \      nextVowel = \"b\";\n    }\n    else{\n      nextVowel = \"a\";\n    }\n\
    \  }\n  return encodedMessage;\n}\n", "  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  var res = [];\n  for(var i=0; i<message.length; i++){\n    if(alphabet.indexOf(message[i].charAt(0))!=-1){\n\
    \      res.push(alphabet[alphabet.indexOf(message[i].charAt(0))+2]+message[i].charAt(0));\n\
    \    }\n    else{\n      res.push(message[i]);\n    }\n  }\n  return res.join('');\n\
    }\n</code>\n<|/ a dscore=2 tags=python,string,algorithm |>\n<| a tags=python,string,algorithm\
    \ |>\nI wrote a script in Python to solve a similar problem, which might also\
    \ be of interest. It uses recursion, which is explained here.\n<code>\ndef get_anagram(message,\
    \ alphabet=('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')):\n\
    \    \"\"\"\n    Recursively prints the anagrams of a message\n    \"\"\"\n  \
    \  if not message:\n        return\n    anagram = \"\"\n    anagrams = \"\"\n\
    \    letter = message.lower()[0]\n    if letter in alphabet:\n        anagram\
    \ = alphabet[alphabet.index(letter) + 1] + letter\n        anagrams += anagram\n\
    \        get_anagram(message[1:],alphabet)\n    print(anagrams)\n</code>\nThe\
    \ code uses recursion to print every single anagram in the alphabet. It works\
    \ by comparing the first letter of the message to the alphabet list, which contains\
    \ every single letter and its index in the alphabet. By adding the index 1 to\
    \ the current letter's index, it selects the next letter in the alphabet, until\
    \ the message is empty. After each letter is added, a list is printed which contains\
    \ the resulting anagrams.\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere is my solution\
    \ in Java using JDK8.\n<code>\npublic class Anagram{\n\n    private static String\
    \ anagram(String s, Map<String, String> map) {\n        Map<String, String> sorted\
    \ = map.entrySet().stream().sorted((e1, e2) -> e1.getValue().compareTo(e2.getValue())).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue));\n        List<String> result = new ArrayList<>();\n \
    \       char[] chars = s.toCharArray();\n        char[] sortedChars = sorted.keySet().toArray(new\
    \ char[0]);\n        Arrays.sort(sortedChars);\n        for (int i = 0; i < chars.length;\
    \ ++i) {\n            boolean found = false;\n            for (int j = 0; j <\
    \ sortedChars.length; ++j) {\n                if (sortedChar", "  // Do your work\
    \ here\n  return message;\n}\n", "  var letterIndex = 0;\n  var encodedMessage\
    \ = '';\n  for (var i = 0; i < message.length; i++){\n    var currentLetter =\
    \ message.charAt(i);\n    encodedMessage += currentLetter;\n    if (letter ===\
    \ 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'){\n\
    \      letterIndex++;\n      encodedMessage += message.charAt(letterIndex).toUpperCase();\n\
    \      letterIndex += 2;\n    } else {\n      encodedMessage += message.charAt(letterIndex).toLowerCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n", "  for (var i = 0; i < message.length;\
    \ i++) {\n    if (message.charCodeAt(i) < 65) {\n      message += String.fromCharCode(message.charCodeAt(i)\
    \ + 2);\n    } else if (message.charCodeAt(i) > 90) {\n      message += String.fromCharCode(message.charCodeAt(i)\
    \ - 26);\n    } else if (message.charCodeAt(i) < 97) {\n      message += String.fromCharCode(message.charCodeAt(i)\
    \ + 26);\n    }\n  }\n  return message;\n}\n", "    var letters = message.toLowerCase().split('');\n\
    \    var vowels = Object.keys(vowelMap);\n    var res = [];\n    for(let i = 0;\
    \ i < letters.length; i++){\n        let l = letters[i];\n        if(vowels.indexOf(l)\
    \ !== -1){\n            res.push(vowelMap[l]);\n        }else{\n            if((letters.length\
    \ - 1) > i){\n                let v = letters[i + 1];\n                res.push(vowelMap[v]\
    \ + v);\n            }\n        }\n    }\n    return res.join('');\n}\n", "  let\
    \ result = \"\";\n  let vowels = [\"A\",\"E\",\"I\",\"O\",\"U\"];\n  for (let\
    \ i = 0; i < message.length; i++){\n    let letter = message[i];\n    if (vowels.includes(letter)){\n\
    \      letter += letter.charAt(0);\n    }\n    result += letter;\n  }\n  return\
    \ result;\n}\n", "    let newMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++){\n        newMessage += message[i].replace(\n            /[a-z]/g, \n \
    \           m => `${m.toUpperCase()}${m.toLowerCase()}`\n        ).replace(/[aeiou]/ig,\
    \ m => m.toUpperCase())\n    }\n    return newMessage;\n}\n", "    let output\
    \ = message.replace(/([aeiou])/g,function(match,group1) {\n        return (group1.match(/e|i/)\
    \ ? group1 : 'k'\n        );\n        });\n        output = output.replace(/[cg]/g,function(match,group1)\
    \ {\n            return group1.match(/h|g|j|k/) ? group1 : 's'\n            );\n\
    \            });\n        output = output.replace(/[qwrth]/g,function(match,group1)\
    \ {\n            return group1.match(/q|w|r|t|h/) ? group1 : 'k'\n           \
    \ );\n            });\n        output = output.replace(/[z]/g,function(match,group1)\
    \ {\n            return group1.match(/z|o/) ? group1 : 's'\n            );\n \
    \           });\n        output = output.replace(/[ghijklmn]/g,function(match,group1)\
    \ {\n            return group1.match(/k|g|h|j|l|n|i/) ? group1 : 'k'\n       \
    \     );\n            });\n        output = output.replace(/[eiouy]/g,function(match,group1)\
    \ {\n            return group1.match(/e|i|o/) ? group1 : 'k'\n            );\n\
    \            });\n        output = output.replace(/[aou]/g,function(match,group1)\
    \ {\n            return group1.match(/a|o/) ? group1 : 'k'\n            );\n \
    \           });\n        output = output.replace(/[iyuio]/g,function(match,group1)\
    \ {\n            return group1.match(/i|y|o|u/) ? group1 : 'k'\n            );\n\
    \            });\n        output = output.replace(/[aeiou]/g,function(match,group1)\
    \ {\n            return group1.match(/a|e|i|o/) ? group1 : 'k'\n            );\n\
    \            });\n        output = output.replace(/[q]/g,function(match,group1)\
    \ {\n            return group1.match(/q/) ? group1 : 's'\n            );\n   \
    \         });\n        output = output.replace(/[s]/g,function(match,group1) {\n\
    \            return group1.match(/s/) ? group1 : 'k'\n            );\n       \
    \     });\n        output = output.replace(/[k]/g,function(match,group1) {\n \
    \           return group1.match(/k/) ? group1 : 's'\n            );\n        \
    \    });\n        output = output.replace(/[g]/g,function(match,group1) {\n  \
    \          return group1.match(/g/) ? group1 : 'k'\n            );\n         \
    \   });\n        output = output.replace(/[j]/g,function(match,group1) {\n   \
    \         return group1.match(/j/) ? group1 : 's'\n            );\n          \
    \  });\n        output = output.replace(/[l]/g,function(match,group1) {\n    \
    \        return group1.match(/l/) ? group1 : 'k'\n            );\n           \
    \ });\n        output = output.replace(/[n]/g,function(match,group1) {\n", " \
    \   let str = \"\";\n    for (let i = 0; i < message.length; i++){\n        let\
    \ letter = message.charAt(i).toUpperCase();\n        str = `${str}${letter.charCodeAt(0)\
    \ - 64}`;\n    }\n    return str;\n}", "\treturn message.replace(/./g, function(char){\n\
    \t\tswitch (char) {\n\t\t\tcase 'A': return 'a';\n\t\t\tcase 'B': return 'b';\n\
    \t\t\tcase 'C': return 'c';\n\t\t\tcase 'D': return 'd';\n\t\t\tcase 'E': return\
    \ 'e';\n\t\t\tcase 'F': return 'f';\n\t\t\tcase 'G': return 'g';\n\t\t\tcase 'H':\
    \ return 'h';\n\t\t\tcase 'I': return 'i';\n\t\t\tcase 'J': return 'j';\n\t\t\t\
    case 'K': return 'k';\n\t\t\tcase 'L': return 'l';\n\t\t\tcase 'M': return 'm';\n\
    \t\t\tcase 'N': return 'n';\n\t\t\tcase 'O': return 'o';\n\t\t\tcase 'P': return\
    \ 'p';\n\t\t\tcase 'Q': return 'q';\n\t\t\tcase 'R': return 'r';\n\t\t\tcase 'S':\
    \ return 's';\n\t\t\tcase 'T': return 't';\n\t\t\tcase 'U': return 'u';\n\t\t\t\
    case 'V': return 'v';\n\t\t\tcase 'W': return 'w';\n\t\t\tcase 'X': return 'x';\n\
    \t\t\tcase 'Y': return 'y';\n\t\t\tcase 'Z': return 'z';\n\t\t\tdefault: return\
    \ '?';\n\t\t}\n\t});\n}\n", "    let newMessage = message.replace(/[^a-zA-Z]/gi,\
    \ \" \")\n    let letters = newMessage.split(\" \").map((letter)=>{\n        letter\
    \ = letter.toUpperCase()\n        if (letter === 'A') return '@'\n        if (letter\
    \ === 'O') return '$'\n        if (letter === 'U') return 'U'\n        if (letter\
    \ === 'I') return 'I'\n        if (letter === 'E') return 'E'\n        if (letter\
    \ === 'N') return 'N'\n        if (letter === 'D') return 'D'\n        return\
    \ letter\n    }).join(\" \")\n    letters = letters.replace(/[AEIOUAEIOU]/gi,\
    \ letter=>{\n        return letter[letter.length-2]\n    })\n    letters = letters.replace(/[AEIOU]/gi,\
    \ letter=>{\n        return letter[letter.length-1]\n    })\n    return letters\n\
    }", "    let map = {};\n    let vowels = \"aeiouAEIOU\";\n    let letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    for (let i = 0; i < letters.length; i++){\n        map[letters[i]] = map[letters[i].toUpperCase()]\
    \ = \n        map[vowels[i]] = map[vowels[i].toUpperCase()] = \n        map[vowels[i\
    \ + 2]] = map[vowels[i + 2].toUpperCase()] = \n        map[vowels[i + 4]] = map[vowels[i\
    \ + 4].toUpperCase()] = letters[i]\n    }\n    return message.replace(/[a-z]/g,\
    \ (c) => map[c])\n}\n", "  return message\n  .replace(/([A-Z])/g,function(x){\n\
    \    return x.toUpperCase();\n  })\n  .replace(/[aeiouAEIOU]/g,function(x){\n\
    \    return 'k'+((x.toUpperCase()=='E') ? 'e' : (x.toUpperCase()=='O') ? 'o' :\
    \ 'u');\n  })\n  .replace(/[AEIOUaeiouAEIOU]/g,function(x){\n    return 'k'+((x.toUpperCase()=='E')\
    \ ? 'e' : (x.toUpperCase()=='O') ? 'o' : 'u');\n  });\n}\n", "  var vowels = 'aeiou'.split('');\n\
    \  var letters = message.split('');\n  var result = '';\n  \n  for(var i = 0;\
    \ i < letters.length; i++){\n    if(letters[i].match(vowels)){\n      var pos\
    \ = vowels.indexOf(letters[i]);\n      result += (pos - 1);\n      result += (letters[i].match(/[aeiou]/)\
    \ ? 2 : 0);\n      result += vowels[pos];\n    } else {\n      result += letters[i];\n\
    \    }\n  }\n  \n  return result;\n}\n", "    var newMessage = \"\";\n    message\
    \ = message.toLowerCase(); //Make sure case is all lowercase.\n    var firstVowel\
    \ = message.indexOf('a');\n    var lastVowel = message.lastIndexOf('e');\n   \
    \ var letterCount = 0;\n    for (var i = 0; i <= lastVowel; i++) {\n        var\
    \ letter = message[i];\n        var nextLetter = message[i+1];\n        var letterFound\
    \ = false;\n        for (var j = 0; j < alphabet.length; j++) { //Go through all\
    \ letters in alphabet\n            if (letter.toLowerCase() == alphabet[j].toLowerCase()){\n\
    \                letterFound = true;\n            }\n        }\n        if (letterFound)\
    \ { //If letter found, set variable for position ahead of letter in alphabet\n\
    \            if (i == firstVowel){\n                letterCount++;\n         \
    \   } else {\n                letterCount--;\n            }\n        }\n    }\n\
    \    \n    for (var i = 0; i < message.length; i++){\n        if (i == firstVowel){\n\
    \            newMessage += message[i] + 'a' + alphabet[letterCount];\n       \
    \ } else {\n            newMessage += message[i];\n        }\n    }\n    return\
    \ newMessage;\n}", "  return message.toUpperCase().replace(/[A-Z]/g, char => char.toUpperCase())\n\
    \                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n    \
    \                 .replace(/[AEIOUY]/g, char => char.toUpperCase())\n        \
    \             .replace(/[AEIOUY]/g, char => char.toUpperCase())\n            \
    \         .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                \
    \     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                    \
    \ .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g,\
    \ char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char\
    \ => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n\
    \                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n    \
    \                 .replace(/[AEIOUY]/g, char => char.toUpperCase())\n        \
    \             .replace(/[AEIOUY]/g, char => char.toUpperCase())\n            \
    \         .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                \
    \     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                    \
    \ .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g,\
    \ char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char\
    \ => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n\
    \                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n    \
    \                 .replace(/[AEIOUY]/g, char => char.toUpperCase())\n        \
    \             .replace(/[AEIOUY]/g, char => char.toUpperCase())\n            \
    \         .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                \
    \     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                    \
    \ .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g,\
    \ char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char\
    \ => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n\
    \                     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n    \
    \                 .replace(/[AEIOUY]/g, char => char.toUpperCase())\n        \
    \             .replace(/[AEIOUY]/g, char => char.toUpperCase())\n            \
    \         .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                \
    \     .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                    \
    \ .replace(/[AEIOUY]/g, char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g,\
    \ char => char.toUpperCase())\n                     .replace(/[AEIOUY]/g, char\
    \ => char.toUpperCase())\n                     .replace(/[AEIOUY]", "    let result\
    \ = \"\";\n    for(let i = 0; i < message.length; i++){\n        result += alphabet.charAt(message[i].toUpperCase().charCodeAt()\
    \ - 65) + \n        alphabet.charAt(message[i].charCodeAt() - 65) + message.substr(i,\
    \ 1)\n    }\n    return result\n}\n", "  var alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .split(\"\");\n  var aVowels = \"AEIOU\".split(\"\");\n  var result = \"\";\n\
    \  var swapped;\n  for (var i = 0; i < message.length; i++){\n    swapped = false;\n\
    \    for (var j = 0; j < alpha.length; j++){\n      if (message[i] == alpha[j]){\n\
    \        result += alpha[j];\n        swapped = true;\n        for(var k = 0;\
    \ k < aVowels.length; k++){\n          if (message[i + k] == aVowels[k]){\n  \
    \          result += aVowels[k];\n          }\n        }\n      }\n    }\n   \
    \ if (!swapped){\n      result += message[i];\n    }\n  }\n  return result;\n}",
  "    let encodedMessage = \"\";\n    for(let i=0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        encodedMessage += swapCase(letter);\n\
    \        for(let j=0; j < vowels.length; j++){\n            if(vowels[j] == letter){\n\
    \                encodedMessage += vowels[j+2];\n            }\n        }\n  \
    \  }\n    return encodedMessage;\n}\n</code>\n<|/ a tags=algorithm,javascript,string\
    \ |>\n<| c |>\nThanks so much for taking the time to write this out! My issue\
    \ here is that it needs to take into account the fact that each letter of the\
    \ message can be replaced with any number of letters, not just two letters. I\
    \ tried to rewrite your solution but am not sure how to do that :/\n<|/ c |>\n\
    <| c |>\nAhhh okay. I wasn't sure if that was part of the question, but I figured\
    \ since you asked about it you wouldn't be concerned with that. I've updated the\
    \ code. It should now be able to handle any number of letters.\n<|/ c |>\n<| c\
    \ |>\nAwesome! I'm getting \"ReferenceError: vowels is not defined\" when I run\
    \ it in my browser so I assume that's an issue with how I have it set up. I'll\
    \ have to look into that. Thanks for your help!\n<|/ c |>\n<| c |>\nSorry, I left\
    \ off the second `let` statement from the `for` loop in the `let` statement. I've\
    \ fixed that. That should be all you need. Let me know if it doesn't work.\n<|/\
    \ c |>\n<| c |>\nAhhh that fixed it. Thank you so much for your help! You have\
    \ been a tremendous help!\n<|/ c |>\n<| a dscore=0 tags=algorithm,javascript,string\
    \ |>\n<code>", "  return message.split('').map(char => {\n    let indexA = english.indexOf(char.toLowerCase())\n\
    \    let indexB = english.indexOf(char.toUpperCase())\n    if(indexA === -1){\n\
    \      indexA = english.indexOf(char)\n    }\n    if(indexB === -1){\n      indexB\
    \ = english.indexOf(char)\n    }\n    return english[indexA + 2 - (indexB - indexA)]\n\
    \  }).join('')\n}\n", "  var str=message.toLowerCase(),\n      arr=[],\n     \
    \ i=0,\n      j=0;\n  while (j<str.length){\n    arr[i++]=str.charAt(j++);\n \
    \ }\n  for(var i=0; i<arr.length; i++){\n    arr[i]=swapCase(arr[i]);\n  }\n \
    \ for(var i=0; i<arr.length; i++){\n    str=str.replace(arr[i],arr[i+1]);\n  }\n\
    \  return str;\n}", "  \n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var\
    \ alphabetLength = alphabet.length;\n  var firstIndexOfFirstLetter = alphabet.indexOf(message[0].toLowerCase());\n\
    \  var firstIndexOfSecondLetter = alphabet.indexOf(message[1].toLowerCase());\n\
    \  \n  if(firstIndexOfFirstLetter === -1){\n    firstIndexOfFirstLetter = alphabetLength;\n\
    \  }\n  \n  if(firstIndexOfSecondLetter === -1){\n    firstIndexOfSecondLetter\
    \ = alphabetLength;\n  }\n  \n  message = message.split(\" \");\n  var newMessage\
    \ = \"\";\n  for(var i=0; i<message.length; i++){\n    if(i < 2){\n      newMessage\
    \ += message[i].toLowerCase();\n    }else{\n      newMessage += alphabet[firstIndexOfFirstLetter-alphabet.indexOf(message[i].toLowerCase())\
    \ + firstIndexOfSecondLetter-alphabet.indexOf(message[i].toLowerCase())];\n  \
    \  }\n  }\n  \n  return newMessage.toUpperCase();\n}\n", "  //Write your code\
    \ here.\n}\n", "  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowels =\
    \ 'aeiou';\n  let newMessage = message;\n  newMessage = newMessage.toUpperCase();\n\
    \  let index = 0;\n  let newMessageEncode = '';\n  for (let i = 0; i < newMessage.length;\
    \ i++) {\n    if (newMessage.charAt(i) == ' ') {\n      newMessageEncode += letters[index];\n\
    \      index += 1;\n    }\n    else {\n      let newVowel = newMessage.charAt(i);\n\
    \      newVowel = newVowel.toLowerCase();\n      newVowel = vowels.indexOf(newVowel);\n\
    \      newVowel = letters[newVowel];\n      newMessageEncode += newVowel;\n  \
    \  }\n  }\n  return newMessageEncode;\n}", "  //Write your code here\n  let firstLetter\
    \ = message.charAt(0).toUpperCase();\n  let secondLetter = message.charAt(1).toUpperCase();\n\
    \  let thirdLetter = message.charAt(2).toUpperCase();\n  \n  let vowels = ['a','e','i','o','u'];\n\
    \  let vowelLetter = vowels[firstLetter.charCodeAt() - 96] + \n  vowels[secondLetter.charCodeAt()\
    \ - 96] + \n  vowels[thirdLetter.charCodeAt() - 96];\n\n  let firstLetterIndex\
    \ = message.indexOf('a');\n  let secondLetterIndex = message.indexOf('e');\n \
    \ let thirdLetterIndex = message.indexOf('i');\n  let fourthLetterIndex = message.indexOf('o');\n\
    \  let fifthLetterIndex = message.indexOf('u');\n  \n  if(firstLetterIndex >=\
    \ 0){\n    message = message.substring(0,firstLetterIndex) + \n  vowelLetter +\
    \ message.substring(firstLetterIndex + 1,\n  firstLetterIndex + 1) + \n  message.substring(firstLetterIndex\
    \ + 2,\n  firstLetterIndex + 3).toUpperCase();\n  }\n  if(secondLetterIndex >=\
    \ 0){\n    message = message.substring(0,secondLetterIndex) + \n  vowelLetter\
    \ + message.substring(secondLetterIndex + 1,\n  secondLetterIndex + 1) + \n  message.substring(secondLetterIndex\
    \ + 2,\n  secondLetterIndex + 3).toUpperCase();\n  }\n  if(thirdLetterIndex >=\
    \ 0){\n    message = message.substring(0,thirdLetterIndex) + \n  vowelLetter +\
    \ message.substring(thirdLetterIndex + 1,\n  thirdLetterIndex + 1) + \n  message.substring(thirdLetterIndex\
    \ + 2,\n  thirdLetterIndex + 3).toUpperCase();\n  }\n  if(fourthLetterIndex >=\
    \ 0){\n    message = message.substring(0,fourthLetterIndex) + \n  vowelLetter\
    \ + message.substring(fourthLetterIndex + 1,\n  fourthLetterIndex + 1) + \n  message.substring(fourthLetterIndex\
    \ + 2,\n  fourthLetterIndex + 3).toUpperCase();\n  }\n  if(fifthLetterIndex >=\
    \ 0){\n    message = message.substring(0,fifthLetterIndex) + \n  vowelLetter +\
    \ message.substring(fifthLetterIndex + 1,\n  fifthLetterIndex + 1) + \n  message.substring(fifthLetterIndex\
    \ + 2,\n  fifthLetterIndex + 3).toUpperCase();\n  }\n  \n  return message.toUpperCase();\n\
    }\n", "  var result = \"\";\n  for (var i = 0, l = message.length; i < l; i++)\
    \ {\n    var letter = message.charCodeAt(i);\n    if (letter > 122) {\n      letter\
    \ = letter - 26;\n    }\n    var nextLetter = message.charCodeAt(i + 1);\n   \
    \ if (nextLetter > 122) {\n      nextLetter = nextLetter - 26;\n    }\n    result\
    \ += swapCase(letter) + swapCase(nextLetter);\n  }\n  return result;\n}\n", " \
    \   // Your code here\n    var messageArray = message.split('');\n    messageArray.forEach(function(letter){\n\
    \        letter = letter.toUpperCase();\n        var vowels = ['A','E','I','O','U'];\n\
    \        vowels.forEach(function(vowel){\n            var position = letter.indexOf(vowel);\n\
    \            if (position >= 0){\n                var index = position+2\n   \
    \             letter = letter.substring(0, index) + letter.substring(index).toLowerCase()\
    \ + letter.substring(index+1);\n            }\n        });\n    });\n    return\
    \ messageArray.join('');\n}", "    let encodedMessage = message;\n    let newMessage\
    \ = message;\n    for(let i = 0; i < message.length; i++){\n        let char =\
    \ message.charAt(i);\n        \n        if(char === char.toUpperCase()){\n   \
    \         for(let j = 0; j < 2; j++){\n                newMessage = newMessage.replace(char,\
    \ message.charAt(i+j));\n            }\n        }\n        else if(char === 'a'){\n\
    \            newMessage = newMessage.replaceAll('a', 'A');\n        }\n      \
    \  else if(char === 'e'){\n            newMessage = newMessage.replaceAll('e',\
    \ 'E');\n        }\n        else if(char === 'i'){\n            newMessage = newMessage.replaceAll('i',\
    \ 'I');\n        }\n        else if(char === 'o'){\n            newMessage = newMessage.replaceAll('o',\
    \ 'O');\n        }\n        else if(char === 'u'){\n            newMessage = newMessage.replaceAll('u',\
    \ 'U');\n        }\n    }\n    return newMessage;\n}\n", "  var result = '';\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiouy';\n  for(var\
    \ i = 0; i < message.length; i++){\n    var pos = alphabet.indexOf(message.charAt(i));\n\
    \    var current = message.charAt(i);\n    for(var j = 0; j < pos - 1; j++){\n\
    \      current += vowels[alphabet.indexOf(message.charAt(j+1)) + 1];\n    }\n\
    \    result += current;\n  }\n  return result;\n}\n", "    message = message.toLowerCase();\n\
    \    let messageArray = message.split('');\n    messageArray.forEach(letter =>\
    \ {\n        if(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u'){\n            letter = letter.toUpperCase();\n        }\n\
    \        else{\n            letter = letter.split('').reverse().join('');\n  \
    \          letter = letter.split('').slice(0, 2).reverse().join('');\n       \
    \     letter = letter.toUpperCase();\n        }\n    })\n    return messageArray.join('');\n\
    }\n", "  var newString = \"\";\n  var vowels = \"aeiou\";\n  var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  var positions = [];\n  var position = 0;\n  var\
    \ letter;\n  for(var i=0; i<message.length; i++){\n    letter = message[i];\n\
    \    position = letters.indexOf(letter);\n    if(position != -1){\n      positions.push(position);\n\
    \    }\n  }\n\n  for(var i=0; i<positions.length; i++){\n    letter = vowels.charAt(positions[i]-1);\n\
    \    newString += letter;\n  }\n\n  return newString;\n}\n</cell>\n<cell>\nencode(message\
    \ = \"test\")\n</cell>\n<text>\nProblem 11 - Decode message\nWrite a function\
    \ that takes a message and decodes it from such \nway that it replaces all letters\
    \ with the letter that \nappears 2 places ahead of that letter in the english\
    \ alphabet. \nAssume only letters. \nExamples:\n>>> decode('TGST')\n'test'\n>>>\
    \ decode('tHKS KS C MGSSCGG')\n'This is a message'\n>>> decode('HLO HO')\n'Hello\
    \ World'\n>>> decode('HLO HO WORLD')\n'Hello World'\n>>> decode('HLO HO WORLD')\n\
    'Hello World'\n</text>\n<cell>", "\tvar firstLetters = {};\n\tvar secondLetters\
    \ = {};\n\tvar result = '';\n\tfor (var i = 0; i < message.length; i++) {\n\t\t\
    var letter = message.charAt(i);\n\t\tif (firstLetters[letter] == undefined) firstLetters[letter]\
    \ = letter;\n\t\tif (secondLetters[letter] == undefined) secondLetters[letter]\
    \ = letter;\n\t\tvar firstLetter = firstLetters[letter];\n\t\tvar secondLetter\
    \ = secondLetters[letter];\n\t\tif (firstLetter in secondLetters) {\n\t\t\tresult\
    \ += firstLetters[secondLetter];\n\t\t} else {\n\t\t\tresult += firstLetter;\n\
    \t\t}\n\t\tif (firstLetter in secondLetters) result += secondLetters[firstLetter];\n\
    \t}\n\treturn result;\n}\n", "  return message.replace(/[A-Z]+/ig,function(c){\n\
    \    var index = alphabet.indexOf(c),\n        swappedCase = c.toLowerCase(),\n\
    \        swappedVowel = c.toUpperCase(),\n        swapped = \"\";\n    if (index\
    \ > -1) {\n      swapped = alphabet[(index+2)%alphabet.length];\n    }\n    swapped\
    \ += swappedCase;\n    swapped += swappedVowel;\n    return swapped;\n  });\n\
    }\n", "    let s = '';\n    for(const c of message){\n        if(c.toUpperCase()\
    \ === c)\n            s += c.toUpperCase().charCodeAt(0) - 65 + 2 \n         \
    \   if(c==='e' || c==='E')\n                s += 'E'\n            else\n     \
    \           s += c.toUpperCase().charCodeAt(0) - 65\n        }\n        return\
    \ s\n    }\n}\n", "  var messageArr = message.split('').map(function(char) {\n\
    \    return char.charCodeAt(0)-65+2\n  })\n  var res = '';\n  for (var i=0; i<messageArr.length;\
    \ i++){\n    res += String.fromCharCode(messageArr[i])\n  }\n  return res;\n}\n",
  "    // Code here\n}\n", "  var firstLetter = 'abcdefghijklmnopqrstuvwxyz';\n  var\
    \ secondLetter = 'bcd';\n  var vowels = 'aeiou';\n  var vowelIndex = firstLetter.indexOf(message.charAt(0));\n\
    \  if(vowelIndex == -1) return message;\n  var secondLetterIndex = firstLetter.indexOf(message.charAt(1));\n\
    \  var newMessage = message.slice(2);\n  for(var index = 0; index < message.length;\
    \ index++){\n    if(index >= 2) newMessage += secondLetter[secondLetterIndex--];\n\
    \    var letter = firstLetter[index];\n    if(index == 0) letter += vowels[vowelIndex--];\n\
    \    newMessage += letter;\n  }\n  return newMessage;\n}\n", "    var code = \"\
    \";\n    for(i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var swap = (letter === letter.toUpperCase())?\n            letter.charCodeAt(0)\
    \ - letter.charCodeAt(1-1) : letter;\n        code += String.fromCharCode(swap);\n\
    \    }\n    return code;\n}\n", "\tvar result = ''\n\n\t// We begin by iterating\
    \ through each letter in the message. \n\t// We keep track of the letter that\
    \ appears 2 places ahead of the \n\t// current letter so we can swap them around.\
    \ \n\tfor(var i = 0; i< message.length; i++){\n\t\tvar letter = message.charAt(i)\n\
    \t\tvar nextLetter = message.charAt(i+1)\n\t\tvar nextLetterIndex = alphabet.indexOf(nextLetter)\
    \ + 1\n\n\t\t// The letter is 1 place ahead of the current letter. \n\t\t// Replace\
    \ this letter with that letter in the alphabet \n\t\t// at that index. \n\t\t\
    if(nextLetterIndex < alphabet.length){\n\t\t\tresult += alphabet[nextLetterIndex]\n\
    \t\t\ti++\n\t\t}\n\n\t\t// The letter is 2 places ahead of the current letter.\
    \ \n\t\t// Replace this letter with that letter in the alphabet \n\t\t// at that\
    \ index. \n\t\telse if(nextLetterIndex == alphabet.length){\n\t\t\tresult += alphabet[nextLetterIndex]\n\
    \t\t}\n\n\t\t// The letter is 1 place ahead of the current letter. \n\t\t// Replace\
    \ this letter with that letter in the alphabet \n\t\t// at that index. \n\t\t\
    else{\n\t\t\tresult += alphabet[nextLetterIndex]\n\t\t}\n\t}\n\n\treturn result\n\
    }\n", "  let vowelsArray = ['a', 'e', 'i', 'o', 'u'];\n  let newMessage = '';\n\
    \  for(let i=0; i<message.length; i++){\n    let curLetter = message.charAt(i);\n\
    \    if(vowelsArray.includes(curLetter)){\n      newMessage += curLetter;\n  \
    \    newMessage += curLetter;\n      newMessage += curLetter;\n      newMessage\
    \ += curLetter;\n      newMessage += curLetter;\n    }else{\n      newMessage\
    \ += curLetter;\n    }\n  }\n  return newMessage;\n}\n</code></pre>\n<pre><code\
    \ class=\"javascript\">// Write a function that takes a message, and encodes in\
    \ such a ", "\treturn message.replace(/[A-Z]/g,function(letter){\n\t\tvar charCode\
    \ = letter.charCodeAt(0);\n\t\treturn String.fromCharCode((charCode > 64 && charCode\
    \ < 91) ?\n\t\t\t(charCode - 65 + 26) : charCode + 32);\n\t});\n}\n", "   message\
    \ = message.toLowerCase();\n   let newMessage = \"\";\n   for(let i = 0; i < message.length;\
    \ i++){\n      if (message[i] === \" \") newMessage += \"S\";\n      if (message[i]\
    \ === \"a\") newMessage += \"K\";\n      if (message[i] === \"e\") newMessage\
    \ += \"G\";\n      if (message[i] === \"i\") newMessage += \"C\";\n      if (message[i]\
    \ === \"o\") newMessage += \"M\";\n      if (message[i] === \"u\") newMessage\
    \ += \"S\";\n      if (message[i] === \"A\") newMessage += \"K\";\n      if (message[i]\
    \ === \"E\") newMessage += \"G\";\n      if (message[i] === \"I\") newMessage\
    \ += \"C\";\n      if (message[i] === \"O\") newMessage += \"M\";\n      if (message[i]\
    \ === \"U\") newMessage += \"S\";\n      if (message[i] === \"!\") newMessage\
    \ += \"Z\";\n      if (message[i] === \"@\") newMessage += \"Z\";\n      if (message[i]\
    \ === \"#\") newMessage += \"S\";\n      if (message[i] === \"$\") newMessage\
    \ += \"S\";\n      if (message[i] === \"%\") newMessage += \"S\";\n      if (message[i]\
    \ === \"^\") newMessage += \"S\";\n      if (message[i] === \"&\") newMessage\
    \ += \"S\";\n      if (message[i] === \"*\") newMessage += \"S\";\n      if (message[i]\
    \ === \"(\") newMessage += \"S\";\n      if (message[i] === \")\") newMessage\
    \ += \"S\";\n      if (message[i] === \"-\") newMessage += \"S\";\n      if (message[i]\
    \ === \"_\") newMessage += \"S\";\n      if (message[i] === \"+\") newMessage\
    \ += \"S\";\n      if (message[i] === \"=\") newMessage += \"S\";\n      if (message[i]\
    \ === \"[\"){\n        newMessage += \"S\";\n      }\n      if (message[i] ===\
    \ \"]\"){\n        newMessage += \"S\";\n      }\n      if (message[i] === \"\
    }\") {\n        newMessage += \"S\";\n      }\n      if (message[i] === \"\\\\\
    \") {\n        newMessage += \"S\";\n      }\n      if (message[i] === \"'\")\
    \ {\n        newMessage += \"S\";\n      }\n      if (message[i] === \"\\\"\"\
    ) {\n        newMessage += \"S\";\n      }\n      if (message[i] === \"<\") {\n\
    \        newMessage += \"S\";\n      }\n      if (message[i] === \">\") {\n  \
    \      newMessage += \"S\";\n      }\n      if (message[i] === \"|\") {\n    \
    \    newMessage += \"S\";\n      }\n      if (message[i] === \" \") {\n      \
    \  newMessage += \"S\";\n      }\n      if (message[i] === \"\\n\" || message[i]\
    \ === \"\\r\" || message[i] === \"\\u2028\" || message[i] === \"\\u2029\") {\n\
    \        newMessage += \"S\";\n      }\n      if (message[i] === \"!\" || message[i] ",
  "  let arr = []; \n  for (let i = 0; i < message.length; i++) {\n    let char =\
    \ message[i]; \n    let index = char.charCodeAt(0) - 'a'.charCodeAt(0)\n    let\
    \ prev = arr[index] ? arr[index] : ''\n    arr[index] = prev + char\n  }\n  let\
    \ res = arr.join(''); \n  for (let i = 0; i < res.length; i++) {\n    if (res.charCodeAt(i)\
    \ >= 'a'.charCodeAt(0) + 2 && res.charCodeAt(i) <= 'z'.charCodeAt(0) + 2) {\n\
    \      res += res.charCodeAt(i) - 'a'.charCodeAt(0) - 1\n    }\n  }\n  return\
    \ res \n}\n", "    let swap = new Array(26).fill(' ')\n    let replace = new Array(26).fill('\
    \ ')\n    for(let i = 0; i<message.length; i++){\n        replace[message.charCodeAt(i)\
    \ >>> 2] = message.charAt(i)\n    }\n    \n    for(let i=0;i<26;i++){\n      \
    \  for(let j=0;j<26;j++){\n            if(replace.charAt(i) === replace.charAt(j)){\n\
    \                swap[i] = replace.charAt(j)\n                swap[j] = swap[i]\n\
    \            }\n        }\n    }\n    \n    return swap.filter( (val, i) => i).join('')\n\
    }\n", "   \n}", "  message = message.toLowerCase()\n  for(let i = 0; i < message.length;\
    \ i++){\n    switch(message.charAt(i)){\n      case 'a':\n      case 'e':\n  \
    \    case 'i':\n      case 'o':\n      case 'u':\n        message = message.replace(message.charAt(i),\
    \ message.charAt(i + 2))\n        break\n      case 'a':\n      case 'e':\n  \
    \    case 'i':\n      case 'o':\n      case 'u':\n        message = message.replace(message.charAt(i),\
    \ message.charAt(i - 2) + 'H')\n        break\n      case 'b':\n      case 'c':\n\
    \      case 'd':\n      case 'f':\n      case 'g':\n      case 'h':\n        message\
    \ = message.replace(message.charAt(i), message.charAt(i - 2) + 'K')\n        break\n\
    \      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case\
    \ 'g':\n      case 'h':\n        message = message.replace(message.charAt(i),\
    \ message.charAt(i - 2) + 'G')\n        break\n      case 'b':\n      case 'c':\n\
    \      case 'd':\n      case 'f':\n      case 'g':\n      case 'h':\n        message\
    \ = message.replace(message.charAt(i), message.charAt(i - 2) + 'H')\n        break\n\
    \      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case\
    \ 'g':\n      case 'h':\n        message = message.replace(message.charAt(i),\
    \ message.charAt(i - 2) + 'K')\n        break\n    }\n  }\n  return message\n\
    }\n", "    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        for(let j = 0; j < vowels.length;\
    \ j++){\n            if(vowels[j] === letter){\n                newMessage +=\
    \ vowels[j];\n                break;\n            }\n        }\n        newMessage\
    \ += letter;\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n\
    <| a tags=javascript |>\n<code>", "    var swapped_message = \"\";\n    for (var\
    \ i = 0; i < message.length; i++){\n        if (message[i] === 'a' || message[i]\
    \ === 'e' || message[i] === 'i' || message[i] === 'o' || message[i] === 'u' ||\
    \ message[i] === 'A' || message[i] === 'E' || message[i] === 'I' || message[i]\
    \ === 'O' || message[i] === 'U' || message[i] === 'B' || message[i] === 'C' ||\
    \ message[i] === 'D' || message[i] === 'G' || message[i] === 'H' || message[i]\
    \ === 'K' || message[i] === 'M' || message[i] === 'N' || message[i] === 'P' ||\
    \ message[i] === 'Q' || message[i] === 'S' || message[i] === 'T' || message[i]\
    \ === 'W' || message[i] === 'Y'){\n            swapped_message += message[(i +\
    \ 2) % message.length];\n        }\n        else{\n            swapped_message\
    \ += message[i];\n        }\n    }\n    return swapped_message;\n}", "\tvar alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tvar vowels =\
    \ \"aeiouAEIOU\";\n\tvar index = 0;\n\tvar result = \"\";\n\tfor(var i = 0, l\
    \ = message.length; i < l; i++){\n\t\tvar letter = message.charAt(i);\n\t\tresult\
    \ += alphabet.charAt(alphabet.indexOf(letter)) + alphabet.charAt(alphabet.indexOf((vowels.indexOf(letter))\
    \ + ((index += 2) & 3)));\n\t}\n\treturn result;\n}\n", "  let messageChars =\
    \ []\n  let messageCharsCount = []\n  let messageArr = message.split(\"\").reverse()\n\
    \  let currentChar = ''\n  let currentCharCount = 0\n  \n  for (let i = 0; i <\
    \ messageArr.length; i++) {\n    currentChar = messageArr[i]\n    currentCharCount\
    \ = messageChars.indexOf(currentChar)\n    \n    if (currentCharCount === -1)\
    \ {\n      messageChars.push(currentChar)\n      messageCharsCount.push(currentCharCount)\n\
    \    } else {\n      messageChars[currentCharCount] = currentChar\n      messageCharsCount[currentCharCount]\
    \ += 1\n    }\n  }\n  \n  return messageChars.reverse().join(\"\")\n}\n", "  \
    \  message = message.toLowerCase()\n    let letters = message.replace(/[a-z]/g,(x)\
    \ => {\n        return String.fromCharCode(x.charCodeAt(0) - 2)\n    })\n    let\
    \ vowels = 'aeiou'\n    let newMessage = letters.replace(vowels, (x) => {\n  \
    \      return String.fromCharCode(x.charCodeAt(0) + 3)\n    })\n    return newMessage\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=cryptography,node.js,javascript |>\n\
    A more functional and efficient version:\n<code>\nconst encode = (message) =>\
    \ {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\
    \  const message = message.toUpperCase();\n  const translated = message\n    .replace(/[a-z]/g,\
    \ function(letter) {\n      return alphabet.indexOf(letter) - 2;\n    })\n   \
    \ .replace(/[aeiou]/g, function(letter) {\n      return alphabet.indexOf(letter)\
    \ + 3;\n    });\n  return translated;\n};\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0\
    \ |>\n<code>\nvar alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\nvar message = inputString.toUpperCase();\nvar newMessage = message.replace(\n\
    \  /[a-z]/g, \n  function(letter){\n    var index = alphabet.indexOf(letter);\n\
    \    return (index > 0) ? alphabet.charAt(index - 2) : letter;\n  }\n);\n</code>\n\
    <|/ a tags=cryptography,node.js,javascript |>\n<| a dscore=0 |>\n<code>\nconst\
    \ encrypt = (str) => {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    const newString = str\n    .replace(/[a-z]/g, function(letter){\n     \
    \   return alphabet.indexOf(letter) - 2;\n    })\n    .replace(/[aeiou]/g, function(letter){\n\
    \        return alphabet.indexOf(letter) + 3;\n    });\n    return newString;\n\
    };\n</code>\n<|/ a tags=cryptography,node.js,javascript |>\n<| c |>\nYou should\
    \ add some commentary to explain what the code is doing.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "\tvar messageArray=[];\n\tfor(var i=0;i<message.length;i++){\n\
    \t\tif(message.charAt(i)==\"A\" || message.charAt(i)==\"E\" || message.charAt(i)==\"\
    I\" || message.charAt(i)==\"O\" || message.charAt(i)==\"U\" || message.charAt(i)==\"\
    U\"){\n\t\t\tmessageArray.push(message.charAt(i).toUpperCase());\n\t\t}else{\n\
    \t\t\tmessageArray.push(message.charAt(i).toLowerCase());\n\t\t}\n\t}\n\tvar newMessage=messageArray.join('');\n\
    \tfor(var i=0;i<message.length;i++){\n\t\tif(message.charAt(i)==\"A\" || message.charAt(i)==\"\
    E\" || message.charAt(i)==\"I\" || message.charAt(i)==\"O\" || message.charAt(i)==\"\
    U\" || message.charAt(i)==\"U\"){\n\t\t\tnewMessage=newMessage.replace(message.charAt(i),message.charAt(i).toUpperCase());\n\
    \t\t}else{\n\t\t\tnewMessage=newMessage.replace(message.charAt(i),message.charAt(i).toLowerCase());\n\
    \t\t}\n\t}\n\treturn newMessage;\n}\n", "    // Your code here\n    let result\
    \ = '';\n    for(let i = 0; i < message.length; i++){\n        let charCode =\
    \ message.charCodeAt(i);\n        result += String.fromCharCode(charCode).toUpperCase();\n\
    \        result += String.fromCharCode(charCode).toLowerCase();\n        result\
    \ += String.fromCharCode(charCode).replaceAll('aeiou','');\n    }\n    return\
    \ result;\n}", "  let result = \"\"\n  \n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message.charCodeAt(i)\n    let position = 2\n    \n\
    \    if (letter >= 65 && letter <= 90) {\n      let code = letter - 65 + 2\n \
    \   } else if (letter >= 97 && letter <= 122) {\n      let code = letter - 97\
    \ + 2\n    } else {\n      continue\n    }\n\n    if (code < 2) {\n      result\
    \ += letter\n    } else {\n      let letterToAdd = String.fromCharCode(code)\n\
    \      result += letterToAdd\n    }\n    \n  }\n  \n  return result\n}\n", " \
    \   let newMessage = '';\n    for (let i of message){\n        if (i.length >\
    \ 1){\n            newMessage += String.fromCharCode(parseInt(i));\n        }\
    \ else {\n            newMessage += i;\n        }\n    }\n    let vowels = 'aeiouAEIOU';\n\
    \    let letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (let i of newMessage){\n\
    \        let vowelIndex = vowels.indexOf(i);\n        if (vowelIndex > -1){\n\
    \            newMessage = newMessage.replace(i,letters[vowelIndex+2]);\n     \
    \   }\n    }\n    console.log(newMessage);\n}\n", "  //Your code here\n}\n</code>\n\
    <|/ a |>\n<| a tags=javascript |>\nI thought I'd share my solution, since I find\
    \ it helpful in solving this problem:\n<code>\nvar replaceVowels = message =>\
    \ {\n  var vowels = ['A', 'O', 'I', 'E', 'U'];\n  var vowelsCount = vowels.length;\n\
    \n  if (vowels.indexOf(message[0]) !== -1) return message;\n  var messageCount\
    \ = message.length;\n  var nextVowelIndex = vowels.indexOf(message[messageCount\
    \ - 1]);\n  var nextVowel = vowels[nextVowelIndex];\n  var newMessage = message[0];\n\
    \n  for (var i = 1; i < messageCount; i++) {\n    if (vowels.indexOf(message[i])\
    \ !== -1) continue;\n\n    if (vowelsCount === 1) {\n      newMessage += nextVowel;\n\
    \    } else {\n      newMessage += (vowelsCount - 1) < i ? nextVowel : message[i\
    \ - vowelsCount + 1];\n    }\n\n    vowelsCount -= 1;\n    nextVowelIndex += 1;\n\
    \    nextVowel = vowels[nextVowelIndex];\n  }\n\n  return newMessage;\n};\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=javascript |>\nHere is a simple way to do it. This\
    \ solution also uses recursion.\n\n<code>\nconst vowels = ['a', 'o', 'u', 'i',\
    \ 'e']; // Define the array of vowels\nconst message = 'message'; // Define the\
    \ message\nconst index = vowels.indexOf(message[0]); // Get the index of the first\
    \ vowel character in the message\nconst newMessage = message.slice(0, index) +\
    \ message[0].toLowerCase() + message.slice(index + 1, message.length) // Get the\
    \ first character of the message, the new character and the rest of the message\
    \ and concatenate them\nconst result = replaceVowels(newMessage) // Run recursion\
    \ to replace the vowels\n", "  return message.toLowerCase().split('')\n      \
    \         .map(function(c){\n                 return c.toLowerCase() !== c.toUpperCase()\n\
    \                     ? c : (c += '')\n               }).join('')\n          \
    \     .split('')\n               .map(function(c){\n                 return c.toUpperCase();\n\
    \               }).map(function(c, i){\n                 return (i !== 0) ? \n\
    \                   c.toUpperCase() \n                     + ((c.toUpperCase()\
    \ === c.toLowerCase()) \n                         ? '' : c.toLowerCase()) \n \
    \                    : c.toUpperCase();\n               }).join('');\n};\n", " \
    \   var newMessage=message;\n    for(var i=0;i<message.length;i++){\n        //replace\
    \ all vowels in message with letter in english alphabet \n        //that appears\
    \ two places ahead of the vowel. \n        var newLetter = englishAlphabet[englishAlphabet.indexOf(message[i])-2];\n\
    \        if(newLetter){\n            newMessage = newMessage.replace(message[i],\
    \ newLetter);\n        }\n    }\n    return newMessage;\n}\n", "  \n  let charMap\
    \ = {\n    a: 'T',\n    e: 'H',\n    i: 'S',\n    o: 'C',\n    u: 'G',\n    ng:\
    \ 'G'\n  }\n  \n  let result = \"\"\n  \n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i].toLowerCase()\n    let nextLetter = message[i\
    \ + 1]\n    \n    if (letter in charMap) {\n      result += charMap[letter]\n\
    \      result += nextLetter.toLowerCase()\n    } else {\n      result += letter.toLowerCase()\n\
    \      result += nextLetter.toLowerCase()\n    }\n  }\n  \n  return result\n}\n",
  "    message = message.toLowerCase()\n    var newMessage = ''\n    for(var i=0;i<message.length;i++){\n\
    \        if(message[i].match(/[aeiou]/)){\n            var newLetter =  message[i].match(/[aeiou]/)[0].toLowerCase()\n\
    \            var newIndex = message[i].indexOf(newLetter)\n            var newLetter2\
    \ =  message[newIndex+1].toLowerCase()\n            newMessage+=newLetter+newLetter2\n\
    \        }\n        newMessage+=message[i]\n    }\n    return newMessage\n}",
  "    \n    var vowels = 'aeiouAEIOU'\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    \n    return message\n    .replace(new RegExp(vowels, 'gi'), function (vowel){\n\
    \        return alphabet[alphabet.indexOf(vowel)-1]\n    })\n    .replace(new\
    \ RegExp(vowels.toUpperCase(), 'g'), function (vowel){\n        return alphabet[alphabet.indexOf(vowel)+1]\n\
    \    })\n}", "    var letters='';\n    var vowels='aeiou';\n    for(var i=0; i<message.length;\
    \ i++){\n        var letter= message.charAt(i);\n        if(letter in vowels){\n\
    \            letter+=2;\n        }\n        else{\n            letter+=1;\n  \
    \      }\n        letters+=letter;\n    }\n    return letters;\n}\n", "\tlet encodedString\
    \ = '';\n\tfor(let i = 0; i < message.length; i++){\n\t\tlet currentLetter = message[i].toLowerCase();\n\
    \t\tlet currentVowelIndex = vowels.indexOf(currentLetter);\n\t\tlet currentVowelPosition\
    \ = currentVowelIndex + 1;\n\t\tlet newLetter = alphabet.charAt(currentVowelPosition);\n\
    \t\tencodedString += newLetter;\n\t}\n\treturn encodedString;\n}\n", "    var\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var output = '';\n \
    \   for( var i = 0; i < message.length; i++){\n        output += message[i].charCodeAt(0)\
    \ - 'a'.charCodeAt(0) + alphabet[message[i].charCodeAt(0) - 'a'.charCodeAt(0)];\n\
    \    }\n    return output;\n}\n", "    let result = '';\n    for (let letter of\
    \ message){\n        let prevLetter = letter.charCodeAt(0);\n        \n      \
    \  for (let i = 2; i < letter.length; i++){\n            result += (prevLetter\
    \ + i);\n            \n            prevLetter = (prevLetter + i) % 26\n      \
    \  }\n    }\n    \n    return result.toUpperCase();\n}\n", "\tlet letters = message.split('')\n\
    \tlet output = letters.map(letter => {\n\t\tlet newLetter = ''\n\t\tif (letter.match(/[aeiou]/))\
    \ {\n\t\t\tlet firstLetter = letter.toLowerCase()\n\t\t\tlet secondLetter = letter.toLowerCase().replace(/e/,\
    \ 'i')\n\t\t\tlet secondLetterFirstLetter = secondLetter.toLowerCase().replace(/e/,\
    \ 'i')\n\t\t\tif (firstLetter === secondLetter) {\n\t\t\t\tnewLetter = firstLetter\n\
    \t\t\t} else if (firstLetter === secondLetterFirstLetter) {\n\t\t\t\tnewLetter\
    \ = secondLetter\n\t\t\t} else {\n\t\t\t\tnewLetter = secondLetterFirstLetter\n\
    \t\t\t}\n\t\t} else {\n\t\t\tnewLetter = letter.toLowerCase()\n\t\t}\n\t\treturn\
    \ newLetter\n\t}).join('')\n\treturn output\n}\n", "  var newMessage = message.toLowerCase().replace(/[^a-zA-Z]/g,\
    \ \n    function(letter){\n      return String.fromCharCode(letter.charCodeAt(0)\
    \ - 26);\n    }).replace(/[aeiou]/g, \n    function(letter){\n      return String.fromCharCode(letter.charCodeAt(0)\
    \ + 26);\n    });\n  return newMessage.replace(/[^a-zA-Z]/g, \n    function(letter){\n\
    \      return String.fromCharCode(letter.charCodeAt(0) - 26);\n    }).replace(/[aeiou]/g,\
    \ \n    function(letter){\n      return String.fromCharCode(letter.charCodeAt(0)\
    \ + 26);\n    });\n}\n", "  return message.replace(/([a-zA-Z])(?=[aeiou])/g,\n\
    \    function(letter){return letter.charCodeAt(0) - 64;});\n}\n", "    //TODO:\
    \ Write the code here.\n}\n</code></pre>\n\n<h2>4. Implement a Decrypt</h2>\n\
    <p>A decrypt function is very similar to the encode function, but it \ntakes the\
    \ message as input and returns the decoded message. \nWe are not going to implement\
    \ the decrypt function, instead we will \nuse what we learned about encoding to\
    \ do so. \nWe can use the encode function with our encode function to decode \n\
    our message back to its original form. \nOur decrypt function is going to take\
    \ the encoded message as input and \nreturns the decoded message. \nAgain, do\
    \ not implement the decrypt function ourselves, we will \nuse what we learned\
    \ about encoding to do so. \nLet's take a look at our encode function. We are\
    \ going to first \nget our message into an array of letters, then reverse that\
    \ array \nso it is in order of ascending letters. Then we are going to take \n\
    our message, iterate over the letters in that message and swap \ncase with case\
    \ where our alphabet is 2 places ahead of our \nalphabet letter, and replace all\
    \ vowels with our alphabet letter. \nFinally, we join all of the letters in our\
    \ reversed array back together \nwith a space. \nHere is the encode function and\
    \ the decoded message for our example \nmessage. \n<code>", "  var code = '';\n\
    \  for (var i = 0; i < message.length; i++){\n    var letter = message[i];\n \
    \   code += letter.charCodeAt(0) - 65 + \n      (((letter.charCodeAt(0) - 65)\
    \ % 2 == 0) ? 2 : 0);\n  }\n  return code;\n}", "  var newMessage = message.toLowerCase();\n\
    \  var newMessage = newMessage.replace(/[^A-Z]/g, \"\");\n  for(var i = 0; i<message.length;i++){\n\
    \    var letter = message.charAt(i).toLowerCase();\n    newMessage = newMessage.replace(letter,\
    \ letter.charCodeAt(letter) - 2);\n  }\n  var newMessage = newMessage.replace(/[A-Z]/g,\
    \ function(letter){\n    return String.fromCharCode(letter.charCodeAt(letter)\
    \ + 2)\n  })\n  return newMessage;\n}", "  var encryptedMessage = '';\n  for (var\
    \ i = 0; i < message.length; i++) {\n    var letter = message[i];\n    var position\
    \ = alphabet.indexOf(letter);\n    if (position > -1) {\n      var nextPosition\
    \ = position + 2;\n      while (nextPosition < alphabet.length && alphabet[nextPosition]\
    \ === letter) {\n        nextPosition++;\n      }\n      var letterToWrite = alphabet[nextPosition]\
    \ === letter ? letter : alphabet[position];\n      encryptedMessage += letterToWrite;\n\
    \    } else {\n      encryptedMessage += letter;\n    }\n  }\n  return encryptedMessage;\n\
    }\n", "    var messageOut = ''\n    for (var i=0; i<message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter;\n        if (letter.toLowerCase() == 'a'||letter.toLowerCase()\
    \ == 'e'||letter.toLowerCase() == 'i'||letter.toLowerCase() == 'o'){\n       \
    \     newLetter = 'A'\n        }\n        else if (letter.toLowerCase() == 'b'||letter.toLowerCase()\
    \ == 'c'||letter.toLowerCase() == 'g'){\n            newLetter = 'B'\n       \
    \ }\n        else if (letter.toLowerCase() == 't'||letter.toLowerCase() == 'k'){\n\
    \            newLetter = 'T'\n        }\n        else if (letter.toLowerCase()\
    \ == 'l'){\n            newLetter = 'L'\n        }\n        else if (letter.toLowerCase()\
    \ == 's'){\n            newLetter = 'S'\n        }\n        else if (letter.toLowerCase()\
    \ == 'z'){\n            newLetter = 'Z'\n        }\n        else if (letter.toLowerCase()\
    \ == 'y' || letter.toLowerCase() == 'h' || letter.toLowerCase() == 'v' || letter.toLowerCase()\
    \ == 'w'){\n            newLetter = letter;\n        }\n        messageOut +=\
    \ newLetter + nextLetter;\n    }\n    return messageOut;\n}", "\tvar messageArray\
    \ = message.split('');\n\tfor(var i=0; i <messageArray.length; i++){\n\t\tmessageArray[i]\
    \ = messageArray[i].toLowerCase();\n\t}\n\tvar alphabetArray = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \tvar swappedMessageArray = [];\n\tfor(var i=0; i <messageArray.length; i++){\n\
    \t\tvar newChar = alphabetArray[alphabetArray.indexOf(messageArray[i])]\n\t\t\
    newChar = swapLetter(newChar, i);\n\t\tswappedMessageArray.push(newChar);\n\t\
    }\n\treturn swappedMessageArray.join('');\n}", "    let letter = message.split('').map(char\
    \ => {\n        switch (char){\n            case 'a': return 'A';\n          \
    \  case 'b': return 'B';\n            case 'c': return 'C';\n            case\
    \ 'd': return 'D';\n            case 'e': return 'E';\n            case 'f': return\
    \ 'F';\n            case 'g': return 'G';\n            case 'h': return 'H';\n\
    \            case 'i': return 'I';\n            case 'j': return 'J';\n      \
    \      case 'k': return 'K';\n            case 'l': return 'L';\n            case\
    \ 'm': return 'M';\n            case 'n': return 'N';\n            case 'o': return\
    \ 'O';\n            case 'p': return 'P';\n            case 'q': return 'Q';\n\
    \            case 'r': return 'R';\n            case 's': return 'S';\n      \
    \      case 't': return 'T';\n            case 'u': return 'U';\n            case\
    \ 'v': return 'V';\n            case 'w': return 'W';\n            case 'x': return\
    \ 'X';\n            case 'y': return 'Y';\n            case 'z': return 'Z';\n\
    \            case 'A': return 'a';\n            case 'B': return 'b';\n      \
    \      case 'C': return 'c';\n            case 'D': return 'd';\n            case\
    \ 'E': return 'e';\n            case 'F': return 'f';\n            case 'G': return\
    \ 'g';\n            case 'H': return 'h';\n            case 'I': return 'i';\n\
    \            case 'J': return 'j';\n            case 'K': return 'k';\n      \
    \      case 'L': return 'l';\n            case 'M': return 'm';\n            case\
    \ 'N': return 'n';\n            case 'O': return 'o';\n            case 'P': return\
    \ 'p';\n            case 'Q': return 'q';\n            case 'R': return 'r';\n\
    \            case 'S': return 's';\n            case 'T': return 't';\n      \
    \      case 'U': return 'u';\n            case 'V': return 'v';\n            case\
    \ 'W': return 'w';\n            case 'X': return 'x';\n            case 'Y': return\
    \ 'y';\n            case 'Z': return 'z';\n        }\n    }).join('');\n    \n\
    \    let vowels = message.split('').filter(char => {\n        switch (char){\n\
    \            case 'a': case 'e': case 'i': case 'o': case 'u': return true;\n\
    \        }\n    }).map(char => \n        message.split('').filter(char => \n \
    \           char === char.toUpperCase()).length\n    ).reduce((a, b) => a + b,\
    \ 0);\n    \n    let vowelsTwo = message.split('').filter(char => {\n        switch\
    \ (char){\n            case 'a': case 'e': case 'i': case 'o': case 'u': return\
    \ true;\n        }\n    }).map(char => \n        message.split('').filter(char\
    \ => \n            char === char.toLowerCase()).length\n    ).reduce((a, b) =>\
    \ a + b, 0);\n", "  return message.replace(/([A-Z])/g, function($0){return \"\
    S\"+$0.toLowerCase();});\n}\n", "    // Write the code here\n    let letters =\
    \ message.split(\"\").map(letter => letter.toUpperCase());\n    let vowels = message.split(\"\
    \").map(letter => letter.charCodeAt(0) - 64);\n    let messageLetters = letters.map(letter\
    \ => letter.charCodeAt(0) - 65);\n    let messageLettersSet = messageLetters.reduce((acc,\
    \ cur) => acc.add(cur), new Set());\n    let newMessageLetters = vowels.reduce((acc,\
    \ cur) => acc.add(cur), new Set());\n    let newMessageLettersSet = newMessageLetters.reduce((acc,\
    \ cur) => acc.add(cur), new Set());\n    let newMessage = messageLettersSet.filter(letter\
    \ => !newMessageLettersSet.has(letter)).map(letter => letter - 65);\n    return\
    \ newMessage.join(\"\");\n}\n", "    var letters = 'abcdefghijklmnopqrstuvwxyz'.split('')\n\
    \    var vowels = 'aeiou'.split('')\n    var newMessage = ''\n    message.split('').forEach(function(letter,\
    \ index){\n        if(vowels.indexOf(letter) > -1){\n            newMessage +=\
    \ letters[(index + 1) % letters.length]\n        } else {\n            newMessage\
    \ += letter\n        }\n    })\n    return newMessage\n}\n", "    let result =\
    \ '';\n    let vowels = 'aeiouyAEIOUY'; \n    for(let i = 0; i < message.length;\
    \ i++){\n        let c = message.charAt(i);\n        c = c.toUpperCase();\n  \
    \      result += c;\n        for(let j = 0; j < vowels.length; j++){\n       \
    \     if(vowels.indexOf(message.charAt(i + j)) > -1){\n                let v =\
    \ message.charAt(i + j);\n                v = v.toLowerCase();\n             \
    \   result += v[v.indexOf(v) - 1];\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    var encodedString = '';\n    message.split('').forEach(function(character,\
    \ index){\n        if(character == character.toUpperCase()){\n            encodedString\
    \ += character.toUpperCase();\n        }else if(character == character.toLowerCase()){\n\
    \            encodedString += character.toLowerCase();\n        }\n    })\n\n\
    \    message.split('').forEach(function(character, index){\n        if(isVowel(character)){\n\
    \            var nextVowel = index+2;\n            if(nextVowel < message.length){\n\
    \                var nextLetter = message[nextVowel];\n                encodedString\
    \ += nextLetter.toUpperCase();\n            }\n        }\n    })\n    return encodedString;\n\
    }\n", "  var vowels = 'aeiou';\n  var message = message.split('');\n  var result\
    \ = '';\n  \n  for (var i = 0; i < message.length; i++){\n    var c = message[i];\n\
    \    if (vowels.indexOf(c) != -1){\n      result += c;\n      result += (2 * vowels.indexOf(c)\
    \ - vowels.indexOf(c) + 1);\n    }\n    else {\n      result += c;\n    }\n  }\n\
    \  \n  return result;\n}\n", "  let encodedMessage = \"\";\n  let index = 0;\n\
    \n  for (let i = 0; i < message.length; i++){\n    let letter = message[i].toLowerCase();\n\
    \    if(letter == \"a\"){\n      encodedMessage += \"a\";\n    }\n    else if(letter\
    \ == \"e\"){\n      encodedMessage += \"e\";\n    }\n    else if(letter == \"\
    i\"){\n      encodedMessage += \"i\";\n    }\n    else if(letter == \"o\"){\n\
    \      encodedMessage += \"o\";\n    }\n    else if(letter == \"u\"){\n      encodedMessage\
    \ += \"u\";\n    }\n    else if(letter == \"y\"){\n      encodedMessage += \"\
    a\";\n    }\n    else if(letter == \"e\" || letter == \"i\" || letter == \"o\"\
    \ || letter == \"u\" || letter == \"y\" || letter == \"a\"){\n      encodedMessage\
    \ += letter;\n    }\n    else if(i == message.length){\n      encodedMessage +=\
    \ letter;\n    }\n    else{\n      encodedMessage += letter;\n      encodedMessage\
    \ += encode(message.substring(index, i+2));\n      index = i+2;\n    }\n  }\n\
    \  return encodedMessage;\n}\n", "  const messageArr = message.toLowerCase().split('');\n\
    \  const newMessage = [];\n  const alphabetArr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \  \n  // Write code here\n  for(var i = 0; i < messageArr.length; i++){\n   \
    \ if(alphabetArr.indexOf(messageArr[i]) !== -1){\n      const index = alphabetArr.indexOf(messageArr[i]);\n\
    \      newMessage.push(alphabetArr[index - 2] + alphabetArr[index - 1] + messageArr[i]);\n\
    \    }else{\n      newMessage.push(messageArr[i]);\n    }\n  }\n  \n  return newMessage.join('');\n\
    }\n", "  message = message.toLowerCase();\n  message = 'abcdefghijklmnopqrstuvwxyz'.split('').map(function(letter){return\
    \ letter.toUpperCase()});\n  return message.map(function(letter){return message.indexOf(letter)+2});\n\
    }\n", "    let result = ''\n    let letters = message.split('')\n    for (let\
    \ i=0; i < letters.length; i++){\n        let letter = letters[i]\n        let\
    \ idx = alphabet.indexOf(letter)\n        if (idx != -1){\n            result\
    \ += swapLetter(letter, idx) + alphabet[idx]\n        }\n    }\n    return result\n\
    }", "  for(var i =0; i < message.length; i++){\n    var char = message[i];\n \
    \   if(char === 'a') return message.substr(0, i) + \n      message.substring(i\
    \ + 1, i + 2).toUpperCase();\n    else if(char === 'e') return message.substr(0,\
    \ i) + \n      message.substring(i + 1, i + 3).toUpperCase();\n    else if(char\
    \ === 'i') return message.substr(0, i) + \n      message.substring(i + 1, i +\
    \ 2).toUpperCase();\n    else if(char === 'o') return message.substr(0, i) + \n\
    \      message.substring(i + 1, i + 3).toUpperCase();\n    else if(char === 'u')\
    \ return message.substr(0, i) + \n      message.substring(i + 1, i + 2).toUpperCase();\n\
    \    else if(char === 'A') return message.substr(0, i) + \n      message.substring(i\
    \ + 1, i + 2).toLowerCase();\n    else if(char === 'E') return message.substr(0,\
    \ i) + \n      message.substring(i + 1, i + 3).toLowerCase();\n    else if(char\
    \ === 'I') return message.substr(0, i) + \n      message.substring(i + 1, i +\
    \ 2).toLowerCase();\n    else if(char === 'O') return message.substr(0, i) + \n\
    \      message.substring(i + 1, i + 3).toLowerCase();\n    else if(char === 'U')\
    \ return message.substr(0, i) + \n      message.substring(i + 1, i + 2).toLowerCase();\n\
    \    else return message.substr(0, i) + \n      message.substring(i + 1, i + 2)\
    \ + \n      message.substring(i + 2, i + 3).toLowerCase();\n  }\n}\n", "    var\
    \ encodedMessage = \"\";\n    var letter;\n    var count = 1;\n    for(var i=0;\
    \ i<message.length; i++){\n        letter = message[i].toLowerCase();\n      \
    \  if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' ||\
    \ letter === 'u' || letter === 'e'){\n            encodedMessage += letter;\n\
    \        } else {\n            encodedMessage += letter.toUpperCase();\n     \
    \   }\n        \n        //Count letters that appear 2 places ahead of the current\
    \ letter\n        if(i+1 === message.length){\n            for(var j=0; j<message.length;\
    \ j++){\n                letter = message[j][i].toLowerCase();\n             \
    \   if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' ||\
    \ letter === 'u' || letter === 'e'){\n                    if(count<3){\n     \
    \                   count++;\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return encodedMessage;\n}", "  let vowels = 'aeiouAEIOU'\n\
    \  let swapped = message\n    .split('')\n    .map(letter => \n    vowels.includes(letter)\
    \ ? vowels.split('')\n      .filter(v=> v !== letter)\n      .map(v=>letter+v).join('')\
    \ : letter)\n    .join('')\n  return swapped.split('').join('T')\n}\n", "    var\
    \ output = '';\n    var lastVowel = 0;\n    var currentLetter;\n\n    for(var\
    \ i=0; i<message.length; i++){\n        currentLetter = message.charAt(i);\n \
    \       currentLetter = currentLetter.toUpperCase();\n\n        if(!vowels.includes(currentLetter)){\n\
    \            output += currentLetter;\n        }\n        else{\n            output\
    \ += vowels[lastVowel].toUpperCase();\n            output += currentLetter;\n\
    \        }\n\n        if(vowels.includes(currentLetter)){\n            lastVowel\
    \ = i;\n        }\n    }\n\n    return output;\n}\n", "\tmessage = message.toLowerCase();\n\
    \treturn message.replace(/[a-z]+/g, function(letter){\n\t\tif(letter.match(/[aeiou]/))\
    \ \n\t\t\treturn letter.toUpperCase();\n\t\treturn letter.charCodeAt(0)-97+26;\n\
    \t});\n}\n", "  var vowels = 'AEIOUYaeiouy';\n  var encoded = '';\n  message.split(\"\
    \").forEach(function(character){\n    if(vowels.indexOf(character) > -1){\n  \
    \    encoded += character.toUpperCase();\n    }\n    else if(character.toUpperCase()\
    \ === character){\n      encoded += character.toUpperCase().toUpperCase();\n \
    \   }\n    else{\n      encoded += character.toLowerCase();\n    }\n  });\n  return\
    \ encoded;\n}\n", "  // Fill in your code here\n}\n", "    return message.replace(/[A-Z]/g,\
    \ (m) => m.toUpperCase());\n}\n", "  let codedMessage = ''\n  for (let i = 0;\
    \ i < message.length; i++) {\n    let letter = message.charAt(i)\n    let codedLetter\
    \ = letter.toLowerCase()\n    let codedLetterIndex = letter.toUpperCase().charCodeAt(0)\
    \ - 65\n    if (codedLetter > 122){\n      codedLetter -= 32\n    }\n    for (let\
    \ j = 0; j < codedLetterIndex; j++){\n      codedMessage += codedLetter\n    }\n\
    \  }\n  return codedMessage\n}\n", "  return message.replace(/[a-z]/ig, function(x){\n\
    \    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0);\n  }).replace(/[aeiouy]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 2\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 3;\n  }).replace(/[aeiou]/ig, function(x){\n    return\
    \ x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0) + 4;\n  }).replace(/[aeiou]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 5;\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 6;\n  }).replace(/[aeiou]/ig, function(x){\n    return\
    \ x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0) + 7;\n  }).replace(/[aeiou]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 8;\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 9;\n  }).replace(/[aeiou]/ig, function(x){\n    return\
    \ x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n  }).replace(/[aeiou]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 11;\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 12;\n  }).replace(/[aeiou]/ig, function(x){\n    return\
    \ x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0) + 13;\n  }).replace(/[aeiou]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 14;\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 15;\n  }).replace(/[aeiou]/ig, function(x){\n    return\
    \ x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0) + 16;\n  }).replace(/[aeiou]/ig,\
    \ function(x){\n    return x.toUpperCase().charCodeAt(0) - \"A\".charCodeAt(0)\
    \ + 17;\n  }).replace(/[aeiou]/ig, function(x){\n    return x.toUpperCase().charCodeAt(0)\
    \ - \"A\".charCodeAt(0) + 18;\n  }).replace(/[aeiou]/ig, function(", "  //Your\
    \ code goes here\n  var messageArray = message.split('');\n  var encodedMessage\
    \ = [];\n  for(var i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n\
    \    if(letter === 'a'){\n      letter = 'a';\n    }\n    else if(letter === 'e'){\n\
    \      letter = 'e';\n    }\n    else if(letter === 'i'){\n      letter = 'i';\n\
    \    }\n    else if(letter === 'o'){\n      letter = 'o';\n    }\n    else if(letter\
    \ === 'u'){\n      letter = 'u';\n    }\n    encodedMessage.push(letter);\n  }\n\
    \  var encodedMessageString = encodedMessage.join('');\n  encodedMessageString\
    \ = swapCaseLetters(encodedMessageString);\n  encodedMessageString = swapVowels(encodedMessageString);\n\
    \  console.log(encodedMessageString);\n}", "  const letters = message.toLowerCase().split('');\n\
    \  const encoded = '';\n  for (let i = 0; i < letters.length; i++){\n    letters[i]\
    \ = letters[i].replace('A', 'a');\n    letters[i] = letters[i].replace('E', 'e');\n\
    \    letters[i] = letters[i].replace('I', 'i');\n    letters[i] = letters[i].replace('O',\
    \ 'o');\n    letters[i] = letters[i].replace('U', 'u');\n  }\n  for (let i = 0;\
    \ i < letters.length; i++){\n    for (let j = 0; j < letters.length; j++){\n \
    \     if (letters[i] == letters[j]){\n        encoded += letters[i];\n      }\n\
    \    }\n  }\n  return encoded;\n}\n  ", "    var result = '';\n    var currentIndex\
    \ = 0;\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        if(currentIndex + 1\
    \ === message.length){\n            result+= (letter === message.charAt(currentIndex)\
    \ ? '' : letter) + letter;\n            currentIndex = 0;\n        } else {\n\
    \            if(vowels.indexOf(letter) > -1){\n                result+= (letter\
    \ === message.charAt(currentIndex) ? '' : letter) + message.charAt(currentIndex\
    \ + 1);\n                currentIndex++;\n            } else {\n             \
    \   result+= (letter === message.charAt(currentIndex) ? '' : letter) + letter;\n\
    \                currentIndex++;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "  let encoded = '';\n  for (let i = 0; i < message.length; i++){\n\
    \    let letter = message[i];\n    if (letter === ' ') letter += letter;\n   \
    \ else if (letter === 'a') letter = '@';\n    else if (letter === 'A') letter\
    \ = '@';\n    else if (letter === 'e') letter = '@';\n    else if (letter ===\
    \ 'E') letter = '@';\n    else if (letter === 'i') letter = '@';\n    else if\
    \ (letter === 'I') letter = '@';\n    else if (letter === 'o') letter = '@';\n\
    \    else if (letter === 'O') letter = '@';\n    else if (letter === 'u') letter\
    \ = '@';\n    else if (letter === 'U') letter = '@';\n    else if (letter ===\
    \ 'h') letter = '@';\n    else if (letter === 'H') letter = '@';\n    else if\
    \ (letter === 'n') letter = '@';\n    else if (letter === 'N') letter = '@';\n\
    \    else if (letter === 'd') letter = '@';\n    else if (letter === 'D') letter\
    \ = '@';\n    else if (letter === 's') letter = '@';\n    else if (letter ===\
    \ 'S') letter = '@';\n    else if (letter === 'r') letter = '@';\n    else if\
    \ (letter === 'R') letter = '@';\n    else if (letter === 't') letter = '@';\n\
    \    else if (letter === 'T') letter = '@';\n    else if (letter === 'w') letter\
    \ = '@';\n    else if (letter === 'W') letter = '@';\n    else if (letter ===\
    \ 'y') letter = '@';\n    else if (letter === 'Y') letter = '@';\n    else if\
    \ (letter === 'a') letter = 'A';\n    else if (letter === 'A') letter = 'A';\n\
    \    else if (letter === 'e') letter = 'E';\n    else if (letter === 'E') letter\
    \ = 'E';\n    else if (letter === 'i') letter = 'I';\n    else if (letter ===\
    \ 'I') letter = 'I';\n    else if (letter === 'o') letter = 'O';\n    else if\
    \ (letter === 'O') letter = 'O';\n    else if (letter === 'u') letter = 'U';\n\
    \    else if (letter === 'U') letter = 'U';\n    else if (letter === 'h') letter\
    \ = 'H';\n    else if (letter === 'H') letter = 'H';\n    else if (letter ===\
    \ 'n') letter = 'N';\n    else if (letter === 'N') letter = 'N';\n    else if\
    \ (letter === 'd') letter = 'D';\n    else if (letter === 'D') letter = 'D';\n\
    \    else if (letter === 's') letter = 'S';\n    else if (letter === 'S') letter\
    \ = 'S';\n    else if (letter === 'r') letter = 'R';\n    else if (letter ===\
    \ 'R') letter = 'R';\n    else if (letter === 't') letter = 'T';\n    else if\
    \ (letter === 'T') letter = 'T';\n    else if (letter === 'w", "    // Complete\
    \ this function! \n    let arr = [];\n    let newMessage = message;\n    for(let\
    \ i = 0;i<message.length;i++){\n        if(message[i] === 'a'){\n            arr.push(message.slice(0,i)\
    \ + message.slice(i+1));\n        }\n        else if(message[i] === 'e'){\n  \
    \          arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n   \
    \     else if(message[i] === 'i'){\n            arr.push(message.slice(0,i) +\
    \ message.slice(i+1));\n        }\n        else if(message[i] === 'o'){\n    \
    \        arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n     \
    \   else if(message[i] === 'u'){\n            arr.push(message.slice(0,i) + message.slice(i+1));\n\
    \        }\n        else if(message[i] === 'y' || message[i] === 'Y'){\n     \
    \       arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n      \
    \  else if(message[i] === 'n'){\n            arr.push(message.slice(0,i) + message.slice(i+1));\n\
    \        }\n        else if(message[i] === 'h'){\n            arr.push(message.slice(0,i)\
    \ + message.slice(i+1));\n        }\n        else if(message[i] === 'b'){\n  \
    \          arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n   \
    \     else if(message[i] === 'y'){\n            arr.push(message.slice(0,i) +\
    \ message.slice(i+1));\n        }\n        else if(message[i] === 's'){\n    \
    \        arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n     \
    \   else if(message[i] === 's'){\n            arr.push(message.slice(0,i) + message.slice(i+1));\n\
    \        }\n        else if(message[i] === 'g'){\n            arr.push(message.slice(0,i)\
    \ + message.slice(i+1));\n        }\n        else if(message[i] === 'c'){\n  \
    \          arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n   \
    \     else if(message[i] === 'm'){\n            arr.push(message.slice(0,i) +\
    \ message.slice(i+1));\n        }\n        else if(message[i] === 'g'){\n    \
    \        arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n     \
    \   else if(message[i] === 'p'){\n            arr.push(message.slice(0,i) + message.slice(i+1));\n\
    \        }\n        else if(message[i] === 'k'){\n            arr.push(message.slice(0,i)\
    \ + message.slice(i+1));\n        }\n        else if(message[i] === 'g'){\n  \
    \          arr.push(message.slice(0,i) + message.slice(i+1));\n        }\n   \
    \     else if(message[i] === 'o'){\n            arr.", "    var alphabet = \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"aeiouy\";\n    message = message.replace(/[aeiouy]/g,\
    \ function(m){\n        var index = alphabet.indexOf(m);\n        return alphabet[(index+2)%26];\n\
    \    });\n    return message.replace(/[aeiouy]+/gi, function(m){\n        var\
    \ index = alphabet.indexOf(m);\n        return vowels[index];\n    });\n}\n",
  "  return message.split('')\n              .map( (char) => char.toUpperCase() )\n\
    \              .map( (char) => char.replace(/[AEIOUaeiou]/g,(char) => { \n   \
    \               if (char == 'A' || char == 'E' || char == 'I'|| char == 'O'){\n\
    \                    return 'J';\n                  }\n                  return\
    \ char.replace(/[AEIOUaeiou]/g,(char) => { \n                      if (char ==\
    \ 'A' || char == 'E' || char == 'I'|| char == 'O'){\n                        return\
    \ 'J';\n                      }\n                      return 'K';\n         \
    \         }) \n              }))\n              .join('');\n}\n", "    let letters\
    \ = message.replace(/[a-z]/g, function(letter){\n        return letter.charCodeAt(0)-65;\n\
    \    });\n    let vowels = letters.replace(/[aeiou]/g, function(letter){\n   \
    \     let charCode = letter.charCodeAt(0);\n        charCode = (charCode == 65\
    \ || charCode == 97) ? 90 : charCode + 1;\n        return String.fromCharCode(charCode);\n\
    \    });\n    return letters.concat(vowels);\n}\n", "  var encodedMessage = \"\
    \";\n  for (var i = 0; i < message.length; i++)\n    encodedMessage += message.charAt(i).toLowerCase().replaceAll(/[aeiou]/gi,\
    \ \n    function(m) {return String.fromCharCode(m.charCodeAt(0) + 2); }); \n \
    \ return encodedMessage;\n}", "  let wordArr = message.split(' ');\n  let encodedArr\
    \ = [];\n  for(let i = 0; i < wordArr.length; i++){\n    let word = wordArr[i];\n\
    \    \n    let swappedWord = '';\n    let vowelsArr = ['a','e','i','o','u','y'];\n\
    \    for(let j = 0; j < word.length; j++){\n      if(vowelsArr.indexOf(word[j])\
    \ > -1){\n        let i = j + 1;\n        for(let k = 0; k < j; k++){\n      \
    \    if(vowelsArr.indexOf(word[k]) > -1){\n            i += 1;\n          }\n\
    \        }\n        swappedWord += word[i] + word[j];\n      }else{\n        swappedWord\
    \ += word[j];\n      }\n    }\n    encodedArr.push(swappedWord);\n  }\n  return\
    \ encodedArr.join(' ');\n}\n", "  var messageArray = message.split(''),\n    \
    \  newMessageArray = [],\n      vowels = 'AEIOUaeiou';\n  for(var i = 0; i < messageArray.length;\
    \ i++){\n    newMessageArray[i] = messageArray[i];\n    var index = vowels.indexOf(messageArray[i]);\n\
    \    if(index >= 0){\n      newMessageArray[i] = vowels[(index + 2) % vowels.length];\n\
    \    }\n  }\n  return newMessageArray.join('');\n}", "    var result = \"\";\n\
    \    for (var i = 0; i < message.length; i++){\n        // Check if the current\
    \ letter is upper case or lower case\n        // If not we ignore it\n       \
    \ if (message[i].match(/[a-z]/i)) {\n            if (message[i].match(/[A-Z]/i))\
    \ {\n                // If uppercase letter add that letter\n                result\
    \ += message[i].toLowerCase();\n            } else {\n                // Else\
    \ add that letter and its 2 places ahead\n                result += message[i].toUpperCase();\n\
    \                result += message[i].toUpperCase().charAt(1);\n            }\n\
    \        } else {\n            // If not letter just add it as it is\n       \
    \     result += message[i].toLowerCase();\n        }\n    }\n    return result;\n\
    }\n", "  return message.replace(/[a-zA-Z]+/, letter=> {\n    var index = letter.charCodeAt(0)-97;\
    \ //get the index of the letter from the ascii table\n    return letter.toLowerCase().replace(v=>{\n\
    \      var vowels = [\n        /*'a',*/\n        /*'i',*/\n        /*'o',*/\n\
    \        /*'u',*/\n        /*'e',*/\n        /*'A'*/\n      ]\n      var vowel\
    \ = vowels[index]\n      return vowel\n    })\n  })\n}", "    var result = \"\"\
    ;\n    var vowels = \"aeiou\";\n    var vowelMap = {};\n    vowels.forEach(function(letter){\n\
    \        vowelMap[letter] = letter;\n    });\n    message = message.toLowerCase();\n\
    \    message.split(\"\").forEach(function(letter){\n        result += vowelMap[letter];\n\
    \    });\n    return result;\n}", "  var alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  message = message.toUpperCase();\n  var letters = message.split(\"\");\n\
    \  var swapped = false;\n  letters.forEach(function(letter){\n    if(letter ==\
    \ letter.toLowerCase()){\n      letter = alpha.indexOf(letter) + 2;\n      swapped\
    \ = true;\n    }\n    switch(letter){\n      case 0:\n        letter = alpha.charAt(0);\n\
    \        break;\n      case 1:\n        letter = alpha.charAt(1);\n        break;\n\
    \      case 2:\n        letter = alpha.charAt(2);\n        break;\n      case\
    \ 3:\n        letter = alpha.charAt(3);\n        break;\n      case 4:\n     \
    \   letter = alpha.charAt(4);\n        break;\n      case 5:\n        letter =\
    \ alpha.charAt(5);\n        break;\n      case 6:\n        letter = alpha.charAt(6);\n\
    \        break;\n      case 7:\n        letter = alpha.charAt(7);\n        break;\n\
    \      case 8:\n        letter = alpha.charAt(8);\n        break;\n      case\
    \ 9:\n        letter = alpha.charAt(9);\n        break;\n      case 10:\n    \
    \    letter = alpha.charAt(10);\n        break;\n      case 11:\n        letter\
    \ = alpha.charAt(11);\n        break;\n      case 12:\n        letter = alpha.charAt(12);\n\
    \        break;\n      case 13:\n        letter = alpha.charAt(13);\n        break;\n\
    \      case 14:\n        letter = alpha.charAt(14);\n        break;\n      case\
    \ 15:\n        letter = alpha.charAt(15);\n        break;\n      case 16:\n  \
    \      letter = alpha.charAt(16);\n        break;\n      case 17:\n        letter\
    \ = alpha.charAt(17);\n        break;\n      case 18:\n        letter = alpha.charAt(18);\n\
    \        break;\n      case 19:\n        letter = alpha.charAt(19);\n        break;\n\
    \      case 20:\n        letter = alpha.charAt(20);\n        break;\n      case\
    \ 21:\n        letter = alpha.charAt(21);\n        break;\n      case 22:\n  \
    \      letter = alpha.charAt(22);\n        break;\n      case 23:\n        letter\
    \ = alpha.charAt(23);\n        break;\n      case 24:\n        letter = alpha.charAt(24);\n\
    \        break;\n      case 25:\n        letter = alpha.charAt(25);\n        break;\n\
    \      case 26:\n        letter = alpha.charAt(26);\n        break;\n      case\
    \ 27:\n        letter = alpha.charAt(27);\n        break;\n      case 28:\n  \
    \      letter = alpha.charAt(28);\n        break;\n      case 29:\n        letter\
    \ = alpha.charAt(29);\n        break;\n      case 30:\n        letter = alpha.charAt(30);\n\
    \        break;\n      case 31:\n        letter = alpha.charAt(31);\n        break;\n\
    \      case 32:\n        ", "    return message.replace(/([A-Z])/g, function(match,\
    \ i){\n        return String.fromCharCode(i + 64);\n    }).replace(/([AEIOUaeiou])/g,\
    \ function(match, i){\n        return String.fromCharCode(i + 96);\n    }).replace(/([^aeiouAEIOU])/g,\
    \ function(match, i){\n        return String.fromCharCode(i + 64);\n    }).replace(/[aeiouAEIOU]/g,\
    \ function(match, i){\n        return String.fromCharCode(i + 96);\n    });\n}",
  "    // Write the code here\n    var newStr = \"\";\n    for (var i = 0; i < message.length;\
    \ i++) {\n        var letter = message.charAt(i).toUpperCase();\n        var nextLetter\
    \ = message.charAt(i + 1);\n        if (nextLetter === letter) {\n           \
    \ newStr += letter;\n            i++;\n        } else {\n            var newLetter\
    \ = letter;\n            for (var j = 0; j < 2; j++) {\n                newLetter\
    \ = alphabet.indexOf(nextLetter) + j;\n                if (newLetter > alphabet.length)\
    \ {\n                    newLetter = 0;\n                }\n                newStr\
    \ += alphabet[newLetter];\n            }\n        }\n    }\n    return newStr;\n\
    }\n", "    var swap = {};\n    var vowels = 'aeiouy';\n    var letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\
    \    \n    for(var i = 0; i < letters.length; i++){\n        swap[letters[i]]\
    \ = letters[(i+1)%letters.length];\n    }\n    \n    return message.replace(vowels,\
    \ function(letter){\n        return swap[letter];\n    });\n}\n", "    // BEGIN\
    \ Question 3\n    let newMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++){\n        let letter = message.charAt(i);\n        newMessage += letter.toLowerCase();\n\
    \    }\n    newMessage = newMessage.replace(/v/g,'');\n    let newMessageArray\
    \ = newMessage.split('');\n    for (let i = 0; i < newMessageArray.length; i++){\n\
    \        if (newMessageArray[i].includes('a') && newMessageArray[i].includes('e')\
    \ && newMessageArray[i].includes('i') && newMessageArray[i].includes('o') && newMessageArray[i].includes('u')){\n\
    \            newMessageArray[i] = newMessageArray[i].toLowerCase();\n        }\n\
    \    }\n    for (let i = 0; i < newMessageArray.length; i++){\n        let letter\
    \ = newMessageArray[i].toLowerCase();\n        newMessage = newMessage + letter.charAt(newMessageArray[i].indexOf('a')\
    \ + 2);\n    }\n    // END Question 3\n    return newMessage;\n}\n", "  //Your\
    \ code here\n}\n", "  return message.replace(/[a-z]+/g, function(letter){\n  \
    \  return letter.split('').map(function(letter){\n      return letter.charCodeAt(0)\
    \ - 65\n    }).join('')\n  }).replace(/[aeiou]+/g, function(letter){\n    return\
    \ letter.split('').map(function(letter){\n      return letter.charCodeAt(0) -\
    \ 97\n    }).join('')\n  }).replace(/[AEIOU]+/g, function(letter){\n    return\
    \ letter.split('').map(function(letter){\n      return letter.charCodeAt(0) -\
    \ 65\n    }).join('')\n  })\n}\n", "    return message.replace(/\\W/g, function(char){\n\
    \        if (/[aeiou]/.test(char)) {\n            return char.toUpperCase();\n\
    \        } else {\n            return char.toLowerCase();\n        }\n    });\n\
    }", "    const swapCase = (x) => {\n        const upperCase = x.toUpperCase()\n\
    \        const firstChar = upperCase[0]\n        const secondChar = upperCase[1]\n\
    \        const vowels = ['A','E','I','O','U']\n        const vowelsCounts = vowels.map(x\
    \ => upperCase.indexOf(x))\n        let count = 0\n        vowelsCounts.forEach(x\
    \ => {\n            if (x === firstChar) count++\n        })\n        return secondChar\
    \ + vowels[count] + firstChar\n    }\n    \n    const vowels = [\"a\",\"e\",\"\
    i\",\"o\",\"u\"]\n    return message.toLowerCase().split('')\n    .map(x => swapCase(x))\n\
    \    .join('')\n}", "  var code = '';\n  for (var i = 0; i < message.length; i++){\n\
    \    var letterCode = message.charCodeAt(i)\n    var letter = String.fromCharCode(letterCode)\n\
    \    code = code.toUpperCase()\n    code = code.replace(letter, letter.charCodeAt(letterCode))\n\
    \    code = code.replace(vowel, 'AEIOUY')\n    code += code\n  }\n  return code\n\
    }\n", "  let finalMessage = \"\"\n  for (let i = 0; i < message.length; i++){\n\
    \    let currentChar = message[i]\n    let letterIndex = englishLetterIndexOf(currentChar)\n\
    \    let letterIndex = letterIndex + 2\n    let newChar = currentChar\n    \n\
    \    \n    \n    finalMessage = finalMessage.concat(newChar)\n  }\n  return finalMessage\n\
    }\n", "  var letters = message.split('');\n  var newletters = letters.map(function(letter){\n\
    \    var upperLetter = letter.toUpperCase();\n    var position = upperLetter.charCodeAt(0)-97;\
    \ //get position of current letter\n    position = position + 2; //get position\
    \ of next letter\n    var newletter = String.fromCharCode(97 + position); //get\
    \ letter 2 places ahead of current letter\n    return newletter;\n  });\n  return\
    \ newletters.join('');\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "  let swappedMessage = '';\n  for (let i=0; i<message.length; i++){\n    let letter\
    \ = message[i].toLowerCase();\n    if (letter === 'a') letter = 'A';\n    if (letter\
    \ === 'e') letter = 'E';\n    if (letter === 'i') letter = 'I';\n    if (letter\
    \ === 'o') letter = 'O';\n    if (letter === 'u') letter = 'U';\n    swapped +=\
    \ letter;\n  }\n  for (let i=0; i<swapped.length; i++){\n    let letter = swapped.charAt(i)\n\
    \    let index = swapped.indexOf(letter);\n    if (index > 0){\n      swapped\
    \ = swapped.replace(letter, swapped.charAt(index-1));\n    }\n  }\n  return swapped;\n\
    }", "    var result = '';\n    for(var i = 0; i < message.length; i++){ \n   \
    \     var index = message.charCodeAt(i) - 96;\n        index = index === -1 ?\
    \ i + 1 : index; \n        result += alphabet.charAt(index); \n    }\n    return\
    \ result;\n}\n", "  return message.replace(/./g, function (letter) {\n    let\
    \ index = alphabet.indexOf(letter.toLowerCase());\n    return alphabet[(index\
    \ + 1) % alphabet.length];\n  });\n}\n", "  message = 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'.split('');\n\
    \  var vowels = 'aeiouy';\n  var result = '';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  for (var i = 0; i < message.length; i++){\n    for (var j = 0; j < alphabet.length;\
    \ j++){\n      result += message[i].charCodeAt(j) < 95 ? message[i].charCodeAt(j)\
    \ + alphabet[j].charCodeAt(j) : message[i].charCodeAt(j) - 64;\n    }\n  }\n \
    \ for (var j = 0; j < alphabet.length; j++){\n    result += alphabet[j].charCodeAt(j)\
    \ - 64;\n  }\n  for (var i = 0; i < message.length; i++){\n    if (vowels.indexOf(message[i].charAt(0))\
    \ >= 0){\n      result += message[i].charAt(0);\n    }\n  }\n  for (var i = 0;\
    \ i < alphabet.length; i++){\n    result += alphabet[i].charCodeAt(i);\n  }\n\
    \  return result;\n}\n", "    var result = \"\";\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i).toLowerCase();\n        var position\
    \ = alphabet.indexOf(letter);\n        result += alphabet[position + 1];\n   \
    \ }\n    return result;\n}\n", "  var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \  var newmessage = message.replace(/[A-Z]/g, function (match) {\n    return alphabet[alphabet.indexOf(match)\
    \ + 2];\n  });\n  newmessage = newmessage.replace(/[AEIOUaeiou]/g, function (match)\
    \ {\n    return alphabet[alphabet.indexOf(match) - 2];\n  });\n  return newmessage;\n\
    }\n", "  let encryptedMessage = message;\n  let vowels = 'AEIOU';\n  vowels =\
    \ vowels.split('');\n  vowels.forEach(function(vowel){\n    encryptedMessage =\
    \ encryptedMessage.replace(vowel, vowel.match(/(?<=^|\\s)[a-z](?=[a-z]|$)/)[0]);\n\
    \  });\n  encryptedMessage = encryptedMessage.split('');\n  encryptedMessage.forEach(function(letter,\
    \ index){\n    if(index === 2){\n      encryptedMessage[index] = encryptedMessage[index].toUpperCase();\n\
    \    }\n    else if(index === 3){\n      encryptedMessage[index] = encryptedMessage[index].toUpperCase().split('').reverse().join('');\n\
    \    }\n    else if(index === 4){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 5){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 6){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 7){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 8){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 9){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 10){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 11){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 12){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 13){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 14){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 15){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 16){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 17){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 18){\n      encryptedMessage[index] = encryptedMessage[index].split('').reverse().join('');\n\
    \    }\n    else if(index === 19){\n      encryptedMessage", "  let encodedMessage\
    \ = ''\n  for(let i = 0; i < message.length; i++){\n    const letter = message[i]\n\
    \    if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' ||\
    \ letter === 'u'){\n      encodedMessage += message[i - 1] + letter\n    }\n \
    \   else{\n      encodedMessage += letter\n    }\n  }\n  return encodedMessage\n\
    }\n", "  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n\
    \    var lowerCaseLetter = message[i].toLowerCase();\n    var upperCaseLetter\
    \ = message[i].toUpperCase();\n    for(var j = 0; j < 2; j++){\n      if(lowerCaseLetter\
    \ == upperCaseLetter){\n        lowerCaseLetter = lowerCaseLetter.toLowerCase();\n\
    \        lowerCaseLetter = lowerCaseLetter.replace(/e/g, \"A\");\n        lowerCaseLetter\
    \ = lowerCaseLetter.replace(/i/g, \"E\");\n        lowerCaseLetter = lowerCaseLetter.replace(/o/g,\
    \ \"O\");\n        lowerCaseLetter = lowerCaseLetter.replace(/u/g, \"U\");\n \
    \       newMessage += lowerCaseLetter;\n      }\n      else if(lowerCaseLetter\
    \ == \"A\" || lowerCaseLetter == \"E\" || lowerCaseLetter == \"I\" || lowerCaseLetter\
    \ == \"O\" || lowerCaseLetter == \"U\"){\n        newMessage += lowerCaseLetter;\n\
    \      }\n      else{\n        newMessage += upperCaseLetter;\n      }\n     \
    \ newMessage += \" \";\n    }\n  }\n  return newMessage;\n}", "  let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for (let letter in message){\n\
    \    if (alphabet.indexOf(letter) > alphabet.length-1){\n      result += letter\n\
    \    } else {\n      let index = alphabet.indexOf(letter)\n      let letter2 =\
    \ alphabet.charAt(index-1)\n      result += letter2 + alphabet.substr(index-1,1)\n\
    \    }\n  }\n  return result\n}", "  message  = message.toLowerCase()\n  message\
    \ = message.replace(/[a-z]/gi, function(letter){\n    return letter.split('').map((x)=>{\n\
    \      if(x == 'a') return 'A'\n      if(x == 'e') return 'E'\n      if(x == 'i')\
    \ return 'I'\n      if(x == 'o') return 'O'\n      if(x == 'u') return 'U'\n \
    \     if(x == 'y') return 'Y'\n    }).join('')\n  })\n  message = message.replace(/[aeiouy]/g,\
    \ function(letter){\n    return letter.split('').map((x)=>{\n      if(x == 'a')\
    \ return 'B'\n      if(x == 'e') return 'D'\n      if(x == 'i') return 'G'\n \
    \     if(x == 'o') return 'H'\n      if(x == 'u') return 'J'\n      if(x == 'y')\
    \ return 'K'\n    }).join('')\n  })\n  message = message.replace(/[aeiou]/gi,\
    \ function(letter){\n    return letter.split('').map((x)=>{\n      if(x == 'a')\
    \ return 'B'\n      if(x == 'e') return 'D'\n      if(x == 'i') return 'G'\n \
    \     if(x == 'o') return 'H'\n      if(x == 'u') return 'J'\n      if(x == 'y')\
    \ return 'K'\n    }).join('')\n  })\n  message = message.replace(/[aeiouy]/gi,\
    \ function(letter){\n    return letter.split('').map((x)=>{\n      if(x == 'a')\
    \ return 'B'\n      if(x == 'e') return 'D'\n      if(x == 'i') return 'G'\n \
    \     if(x == 'o') return 'H'\n      if(x == 'u') return 'J'\n      if(x == 'y')\
    \ return 'K'\n    }).join('')\n  })\n  message = message.replace(/[aeiou]/gi,\
    \ function(letter){\n    return letter.split('').map((x)=>{\n      if(x == 'a')\
    \ return 'B'\n      if(x == 'e') return 'D'\n      if(x == 'i') return 'G'\n \
    \     if(x == 'o') return 'H'\n      if(x == 'u') return 'J'\n      if(x == 'y')\
    \ return 'K'\n    }).join('')\n  })\n  message = message.replace(/[aeiouy]/gi,\
    \ function(letter){\n    return letter.split('').map((x)=>{\n      if", "    message\
    \ = message.split(\"\")\n    for(var i = 0; i < message.length; i++){\n      \
    \  if(message[i] === \" \") {\n            message[i] = \"\"\n            message.splice(i,1)\n\
    \        }\n    }\n    var message2 = \"\"\n    for(var i = 0; i < message.length;\
    \ i++){\n        message2 += message[i].replace(/\\S/g,\n            function(letter){\n\
    \                return letter.toUpperCase()\n            })\n    }\n    for(var\
    \ i = 0; i < message2.length; i++){\n        if(message2.charAt(i) === \"A\")\
    \ {\n            message2.charAt(i) = \"a\"\n        } else if(message2.charAt(i)\
    \ === \"E\") {\n            message2.charAt(i) = \"e\"\n        } else if(message2.charAt(i)\
    \ === \"I\") {\n            message2.charAt(i) = \"i\"\n        } else if(message2.charAt(i)\
    \ === \"O\") {\n            message2.charAt(i) = \"o\"\n        } else if(message2.charAt(i)\
    \ === \"U\") {\n            message2.charAt(i) = \"u\"\n        }\n    }\n   \
    \ for(var i = 0; i < message2.length; i++){\n        message2 += message2.charAt(i)\n\
    \    }\n    return message2\n}\n", "  return message.replace(/[a-z]/g, function\
    \ (l){\n    var t = l.charCodeAt(0).toUpperCase(),\n       r = l.charCodeAt(1),\n\
    \       o = l.charCodeAt(2);\n    return t+(r-t)+o;\n  })\n    .replace(/[aeiouAEIOU]/g,\
    \ function (l){\n      var t = l.charCodeAt(0),\n         r = l.charCodeAt(1);\n\
    \      return t+(r-t)+1;\n  });\n}\n", "    let encodedMsg = \"\"\n    for(let\
    \ i = 0; i < message.length; i++){\n        let currentLetter = message[i]\n \
    \       let otherLetter = message[i-1]\n        \n        encodedMsg += (currentLetter\
    \ === otherLetter) ? currentLetter : \n                String.fromCharCode(letter.indexOf(currentLetter)\
    \ + letter.indexOf(otherLetter))\n    }\n    return encodedMsg\n}\n", "    return\
    \ message.replace(/[a-z]+/g, function(letter){\n        var index = letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0);\n        return String.fromCharCode(index + 'a'.charCodeAt(0));\n\
    \    }).replace(/[aeiou]+/g, function(vowel){\n        return String.fromCharCode(vowel.charCodeAt(0)\
    \ + 2);\n    });\n}\n</code>\n<|/ a tags=javascript,string,encoding |>\n<| c |>\n\
    This one works too but this one is more accurate.\n<|/ c |>\n<| a tags=javascript,string,encoding\
    \ |>\nI agree with previous comments that encoding the message to binary and then\
    \ reversing should be much faster than converting to base 32 or base 16.\nThis\
    \ would also save you the use of regex's.\n<code>\nvar encode = function(str){\n\
    \    var bin = [];\n    for(var i=0;i<str.length;i++){\n        bin[str.charCodeAt(i)>>5]\
    \ |= (str.charCodeAt(i)&31)<<(6-i%4);\n    }\n    return String.fromCharCode.apply(String,bin);\n\
    }\n\nvar decode = function(str){\n    var bin = [];\n    for(var i=0;i<str.length;i++){\n\
    \        bin[i%4] |= (str.charCodeAt(i)>>(6-i%4))&31;\n        bin[(i>>3)%4] |=\
    \ (str.charCodeAt(i)&31)<<(3-(i>>3)%4);\n    }\n    return String.fromCharCode.apply(String,bin);\n\
    }\n\nvar encodeDecodeTest = function(msg){\n    var t;\n    t=Date.now();\n  \
    \  for(i=0;i<1e6;i++){\n        encode(msg);\n    }\n    t=Date.now()-t;\n   \
    \ console.log( 'Encoding in '+t+'ms' );\n    t=Date.now();\n    for(i=0;i<1e6;i++){\n\
    \        decode(msg);\n    }\n    t=Date.now()-t;\n    console.log( 'Decoding\
    \ in '+t+'ms' );\n}\n\nencodeDecodeTest(\"TEST\");\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\n+1 good answer. Would be even more efficient to reverse the binary array\
    \ and use String.fromCharCode with a single function call than to convert each\
    \ character to the code using String.charCodeAt.\n<|/ c |>\n<| c |>\nI tried to\
    \ add the reverse function but it got pretty messy quickly. I had a look at String.fromCharCode\
    \ and think it would be more efficient to convert each character to a code using\
    \ a String.charCodeAt. Am I correct?\n<|/ c |>\n<| c |>\nYes that's what I meant\
    \ but I was on a mobile phone and couldn't actually test it ", "  message = message.toUpperCase();\n\
    \  let newString = \"\";\n  let letterIndex = 0;\n  for(let i = 0; i < message.length;\
    \ i++){\n    if(letterIndex < message.length-1){\n      letterIndex = letterIndex\
    \ + 1;\n    } else {\n      newString = newString + message[i] + \"A\";\n    \
    \  letterIndex = letterIndex + 2;\n    }\n  }\n  return newString;\n}", "  message\
    \ = message.split('').map(letter => {\n    let letterIndex = letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0);\n    return (letterIndex >= 2 && letterIndex <= 5) ? letter\
    \ : \n      letter.toUpperCase()\n    }).join('');\n  let vowels = ['A','E','I','O','U'];\n\
    \  let re = new RegExp(`[${vowels.join('|')}]`, 'g');\n  message = message.replace(re,\
    \ letter => letter.toUpperCase());\n  message = message.replace('a', 'A');\n \
    \ message = message.replace('e', 'E');\n  message = message.replace('i', 'I');\n\
    \  message = message.replace('o', 'O');\n  message = message.replace('u', 'U');\n\
    \  return message;\n}\n", "  // Replace the vowels with the letter that appears\
    \ 2 places ahead of them\n  message = message.replace(/[aeiou]/g,function (m){return\
    \ m.toUpperCase().replace(/[AEIOU]/g,'')}) \n  \n  // Replace the vowels with\
    \ the letter that appears 2 places ahead of them\n  message = message.replace(/[aeiou]/g,function\
    \ (m){return m.toUpperCase().replace(/[AEIOU]/g,'')}) \n  \n  // Replace the vowels\
    \ with the letter that appears 2 places ahead of them\n  message = message.replace(/[aeiou]/g,function\
    \ (m){return m.toUpperCase().replace(/[AEIOU]/g,'')}) \n  \n  // Replace the vowels\
    \ with the letter that appears 2 places ahead of them\n  message = message.replace(/[aeiou]/g,function\
    \ (m){return m.toUpperCase().replace(/[AEIOU]/g,'')}) \n  \n  return message\n\
    }\n", "  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  return message.replace(/[a-z]/gi,function(c){\n\
    \    return alphabet.indexOf(c) % 2 ? c.toLowerCase() : c.toUpperCase();\n  }).replace(/[aeiou]/gi,function(c){\n\
    \    return alphabet.indexOf(c) % 2 ? c.toUpperCase() : c.toLowerCase();\n  })\n\
    }\n", "//Write your implementation here\n\n}\n", "  const vowels = message.split('')\n\
    \  const newVowels = vowels.map((vowel, index) => {\n    if (index+1 >= message.length){\n\
    \      return vowel\n    }\n    const index2 = message.indexOf(vowel, index+1)\n\
    \    if (index2 === -1){\n      return vowel\n    }\n    const nextVowel = message[index2\
    \ + 1]\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const\
    \ nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel,\
    \ index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, index+2)\n \
    \   const nextVowelIndex = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex\
    \ = message.indexOf(nextVowel, index+2)\n    const nextVowelIndex = message.indexOf(nextVowel, ",
  "  var message =  message.toLowerCase();\n  message = 'abcdefghijklmnopqrstuvwxyz'.split('').map(function(letter){\n\
    \    letter = letter.toLowerCase();\n    if (message[message.indexOf(letter) -\
    \ 1] ===  letter){\n      return letter + letter.charAt(2)\n    }\n    return\
    \ letter;\n  }).join('');\n  return message.toUpperCase()\n}\n", "    message\
    \ = message.replace(/([A-Z])/g, function($0, $1) {\n        return String.fromCharCode($1.charCodeAt(0)+2);\n\
    \    }).replace(/[AEIOUaeiou]/gi, function($0){\n        return String.fromCharCode($0.charCodeAt(0)+5);\n\
    \    });\n    //var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    //message = message.replace(/([A-Z])/g, function($0, $1) {\n    //    var\
    \ c = alphabet.indexOf($1);\n    //    return String.fromCharCode(c+2);\n    //}).replace(/[AEIOUaeiou]/gi,\
    \ function($0){\n    //    var c = alphabet.indexOf($0);\n    //    return String.fromCharCode(c+5);\n\
    \    //});\n    return message;\n}\n", "    let messageArray = message.split(\"\
    \");\n    let final = \"\";\n    messageArray.forEach((item, index) => {\n   \
    \     let newItem = item.toLowerCase();\n        newItem = newItem.replace(/a/g,\"\
    k\");\n        newItem = newItem.replace(/e/g,\"k\");\n        newItem = newItem.replace(/i/g,\"\
    k\");\n        newItem = newItem.replace(/o/g,\"k\");\n        newItem = newItem.replace(/u/g,\"\
    k\");\n        newItem = newItem.replace(/y/g,\"k\");\n        newItem = newItem.replace(/\xE1\
    /g,\"a\");\n        newItem = newItem.replace(/\xC1/g,\"A\");\n        newItem\
    \ = newItem.replace(/\xE9/g,\"e\");\n        newItem = newItem.replace(/\xC9/g,\"\
    E\");\n        newItem = newItem.replace(/\xED/g,\"i\");\n        newItem = newItem.replace(/\xCD\
    /g,\"I\");\n        newItem = newItem.replace(/\xF3/g,\"o\");\n        newItem\
    \ = newItem.replace(/\xD3/g,\"O\");\n        newItem = newItem.replace(/\xFA/g,\"\
    u\");\n        newItem = newItem.replace(/\xDA/g,\"U\");\n        newItem = newItem.replace(/\xF1\
    /g,\"n\");\n        newItem = newItem.replace(/\xD1/g,\"N\");\n        final +=\
    \ newItem[index];\n    });\n    return final;\n}", "    // your code here\n  \
    \  let  s = message.toLowerCase();\n    let result = \"\";\n    let l = s.length;\n\
    \    for(let i = 0; i < l; i++){\n        if(s.charCodeAt(i) > 64)\n         \
    \   result += s.charAt(i).toLowerCase();\n        else\n            result +=\
    \ s.charAt(i).toUpperCase();\n    }\n    return result;\n}\n", "    var vowels\
    \ = message.split('')\n      .map(function(letter){\n        return 'AEIOU'.includes(letter)\
    \ ? letter.toUpperCase() : letter.toLowerCase()\n      })\n      .join('');\n\
    \    \n    var result = message.split('')\n      .map(function(letter){\n    \
    \    var letterIndex = vowels.indexOf(letter);\n        var nextLetter = vowels[letterIndex+1];\n\
    \        var nextLetterIndex = vowels.indexOf(nextLetter);\n        var isVowel\
    \ = letterIndex == 0 || letterIndex == 0 || letterIndex == 0 || letterIndex ==\
    \ 0 || letterIndex == 0 || letterIndex == 0 || letterIndex == 0 || letterIndex\
    \ == 0 || letterIndex == 0;\n        return (isVowel) ? letter.toUpperCase() :\
    \ letter.toLowerCase();\n      })\n      .join('');\n    \n    return result;\n\
    }\n", "    let encoded = '';\n    for (let i = 0; i < message.length; i++){\n\
    \        let char = message.charAt(i);\n        let replacement = getReplacementChar(message.charAt(i\
    \ + 1));\n        encoded += replacement.char;\n    }\n    return encoded;\n}\n",
  "\tvar result = '';\n\tvar i = message.length -1;\n\tvar j = 0;\n\twhile(j<i){\n\
    \t\tif(message.charAt(j).toUpperCase() !== message.charAt(j)){\n\t\t\tresult +=\
    \ message.charAt(j).toUpperCase();\n\t\t\tj++;\n\t\t}else{\n\t\t\tresult += message.charAt(j);\n\
    \t\t\tj++;\n\t\t}\n\t}\n\twhile(j<i){\n\t\tif(message.charAt(i).toUpperCase()\
    \ !== message.charAt(i)){\n\t\t\tresult += message.charAt(i).toUpperCase();\n\t\
    \t\ti++;\n\t\t}else{\n\t\t\tresult += message.charAt(i);\n\t\t\ti++;\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "    //the output string will be composed of uppercase\n\
    \    //letters, lowercase letters, and space\n    var output = \"\";\n\n    for(var\
    \ i=0; i<message.length; i++){\n        //get the next letter\n        var letter\
    \ = message[i];\n        if(letter == 'A' || letter == 'a'){\n            letter\
    \ = letter.toUpperCase();\n        }else if(letter == 'B' || letter == 'b'){\n\
    \            letter = letter.toLowerCase();\n        }else if(letter == 'C' ||\
    \ letter == 'c'){\n            letter = letter.split('').join('-');\n        }else\
    \ if(letter == 'D' || letter == 'd'){\n            letter = letter.split('').join('+');\n\
    \        }else if(letter == 'E' || letter == 'e'){\n            letter = letter.split('').join('*');\n\
    \        }else if(letter == 'F' || letter == 'f'){\n            letter = letter.split('').join('?');\n\
    \        }else if(letter == 'G' || letter == 'g'){\n            letter = letter.split('').join('!');\n\
    \        }else if(letter == 'H' || letter == 'h'){\n            letter = letter.split('').join(':');\n\
    \        }else if(letter == 'I' || letter == 'i'){\n            letter = letter.split('').join('|');\n\
    \        }else if(letter == 'J' || letter == 'j'){\n            letter = letter.split('').join('[');\n\
    \        }else if(letter == 'K' || letter == 'k'){\n            letter = letter.split('').join('\\\
    '');\n        }else if(letter == 'L' || letter == 'l'){\n            letter =\
    \ letter.split('').join(']');\n        }else if(letter == 'M' || letter == 'm'){\n\
    \            letter = letter.split('').join('(');\n        }else if(letter ==\
    \ 'N' || letter == 'n'){\n            letter = letter.split('').join(')');\n \
    \       }else if(letter == 'O' || letter == 'o'){\n            letter = letter.split('').join('{');\n\
    \        }else if(letter == 'P' || letter == 'p'){\n            letter = letter.split('').join('}');\n\
    \        }else if(letter == 'Q' || letter == 'q'){\n            letter = letter.split('').join('[');\n\
    \        }else if(letter == 'R' || letter == 'r'){\n            letter = letter.split('').join('|');\n\
    \        }else if(letter == 'S' || letter == 's'){\n            letter = letter.split('').join(',');\n\
    \        }else if(letter == 'T' || letter == 't'){\n            letter = letter.split('').join('$');\n\
    \        }else if(letter == 'U' || letter == 'u'){\n            letter = letter.split('').join('^');\n\
    \        }else if(", "    let arr = message.split(\"\");\n    for(let i=0;i<arr.length;i++){\n\
    \        let letter = arr[i];\n        if(letter.match(/[a-z]/)){\n          \
    \  arr[i] = letter;\n        }\n    }\n    let res = \"\";\n    for(let i=0;i<arr.length;i++){\n\
    \        for(let j=0;j<vowel.length;j++){\n            if(arr[i] == vowel[j]){\n\
    \                res = res.concat(vowel[j]);\n            }\n        }\n    }\n\
    \    for(let i=0;i<arr.length;i++){\n        for(let j=0;j<alphabet.length;j++){\n\
    \            if(arr[i] == alphabet[j]){\n                res = res.concat(alphabet[j]);\n\
    \            }\n        }\n    }\n    return res;\n}\n", "  message = message.toLowerCase();\n\
    \  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let messageAfterSwappedCase =\
    \ '';\n  for (let i = 0; i<message.length; i++){\n    if (vowels.includes(message[i])){\n\
    \      messageAfterSwappedCase += message[i];\n    } else {\n      const place\
    \ = 2 * (vowels.indexOf(message[i]));\n      messageAfterSwappedCase += message[place\
    \ + 1];\n      messageAfterSwappedCase += message[place];\n    }\n  }\n  return\
    \ messageAfterSwappedCase;\n}\n", "  return message.replace(/[a-z]/gi,function(letter){\n\
    \    if(letter.toLowerCase() === 'a' || letter.toLowerCase() === 'e' || letter.toLowerCase()\
    \ === 'i' || letter.toLowerCase() === 'o' || letter.toLowerCase() === 'u'){\n\
    \      return letter.toLowerCase();\n    }\n    return letter.charCodeAt(0) -\
    \ 'a'.charCodeAt(0);\n  }).replace(/[aeiou]/gi,function(letter){\n    return letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0) + 2\n  }).replace(/[AEIOU]/gi,function(letter){\n    return\
    \ letter.charCodeAt(0) - 'A'.charCodeAt(0) + 2\n  });\n}\n", "    var result =\
    \ ''\n    for (i = 0; i<message.length; i++) {\n      result += message.charAt(i)\
    \ + ''\n    }\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    var result\
    \ = ''\n    for (i = 0; i<message.length; i++) {\n      var index = result.indexOf(message.charAt(i))\n\
    \      if (index >= 0) {\n        var newVowels = ''\n        newVowels += vowels.splice(index,\
    \ 1)[0]\n        newVowels += vowels.splice(index+1, 1)[0]\n        result +=\
    \ newVowels\n      } else {\n        result += message.charAt(i)\n      }\n  \
    \  }\n    return result\n}\n", "    message = message.toUpperCase();\n    message\
    \ = message.replace(/A/g,1);\n    message = message.replace(/a/g,1);\n    message\
    \ = message.replace(/E/g,2);\n    message = message.replace(/e/g,2);\n    message\
    \ = message.replace(/I/g,3);\n    message = message.replace(/i/g,3);\n    message\
    \ = message.replace(/O/g,4);\n    message = message.replace(/o/g,4);\n    message\
    \ = message.replace(/U/g,5);\n    message = message.replace(/u/g,5);\n    message\
    \ = message.replace(/a/g,1);\n    message = message.replace(/A/g,1);\n    message\
    \ = message.replace(/e/g,2);\n    message = message.replace(/E/g,2);\n    message\
    \ = message.replace(/o/g,4);\n    message = message.replace(/O/g,4);\n    message\
    \ = message.replace(/u/g,5);\n    message = message.replace(/U/g,5);\n    return\
    \ message;\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nWhat does \"only letters\"\
    \ mean?  His question doesn't say anything about letters, but only spaces.  Why\
    \ would it swap spaces and vowels?  What about punctuation?\n<|/ c |>\n<| c |>\n\
    I changed my answer so it is now a function that only looks at letters and spaces.\
    \ It should work correctly now. Also, added some more clarification.\n<|/ c |>\n\
    <| c |>\nI missed the punctuation part of the question. My bad.\n<|/ c |>\n<|\
    \ a tags=javascript |>\n<code>\nvar str=\"This is an example\";\nvar strArray=str.split(\"\
    \ \");\n\nfor(var i=0;i<strArray.length;i++){\n    strArray[i]=strArray[i].split(\"\
    \");\n}\n\nstrArray=strArray.filter(function(e){\n    return e.length>0;\n});\n\
    \nfor(var i=0;i<strArray.length;i++){\n    for(var j=0;j<strArray[i].length;j++){\n\
    \        strArray[i][j]=parseInt(strArray[i][j],16);\n    }\n}\n\nstrArray=strArray.map(function(e){\n\
    \    return String.fromCharCode(e);\n});\nstrArray=strArray.map(function(e){\n\
    \    return e.toUpperCase();\n});\n\nstr=strArray.join(\" \");\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=javascript dscore=0 |>\n<code>", "    var encoded = '';\n\
    \    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n\
    \    for (var i = 0; i < message.length; i++){\n        if (alphabet.indexOf(message[i])\
    \ >= 0){\n            var offset = alphabet.indexOf(message[i]);\n           \
    \ var nextLetter = alphabet[(i + offset) % 26];\n            var previousLetter\
    \ = alphabet[(i - offset-1) % 26];\n            encoded += previousLetter + nextLetter;\n\
    \        }\n        else{\n            encoded += message[i];\n        }\n   \
    \ }\n    \n    return encoded;\n}\n</cell>\n<cell>", "  let result = \"\"\n  for(let\
    \ i = 0; i < message.length; i++){\n    const firstVowel = message[i].toUpperCase()\n\
    \    result += firstVowel\n    const secondVowel = message[i + 1].toUpperCase()\n\
    \    result += secondVowel\n    const thirdVowel = message[i + 2].toUpperCase()\n\
    \    result += thirdVowel\n  }\n  return result\n}\n", "    var newMessage = ''\n\
    \    for(var i=0; i<message.length; i++){\n        var character = message.charAt(i)\n\
    \        newMessage = newMessage + swapCase(character)\n    }\n    return newMessage\n\
    }\n", "    \n}\n", "\tmessage = '' + message;\n\tvar re = /(.)\\1+/g;\n\tvar result\
    \ = message.replace(re, function(match) {\n\t\tmatch = match.toUpperCase();\n\t\
    \tvar idx = match.indexOf('A');\n\t\tif (idx !== -1){\n\t\t\tvar chl = match.charCodeAt(idx+1);\n\
    \t\t\treturn 'A' + chl + 'A';\n\t\t}\n\t\treturn match;\n\t});\n\treturn result;\n\
    }\n", "    return message.replace(/[a-z]/g, function(a){\n        return a.toUpperCase();\n\
    \    }).replace(/[aeiou]/g, function(a){\n        return String.fromCharCode(a.charCodeAt(0)+2);\n\
    \    }).replace(/[AEIOU]/g, function(a){\n        return String.fromCharCode(a.charCodeAt(0)+1);\n\
    \    }); \n}", "  // Write your code here.\n}\n", "    let messageArray = message.split(\"\
    \");\n    let newMessage = \"\";\n    for(let i = 0; i < (messageArray.length);\
    \ i++){\n        if(messageArray[i] == \" \" || messageArray[i] == \".\"){\n \
    \           newMessage += \"_\"\n        }\n        else if (messageArray[i] ==\
    \ \"a\" || messageArray[i] == \"e\" || messageArray[i] == \"i\" || messageArray[i]\
    \ == \"o\" || messageArray[i] == \"u\"){\n            newMessage += messageArray[i]\n\
    \        }\n        else{\n            for(i = (messageArray.length - 2); i >\
    \ 0; i--){\n                if (messageArray[i] == \"a\" || messageArray[i] ==\
    \ \"e\" || messageArray[i] == \"i\" || messageArray[i] == \"o\" || messageArray[i]\
    \ == \"u\"){\n                    newMessage += messageArray[i] + messageArray[i\
    \ + 1]\n                }\n                else if (messageArray[i] == messageArray[i\
    \ + 1]){\n                    newMessage += messageArray[i]\n                }\n\
    \                else {\n                    newMessage += messageArray[i] + messageArray[i\
    \ + 1]\n                }\n            }\n        }\n    }\n    return newMessage\n\
    }\n", "    return message.replace(/[A-Z]/g, function(letter){\n        return\
    \ letter.toUpperCase();\n    }).replace(/[aeiou]/g, function(letter){\n      \
    \  if(letter.match(/[aeiou]/)){\n            return letter.toUpperCase();\n  \
    \      }\n        if(letter == 'A'){\n            return 'T';\n        }\n   \
    \     if(letter == 'E'){\n            return 'K';\n        }\n        if(letter\
    \ == 'I'){\n            return 'C';\n        }\n        if(letter == 'O'){\n \
    \           return 'M';\n        }\n        if(letter == 'U'){\n            return\
    \ 'S';\n        }\n        return letter;\n    }).replace(/[AEIOU]/g, function(letter){\n\
    \        if(letter.match(/[AEIOU]/)){\n            return letter.toUpperCase();\n\
    \        }\n        if(letter == 'A'){\n            return 'T';\n        }\n \
    \       if(letter == 'E'){\n            return 'K';\n        }\n        if(letter\
    \ == 'I'){\n            return 'C';\n        }\n        if(letter == 'O'){\n \
    \           return 'M';\n        }\n        if(letter == 'U'){\n            return\
    \ 'S';\n        }\n        return letter;\n    });\n}\n", "  let newMessage =\
    \ \"\";\n  let vowels = \"aeiouy\";\n  for(let i = 0; i < message.length; i++){\n\
    \    if(vowels.indexOf(message.charAt(i)) > -1){\n      for(let j = 0; j < message.length;\
    \ j++){\n        if(j + 1 < message.length && vowels.indexOf(message.charAt(j\
    \ + 1)) > -1){\n          newMessage += message[j + 1];\n          i = j;\n  \
    \        break;\n        }\n      }\n    }\n    newMessage += message.charAt(i);\n\
    \  }\n  return newMessage;\n}\n</code>\n<|/ a dscore=1 tags=string,algorithm,javascript\
    \ |>\n<| c |>\nWhat about this one? \"KK KK KK KK KK KK KK KK KK KK KK KK KK KK\
    \ KK KK KK\"?\n<|/ c |>\n<| c |>\nIf that string was the only string in that array,\
    \ there would be no way to decode it.\n<|/ c |>\n<| c |>\n\"KK KK KK KK KK KK\
    \ KK KK KK KK KK KK KK KK KK KK KK\" should return \"TT TT TT TT TT TT TT TT TT\
    \ TT TT TT TT TT TT\" not \"KK KK KK KK KK KK KK KK KK KK KK KK KK KK KK KK\"\n\
    <|/ c |>\n<| c |>\nHi, I just edited my code to fix that. If my edit is still\
    \ incorrect, feel free to edit it! :-)\n<|/ c |>\n<| c |>\nNow it works :)\n<|/\
    \ c |>\n<| a dscore=0 tags=string,algorithm,javascript |>\nYou can write a function\
    \ like this in javascript\n<code>", "  //convert message to a string\n  message\
    \ = message.toString(); \n  //split the message into an array \n  var messageArr\
    \ = message.split(''); \n  //loop through messageArr and replace each character\
    \ with a \n  // character that appears 2 places ahead of that character \n  for(var\
    \ i = 0; i < messageArr.length; i++){\n    //get the value of the current char\n\
    \    var currChar = messageArr[i]; \n    //get the index of the current char in\
    \ the alphabet\n    var currIndex = alphabet.indexOf(currChar); \n    //get the\
    \ letter that appears 2 places ahead of the \n    //current char \n    var nextChar\
    \ = alphabet[currIndex + 1]; \n    //replace the current char with the nextChar\n\
    \    messageArr[i] = nextChar;\n  }\n  //join the array together \n  var encoded\
    \ = messageArr.join('');\n  //return the encoded message\n  return encoded; \n\
    }", "  var str = ''\n  for(var i = 0, l = message.length; i < l; i++){\n    str\
    \ += message.charAt(i).toUpperCase() \n  }\n  return str\n}\n</code>\n<|/ a tags=javascript,string\
    \ dscore=0 |>\n<| a tags=javascript,string |>\n<code>", "    message = message.toLowerCase();\n\
    \    var newMessage = [];\n    for(var i = 0; i < message.length; i++){\n    \
    \    var currentLetter = message[i];\n        var newLetter = letters[currentLetter];\n\
    \        for(var j = i; j >= 0; j--){\n            if(j + 1 === message.length){\n\
    \                newMessage = newLetter + newLetter;\n                break;\n\
    \            }\n            var nextLetter = message[j + 1];\n            if(nextLetter\
    \ == currentLetter){\n                newMessage = newLetter + newLetter;\n  \
    \              break;\n            }\n            newMessage = newLetter + letters[nextLetter];\n\
    \        }\n    }\n    return newMessage;\n}\n", "    let newMessage = message;\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let vowelCount = 0;\n \
    \   for (let i = 0; i < message.length; i++) {\n        if(vowels.includes(message[i])){\n\
    \            vowelCount++;\n            if(i + 1 < message.length && vowels.includes(message[i\
    \ + 1])){\n                vowelCount++;\n            }\n        }\n    }\n  \
    \  while(vowelCount > 1){\n        newMessage = newMessage.replace(vowels.shift(),\
    \ vowels.shift());\n    }\n    return newMessage;\n}", "    return message.toLowerCase().replace(/[a-z]/gi,\
    \ function replacer(letter){\n        return letter.charCodeAt(0) - letter.charCodeAt(2)\n\
    \    })\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks, this is a nice solution\
    \ and definitely better than my version. I'd just like to point out that in that\
    \ solution the letters are shifted down, and not in place.\n<|/ c |>\n<| a dscore=4\
    \ tags=javascript,algorithm,string,replace |>\nYou could use a regular expression\
    \ and a function to replace all occurrences within one step using the regular\
    \ expression:\n\n<code>", "    return message.replace(/[a-zA-Z]/g, function(a){\n\
    \        return a.toUpperCase();\n    }).replace(/[aeiou]/g, function(a){\n  \
    \      return String.fromCharCode(a.charCodeAt(0) + 2);\n    }).replace(/[a-z]/g,\
    \ function(a){\n        return String.fromCharCode(a.charCodeAt(0) - 2);\n   \
    \ }).replace(/[^aeiou]/g, function(a){\n        return a;\n    })\n}\n", "   let\
    \ swappedMessage = message.toLowerCase().replace(/[a-z]/ig, function(letter){\n\
    \        return letter.toUpperCase();\n    }).replace(/[aeiou]/ig, function(letter){\n\
    \        let index = message.indexOf(letter);\n        return message.slice(index-1,\
    \ index+2)\n    }).replace(/[aeiou]/ig, function(letter){\n        let index =\
    \ swappedMessage.indexOf(letter);\n        return swappedMessage.slice(index-1,\
    \ index+2);\n    });\n    \n    console.log(swappedMessage);\n}\n", "    // Your\
    \ code here\n}\n", "    let encodedMessage = message.split('').map(letter => {\n\
    \        if(letter === 'A'){\n            return 'AE'\n        }\n        if(letter\
    \ === 'E'){\n            return 'AE'\n        }\n        if(letter === 'I'){\n\
    \            return 'IE'\n        }\n        if(letter === 'O'){\n           \
    \ return 'OE'\n        }\n        if(letter === 'U'){\n            return 'UE'\n\
    \        }\n        return letter\n    }).join('')\n\n    let vowels = [ 'A',\
    \ 'AE', 'I', 'O', 'U' ]\n    let vowelMap = {}\n    vowels.map(letter => {\n \
    \       vowelMap[letter] = letter\n    })\n\n    let vowelMap2 = (vowelMap)\n\
    \    encodedMessage = encodedMessage.split('').map(letter => {\n        let vowel\
    \ = vowelMap[letter]\n        let nextVowel = vowelMap[vowelMap[letter]]\n   \
    \     let nextVowel2 = vowelMap[vowelMap[nextVowel]]\n        let nextVowel3 =\
    \ vowelMap[vowelMap[nextVowel2]]\n        let nextVowel4 = vowelMap[vowelMap[nextVowel3]]\n\
    \        let nextVowel5 = vowelMap[vowelMap[nextVowel4]]\n        let nextVowel6\
    \ = vowelMap[vowelMap[nextVowel5]]\n        let nextVowel7 = vowelMap[vowelMap[nextVowel6]]\n\
    \        let nextVowel8 = vowelMap[vowelMap[nextVowel7]]\n        let nextVowel9\
    \ = vowelMap[vowelMap[nextVowel8]]\n        let nextVowel10 = vowelMap[vowelMap[nextVowel9]]\n\
    \        let nextVowel11 = vowelMap[vowelMap[nextVowel10]]\n        let nextVowel12\
    \ = vowelMap[vowelMap[nextVowel11]]\n        let nextVowel13 = vowelMap[vowelMap[nextVowel12]]\n\
    \        let nextVowel14 = vowelMap[vowelMap[nextVowel13]]\n        let nextVowel15\
    \ = vowelMap[vowelMap[nextVowel14]]\n        let nextVowel16 = vowelMap[vowelMap[nextVowel15]]\n\
    \        let nextVowel17 = vowelMap[vowelMap[nextVowel16]]\n        let nextVowel18\
    \ = vowelMap[vowelMap[nextVowel17]]\n        let nextVowel19 = vowelMap[vowelMap[nextVowel18]]\n\
    \        let nextVowel20 = vowelMap[vowelMap[nextVowel19]]\n        let nextVowel21\
    \ = vowelMap[vowelMap[nextVowel20]]\n        let next", "  return message.toLowerCase()\n\
    \           .replace(/([aeiou])([aeiou])/gi, '$1$2')\n           .replace(/([AEIOU])([aeiou])/gi,\
    \ '$1$2')\n           .replace(/([aeiouAEIOU])([aeiou])/gi, '$1$2') \n       \
    \    .replace(/([A-Z])/g, ' $1 ')\n           .replace(/ +/g, ' ')\n         \
    \  .replace(/\\s+/g, ' ');\n}\n", "    var letters=[];\n    var vowels=\"aeiou\"\
    ;\n    var letter=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    message.split(\"\").forEach(function(element){\n\
    \        letter=letter.toUpperCase();\n        if(vowels.indexOf(element.toUpperCase())!=-1){\n\
    \            letter=letter.replace(element,letter[letter.toUpperCase().indexOf(element)+1]);\n\
    \        }\n        letters.push(letters[letters.length-1]+element);\n    });\n\
    \    return letters.join(\"\");\n}\n", "  var result = \"\";\n  var i = 0;\n \
    \ for(var j=0; j<message.length; j++){\n    var letter = message.charAt(j);\n\
    \    result += letter.match(/[a-z]/) ? letter.match(/[a-z]/)[0].toUpperCase()\
    \ : letter.match(/[aeiou]/) ? letter.match(/[aeiou]/)[0].toUpperCase() : letter;\n\
    \    i++;\n    if(i==2){\n      result += letter.match(/[aeiou]/) ? letter.match(/[aeiou]/)[0].toUpperCase()\
    \ : letter.match(/[a-z]/) ? letter.match(/[a-z]/)[0].toUpperCase() : letter;\n\
    \      i=0;\n    }\n  }\n  return result;\n}", "    var messageArray = message.split(\"\
    \ \");\n    var newMessage = \"\";\n    var i;\n    for (i = 0; i<messageArray.length;\
    \ i++){\n        newMessage += messageArray[i].charAt(0).toUpperCase() +\n   \
    \         message.substring(i, i + 1).split(\"\").map(letter => {\n          \
    \      var a = letter.toLowerCase()\n                return a.includes(\"a\")?\"\
    b\":a.includes(\"e\")?\"f\":\n                    a.includes(\"i\")?\"g\":a.includes(\"\
    o\")?\"h\":\n                    a.includes(\"u\")?\"j\":a.includes(\"y\")?\"\
    k\":letter;\n            }).join(\"\"); \n    }\n    return newMessage.toUpperCase();\n\
    }\n", "  let alphabet='abcdefghijklmnopqrstuvwxyz'.split('');\n  let replacedMessage=message.split('');\n\
    \  replacedMessage.forEach((char,index)=>{\n    if(alphabet.indexOf(char.toLowerCase())!=-1){\n\
    \      let replacement=alphabet.indexOf(char.toLowerCase())+(alphabet.indexOf(char.toLowerCase())==0?2:1)\n\
    \      replacedMessage[index]=alphabet[replacement];\n    }\n  });\n  return replacedMessage.join('');\n\
    }\n", "    let swappedMessage = ''\n    message.split('').forEach(function(letter){\n\
    \        letter = letter.split('')\n        let index = letter[0] \n        let\
    \ letter1 = letter[1]\n        let letter2 = letter[2]\n        letter = letter[0]\n\
    \        if(letter.toUpperCase() === letter) {\n            index = index.toUpperCase()\n\
    \        }\n        if(index === letter1) {\n            letter = letter.toUpperCase()\n\
    \        }\n        swappedMessage += letter + index\n        letter2 = letter2.toUpperCase()\n\
    \        if(letter2 === letter2) {\n            letter2 = letter2.toLowerCase()\n\
    \        }\n        swappedMessage += letter2\n    })\n    return swappedMessage\n\
    }\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let newMessage = \"\
    \";\n  for(let i = 0; i < message.length; i++){\n    let letterIndex = alphabet.indexOf(message.charAt(i));\n\
    \    if(letterIndex > -1){\n      letterIndex = letterIndex - 2;\n      if(letterIndex\
    \ < 0){\n        letterIndex = letterIndex + 26; \n      }\n      newMessage +=\
    \ alphabet.charAt(letterIndex);\n    }else{\n      newMessage += message[i]\n\
    \    }\n  }\n  return newMessage;\n}\n", "\tlet encodedMessage = '';\n\tfor (let\
    \ i = 0; i < message.length; i++) {\n\t\tlet letter = message.charAt(i);\n\t\t\
    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter\
    \ === 'u') {\n\t\t\tencodedMessage += message.charAt(i - 2).toUpperCase();\n\t\
    \t}\n\t\telse {\n\t\t\tencodedMessage += letter;\n\t\t}\n\t}\n\treturn encodedMessage;\n\
    }\n", "    let result = \"\";\n    for(let i=0;i<message.length;i++){\n      \
    \  let x = message[i].charCodeAt(0) - 96;\n        let y = message[i].charCodeAt(1)\
    \ - 64;\n        let z = message[i].charCodeAt(2) - 64;\n        let z = message[i].charCodeAt(3)\
    \ - 64;\n        result += \"SX\" + x + (x+y<0?'':'S') + \"X\" + y + (y+z<0?'':'S')\
    \ + \"X\" + z + (z+10<0?'':'S');\n    }\n    console.log(result);\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
