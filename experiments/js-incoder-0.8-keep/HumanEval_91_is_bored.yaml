name: HumanEval_91_is_bored
language: js
prompt: "//You'll be given a string of words, and your task is to count the number\n\
  // of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunction is_bored(S){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"\
  Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"\
  bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive.\
  \ will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a\
  \ walk\"),0);\n}\n\ntest();"
completions: ["    let count = 0;\n    S.split('.').forEach((sentence) => {\n    \
    \    if (sentence.indexOf('I') != 0) {\n            count++;\n        }\n    });\n\
    \    return count;\n}\n", "\treturn boredomCount(S,'boredom');\n}\n\n", "\tvar\
    \ boredom = 0 ;\n\tboredom = (S.startsWith('I')) ? 1 : 0;\n\treturn boredom;\n\
    }", "  var boredom = S.split(\".\").map(s => s.trim()).filter(s => s.indexOf(\"\
    I\") == 0);\n  return boredom.length>0;\n}\n", "    S=S.toLowerCase();\n    return\
    \ S.indexOf(\"i\")==0 || S.indexOf(\".\")==0 || S.indexOf(\"?\")==0 || S.indexOf(\"\
    !\")==0;\n}\n</cell>\n<cell>\n# Let's get some practice with these functions:\n\
    \n# print all the strings in our corpus\nprint(corpus); \nprint()\n\n# what are\
    \ the dimensions of corpus?\nprint(\"dimensions of corpus: \",corpus.shape, end=\"\
    \\n\\n\")\n\n# what are the dimensions of the vectorizer object?\nprint(\"dimensions\
    \ of vectorizer object: \",vectorizer.shape, end=\"\\n\\n\")\n\n# what are the\
    \ dimensions of the tfidf vectorizer object?\nprint(\"dimensions of tfidf vectorizer\
    \ object: \",tfidf_vectorizer.shape, end=\"\\n\\n\")\n\n# what are the dimensions\
    \ of the lda vectorizer object?\nprint(\"dimensions of lda vectorizer object:\
    \ \",lda_vectorizer.shape, end=\"\\n\\n\")\n\n# what are the dimensions of the\
    \ count vectorizer object?\nprint(\"dimensions of count vectorizer object: \"\
    ,count_vectorizer.shape, end=\"\\n\\n\")\n\n# what are the dimensions of the bow/word\
    \ count vectorizer object?\nprint(\"dimensions of bow/word count vectorizer object:\
    \ \",bow_vectorizer.shape, end=\"\\n\\n\")\n\n</cell>\n<cell>\n# Let's train the\
    \ model \n# We'll train on all the words in the corpus\n\n# Initialize a loger\n\
    import logging\n\nlogging.basicConfig(format='%(message)s')\nlogger = logging.getLogger()\n\
    logger.setLevel(logging.INFO)\n\n# Initialize CountVectorizer\ncount_vect = CountVectorizer()\n\
    \n# Fit + transform train data\ntrain_vectors = count_vect.fit_transform(corpus)\n\
    \n# Transform test data\ntest_vectors = count_vect.transform(test)\n\n# Fit a\
    \ linear model on train data and predict test data\nlm = LinearRegression().fit(train_vectors,\
    \ y_train)\n\n# Predict test set labels\npredictions = lm.predict(test_vectors)\n\
    \n# Evaluate model performance\nprint(\"Accuracy: \",metrics.accuracy_score(y_test,\
    \ predictions))\n</cell>\n<cell>\n# Plot training accuracy\nplt.figure(figsize=(15,10))\n\
    plt.scatter(range(1, len(lm.coef_), 1), lm.coef_, alpha=0.5, c='g')\nplt.xlim([-1,\
    \ len(lm.coef_)])\nplt.ylabel('Coefficient value')\nplt.xlabel('Document index')\n\
    plt.title('Weight vs Index')\nplt.show()\n</cell>\n<text>\nQuestion 2.2: Understanding\
    \ TF-IDF\nWhat is the TF-IDF?  Let's try it.\n\nThe TF-IDF stands for \"Term Frequency\
    \ - Inverse Document Frequency\".", "    let arr = [];\n    let flag = 0;\n  \
    \  S.split('.').forEach(function(word){\n        if(word === 'I'){\n         \
    \   flag += 1;\n        }\n    });\n    return flag;\n}", "\tlet words=S.split(\"\
    \ \");\n\tlet bored=words.filter(word=>word.startsWith(\"I\"));\n\treturn bored.length>0?bored.length:0;\n\
    }\n", "    if (S.indexOf('I') === 0) {\n        var bored_words = S.split('.');\n\
    \        var bored_count = bored_words.length;\n        if (bored_count > 0) {\n\
    \            for (var i = 0; i < bored_count; i++) {\n                if (bored_words[i].indexOf('?')\
    \ > -1) {\n                    bored_count--;\n                }\n           \
    \ }\n        }\n        return bored_count;\n    }\n    return 0;\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<text>\nNote that, depending on how\
    \ your Python is set up, you may need to manually install Boredom:\n\n$ pip install\
    \ boredom\nTo check your installation, run:\n\n$ python -c \"import boredom\"\n\
    If this doesn't work, then restart your kernel.\n\n</text>\n<cell>\n# Run this\
    \ cell to see an example of how to use the `boredom` package\n\n# If you get a\
    \ \"ModuleNotFoundError\" error, you may need to use the following code:\n# !\
    \ pip install boredom\nimport boredom\nprint(boredom.is_bored('Hello world'))\n\
    </cell>\n<cell>\n# Run this cell to see an example of how to use the `boredom`\
    \ package\n\n# If you get a \"ModuleNotFoundError\" error, you may need to use\
    \ the following code:\n# ! pip install boredom\nimport boredom\nprint(boredom.is_bored('The\
    \ sky is blue. The sun is shining. I love this weather'))\n</cell>\n<cell>\n#\
    \ Run this cell to see an example of how to use the `boredom` package\n\n# If\
    \ you get a \"ModuleNotFoundError\" error, you may need to use the following code:\n\
    # ! pip install boredom\nimport boredom\nprint(boredom.is_bored('This is fun.'))\n\
    </cell>\n<text>\nThe Boredom package provides many other useful functions as well.\n\
    \n\n</text>\n<text>\nTask\nYou'll be given a string of words, and your task is\
    \ to count the number of\ninversions (i.e., the number of words such that their\
    \ letters are in opposite order).\nYou may find this exercise interesting, as\
    \ it gives you a chance to try out Python's built-in data structures and algorithms.\n\
    \n\n</text>\n<cell>\ndef inversions(S):\n    \"\"\"\n    Given a string, \"S\"\
    , return a list that contains the number of inversions\n    (where \"inversion\"\
    \ means the two letters being swapped are adjacent).\n    \n    For example, if\
    \ S = \"abcd\", then your program should output [1, 2].\n    \n    The \"inversions\"\
    \ are indicated by the number of the letter 'a' in S.", "    // Remove trailing\
    \ periods\n    S = S.toString().replace(/\\.+$/,'')\n\n    // Convert string to\
    \ lowercase\n    S = S.toLowerCase()\n\n    // Split the string into sentences\
    \ based on periods, question marks, and exclamation marks\n    var sentences =\
    \ S.split(/[\\.\\?!]\\s/)\n\n    // Loop through all the sentences.\n    // For\
    \ each sentence, loop through all the letters in the sentence.\n    // For each\
    \ letter, check whether it is a capital letter. If it is, then increment boredom.\n\
    \    var boredom = 0\n    for (var i = 0; i < sentences.length; i++) {\n     \
    \   var letters = sentences[i].toLowerCase().split('')\n        for (var j = 0;\
    \ j < letters.length; j++) {\n            if (letters[j].match(/[a-z]/)) {\n \
    \               boredom++\n            }\n        }\n    }\n    return boredom\n\
    }\n", "  let count = 0;\n  let boredom = S.startsWith(\"I\");\n  for (let i =\
    \ 1; i < S.length; i++){\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!'){\n\
    \      if (boredom){\n        count++;\n      }\n      boredom = false;\n    }\n\
    \    else{\n      boredom = true;\n    }\n  }\n  return count;\n}\n", "  var bored_count\
    \ = 0;\n  \n  for(var i=0; i<S.length; i++){\n    if(S.charAt(i) != \"I\" && S.charAt(i)\
    \ != \".\" && S.charAt(i) != \"?\" && S.charAt(i) != \"!\"){\n      bored_count++;\n\
    \    }\n  }\n  \n  return bored_count;\n}\n", "  var bored = false\n  S = S.split(\"\
    \ \");\n  S.forEach(function(word){\n    if(word === \"I\" || word === \"You\"\
    \ || word === \"He\" || word === \"She\" || word === \"We\" || word === \"The\"\
    \ || word === \"That\" || word === \"These\" || word === \"It\" || word === \"\
    In\" || word === \"That\" || word === \"Its\"){\n      bored = true\n    }\n \
    \ })\n  return bored\n}\n", "    return boredomCount(S, 0) == 0;\n}", "  var boredom_words\
    \ = \"I love this weather\".split(\" \");\n  var boredom_count = (boredom_words).filter(function(w){return\
    \ S.substr(0, w.length) === w}).length;\n  return boredom_count;\n}\n", "  S=S.toLowerCase();\n\
    \  var boredoms=0,words=S.split(\" \"),i=words.length;\n  while(i--){\n    if(words[i][0]===\"\
    i\"){\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n", "    return /^(?:I|you|I)\\\
    .?\\s+\\w+\\.?\\s+\\w+\\.?\\s+\\w+\\.?/.test(S);\n}", "  if (S==\".\" || S==\"\
    !\" || S==\"?\") return 0;\n  return 1;\n}\n", "    var boredom_regex = new RegExp(\"\
    ^[I].*?[.?!](.*?)$\");\n    var boredom_count  = 0;\n    var boredom_string =\
    \ \"\"\n    var split_string = S.split(\".\")\n    for(var x in split_string){\n\
    \        var element = split_string[x];\n        if(boredom_regex.test(element)){\n\
    \            boredom_count++\n            boredom_string = element\n         \
    \   break\n        }\n    }\n    return boredom_count\n}\n</cell>\n<cell>\n#Run\
    \ this cell to see how your output should look\n#Make sure you turn in the correct\
    \ value for the function is_bored\nprint(\"\\nExample of a boredom:\")\nprint(is_bored(\"\
    Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\"))\n</cell>\n<cell>\n#Task 2: Write a function that returns a\
    \ list of all words that\n# are less than 4 letters long.\n# Write a function\
    \ called count_length with these parameters:\n# 1. A single string containing\
    \ a sentence.\n# 2. A number between 30 and 40 inclusive (defaults to 30).\n#\
    \ 3. A number between 1 and 1000 inclusive (defaults to 1).\n# 4. A number between\
    \ 1 and 10 inclusive (defaults to 10).\n# 5. A number between 1 and 1000 inclusive\
    \ (defaults to 1000).\n# 6. A number between 10 and 100 inclusive (defaults to\
    \ 10).\n# 7. A number between 1 and 100 inclusive (defaults to 1).\n# 8. A number\
    \ between 100 and 1000 inclusive (defaults to 1000).\n# 9. A number between 100\
    \ and 1000 inclusive (defaults to 1).\n# 10. A number between 1 and 1000 inclusive\
    \ (defaults to 1000).\n# 11. A number between 10 and 100 inclusive (defaults to\
    \ 10).\n# 12. A number between 1 and 1000 inclusive (defaults to 1000).\n# 13.\
    \ A number between 100 and 1000 inclusive (defaults to 1).\n# 14. A number between\
    \ 100 and 1000 inclusive (defaults to 1).\n# 15. A number between 1 and 1000 inclusive\
    \ (defaults to 1000).\n# 16. A number between 10 and 100 inclusive (defaults to\
    \ 10).\n# 17. A number between 1 and 1000 inclusive (defaults to 1000).\n# 18.\
    \ A number between 100 and 1000 inclusive (defaults to 1).\n# 19. A number between\
    \ 100 and 1000 inclusive (defaults to 1).\n# 20. A number between 1 and 1000 inclusive\
    \ (defaults to 1000).\n# 21. A number between 10 and 100 inclusive (defaults to\
    \ 10).\n# 22. A number between 1 and 1000 inclusive (defaults to 1000).\n# 23.\
    \ A number ", "  S = S.toLowerCase();\n  var bored = 0;\n  if(S.indexOf('i') !=\
    \ -1 || S.indexOf('a') != -1 || S.indexOf('e') != -1 || S.indexOf('e') != -1 ||\
    \ S.indexOf('o') != -1 || S.indexOf('u') != -1 || S.indexOf('u') != -1){\n   \
    \ bored = 1;\n  }\n  return bored;\n}\n", "    // Only change code below this\
    \ line\n\n    var count=0\n    var temp_string=S.split('.');\n    var temp_boredom\
    \ = temp_string[0]\n    if(temp_boredom == I){\n        count++\n    }\n    return\
    \ count\n\n    // Only change code above this line\n}", "  var a = [];\n  var\
    \ i = 0;\n  var k = 0;\n  var j = 0;\n  while (i < (S.length-1)) {\n    if (S[i]\
    \ == '.') {\n      if (k == 1) {\n        a[k] = S[i+1];\n        k = 0;\n   \
    \   }\n      i++;\n    }\n    else if (S[i] == '!') {\n      if (k == 2) {\n \
    \       a[k] = S[i+1];\n        k = 0;\n      }\n      i++;\n    }\n    else if\
    \ (S[i] == '?') {\n      if (k == 3) {\n        a[k] = S[i+1];\n        k = 0;\n\
    \      }\n      i++;\n    }\n    else {\n      i++;\n      k++;\n    }\n  }\n\
    \  if (k == 1) {\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}", "    var\
    \ re = /(^|\\s)(I\\b)/gi;\n    var num = S.replace(re,\"\");\n    return parseInt(num)==0;\n\
    }\n\n", "  if(S==undefined){\n    console.log(\"Please specify an input string.\"\
    )\n    return -1\n  }\n  S = S.trim()\n  if(S==\"\"){\n    console.log(\"Please\
    \ specify an input string.\")\n    return -1\n  }\n  let boredom = 0\n  let startOfSentence\
    \ = true\n  for(let i = 0; i<S.length; i++){\n    const current = S[i]\n    if(current\
    \ == \".\"|| current == \"?\"|| current == \"!\"){\n      if(startOfSentence){\n\
    \        startOfSentence = false\n        boredom++\n      }\n    } else {\n \
    \     startOfSentence = true\n    }\n  }\n  return boredom\n}\n", "\tlet bored\
    \ = 0;\n\tfor (let sentence of S.split('.')) {\n\t\tfor (let word of sentence.split(\"\
    \ \")) {\n\t\t\tif (word == \"I\")\n\t\t\t\tbored++; \n\t\t}\n\t}\n\treturn bored;\n\
    }\n\n", "\tfor(var i=0; i<S.length; i++){\n\t\tif(S[i].indexOf(\"I\")==0){\n\t\
    \t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\n", "  var bored = 0;\n  var first\
    \ = \"I\";\n  S = S.split(\" \");\n  S.forEach(function(s){\n    if(s == first){\n\
    \      bored++;\n    }\n  });\n  return bored;\n}\n", "\tvar i = 0, count = 0;\n\
    \twhile(i < S.length && S[i] != \".\" && S[i] != \"?\" && S[i] != \"!\"){\n\t\t\
    i++;\n\t}\n\twhile(i < S.length){\n\t\tif(S[i] == \"I\"){\n\t\t\tcount++;\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn count;\n}\n\n", "    var bored = 0;\n    for(var i=0;\
    \ i<S.length; i++){\n        if(S[i] == \"I\"){\n            bored = 1;\n    \
    \    }\n    }\n    return bored;\n}\n", "  var result = 0;\n  for (var i = 1;\
    \ i<S.length;i++){\n    if (S.charAt(i-1) === \"I\" && S.charAt(i) === \"I\"){\n\
    \      result+=1;\n    }\n  }\n  return result;\n}", "\tvar boredoms = 0;\n\t\n\
    \tS.split(\" \").forEach(function(str){\n\t\tif (str.startsWith(\"I\")){\n\t\t\
    \tboredoms += 1;\n\t\t}\n\t});\n\t\n\treturn boredoms;\n}\n", "  var count = 0;\n\
    \  S.split(\" \").forEach(function(w){\n    if(w.startsWith(\"I\")){\n      count++;\n\
    \    }\n  });\n  return count;\n}\n", "  var boredom = 0\n  S.split('.').forEach(function(word){\n\
    \    if (word.charAt(0) == 'I'){\n      boredom += 1\n    }\n  })\n  return boredom\n\
    }\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nconst isBored\
    \ = function(str) {\n  const arr = [...str.split(\" \")];\n  const count = arr.filter((word)\
    \ => word.includes(\"I\")).length;\n  return count > 1;\n};\n", "    S = S.trim();\n\
    \    var count = 0;\n    S.split('.').forEach(function(s){\n        count += s.indexOf('I')\
    \ != -1;\n    });\n    return count;\n}\n", "    S = S.toUpperCase();\n    for\
    \ (var i = 0; i<S.length; i=i+1){\n        var c = S[i];\n        if (c == '.'\
    \ || c == '?' || c == '!'){\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}\n</cell>\n<cell>\n%%javascript\n<!-- Ignore this block -->\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.prototype._should_scroll\
    \ = function(lines) {\n    return false;\n}\n</cell>\n<cell>\n%%javascript\nIPython.OutputArea.",
  "   var n = S.split(\" \");\n   for(var i=0; i<n.length; i++){\n      if( (n[i][0]\
    \ == \"I\") && (n[i-1].indexOf(\".\")==-1) && (n[i-1].indexOf(\"?\")==-1) && (n[i-1].indexOf(\"\
    !\")==-1) )\n         return n[i].length-1;\n   }\n   return 0;\n}\n</cell>\n\
    <cell>\nassert(is_bored(\"Hello world\") == 0, \"Hello world\")\nassert(is_bored(\"\
    The sky is blue.\") == 1, \"The sky is blue.\")\nassert(is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\") == 4, \"The sky is blue.\"\
    )\nassert(is_bored(\"The sky is blue. Nobody cares.\") == 0, \"The sky is blue.\"\
    )\n</cell>\n<text>\nExercise\nAssume that the file hello.txt is available in the\
    \ same directory as this Jupyter Notebook (if not, you'll have to download it\
    \ first). What is the output of running is_bored(\"Hello world\") on the file?\n\
    \n\n</text>\n<cell>\n# Experiment here\n</cell>\n<text>\nPart 3: Design a Tetris\
    \ Game\nNow that we know some of the basic functionality of Python, we're going\
    \ to move on to designing a Tetris game. Since it's a very simple game, we may\
    \ do our work without too much thinking.\n\n\n</text>\n<cell>\n# A Tetris Game\
    \ is a game in which there are n rows of blocks, each of which can contain one\
    \ of several shapes: tetrimino, hole, line, or empty.\n# Your goal is to place\
    \ blocks horizontally in a shape that looks like tetriminoes.\n# The shape of\
    \ the blocks are given as a list of lists, where each inner list is a row and\
    \ each element of the inner list is a character which represents the shape of\
    \ the block in that row.\n# For example:\n# >>> tetris([[\"?\",\"?\",\"?\"], [\"\
    !\",\"!\",\"!\"], [\"I\",\"I\",\"I\"]])\n# [[\" \",\" \",\" \"],[\" \",\" \",\"\
    \ \"],[\" \",\" \",\" \"]]\n# The shapes are given by a list of strings representing\
    \ their shapes. To start, we'll assume that all the blocks have the same shape,\
    \ and we'll use only the first block in our lists.\n\ndef tetris(shape_list):\n\
    \    # Write a program that takes a list of shape characters and generates a tetris\
    \ game.\n    # Each row in the game is 1 block.\n    # Each block in the game\
    \ is a shape character.\n    # To start the game, each character in the shape_list\
    \ must be placed horizontally in the first row of the ", "    S=S.toLowerCase();\n\
    \    S=S.trim();\n    var i,n=S.length;\n    var boredoms=0;\n    for(i=0;i<n;i++){\n\
    \        if(S[i]==\".\"){boredoms++;}\n        else if(S[i]==\"?\"){boredoms++;}\n\
    \        else if(S[i]==\"!\"){boredoms++;}\n        else{boredoms++;}\n    }\n\
    \    return boredoms;\n}\n", "\tfor(var i=0;i<S.length;i++){\n\t\tif(S[i]=='I'){return\
    \ 0;}\n\t}\n\treturn 1;\n}", "    \n    var count = 0; //Initialize a counter\n\
    \    \n    var words = S.split(\" \"); //Split the input string into a array\n\
    \    \n    //Loop through each of the words in the array\n    for(var i = 0; i\
    \ < words.length; i++){\n        \n        var word = words[i]; //Get the current\
    \ word out of the array\n        \n        if(word == \"I\" || word == \"i\"){\
    \ //If the current word is equal to 'I' or 'i'\n            \n            //Increment\
    \ the counter by 1\n            count++;\n            \n        } //End if\n \
    \       \n    } //End for\n    \n    //Return the counter\n    return count;\n\
    \    \n} //End is_bored\n", "  var sentences = S.split(\".\");\n  return sentences.filter(function(s){return\
    \ s.indexOf(\"I\") === 0}).length\n}\n", "  var bored = 0;\n  var i, s, m, t;\n\
    \n  // Initialize your counter here\n  bored = 0;\n\n  // Split string into array\
    \ of words\n  S = S.split(\" \");\n\n  // Check each word - check if it starts\
    \ with \"I\"\n  for (i = 0; i < S.length; i++) {\n    s = S[i];\n    if (s.substr(0,\
    \ 1) === \"I\") {\n      bored++;\n    }\n  }\n\n  // Return your counter\n  return\
    \ bored;\n}", "  var boredoms = 0;\n  for(var i = 0, l = S.length; i < l; i++){\n\
    \    if(S[i].indexOf(\"I\") === 0) boredoms++;\n  }\n  return boredoms;\n}\n",
  "  var boredom_count = 0; // Initialize boredom count as zero\n\n  var splitS =\
    \ S.split('.');\n  for(var i=0; i< splitS.length; i++){\n    if(splitS[i].substr(0,1)\
    \ == \"I\"){\n      boredom_count++;\n    }\n  }\n  return boredom_count;\n}",
  "    var boredom = 0;\n    var re = new RegExp(\"[.?!]\", \"g\");\n    var sentence\
    \ = S.match(re);\n    for(var i=0; i<sentence.length; i++){\n        if(sentence[i]\
    \ == \"I\"){\n            boredom++;\n        }\n    }\n    return boredom;\n\
    }\n", "  var bored = 0;\n  if(S == '' || S.length === 0){\n    return bored;\n\
    \  }\n  var count = 0;\n  for(var i = 0; i<S.length; i++){\n    if(S[i] === '.'\
    \ || S[i] === '!' || S[i] === '?' || S[i] === 'I'){\n      count++;\n    }\n \
    \ }\n  return count;\n}\n", "\tvar boredom = 1;\n\tfor(var i = 0; i < (S.length-1);\
    \ i++){\n\t\tif(S[i] === 'I' && S[i+1] === 'I'){\n\t\t\tboredom++;\n\t\t}\n\t\
    }\n\treturn boredom;\n}\n", "  return boredom(S);\n}\n", "  var boredoms=0;\n\
    \  var i=0;\n  var temp=\"\";\n  temp=S.split(' ');\n  while(i<temp.length){\n\
    \    if(temp[i]==\"I\"){\n      boredoms++;\n    }\n    i++;\n  }\n  return boredoms;\n\
    }\nis_bored(\"Hello world\")\n\n", "    let bored = 0;\n    for (let i = 0, len\
    \ = S.length; i < len; i++) {\n        if (S[i] === \".\" || S[i] === \"?\" ||\
    \ S[i] === \"!\") {\n            bored += 1;\n        }\n    }\n    return bored;\n\
    }\n", "    boredom_list = [];\n    S = S.toLowerCase().split(' ');\n    S.forEach(function(word){\n\
    \        if (word == 'i'){\n            boredom_list.push(1);\n        }\n   \
    \     else{\n            boredom_list.push(0);\n        }\n    });\n    return\
    \ boredom_list.length;\n}\n", "  var counter = 0;\n  S.split(\" \").forEach(function(word){\n\
    \    if(word.startsWith(\"I\")){\n      counter++\n    }\n  })\n  return counter\n\
    }\n", "    var boredom = S;\n    var pattern = new RegExp(\"^I \");\n    boredom\
    \ = boredom.match(pattern);\n    if (boredom == null) return 0;\n    return 1;\n\
    }\n</cell>\n<cell>\n### This exercise is more challenging\n\n## You'll be given\
    \ a list of strings, where each string is a news headline.\n## Your task is to\
    \ determine how many times each news headline is repeated\n## in a given list\
    \ of news headlines.\n\nvar headlines = [\n    \"Clinton introduces CNN\",\n \
    \   \"CNN launches Big Five in August\",\n    \"The weather at CNN will be great\
    \ tomorrow\",\n    \"Boston heads to Detroit via Sussex every week\",\n    \"\
    Detroit is worst in Boston than in LA\",\n    \"Boston police officer announces\
    \ heat death\",\n    \"Boston police officer announces heat death\",\n    \"Detroit\
    \ officials say heated for punishment\",\n    \"Boston police officer announces\
    \ heat death\",\n    \"Boston police officer announces heat death\",\n    \"Boston\
    \ officials say heated for punishment\",\n    \"Boston police officer announces\
    \ heat death\"\n];\n\nvar new_headlines = [\n    \"CNN launches Big Five in August\"\
    ,\n    \"The weather at CNN will be great tomorrow\",\n    \"Boston heads to Detroit\
    \ via Sussex every week\",\n    \"Detroit is worst in Boston than in LA\",\n \
    \   \"Boston police officer announces heat death\",\n    \"Boston police officer\
    \ announces heat death\",\n    \"Detroit officials say heated for punishment\"\
    ,\n    \"Boston police officer announces heat death\",\n    \"Boston police officer\
    \ announces heat death\",\n    \"Boston officials say heated for punishment\"\
    ,\n    \"Boston police officer announces heat death\"\n];\n\nvar headline_repetition\
    \ = new Array(headlines.length);\n\nfor (i = 0 ; i <= headlines.length ; i++)\n\
    {\n    headline_repetition[i] = 0;\n", "    if (S === undefined) return 0;\n \
    \   var bored = 0;\n    for (var i = 0; i < S.length; i++){\n        if (S[i]\
    \ === 'I') bored++;\n    }\n    return bored;\n}\n", "  var count = 0;\n  for\
    \ (var i = 0; i < S.length; i++){\n    if (S[i] === \"I\" && S[i + 1] === \"o\"\
    \ && S[i + 2] === \"r\" && S[i + 3] === \"d\" && S[i + 4] === \"i\"){\n      count\
    \ += 1;\n    }\n  }\n  return count;\n}\n", "  var boredom=[];\n  var words=S.split('\
    \ ');\n  for(var i=0;i<words.length;i++){\n    if (words[i]==\"I\" || words[i]==\"\
    i\"){\n      boredom.push(i);\n    }\n  }\n  return boredom.length;\n}", "   \
    \ for(var i = 0; i < S.length; i++){\n        if(S[i] === \"I\"){\n          \
    \  return 1;\n        }\n        if(S[i] === \".\" || S[i] === \"?\" || S[i] ===\
    \ \"!\"){\n            return 0;\n        }\n    }\n    return 0;\n}\n", "  var\
    \ boredoms = [\n    \"I\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\"\
    ,\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\"\
    ,\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\"\
    ,\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\"\
    ,\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\"\
    ,\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\"\
    ,\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\"\
    ,\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\"\
    ,\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\"\
    ,\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\"\
    ,\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\"\
    ,\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\"\
    ,\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\"\
    ,\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\"\
    ,\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\"\
    ,\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\"\
    ,\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\"\
    ,\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\"\
    ,\n    \"He\",\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\"\
    ,\n    \"She\",\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\"\
    ,\n    \"It\",\n    \"It\",\n    \"You\",\n    \"He\",\n    \"She\",\n    \"It\"\
    ,\n    \"It\",\n    \"You", "  var boredoms=0;\n  var i,j;\n  for(i=0;i<S.length;i++){\n\
    \    if(S[i]==\".\"){boredoms++;}\n    if(S[i]==\"?\"){boredoms++;}\n    if(S[i]==\"\
    !\"){boredoms++;}\n  }\n  return boredoms;\n}\n", "\tfor(var i=0; i<S.length;\
    \ i++){\n\t\tif(S.charAt(i) == 'I') return i;\n\t\tif(S.charAt(i) == '.') return\
    \ i;\n\t\tif(S.charAt(i) == '+') return i;\n\t\tif(S.charAt(i) == '?') return\
    \ i;\n\t\tif(S.charAt(i) == '!') return i;\n\t}\n\treturn 0;\n}\n", "  var bored\
    \ = S.match(/^(I.*?[^.?!])(\\.|?\\.|!)/g);\n  return bored ? bored.length : 0;\n\
    }\n</cell>\n<cell>\nbored_sent = \"The sky is blue. The sun is shining. I love\
    \ this weather.\";\nbored_bored = is_bored(bored_sent);\nprint(\"Number of boredom\
    \ sent: \", bored_bored)\n</cell>\n<text>\nWrite a function named is_sad(text)\
    \ that takes as input a string, and returns the number of sentences that are neither\
    \ positive nor negative (that is, neither positive or neither negative). A sentence\
    \ is said to be negative if it starts with the string \"not\", and vice versa.\
    \ You might want to remove all punctuation from the text.\n\n\n</text>\n<cell>",
  "    let boredoms = 0;\n    S.split('.').forEach((sentence) => {\n        if (sentence[0]\
    \ == 'I'){\n            boredoms += 1;\n        }\n    })\n    return boredoms;\n\
    }\n", "    S.split(\" \").filter(function(word){return word[0] === \"I\"; }).length;\n\
    }\n</cell>\n<text>\nWrite a function is_hungry that takes in a bored string and\
    \ returns a true or false value. The function should only return a true if the\n\
    bored string is at least 30 characters long, and contains at least one of the\
    \ words \"I\", \"We\", \"He\", or \"She\"\n\n\n</text>\n<cell>", "  let boredoms\
    \ = 0;\n  for (let i=0; i<S.length; i++){\n    if (S[i] == 'I'){\n      boredoms\
    \ ++;\n    }\n  }\n  return boredoms;\n}\n", "    //This line of code is a bit\
    \ messy, but it's an if statement\n    // that compares one string to another\
    \ string. \n    // If the first string is \"hello\" and the second string is \"\
    world\",\n    // the conditional expression returns true.\n    if (S == \"hello\"\
    \ || S == \"world\"){\n        return 0;\n    }\n    //If the first string is\
    \ \"I\" and the second string is anything, return true\n    if (S == \"I\" ||\
    \ S == \"any\" || S == \"anything\"){\n        return 1;\n    }\n    //If the\
    \ first string is not \"I\" and the second string is \"I\", return true\n    if\
    \ (S == \"hello\" || S == \"world\" || S == \"I\" || S == \"any\" || S == \"anything\"\
    ){\n        return 1;\n    }\n    //Otherwise, if either of the strings are \"\
    !\" or \"?\", return false.\n    if (S == \"!\" || S == \"?\" || S == \"!\" ||\
    \ S == \"?\"){\n        return 0;\n    }\n}\n", "    var boredoms = S.match(/I/g);\n\
    \    return boredoms != null;\n}\n", "  return S.toLowerCase().split('.').indexOf('i')\
    \ != -1;\n}\n", "\tlet i=0, len=S.length;\n\twhile(i<len){\n\t\tif(S[i]===\"I\"\
    ) return 1;\n\t\telse if(S[i]===\".\"||S[i]===\"?\"||S[i]===\"!\"){\n\t\t\ti++;\n\
    \t\t\tlen-=1;\n\t\t}\n\t\telse return 0;\n\t}\n\treturn 0;\n}\n", "  var bored\
    \ = 0;\n  var regex = /^([I].*)(\\.|!|\\?|\\.$)/;\n  var regex = /^([I].*\\.)(\\\
    .|!|\\?|\\.$)/;\n  var regex = /^([I].*\\.\\.)(\\.|!|\\?|\\.$)/;\n  var regex\
    \ = /^([I].*\\.\\.\\.)(\\.|!|\\?|\\.$)/;\n  var regex = /^([I].*\\.\\.\\.\\.)(\\\
    .|!|\\?|\\.$)/;\n  var regex = /^([I].*\\.\\.\\.\\.\\.)(\\.|!|\\?|\\.$)/;\n  if(S\
    \ === undefined){\n    console.log(\"Undefined input\");\n    return 0;\n  }\n\
    \  for(var i=0; i<S.length; i++){\n    var sentence = S.split(regex);\n    var\
    \ sentence = S;\n    for(var j = 0; j < sentence.length; j++){\n      if(sentence[j]\
    \ == \"I\"){\n        bored++;\n      }\n    }\n  }\n  return bored;\n}", "  var\
    \ count = 0;\n  var i;\n  for (i = 0; i < S.length; i++){\n    if (S[i] == \"\
    I\" && S[i+1] == \".\"){\n      count++;\n    }\n  }\n  return count;\n}", " \
    \   var words = S.split('.');\n    var bored = 0;\n    for (var i=0; i < words.length;\
    \ i++){\n      if (words[i].startsWith('I')){\n        bored++;\n      }\n   \
    \ }\n    return bored;\n}", "    S = S.toUpperCase();\n    if(S.slice(0,5) ==\
    \ 'BORED'){\n        return 1;\n    }\n    return 0;\n}\n", "  let boredom = 0;\n\
    \  S.split(\" \").forEach(word => {\n    if(word.startsWith(\"I\")) boredom++;\n\
    \  });\n  return boredom;\n}\n", "    var count = 0;\n    if(S.indexOf('.')>0)\n\
    \        count += S.split('.').length - 1;\n    if(S.indexOf('?')>0)\n       \
    \ count += S.split('?').length - 1;\n    if(S.indexOf('!')>0)\n        count +=\
    \ S.split('!').length - 1;\n    return count;\n}\n", "  var boredoms = count_boredoms(S);\n\
    \  return boredoms != 0;\n}\n", "  S = S.split(\" \");\n  for(let i = 0; i < S.length;\
    \ i++){\n    if (S[i][0] === \"I\"){\n      if(S[i].slice(1).indexOf(\"!\") ==\
    \ -1 && S[i].slice(1).indexOf(\"?\") == -1)\n        return 0;\n      else\n \
    \       return 1;\n    }\n  }\n  return S.length;\n}\n</code>\nAnd your second\
    \ function was almost correct just that you need to count the sentence that is\
    \ in double quotes.\n<code>", "    S = S.split(\" \");\n    for(let i = 0; i <\
    \ S.length; i++){\n        if(S[i].indexOf(\"I\") === 0){\n            return\
    \ 1;\n        }\n    }\n    return 0;\n}\n", "    var boredoms = S.split(\" \"\
    ).map(function(x){\n        return x[0] === 'I' ? 1 : 0;\n    });\n    return\
    \ Math.max(boredoms);\n}\n", "    bored = S.split(\" \");\n    for(i = 0; i <\
    \ bored.length; i++){\n        if(bored[i].startsWith(\"I\")){\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "\tvar boredom = 0;\n\tvar word =\
    \ \"\";\n\tfor(var i = 0; i < S.length; i++){\n\t\tvar c = S[i];\n\t\tif(c ===\
    \ \".\" || c === \"?\" || c === \"!\"){\n\t\t\tboredom += 1;\n\t\t\tword = \"\"\
    ;\n\t\t}else{\n\t\t\tword += c;\n\t\t}\n\t}\n\treturn boredom;\n}\n", "   var\
    \ boredoms = S.split(\".\").filter(function(x){return x.indexOf(\"I\") === 0}).length;\n\
    \   if(boredoms > 0){\n       return true;\n   }\n   else{\n       return false;\n\
    \   }\n}\n", "\tvar boredoms = 0\n\tfor(var i = 0, length = S.length; i < length;\
    \ i++){\n\t\tif(S[i] === \"I\" || S[i] === \"i\"){\n\t\t\tboredoms++\n\t\t}\n\t\
    }\n\treturn boredoms\n}\n", "    var boredoms = 0;\n    S.split(\" \").forEach(function(word){\n\
    \       if(word.toLowerCase().startsWith(\"i\")) boredoms += 1;\n    });\n   \
    \ return boredoms;\n}\n", "    var boredoms = 0;\n    S.split('.').forEach(function(el){\n\
    \        if(el.charAt(0) == \"I\"){\n            boredoms += 1;\n        }\n \
    \   });\n    return boredoms;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `split`\
    \ should be `split('. ')` because a sentence ends with a full stop. Otherwise\
    \ it would be missed in the last test case.\n<|/ c |>\n<| c |>\nNo, it should\
    \ be `'. '`, otherwise `Hello.` would be boredome too.\n<|/ c |>\n<| c |>\nAh,\
    \ I see what you mean. It should be `'.'` instead of `'. '`, but that doesn't\
    \ fix all the issues. I agree that you should use regular expression instead.\n\
    <|/ c |>\n<| c |>\nHmm, now that you have fixed the regular expression, there's\
    \ still a bug: it will count the period at the end of the sentence as a boredom,\
    \ which it should not.\n<|/ c |>\n<| c |>\n: That's true. But it's easy enough\
    \ to just change the check inside `is_bored()` to `if (el.charAt(0) == \"I\" ||\
    \ el.charAt(0) == \".\")`\n<|/ c |>\n<| a tags=algorithm,string,javascript,counting\
    \ |>\n<code>", "    var count = 0;\n    var sentences = S.split(/\\. |\\? |\\\
    !/);\n    for(var s in sentences){\n        if(sentences[s][0]==\"I\"){\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n", "    // Initialize\
    \ a counter to 0\n    var num = 0;\n    // Loop over each word in the string S\n\
    \    for (var i = 0; i < S.length; i++) {\n        // If S[i] is a boredom word\n\
    \        if (boredom_words.includes(S[i])) {\n            // Increment the boredom_words\
    \ counter\n            num++;\n        }\n    }\n    // Return the boredom_words\
    \ counter\n    return num;\n}\n", "  var boredom_words = []; //create an array\
    \ with the boredom words\n  var boredom_word_count = 0; //initialize boredom_word_count\n\
    \  for(var i=0; i<S.length; i++){\n    boredom_words.push(S[i]); //push each word\
    \ in the sentence into boredom_words\n    if(S[i] == \"I\"){\n      boredom_word_count++;\
    \ //if the word is \"I\", increment boredom_word_count\n    }\n  }\n  return boredom_word_count;\
    \ //return the final answer\n}\n", "    var boredoms = [\n        \"I\",\n   \
    \     \"He\",\n        \"She\",\n        \"It\",\n        \"You\",\n        \"\
    They\",\n        \"When\",\n        \"Where\",\n        \"Why\",\n        \"Who\"\
    ,\n        \"Which\",\n        \"Would\",\n        \"Not\",\n        \"Of\",\n\
    \        \"In\",\n        \"To\",\n        \"For\",\n        \"Town\",\n     \
    \   \"County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n\
    \        \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n   \
    \     \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"\
    To\",\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\"\
    ,\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"\
    On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n        \"Up\",\n \
    \       \"In\",\n        \"Out\",\n        \"To\",\n        \"For\",\n       \
    \ \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\",\n  \
    \      \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\",\n \
    \       \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n        \"\
    Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"County\"\
    ,\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\"\
    ,\n        \"On\",\n        \"Of\",\n        \"In\",\n        \"Out\",\n     \
    \   \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\",\n        \"For\"\
    ,\n        \"Town\",\n        \"County\",\n        \"Inlet\",\n        \"Outlet\"\
    ,\n        \"Inside\",\n        \"Outside\",\n        \"On\",\n        \"Of\"\
    ,\n        \"In\",\n        \"Out\",\n        \"Up\",\n        \"In\",\n     \
    \   \"Out\",\n        \"To\",\n        \"For\",\n        \"Town\",\n        \"\
    County\",\n        \"Inlet\",\n        \"Outlet\",\n        \"Inside\",\n    \
    \    \"Outside\",\n        \"On\",\n        \"Of\",\n        \"In\",\n       \
    \ \"Out\",\n        \"Up\",\n        \"In\",\n        \"Out\",\n        \"To\"\
    ,\n        \"For\",\n        \"Town\",\n        \"County\",\n        \"Inlet\"\
    ,\n        \"Outlet\",\n        \"Inside\",\n        \"Outside\",\n        \"\
    On\",\n        \"Of\",\n        \"", "    var bored = 0;\n    var split = S.split('.');\n\
    \    for (var i=0; i<split.length-1; i++){\n        if (split[i].split('?').length\
    \ + split[i].split('!').length > 1)\n            bored++;\n    }\n    return bored;\n\
    }", "    var count = 0;\n    for (var i = 0; i < S.length; i++) {\n        count\
    \ += (i == 0 && S[i] ==\"I\") ? 1 : 0;\n    }\n    return count;\n}\n", "    var\
    \ i = 0;\n    var len = S.length;\n    for(i=0;i<len;i++){\n        if(S[i]=='I'\
    \ || S[i]==\".\" || S[i]==\"!\" || S[i]==\"?\"){\n            if(i>0 && S[i -\
    \ 1] == '.'){\n                return 0;\n            }\n            if(i>0 &&\
    \ S[i - 1] == '?'){\n                return 0;\n            }\n            if(i>0\
    \ && S[i - 1] == '!'){\n                return 0;\n            }\n           \
    \ return 1;\n        }\n    }\n    return 0;\n}", "\tvar i, n, c = 0;\n\tS = S.split('\
    \ ');\n\tfor(i=0, n=S.length; i<n; i++){\n\t\tc += (i==0 || (S[i-1]=='.' && S[i]=='?'))\
    \ ? (S[i]=='!') : 1;\n\t}\n\treturn c;\n}\n", "    return boredometry_function(S)==1;\n\
    }\n", "    // Split S by spaces, '.', '?' or '!' characters.\n    let words =\
    \ S.split(\" \");\n    let boredoms = 0;\n    // For each word in the sentence\
    \ that starts with \"I\", increment boredoms.\n    for (let i=0; i<words.length;\
    \ i++){\n        if (words[i][0] === \"I\"){\n            boredoms++;\n      \
    \  }\n    }\n    return boredoms;\n}\n", "  var bored_words = bored_words.split(\"\
    \ \");\n  var words = S.split(\" \");\n  for(var i = 0; i<words.length;i++){\n\
    \    if(bored_words.indexOf(words[i]) === -1){\n      return 0;\n    }\n  }\n\
    \  return 1;\n}\n", "  var words = new Set();\n  var bored = 0;\n  for (var i=0;\
    \ i<S.length; i++){\n    words.add(S.charAt(i));\n    if (S.charAt(i) == 'I')\
    \ {\n      bored++;\n    }\n  }\n  return bored;\n}\n", "    // Your code here!\n\
    \    var count = 0;\n    var boredoms = [\"I\", \"I\", \".\", \"!\", \".\"];\n\
    \    var newStr = S;\n    var split = newStr.split(\" \");\n    for(var i=0;i<split.length;i++){\n\
    \        if(boredoms.indexOf(split[i]) > -1){\n            count++;\n        }\n\
    \    }\n    return count;\n}", "\tlet boredom_count = S.split(' ').filter(x =>\
    \ x.startsWith(\"I\")).length;\n\treturn boredom_count % 2 === 0;\n}\n\n", " \
    \ S = S.toUpperCase();\n  var bored_sentences = [\n    \"I love this weather\"\
    ,\n    \"The sky is blue. The sun is shining\"\n  ];\n  var bored_count = 0;\n\
    \  var bored_index = 0;\n  for(var i = 0; i < S.length; i++){\n    if(S[i] ==\
    \ \".\" || S[i] == \"?\" || S[i] == \"!\"){\n      bored_count++;\n      if(bored_count\
    \ == bored_sentences.length){\n        bored_index++;\n        bored_count = 0;\n\
    \      }\n    }\n  }\n  return bored_index;\n}\n", "    var bored_count = 0;\n\
    \    for(var i = 0; i<S.length;i++){\n        if (S[i].match(/(^|\\s)I\\s?/)){\n\
    \            bored_count++;\n        }\n    }\n    return bored_count;\n}", " \
    \   var i, len = S.length, bored = 0;\n    for(i = 0; i < len; i++){\n       \
    \ if(S[i] == \"I\" && S[i+1] == \"e\" && S[i+2] == \"n\"){\n            bored++;\n\
    \        }\n    }\n    return bored;\n}\n", "\tS = S.trim();\n\tvar bored = 0;\n\
    \tvar first = \"I\";\n\tfor(var i = 0, l = S.length; i < l; i++){\n\t\tif(S.charAt(i)\
    \ == first || S.charAt(i) == \".\" || S.charAt(i) == \"!\" || S.charAt(i) == \"\
    ?\"){\n\t\t\tbored++;\n\t\t}\n\t\telse{\n\t\t\tif(bored == 0){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tfirst++;\n\t}\n\treturn bored;\n}\n", "    let boredoms =\
    \ 0;\n    S = S.toLowerCase().replace(/[?.!]+/gi,\".\");\n    S = S.split(\".\"\
    );\n    for(const word of S){\n        boredoms += (word.startsWith(\"i\") ? 1\
    \ : 0);\n    }\n    return boredoms;\n}\n", "    let counter = 0;\n    let boredoms\
    \ = [\".\", \"?\", \"!\"];\n    for (let i = 0; i < S.length; i++){\n        if\
    \ (boredoms.indexOf(S[i][0]) !== -1){\n            counter += 1;\n        }\n\
    \    }\n    return counter;\n}\n</code>\n<|/ a tags=javascript,arrays,function\
    \ dscore=1 |>\n<| c |>\nThank you so much. I am new to programming so I appreciate\
    \ all the help. I am also new here so thanks again for answering quickly.\n<|/\
    \ c |>\n<| a tags=javascript,arrays,function |>\nA simple solution would be to\
    \ loop the array and compare the value to a boredoms array:\n\n<code>\nconst boredoms\
    \ = [\".\", \"?\", \"!\"];\nconst boredom = \".\";\n", "    var count = 0;\n \
    \   for(var i = 1; i < S.length; i++){\n        var word = S.substring(0,i)\n\
    \        if(word == \"I\"){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=string,python,javascript dscore=0 |>\n<| c |>\n\
    \"a boredom is a sentence that starts with the word I\" - but this is not what\
    \ OP asked for\n<|/ c |>\n<| c |>\nThe question was edited. He can edit the answer\n\
    <|/ c |>\n<| c |>\nYour solution is wrong. As you said the boredoms are all sentences\
    \ that start with the word 'I', but OP asked to count only those sentences that\
    \ starts with the first word.\n<|/ c |>\n<| c |>\nThe question was edited. He\
    \ can edit the answer\n<|/ c |>\n<| a dscore=0 tags=string,python,javascript |>\n\
    You can try this approach as per your requirement.\n<code>\ndef boredomCount(s):\n\
    \  boredomCount = 0\n  for i in s.split():\n    if i[0]=='I':\n      boredomCount\
    \ += 1\n  return boredomCount\n\ns = \"\"\"The sky is blue. The sun is shining.\
    \ I love this weather. \nThe sky is blue. The sun is shining. I love this weather.\n\
    The sky is blue. The sun is shining. I love this weather.\nThe sky is blue. The\
    \ sun is shining. I love this weather.\n\"\"\"\n\nprint(boredomCount(s))\n\n</code>\n\
    <|/ a |>\n<| a tags=string,python,javascript |>\nA solution with Regex and String.prototype.match()\n\
    \n<code>\nconst bored = str => str.match(/\\bI\\b/g)?.length ?? 0;\n", "  var\
    \ i, n, bored=0;\n  for(i=0; i<S.length; i++){\n    n=S.lastIndexOf('.',i);\n\
    \    if(n!=-1||S.indexOf('!',i)!=-1||S.indexOf('?',i)!=-1||i<S.length-1){\n  \
    \    bored++;\n    }\n  }\n  return bored;\n}\n", "\tlet boredom = 0;\n\tlet count\
    \ = 0;\n\tlet start = 0;\n\tfor(let i = 0; i<S.length; i++){\n\t\tif(S[i]==\"\
    I\" || S[i]==\"i\"){\n\t\t\tstart = i;\n\t\t}\n\t\tif(S[i]==\".\" || S[i]==\"\
    ?\" || S[i]==\"!\"){\n\t\t\tboredom = 1;\n\t\t\tcount = 0;\n\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\tif(boredom){\n\t\tcount++;\n\t\twhile(S[start]!=\".\"\
    ){\n\t\t\tstart++;\n\t\t}\n\t\tfor(let i = start; i<S.length; i++){\n\t\t\tif(S[i]==\"\
    .\" || S[i]==\"?\" || S[i]==\"!\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "    S.split(/\\./);\n    for(var i = 0, l\
    \ = S.split(\".\").length; i < l; i++){\n        if (S[i] == \" \" || S[i] ==\
    \ \"!\" || S[i] == \"?\"){\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}\n", "    boredoms = [];\n    splitS = S.split(\" \");\n    for (i = 0;\
    \ i < splitS.length; i++) {\n        if (splitS[i][0].toLowerCase() == \"i\")\
    \ {\n            boredoms.push(splitS[i]);\n        }\n    }\n    return boredoms.length;\n\
    }\n</code>\nAnd now here's the same thing in Python:\n<code>\ndef is_bored(S):\n\
    \    boredoms = []\n    splitS = S.split(\" \")\n    for i in range(len(splitS)):\n\
    \        if splitS[i][0] == \"I\":\n            boredoms.append(splitS[i])\n \
    \   return boredoms.length\n</code>\nAnd if you really want to avoid for loops,\
    \ you could also use map:\n<code>\ndef is_bored(S):\n    boredoms = map(lambda\
    \ x: x[0] if x[0] == \"I\" else None, S.split(\" \"))\n    return sum(boredoms)\n\
    </code>\nWhich is more or less equivalent to the other answers so far.\n<|/ a\
    \ |>\n<| c |>\n`sum` doesn't work here because you are using a list of booleans\
    \ which is treated as a number and adds 0 to the result.  You'll have to use `boredoms\
    \ = map(lambda x: x[0] if x[0] == \"I\" else None, S.split(\" \"))` and then sum\
    \ the result\n<|/ c |>\n<| c |>\nGood call, I've edited it accordingly. Thanks!\n\
    <|/ c |>\n<| a tags=python |>\nA Python list comprehension is all you need here:\n\
    <code>\ndef is_bored(S):\n    return sum([1 if x == \"I\" else 0 for x in S.split(\"\
    \ \")])\n</code>\n<|/ a dscore=2 |>\n<| a |>\nAnother way:\n<code>\ndef is_bored(S):\n\
    \    boredoms = sum(x==\"I\" for x in S.split(\" \"))\n    return boredoms\n</code>\n\
    <|/ a tags=python dscore=1 |>\n<| a dscore=1 tags=python |>\n<code>\ndef is_bored(S):\n\
    \    splitS = S.split(\" \")\n    boredoms = sum(splitS[i][0] == 'I' for i in\
    \ range(len(splitS)))\n    return boredoms\n</code>\n<|/ a |>\n<| a dscore=0 tags=python\
    \ |>\nYou could try:\n<code>\ndef is_bored(S):\n    boredoms = []\n    splitS\
    \ = S.split(\" \")\n    for elem in splitS:\n        if elem[0] == \"I\":\n  \
    \          boredoms.append(elem)\n    return len(boredoms)\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\ndef is_bored(S):\n    boredoms = []\n    splitS = S.split(\"\
    \ \")\n    for elem in split", "  var count = 0;\n  var boredoms = ['I'];\n  S\
    \ = S.replace(/[.?!](\\s|$)/g,\" \").split(\" \");\n  S.forEach(function(word){\n\
    \    if(boredoms.indexOf(word.toLowerCase()) !== -1){\n      count++;\n    }\n\
    \  });\n  return count;\n}\n", "    bored = 0;\n    for (i=0;i<S.length;i++){\n\
    \        if (S[i] == '.' || S[i] == '!' || S[i] == '?'){\n            bored =\
    \ 1;\n        } else {\n            bored = 0;\n        }\n    }\n    return bored;\n\
    }\n", "  let n = 0;\n  for (let i=0; i<S.length-1; i++){\n    if (S.charAt(i)\
    \ != '.' && S.charAt(i) != '?' && S.charAt(i) != '!') {\n      n++;\n    }\n \
    \ }\n  return n;\n}\n", "  return boredom_counter(S,['.','!','?'])+1;\n}\n", " \
    \ var boredoms=0;\n  var sentence=S.split(\".\");\n  var str=sentence.slice(0,1).join(\"\
    .\");\n  for(var i=0;i<sentence.length;i++){\n    if(i==0){\n      boredoms+=str.indexOf(sentence[i][0]==='I'?'?':sentence[i][0]=='!'?'!':'!?')>-1;\n\
    \    }\n    else{\n      boredoms+=str.indexOf(sentence[i][0]==='I'?'?':sentence[i][0]=='!'?'!':'!?')==-1?0:1;\n\
    \    }\n  }\n  return boredoms;\n}", "\tvar count = 0;\n\tfor(var i=0;i<S.length;i++){\n\
    \t\tif(S[i] == \"I\" && S.slice(0,i+1) == \"I\" && S.slice(0,i+1).match(/\\.|!|\\\
    ?/)){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    S = S.split(\"\
    \ \");\n    var count = 0;\n    for (var i = 0; i < S.length; i++){\n        if\
    \ (S[i] == \"I\"){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  var bored = 0;\n  S.split(/\\. | \\? | \\!/).forEach(function(word){\n\
    \    if(word === \"I\"){\n      bored++;\n    }\n  });\n  return bored;\n}\n",
  "  \n  // Split S into an array of sentence fragments\n  arrOfSentences = S.split(\"\
    .,?!\");\n  \n  // Initialize the number of boredom words\n  boredoms = 0;\n \
    \ \n  // Iterate through each sentence fragment\n  for (let i = 0; i < arrOfSentences.length;\
    \ i++){\n    \n    // Check if the sentence fragment starts with the word \"I\"\
    \n    if (arrOfSentences[i].startsWith(\"I\")){\n      \n      // If it does,\
    \ increment the number of boredom words\n      boredoms++;\n    }\n  }\n  \n \
    \ return boredoms.toString();\n}\n", "  var bored = 0;\n  S = S.split('.');\n\
    \  for (var i=0; i<S.length; i++){\n    if(S[i].charAt(0) == 'I'){\n      bored++;\n\
    \    }\n  }\n  return bored;\n}\n", "  let count = 0;\n  for (let i = 0; i < S.length;\
    \ i++) {\n    let s = S[i];\n    if (s === \"I\" && S.substring(i).search(\"\\\
    .|!|?\") > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "   var bored\
    \ = 0;\n   var bored_chars = [\".\", \"?\", \"!\"];\n   var s = S.split(' ');\n\
    \   for (var i in s) {\n      var temp = s[i];\n      for (var j in bored_chars)\
    \ {\n         if (temp.indexOf(bored_chars[j]) === 0) {\n            bored++;\n\
    \            break;\n         }\n      }\n   }\n   return bored;\n}\n</cell>\n\
    <text>\nis_bored function will take in a string and return either 0, or 1, depending\
    \ on whether the sentence starts with the word \"I\". The following cell tests\
    \ your function with the provided example sentences.\n\n\n</text>\n<cell>\ntests\
    \ = [\n  \"Hello world!\",\n  \"The sky is blue. The sun is shining. I love this\
    \ weather.\",\n  \"I like this car.\"\n];\n\nfor t in tests:\n  assert(is_bored(t)\
    \ == is_bored(t), \"Wrong answer for test: '\" + t + \"'\")\n</cell>\n<text>\n\
    The following cell tests your function with the provided sentence \"Hello!\".\n\
    \n\n</text>\n<cell>\ntests = [\n  \"Hello!\",\n  \"Good morning!\",\n  \"Hello,\
    \ world!\"\n];\n\nfor t in tests:\n  assert(is_bored(t) == is_bored(t), \"Wrong\
    \ answer for test: '\" + t + \"'\")\n</cell>\n<text>\nFinally, write a bored_score\
    \ function that takes in a bored sentence and returns the number of sentences\
    \ where the word \"I\" appears.\n\n\n</text>\n<cell>\nbored_score = is_bored\n\
    </cell>\n<text>\nRun the cell below to test your function.\n\n\n</text>\n<cell>\n\
    test_bored_score(bored_score)\n</cell>\n<text>\nStep 5: Looking back\nNow that\
    \ we have written a function that counts bored sentences, we can use it in a function\
    \ that computes the percentage of sentences where the word \"I\" appears.\n\n\n\
    </text>\n<cell>\ndef bored_percentage(S):\n   var bored = 0\n   var bored_chars\
    \ = [\".\", \"?\", \"!\"]\n   var s = S.split(' ');\n   for (var i in s) {\n \
    \     var temp = s[i];\n      for (var j in bored_chars) {\n         if (temp.indexOf(bored_chars[j])\
    \ === 0) {\n            bored++;\n            break;\n         }\n      }\n  \
    \ }\n   return Math.round(bored / S.length * 100);\n</cell>\n<text>\nbored_percentage\
    \ function will take in a bored sentence string and return the percentage of sentences\
    \ where the word \"I\" appears in the bored sentence.\n\n\n</text>\n<cell>\ntest_bored_percentage(bored_percentage",
  "    var bored = 0;\n    S = S.split('.');\n    for(var i = 0; i < S.length; i++){\n\
    \        if(S[i].startsWith(\"I\")){\n            bored++;\n        }\n    }\n\
    \    return bored;\n}", "    let boredoms = 0\n    for (let i = 0; i < S.length;\
    \ i++){\n        if (S[i] == \"I\" && S[i + 1] == \"a\" && S[i + 2] == \"r\"){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\n", " \
    \   if (is_empty(S)===true)\n        return 0;\n    var s = S.toLowerCase();\n\
    \    for(var i = 0, len = S.split('.').length; i < len; i++){\n        if (s ==\
    \ \"i\")\n            return 1;\n        else if (s == \".\")\n            continue;\n\
    \        else if (s == \"!\")\n            break;\n        else\n            s\
    \ += \".\";\n    }\n    return 0;\n}\n", "  S = S.replace(/[.?!]/g, \" \");\n\
    \  var count = 0;\n  for(var i = 1; i < S.length; i++){\n    if(S.substr(i, 1).substr(0,\
    \ 1) === \"I\")\n      count++;\n  }\n  return count;\n}\n", "    var boredoms\
    \ = S.match(/(^[I]+ )/g);\n    return boredoms.length;\n}\n", "    let boredoms\
    \ = 0\n    let sentences = S.split(\". \")\n    for (let sentence of sentences){\n\
    \        if (sentence.indexOf(\"I\") === 0){\n            boredoms += 1\n    \
    \    }\n    }\n    return boredoms\n}\n", "    \n    var boredom = 0;\n    S.split(\"\
    \ \").forEach(function(word){\n        if(word.startsWith(\"I\")){\n         \
    \   boredom++;\n        }\n    });\n    return boredom;\n}\n", "    var numbored\
    \ = 0;\n    var boredom = S.split(/\\./).filter(function(word){\n        return\
    \ word == \"I\";\n    });\n    if(boredom.length != 0){\n        numbored = 1;\n\
    \    }\n    return numbored;\n}", "\tbored = 0;\n\ts = S.split(\" \");\n\tbored\
    \ = s.slice(0,1).indexOf(\"I\") > -1 ? 1 : 0;\n\treturn bored;\n}\n", "  if(S.startsWith(\"\
    I\")){\n    return 1;\n  } else {\n    return 0;\n  }\n}\n", "  var words = S.split('\
    \ ');\n  var boredoms = 0, i, word;\n  for(i=0; i<words.length; i++){\n    word\
    \ = words[i];\n    if(word.charAt(0) == \"I\"){\n      boredoms += 1;\n    }\n\
    \  }\n  return boredoms;\n}", "\tvar i, n = S.split(\" \");\n\tfor (i = 0; i <\
    \ n.length; i++){\n\t\tif (n[i][0] === \"I\"){\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\
    return 1;\n}\n", "    let boredom = 0\n    S.split('.').forEach(function(s){ //split\
    \ the sentence at the period\n        s = s.toLowerCase();\n        s = s.replace('?','').replace('!','').replace('.','')\n\
    \        if(s.startsWith('i')){\n            boredom++\n        }\n    })\n  \
    \  return boredom\n}\n", "  S = S.split(' ');\n  S.pop(); // remove last element\n\
    \  S = S.join(' ');\n  return S.indexOf('I ')!=-1;\n}\n", "    var bored=0;\n\
    \    var count=0;\n    var i=0;\n    while(bored === 0 && i<S.length){\n     \
    \   var c=S[i];\n        if(c==='I'){\n            bored=1;\n            count++;\n\
    \        }\n        if(c==='.'){\n            count++;\n        }\n        if(c==='?'){\n\
    \            count++;\n        }\n        if(c==='!'){\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nvar sentence = \"The sky\
    \ is blue. The sun is shining. I love this weather.\";", "  let regex = /\\b(I\\\
    w*?)\\b|\\.|!|?/g;\n  return S.match(regex).length;\n}\n", "    var boredom =\
    \ 0;\n    for (var i = 0; i < S.length; i++){\n        if(S[i] === '.' || S[i]\
    \ === '?' || S[i] === '!'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\n", "    S = S.toLowerCase();\n    return S.split(' ').filter(function(x){\n\
    \        return x.match(/^(?:I|[.!?])/);\n    }).length\n}\n", "    if(S.indexOf(\"\
    .\")===-1 && S.indexOf(\"?\")===-1 && S.indexOf(\"!\")===-1){\n        return\
    \ 0;\n    }\n    var N=S.length;\n    var O;\n    var N1=0;\n    var N2=0;\n \
    \   var N3=0;\n    var N4=0;\n    var N5=0;\n    var N6=0;\n    for(var i=0;i<N;i++){\n\
    \        if(S[i]===\".\"){\n            N1+=1;\n            N2+=1;\n         \
    \   N3+=1;\n            N4+=1;\n            N5+=1;\n            N6+=1;\n     \
    \   }else if(S[i]===\"?\"){\n            N1+=1;\n            N2+=1;\n        \
    \    N3+=1;\n            N4+=1;\n            N5+=1;\n            N6+=1;\n    \
    \    }else if(S[i]===\"!\"){\n            N1+=1;\n            N2+=1;\n       \
    \     N3+=1;\n            N4+=1;\n            N5+=1;\n            N6+=1;\n   \
    \     }\n    }\n    if(N1===0){\n        return 0;\n    }\n    if(N1===1){\n \
    \       return 1;\n    }\n    if(N2===0){\n        return 0;\n    }\n    if(N2===1){\n\
    \        return 1;\n    }\n    if(N3===0){\n        return 0;\n    }\n    if(N3===1){\n\
    \        return 1;\n    }\n    if(N4===0){\n        return 0;\n    }\n    if(N4===1){\n\
    \        return 1;\n    }\n    if(N5===0){\n        return 0;\n    }\n    if(N5===1){\n\
    \        return 1;\n    }\n    if(N6===0){\n        return 0;\n    }\n    if(N6===1){\n\
    \        return 1;\n    }\n    return 0;\n}\n", "    var bored = 0;\n    var words\
    \ = S.split('.');\n    for(var i = 0; i < words.length; i++){\n        if(words[i].startsWith(\"\
    I\")){\n            bored++;\n        }\n    }\n    return bored;\n}\n", "   \
    \ var s = S + \"\";\n    var count = 0,\n        i = 0,\n        j = 0,\n    \
    \    l = s.length;\n\n    for (; i < l; i++) {\n        if (i == 0 && (s.charAt(i)\
    \ != \".\" && s.charAt(i) != \"?\" && s.charAt(i) != \"!\")) count++;\n      \
    \  else if (s.charAt(i) == \".\") count++;\n        else if (s.charAt(i) == \"\
    ?\") count++;\n        else if (s.charAt(i) == \"!\") count++;\n        else if\
    \ (i == 0) count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"!\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"?\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \"!\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \"?\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \"!\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \".\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"?\" && s.charAt(i)\
    \ == \"!\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"!\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"?\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \"?\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"?\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1) == \"!\" && s.charAt(i)\
    \ == \".\") count++;\n        else if (s.charAt(i - 1", "  var boredom = 0;\n\
    \  var index = 0;\n  while(index < S.length){\n    if (S.charAt(index) === \"\
    I\" || S.charAt(index) === \"i\" ||\n      S.charAt(index) === \"!\" || S.charAt(index)\
    \ === \"!\" ||\n      S.charAt(index) === \"?\" || S.charAt(index) === \"?\" ||\n\
    \      S.charAt(index) === \".\" || S.charAt(index) === \".\"){\n      boredom++;\n\
    \    }\n    index++;\n  }\n  return boredom;\n}\n", "    var boredoms = [\"I\"\
    , \"you\", \"it's\",\"we\", \"us\", \"your\",\"they\",\"she\",\"him\",\"his\"\
    ,\"her\",\"it\"];\n    var bored_count = 0;\n    var sentences = S.split(\" \"\
    );\n    for (var i = 0, l = sentences.length; i < l; i++) {\n        var s = sentences[i].toLowerCase();\n\
    \        bored_count += boredoms.indexOf(\"i\".localeCompare(s)) > -1? 1 : 0;\n\
    \    }\n    return bored_count;\n}\n", "  var bored = 0;\n  for(var i = 0; i<S.length;\
    \ i++){\n    if(S[i] == \"I\"){\n      bored += 1;\n    }\n  }\n  return bored;\n\
    }\n</cell>\n<cell>\n#task:\n</cell>\n<cell>\n# Task 1: Compute is_bored(\"Hello\
    \ world\") and is_bored(\"The sun is shining\") using your solution.\n</cell>\n\
    <cell>\n# Task 2: \n</cell>\n<cell>\n# Task 3:\n</cell>\n<cell>\n# Task 4: \n\
    </cell>\n<cell>\n# Task 5: \n</cell>\n<cell>\n# Task 6: \n</cell>\n<cell>\n# Task\
    \ 7: \n</cell>\n<cell>\n# Task 8: \n</cell>\n<text>\nGreat Job!\n\n</text>\n<text>\n\
    Programming Tip.\n\n</text>\n<cell>\n# Use the cell below to write and run the\
    \ program. Don't forget to run it.\n</cell>\n<cell>\n# Write your program here\
    \ and run it (Only the 'cell' at the bottom)\n</cell>\n<text>\nTip: If you find\
    \ that the program gets stuck, you can run the program multiple times by pressing\
    \ \"Kernel\" -> \"Restart & Run All\". That will reset the kernel so that you\
    \ can run the program again from the top.\n\n\n</text>\n<text>\nWrite Your Solution\
    \ Here\n\n</text>\n<text>\n1. Using for loops\n\n</text>\n<text>\nQuestion: What\
    \ is the output of the following code?\n\n\n</text>\n<cell>\nword = \"cat\"\n\
    word2 = [\"c\", \"a\", \"t\"]\n</cell>\n<text>\nAnswer: [\"c\", \"a\", \"t\"]\n\
    \n</text>\n<text>\nExplanation: You used the list slicing operator. Read about\
    \ it here:\n\n\n</text>\n<cell>\nword[:2]\n</cell>\n<text>\n2. Using while loops\n\
    \n</text>\n<text>\nQuestion: What is the output of the following code?\n\n\n</text>\n\
    <cell>\nnumber = 0\nwhile number < 10:\n  print(number)\n  number += 1 # you can\
    \ also use number += 1\n</cell>\n<text>\nAnswer: 10\n\n</text>\n<text>\n3. Using\
    \ break, continue, return\n\n</text>\n<text>\nQuestion: What is the output of\
    \ the following code?\n\n\n</text>\n<cell>\n# Write your answer here\n</cell>\n\
    <text>\nAnswer: None\n\n\n</text>\n<text>\n4. Write a while loop that prints the\
    \ numbers 1 to 100.\n\n\n</text>\n<text>", "    var bored = 0;\n    for (var i=1;\
    \ i<S.length; i++){\n        var letter = S.charAt(i);\n        if (letter ===\
    \ \"I\"){\n            if (S.charAt(i-1) === \"?\" || S.charAt(i-1) === \"!\"\
    ){\n                bored++;\n            }\n        }\n    }\n    return bored;\n\
    }\n", "    var b = 0;\n    for (var i=0; i < S.length; i++){\n        if (S[i]==\"\
    .\"){\n            if (S[i+1]==\".\")\n                b = 1;\n            else\n\
    \                b = 0;\n        } else if (S[i]==\"?\")\n            b = 1;\n\
    \        else if (S[i]==\"!\")\n            b = 0;\n        else \n          \
    \  b = 0;\n    }\n    return b;\n}\n</cell>\n<cell>\n#Run the test code below\
    \ to test your solution\nassert is_bored(\"Hello world!\") == 0\nassert is_bored(\"\
    The sky is blue.\") == 1\nassert is_bored(\"The sun is shining!\") == 1\nassert\
    \ is_bored(\"Hello world!!!\") == 0\nassert is_bored(\"I love this weather.\"\
    ) == 1\n</cell>\n<cell>\n#Write an assert statement to find the number of boredoms\
    \ in the sentence \"I love this weather.\"\n#Make sure you use a try/except block\
    \ and only use your function once to assert the output\ntry:\n    assert is_bored(\"\
    I love this weather.\") == 1\nexcept:\n    print('Test failed!'); \n</cell>\n\
    <text>\nProblem 3\nWrite a function, is_hungry() that takes in a string and returns\
    \ 1 if the string contains at least 10 characters \nthat are NOT 'y' or 'Y', 0\
    \ otherwise. Call the function on a sentence you designed to test your function.\n\
    \nHINT: You may want to try testing some strings that you know are not in the\
    \ training text (for example, \"geese is a good food\")\n\n\n</text>\n<cell>\n\
    #This function takes in a string and returns the number of characters that\n#are\
    \ NOT \"y\" or \"Y\". \n#Use a try/except block and only use your function once\
    \ to assert the output\ndef is_hungry(S): \n    b = 0; \n    for i in S: \n  \
    \      if i==\"y\" or i==\"Y\": \n            b = 1; \n            break \n  \
    \      else: \n            b = 0; \n    return b \n</cell>\n<cell>\n#Run the test\
    \ code below to test your solution\nassert is_hungry(\"This string contains hungry\
    \ characters.\") == 0 \nassert is_hungry(\"yabba dabba\") == 1 \nassert is_hungry(\"\
    abba\") == 0 \n</cell>\n<cell>\n#Write an assert statement to find the number\
    \ of hungry characters in the string \"I love this weather.\"\n#Make sure you\
    \ use a try/except block and only use your function once to assert the output\n\
    try:\n    assert is_hungry(\"I love this weather.\") == 0\n", "    if(S.length\
    \ > 0){\n        if(S.indexOf(\"I\")>-1){\n            return 1;\n        } else\
    \ {\n            return 0;\n        }\n    } else {\n        return 0;\n    }\n\
    }\n", "    var boredom_count = 0;\n    for(i = 1; i<S.length; i++){\n        if(S[i].toLowerCase().trim()\
    \ == \"i\"){\n            boredom_count++;\n        }\n    }\n    return boredom_count;\n\
    }\n", "  var boredoms = {};\n  var sentences = S.split('.');\n  for (var i=0;\
    \ i<sentences.length; i++){\n    sentence = sentences[i];\n    if (sentence.length==0){\n\
    \      continue\n    }\n    if (sentence[0]==\"I\"){\n      if (boredoms[sentence]!==undefined){\n\
    \        boredoms[sentence]++;\n      }else{\n        boredoms[sentence] = 1;\n\
    \      }\n    }\n  }\n  var totalBoredoms = Object.keys(boredoms).length;\n  console.log(totalBoredoms);\n\
    \  return totalBoredoms;\n}\n", "    S = S.toLowerCase();\n    var bored = false;\n\
    \    for(var i=0; i<S.length; i++){\n        if(S[i] == 'i')\n            bored\
    \ = true;\n    }\n    return bored;\n}\n", "\tvar boredoms=0;\n\tfor(var i=1;i<S.length;i++){\n\
    \t\tif(S[i-1]==\".\")\n\t\t\tboredoms+=1;\n\t\telse if(S[i-1]==\"?\")\n\t\t\t\
    boredoms+=1;\n\t\telse if(S[i-1]==\"!\")\n\t\t\tboredoms+=1;\n\t}\n\treturn boredoms;\n\
    }\n", "  //Only change code below this line\n  var count = 0;\n  \n  if(S!==undefined){\n\
    \    for(var i = 0;i<S.length;i++){\n      if(S[i]==='.'){\n        if(S[i+1]==='?'){\n\
    \          count+=1;\n        }\n        else if(S[i+1]==='!'){\n          count+=1;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n", "    var count = 0\n \
    \   S.split(\" \").forEach(function(word) {\n        if (word[0] === \"I\") count++\n\
    \    })\n    return count\n}\n</cell>\n<text>\nNotice how we now use split() on\
    \ our strings. This makes our code a bit more concise and readable.\n\n\n</text>\n\
    <cell>", "  var boredom = 0;\n  var split_S = S.split('.');\n  var split_S = S.split('?');\n\
    \  var split_S = S.split('!');\n  \n  for(var i = 0; i < split_S.length; i++){\n\
    \    if(split_S[i] === 'I'){\n      boredom++;\n    }\n  }\n  return boredom;\n\
    }\n", "    var bored_sentences = bored_list();\n    var bored_count = 0;\n   \
    \ for (var i = 0; i < S.length; i++){\n        if (S.substring(0,i) in bored_sentences)\
    \ {\n            bored_count++;\n        }\n    }\n    return bored_count;\n}\n",
  "    var bored_count = 0;\n    //return a list of bored_count where the bored_count\
    \ is 1 if the sentence starts with \"I\"\n    bored_count = S.match(\"^I\");\n\
    \    return bored_count;\n}\n", "\tvar boredom=/^I.*\\.|I.*!/;\n\treturn boredom.test(S);\n\
    }\n", "    var bored = 0;\n    for (var i = S.length - 1; i >= 0; i--) {\n   \
    \     if (S[i] == \"I\"){\n            bored++;\n            if (bored > 1){\n\
    \                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
  "  S=S.replace(/[^.,!?]+/g,'');\n  return S.indexOf(\"I\")>=0?1:0;\n}\n\n", "  \
    \  let boredoms = 0;\n    const sentences = S.split('.');\n    for (let i=0; i<sentences.length;\
    \ i++){\n        const sentence = sentences[i];\n        if(sentence.indexOf(\"\
    i\") === 0) {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n\
    }\n", "\tlet counter = 0;\n\tlet boredom_words = [];\n\tfor(let word of S.split(\"\
    \ \")){\n\t\tif(boredom_words.includes(word))\n\t\t\tcontinue;\n\t\tboredom_words.push(word);\n\
    \t\tlet boredom_prefix = word;\n\t\tlet boredom_suffix = \"\";\n\t\tfor(let i\
    \ = 0; i < word.length; i++){\n\t\t\tif(i == word.length - 1)\n\t\t\t\tboredom_suffix\
    \ += \"?\";\n\t\t\telse\n\t\t\t\tboredom_suffix += \".\";\n\t\t\tif(!boredom_prefix.startsWith(\"\
    I\"))\n\t\t\t\tboredom_prefix += \".\";\n\t\t}\n\t\tif(boredom_suffix.startsWith(\"\
    ?\"))\n\t\t\tcounter++;\n\t}\n\treturn counter;\n}\n", "    S = S.toLowerCase();\n\
    \    var boredoms = {'I':1, 'I\\'':1, '\\'I':1, '!I':1, '?I':1, '\\'\\'I':1, '!\\\
    'I':1, '?\\'I':1};\n    var boredom_count = 0, i;\n    for(i = 0; i < S.length;\
    \ i++){\n        var c = S[i];\n        if(boredoms[c])\n            boredom_count++;\n\
    \    }\n    return boredom_count;\n}\n", "    for(var i=0;i<S.length;i++){\n \
    \       var t = S[i].toLowerCase().charAt(0);\n        if((t==='i'||t==='e'||t==='o'||t==='u'||t==='a')\
    \ && (S.slice(i+1).indexOf(\".\")!=-1||S.slice(i+1).indexOf(\"?\")!=-1||S.slice(i+1).indexOf(\"\
    !\")!=-1))\n            return 1;\n    }\n    return 0;\n}\n", "\tS = S.replace(/[^\\\
    .!?]+/g,\"\");\n\treturn S.indexOf(\"I\")!=-1\n}", "    var count = 0;\n    for(var\
    \ i = 0; i < S.length; i++){\n        if(S[i] == \"I\")\n            count++;\n\
    \    }\n    return count;\n}", "    var boredoms=0;\n    var starts_with_I=S.search(\"\
    I\")\n    if (starts_with_I>-1){\n        boredoms=1\n    }\n    return boredoms\n\
    }\n", "  var bored = 0;\n  S.split(/\\W/g).forEach(function(word){\n    if (word\
    \ === \"I\" && S.startsWith(\"I\")){\n      bored += 1;\n    } else if (word ===\
    \ \".\" || word === \"!\" || word === \"?\"){\n      bored += 1;\n    }\n  });\n\
    \  return bored;\n}\n", "  let bored = 0;\n  let arr1 = S.split('.');\n  let arr2\
    \ = arr1[1].split('?');\n  let arr3 = arr2[1].split('!');\n  for(var i = 0; i\
    \ < arr3.length; i++){\n    if(arr3[i].startsWith(\"I\")){\n      bored++;\n \
    \   }\n  }\n  return bored;\n}\n</code>\nThis will return 1 if there are 1 or\
    \ more bored sentences and 0 if there are zero bored sentences.\n<|/ a |>\n<|\
    \ a tags=arrays,javascript,string |>\n<code>\nconst arr1 = \"Hello.World?!\";\n\
    \nlet arr2 = arr1.split(\".\");\narr2 = arr2[1].split(\"?\");\narr2 = arr2[1].split(\"\
    !\");\n\nconst boredom = arr2.filter(string => string.startsWith(\"I\"));\n",
  "  var boredom = 0\n  for (var i=0; i < S.length; i++){\n    if (S[i] == \"I\")\
    \ boredom++\n    else if (S[i] == \"!\") boredom--\n    else if (S[i] == \".\"\
    \ || S[i] == \"?\" || S[i] == \" \") boredom = 0\n  }\n  return boredom\n}\n",
  "    var bored = 0;\n    var i = 0;\n    while(i < S.length){\n        if(S[i] ==\
    \ \"I\" || S[i] == \"!\" || S[i] == \"?\"){\n            bored++;\n        }\n\
    \        i++;\n    }\n    return bored;\n}\n", "  var sentences = S.split('.'),\n\
    \      bored = S.split('I').length;\n  return bored < sentences;\n}\n", "    return\
    \ boredom_count(S);\n}\nexports.is_bored = is_bored;\n", "  S = S.split('.');\n\
    \  for (var i = 0; i < S.length; i++){\n    if (S[i].indexOf(\"I\") > -1){\n \
    \     return i+1;\n    }\n  }\n  return 0;\n}\n", "    return boredom_count(S,\
    \ '.,?!') === 0;\n}\n", "    return boredom.test(S);\n}\n", "    return S.trim().toLowerCase().indexOf('i')\
    \ != -1;\n}\n", "\tS = S.toLowerCase();\n\treturn boredoms.indexOf(S.substring(0,S.indexOf('\
    \ '))) > -1 ? 1 : 0;\n}\n", "  var boredoms=0;\n  var arr=S.split('.');\n  for(var\
    \ i=0;i<arr.length;i++){\n    if(arr[i].split('?')[0].split('!')[0].indexOf('I')==0){\n\
    \      boredoms++;\n    }\n  }\n  return boredoms;\n}", "    var boredom = 0;\n\
    \    var words = \"I Am I Are you Do Do I Do I Dont Am I Am I\".split(\" \");\n\
    \    var word;\n    for(var i=0; i<S.length; i++){\n        word = S[i].toLowerCase();\n\
    \        if(words.indexOf(word) == 0){\n            boredom++;\n        }\n  \
    \  }\n    return boredom;\n}", "  //Your code here\n  for(var i =0;i<S.length;i++){\n\
    \    if(S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i) != '!')\n    \
    \  return 0;\n  }\n  return 1;\n}\n", "   S = S.toLowerCase();\n   for (var i=0;\
    \ i < S.length; i++){\n      if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n\
    \         return 0;\n      }\n   }\n   return 1;\n}\n", "   var counter = 0;\n\
    \   for(var i=0; i<S.length; i++){\n      if(S[i] == 'I'){\n         counter++;\n\
    \      }\n   }\n   return counter;\n}\n</cell>\n<cell>\n# === Write your solution\
    \ ===\n# Write a function is_bored that takes in a string and returns the number\
    \ of boredoms.\n# You may want to use the split function to split your sentence\
    \ into a list of strings.\n\n# Example 1:\n# >>> is_bored(\"Hello world\")\n#\
    \ 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\n# ===\n</cell>\n<cell>\n#=== PART 5: REPETITION ===\n# === Write a function\
    \ repeat that takes in a string and returns a string that has that string repeated\
    \ a specified number of times.\n# ===\n# === SOLUTION ===\n# Write a function\
    \ repeat that takes in a string and returns a string that has that string repeated\
    \ a specified number of times.\n# You may want to use the repeat function you\
    \ learned in Lab 3 to help you with this.\n# >>> repeat('H',2)\n# 'HHH'\n# ===\n\
    </cell>\n<cell>\n# === Write a function repeat that takes in a string and returns\
    \ a string that has that string repeated a specified number of times.\n# You may\
    \ want to use the repeat function you learned in Lab 3 to help you with this.\n\
    # >>> repeat('H',2)\n# 'HHH'\n# ===\n</cell>\n<cell>\n# === PART 6: CAPITALIZE!\
    \ ===\n# === Write a function capitalize that takes in a string and returns a\
    \ string where all capitals have been turned into lowercase.\n# ===\n# === SOLUTION\
    \ ===\n# Write a function capitalize that takes in a string and returns a string\
    \ where all capitals have been turned into lowercase.\n# You may want to use the\
    \ capitalize function you learned in Lab 3 to help you with this.\n# >>> capitalize('hello')\n\
    # 'Hello'\n# ===\n</cell>\n<cell>\n# === Write a function capitalize that takes\
    \ in a string and returns a string where all capitals have been turned into lowercase.\n\
    # You may want to use the capitalize function you learned in Lab 3 to help you\
    \ with this.\n# >>> capitalize('hello')\n# 'Hello'\n# ===\n</cell>\n<cell>\n#===\
    \ PART 7: CAPITALIZE! ===\n# === Write a function capitalize that takes in a string\
    \ and returns a ", "  bored = 0;\n  var i = 0;\n  var sentences = S.split(\".\"\
    );\n  for(var j=0; j < sentences.length; j++){\n    var sentence = sentences[j].split('\
    \ ');\n    if(sentence[0] == 'I'){\n      bored += 1;\n    }\n  }\n  return bored;\n\
    }\n", "    let s = S.split('.');\n    let bored = 0;\n    for(let i=0; i<s.length;\
    \ i++){\n        if(s[i][0] === 'I'){\n            bored++;\n        }\n    }\n\
    \    return bored;\n}\n</code>\n<|/ a tags=count,python-3.x,boredom,python dscore=2\
    \ |>\n<| c |>\nThanks for this but I'm getting an error on line 15 (`return bored`).\n\
    <|/ c |>\n<| c |>\nThat's because your function wasn't declared with `def`, which\
    \ means the `return` statement is treated as a statement, not as the return value\
    \ of the function.\n<|/ c |>\n<| c |>\nIt worked! But for some reason, whenever\
    \ I try to use the function I get the error `UnboundLocalError: local variable\
    \ 'bored' referenced before assignment`. So I changed it to a `global bored` statement\
    \ in the function. How come the global variable `bored` isn't recognized in the\
    \ function itself?\n<|/ c |>\n<| c |>\nYou don't need `global`, but you need to\
    \ define the variable outside the function first. For example, if you have the\
    \ line `bored = 0` outside the function definition then you can access `bored`\
    \ inside that function because the variable is now \"local\" to that function.\n\
    <|/ c |>\n<| a tags=count,python-3.x,boredom,python dscore=1 |>\nFor anyone who's\
    \ wondering how I solved the problem, here's the solution:\n<code>\n# Write a\
    \ function named is_bored that takes one string argument and \n# returns an integer\
    \ that indicates whether or not the given string is \n# bored. \n\ndef is_bored(S):\n\
    \    count = 0\n    S = S.split(\".\")\n    for letter in S:\n        if letter[0]\
    \ == \"I\":\n            count += 1\n    return count\n\nprint(is_bored(\"Hello\
    \ world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\"))\nprint(is_bored(\"I am very bored\"))\n</code>\n<|/ a |>\n<| c |>\n\
    The code you have posted is incorrect. You should include the code you posted\
    \ as the answer to the question. Also, you're counting the number of `I` characters\
    \ *not* the number of bored sentences. You should be returning `True` or `False`,\
    \ not counting how many bored sentences there are. `bored` should be set to `true`\
    \ if the sentence starts with `I`, otherwise it should be set to `false`.\n<|/\
    \ c |>\n<| c |>\nI didn't want to confuse the OP by posting my answer in another\
    \ answer. I wanted to give some guidance as to how to accomplish ", "  boredom\
    \ = [ 'I' ];\n  words = [];\n  for (i=0; i<S.length; i++){\n    if (boredom.length){\n\
    \      if (boredom[0] == S[i]){\n        boredom.pop();\n      } else if (boredom[boredom.length-1]\
    \ == S[i]){\n        boredom.pop();\n        boredom.push(S[i]);\n      }\n  \
    \  } else {\n      if (S[i].indexOf('.') != -1 || S[i].indexOf('!') != -1 || S[i].indexOf('?')\
    \ != -1){\n        words.push(S[i]);\n      }\n    }\n  }\n  return words.length;\n\
    }\n</cell>\n<cell>\n# Problem 3 - The Boredom Adder\n# Write a function that takes\
    \ two integers as arguments and returns their sum. \n# Your function should take\
    \ strings as input as well. \n# A string is a sequence of characters. \n# The\
    \ function will throw an Error if it gets an incorrect data type as an argument.\n\
    # Your function should throw an Error if it gets an incorrect data type as an\
    \ argument.\n# You should make your code modular, so that you can easily test\
    \ the different cases.\n# If you do not want to make your code modular, your function\
    \ should only take one argument.\n# Make sure your code supports other data types\
    \ besides strings and integers.\n# If the user enters a string or an integer,\
    \ your function should return an integer.\n# You can assume that the integer will\
    \ always be positive.\n# Example of calling the function:\n# >>> add_boredoms(42,\
    \ 24)\n# 54\n# >>> add_boredoms(42, \"Hello\")\n# Traceback (most recent call\
    \ last):\n# ...\n# TypeError: add_boredoms() takes 1 positional argument but 2\
    \ were given\n</cell>\n<cell>\n#Problem 4\n# Write a function that takes two integers\
    \ as arguments and returns the sum of the absolute values of the first integer\
    \ and the second integer.\n# Your function should support both positive and negative\
    \ numbers as arguments. \n# The function should throw an Error if the arguments\
    \ do not support negative numbers.\n# Your function should throw an Error if the\
    \ arguments do not support negative numbers.\n# You should make your code modular,\
    \ so that you can easily test the different cases.\n# You should make your code\
    \ support any data type as an argument. \n# Make sure your code supports other\
    \ data types besides strings and integers.\n# If the user enters a string or an\
    \ integer, your function should return a string.\n# You can assume that the integer\
    \ will always be positive.\n# Example of calling the function:\n# >>> add_boredoms(42,\
    \ -24) # Returns \"42\"\n# 42\n# >>> add_boredoms(-2, \"Hello\") # Returns \"\
    -2\"\n", "    var bored = 0;\n    S = S.replace(/[^\\.?!]+/gi,\"\").toLowerCase();\n\
    \    if(S == \"i\"){\n        bored++;\n    }\n    if(S == \".\"){\n        bored++;\n\
    \    }\n    if(S == \"?\"){\n        bored++;\n    }\n    if(S == \"!\"){\n  \
    \      bored++;\n    }\n    return bored;\n}\n", "\tvar bored_words = []; \n\t\
    bored_words = bored_words.concat(bored_word_array);\n\tbored_words = bored_words.concat(bored_sentence_array);\n\
    \tbored_words = bored_words.concat(bored_question_array);\n\tbored_words = bored_words.concat(bored_exclamation_array);\n\
    \tbored_words = bored_words.concat(bored_sentence_array);\n\n\t// Iterate through\
    \ each word\n\tfor(var i = 0; i < bored_words.length; i++){\n\t\t// If the current\
    \ word is I\n\t\tif(bored_words[i].includes('I')){\n\t\t\t// Go through each word\
    \ in the sentence and see if the first letter is I\n\t\t\tfor(var j = 0; j < bored_words[i].length;\
    \ j++){\n\t\t\t\t// If so, count it\n\t\t\t\tif(bored_words[i][j] === 'I'){\n\t\
    \t\t\t\tbored_words[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the current word\
    \ is not I, continue to the next word\n\t\t}else{\n\t\t\tcontinue;\n\t\t}\n\t\
    }\n\t// Return the total boredom count\n\treturn bored_words.reduce(function(a,\
    \ b){\n\t\treturn a + b;\n\t}, 0);\n}\n", "  var bored=1;\n  for(var i=0;i<S.length;i++){\n\
    \    if(S[i]==\".\"){bored++;}\n    else if(S[i]==\"?\"){bored++;}\n    else if(S[i]==\"\
    !\"){bored++;}\n  }\n  return bored;\n}", "    S.split(\" \").forEach(function(word){\n\
    \        if(word.startsWith(\"I\")){\n            return 0;\n        }\n    });\n\
    \    return 1;\n}\n</code>\n<|/ a |>\n<| a tags=javascript |>\nThe previous answers\
    \ have all suggested methods of splitting the string by spaces. However, what\
    \ if you have multi-word sentences like \"I'm a beautiful day\" that you want\
    \ to count as one boredom? \nOne way to do this would be to use a regex that would\
    \ match all words that start with 'I' and have one or more words between them.\n\
    This would then allow you to loop through the sentence and count how many times\
    \ the regex matched the entire sentence.\n<code>", "  var bored = 0;\n  var words\
    \ = S.split(' ');\n  words.forEach(function(word){\n    if(word[0] === 'I'){\n\
    \      bored++;\n    }\n  });\n  return bored;\n}\n", "    var boredom = 0;\n\
    \    var words = S.split(/[.?!]/);\n    for(var i = 0; i < words.length; i++){\n\
    \        if(words[0] === 'I'){\n            boredom++;\n        }\n    }\n   \
    \ return boredom;\n}\n", "    var count = 0;\n    for (var i = 0; i < S.length;\
    \ i++) {\n        if (S[i] === \".\" || S[i] === \"?\" || S[i] === \"!\"){\n \
    \           count++;\n        }\n    }\n    return count;\n}", "  var boredoms\
    \ = S.match(/(^|[\\.\\?!])+I/g);\n  return boredoms ? (boredoms.length / S.length)\
    \ > 0.2 : 0;\n}\n", "  return S.indexOf('I') === 0;\n}\n", "    let re = new RegExp(\"\
    ([\\\\w].*?)[?!.]\", \"ig\");\n    let count = 0;\n    S = S.replace(re, function(e){\n\
    \        if (e.startsWith(\"I\")){\n            count+=1;\n        }\n    });\n\
    \    return count;\n}\n", "  \n  var boredoms = S.match(/\\.|\\?|\\!/g);\n  return\
    \ boredoms.length\n}\n", "  var boredoms=0;\n  S.split('.').forEach(function(x){\n\
    \    var y=x.match(/\\bI\\b/);\n    if(y){\n      boredoms++;\n    }\n  });\n\
    \  return boredoms;\n}\n", "    var s = S.split('.');\n    var count = 0;\n  \
    \  for(var i = 0; i < s.length; i++)\n        if (s[i] == \"I\")\n           \
    \ count++;\n    return count;\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\n\
    Thanks, this is what I was looking for. Just one question though, is there a way\
    \ of getting the length of the boredoms array without having to put it into a\
    \ string?\n<|/ c |>\n<| c |>\n, sure, just `var len = boredoms.length;`. Arrays\
    \ have a `.length` property that gives the number of elements in them.\n<|/ c\
    \ |>\n<| c |>\nYes but when I do this it comes up as 'undefined'\n<|/ c |>\n<|\
    \ c |>\n, well, yes, it does, because `boredoms` is an array, and arrays have\
    \ a `.length` property. Did you assign it to a variable? If you just did `console.log(boredoms)`,\
    \ then it would log `[boredom1, boredom2, ...]`. But if you do `console.log(boredoms.length)`,\
    \ then it will show you the actual length value of the array.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nYou could split your string with . as separator and check every\
    \ entry for the first occurence of I. Splitting the string with .split() yields\
    \ an array of the sentences. Then you can iterate over this array with .forEach\
    \ and check if the first element of the array is I.\n<code>\nvar string = 'The\
    \ sky is blue. The sun is shining. I love this weather.';\nvar boredoms = string.split('.');\n\
    var count = 0;\n\nboredoms.forEach(function(boredom) {\n    if (boredom[0] ===\
    \ 'I') {\n        count++;\n    }\n});\n", "\tlet counter = 0;\n\tS.split(\".\"\
    ).map(function(s){\n\t\ts = s.toLowerCase();\n\t\tif(s.startsWith(\"i\")){\n\t\
    \t\tcounter += 1;\n\t\t}\n\t});\n\treturn counter;\n}\n", "  return count_boredoms(S,\
    \ '.') > 0;\n}\n", "  var boredom = S\n    .split(\" \") //Split our sentence\
    \ into words\n    .filter(function(str) {return str[0] !== \"I\"; }) //Remove\
    \ all the words that dont start with 'I'\n    .length; //The length of the filtered\
    \ sentence is how many boredoms there are\n  return boredom;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
