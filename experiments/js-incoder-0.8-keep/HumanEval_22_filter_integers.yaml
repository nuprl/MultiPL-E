name: HumanEval_22_filter_integers
language: js
prompt: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
  \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2,\
  \ 3]\nfunction filter_integers(values){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
  \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
  , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["  return values.filter(function(value){\n    return typeof value ===\
    \ 'number' && isFinite(value)\n  })\n}\n\n", "  var intValues = values.filter(function(val){\n\
    \    return typeof val===\"number\" && isFinite(val);\n  });\n  return intValues;\n\
    }\n\n", "  return values.filter(value => {\n    return typeof value === 'number'\
    \ && isFinite(value);\n  });\n}\n", "  return values.filter(isInteger);\n}", " \
    \   values = filter(values, function(x){\n        return typeof x === 'number'\
    \ && !isNaN(x) && isFinite(x);\n    });\n    return values;\n}\n", "\treturn values.filter(function(item){\n\
    \t\treturn typeof item == 'number' && isFinite(item);\n\t});\n}\n\n", "    return\
    \ values.filter(function(value){\n        return typeof value === 'number' &&\
    \ isFinite(value)\n    })\n}\n", "    return values.filter(function(value){\n\
    \        return (typeof value === 'number') && isInteger(value);\n    });\n}\n",
  "  return values.filter(function(val){\n    return isInteger(val); \n  });\n}\n",
  "  return values.filter(function (item){\n    return typeof item === 'number' &&\
    \ isInteger(item);\n  });\n}\n", "  var filtered = [];\n  for(var i = 0, len =\
    \ values.length; i < len; i++){\n    if(isInteger(values[i])){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "    return values\n        .filter(function(n){\n\
    \            return typeof n === 'number' && n % 1 === 0;\n        });\n}\n",
  "  return values.filter(function(value){\n    return _.isNumber(value) && value\
    \ % 1 === 0;\n  });\n}\n", "  return values.filter(function(x){ return (typeof\
    \ x === 'number') ? !isNaN(x) : null })\n}\n</code>\nThis filter_integers function\
    \ just checks if value is a number or not. If not, we return null, which means\
    \ this item is not included into filtered list. \nThen, you need to filter and\
    \ sort the filtered array by the key you need:\n<code>\nvar filtered = filter(data,\
    \ function(x) { return x[key] === searchValue; }).sort(function(a, b){ \n  return\
    \ a[orderBy] - b[orderBy]\n})\n</code>\nIt would be better to refactor the above\
    \ code to have a function which would return sorted array, and accept a key name.\
    \ This way, you would be able to do like this:\n<code>\nvar sorted = sort_array(data,\
    \ searchKey, orderBy)\n</code>\n<|/ a tags=javascript,arrays,multidimensional-array\
    \ dscore=1 |>\n<| c |>\nI do need to order by the 'rating' key. I actually do\
    \ have a function that gets the sorted array already with your code.\n<|/ c |>\n\
    <| c |>\nOkay, but you haven't mentioned about sorting in question. Anyway, I've\
    \ updated my answer with sorting by rating key, please check!\n<|/ c |>\n<| c\
    \ |>\nYes, I did mention that. My bad. I forgot to mention that I have to order\
    \ by the 'rating' key. I will edit my question to reflect this.\n<|/ c |>\n<|\
    \ c |>\nI've updated my answer with sorting by rating key, please check!\n<|/\
    \ c |>\n<| c |>\nI actually used the filter function to filter the unwanted data\
    \ then sorted it with the sort_array function. Thanks for your help and your time!\n\
    <|/ c |>\n<| a dscore=0 |>\nIt looks like you're looking for the JavaScript filter\
    \ function, which filters an array for only those elements where the function\
    \ returns true. \n<code>\nvar newArray = data.filter(function(val){\n   //Only\
    \ return if val.rating is > 3\n   return val.rating > 3;\n})\n</code>\n<|/ a tags=javascript,arrays,multidimensional-array\
    \ |>\n<| c |>\nI do need to filter the data by the 'rating' key. The 'rating'\
    \ key can have values greater than 3, but some values will have values like -5,\
    \ -6, and so on.\n<|/ c |>\n<| a tags=javascript,arrays,multidimensional-array\
    \ dscore=0 |>\nI believe this would work:\n<code>\ndata.filter(function(item){\n\
    \  return item.rating > 3;\n}).sort(function(a, b){\n  return a.rating - b.",
  "  return values.filter(function(value){\n    return !isInteger(value);\n  });\n\
    }\n", "    return values.filter(function(value) {\n        var valid = (value\
    \ === undefined || value === null);\n\n        return (valid && typeof value ===\
    \ \"number\" && !isNaN(value));\n    });\n}\n", "  return values.filter(function(value){\n\
    \    return typeof(value) === 'number'\n  })\n}\n", "  const ints = [];\n  for(let\
    \ i = 0; i < values.length; i++){\n    if(typeof values[i] === 'number'){\n  \
    \    ints.push(values[i]);\n    }\n  }\n  return ints;\n}\n", "  return values.filter(function(value){\
    \ return !isNaN(value); });\n}\n", "  return values.filter(function(v){\n    return\
    \ typeof v === 'number' && !isNaN(v);\n  });\n}\n", "\treturn _(filter([_.isInteger],\
    \ values)).value()\n}\n", "  var filtered = [];\n  for(var i=0, len = values.length;\
    \ i < len; i++){\n    if(typeof(values[i]) != 'number') continue;\n    filtered.push(values[i]);\n\
    \  }\n  return filtered;\n}\n", "  var integers = []\n  for (var i = 0; i < values.length;\
    \ i++) {\n    if (typeof values[i] === 'number') {\n      integers.push(values[i])\n\
    \    }\n  }\n  return integers\n}\n", "  return values.filter(function(val){\n\
    \    return typeof val === 'number' && !isNaN(val);\n  });\n}\n\n", "    return\
    \ values.filter(function(value){\n        return _.isNumber(value) && !_.isNaN(value)\n\
    \    })\n}\n", "  return values.filter(v => Number.isInteger(v))\n}\n", "    return\
    \ values.filter(function(value){\n        return typeof value === 'number' &&\
    \ !isNaN(value) && isFinite(value)\n    })\n}\n", "    let ints = [];\n    for(let\
    \ value of values){\n        if(isNaN(value)){\n            continue;\n      \
    \  }\n        if(typeof(value)==='number'){\n            ints.push(value);\n \
    \       }\n    }\n    return ints;\n}\n", "  var filtered = [];\n  for(var i=0;\
    \ i < values.length; i++){\n    if(typeof values[i] === \"number\")\n      filtered.push(values[i]);\n\
    \  }\n  return filtered;\n}\n", "  return _.filter(_.compact(_.castArray(values)),\
    \ _.isInteger);\n}\n", "  let output = [];\n  for(let i = 0, len = values.length;\
    \ i < len; i++){\n    if (typeof(values[i]) === \"number\") output.push(values[i]);\n\
    \  }\n  return output;\n}\n", "\tvar integers = [];\n\tfor (var i = 0; i < values.length;\
    \ i++){\n\t\tvar value = get(values[i]);\n\t\tif (isInteger(value))\n\t\t\tintegers.push(value);\n\
    \t}\n\treturn integers;\n}\n", "  const out = [];\n  for(let i = 0; i < values.length;\
    \ i++){\n    if(!(values[i] in INTEGERS)){\n      out.push(values[i]);\n    }\n\
    \  }\n  return out;\n}\n", "  var output = [];\n  for(var i = 0, len = values.length;\
    \ i < len; i++){\n    if(typeof values[i] === 'number'){\n      output.push(values[i]);\n\
    \    }\n  }\n  return output;\n}\n", "  values = _.filter(values, function(x){\n\
    \    return x % 1 === 0;\n  });\n  return values.length ? values : false;\n}\n",
  "  return values.filter(value => Number.isInteger(value));\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value == 'number';\n    });\n}\n", "\treturn\
    \ _.filter(values, function(x){\n\t\treturn _.isInteger(x);\n\t});\n}\n", "  return\
    \ values.filter(function(value){\n    return typeof value === 'number' && !isNaN(value)\n\
    \  })\n}\n", "    return values.filter(function(item){\n        return typeof\
    \ item === 'number' && !isNaN(item);\n    });\n}\n\n", "\treturn values.filter(function(x){\n\
    \t\treturn isInteger(x);\n\t});\n}\n", "  for(var i = 0, l = values.length; i\
    \ < l; i++){\n    if(!is_integer(values[i])){\n      values.splice(i, 1);\n  \
    \    i--;\n      l--;\n    }\n  }\n  return values;\n};\n", "\treturn values.filter(function(val){\n\
    \t\treturn isInteger(val)\n\t})\n}\n", "  return values.filter(function(value){\n\
    \    return isInteger(value);\n  });\n}\n", "  return values.filter(value => typeof\
    \ value === 'number');\n}\n", "  return values.filter(function (x){\n    return\
    \ typeof x === \"number\" && isFinite(x);\n  });\n}\n", "\treturn values.filter(function(n){\n\
    \t\treturn ((typeof n === 'number') && (!isNaN(n)));\n\t});\n}\n", "\tvar filtered\
    \ = [];\n\tfor(var i=0; i<values.length; i++){\n\t\tif(!isNaN(values[i]) && !isNumber(values[i])){\n\
    \t\t\tfiltered.push(values[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "  var\
    \ filtered = [];\n\n  for (var i = 0; i < values.length; i++){\n    var value\
    \ = values[i];\n    \n    if (typeof value === 'number' && isFinite(value)){\n\
    \      filtered.push(value);\n    }\n  }\n\n  return filtered;\n}\n", "    return\
    \ values.filter(function(elm){\n        return typeof elm === 'number' && isFinite(elm);\n\
    \    });\n}\n", "  return _.filter(values, function(value){\n    return _.isNumber(value)\
    \ && _.isInteger(value);\n  });\n}\n", "    return values.filter(function(value)\
    \ {\n        return typeof value === 'number' && isInteger(value);\n    });\n\
    }\n", "    return _.filter(_.map(values, function(v){ return typeof(v) === 'number'\
    \ && isFinite(v); }),\n                    function(num){ return isFinite(num);\
    \ });\n}\n", "    return values.filter(x => x === parseInt(x, 10));\n}\n", " \
    \ return values.filter(isInteger)\n}\n", "  return _filter(values, 'isInteger');\n\
    }\nexports.filter_integers = filter_integers;\n", "    return values.filter(function(val){\n\
    \        return typeof val === 'number' && !Number.isNaN(val);\n    })\n}\n\n",
  "  return values.filter(value => Number.isInteger(value));\n}\n", "  for(var i =\
    \ 0, len = values.length; i < len; i++){\n    if(typeof values[i] === 'number'){\n\
    \      values.splice(i--, 1);\n    }\n  }\n  return values;\n}\n", "  var i, newArray\
    \ = [];\n  for (i = 0; i < values.length; i++){\n    if (values.hasOwnProperty(i)\
    \ && typeof values[i] === 'number'){\n      newArray.push(values[i]);\n    }\n\
    \  }\n  return newArray;\n}\n", "    return values.filter(val => isNaN(val) ===\
    \ false);\n}\n", "\tvar new_values = []\n\tfor(var i = 0; i < values.length; i++){\n\
    \t\tif(typeof values[i] === 'number' && values[i] % 1 === 0){\n\t\t\tnew_values.push(values[i])\n\
    \t\t}\n\t}\n\treturn new_values\n}\n", "  return values.filter(isInteger);\n}\n",
  "\treturn values.filter(function(n){\n\t\treturn isNumeric(n) && isInteger(n);\n\
    \t});\n}\n\n", "  return values.filter(function(v){\n    return typeof v == 'number'\
    \ && isInteger(v);\n  });\n}\n", "    values = _.values(values);\n    return _.filter(_.map(values,\
    \ Number), _.isInteger);\n}\n", "    var result = [];\n    for(var i = 0; i <\
    \ values.length; i++){\n        if(typeof values[i] === 'number'){\n         \
    \   result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "  var\
    \ filtered = [];\n  var integers = [];\n  for(var i = 0, l = values.length; i\
    \ < l; i++){\n    var x = values[i];\n    if(typeof x === 'number' && x % 1 ===\
    \ 0){\n      integers.push(x);\n    } else {\n      filtered.push(x);\n    }\n\
    \  }\n  return filtered.concat(integers);\n}", "  return values(filter(nativeIsInteger,\
    \ values))\n}\n", "  return values.filter(function(item){\n    return typeof item\
    \ === 'number' && isFinite(item);\n  });\n}\n\n", "  return values.filter(function(val){\n\
    \    return typeof val === 'number' && isFinite(val);\n  });\n}\n\n", "  for(var\
    \ i in values){\n    if(typeof values[i] != number){\n      values[i] = parseInt(values[i],\
    \ 10);\n    }\n  }\n  return values;\n}\n", "  return values.filter(function(v){\n\
    \    return isInteger(v);\n  });\n}\n", "  return values.filter(function(i) {\n\
    \    return typeof i === 'number' && isFinite(i);\n  });\n}\n", "\tvar result\
    \ = []\n\tvalues.forEach(function(v){\n\t\tif(Number.isInteger(v)){\n\t\t\tresult.push(v)\n\
    \t\t}\n\t})\n\treturn result\n}\n", "    return values.filter(value => typeof\
    \ value === 'number' && isFinite(value))\n}\n\n", "    var filtered = [];\n  \
    \  for(var i = 0; i < values.length; i++){\n        switch(values[i]){\n     \
    \       case null:\n            case undefined:\n            case false:\n   \
    \         case true:\n            case 0:\n            case 1:\n            case\
    \ 2:\n            case 3:\n            case 4:\n            case 5:\n        \
    \    case 6:\n            case 7:\n            case 8:\n            case 9:\n\
    \            case 10:\n            case 11:\n            case 12:\n          \
    \  case 13:\n            case 14:\n            case 15:\n            case 16:\n\
    \            case 17:\n            case 18:\n            case 19:\n          \
    \  case 20:\n            case 21:\n            case 22:\n            case 23:\n\
    \            case 24:\n            case 25:\n            case 26:\n          \
    \  case 27:\n            case 28:\n            case 29:\n            case 30:\n\
    \            case 31:\n            case 32:\n            case 33:\n          \
    \  case 34:\n            case 35:\n            case 36:\n            case 37:\n\
    \            case 38:\n            case 39:\n            case 40:\n          \
    \  case 41:\n            case 42:\n            case 43:\n            case 44:\n\
    \            case 45:\n            case 46:\n            case 47:\n          \
    \  case 48:\n            case 49:\n            case 50:\n            case 51:\n\
    \            case 52:\n            case 53:\n            case 54:\n          \
    \  case 55:\n            case 56:\n            case 57:\n            case 58:\n\
    \            case 59:\n            case 60:\n            case 61:\n          \
    \  case 62:\n            case 63:\n            case 64:\n            case 65:\n\
    \            case 66:\n            case 67:\n            case 68:\n          \
    \  case 69:\n            case 70:\n            case 71:\n            case 72:\n\
    \            case 73:\n            case 74:\n            case 75:\n          \
    \  case 76:\n            case 77:\n            case 78:\n            case 79:\n\
    \            case 80:\n            case 81:\n            case 82:\n          \
    \  case 83:\n            case 84:\n            case 85:\n            case 86:\n\
    \            case 87:\n            case 88:\n            case 89:\n          \
    \  case 90:\n            case 91:\n            case 92:\n            case 93:\n\
    \            case 94:\n            case 95:\n            case 96:\n          \
    \  case 97:\n            case 98:\n            case 99:\n            case 100:\n\
    \            case 101:\n            case 102:\n            case 103:\n       \
    \     case 104:\n            case 105:\n            case 106:\n            case\
    \ 107:\n            case 108:\n            case 109:\n            case 110:\n\
    \            case 111:\n            case 112:\n            case 113:\n       \
    \     case 114:\n            case 115:\n            case 116:\n            case\
    \ 117:\n            case 118:\n            case 119:\n            case 120:\n\
    \            case 121:\n            case 122:\n            case 123:\n       \
    \     case 124:\n            case 125:\n            case 12", "  return values.filter(function(val){\n\
    \    return typeof val === 'number' && val%1 === 0;\n  });\n}\n", "    var filter\
    \ = [];\n\n    for(var i = 0; i < values.length; i++){\n        var val = values[i];\n\
    \n        if(typeof val === 'number'){\n            filter.push(val);\n      \
    \  }\n    }\n\n    return filter;\n}\n", "  return values.filter(function(x){\n\
    \    return typeof x === 'number' && !isNaN(x)\n  })\n}\n", "  var filtered =\
    \ [];\n  for(var i = 0; i < values.length; i++){\n    if(parseInt(values[i]) ==\
    \ values[i]){\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n\
    }\n", "  var filtered = [];\n  for (var i = 0; i < values.length; i++) {\n   \
    \ if(parseInt(values[i])){\n      filtered.push(values[i]);\n    }\n  }\n  return\
    \ filtered;\n}\n", "  var filtered = [];\n  for (var i = 0; i < values.length;\
    \ i++){\n    var value = values[i];\n    if (typeof(value) == 'number'){\n   \
    \   filtered.push(value);\n    }\n  }\n  return filtered;\n}\n", "\treturn _.reduce(values,\
    \ function(result, value){\n\t\t\n\t\t// if value is a number\n\t\tif( _.isNumber(value)\
    \ ){\n\t\t\t// add it to the result\n\t\t\tresult.push(value);\n\t\t}\n\n\t\t\
    // if value is a string, we consider it to be an object\n\t\tif( _.isString(value)\
    \ ){\n\t\t\t// if value is empty, we add it to the result array\n\t\t\tif( value.length\
    \ === 0 ){\n\t\t\t\tresult.push(value);\n\t\t\t}\n\t\t\t\n\t\t\t// else we filter\
    \ it for integers\n\t\t\telse{\n\t\t\t\t\n\t\t\t\t// we split it for integers\n\
    \t\t\t\tvar splitted = value.split(\".\");\n\n\t\t\t\t// if there's an integer\
    \ in the string\n\t\t\t\tif( splitted.length > 1 ){\n\t\t\t\t\t\n\t\t\t\t\t//\
    \ we add it to the result\n\t\t\t\t\tresult.push(parseInt(value, 10));\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if the given value is not an object/array/string,\
    \ we consider it to be a plain value\n\t\telse{\n\t\t\t// if value is empty, we\
    \ add it to the result\n\t\t\tif( value.length === 0 ){\n\t\t\t\tresult.push(value);\n\
    \t\t\t}\n\t\t\t\n\t\t\t// else we consider it to be a plain value\n\t\t\telse{\n\
    \t\t\t\t\n\t\t\t\t// we filter it for integers\n\t\t\t\tif( _.isNumber(value)\
    \ ){\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//\
    \ we filter it for floats\n\t\t\t\tif( _.isBoolean(value) ){\n\t\t\t\t\tresult.push(value);\n\
    \t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// we filter it for strings\n\t\t\t\telse{\n\
    \t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\
    \t}, []);\n}\n\n", "  var filtered = [];\n  values.forEach(function(v) {\n   \
    \ if (typeof v === 'number'){\n      filtered.push(v);\n    }\n  });\n  return\
    \ filtered;\n}\n", "    return values.filter(function(item){\n        return typeof\
    \ item === 'number' && !isNaN(item);\n    });\n}\n", "  return values.filter(function\
    \ (value){\n    if(typeof value === 'number'){\n      return !isNaN(value)\n \
    \   }\n  })\n}\n", "  return values.filter(function(value){\n    return typeof\
    \ value === 'number' && !isNaN(value);\n  });\n}\n", "  return values.filter(function(val){\n\
    \    return typeof val === \"number\" && val % 1 === 0;\n  });\n}\n", "    var\
    \ filtered = [];\n    for (var i = 0; i < values.length; i++){\n        if (typeof\
    \ values[i] === \"number\"){\n            filtered.push(values[i])\n        }\n\
    \    }\n    return filtered;\n}\n", "    var filtered = [];\n    for(var i = 0,\
    \ len = values.length; i < len; i++){\n        if(!isNaN(parseInt(values[i], 10))){\n\
    \            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "  return values.filter( function(i) {\n    return typeof(i) === \"number\"\
    ;\n  });\n}\n", "  var filtered = [];\n  for(var i=0;i<values.length;i++){\n \
    \   if(isInteger(values[i])){\n      filtered.push(values[i])\n    }\n  }\n  return\
    \ filtered;\n}\n", "  if(Array.isArray(values)){\n    return values.filter(function(value)\
    \ {\n      if(typeof value === 'number'){\n        return Number.isInteger(value);\n\
    \      }\n      return true;\n    });\n  }else{\n    return [];\n  }\n}\n", " \
    \ return values.filter(value => typeof value === 'number');\n}\n", "    values\
    \ = $.grep(values, function(value){\n        return is_integer(value);\n    });\n\
    \    return values;\n}\n", "    return values.filter(function(i){ return typeof(i)===\"\
    number\" });\n}\n", "    return filter(function (value){\n        return typeof\
    \ value === 'number' && !isNaN(value);\n    }, values);\n}\n", "  var i, value,\
    \ output = []\n  for(i in values){\n    value = check_integer(values[i])\n   \
    \ if(value !== false){\n      output.push(value)\n    }\n  }\n  return output\n\
    }\n", "  return values.filter(value => typeof(value) === \"number\" && Math.floor(value)\
    \ == value);\n}\n", "  return values.filter(function(value){\n    return typeof\
    \ value == 'number' && isFinite(value)\n  })\n}\n", "    return values.filter(function(value){\n\
    \        return typeof value == 'number' && isFinite(value)\n    })\n}\n", " \
    \ return values.filter(function(value){\n    return typeof value === \"number\"\
    \ && (value | 0) === value\n  })\n}\n", "  return values.filter(function (item){\n\
    \    return typeof item === 'number' && !Number.isNaN(item)\n  })\n}\n", "\treturn\
    \ values.filter(function(value){\n\t\treturn typeof(value) === 'number' && !isNaN(value)\
    \ && isFinite(value);\n\t});\n}\n\n", "  if(Array.isArray(values)){\n    return\
    \ values.filter(function(val){\n      return val%1 === 0;\n    });\n  } else {\n\
    \    return [];\n  }\n}", "  return values.filter(function(value){\n    return\
    \ typeof value === 'number' && !isNaN(value);\n  });\n}\n", "    return filter(values,\
    \ function(value){\n        return isInteger(value);\n    });\n}\n", "  let output\
    \ = [];\n  values.forEach(value => {\n    if(typeof value === 'number'){\n   \
    \   output.push(value)\n    }\n  });\n  return output\n}\n", "    var filtered\
    \ = [];\n\n    for(var i = 0; i < values.length; i++){\n        if(isNumeric(values[i])){\n\
    \            filtered.push(values[i]);\n        }\n    }\n\n    return filtered;\n\
    }\n", "  var output = [];\n  \n  for (var i = 0; i < values.length; i++){\n  \
    \  if (typeof values[i] === 'number'){\n      output.push(values[i]);\n    }\n\
    \  }\n  \n  return output;\n}\n", "    return values.filter(function(value) {\n\
    \        return isInteger(value);\n    });\n}\n", "  return values.filter(function(value){\n\
    \    return typeof value === 'number'\n  })\n}\n", "    return values(filter(isInteger,\
    \ values));\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using `Array.prototype.some()`\
    \ vs `Array.prototype.filter()` vs `Array.prototype.map()`\n<|/ c |>\n<| c |>\n\
    It's not about how much more performant it is but about how simple it is to write\
    \ and understand. Especially for beginners that want to understand how it works.\
    \ I always choose the simplest solution that works best for me.\n<|/ c |>\n<|\
    \ c |>\nI agree. Sometimes I prefer simple solutions that convey the meaning I\
    \ want, but sometimes I prefer complex solutions that I understand and can understand\
    \ easily.\n<|/ c |>\n<| c |>\nWhy are you using `filter` in the first place? `some`\
    \ is exactly what you need. You should know that `.filter` is an array method\
    \ and that `.some` only exists on an object.\n<|/ c |>\n<| c |>\n`filter` works\
    \ on an `array` as well, it just returns a new array. `some` works on `objects`\
    \ that inherit from `Array.prototype`.\n<|/ c |>\n<| a tags=arrays,javascript,javascript-objects\
    \ |>\n<code>\nvar myList = ['a', 3, 'b', 4];\nvar newList = [];\nmyList.forEach(function(item){\n\
    \    if(typeof item == 'number'){\n        newList.push(item);\n    }\n});\n</code>\n\
    This will create a new array that contains the numbers only. To filter out the\
    \ objects, you can change it to a for loop (since forEach isn't supported by all\
    \ browsers)\n<|/ a dscore=5 |>\n<| c |>\nWhat is the downside of using .forEach\
    \ rather than for(var i = 0; i < myList.length; i++)\n<|/ c |>\n<| c |>\nThe downside\
    \ is that it doesn't work in IE8 and below. `forEach` was introduced with IE9\n\
    <|/ c |>\n<| c |>\nThat's not really an issue since you can polyfill it or just\
    \ use the old for loop instead.\n<|/ c |>\n<| c |>\nYeah, I figured that out after\
    \ I posted this... But thanks for sharing!\n<|/ c |>\n<| c |>\nIf you use ES6\
    \ you can use Array.protoype.filter():\n\n`newList = myList.filter(item => typeof\
    \ item === 'number');`\n<|/ c |>\n<| a dscore=5 tags=arrays,javascript,javascript-objects\
    \ |>\nJust another way:\n<code>\nvar myList = ['a', 3, 'b', 4];\nvar new", " \
    \ var filtered = [];\n  for(var i = 0; i < values.length; i++){\n    if(typeof\
    \ values[i] === 'number'){\n      filtered.push(values[i])\n    }\n  }\n  return\
    \ filtered;\n}\n", "\treturn _filter(values, function(){\n\t\treturn this.type\
    \ === NUMBER_TYPE;\n\t});\n}\n", "    var value_list = [];\n    for (var i = 0;\
    \ i < values.length; i++) {\n        // We use '==' here, but we would like to\
    \ also accept NaN,\n        // and there is some concern that '==' may do something\
    \ weird with\n        // objects where NaN != NaN, but NaN == NaN.\n        if\
    \ (values[i] != +values[i]){\n            value_list.push(values[i]);\n      \
    \  }\n    }\n    return value_list;\n}\n\n", "  var filtered = [];\n  for(var\
    \ i = 0; i < values.length; i++){\n    if(typeof values[i] === 'number')\n   \
    \   filtered.push(values[i]);\n  }\n  return filtered;\n}\n\n", "\tvar newValues\
    \ = [];\n\tfor(var i=0; i < values.length; i++){\n\t\tif(typeof values[i] != 'number'){\n\
    \t\t\tnewValues.push(values[i]);\n\t\t}\n\t}\n\treturn newValues;\n}\n", "   \
    \ return _.filter(_.castArray(values), function(v){\n        return _.isNumber(v);\n\
    \    });\n}\n", "    return values.filter(function(i){\n        return typeof\
    \ i === 'number' && isFinite(i);\n    });\n}\n\n", "  var filtered = [];\n  for(var\
    \ i = 0, len = values.length; i < len; i++){\n    if(typeof values[i] !== 'number'){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n", "    var\
    \ value = [], value;\n    for(var i=0, len = values.length; i < len; i++){\n \
    \       value = values[i];\n        if(isInteger(value)){\n            value.push(i);\n\
    \        }\n    }\n    return value;\n}\n", "  return _.compact(_.map(values,\
    \ function(value){\n    if(_.isNumber(value) && isFinite(value)) return value;\n\
    \  }));\n}\n", "  return values.filter(function(v){\n    return v===Math.trunc(v);\n\
    \  });\n}\n", "    return values.filter(function(val){\n        return Number(val)\
    \ == val;\n    });\n}\n", "    return _.filter(_.map(values, _.identity), _.identity).filter(_.identity);\n\
    }\n\n", "  return values.filter(val => val % 1 === 0)\n}\n", "    var filtered\
    \ = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i]\
    \ === 'number'){\n            filtered.push(values[i]);\n        }\n    }\n  \
    \  return filtered;\n}\n", "\tvar out = [];\n\tvalues.forEach(function(value){\n\
    \t\tif(isInteger(value)){\n\t\t\tout.push(value);\n\t\t}\n\t});\n\treturn out;\n\
    }\n", "  return values.filter(function(value){\n    return !isNaN(value)\n  })\n\
    }\n},{}],10:[function(require,module,exports){\nvar filter = require('../util/filter');\n\
    var filter_integers = require('./filter_integers');\nvar filter_floats = require('./filter_floats');\n\
    var filter_booleans = require('./filter_booleans');\nvar filter_objects = require('./filter_objects');\n\
    var filter_strings = require('./filter_strings');\nvar filter_colors = require('./filter_colors');\n\
    var filter_none = require('./filter_none');\n\nmodule.exports = function filterAll(values){\n\
    \  var filtered = values([]);\n  for(var i in values){\n    filtered = filter_strings(filtered,\
    \ filter_integers(values[i]));\n    filtered = filter(filtered, filter_floats(values[i]));\n\
    \    filtered = filter_booleans(filtered);\n    filtered = filter_objects(filtered,\
    \ filter(values[i]));\n    filtered = filter_colors(filtered, values[i]);\n  \
    \  filtered = filter_none(filtered, values[i]);\n  }\n  return filtered;\n};\n\
    },{\"../util/filter\":12,\"./filter_integers\":8,\"./filter_floats\":9,\"./filter_booleans\"\
    :11,\"./filter_objects\":12,\"./filter_strings\":13,\"./filter_colors\":14,\"\
    ./filter_none\":15}],11:[function(require,module,exports){\nvar filter = require('../util/filter');\n\
    var filter_integers = require('./filter_integers');\nvar filter_floats = require('./filter_floats');\n\
    var filter_booleans = require('./filter_booleans');\nvar filter_objects = require('./filter_objects');\n\
    \nmodule.exports = function filter_booleans(filtered){\n  return filter(filtered,\
    \ filter_booleans);\n};\n},{\"../util/filter\":12,\"./filter_integers\":8,\"./filter_floats\"\
    :9,\"./filter_booleans\":11}],12:[function(require,module,exports){\nvar filter\
    \ = require('./filter');\nvar values = require('../values');\n\nmodule.exports\
    \ = function filter(array, test){\n  var result = [];\n  var filtered = values(array);\n\
    \  for(var i in filtered){\n    if(test(filtered[i], i)){\n      result.push(filtered[i]);\n\
    \    }\n  }\n  return result;\n};\n},{\"../values\":16,\"./filter\":13}],13:[function(require,module,exports){",
  "  var n = [];\n  var v = [];\n  for(var i = 0; i < values.length; i++){\n    if(typeof\
    \ values[i] === 'number'){\n      n.push(values[i]);\n    }else{\n      v.push(values[i]);\n\
    \    }\n  }\n  if(n.length > 0){\n    n = n.sort(function(a, b){return a - b;});\n\
    \    return n;\n  }else{\n    return v;\n  }\n}\n", "\tvar int_values = values.filter(isIntegral);\n\
    \treturn int_values;\n}\n", "  return values.filter(function(v){\n    return isInteger(v);\n\
    \  });\n}\n", "    var filtered = []\n    for(var i=0; i < values.length; i++){\n\
    \        if(!isNaN(values[i]) && parseInt(values[i], 10) == values[i]){\n    \
    \        filtered.push(values[i])\n        }\n    }\n    return filtered\n}\n",
  "  return values.filter(function(i){\n    return types.is_integer(i);\n  });\n}\n",
  "  var filtered = [];\n  for (var i = 0; i < values.length; i++){\n    if (!isNaN(values[i])){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n", "  if(typeof(values)\
    \ === 'undefined') return []\n  var filtered = []\n  for(var i = 0; i < values.length;\
    \ i++){\n    if(typeof values[i] === 'number') filtered.push(values[i])\n  }\n\
    \  return filtered\n}\n", "  values = values.map(function(x){\n    if (typeof\
    \ x === 'number'){\n      return x;\n    }\n  });\n  return values;\n}\n", " \
    \ return filter(values, is_integer)\n}\n", "  var filtered = [];\n  _.each(values,\
    \ function(value){\n    if(isNumber(value)){\n      filtered.push(value);\n  \
    \  }\n  });\n  return filtered;\n}\n", "  return values.filter(function(value){\n\
    \    return typeof value == 'number' &&\n      isFinite(value) &&\n      Math.floor(value)\
    \ === value\n  })\n}\n", "    return values.filter(function (val){\n        return\
    \ (typeof val === 'number' && isInteger(val))\n    });\n}\n", "    return values.filter(function(val){\n\
    \        return typeof val === 'number' && isFinite(val);\n    });\n}\n", "  var\
    \ filtered = [];\n  for(var i = 0; i < values.length; i++){\n    if(is_integer(values[i])){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n", "    values\
    \ = values.filter(function(i){\n        return typeof i === 'number' && !isNaN(i)\n\
    \    })\n    return values\n}\n", "  var filtered = [];\n  for (var i = 0; i <\
    \ values.length; i++){\n    if (values[i].constructor === Number)\n      filtered.push(values[i]);\n\
    \  }\n  return filtered;\n}\n", "\tvar rv = [];\n\tfor(var i = 0, len = values.length;\
    \ i < len; i++){\n\t\tif(!isInt(values[i])){\n\t\t\trv[rv.length] = values[i];\n\
    \t\t}\n\t}\n\treturn rv;\n}\n", "  var filtered = [];\n  for(var i = 0; i < values.length;\
    \ i++){\n    if(typeof values[i] === 'number'){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "  return values.filter(function(n){\n\
    \    return typeof n === 'number' && !isNaN(n);\n  });\n}\nmodule.exports = filter_integers;\n\
    \n},{}],30:[function(require,module,exports){", "  return values.filter(v => typeof(v)\
    \ === 'number' && isInteger(v));\n}\n", "    return values.filter(function(value){\n\
    \        return typeof value == 'number' && !isNaN(value);\n    });\n}\n", "\t\
    var rv = [];\n\tfor (var i = 0, len = values.length; i < len; i++){\n\t\tvar type\
    \ = typeof values[i];\n\t\tif (type === 'string' || type === 'number'){\n\t\t\t\
    rv.push(values[i]);\n\t\t}\n\t}\n\treturn rv;\n}\n\t", "    var filtered = [];\n\
    \    for (var i = 0; i < values.length; i++){\n        if (values[i] === Math.floor(values[i])){\n\
    \            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "  var filtered = [];\n  for(var i in values){\n    if(typeof values[i]\
    \ === \"number\" && !isNaN(values[i])){\n      filtered.push(values[i]);\n   \
    \ }\n  }\n  return filtered;\n}\n", "  return values.filter(function (value) {\n\
    \    return isInteger(value);\n  });\n}\n", "  return values.filter(function(val){\n\
    \    var integer = parseInt(val);\n    return !isNaN(integer);\n  });\n}\n</code>\n\
    <|/ a dscore=3 tags=javascript,function,arrays,object |>\n<| a dscore=2 |>\nHere's\
    \ a solution using Array.filter, which creates a new array based on the old one.\
    \ \nThe callback function takes two parameters, the first one is the item and\
    \ the second one is an index.\nThe index is 0 based, meaning the first item is\
    \ at index 0.\nThis solution will keep all items that don't satisfy the callback,\
    \ but it will not modify the original array.\n\n<code>\nconst myArray = [{\n \
    \ field1: 'abc',\n  field2: 'def',\n  field3: 'ghi'\n}, {\n  field1: 'abc',\n\
    \  field2: 'def',\n  field3: 'def',\n}, {\n  field1: 'abc',\n  field2: 'ghi',\n\
    \  field3: 'def'\n}, {\n  field1: 'abc',\n  field2: 'ghi',\n  field3: 'def'\n\
    }];\n\nconst myCallback = function(item, index) {\n  return item.field2 !== 'def';\n\
    }\n\nconst filtered = myArray.filter(myCallback);\n", "  return values.filter(function(value){\
    \ \n    return !isNaN(value) && \n    (!isFinite(value) || value % 1 === 0) \n\
    \  })\n}\n", "  return values.filter(function(item){\n    return item instanceof\
    \ Number;\n  });\n}\n", "  return values.filter(val => {\n    if(typeof val ==\
    \ \"string\"){\n      return val.match(/^[+-]?[0-9]+$/);\n    }else{\n      return\
    \ Number.isInteger(val);\n    }\n  })\n}\n", "    var filtered = [];\n    for(var\
    \ i = 0; i < values.length; i++){\n        if(!isNaN(values[i]) && parseInt(values[i],\
    \ 10) == values[i]){\n            filtered.push(values[i]);\n        }\n    }\n\
    \    return filtered;\n}\n", "    var filtered = [];\n\n    for (var i = 0; i\
    \ < values.length; i++){\n        var value = values[i];\n        if (typeof(value)\
    \ == 'number' && isInt(value)){\n            filtered.push(value);\n        }\n\
    \    }\n\n    return filtered;\n}\n", "    return values.filter(function(v){\n\
    \        return !isNaN(v);\n    });\n}\n", "\treturn values.filter(function(value){\n\
    \t\treturn typeof(value)==='number'&&isFinite(value)&&value%1===0;\n\t});\n}\n",
  "\tlet filtered_values = []\n\tfor(let val of values){\n\t\tif(typeof(val) == 'number'){\n\
    \t\t\tfiltered_values.push(val)\n\t\t}\n\t}\n\treturn filtered_values\n}\n", " \
    \ var filtered = [];\n  for(var i = 0; i < values.length; i++){\n    if(typeof\
    \ values[i] === 'number'){\n      filtered.push(values[i]);\n    }\n  }\n  return\
    \ filtered;\n}\n", "  var filtered = [];\n  for(var i = 0; i < values.length;\
    \ i++){\n    if(typeof values[i] === 'number'){\n      filtered.push(values[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "\tvar filtered_values = [];\n\tfor(var\
    \ i in values){\n\t\tif(values[i].constructor == Number) filtered_values.push(values[i]);\n\
    \t}\n\treturn filtered_values;\n}\n", "  var out = [];\n  for(var i = 0; i < values.length;\
    \ i++){\n    if(typeof(values[i]) !== 'number'){\n      out.push(values[i]);\n\
    \    }\n  }\n  return out;\n}\n", "    return values.filter(function(i){\n   \
    \     return typeof(i) == 'number';\n    });\n}\n", "  const int_values = values.filter(val\
    \ => Number.isInteger(val));\n  if(int_values.length>0){\n    return int_values\n\
    \  }\n}\n", "  var filtered = [];\n  for(var i = 0, len = values.length; i < len;\
    \ i++){\n    if(typeof values[i] === \"number\")\n      filtered.push(values[i]);\n\
    \  }\n  return filtered;\n}\n\n", "    return values.filter(function(val){\n \
    \     return typeof val === 'number';\n    });\n}\n", "    var filtered = [];\n\
    \    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] ===\
    \ 'number'){\n            filtered.push(values[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "  return values.filter(function(v){\n    return typeof v ===\
    \ 'number' && !isNaN(v);\n  });\n}\n", "    var newValues = []\n    for(var i=0;i<values.length;i++){\n\
    \        if(typeof(values[i])===\"number\")\n            newValues.push(values[i])\n\
    \    }\n    return newValues\n}\n", "    var filtered = [];\n    for(var i = 0,\
    \ len = values.length; i < len; i++){\n        var val = values[i];\n        if(typeof\
    \ val === 'number'){\n            filtered.push(val);\n        }\n    }\n    return\
    \ filtered;\n}\n\n},{\"./utils\":22}],17:[function(require,module,exports){\n\
    module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n",
  "  return values.filter(function (v){\n    return typeof v === 'number' && isFinite(v)\n\
    \  });\n}\n", "    return _.filter(values, function(num){\n        return _.isInteger(num);\n\
    \    });\n}\n\n", "  var integers = [];\n  for(var i = 0; i < values.length; i++){\n\
    \    var value = values[i];\n    if(typeof value == 'number'){\n      integers.push(value);\n\
    \    } else if(isIterable(value)){\n      integers = integers.concat(filter_integers(value));\n\
    \    } else {\n      integers.push(parseInt(value));\n    }\n  }\n  return integers;\n\
    }\n", "    var res = [];\n    values.forEach(function(value) {\n      if(typeof\
    \ value === 'number' && value % 1 === 0){\n        res.push(value);\n      }\n\
    \    });\n    return res;\n}\n", "\tvar rv = []\n\tfor(var i=0; i<values.length;\
    \ i++){\n\t\tif(!isInteger(values[i])){\n\t\t\trv[rv.length] = values[i]\n\t\t\
    }\n\t}\n\treturn rv\n}\n", "  values = values.filter(function(item){\n    if(item.constructor\
    \ === Number || item.constructor === String){\n      return item % 1 === 0;\n\
    \    }\n    return item;\n  });\n  return values;\n}\n},{\"../util\":36}],20:[function(_dereq_,module,exports){\n\
    \"use strict\";\n\nvar util = _dereq_('../util');\n", "    return _.filter(_.map(values,\
    \ function(x){\n        if ((_.isNumber(x) && (x % 1 === 0) && (x !== 0)) || (_.isString(x)\
    \ && (x === ''))) {\n            return x;\n        }\n    }));\n}\n", "  return\
    \ _.filter(values, Number.isInteger)\n}\n", "  return values.filter(function(x){\
    \ return isFinite(x) && parseInt(x) === x; });\n}\n", "  return values.filter(function(value){\n\
    \    return Number.isInteger(value);\n  });\n}\n\n", "  return values.filter(function(v){\n\
    \    return (typeof v === \"number\");\n  });\n}\n", "  return values.filter(value\
    \ => isInteger(value))\n}\n", "  return values.filter(function(value){\n    return\
    \ Number.isInteger(value);\n  });\n}\n\n", "\treturn filter(is_integer, values);\n\
    }", "    return values.filter(function(item){\n        return isInteger(item);\n\
    \    });\n}\n", "    return values.filter(function (item){\n        return typeof\
    \ item === 'number' && !isNaN(item);\n    });\n}\n", "    return values.filter(is_integer)\n\
    }\n", "  return values.filter(function (value) {\n    return typeof value ===\
    \ 'number' && !isNaN(value) && isFinite(value);\n  });\n}\n", "  return values.filter(\
    \ isInteger );\n}\n", "    return values.filter(function(val){\n        return\
    \ typeof val === 'number' && isFinite(val);\n    });\n}\n", "  return values.filter(function(value){\n\
    \    return isNumber(value) && value%1 === 0;\n  });\n}\n},{\"./is-number\":8}],8:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nmodule.exports = function isObject(value)\
    \ {\n  return !!(value && isObject(value));\n};\n},{\"./is-object\":9}],9:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nmodule.exports = function isObjectLike(value)\
    \ {\n  return !!(value && typeof value === 'object');\n};\n},{\"./is-object\"\
    :9}],10:[function(require,module,exports){\nvar isLength = require('./is-length');\n\
    \nmodule.exports = function isStringLike(value) {\n  return isLength(value.length);\n\
    };\n},{\"./is-length\":11}],11:[function(require,module,exports){\nmodule.exports\
    \ = function isLength(value) {\n  return typeof value == 'number' && value > -1\
    \ && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n};\n\n},{}],12:[function(require,module,exports){\n\
    var each = require('./each');\nvar some = require('./some');\nvar isObject = require('./is-object');\n\
    var contains = require('./contains');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\
    \nmodule.exports = {\n  each: each,\n  some: some,\n  isObject: isObject,\n  contains:\
    \ contains,\n  hasOwn: hasOwn\n};\n\n},{\"./each\":4,\"./is-object\":9,\"./contains\"\
    :10,\"./some\":13}],13:[function(require,module,exports){\nvar isArray = require('./is-array');\n\
    \nmodule.exports = function isArray(arg) {\n  return isArray(arg) || (arg && typeof\
    \ arg.length === 'number');\n};\n},{\"./is-array\":12}],14:[function(require,module,exports){\n\
    var isFunction = require('./is-function');\n\nmodule.exports = function isFunction(value)\
    \ {\n  return typeof value == 'function' || false;\n};\n},{\"./is-function\":15}],15:[function(require,module,exports){\n\
    module.exports = function isFunctional(value) {\n  return typeof value != 'undefined'\
    \ && value.length != undefined;\n};\n},{}],16:[function(require,module,exports){\n\
    var isObject = require('./is-object');\n\nvar is = isObject({});\n\nmodule.exports\
    \ = function keys(obj) {\n  if (!isObject(obj)) return [];\n  var keys = [];\n\
    \  for (var key in obj) if (has(obj, key)) keys.push(key);\n  return keys;\n};\n\
    \nvar has = require('./has');\n},{\"./is-object\":9,\"./has\":17}],17:[function(require,module,exports){\n\
    module.exports = function has(obj, key) {\n  return obj != null && Object.prototype.hasOwnProperty.call(obj,\
    \ key);\n};\n},{}],18:[", "  return values.filter(val => {\n    return typeof\
    \ val === 'number' && !Number.isNaN(val)\n  });\n}\n", "    var result = [];\n\
    \    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] ===\
    \ \"number\"){\n            result.push(values[i]);\n        }\n    }\n    return\
    \ result;\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
