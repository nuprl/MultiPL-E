name: HumanEval_145_order_by_points
language: js
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11,\
  \ 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423,\
  \ 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let sorted_nums = nums.sort(function (a,b){\n        let a_str\
    \ = a.toString(), b_str = b.toString();\n        let sumA = 0, sumB = 0;\n   \
    \     for(let i = 0; i < a_str.length; i++){\n            sumA += parseInt(a_str.charAt(i));\n\
    \        }\n        for(let i = 0; i < b_str.length; i++){\n            sumB +=\
    \ parseInt(b_str.charAt(i));\n        }\n        if(sumA < sumB){\n          \
    \  return -1;\n        }else if(sumA > sumB){\n            return 1;\n       \
    \ }else{\n            return 0;\n        }\n    });\n    return sorted_nums;\n\
    }\n", "   //Write your code here.\n   let arr=[];\n   let map={};\n   for (let\
    \ i=0;i<nums.length;i++){\n      let num=nums[i];\n      let mapnum=map[num];\n\
    \      if (mapnum==null){\n         mapnum={value:num,index:i};\n         arr[arr.length]=mapnum;\n\
    \      }else{\n         let mapnum=map[num];\n         mapnum.value+=num;\n  \
    \       map[num]=mapnum;\n      }\n   }\n   return arr.sort((a,b)=>a.value-b);\n\
    }\nvar nums=[];\nnums.push(-12);\nnums.push(-1);\nnums.push(-11);\nnums.push(1);\n\
    nums.push(11);\nnums.push(12);", "\tlet numsIndex = 0;\n\tlet sumOfNums = 0;\n\
    \n\twhile (numsIndex < nums.length){\n\t\tconst currentSumOfNums = nums.reduce((prev,\
    \ curr) => {\n\t\t\treturn prev + curr;\n\t\t}, 0);\n\t\tif (currentSumOfNums\
    \ > sumOfNums){\n\t\t\tsumOfNums = currentSumOfNums;\n\t\t}\n\t\tnumsIndex++;\n\
    \t}\n\n\tconst result = [];\n\tlet currentSumOfNums = sumOfNums;\n\tlet currentIndex\
    \ = -1;\n\n\twhile (currentIndex < nums.length){\n\t\tcurrentSumOfNums = nums.reduce((prev,\
    \ curr) => {\n\t\t\treturn prev + curr;\n\t\t}, 0);\n\t\tif (currentSumOfNums\
    \ <= currentSumOfNums){\n\t\t\tconst value = nums[currentIndex];\n\t\t\tresult.push(value);\n\
    \t\t\tcurrentSumOfNums += value;\n\t\t\tcurrentIndex++;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "    var new_nums = [];\n    var sum = 0;\n    for(var i=0;i<nums.length;i++){\n\
    \        sum += nums[i];\n        if(sum > 0){\n            new_nums.push(sum);\n\
    \            sum = 0;\n        }\n    }\n    return new_nums;\n}", "  return nums.sort(function(a,\
    \ b){\n    var digits1 = get_digits(a),\n        digits2 = get_digits(b);\n  \
    \  \n    if(digits1 == digits2){\n      return a.index - b.index;\n    }\n   \
    \ \n    return digits1 - digits2\n  });\n}\n", "  nums.sort(function(a,b){\n \
    \   return (a+b) - (b*a);\n  });\n  return nums;\n}\n", "\tvar a = nums.sort(function(a,\
    \ b){return a - b;});\n\tvar result = [];\n\tvar len = a.length;\n\tfor (var i\
    \ = 0; i < len; i++){\n\t\tif (result[i]===undefined){\n\t\t\tresult[i] = a[a.length\
    \ - 1 - i];\n\t\t}\n\t\telse{\n\t\t\tresult[i] = result[i] < a[a.length - 1 -\
    \ i] ? result[i] + a[a.length - 1 - i] : result[i];\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    nums.sort(function(a, b){\n        let a_sum = Math.floor(a/10);\n\
    \        let b_sum = Math.floor(b/10);\n        if(a_sum != b_sum){\n        \
    \    return b_sum - a_sum;\n        }\n        return a - b;\n    });\n    return\
    \ nums;\n}\n", "\tnums.sort();\n\tfor(var i = 0; i < nums.length; i++){\n\t\t\
    var sum = 0;\n\t\tfor(var j = 0; j < nums.length; j++){\n\t\t\tif(i != j && nums[j]\
    \ < nums[i]){\n\t\t\t\tsum += nums[j];\n\t\t\t}\n\t\t}\n\t\tif(sum > 0){\n\t\t\
    \tnums.splice(i, 1, sum);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn nums;\n}\n", "   \
    \ let sorted = nums.slice().sort((a,b)=>(a+b).toString(10).split('').sort((a,b)=>a-b).join(''))\n\
    \    if(sorted.length === 0) return sorted\n    let result = [sorted.shift()]\n\
    \    for(let i=0;i<nums.length;i++){\n        if(result[0] < nums[i]) result.unshift(nums[i])\n\
    \        else result.push(nums[i])\n    }\n    return result\n}\n", "    let sorted\
    \ = 0;\n    const newArr = nums.map(function(num){\n        while(num > 0){\n\
    \            sorted += Math.floor(num / 10);\n            num = num % 10;\n  \
    \      }\n        return sorted;\n    });\n    \n    return newArr.sort();\n}",
  "    var res = [];\n    var digitSums = {}; // key: sum, value: digit index\n  \
    \  nums.forEach(function(n){\n        var digits = Math.floor(Math.log(n) / Math.log(10));\n\
    \        var sum = 0;\n        for(var i = digits - 1; i >= 0; i--){\n       \
    \     sum += n % 10;\n            n = Math.floor(n/10);\n        }\n        if(!digitSums[sum])\
    \ digitSums[sum] = [];\n        digitSums[sum].push(n);\n    });\n    for(var\
    \ sum in digitSums){\n        var ordered = [];\n        var index = 0;\n    \
    \    for(var i = 0; i < digitSums[sum].length; i++){\n            index = digitSums[sum][i]\
    \ < nums.length ? digitSums[sum][i] : nums.length - 1;\n            ordered.push(nums[index]);\n\
    \        }\n        res.push(ordered.reverse());\n    }\n    return res;\n}\n\
    </textarea></div>\n\n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"text/x-csrc\",\n        theme: \"neat\"\n      });\n    </script>\n\n\
    \    <p><strong>MIME types defined:</strong> <code>text/x-csrc</code>.</p>\n\n\
    \    <p>Development of the CodeMirror <a href=\"codemirror.net/\">CodeMirror</a>\n\
    \    project, <a href=\"http://www.marijnhaverbeke.nl/codemirror\">version 3</a>\n\
    \    and <a href=\"http://www.eclipse.org/org/documents/ed2/index.html\">documentation,\
    \ with a\n    <a href=\"http://www.eclipse.org/org/documents/ed2/reference\">reference</a>\n\
    \    to the Official C/C++ User's Manual of Style </a>\n    by Christopher Kormann,\
    \ used for\n    the development of The CodeMirror\n    <a href=\"http://www.marijnhaverbeke.nl/info/\"\
    >CodeMirror</a>\n    editor.\n    \n    <p>CodeMirror adds two more project members\
    \ to the\n    <a href=\"codemirror.net/stat.html\">statistics addon</a>:</p>\n\
    \    <dl>\n      <dt><code><strong>bigStats</strong>: boolean</code></dt>\n  \
    \    <dd>When activated, an addon can provide the same information\n      on chunk\
    \ and line basis.</dd>\n\n      <dt><code><strong>extraKeys</strong>: object</code></dt>\n\
    \      <dd>Can be used to specify extra key bindings for the editor,\n      alongside\
    \ the ones defined\n      by <a href=\"manual.html#addKeyMap\"><code>addKeyMap</code></a>.</dd>\n\
    \n      <dt><code><strong>scrollPastEnd</strong>: boolean</code></dt>\n      <dd>When\
    \ given, with the <code>CodeMirror-focused</code>\n      class applied, whenever\
    \ scrollbars are drawn on the\n      ", "\tvar sum=0, tmp;\n\tvar num;\n\tfor(var\
    \ i=0;i<nums.length;i++){\n\t\tnum=nums[i];\n\t\tsum+=num*num;\n\t}\n\twhile(nums.length>1){\n\
    \t\tnum=nums[nums.length-1];\n\t\tsum+=num*num;\n\t\tnums.pop();\n\t}\n\treturn\
    \ [num];\n}", "    var sorted = [];\n    var hash = {};\n    var sum = 0;\n  \
    \  for (var i = nums.length - 1; i >= 0; i--) {\n        var num = nums[i];\n\
    \        sum += num;\n        var digit = num.toString().replace(/[^0-9]/g, \"\
    \");\n        if (!hash[digit]) {\n            hash[digit] = num;\n          \
    \  sorted.push(num);\n        }\n    }\n    return sorted;\n}\n", "  var order\
    \ = [];\n  for (var i = 0; i < nums.length; i++){\n    var cur_nums = nums.slice(0);\n\
    \    var cur_sum = 0;\n    for (var j = 0; j < cur_nums.length; j++){\n      cur_sum\
    \ += parseInt(cur_nums[j]);\n    }\n    order.push(cur_sum);\n  }\n  order = order.sort();\n\
    \  for (var j = 0; j < order.length; j++){\n    if (order[j] != 0){\n      order[j]\
    \ *= -1;\n    }\n  }\n  return order;\n}\n", "  var arr = [];\n  var sum = 0;\n\
    \  for(var i = 0; i < nums.length; i++){\n    var digit = nums[i];\n    sum +=\
    \ digit;\n    arr.push(digit);\n  }\n  return arr.sort((a, b) => sum - a < sum\
    \ - b ? -1 : 1);\n}\n", "  var ordered = [];\n  for (var i = 0; i < nums.length;\
    \ i++) {\n    var num = nums[i];\n    var digits = Math.floor(Math.log10(num));\n\
    \    var index = (digits <= 1) ? digits: digits-2;\n    ordered.push(nums[index]);\n\
    \  }\n  return ordered;\n}\n", "  // Write your code here\n}\n", "  var sorted=[];\n\
    \  for(var i=0;i<nums.length;i++)\n  {\n    var total=0;\n    for(var j=0;j<nums[i].length;j++)\n\
    \    {\n      total+=nums[i][j];\n    }\n    sorted.push([total,i]);\n  }\n  sorted.sort();\n\
    \  for(var i=0;i<nums.length;i++)\n  {\n    sorted[i][1]=nums[i];\n  }\n  return\
    \ sorted;\n}", "  let points = new Array();\n  let point = new Array();\n  let\
    \ index = 0;\n  let sum = 0;\n  \n  // Loop through each number in nums\n  for(let\
    \ i = 0; i < nums.length; i++){\n    // If the number has a digit, add it to sum\n\
    \    if(nums[i] >= 0){\n      sum += nums[i];\n      // Otherwise, add its original\
    \ index into sum\n    } else {\n      sum += nums[i] * Math.pow(10, nums.length\
    \ - i - 1);\n      points.push(index + 1);\n    }\n    \n    // Check if sum is\
    \ larger than current index\n    if(sum > index){\n      \n      // If the sum\
    \ is larger than the current index, then we have\n      // found a new largest\
    \ sum, so store that index\n      index = sum;\n    }\n  }\n  \n  // Return the\
    \ points in order\n  return points;\n}\n", "  var len=nums.length,num;\n  var\
    \ arr=new Array(len);\n  for(var i=0;i<len;i++){\n    num=\" \"+nums[i];\n   \
    \ num=parseInt(num);\n    arr[i]=num;\n  }\n  arr.sort(function(a,b){\n    return\
    \  b-a;\n  });\n  return arr;\n}", "  var newList = [];\n  for(var i = 0; i <\
    \ nums.length; i++){\n    var index = nums[i].toString().indexOf(\"\");\n    var\
    \ num = (index % 2 == 0) ? nums[i] - 1 : nums[i];\n    var n = nums[i].toString();\n\
    \    newList.push(num);\n  }\n  var list = new Set(newList);\n  newList = [];\n\
    \  for(i = 0; i < list.size; i++){\n    var index = nums[i].toString().indexOf(\"\
    \");\n    var num = (index % 2 == 0) ? nums[i] - 1 : nums[i];\n    var n = nums[i].toString();\n\
    \    newList.push(num);\n  }\n  newList.sort();\n  return newList;\n}", "  let\
    \ ans = [], sum = 0, n = nums.length;\n  for(let i = 0; i < n; i++){\n    let\
    \ item = nums[i];\n    sum += item;\n    ans.push(item);\n  }\n  for(let i = 0;\
    \ i < n; i++){\n    let item = nums[i];\n    if (sum > item || sum === item){\n\
    \      let j = i;\n      let x = sum - item;\n      while(j <= n && nums[j] >\
    \ x){\n        j++;\n      }\n      if (j === i){\n        ans.push(x);\n    \
    \  } else {\n        ans.push([nums[i], nums[j]]);\n      }\n      sum -= item;\n\
    \    } else {\n      ans.push(item);\n    }\n  }\n  return ans;\n}\n", "  var\
    \ sortable = [];\n  var index = 0;\n  for(var i=0; i<nums.length; i++){\n    var\
    \ digits = nums[i].digits;\n    var n = parseInt(digits);\n    if(!sortable[index]){\n\
    \      sortable[index] = n;\n      index = index+1;\n    }else{\n      var prev\
    \ = sortable[index-1];\n      sortable[index - 1] = n;\n      if(prev != n){\n\
    \        sortable[index] = prev;\n        index = index-1;\n      }\n    }\n \
    \ }\n  return sortable;\n}\n", "  return nums.sort((a, b) => {\n    const sumA\
    \ = addPoints(a);\n    const sumB = addPoints(b);\n    return sumA < sumB ? 1\
    \ : sumA > sumB ? -1 : sumA < 0 ? -1 : 1;\n  });\n}\n", "    nums.sort(function(a,b){\n\
    \        return sum_of_digits(a) - sum_of_digits(b);\n    });\n    return nums;\n\
    }\n", "  if(nums.length == 0) return nums\n  nums.sort(function(a,b){\n    var\
    \ sumA = sumByDigit(a,nums)\n    var sumB = sumByDigit(b,nums)\n    if(sumA ==\
    \ sumB){\n      return nums.indexOf(a) - nums.indexOf(b)\n    }\n    return sumB\
    \ - sumA\n  })\n  return nums\n}\n", "    var sorted_nums = [];\n    var min_sum\
    \ = null;\n    var min_pos = null;\n    var i, pos, sum_of_digits = 0, sum = 0,\
    \ digit, num;\n    for(i = 0; i < nums.length; i++){\n        digit = nums[i];\n\
    \        pos = 0;\n        while(sum_of_digits + digit >= 0){\n            sum_of_digits\
    \ += digit;\n            pos += 1;\n        }\n        if(sum_of_digits < 0){\n\
    \            sum_of_digits += 10;\n            pos = 0;\n        }\n        sum\
    \ = 0;\n        while(pos > 0){\n            num = sum_of_digits % 10;\n     \
    \       sum = sum + num;\n            sum_of_digits = sum_of_digits / 10;\n  \
    \          pos -= 1;\n        }\n        sum = sum * 9;\n        if(min_sum ==\
    \ null || sum < min_sum){\n            min_sum = sum;\n            min_pos = i;\n\
    \        }\n    }\n    return sorted_nums.reverse();\n}\n", "  let nums = nums.sort((a,b)\
    \ => Number(a.slice(1)) + Number(b.slice(1)))\n  return nums\n}", "\tvar arr =\
    \ [];\n\tvar len = nums.length;\n\tvar max = 0;\n\tfor (var i=0; i < len; i++)\
    \ {\n\t\tvar n = nums[i];\n\t\tif (n > max) {\n\t\t\tmax = n;\n\t\t}\n\t\telse\
    \ {\n\t\t\tarr.push(n);\n\t\t}\n\t}\n\t\n\treturn arr;\n}\n", "    var n = nums.length;\n\
    \    for(var i = n - 1;i>= 0;i--){\n        var num1 = nums[i];\n        var num2\
    \ = nums[n - i - 1];\n        if(num1 > num2){\n            var temp = num1;\n\
    \            num1 = num2;\n            num2 = temp;\n        }\n        var sum1\
    \ = 0;\n        var sum2 = 0;\n        for(var j = i;j>=0;j--){\n            sum1\
    \ += nums[j];\n            sum2 += nums[j]*nums[j];\n        }\n        if(sum1\
    \ > sum2){\n            var temp = sum1;\n            sum1 = sum2;\n         \
    \   sum2 = temp;\n        }\n        var temp = sum1;\n        sum1 = sum2;\n\
    \        sum2 = temp;\n        var num3 = sum1 - (sum2*sum2 - (sum1^sum2)) / (sum2\
    \ - sum1);\n        var temp1 = num;\n        nums[n - i] = num3;\n        nums[i]\
    \ = temp1;\n    }\n    return nums;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I liked this answer the best because it was very concise and easy to understand.\
    \ Though I wouldn't call this \"the simplest solution\", it's a great example\
    \ of what one could do with Javascript Arrays.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to fix a bug in the second function. Thanks for pointing it out. Also,\
    \ the first function is just a short version of my second function.\n<|/ c |>\n\
    <| c |>\nNice use of recursion! Just a question: why did you use nums[i] - nums[0]\
    \ instead of Math.sign(nums[i] + nums[0])?\n<|/ c |>\n<| c |>\nBecause Math.sign\
    \ only takes one parameter, and it doesn't work on negative numbers so I used\
    \ Math.sign(nums[i] + nums[0]). It should probably be Math.sign(Math.abs(nums[i])\
    \ + Math.abs(nums[0]))\n<|/ c |>\n<| c |>\nThis implementation is wrong. I'm trying\
    \ my best to figure out why.\n<|/ c |>\n<| a tags=javascript,sorting dscore=2\
    \ |>\nThis question is a little bit old, but there is a more concise and efficient\
    \ solution to this problem using a variation on the bubble sort algorithm.\n<code>\n\
    var sort = function(nums) {\n    var swap = function(i, j){\n        var tmp =\
    \ nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    };\n    var\
    \ n = nums.length;\n    var i = 0;\n    while (i < n-1) {\n        var swapped\
    \ = false;\n        for (var j = 0; j < n - i - 1; j++) {\n            if (nums[j]\
    \ > nums[j+1]) {\n                swap(j, ", "  let result = [];\n  nums.map(x\
    \ => {\n    let sum = 0;\n    while (x > 0) {\n      sum += x % 10;\n      x /=\
    \ 10;\n    }\n    if (sum > 0) {\n      result.push(x);\n    }\n  });\n  return\
    \ result.sort((a, b) => a - b);\n}\n", "    var i, sum = 0, max=0, temp;\n   \
    \ var len = nums.length;\n    var results = [];\n    for(i=0;i<len;i++){\n   \
    \     temp = nums[i];\n        if(temp > max){\n            max = temp;\n    \
    \    }\n        if(temp + sum > sum){\n            sum = sum + temp;\n       \
    \ }\n        results.push(temp);\n    }\n    for(i=0;i<len;i++){\n        results[i]\
    \ = results[i] - max + sum;\n    }\n    return results;\n}\n", "    nums.sort(function(a,\
    \ b){\n        return parseInt(a) - parseInt(b);\n    });\n    return nums;\n\
    }\n", "    let sortArr = [], sumArr = [], numArr = [];\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        sumArr[i] = nums[i].toString();\n        sumArr[i]\
    \ = sumArr[i].replace(/^(-?\\d+)$/, '$1');\n        numArr[i] = parseInt(sumArr[i],\
    \ 10);\n    }\n    numArr.sort();\n    for(let i = 0; i < numArr.length; i++){\n\
    \        sortArr[i] = numArr[i];\n    }\n    return sortArr;\n}\n", "    nums\
    \ = nums.sort(function (a, b){\n        return a[0] - b[0];\n    });\n    var\
    \ result = [];\n    var flag = false;\n    var cur = 0;\n    for(var i = 0; i\
    \ < nums.length; i++){\n        cur += nums[i][1];\n        if(cur > 0){\n   \
    \         result.push([cur, i, nums[i]]);\n        }else{\n            flag =\
    \ true;\n        }\n    }\n    if(flag){\n        for(var i = 0; i < result.length;\
    \ i++){\n            num = result[i][1];\n            tmp = [];\n            for(var\
    \ j = 0, len = num.length; j < len; j++){\n                tmp[num[j].order] =\
    \ num[j];\n            }\n            tmp.sort(function (a, b){\n            \
    \    return b[0] - a[0];\n            });\n            result[i] = tmp;\n    \
    \    }\n        return result;\n    }else{\n        return nums;\n    }\n}\n",
  "\tvar len = nums.length;\n\tif (len == 0) return [];\n\n\tvar res = [];\n\tvar\
    \ maxLen = 0;\n\n\tfor (var i = 0; i < len; i++){\n\t\tvar num = nums[i];\n\t\t\
    var index = sum_to_digits(num);\n\t\tvar digit = num % Math.pow(10, index);\n\t\
    \tres.push(num);\n\t\tmaxLen = Math.max(maxLen, index);\n\t}\n\n\tres = res.sort(sort_by_digits(maxLen));\n\
    \t\n\treturn res;\n}\n", "  nums = nums.slice();\n  nums.sort(function(a, b) {\n\
    \    return sumDigits(a) - sumDigits(b);\n  });\n  return nums;\n}", "  var sum\
    \ = 0;\n  var list = [];\n  var len = nums.length;\n  for(var i = 0; i<len; i++){\n\
    \    sum = sum + nums[i]%10;\n    list.push(nums[i]);\n  }\n  for(var i = len-1;\
    \ i>0; i--){\n    sum = sum - nums[i]%10;\n    list.unshift(nums[i]);\n  }\n \
    \ return list;\n}\n", "  var sorted_nums = [];\n  var sorted_arr = [];\n  for\
    \ (var i = 0; i < nums.length; i++){\n    var current_sum_of_digits = nums[i]\n\
    \    var current_index = 0;\n    while (current_sum_of_digits != 0){\n      if\
    \ (sorted_nums[current_index] == undefined){\n        sorted_nums[current_index]\
    \ = nums[i];\n      } else {\n        var digit_index = sorted_nums[current_index].indexOf(0);\n\
    \        sorted_nums[current_index] = sorted_nums[current_index].slice(0,digit_index)\
    \ + nums[i] + sorted_nums[current_index].slice(digit_index);\n      }\n      current_index++;\n\
    \      current_sum_of_digits -= Math.floor(current_sum_of_digits / 10);\n    }\n\
    \  }\n  for (var i = 0; i < sorted_nums.length; i++){\n    sorted_arr.push(sorted_nums[i]);\n\
    \  }\n  return sorted_arr;\n}", "  var sum = 0;\n  var res = [];\n  for (var i\
    \ = 0; i < nums.length; i++){\n    if (nums[i] < 0) nums[i] += 10;\n    res.push(nums[i]);\n\
    \    sum += nums[i];\n  }\n  res.sort(function(a, b){\n    return sum - a > b\
    \ ? 1 : sum - a < b ? -1 : 0;\n  });\n  return res;\n}\n", "    nums.sort(function(a,\
    \ b){\n        return Math.abs(a - b); //Sort them based on their absolute value.\n\
    \    });\n    return nums;\n}\n", "\tlet sorted_nums = [];\n\tlet current_sum\
    \ = 0;\n\tlet current_index = 0;\n\tfor(let num of nums){\n\t\tcurrent_sum +=\
    \ num;\n\t\tif(sorted_nums.find(function(el){return el === current_sum;}) ===\
    \ undefined){\n\t\t\tsorted_nums.push(num);\n\t\t}else{\n\t\t\tlet index = sorted_nums.indexOf(current_sum);\n\
    \t\t\tsorted_nums.splice(index, 1);\n\t\t\tsorted_nums.splice(index, 0, num);\n\
    \t\t}\n\t}\n\tsorted_nums = sorted_nums.sort((a,b) => {return a-b});\n\treturn\
    \ sorted_nums;\n}\n", "    nums.sort(function(a,b){\n        var ret = a.value\
    \ - b.value;\n        return ret == 0 ? a.index - b.index : ret;\n    });\n  \
    \  return nums;\n}\n", "    let sortedArray = nums.sort((a,b)=>{\n        let\
    \ xSum = (a < b)?a:b;\n        let ySum = (a < b)?b:a;\n        let numsSum =\
    \ xSum.toString().split('').reduce((a,b)=>a+b,0);\n        return ySum - numsSum;\n\
    \    });\n    return sortedArray;\n}\n", "    return nums.sort(function (a, b){\n\
    \        return Math.abs(a) + Math.abs(b) - Math.abs(parseInt(a + b, 10));\n \
    \   });\n}\n", "\tvar result = nums.slice()\n\tresult.sort(function(a,b){\n\t\t\
    var sumA = sum_digits(a)\n\t\tvar sumB = sum_digits(b)\n\t\treturn sumA - sumB\n\
    \t})\n\treturn result\n}\n", "  var result = [];\n  nums.forEach(function(num){\n\
    \    if(num < 0){\n      num = -num;\n    }\n    var sum = 0;\n    while(num){\n\
    \      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    result.push(sum);\n\
    \  });\n  result.sort(function(a, b){\n    return a - b;\n  });\n  return result;\n\
    }", "    var points = []; //\u4FDD\u5B58\u6240\u6709\u6570\u5B57\u7684\u96C6\u5408\
    \n    for(var i=0;i<nums.length;i++){\n        points.push({\n            num:nums[i],\n\
    \            index:i\n        });\n    }\n    points.sort(function(a,b){\n   \
    \     return a.num-b.num;\n    });\n    var output = [];\n    for(var i=0;i<points.length;i++){\n\
    \        output.push(points[points[i].index]);\n    }\n    return output;\n}\n",
  "    var numsSorted= [];\n    numsSorted.push(nums[0]);\n    for (var i=1, len=nums.length;\
    \ i<len; i++){\n        var digit= nums[i]%10;\n        if (digit>0){\n      \
    \      digit= 10 - digit;\n        }\n        numsSorted.push(digit);\n    }\n\
    \    return numsSorted;\n}", "    var arr = [];\n    var temp;\n    var index\
    \ = 1;\n    for (var i in nums){\n        temp = nums[i];\n        arr.push(temp);\n\
    \        index += temp.toString().length;\n    }\n    arr.sort(function(a, b){\n\
    \        if (a < b){\n            return -1;\n        }\n        else if (a >\
    \ b){\n            return 1;\n        }\n        else{\n            return 0;\n\
    \        }\n    });\n    return arr;\n}\n", "\tnums = nums.sort(function(a, b){\n\
    \t\t// Get a to compare to b\n\t\tvar as_string = a.toString();\n\t\tvar bs_string\
    \ = b.toString();\n\n\t\t// Convert strings to numbers (if not already)\n\t\t\
    a = as_string > bs_string ? as_string - bs_string : bs_string - as_string;\n\n\
    \t\t// Get a sum\n\t\tvar sumOfDigits = a.reduce(function(sum, value){\n\t\t\t\
    return sum + Number(value);\n\t\t}, 0);\n\n\t\t// Return -1 if a < b, 1 if a >\
    \ b and 0 if a = b\n\t\treturn sumOfDigits > 0 ? sumOfDigits : a[0] - b[0];\n\t\
    });\n\n\t// Return an ordered copy of the given list\n\treturn nums.slice();\n\
    }\n", "    var i, j, a, b, sum, digits, j, temp = [];\n    for(i = 0; i < nums.length;\
    \ i++){\n        digits = nums[i].toString().split('');\n        sum = 0;\n  \
    \      for(j = 0; j < digits.length; j++){\n            sum += parseInt(digits[j]);\n\
    \        }\n        temp.push(sum);\n    }\n    temp.sort(function(a, b){\n  \
    \      return b-a;\n    });\n    for(i = 0; i < nums.length; i++){\n        digits\
    \ = nums[i].toString().split('');\n        for(j = 0; j < digits.length; j++){\n\
    \            b = parseInt(digits[j]);\n            a = temp[j];\n            if(isNaN(a)){\n\
    \                a = -1;\n            }\n            if(isNaN(b)){\n         \
    \       b = -1;\n            }\n            if(b > a){\n                temp[j].splice(j,\
    \ 1);\n                nums.splice(i, 1);\n                j--;\n            \
    \    i--;\n            }\n        }\n    }\n    return nums;\n}", "\tnums = nums.sort(function(a,b){return\
    \ a-b;});\n\tnums = nums.map(function(n){ return Math.abs(n); });\n\treturn nums.filter(function(n){\
    \ return n > 0; });\n}", "\tvar len = nums.length;\n\tvar minLen = Number.MAX_VALUE;\n\
    \tvar i, maxSum;\n\tfor(i = 0; i < len; i++){\n\t\tmaxSum = 0;\n\t\tfor(var j\
    \ = 0; j < len; j++){\n\t\t\tmaxSum += nums[j];\n\t\t\tif(maxSum > 0){\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif(maxSum > 0){\n\t\t\tfor(var j = 0; j < len; j++){\n\
    \t\t\t\tif(nums[j] > 0){\n\t\t\t\t\tnums[j] -= maxSum;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\t\n\t}\n\tvar ans = [];\n\tfor(i = 0; i < len; i++){\n\t\tans.push(nums[i]);\n\
    \t}\n\treturn ans;\n}\n", "  let numsArray = nums.sort((a,b) => {\n    return\
    \ parseInt(a.substring(0, 1)) + parseInt(b.substring(0, 1))\n  })\n  return numsArray;\n\
    }", "  var result = [];\n  nums.forEach(function(num){\n    var temp = num.toString();\n\
    \    var sum_digits = 1;\n    for(var i=0; i < temp.length; i++){\n      var cur_digit\
    \ = temp.charAt(i) - 0;\n      sum_digits *= 10;\n      sum_digits += cur_digit;\n\
    \    }\n    var index = result.indexOf(sum_digits);\n    if(index == -1){\n  \
    \    result.push(sum_digits);\n    }\n    else{\n      result[index] = num;\n\
    \    }\n  });\n  return result;\n}\n", "    nums = nums.sort(function(a, b) {\n\
    \        a = Math.abs(a);\n        b = Math.abs(b);\n        return b - a; \n\
    \    }); \n\n    return nums;\n}\n", "  //\n  // Write your code here.\n  //\n\
    }\n", "    var len = nums.length;\n    var mins = nums.map(function(num){return\
    \ Math.floor(num);});\n    var sorted = [];\n    while(len--){\n        var minIndex\
    \ = mins.indexOf(Math.min(...mins));\n        sorted.push(nums[minIndex]);\n \
    \       mins.splice(minIndex, 1);\n    }\n    return sorted;\n}\n", "\tvar sorted\
    \ = nums.concat().sort();\n\tvar reversed = sorted.reverse();\n\treturn reversed;\n\
    }", "  const sorted = [];\n  const sums = [];\n  let i;\n  for(i=0; i<nums.length;\
    \ i++){\n    sums.push(0);\n    for(let j=0; j<nums[i].length; j++){\n      sums[i]\
    \ += nums[i][j];\n    }\n  }\n  for(i=0; i<nums.length; i++){\n    for(let j=0;\
    \ j<nums[i].length; j++){\n      if(sums[i] < sums[j]){\n        sorted.push(nums[i][j]);\n\
    \        sums[j] = sums[i];\n      }\n    }\n  }\n  return sorted;\n}", "  nums.sort(function(a,\
    \ b){\n    return parseInt(a.toString().split('').reduceRight(function(a,b){return\
    \ a*b}) + b.toString().split('').reduceRight(function(a,b){return a*b}),10)\n\
    \  })\n  return nums\n}\n", "\tvar len = nums.length;\n\tif(len == 0) return nums;\n\
    \tnums.sort(function(a, b){return a+b});\n\tvar ret = [];\n\tvar curSum = 0;\n\
    \tvar first = true;\n\tfor(var i=0;i<len;i++){\n\t\tif(!first){\n\t\t\tret[i]\
    \ = nums[i];\n\t\t} else {\n\t\t\tcurSum = 0;\n\t\t\tfirst = false;\n\t\t}\n\t\
    \tcurSum += nums[i];\n\t\tif(curSum > 0){\n\t\t\tret.push(nums[i]);\n\t\t}\n\t\
    }\n\treturn ret;\n}\n", "\tnums.sort(function(n1, n2){\n\t\tvar digit1 = n1.toString().split('').reverse().reduce(function(sum,\
    \ n){\n\t\t\treturn sum + Number(n);\n\t\t}, 0);\n\t\tvar digit2 = n2.toString().split('').reverse().reduce(function(sum,\
    \ n){\n\t\t\treturn sum + Number(n);\n\t\t}, 0);\n\t\treturn digit1 - digit2;\n\
    \t});\n\treturn nums;\n}\n", "  var len=nums.length,\n      points=new Array(len),\n\
    \      i,\n      sum,\n      point,\n      order;\n\n  for(i=0;i<len;i++){\n \
    \   sum=0;\n    point=nums[i];\n    for(;point;point>>=1){\n      sum+=point;\n\
    \    }\n    points[i]=sum;\n  }\n\n  points=points.sort(function(a,b){return b-a;});\n\
    \  order = new Array(len);\n  for(i=0;i<len;i++){\n    order[i] = i;\n  }\n  return\
    \ function(i){\n    return points[order[i]];\n  };\n}\n", "    nums = nums.slice();\n\
    \    nums.sort(function(a, b){\n        var i = Number(a) - Number(b);\n     \
    \   if (i !== 0){\n            return i;\n        }\n        return -i;\n    });\n\
    \    return nums;\n}\n", "  // Write your code here\n  let sum = 0\n  let arr\
    \ = []\n  for (let num of nums){\n    sum += num\n    arr.push(sum)\n  }\n  arr\
    \ = arr.sort((a, b) => a-b)\n  \n  let index = arr.indexOf(sum);\n  arr = arr.sort((a,\
    \ b) => b-a)\n  \n  let temp = nums[index]\n  nums[index] = nums[arr.indexOf(temp)]\n\
    \  nums[arr.indexOf(temp)] = temp;\n  return nums\n}\n", "  let res = [];\n  let\
    \ sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n \
    \   res.push(i);\n  }\n  res.sort((a, b) => sum - nums[b] - nums[a]);\n  return\
    \ res;\n}\n", "   nums = nums.sort(function(a, b){\n        return b-a;\n   });\n\
    \   return nums.sort(function(a, b){\n        return a-b;\n   });\n}\n", "   \
    \ const sums = nums.map(n => n.toString().split('').map(Number).reduce((acc, d)\
    \ => acc + d, 0))\n    const index = {}\n    sums.forEach((s, i) => index[s] =\
    \ i)\n    return nums.sort((a, b) => index[a] - index[b])\n}", "\tnums.sort(function(a,\
    \ b){\n\t\treturn ((a < 0) ? (b - a) * -1 : (a > b) ? 1 : 0);\n\t});\n\treturn\
    \ nums;\n}\n", "\tvar i, sum = 0;\n\tfor(i=0;i<nums.length;i++){\n\t\tsum += nums[i];\n\
    \t}\n\tvar result = [];\n\tfor(i=0;i<nums.length;i++){\n\t\tresult.push([nums[i],\
    \ sum]);\n\t}\n\tresult.sort(sort_by_sum);\n\tfor(i=0;i<nums.length;i++){\n\t\t\
    result.push([nums[i], sum]);\n\t}\n\treturn result;\n}\n", "    var results =\
    \ [];\n    nums.forEach(function(num){\n        var result = 0;\n        while\
    \ (num > 0) {\n            result = result * 10 + (num % 10);\n            num\
    \ = Math.floor(num / 10);\n        }\n        results.push(result);\n    });\n\
    \    return results;\n}\n", "\tnums.sort(function(a, b){\n\t\treturn to_number(add_digits(a))\
    \ > to_number(add_digits(b));\n\t});\n\treturn nums;\n}", "  var copy = nums.slice();\n\
    \  nums = [];\n  copy.forEach(function(item){\n    nums.push(item.point);\n  })\n\
    \  copy.sort(function(a, b){\n    return a.point - b.point;\n  });\n  return nums;\n\
    }", "    var len = nums.length\n    if (len == 0) return []\n    var i = 0\n \
    \   var sum = 0, carry = 0, tmp\n    var res = []\n    for (; i < len; ++i) {\n\
    \      tmp = nums[i] % 10\n      tmp += (10 * carry)\n      carry = parseInt(nums[i]\
    \ / 10)\n      sum += tmp\n      res.push(sum < 0 ? sum + 10 : sum)\n    }\n \
    \   return res\n}\n\n", "    nums = nums.sort((a,b) => {\n        if (a < b){\n\
    \            return 1;\n        }\n        if (a > b){\n            return -1;\n\
    \        }\n        return 0;\n    });\n    var res = [];\n    var last = -1;\n\
    \    for(var i = 0; i<nums.length;i++){\n        var num = nums[i];\n        res.push(num);\n\
    \        if (num === 0){\n            break;\n        }\n        if (num % 10\
    \ !== 0){\n            if(last !== -1){\n                res.push(last);\n   \
    \         }\n            last = num;\n        }\n    }\n    if (last !== -1){\n\
    \        res.push(last);\n    }\n    return res;\n}\n", "  var result = [];\n\
    \  nums.forEach(function(num){\n    var sum = 0;\n    var digits = String(num).split(\"\
    \");\n    digits.forEach(function(digit){\n      sum += parseInt(digit);\n   \
    \ });\n    var index = result.indexOf(sum);\n    if (index < 0){\n      result.push(sum);\n\
    \    } else {\n      result[index] = num;\n    }\n  });\n  return result;\n}\n",
  "  var arr = [];\n  var index = 0;\n  var point = 0;\n  for(var i = 0; i<nums.length;\
    \ i++){\n    if(!isNum(nums[i])){\n      var reordered = arr.slice();\n      var\
    \ numsIndex = reordered.indexOf(i);\n      reordered[numsIndex] = nums[i];\n \
    \     arr.push(reordered);\n    }\n  }\n  console.log(arr);\n  for(var i = 0;\
    \ i<arr.length; i++){\n    for(var j = 0; j < arr[i].length; j++){\n      if(arr[i][j]\
    \ > point){\n        point += arr[i][j];\n        arr[i][j] = point;\n       \
    \ console.log(point, arr);\n      }\n    }\n  }\n  return arr;\n}\n", "    let\
    \ sums = [];\n    for (let i = 0; i < nums.length; i++){\n        sums[i] = (nums[i]\
    \ * 10);\n    }\n    let results = [];\n    let index = 0;\n    while ( index\
    \ < sums.length){\n        let sum = 0;\n        let next_index = index + 1;\n\
    \        let sumOfNextIndex = sums[next_index];\n        while (sumOfNextIndex){\n\
    \            sum += sumOfNextIndex;\n            next_index++;\n            sumOfNextIndex\
    \ = sums[next_index];\n        }\n        results.push(nums[index]);\n       \
    \ index = next_index;\n    }\n    return results;\n}\n", "  const obj = {};\n\
    \  nums.forEach(function(num){\n    if (num in obj){\n      obj[num].count++;\n\
    \      obj[num].sum += num;\n    } else {\n      obj[num] = {\n        sum: num,\n\
    \        count: 1,\n      };\n    }\n  });\n  const arr = [];\n  for (let num\
    \ in obj){\n    arr.push(obj[num]);\n  }\n  arr.sort((a, b) => {\n    return a.sum\
    \ - b.sum;\n  });\n  return arr;\n}\n", "  return nums.sort((a, b) => {\n    return\
    \ sum(a) - sum(b);\n  });\n}\n", "    var result = nums.slice();\n    var n =\
    \ result[0];\n    for (var i = 1; i < result.length; i++) {\n        var item\
    \ = result[i];\n        n = compare_sum(item, n, item);\n        if (n > 0) result.splice(i,\
    \ 0, n);\n        else result.splice(i, 0, item);\n    }\n    return result;\n\
    }\n", "    var copy_list = nums.slice();\n    var sorted_list = [];\n    var sum\
    \ = 0;\n    var prev_sum = 0;\n    var index = 0;\n    while(index < copy_list.length){\n\
    \        var item = copy_list[index];\n        sum += item;\n        prev_sum\
    \ = sum;\n        while(sum >= 10){\n            sum -= 10;\n            sorted_list.unshift(copy_list.splice(index,1)[0]);\n\
    \            sum++;\n            index++;\n        }\n        if(sum === 0 &&\
    \ prev_sum === 0) return sorted_list;\n        else if(sum > 0 && sum < 10) return\
    \ sorted_list.push(copy_list.splice(index,1)[0]);\n        else if(sum === 0 &&\
    \ prev_sum < 10) return sorted_list.unshift(copy_list[index]);\n        else if(sum\
    \ < 0 && sum > -10) return sorted_list.push(copy_list.splice(index,1)[0]);\n \
    \       else if(sum > 0 && sum < -10) return sorted_list.unshift(copy_list[index]);\n\
    \        index++;\n    }\n    return sorted_list;\n}\n", "  var _sum = 0;\n  var\
    \ _max = 0;\n  var _min = 0;\n  var _res = [];\n  var _cur = 0;\n  for(var i =\
    \ 0; i<nums.length; i++){\n    var _num = nums[i];\n    _sum += _num;\n    var\
    \ _max = _num > _max ? _num : _max;\n    _min = _num < _min ? _num : _min;\n \
    \   _res.push(_num);\n  }\n  \n  while(_sum > 0){\n    var _index = _indexes[(_sum+_min)/(_max-_min)];\n\
    \    _res.splice(_index, 1);\n    _sum -= _sum/_num;\n    _sum += _sum%_num;\n\
    \    _min = _max < _min ? _max : _min;\n    _max = _sum > _max ? _sum : _max;\n\
    \    _cur = _sum;\n    _sum = 0;\n    \n    for(var i=0; i<_res.length; i++){\n\
    \      _sum += _res[i];\n      if(_sum > _cur){\n        var _index = _indexes[(_sum+_min)/(_max-_min)];\n\
    \        _res.splice(_index, 0, _res[i]);\n        _sum -= _sum/_num;\n      \
    \  _sum += _sum%_num;\n        _min = _max < _min ? _max : _min;\n        _max\
    \ = _sum > _max ? _sum : _max;\n        _cur = _sum;\n      }\n    }\n  }\n  return\
    \ _res;\n}\n", "\tnums = nums.sort();\n\tfor (var i = 0; i < nums.length; i++){\n\
    \t\tvar j = nums[i];\n\t\tvar k = nums[i + 1];\n\t\tif (j + k > 0) nums[j + k]\
    \ = nums[j];\n\t\tnums[j] = i;\n\t}\n\treturn nums;\n}\n", "    var sorted = nums.slice().sort(function(a,b){\n\
    \        var sumA = a.slice().reduce(function(a,b){return a+b},0);\n        var\
    \ sumB = b.slice().reduce(function(a,b){return a+b},0);\n        var index = sumB\
    \ - sumA;\n        if(index != 0) return index;\n        return sumA - sumB;\n\
    \    });\n    return sorted;\n}\n\n", "\tconst sorted = nums.sort((a,b)=>{\n\t\
    \tconst n1 = Math.abs(a), n2 = Math.abs(b);\n\t\tif(n1<n2) return -1;\n\t\tif(n1>n2)\
    \ return 1;\n\t\treturn 0;\n\t});\n\treturn sorted;\n}\n", "  let ans = [];\n\
    \  for(let i=0; i<nums.length; i++){\n    let sum = 0;\n    for(let j=0; j<nums[i].length;\
    \ j++){\n      sum += nums[i][j];\n    }\n    ans.push(sum);\n  }\n  ans = ans.sort(function(a,\
    \ b){\n    if(a > b) return 1;\n    else return a - b;\n  });\n  let sorted_nums\
    \ = [];\n  for(let i=0; i<ans.length; i++){\n    sorted_nums.push(ans[i]);\n \
    \ }\n  return sorted_nums;\n}\n", "  return nums.sort(function(a, b){\n    return\
    \ (a-b);\n  });\n}\n</cell>\n<text>\nTest\n\n</text>\n<cell>", "    var points\
    \ = [];\n    nums.sort(function(a, b){\n        var x = a.point;\n        var\
    \ y = b.point;\n        if(x < y){\n            return -1;\n        }\n      \
    \  if(x > y){\n            return 1;\n        }\n        return 0;\n    });\n\
    \    for(var i = 0, l = nums.length; i < l; i++){\n        var num = nums[i];\n\
    \        var point = num.point;\n        while(points.length <= point){\n    \
    \        points.push(0);\n        }\n        points[point] += 1;\n        num.point\
    \ = points[point];\n    }\n    return nums;\n}\n", "    let res = [];\n    nums.forEach(function(num){\n\
    \        let tmpSum = num.toString().split('').reduce((a, b)=>a+b, 0);\n     \
    \   let index = res.findIndex((e)=>e.sum === tmpSum);\n        if(index===-1)\
    \ res.push({sum:tmpSum, num:num});\n        else res[index] = {sum:tmpSum, num:num}\n\
    \    });\n    return res.sort((a,b)=>b.sum - a.sum);\n}\n", "    nums.sort(function(a,\
    \ b){\n        return a + b * sums_of_digits(a);\n    });\n    return nums;\n}",
  "  var sorted_arr = [];\n  var digits = nums.map(Number).map(function(x){ return\
    \ x.toString().split('').reverse(); });\n  digits.forEach(function(digit, index,\
    \ arr){\n    digit.forEach(function(d, i, a){\n      if(a[i - 1] < 0)\n      \
    \  a[i - 1] += d;\n      else if (a[i - 1] > 0)\n        a[i - 1] -= d;\n    \
    \  else\n        a[i - 1] = d\n    })\n  });\n  sorted_arr = digits.reduce(function(sorted,\
    \ digit, index, arr){\n    sorted.push(digit);\n    return sorted;\n  }, []).map(function(x){\
    \ return x.toString().split('').reverse().join(''); });\n  return sorted_arr.filter(function(item,\
    \ index, arr){\n    return arr.indexOf(item) == index;\n  });\n}\n", "    var\
    \ sorted_nums\n    if(nums.length === 0) {\n        sorted_nums = []\n    } else\
    \ {\n        var sorted_nums = nums.slice()\n        sorted_nums.sort(function(a,\
    \ b){\n            return sum_digits(a) - sum_digits(b)\n        })\n    }\n \
    \   return sorted_nums\n}\n", "  nums.sort(function(a, b){\n    var a = Math.abs(a),\
    \ b = Math.abs(b);\n    return b-a;\n  });\n  return nums;\n}\n", "\tvar sorted_nums\
    \ = nums.slice();\n\tvar result = [];\n\tfor (var i = 0, l = nums.length; i <\
    \ l; i++){\n\t\tvar index = sorted_nums.indexOf(-nums[i]);\n\t\tif (index != -1){\n\
    \t\t\tsorted_nums.splice(index, 1);\n\t\t\tsorted_nums.push(nums[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "    \n    if(nums.length < 2) return nums\n    \n\
    \    let sortedNums = []\n    let largestSum = 0\n    \n    nums.forEach(num =>\
    \ {\n        let numString = num.toString()\n        \n        let numSum = numString.split('').reduce((sum,\
    \ current) => sum + parseInt(current), 0)\n        \n        if(numSum > largestSum){\n\
    \            largestSum = numSum\n            sortedNums = [num]\n        }else\
    \ if(numSum === largestSum){\n            sortedNums.push(num)\n        }\n  \
    \      \n    })\n    \n    return sortedNums\n}\n\n", "  let len = nums.length\n\
    \  if(len === 0){\n    return nums\n  }\n  const numsMap = new Map()\n  for(let\
    \ i = 0; i < len; i++){\n    let num = nums[i]\n    if(numsMap.has(num)){\n  \
    \    numsMap.set(num, numsMap.get(num) + i)\n    }\n    else{\n      numsMap.set(num,\
    \ i)\n    }\n  }\n  return numsMap.keys()\n}\n", "  var copy = nums.slice(0);\
    \ //Copy nums\n  copy.sort(function(a, b){return (b - a)*Math.floor(100/b.length);\
    \ });\n  return copy.slice(0); //Return copy\n}\n", "  var sortedArr = [];\n \
    \ var maxSum = 0, sumOfDigits = 0;\n  for(var i = 0; i < nums.length; i++){\n\
    \    var item = nums[i];\n    var newSum = sumOfDigits;\n    sumOfDigits = 0;\n\
    \    for(var j = 0; j < item.length; j++){\n      var digit = parseInt(item.charAt(j));\n\
    \      sumOfDigits += digit;\n      var newSum -= digit;\n      if(sumOfDigits\
    \ < 0){\n        sumOfDigits *= -1;\n      }\n    }\n    if(newSum > maxSum){\n\
    \      maxSum = newSum;\n      sortedArr = [item];\n    } else if(newSum == maxSum){\n\
    \      sortedArr.push(item);\n    }\n  }\n  return sortedArr;\n}", "  var sorted\
    \ = [],\n      digits = [],\n      sum = 0;\n  \n  //Store digits to sort them\
    \ in order\n  for(var i = 0, len = nums.length; i < len; i++){\n    digits.push(nums[i]);\n\
    \  }\n\n  //Sort digits\n  digits = digits.sort();\n\n  //Reverse digits\n  for(var\
    \ i = 0, len = digits.length; i < len; i++){\n    sum += digits[i];\n  }\n\n \
    \ //Re-sort numbers so they have most digit on their left\n  for(var i = 0, len\
    \ = nums.length; i < len; i++){\n    sorted.push(nums[i]);\n  }\n\n  //Re-sort\
    \ digits\n  sorted = sorted.sort();\n  \n  //Get indices to sort by sum\n  for(var\
    \ i = 0, len = sorted.length; i < len; i++){\n    sorted.splice(i, 0, i);\n  }\n\
    \n  //Move all elements by sum of digits so they have same order\n  for(var i\
    \ = 0, len = sorted.length; i < len; i++){\n    sorted.splice(sorted[sorted[sorted[i]]\
    \ - len], 0, sorted[sorted[i]]);\n  }\n  \n  return sorted;\n}\n", "    \n   \
    \ // Sort the given list from smallest to largest in place\n    nums.sort(function(a,\
    \ b){return b-a;});\n\n    // Find the index of the digit with smallest sum\n\
    \    var smallest_sum_index = 0;\n    for(var i = 0; i < nums.length; i++){\n\
    \        var current_digit = nums[i];\n        smallest_sum_index += current_digit;\n\
    \        if(smallest_sum_index > 9){\n            break;\n        }\n    }\n\n\
    \    // Now sort those indices descending:\n    nums.sort((a, b) => b - a);\n\n\
    \    // The list of integers in ascending order is ready\n    return nums;\n}\n",
  "  if(nums.length == 0) return nums\n  var numsSum = nums.reduce(function(prev,\
    \ curr){\n    return prev + curr\n  }, 0)\n  var resnums = []\n  for(var i = 0,\
    \ len = nums.length; i < len; i++){\n    var curr = nums[i]\n    var idx = nums.indexOf(curr)\n\
    \    var prevIdx = nums.indexOf(nums[idx > 0 ? idx - 1 : idx])\n    if(prevIdx\
    \ > -1) nums.splice(prevIdx, 1)\n    resnums.push(curr)\n  }\n  resnums = resnums.concat(nums)\n\
    \  return resnums.sort((a, b) => a - b)\n}\n", "    let len = nums.length;\n \
    \   let newNums = new Array(len);\n    for(let i = 0; i < len; ++i){\n       \
    \ let sum = 0;\n        for(let j = 0; j < len; ++j){\n            sum += nums[j].charCodeAt(j)\
    \ - '0'.charCodeAt(0);\n        }\n        newNums[i] = sum;\n    }\n    return\
    \ newNums;\n}\n", "    let sum = 0;\n    for (let num of nums) {\n        sum\
    \ += num;\n    }\n    let result = [];\n    for (let num of nums) {\n        result.push(num);\n\
    \    }\n    for (let i = 0; i < result.length; i++) {\n        result[i].val =\
    \ sum - result[i].digits;\n    }\n    result.sort((a, b) => a.val - b.val);\n\
    \    return result;\n}\n", "\tnums.sort(function(a, b){\n\t\tvar aSum = a.toString().split('').sort().join(''),\n\
    \t\t\tbSum = b.toString().split('').sort().join(''),\n\t\t\taSumArr = aSum.split(''),\n\
    \t\t\tbSumArr = bSum.split(''),\n\t\t\taLen = a.toString().length,\n\t\t\tbLen\
    \ = b.toString().length,\n\t\t\taSumInt = parseInt(aSumArr.join('')),\n\t\t\t\
    bSumInt = parseInt(bSumArr.join('')),\n\t\t\taSumStr = aSumArr.join(''),\n\t\t\
    \tbSumStr = bSumArr.join('');\n\t\taSumInt = aSumInt - (aLen - 1);\n\t\tbSumInt\
    \ = bSumInt - (bLen - 1);\n\t\treturn aSumInt - bSumInt;\n\t});\n\treturn nums;\n\
    }\n", "    nums.sort((a,b)=>{\n        let sum = a.toString().length + b.toString().length;\n\
    \        return sum<0?-1:sum<0?1:0;\n    });\n    return nums;\n}\n</code>\n<|/\
    \ a tags=arrays,javascript,sorting |>\n<| c |>\nNice, short and sweet.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nTry this:\n<code>", "  return nums.sort((a,b)=>{\n   \
    \ let sum = (a+b)%10;\n    return sum==0 ? a-b : sum;\n  })\n}", "    // Write\
    \ your code here.\n    return nums;\n}\n", "  let sorted_nums = nums;\n  let sorted_index\
    \ = 0;\n  while (sorted_index<nums.length-1){\n    let sum = 0;\n    let digit_index\
    \ = 0;\n    while (digit_index<sorted_nums.length){\n      sum += sorted_nums[digit_index];\n\
    \      digit_index++;\n    }\n    if (sum>sorted_nums[sorted_index+1]){\n    \
    \  sorted_nums = sorted_nums.slice(0,sorted_index).concat(sorted_nums.slice(sorted_index+1,sorted_nums.length));\n\
    \      sorted_index++;\n    }\n  }\n  return sorted_nums;\n}\n", "    for(var\
    \ i=0;i<nums.length;i++){\n        var num=nums[i];\n        if(num<0){\n    \
    \        var num=nums[i];\n            var rest=nums.slice(i);\n            rest.unshift(-num);\n\
    \            nums=rest;\n        }\n    }\n    return nums;\n}", "    var sum=0;\n\
    \    var max=nums.length-1;\n    var nums1=nums.slice();\n    nums1.sort(function(a,\
    \ b){\n        var sum1=a+b;\n        var sum2=sum1+sum;\n        if(sum1>sum2){\n\
    \            return 1;\n        }\n        if(sum1<sum2){\n            return\
    \ -1;\n        }\n        return 0;\n    });\n    return nums1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis answer has been flagged for review by some users,\
    \ due to its length and content. Please be sure to explain your answer in detail\
    \ and provide any additional details in your answer. See [How to Answer](http://stackoverflow.com/help/how-to-answer)\
    \ for help on writing answers that will be accepted or upvoted.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "    var out = [];\n    var len = nums.length;\n   \
    \ var idx = nums.length;\n    while (idx--){\n        var digit = 0;\n       \
    \ var num = nums[idx];\n        while (num !== 0){\n            digit = num %\
    \ 10 + digit;\n            num = Math.floor(num / 10);\n        }\n        out.push(digit);\n\
    \    }\n    out.sort(function(x, y){\n        var a = x - y;\n        if(a ===\
    \ 0) return x - y;\n        return a;\n    });\n    return out;\n}", "    var\
    \ _arr = [];\n    for (var i = 0, len = nums.length; i < len; i += 1) {\n    \
    \    _arr[i] = nums[i].toString();\n    }\n    _arr.sort(function(a, b){\n   \
    \     var sumA = parseFloat(a.toString().split('').reduce(function(sum, digit)\
    \ {\n            return sum + parseInt(digit, 10);\n        }, 0));\n        var\
    \ sumB = parseFloat(b.toString().split('').reduce(function(sum, digit) {\n   \
    \         return sum + parseInt(digit, 10);\n        }, 0));\n        if(sumA\
    \ < sumB) {\n            return -1;\n        }\n        if(sumA > sumB) {\n  \
    \          return 1;\n        }\n        return 0;\n    });\n    return _arr;\n\
    }\nvar nums1 = order_by_points([1, 11, -1, -11, -12]);", "  nums.sort(function(a,\
    \ b){\n    var a = sum(a);\n    var b = sum(b);\n    return a - b;\n  });\n  return\
    \ nums;\n}\n", "    var cur = 0;\n    var curSum = 0;\n    var ret = [];\n   \
    \ var len = 0;\n    while(cur < nums.length){\n        curSum += nums[cur];\n\
    \        cur = curSum;\n        curSum = 0;\n        if(cur < 0){\n          \
    \  ret[len++] = nums[cur];\n            cur = curSum + nums[cur] + 1;\n      \
    \  }\n        else{\n            ret[len++] = nums[cur];\n            cur = curSum;\n\
    \        }\n    }\n    return ret;\n}\n", "\tvar sortedNums = nums.sort(function(a,b){\n\
    \t\tvar sumA = sum2(a);\n\t\tvar sumB = sum2(b);\n\t\treturn sumA-sumB;\n\t});\n\
    \treturn sortedNums;\n}\n", "    let digitSums = [...nums.map(x => x.toString().split('').reduce((prev,\
    \ curr) => prev + Number(curr), 0))];\n    digitSums.sort();\n    return nums.filter(x\
    \ => digitSums.indexOf(x) === -1);\n}\n", "\tlet sorted_by_points = [];\n\tlet\
    \ num_to_sum = 0;\n\tlet current_index = 0;\n\t\n\twhile(current_index < nums.length){\n\
    \t\tnum_to_sum += nums[current_index];\n\t\tsorted_by_points.push(nums[current_index]);\n\
    \t\tcurrent_index++;\n\t}\n\t\n\tsorted_by_points.sort((a,b) => a - b);\n\twhile(current_index\
    \ < nums.length){\n\t\tsorted_by_points.splice(0, 0, nums[current_index]);\n\t\
    \tcurrent_index++;\n\t}\n\t\n\twhile(sorted_by_points.length){\n\t\tsorted_by_points.unshift(sorted_by_points.pop());\n\
    \t}\n\t\n\treturn sorted_by_points;\n}\n", "\tnums.sort((a,b) => sort_digits(a)\
    \ - sort_digits(b));\n\treturn nums;\n}\n", "  let sum = 0;\n  for (let i=0;i<nums.length;i++){\n\
    \    sum += nums[i];\n  }\n  sum = sum % 10;\n  if (sum < 0){\n    sum = -sum;\n\
    \  }\n  return nums.sort((a,b)=>{\n    let aSum = a % 10;\n    let bSum = b %\
    \ 10;\n    if (aSum+bSum==sum){\n      return a<b ? -1 : 1;\n    } else {\n  \
    \    return aSum+bSum - sum;\n    }\n  });\n}\n", "\tvar sum = 0;\n\tfor(var i\
    \ = 0; i < nums.length; i++){\n\t\tvar n = nums[i];\n\t\tsum += Math.pow(10, nums.length\
    \ - i - 1);\n\t\tif(n == 0){\n\t\t\tcontinue; // ignore zeros.\n\t\t}\n\t\tif(n\
    \ != 0 && Math.pow(10, nums.length - i - 1) == Math.pow(10, nums.length - i)){\n\
    \t\t\tsum -= Math.pow(10, nums.length - i);\n\t\t}\n\t\telse if(n == 0 && Math.pow(10,\
    \ nums.length - i) != 0){\n\t\t\tsum -= Math.pow(10, nums.length - i - 1);\n\t\
    \t}\n\t}\n\tnums.sort(function(a, b){\n\t\treturn sum - Math.pow(10, nums.length\
    \ - a - 1);\n\t});\n\treturn nums;\n}\n\nvar num1 = new Number();\nvar num2 =\
    \ new Number();\nvar num3 = new Number();\nvar num4 = new Number();\nvar num5\
    \ = new Number();\nvar num6 = new Number();\nvar num7 = new Number();\nvar num8\
    \ = new Number();\nvar num9 = new Number();\n", "  return nums.sort((a, b) =>\
    \ { return (a > b) ? 1 : -1; });\n}\n", "    nums.sort(function(a,b){\n      \
    \  var sum = 0;\n        for(var i=0;i<a.length;i++){\n            sum+=parseInt(a[i].substr(1,a[i].length),10);\n\
    \        }\n        sum+=parseInt(b.substr(1,b.length),10);\n        return sum-0;\n\
    \    });\n    return nums;\n}\n", "  let sorted = []\n  nums.forEach((n)=>{\n\
    \    let index = -1\n    while ((index = nums.indexOf(n,index+1)) == -1){\n  \
    \    nums.splice(index, 0, n)\n    }\n    sorted.push(n)\n  })\n  return sorted\n\
    }\n", "    var _arr=nums.slice(0),\n        arr=[];\n    function get_sum(num){\n\
    \        return num.split(\"\").reduce((acc,x)=>acc+x%10+acc,0);\n    }\n    _arr.sort((a,b)=>get_sum(a)-get_sum(b)||a.localeCompare(b));\n\
    \    _arr.forEach((num)=>arr.push(num));\n    return arr;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe \"get_sum()\" function can be replaced with \"return Number(num.split(\"\
    \").reduce((acc,x)=>acc+x%10+acc,0)\"\n<|/ c |>\n<| c |>\nThe code has some bugs.\
    \ For example input `order_by_points([101, 110, 123, -12]); //returns [123, 110,\
    \ 101, -12, 11]`. It should be `-12` in the end.\n<|/ c |>\n<| c |>\nHi, you are\
    \ correct. I have corrected the code now. Thank you!\n<|/ c |>\n<| c |>\nI tested\
    \ your code and it is working perfectly. Thank you!\n<|/ c |>\n<| c |>\nI am glad\
    \ I could help!\n<|/ c |>\n<| a |>\nThe reason this doesn't work is because you\
    \ are sorting strings. I did this exercise for my programming class, for which\
    \ the solution was to use parseInt on the summed digits, after applying the sum\
    \ mod 10 to each digit, e.g.\n\nvar numbers = [\n  1, 11, -1, -11, -12\n];\n\n\
    <code>\nvar numbers = [\n  1, 11, -1, -11, -12\n];\n", "  return nums.sort(function(a,\
    \ b){\n    var x = a.split('').reduce(function(a, b){\n      return parseInt(a)\
    \ + parseInt(b)\n    }, 0);\n    var y = b.split('').reduce(function(a, b){\n\
    \      return parseInt(a) + parseInt(b)\n    }, 0);\n    return x - y\n  });\n\
    }", "  var ordered = [];\n  nums.forEach(function(point){\n    ordered[point]\
    \ = nums.filter(function(n){ return n <= point })\n      .sort(function(a,b){\n\
    \        return Math.abs(a - b) - Math.abs(Number(a) - Number(b));\n      });\n\
    \  });\n  return ordered;\n}", "  var newnums=[];\n  for(var i=0;i<nums.length;i++){\n\
    \    var num=nums[i];\n    var dig_sum=num.toString().split('').sort((a,b)=>b-a).join('');\n\
    \    if(nums.indexOf(num)<0){\n      newnums.push(num);\n      if(newnums.indexOf(dig_sum)>-1){\n\
    \        newnums.splice(newnums.indexOf(dig_sum),1);\n      }\n    }else{\n  \
    \    newnums.splice(newnums.indexOf(dig_sum),0,num);\n    }\n  }\n  return newnums;\n\
    }", "\tnums.sort(function(a, b){\n\t\tsumA = sumA + Number(a.toString().substr(0,\
    \ 1));\n\t\tsumB = sumB + Number(b.toString().substr(0, 1));\n\t\tif (sumA !=\
    \ sumB){\n\t\t\treturn sumA - sumB;\n\t\t} else {\n\t\t\treturn a.toString().localeCompare(b.toString());\n\
    \t\t}\n\t});\n\treturn nums;\n}\n", "\tnums.sort(function(a, b){\n\t\tvar sumA\
    \ = point_sum(a);\n\t\tvar sumB = point_sum(b);\n\t\tif(sumA !== sumB){\n\t\t\t\
    return sumA-sumB;\n\t\t}\n\t\treturn a-b;\n\t});\n\treturn nums;\n}\n", "  return\
    \ nums.sort((a, b) => a - b).reduce((arr, item) => {\n    const sum = Math.round(item\
    \ / 10) % 10\n    const index = arr.findIndex(item => item > 0 && sum === item)\n\
    \    if(index > -1) arr[index] = item\n    else arr.push(item)\n    return arr\n\
    \  }, []).sort((a, b) => a - b)\n}\n", "  //Write your code here\n}\n</cell>\n\
    <cell>", "   nums = nums.slice();\n   nums.sort(function(a,b){\n      var sumA\
    \ = sum(b);\n      var sumB = sum(a);\n      if(sumA > sumB){\n         return\
    \ 1;\n      }\n      else if(sumA == sumB){\n         return 0;\n      }\n   \
    \   else{\n         return -1;\n      }\n   });\n   return nums;\n}\nvar a = [1,11,-1,\
    \ -11, -12]", "    var result = nums.slice();\n    result.sort((a,b)=>{\n    \
    \    return a-b\n    });\n    return result;\n}\n", "  var arr = [];\n  var results\
    \ = [];\n  for(var i = 0, n = nums.length; i < n; i++){\n    var num = (nums[i]\
    \ < 0) ? -nums[i] : nums[i];\n    var index = arr.indexOf(num);\n    if(index\
    \ > -1){\n      var sum = sumDigits(num);\n      arr.splice(index, 1);\n     \
    \ results.push(nums[index]);\n      arr.splice(index, 0, num);\n    }else{\n \
    \     arr.push(num);\n      results.push(num);\n    }\n  }\n  if(arr.length >\
    \ 0){\n    results.sort(function(a, b){\n      return sumDigits(b) - sumDigits(a);\n\
    \    });\n  }\n  return results.reverse();\n}\n", "   nums = nums.map(parseFloat);\n\
    \   return nums.sort(function(a,b){\n      return Math.abs(b-a);\n   });\n}\n\
    </cell>\n<cell>\n# Write a function which returns a list of numbers\n# in descending\
    \ order, according to their value.", "  var a = nums.concat().sort(function(a,\
    \ b){\n    return (a > b)? 1: ((a < b)? -1 : 0);\n  });\n  return a;\n}\n</cell>\n\
    <cell>\nprint(order_by_points([]));\n</cell>\n<text>\nPart 3: Count and Sum II\n\
    Write a function that counts the number of digits in each positive number of the\
    \ given list.\nFor example, [1, 2, 3] has 3 digits and [1, 2, -2, 3] has 2 digits.\
    \ Make sure it works in edge cases.\nNote that in mathematics, a positive number\
    \ with N digits has N - 1 digits. So the digit count of an integer is the sum\
    \ of its digits, not the number itself.\nExamples:\ncount_digits(123) \u2192 2\
    \ digits, [1, 2, 3] has 3 digits\ncount_digits(-123) \u2192 1 digit, [1, 2, 3]\
    \ has 3 digits\ncount_digits(0) \u2192 0 digits, [1, 2, 3] has 3 digits\ncount_digits(1)\
    \ \u2192 0 digits, [1, 2, 3] has 3 digits\ncount_digits(12) \u2192 2 digits, [1,\
    \ 2, 3] has 3 digits\ncount_digits(1234) \u2192 3 digits, [1, 2, 3] has 3 digits\n\
    count_digits(-1234) \u2192 2 digits, [1, 2, 3] has 3 digits\ncount_digits(-123456789)\
    \ \u2192 5 digits, [1, 2, 3] has 3 digits\ncount_digits(-0.1) \u2192 0 digits,\
    \ [1, 2, 3] has 3 digits\ncount_digits(1.0) \u2192 0 digits, [1, 2, 3] has 3 digits\n\
    count_digits(1.000) \u2192 1 digit, [1, 2, 3] has 3 digits\ncount_digits(9.999999)\
    \ \u2192 6 digits, [1, 2, 3] has 3 digits\n\n\n</text>\n<cell>", "  let res =\
    \ [];\n  nums.forEach((n)=>{\n    let s = sum_of_digits(n);\n    let index = nums.indexOf(n);\n\
    \    let i = nums.indexOf(nums.reduce((a,b)=>a+b, 0));\n    let j = nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0));\n    if(s!==0 && nums.indexOf(nums.reduce((a,b)=>a+b, 0))==0){\n      res.push(n);\n\
    \    }\n    if(index!==-1 && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))==0){\n      res.push(nums[index]);\n    }\n    if(index!==-1 && index!==i\
    \ && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))<nums.indexOf(n)){\n      res.push(nums[index]);\n    }\n    if(index!==-1\
    \ && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 &&\
    \ nums.indexOf(nums.reduce((a,b)=>a+b, 0))>nums.indexOf(n)){\n      res.push(nums[index]);\n\
    \    }\n    if(index!==-1 && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b, 0))==nums.indexOf(n)){\n    \
    \  res.push(nums[index]);\n    }\n    if(index!==-1 && index!==i && index!==j\
    \ && nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 && nums.indexOf(nums.reduce((a,b)=>a+b,\
    \ 0))>nums.indexOf(n)){\n      res.push(nums[index]);\n    }\n    if(index!==-1\
    \ && index!==i && index!==j && nums.indexOf(nums.reduce((a,b)=>a+b, 0))!=0 &&\
    \ nums.indexOf(nums.reduce((a,b)=>a+b, 0))<nums.indexOf(n)){\n      res.push(nums[index]);\n\
    \    }\n  });\n  return res;\n}\n", "    nums.sort(function(a, b){\n        var\
    \ i, diff, sum = 0, a_digit, b_digit, a_sum, b_sum;\n        // First compare\
    \ the sum of the digits of both numbers\n        for(i=0;i<nums.length;i++){\n\
    \            a_digit = nums[i]%10;\n            b_digit = nums[i+1]%10;\n    \
    \        diff = a_digit - b_digit;\n            sum  = sum + diff;\n        }\n\
    \        // After that, if one number has more digits than the other,\n      \
    \  // compare the sum of the digits of both numbers\n        a_sum  = sum;\n \
    \       b_sum  = sum;\n        for(i=nums.length-1;i>0;i--){\n            a_digit\
    \ = nums[i]%10;\n            b_digit = nums[i-1]%10;\n            diff = a_digit\
    \ - b_digit;\n            sum  = sum + diff;\n        }\n        // Finally, return\
    \ -1 if both numbers have the same sum, otherwise\n        // return the original\
    \ number from the input list\n        return sum===a_sum?-1:nums;\n    });\n \
    \   return nums;\n}\n</code>\n<|/ a dscore=3 tags=sorting,javascript |>\n<| c\
    \ |>\nNice! I'd like to note though that this is O(n^2) in the number of digits,\
    \ rather than O(n log n) in the number of elements. Of course this is a very small\
    \ number compared to the size of the input list, but still, it could be an issue\
    \ for large inputs.\n<|/ c |>\n<| a tags=sorting,javascript |>\nUse this algorithm:\n\
    \nSplit the numbers into groups of n digits each (e.g. with substr function on\
    \ String).\nFor each group:\n\nSum up all digits of the group.\nRemove the last\
    \ digit from the group (so each group will have exactly one digit).\nIf the remaining\
    \ group has exactly one digit, add it to the sorted list.\nIf the remaining group\
    \ has two digits, compare the sum of two last digits of the group with the sum\
    \ of two digits of the remaining group. If they are equal, compare the first two\
    \ digits. If they are equal, compare the first digit. If they are equal, compare\
    \ the second digit.\n\nIf the length of the list is not even, the last group might\
    \ not be a single digit. In this case you just add it to the sorted list. This\
    \ will always give you a sorted list with a single digit in the end.\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis should work, and is probably the easiest solution, but it\
    \ will also give you a list with the last digit of every group swapped.\n<|/ c\
    \ |>\n<| c |>\nYes, I just noticed that. I fixed my answer to just put the last\
    \ digit of every group in the correct position.\n<|/ ", "  var _sum = 0;\n  var\
    \ _max = Math.max.apply(Math, nums);\n  return nums.map(function(num){\n    _sum\
    \ = Math.max(_sum, num);\n    return _sum;\n  }).sort(function(a, b){\n    return\
    \ b-a;\n  }).map(function(num){\n    return num % 10;\n  });\n}", "\treturn nums.sort((a,b)=>{\n\
    \t\tif(isZero(a)){\n\t\t\treturn 1;\n\t\t}else if(isZero(b)){\n\t\t\treturn -1;\n\
    \t\t}else if(a[0]<b[0]){\n\t\t\treturn -1;\n\t\t}else if(a[0]>b[0]){\n\t\t\treturn\
    \ 1;\n\t\t}else{\n\t\t\treturn order_by_points(a.slice(1)).concat(order_by_points(b.slice(1)));\n\
    \t\t}\n\t});\n}\n", "   const sorted_nums = nums.map(num => {\n    const sum =\
    \ (num.toString().match(/\\d/g) || []).reduce((sum, digit) => sum + digit, 0);\n\
    \    return sum;\n   });\n   nums.sort((a, b) => a - b);\n   return sorted_nums;\n\
    }\n", "  return nums.sort((a,b)=>{\n    if(a.num>b.num)\n      return 1\n    if(a.num<b.num)\n\
    \      return -1\n    return 0\n  })\n}\n", "  var n = nums.length,\n    cost\
    \ = nums.reduce(function(p,c){\n      return p+c;\n    });\n  return nums.sort(function(a,b){\n\
    \    return cost - Math.abs(a - b);\n  }).map(function(_,i){\n    return nums[i];\n\
    \  });\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++){\n    sum\
    \ += nums[i];\n  }\n  nums.sort((a,b)=>sum-a-b);\n  return nums;\n}", "  let result\
    \ = [];\n  let len = nums.length;\n  for (let i = 0; i < len; i++){\n    let sum\
    \ = 0;\n    for (let j = i + 1; j < len; j++){\n      sum += nums[j];\n    }\n\
    \    result.push(nums[sum === 0 ? len - i + 1 : sum]);\n  }\n  return result;\n\
    }", "\tvar sums = new Array(nums.length),\n\t\tmax_sum = 0,\n\t\tmax_index;\n\t\
    for(var i = 0; i < nums.length; i++){\n\t\tsums[i] = nums[i].toString().split('').reduce(function(sum,\
    \ item){\n\t\t\treturn sum + parseInt(item, 10);\n\t\t}, 0);\n\t\tif(sums[i] >\
    \ max_sum)\n\t\t\tmax_sum = sums[i];\n\t\tif(max_sum === 0)\n\t\t\tmax_index =\
    \ i;\n\t}\n\tnums.sort(function(x, y){\n\t\treturn sums[max_index] - sums[y];\n\
    \t});\n\treturn nums;\n}\n", "  nums.sort((a,b) => (b-a));\n  for (let i = 0;\
    \ i < nums.length; i++){\n    let j = nums[i];\n    nums[i] = nums[j];\n    nums[j]\
    \ = j;\n  }\n  return nums;\n}\n", "    var len = nums.length,\n        sortFn\
    \ = function(n1, n2){\n            var tmp = n1.point,\n                n1_p =\
    \ n1.point,\n                n1_n = n1.n,\n                n2_p = n2.point,\n\
    \                n2_n = n2.n,\n                sum = tmp + n1_p + n2_p,\n    \
    \            swap = n1_n < n2_n ? -1 : 1,\n                i,\n              \
    \  tmp_p,\n                tmp_n;\n            if(sum < 0){\n                tmp\
    \ = -sum;\n                swap = -1;\n            }\n            tmp_n = n1_n;\n\
    \            tmp_p =  n1_p + n2_p;\n            for(i = 0; i !== len; i = ++i){\n\
    \                tmp += nums[i];\n                tmp_p = tmp + nums[swap + i];\n\
    \                if(tmp_p > tmp){\n                    swap = i;\n           \
    \     }\n            }\n            if(swap === -1){\n                return 1;\n\
    \            }else if(swap === 1){\n                return -1;\n            }\n\
    \            return tmp;\n        };\n    if(!len){\n        return [];\n    }\n\
    \    nums.sort(sortFn);\n    return nums;\n}\n", "\tnums = nums.sort(function(a,b){\n\
    \t\treturn a+b%10\n\t})\n\treturn nums.map(function(x){\n\t\treturn x%10\n\t}).sort(function(a,b){\n\
    \t\treturn a-b\n\t})\n}", "    var ret = [];\n    var len = nums.length;\n   \
    \ var index = 0;\n    for (var i = 0; i < len; i++){\n        if (nums[i] > 0){\n\
    \            ret.push(nums[index]);\n            index++;\n        }\n    }\n\
    \    return ret;\n}\n", "  const n = new Map()\n  const points = new Array()\n\
    \n  for (let i = 0; i < nums.length; i++){\n    const sum = Math.floor(nums[i]/10)\n\
    \n    if (n.has(sum)){\n      n = n.get(sum)\n      n.push(i)\n    } else {\n\
    \      n.set(sum, [i])\n    }\n  }\n\n  for (let i = 0; i < n.size; i++){\n  \
    \  points.push(...n.get(i))\n  }\n\n  return points.sort()\n}\n</code>\n<|/ a\
    \ tags=python |>\n<| c |>\nThe first solution doesn't work for me, though, because\
    \ it sorts [-10, 0, -10] into [-10, -10, 0] and [-10, 0] into [-10, 0].\n<|/ c\
    \ |>\n<| c |>\nThanks for the catch. I edited the code so that now it works with\
    \ negative numbers\n<|/ c |>\n<| a tags=python |>\nThe solution is simply to sort\
    \ the list first, and then loop through the sorted list, extracting only elements\
    \ that are greater than or equal to the previous one. Here's how I would do it:\n\
    <code>\ndef order_by_digits(nums):\n    # sort first\n    nums.sort()\n\n    digits\
    \ = [int(c) for c in str(sum(nums))]\n    indices.clear()\n\n    for i, v in enumerate(digits):\n\
    \        if v <= digits[i-1]:\n            indices.append(i)\n\n    # return the\
    \ sorted list\n    return nums[indices]\n</code>\nTest\n<code>\n>>> order_by_digits([10,\
    \ 20, 30, 40])\n[10, 30, 40, 20]\n</code>\n<|/ a dscore=3 |>\n<| a dscore=1 |>\n\
    A solution using Python's heapq:\n<code>\ndef order_by_digits(nums):\n    sum_of_digits\
    \ = [sum(n) for n in nums]\n    # heap sort\n    heapq.heapify(sum_of_digits)\n\
    \n    # extract digits and get new index\n    new_digits = [int(n) for n in str(sum(sum_of_digits))]\n\
    \    idx = [i for (i,n) in enumerate(new_digits) if n >= new_digits[i-1]][0]\n\
    \n    # return\n    return nums[idx]\n</code>\n<|/ a tags=python |>\n<| a tags=python\
    \ |>\nThis solution is also faster than the other solutions listed here (the timeit\
    \ module is useful here).\n<code>\ndef order_by_digits(nums):\n  nums.sort(reverse=True)\n\
    \  digits = [int(n) for n in str(sum(nums))]\n  indices.clear()\n\n  for i, v\
    \ in enumerate(digits):\n    if v <= digits[i-1]:\n      indices.append(i)\n\n\
    \  return nums[indices]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is ", "\tvar\
    \ sum=0;\n\tvar nums_len=nums.length;\n\tif(nums_len==0){return nums;}\n\tnums.sort(function(a,\
    \ b){\n\t\tvar sum=(a+b);\n\t\treturn (sum%10==0)? (sum/10)*nums_len : sum;\n\t\
    });\n\treturn nums;\n}\n", "    var sum, digit;\n    if(nums.length == 0){\n \
    \       return nums;\n    }\n    digit = 0;\n    sum = 0;\n    for(var i = 0;\
    \ i < nums.length; i++){\n        digit = nums[i] - '0';\n        sum += digit*Math.pow(10,\
    \ digits.length-i);\n    }\n    return nums.sort(function(a, b){\n        return\
    \ sum - Math.abs(a - b);\n    });\n}\n", "  var a = [];\n  nums.forEach(function(num){\n\
    \    a[0] += num;\n    a.splice(1, 0, num);\n  });\n  return a.sort(function(a,\
    \ b){\n    return a - b;\n  }).map(function(num, i){\n    return nums.splice(i,\
    \ 1)[0];\n  });\n}\n", "  var ret=[];\n  nums.forEach(function(n,i){\n    var\
    \ sum=i?0:n.length;\n    for(var j=sum;j;j--)sum=(sum+(Number(n[j])||0))%10;\n\
    \    ret[ret.length]=sum;\n  });\n  return ret;\n}", "  return nums.sort((a,b)\
    \ => {\n    const sum = (a + b).toString().split('').reduce((a,b) => a + +b, 0);\n\
    \    if (sum === 0) {\n      return 0\n    }\n    return sum - a > sum - b ? 1\
    \ : -1\n  })\n}\n\n", "\treturn nums.sort(function(a, b){\n\t\tvar aInt = Math.floor(a/10),\
    \ bInt = Math.floor(b/10);\n\t\treturn (aInt + bInt) - (aInt * bInt);\n\t});\n\
    }\n\n", "\treturn nums.sort(function(a, b){\n\t\tvar a_num = parseInt(a), b_num\
    \ = parseInt(b), sum = 0;\n\t\twhile(a_num > 0){\n\t\t\tsum += a_num % 10;\n\t\
    \t\ta_num = Math.floor(a_num/10);\n\t\t}\n\t\twhile(b_num > 0){\n\t\t\tsum +=\
    \ b_num % 10;\n\t\t\tb_num = Math.floor(b_num/10);\n\t\t}\n\t\tif(sum == 0){\n\
    \t\t\treturn a_num - b_num;\n\t\t}else{\n\t\t\treturn sum - b_num;\n\t\t}\n\t\
    });\n}\n\n", "  var sorted = nums.slice().sort();\n  var result = [];\n  var temp\
    \ = 0;\n  for (var i = 0; i < nums.length; i++) {\n    temp = sorted[i] + temp;\n\
    \    if (temp < 0 || temp > 9) {\n      result.push(nums[i]);\n    }\n  }\n  return\
    \ result;\n}", "    var sum = 0;\n    var index = 0;\n    nums.sort(function(a,\
    \ b){\n        sum += Math.pow(10, nums.length - index - 1);\n        if(!b) return\
    \ 0;\n        index ++;\n        return sum - b;\n    });\n}", "    nums.sort(function(a,b){return\
    \ a+b-a});\n    return nums;\n}\n</cell>\n<cell>\norder_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<cell>\norder_by_points([]) ==\
    \ []\n</cell>\n<text>\nGreedy Algorithm\n\n</text>\n<text>\nGreedy algorithm is\
    \ a best-first search algorithm with a running time of $O(n)$\n\n\n</text>\n<text>\n\
    Pseudocode:\nInitialize a list S with $0$\nFor each number n in G:\n\nAdd n to\
    \ S\nIf S has a sum greater than or equal to $n$, add 1 to T, and remove n from\
    \ G\n\n\nIf the sum of S and G are equal, add 1 to T, and remove all items from\
    \ S\n\n\n\nPrint T\nTime Complexity: $O(n)$\n\n\n</text>\n<cell>", "  var ans\
    \ = []\n  for (var i = 0, n = nums.length; i < n; i++)\n    if (nums[i] > 0)\n\
    \      ans.push(nums[i])\n  for (var i = n - 1; i >= 0; i--)\n    if (nums[i]\
    \ > 0)\n      ans.push(nums[i])\n  return ans\n}\n", "   nums.sort((a,b)=>{\n\
    \   let sum = 0;\n   for(let i=0; i<a.length; i++){\n      sum+=Number(a[i])*Math.pow(10,i);\n\
    \   }\n   return sum-Number(b);\n});\nreturn nums;\n}\n", "    for(var i in nums){\n\
    \        nums.splice(i,1);\n    }\n    nums.sort(function(a,b){\n        var sumA=a.toString().split(''),\n\
    \            sumB=b.toString().split(''),\n            sumAB=0,\n            i;\n\
    \        for(i=0;i<sumA.length;i++){\n            sumAB+=parseInt(sumA[i]);\n\
    \        }\n        for(i=0;i<sumB.length;i++){\n            sumAB+=parseInt(sumB[i]);\n\
    \        }\n        return sumAB-sumA;\n    });\n    return nums;\n}\n", "   \
    \ let ordered = [];\n    let result = [];\n    for(let i = 0; i<nums.length; i++){\n\
    \        let index = nums.indexOf(-nums[i]);\n        let sum = 0;\n        for(let\
    \ j = 0; j < index; j++){\n            sum += nums[j];\n        }\n        for(let\
    \ j = index+1; j < nums.length; j++){\n            sum += nums[j];\n        }\n\
    \        result.push(-sum);\n    }\n    for(let i = 0; i < result.length; i++){\n\
    \        let index = result.indexOf(ordered[i]);\n        ordered.push(nums[index]);\n\
    \    }\n    return ordered;\n}", "  var r = [];\n  nums.forEach(function(num){\n\
    \    var digits = num.toString().split('');\n    var sum_of_digits = digits.reduce(function(a,b){\n\
    \      return a+b;\n    });\n    r.push(num);\n    r.push(sum_of_digits);\n  });\n\
    \  r = r.sort();\n  return r;\n}\n", "    nums.sort(function(a, b){\n        var\
    \ sum = 0;\n        var points = {\n            a:a,\n            b:b\n      \
    \  };\n        var i;\n        for(i = 0; i < 4; i++){\n            var value\
    \ = points[i];\n            if(value){\n                sum += value;\n      \
    \      }\n        }\n        return sum;\n    });\n    return nums;\n}\n", " \
    \   var i, j, sort = function(a, b){\n        return (a-b)*Math.floor(a/b)\n \
    \   }\n    for(i = 0; i < nums.length; i++){\n        for (j = 0; j < nums.length;\
    \ j++){\n            if ( nums[j] > nums[j+1] ){\n                var tmp = nums[j];\n\
    \                nums[j] = nums[j+1];\n                nums[j+1] = tmp;\n    \
    \        }\n        }\n    }\n    return nums;\n}", "    \n    // Write your code\
    \ here\n    \n    var total = 0;\n    var sorted = [];\n    for(var i in nums){\n\
    \        total += nums[i];\n        sorted.push(nums[i]);\n    }\n    return sorted;\n\
    \    \n};\n", "    var newArr = [];\n    var sum = 0;\n    var length = nums.length;\n\
    \    var prevSum = nums[0]; //start with the smallest number\n    for(var i =\
    \ 1; i < length; i++){\n        sum = sum + parseInt(nums[i]); //get the sum of\
    \ the digits\n        var index = sum - prevSum; //get the index of the item with\
    \ the sum of the digits\n        //if this item is smaller, set it to the smallest\
    \ item\n        if(index > 0){\n            newArr[index - 1] = newArr[index -\
    \ 1] || nums[i];\n        }else{\n            newArr[newArr.length] = nums[i];\n\
    \        }\n        prevSum = sum;\n    }\n    return newArr;\n}", "    var result\
    \ = [];\n    nums.map(function(num){\n        if (num > 0){\n            var rem\
    \ = num % 10;\n            var i = result.findIndex(function(item){ return item.rem\
    \ == rem;});\n            if (i == -1){\n                result.push({'rem':rem,'num':\
    \ num});\n            } else {\n                result[i] = result[i].rem + rem;\n\
    \            }\n        }\n    });\n    if (result.length > 0){\n        result\
    \ = result.sort(function(a, b){\n            return b.num - a.num;\n        });\n\
    \        for(var i = 0; i < result.length; i++){\n            if (result[i].rem\
    \ == 0){\n                result = result.splice(i+1,1).concat(result);\n    \
    \        }\n        }\n    }\n    return result;\n}\n", "    let sorted = [];\n\
    \    let store = {};\n    let sum = 0;\n    nums.forEach((n) => {\n        let\
    \ num = (n.toString(10)).split('');\n        sum = sum + Number(num[0]);\n   \
    \     num.splice(0, 1);\n        store.set(sum, num);\n        sorted.push(sum);\n\
    \        sum = 0;\n    });\n    let keys = store.keys();\n    console.log(keys);\n\
    \    return keys.sort().map((key) => {\n        return store.get(key)\n    });\n\
    }\n</code>\n<|/ a tags=data-structures,javascript,algorithm |>\n<| c |>\nWhat\
    \ if there are more than 1 items that share the same sum, for example [10, 7,\
    \ 8, 9, 1, 12, 6, 1, 11] which have the same sum?\n<|/ c |>\n<| c |>\nI added\
    \ an answer that seems to work better then this one.\n<|/ c |>\n<| c |>\nthank\
    \ you for noticing it\n<|/ c |>\n<| c |>\nYou're right that your solution seems\
    \ to work better than the original one. I think the problem is that the `store.set`\
    \ method adds a key only if it doesn't already exist.\n<|/ c |>\n<| c |>\nyes\
    \ thats the problem I had. Can you please tell me how can i avoid this? I mean\
    \ how can i check if a key exist?\n<|/ c |>\n<| a dscore=2 |>\nA very good way\
    \ to sort your array is to transform each number to a string and then to sort\
    \ its characters (this is what sort() does).\n\n<code>\nconst array = [10, 1,\
    \ 7, 8, 9, 1, 12, 6, 1, 11];\n\nconst sortedArray = array.map(n => n.toString())\n\
    \  .sort((a, b) => a.localeCompare(b))\n  .map(n => Number(n));\n", "  const ordered\
    \ = [];\n  const numsSorted = nums.sort(function(a, b){\n    return a - b;\n \
    \ });\n  for(let i = 0; i < numsSorted.length; i++){\n    ordered.push(numsSorted[i]);\n\
    \  }\n  return ordered;\n}\n", "    return nums.sort(function(a, b){\n       \
    \ var x = Math.abs(a), y = Math.abs(b);\n        return x - y;\n    });\n}\n",
  "  var ret = [];\n  for(var i = 0; i < nums.length; i++){\n    if(nums[i] === 0){\n\
    \      ret.push(nums[i]);\n    }else{\n      var digits = Math.log10(nums[i]);\n\
    \      var num = nums[i];\n      while(num > 0){\n        num -= 10;\n       \
    \ ret.push(num);\n      }\n    }\n  }\n  return ret;\n}\n", "    let sortOrder\
    \ = [];\n    let numsCopy = nums.slice();\n    numsCopy.sort((a,b)=>a-b);\n  \
    \  for (let i = 0; i < nums.length; i++){\n        sortOrder.push(numsCopy[i]);\n\
    \    }\n    return sortOrder;\n}\n", "    let n = nums.length;\n    let arr =\
    \ [];\n    for (let i=0; i<n; i++){\n        arr.push([nums[i], i]);\n    }\n\
    \    arr = arr.sort((a,b) => (a[0] < b[0] ? -1 : (a[0] > b[0] ? 1 : 0)));\n  \
    \  arr.sort((a,b) => a[1] - b[1]);\n    return arr;\n}", "    return nums.sort(function(a,\
    \ b){\n        //Find the difference of sum and digits to sort\n        var sumDiff\
    \ = sum_of_digits(a) - sum_of_digits(b);\n        var digitDiff = sum_of_digits(a)\
    \ - sum_of_digits(b);\n\n        //If sumDiff is negative then a must be before\
    \ b\n        if(sumDiff < 0){\n            return -1;\n        }\n        //If\
    \ sumDiff is positive then a must be after b\n        if(sumDiff > 0){\n     \
    \       return 1;\n        }\n\n        //If the difference of sums is 0, then\
    \ sort by digit.\n        //Otherwise, leave this list as it is.\n        return\
    \ digitDiff;\n    });\n}\n", "\tconst max_digit = nums.reduce((max, n) => max\
    \ * 10 + n, [0, 0])[1]\n\tconst sorted_nums = nums.sort((a, b) => b - a)\n\tconst\
    \ sorted_indexs = sorted_nums.map(n => Math.floor(n / max_digit))\n\treturn sorted_indexs.map(i\
    \ => sorted_nums[i])\n}\n", "    let list = new Array(nums.length);\n    let max_sum\
    \ = 0;\n    for(let i = 0; i < nums.length; i++){\n        let current_sum = 0;\n\
    \        for(let j = 0; j < nums[i].length; j++){\n            current_sum +=\
    \ nums[i][j];\n        }\n        if(current_sum > max_sum){\n            list\
    \ = nums.slice();\n            list[i] = current_sum;\n            max_sum = current_sum;\n\
    \        }\n    }\n    return list;\n}\n", "    nums = nums.sort(function(a, b){\n\
    \        return a - b;\n    });\n    nums.reverse();\n    return nums;\n}\n\n\
    var count_letters = function(num){\n    var nums = [];\n    var numstr = \"\"\
    ;\n    var numstr = num.toString();\n    var numlen = numstr.length;\n    for(var\
    \ i=0; i<numlen; i++){\n        nums.push(numstr[i]);\n    }\n    var count_nums\
    \ = order_by_points(nums);\n    var letters = [];\n    for(var i=0; i<count_nums.length;\
    \ i++){\n        letters.push(\"'\" + count_nums[i] + \"'\");\n    }\n    return\
    \ letters;\n}\n", "    var res = [];\n    var hash = {};\n    nums.forEach(function(num){\n\
    \        var numStr = num.toString();\n        hash[numStr] = hash[numStr] ? hash[numStr]\
    \ + 1 : 1;\n        for(var i = numStr.length-1; i >= 0; i--){\n            var\
    \ ch = numStr.charAt(i);\n            var digit = parseInt(ch);\n            var\
    \ preDigit = digit;\n            if(hash[numStr] == 0){\n                res.push(preDigit);\n\
    \                hash[numStr] = 1;\n            }\n            else if(hash[numStr]\
    \ > digit){\n                hash[numStr]--;\n                res.push(preDigit);\n\
    \            }\n            else{\n                hash[numStr]++;\n         \
    \       res.push(digit);\n            }\n        }\n    });\n    return res;\n\
    }\n", "    nums.sort(function(a, b){\n        var x = a.toString().split('').reverse().join('');\n\
    \        var y = b.toString().split('').reverse().join('');\n        return parseInt(x,\
    \ 10) - parseInt(y, 10);\n    });\n    return nums;\n}\n", "\tnums.sort((a,b)=>{\n\
    \t\tlet sum1 = Math.round(a);\n\t\tlet sum2 = Math.round(b);\n\t\tlet d = sum1\
    \ - sum2;\n\t\tif(d == 0){\n\t\t\treturn a.localeCompare(b);\n\t\t}\n\t\treturn\
    \ d;\n\t});\n\treturn nums;\n}\n", "\tif(!nums.length) return nums;\n\tnums.sort(function(a,\
    \ b){\n\t\tvar a_num = Math.abs(a), b_num = Math.abs(b);\n\t\tvar sum_a = a_num.toString().split('').sort().join('');\n\
    \t\tvar sum_b = b_num.toString().split('').sort().join('');\n\t\treturn sum_a\
    \ - sum_b;\n\t});\n\treturn nums;\n}\n", "    var i, j, k, tmp, sorted_nums =\
    \ [];\n    for(i = 0, j = nums.length - 1; i < j; i++){\n        tmp = nums[i]+nums[j];\n\
    \        if(tmp > 0){\n            sorted_nums.push(tmp);\n        }\n       \
    \ else{\n            sorted_nums.push(nums[i]);\n        }\n    }\n    for(i =\
    \ 0, j = nums.length - 1; i < j; i++){\n        for(k = i+1; k < j; k++){\n  \
    \          if(nums[i]+nums[k] < 0){\n                tmp = nums[i] + nums[k];\n\
    \                nums[i] = tmp;\n                nums[k] = tmp;\n            }\n\
    \        }\n    }\n    return sorted_nums;\n}\n", "  let sum = [];\n  let sorted\
    \ = [];\n  nums.forEach((num,index) => {\n    sum[index] = num.toString().split('').reduce((sum,\
    \ digit) => {\n      return sum + parseInt(digit);\n    }, 0);\n  })\n  nums.forEach((num,\
    \ index) => {\n    if(sum[index] == num){\n      sorted.push(num);\n    }\n  });\n\
    \  return sorted;\n}\n", "    var order = [];\n    for (var i = 0, len = nums.length;\
    \ i < len; i++){\n        // Sum all digits in the number\n        var numsSum\
    \ = 0;\n        for (var j = 0, k = i; j < k; j++){\n            numsSum += nums[j].digit;\n\
    \        }\n        // If this is the smallest number in the original list,\n\
    \        // then push the current number into the order\n        if (numsSum <\
    \ 0){\n            order.push(nums[i]);\n        }\n    }\n    return order;\n\
    }\n", "    var arr = [];\n    var len = nums.length;\n    for(var i=0; i< len;\
    \ i++){\n        var num = nums[i];\n        var sum = 0;\n        for(var j=0;\
    \ j<num.length; j++){\n            sum += num[j];\n        }\n        arr.push(sum);\n\
    \    }\n    arr.sort(function(a,b){\n        return a - b;\n    });\n    return\
    \ arr;\n}\n", "    var copy = nums.slice();\n    copy.sort(function(a, b){\n \
    \       return sum_digits(a) - sum_digits(b);\n    });\n    return copy;\n}\n",
  "\tnums.sort(sort_nums);\n}", "\tnums = nums.sort(function(a,b){\n\t\treturn a-b;\n\
    \t});\n\tvar nums2 = nums.map(function(n){return parseInt(n/10,10)});\n\tvar nums3\
    \ = nums2.map(function(n){return parseInt(n/100,10)});\n\tvar nums4 = nums3.map(function(n){return\
    \ parseInt(n/1000,10)});\n\tvar nums5 = nums4.map(function(n){return parseInt(n/10000,10)});\n\
    \tvar nums6 = nums5.map(function(n){return parseInt(n/100000,10)});\n\tvar nums7\
    \ = nums6.map(function(n){return parseInt(n/1000000,10)});\n\tvar nums8 = nums7.map(function(n){return\
    \ parseInt(n/10000000,10)});\n\treturn nums8.sort(function(a,b){return a-b});\n\
    }\n<|/ file filename=main.js source=github dstars=1 |>", "\tvar sorted = nums.sort(function(a,\
    \ b){\n\t\treturn sum_to_digits(a) - sum_to_digits(b);\n\t});\n\treturn sorted;\n\
    }\n", "    return nums.sort((a,b) => {\n        let sumOfDigits = a.toString().split('').reduce((a,b)\
    \ => +a + +b);\n        let indexSumOfDigits = nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b)).indexOf(a.toString());\n        if (sumOfDigits == +a.toString().split('').reduce((a,b)\
    \ => +a + +b) && indexSumOfDigits == +nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b))[indexSumOfDigits]) return 0;\n        else if (sumOfDigits == +a.toString().split('').reduce((a,b)\
    \ => +a + +b) && !indexSumOfDigits && indexSumOfDigits == +nums.map(x => x.toString().split('').reduce((a,b)\
    \ => +a + +b))[0]) return 0;\n        else return +a.toString().split('').reduce((a,b)\
    \ => +a + +b) - +nums.map(x => x.toString().split('').reduce((a,b) => +a + +b))[0]\n\
    \    });\n}\n", "\tvar result = [];\n\tnums.map(function(num){\n\t\tif(num>0){\n\
    \t\t\tnum%10 > 0 ? result.push(num) : result.push(num*-1);\n\t\t}\n\t});\n\treturn\
    \ result;\n}\n", "  //sort the points by their sum\n  return nums.sort((a, b)\
    \ => a+b).filter(num => num > 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
