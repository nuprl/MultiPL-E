name: HumanEval_112_reverse_delete
language: js
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return a tuple containing the result string and True/False\
  \ for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should\
  \ be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
  // For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunction\
  \ reverse_delete(s, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n\
  \  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\"\
  , \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n\
  \  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
  , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
  \", true]);\n}\n\ntest();"
completions: ["  let result = '';\n  let i = 0;\n  for(let j = s.length-1; j >= 0\
    \ ; j--){\n    if(s[j] === c[i]){\n      result  += s[j];\n    }\n    i++;\n \
    \ }\n  return result===c?([result,false]):([result,true]);\n}", "  let r = '';\n\
    \  let f = true;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] !== c[i]){\n\
    \      f = false;\n    }\n  }\n  for(let i = 0; i < s.length - 1 && i < c.length;\
    \ i++){\n    if(s[i] !== c[i]){\n      r += s[i];\n    }\n  }\n  return [r, f];\n\
    }\n", "  let newString = s\n  let reversedString = newString.split('').reverse().join('')\n\
    \  let resultString = ''\n  let check = true\n\n  for(let i = 0; i < reversedString.length;\
    \ i++){\n    if(reversedString[i] !== c){\n      check = false\n    }\n    resultString\
    \ += reversedString[i]\n  }\n\n  return (resultString,check)\n}\n", "  s = s.split(\"\
    \");\n  c = c.split(\"\");\n  for (let i = 0; i < c.length; i++) {\n    let j\
    \ = 0;\n    for (let j = 0; j < s.length; j++) {\n      if (c[i] == s[j]) {\n\
    \        s.splice(j, 1);\n      }\n      j++;\n    }\n  }\n  let rev = s.reverse().join(\"\
    \");\n  if (rev == s) {\n    return (rev, true);\n  }\n  return (rev, false);\n\
    }", "\tvar result = \"\",\n\t\ti = 0;\n\twhile(i < s.length){\n\t\tif(s.substr(i,\
    \ 1) === c.substr(0, c.length)){\n\t\t\tresult += s.substr(0, i);\n\t\t\ts.substr(0,\
    \ i) = '';\n\t\t\tc.substr(0, c.length) = '';\n\t\t\ti += 1;\n\t\t}\n\t\telse{\n\
    \t\t\tresult += s.substr(i, 1);\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn (result,s\
    \ === result);\n}\n", "  var result = [];\n  for(var i=0;i<s.length; i++){\n \
    \   if(s.charAt(i) === c){\n      result.push(s.charAt(i));\n    }else{\n    \
    \  result.push(s.charAt(i));\n    }\n  }\n  if(result === s){\n    return [result.join(\"\
    \"),false];\n  }else{\n    return [result.join(\"\"),true];\n  }\n}\n", "    let\
    \ result = []\n    let resultBool = false\n    for(let i=0; i<s.length; i++){\n\
    \        if(s[i] == c){\n            for(let j=i; j<s.length; j++){\n        \
    \        result[j] = s[j]\n            }\n            resultBool = checkPalindrome(result)\n\
    \            if(resultBool){\n                return (result,resultBool)\n   \
    \         }\n        }\n    }\n}\n", "    // Write your code here.\n    \n   \
    \ var new_s = \"\";\n    var flag = false;\n    for(var i=0;i<c.length;i++){\n\
    \        new_s += s.substr(s.length-1-i,1) + c[i];\n    }\n    if(new_s == s){\n\
    \        flag = true;\n    }\n    return [new_s,flag];\n}\n", "  let result =\
    \ '';\n  let rev_s = reverse(s);\n  let reverse_c = reverse(c);\n  for(let i=0;i<rev_s.length;i++){\n\
    \    if(rev_s[i] == reverse_c[i]){\n      result +=rev_s[i];\n    }\n  }\n  return\
    \ (result,checkPalindrome(result));\n}", "    let reverse = s.split(\"\").reverse();\n\
    \    for(let i =0; i<reverse.length; i++){\n        if(reverse[i] === c){\n  \
    \          reverse.splice(i,1);\n            i--;\n        }\n    }\n    return\
    \ reverse.join(\"\");\n}\n", "    let result = '';\n    for(let i=s.length-1;i>=0;i--){\n\
    \        if(s[i] === c[i]){\n            result += s[i];\n        }\n    }\n \
    \   let reverse = result;\n    let check = true;\n    while(check === true){\n\
    \        let reverse = reverse_delete(reverse,c);\n        if(reverse === reverse){\n\
    \            check = false;\n        }\n    }\n    if(reverse === s){\n      \
    \  return (result,check);\n    }\n    else{\n        return ('',false);\n    }\n\
    }\n", "    let\n        s1 = s.split(\"\"),\n        c1 = c.split(\"\"),\n   \
    \     result = [],\n        flag = false\n        ;\n    for(var i = 0; i < s1.length;\
    \ i++){\n        if(c1.includes(s1[i])){\n            for(let j = i; j > 0; j--){\n\
    \                if(s1[j-1] == c1[j]){\n                    s1[j] = \"\"\n   \
    \                 flag = true\n                }\n                else{\n    \
    \                break\n                }\n            }\n        }\n        else{\n\
    \            result.push(s1[i])\n        }\n    }\n    if(flag){\n        return\
    \ result.join(\"\"),true\n    }\n    else{\n        return result.join(\"\"),false\n\
    \    }\n}", "\tlet newArray = s.split(\"\").reverse().join(\"\"); //reversed array\
    \ of s \n\tlet newString = \"\"; //reversed array of s\n\tlet stringIndex = 0;\n\
    \tlet counter = 0;\n\twhile(stringIndex < newArray.length){\n\t\tif(newArray[stringIndex]\
    \ == c[counter]){\n\t\t\tstringIndex++;\n\t\t\tcounter++;\n\t\t}else{\n\t\t\t\
    newString += newArray[stringIndex];\n\t\t\tstringIndex++;\n\t\t}\n\t}\n\tlet newReversedArray\
    \ = newString.split(\"\").reverse().join(\"\"); //reversed array of the newString\n\
    \tlet newString2 = \"\"; //reversed array of newString\n\tlet stringIndex2 = 0;\n\
    \tlet counter2 = 0;\n\twhile(stringIndex2 < newReversedArray.length){\n\t\tif(newReversedArray[stringIndex2]\
    \ == c[counter2]){\n\t\t\tstringIndex2++;\n\t\t\tcounter2++;\n\t\t}else{\n\t\t\
    \tnewString2 += newReversedArray[stringIndex2];\n\t\t\tstringIndex2++;\n\t\t}\n\
    \t}\n\tlet result = (newString2 === newString);\n\treturn (result,newArray===newString)\n\
    }", "    let reverse = s.split('').reverse().join('');\n    let res = reverse.split(c).join('');\n\
    \    let check = res.split(reverse).join('');\n    return (check === s)\n}\n",
  "\tlet result = []\n\tlet reverse = \"\"\n\tfor (let i = 0;i < s.length;i++){\n\t\
    \tlet index = i\n\t\twhile ((index > 0) && (s[index-1] == c[index])){\n\t\t\t\
    index--\n\t\t}\n\t\tresult.push(s.slice(index, i))\n\t}\n\tfor (let i = 0;i <\
    \ result.length; i++){\n\t\treverse = reverse + result[i]\n\t}\n\tconsole.log(reverse)\n\
    \treturn reverse\n}\n", "    let arr = s.split(\"\");\n    let resStr = \"\";\n\
    \    let checker = false;\n    for (let i =0; i < arr.length; i++){\n        if\
    \ (arr[i]===c){\n            checker = true;\n            arr[i] = \"\"; //delete\
    \ element\n        }\n        resStr += arr[i];\n    }\n    let finalStr = resStr;\n\
    \    for (let i = resStr.length-1; i > 0; i--){\n        finalStr += resStr[i]\n\
    \    }\n    finalStr = finalStr.split(\"\").reverse().join(\"\");\n    let test1\
    \ = finalStr === s;\n    let test2 = finalStr === s;\n    return checker,test1,test2;\n\
    }\n", "    //code here\n}\n", "    var newStr = [];\n    for(var i = 0;i<c.length;i++)\n\
    \        if(s.indexOf(c[i])==-1)\n            newStr.push(s.slice(i,i+1))\n  \
    \  console.log(newStr);\n    if(newStr.join()==s)\n        return (s,true)\n \
    \   return (s,false)\n}\n", "    let flag = true\n    let i = 0\n    let result\
    \ = []\n    for(; i < s.length; i++){\n        if(s[i] === c){\n            result.push(s[i])\n\
    \        }else{\n            result.push(s[i])\n            flag = false\n   \
    \         break\n        }\n    }\n    return result ,flag\n}\n", "    let result\
    \ = '';\n    let check = false;\n    let i;\n    let j;\n    for(i = 0; i < s.length;\
    \ i++){\n        result+=s[i];\n    }\n    let resultString = '';\n    for(j =\
    \ 0; j < result.length; j++){\n        if(result[j] === c[j]){\n            resultString\
    \ += result[j];\n        }else{\n            break;\n        }\n    }\n    if(result.length\
    \ === resultString.length){\n        resultString = resultString.split('').sort().join('');\n\
    \        check = true;\n    }\n    if(check === true){\n        return ([resultString,\
    \ check]);\n    }\n    else{\n        return ([resultString, check]);\n    }\n\
    }\n", "  let tempString = '';\n  let result = '';\n  \n  for (let i of s.split(\"\
    \")){ \n    if (i === c) continue; \n    tempString += i; \n  }\n  \n  result\
    \ = tempString + result;\n  \n  if(tempString.length < s.length){\n      result\
    \ += '' + s.split(\"\").reverse().join(\"\");\n  }\n  \n  return (result, tempString\
    \ === result);\n}\n", "    let arr = s.split(\"\");\n    let result = \"\";\n\
    \    for(let i = 0; i < arr.length; i++){\n        if (arr[i] === c){\n      \
    \      arr.splice(i, 1);\n        }\n        result += arr[i]\n    }\n    return\
    \ result + arr.reverse().join(\"\");\n}\n", "\tvar result = \"\", i = 0; \n\t\
    while( i < s.length && i >= 0 ){\n\t\tif( s.charAt(i) == c.charAt(i) )\n\t\t\t\
    result  = result + s.charAt(i); \n\t\ti--;\n\t}\n\tif(i == s.length){\n\t\treturn\
    \ (''+result,true);\n\t}\n\telse{\n\t\treturn (''+result,false);\n\t}\n}\n", " \
    \   let chars = s.split('');\n    let result = chars.filter((item)=>item == c).join('');\n\
    \    if(chars.reverse().join('') === result)\n    return ('True', true)\n    return\
    \ ('False', false)\n}\n", "\tvar result=\"\";\n\tvar bool=false;\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tvar x=s.substr(i,1);\n\t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\
    \t\t\tresult=result.concat(x);\n\t\t\tbool=true;\n\t\t}else{\n\t\t\tbool=false;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<c.length;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<s.length-1;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<s.length-1;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<s.length-1;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<s.length-1;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\";\n\tfor(var i=0;i<s.length-1;i++){\n\t\tvar x=s.substr(i,1);\n\
    \t\tvar y=c.substr(i,1);\n\t\tif(x.toString()==y.toString()){\n\t\t\tbool=true;\n\
    \t\t}\n\t}\n\treturn([result,bool]);\n}\nvar x=function(s,c){\n\tvar bool=false;\n\
    \tvar result=\"\"", "    if(s.length==0){\n        console.log(\"Please insert\
    \ a string\");\n        return;\n    }\n\n    if(c===\"\"){\n        let new_s=\"\
    \";\n        for(let i=0; i< s.length; i++){\n            if(s[i]==s[i]){\n  \
    \              new_s += s[i];\n            }\n        }\n        return new_s;\n\
    \    }\n    let news=\"\";\n    let counter=0;\n    let new_s=\"\";\n    for(let\
    \ i=0; i< s.length; i++){\n        let k=i;\n        for(let j=0; j< c.length;\
    \ j++){\n            if(s[k] == c[j]){\n                k = k+1;\n           \
    \ }\n        }\n        new_s += c[k];\n        for(let j=0; j< c.length; j++){\n\
    \            if(s[k] == c[j]){\n                k = k+1;\n            }\n    \
    \    }\n        news+=c[k];\n    }\n    \n    return news,(\n        new_s ===news\n\
    \    );\n}\n", "    let revs = \"\";\n    let revc = '';\n    let final = '';\n\
    \    for(let i = s.length - 1; i >= 0; i--){\n        if(s[i] === c){\n      \
    \      revs += s[i];\n        }\n        else{\n            if(revs.length > 0){\n\
    \                final = revs + revc;\n                revs = \"\";\n        \
    \        revc = '';\n            }\n        }\n    }\n    if(revs.length > 0){\n\
    \        final = revs + revc;\n    }\n    \n    if(final == s){\n        return\
    \ (final,true);\n    }\n    else{\n        return (final,false);\n    }\n}\n",
  "    let reverseStr = s.split(\"\").reverse().join(\"\");\n    if(c === reverseStr){\n\
    \        return (s, true);\n    }\n    return (s, false);\n}\n", "    let result\
    \ = [...s]\n    let resultReverse = [...s].reverse()\n    let resultString = ''\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s[i] === c){\n           \
    \ continue\n        }\n        resultString = resultString + s[i]\n    }\n   \
    \ resultString = resultString + resultReverse[0]\n    return resultString, resultString.split(resultString).every((value,index)=>value\
    \ !== resultString[index])\n}\n", "  let rev = s.split('');\n  rev.reverse();\n\
    \  let newArr = rev.concat(c);\n  let newString = '';\n  for (let i = 0; i <=\
    \ newArr.length/2; i++){\n    newString += newArr[i]\n  }\n  let isPalindrome\
    \ = true;\n  for (let i = 0; i <= newArr.length/2; i++){\n    if (newArr[i] !==\
    \ newArr.slice(i+1).join('')){\n      isPalindrome = false;\n      break;\n  \
    \  }\n  }\n  return (isPalindrome,newString);\n}\n", "    var len = s.length;\n\
    \    var rev = \"\";\n    var isReversed = false;\n    var start = 0;\n    var\
    \ end = 0;\n    var i = s.length;\n    var c;\n    \n    for(var i=0;i<len;i++){\n\
    \        c = s[i];\n        \n        if(c.toLowerCase() === c.toUpperCase()){\n\
    \            isReversed = false;\n        }\n        else{\n            isReversed\
    \ = true;\n        }\n        \n        if(isReversed){\n            end = i +\
    \ 1;\n        }\n        else{\n            start = i;\n        }\n        \n\
    \        rev = rev + c;\n        \n        if(isReversed){\n            reverse(s,\
    \ start, end - 1);\n        }\n    }\n    \n    return (rev, isReversed);\n}\n",
  "\t\n\tlet result = [], temp = \"\"\n\tfor(let i = 0; i < s.length; i++){\n\t\t\
    result.push(s[i])\n\t}\n\tlet startIndex = 0\n\tlet endIndex = 0\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tif(result[i] != c){\n\t\t\tresult[startIndex]\
    \ = result[i]\n\t\t\tstartIndex++\n\t\t}\n\t\tif(startIndex == s.length - 1){\n\
    \t\t\tresult[endIndex] = result[startIndex-1]\n\t\t\tendIndex++\n\t\t}\n\t}\n\t\
    let result = result.slice()\n\tlet reversed = result.map((e)=>{\n\t\treturn e.split(\"\
    \").reverse().join(\"\")\n\t})\n\tlet check = true\n\tfor(let i = 0; i < reversed.length;\
    \ i++){\n\t\tif(reversed[i] != result[i]){\n\t\t\tcheck = false\n\t\t\tbreak\n\
    \t\t}\n\t}\n\treturn [reversed.join(\"\"), check]\n}\n", "    let result=\"\"\n\
    \    let deleted=false\n    for(let i=0;i<s.length;i++){\n        if(s[i] ===\
    \ c){\n            deleted=true\n        }\n        if(deleted){\n           \
    \ result+=s[i]\n            deleted=false\n        }\n    }\n    if(result.length==s.length){\
    \ \n        return (result,true) \n    }else{\n        return (result,false) \n\
    \    }\n}\n", "\ts = s.split(\"\");\n\tc = c.split(\"\");\n\tlet result = \"\"\
    ;\n\tlet check = true;\n\tfor(let i=0; i<s.length; i++){\n\t\tfor(let j=0; j<c.length;\
    \ j++){\n\t\t\tif(s[i].toLowerCase() == c[j].toLowerCase()){\n\t\t\t\ts = s.splice(i,\
    \ 1);\n\t\t\t\ts.unshift(c[j]);\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn (check, s.join(\"\"));\n}\n", "    var rev = \"\";\n \
    \   for (var i = s.length; i >= 0; i--){\n        if (s[i] !== c){\n         \
    \   rev = rev + s[i];\n        } else {\n            break;\n        }\n    }\n\
    \    return (rev, true); \n}\n", "\ts = s.split('');\n\ts = s.filter(c => c !==\
    \ s[s.length - 1]);\n\ts = s.split('').join();\n\treturn [s,s.split('').reduce((a,b)=>a===b)?true:false]\n\
    }\n", "    if (s === null) return null;\n    if (s.length !== c.length) return\
    \ null;\n    let result = [];\n    let i = 0;\n    let end = s.length-1;\n   \
    \ while(i < end){\n        if(s.charAt(i) !== c.charAt(i)){\n            result.push(s.charAt(i));\n\
    \            i++;\n        }\n        else{\n            result.push(s.charAt(i));\n\
    \        }\n    }\n    result.push(s.charAt(end));\n    result.sort();\n    let\
    \ palindrome = result.toString().length === 1;\n    return (palindrome && result.toString()\
    \ === result.reverse().toString()) ? [result.toString(),palindrome] : [null,palindrome];\n\
    }\n", "\tvar i = 0;\n\tvar result = '';\n\twhile (i < s.length){\n\t\tvar index\
    \ = s.indexOf(c, i);\n\t\tif (index == -1){\n\t\t\tresult += s.substring(i, s.length);\n\
    \t\t\tbreak;\n\t\t} else {\n\t\t\tresult += s.substring(i, index+1);\n\t\t\ti\
    \ = index+1;\n\t\t}\n\t}\n\treturn result;\n}\n", "    // Write your code here\n\
    \    return s.split(\"\").reduce((a, c) => (a= a.concat(s.split(c).reduce((b,\
    \ c) => b.concat(s.split(c).reduce((c, d) => (c = c.concat(d), c), '')), ''))),\
    \ a).split(\"\").reduce((a,c) => a.concat(c).reduce((b, c) => b.concat(c), '')).split(\"\
    \").reduce((a,b) => b.concat(a), a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b,\
    \ c) => (c = b.concat(s.split(c).reduce((c, d) => (c = c.concat(d), c), '')),\
    \ ''))), a).split(\"\").reduce((a,b) => a.concat(b), a).split(\"\").reduce((a,b)\
    \ => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(\"\").reduce((a,b) => a.concat(b.split(c).reduce((b, c) => (c = b.concat(s.split(c).reduce((c,\
    \ d) => (c = c.concat(d), c), '')), ''))), a).split(\"\").reduce((a,b) => a.concat(b),\
    \ a).split(", "    let result = [];\n    for(let i=0;i<s.length;i++){\n      \
    \  if(s.charAt(i) == c.charAt(0)){\n            result.push(s.charAt(i));\n  \
    \      }\n    }\n    if(result[0] == result[result.length-1]){\n        return\
    \ [result,true];\n    }else{\n        return [result,false];\n    }\n}\n", "\t\
    if(s.length<=0){\n\t\treturn [\"\",true];\n\t}\n\tvar tmp=s.split(\"\");\n\tfor(var\
    \ i=0;i<c.length;i++){\n\t\tvar x=tmp.pop();\n\t\ttmp.push(x);\n\t}\n\ttmp.reverse();\n\
    \tfor(var i=0;i<tmp.length;i++){\n\t\tif(tmp[i]!=c){\n\t\t\ttmp.reverse();\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn [tmp.join(\"\"),false];\n}", "  let res = [];\n\
    \  for(let i=0;i<s.length;i++){\n    let char = s.charAt(i);\n    if (char ==\
    \ c) res.push(s.substr(0,i) + s.substr(i+1))\n  }\n  let result = res[res.length-1];\n\
    \  if (s == result) return ('',false);\n  return (result,true)\n}\n", "    if(s.length\
    \ < 1){\n        return [s,true];\n    }\n    if(s.split(\"\").reverse().join(\"\
    \") == c){\n        return [s,true];\n    }\n    var sArr = s.split(\"\");\n \
    \   var sArrReverse = sArr.reverse();\n    var result = \"\";\n    var flag =\
    \ false;\n    for(var i = 0; i < sArr.length; i++){\n        if(c == sArrReverse[i]){\n\
    \            result += sArr[i];\n        }else{\n            flag = true;\n  \
    \          break;\n        }\n    }\n    return [result,flag]\n}\n", "    var\
    \ i,j,len,left,right,\n    result=[];\n    \n    len = s.length;\n    left = 0;\n\
    \    right = (len-1);\n    \n    for (i = left; i <= right; i++){\n        if(s[i]\
    \ == c[right]){\n            result.push(s[i]);\n            right--;\n      \
    \  }\n    }\n    \n    if(result === s)\n        return ('True',true);\n    else\n\
    \        return ('False',false);\n}\n", "  if (s.length < 2){\n    return (\"\
    palindrome\", true);\n  }\n  let result = [];\n  for (let i = 0, j = 0; i < s.length;\
    \ i++){\n    if (s.charAt(i) === c.charAt(j)){\n      j++;\n    }\n    else {\n\
    \      result.push(s.charAt(i));\n    }\n  }\n  result.push(s.charAt(s.length\
    \ - 1));\n  if (result.join('') === result.reverse().join('')){\n    return (\"\
    palindrome\", true);\n  }\n  else return (\"palindrome\", false);\n}\n", "   \
    \ s = s.replace(/[^c]/g,\"\");\n    var r = \"\";\n    for(var i=0; i<s.length;\
    \ i++){\n        \n        if(i<s.length-c.length){\n            for(var j=0;\
    \ j<c.length; j++){\n                if(i<s.length-c.length && s[i] == c[j]){\n\
    \                    r += s[i];\n                    break;\n                }\n\
    \            }\n        }\n    }\n    var result = r === s ? (\"True\",True):(\"\
    False\",False);\n    return result;\n}\n", "  // Your code here\n  var i = s.length-1;\n\
    \  var j = c.length-1;\n  var count = 0;\n  var str = '';\n  \n  while(i >= 0\
    \ && j >= 0){\n    if(s[i] === c[j]){\n      count++;\n      i -= 1;\n      j\
    \ -= 1;\n    }\n    else{\n      str += c[j];\n      j -= 1;\n    }\n  }\n  \n\
    \  return (str,count % 2 === 0)\n};\n", "    for(var i=0; i<s.length; i++){\n\
    \        for(var j=0; j<c.length; j++){\n            if(s[i]==c[j]){\n       \
    \         s = s.substr(0, i) + s.substr(i+1);\n                return (s, true);\n\
    \            }\n        }\n    }\n    return (s, false);\n}\n", "    if(s.length<=1){\n\
    \        return 'palindrome'\n    }\n    let i = s.length;\n    let j = 0;\n \
    \   let res = ''\n    while(j<i){\n        if(s[j]===c){\n            s=s.slice(0,j)+s.slice(j+1)\n\
    \            if(s===s.slice(0,s.length)){\n                return (s,true)\n \
    \           }\n            j++\n        }\n        j++\n    }\n}\n", "  //write\
    \ your code here\n  var result=[];\n  for(var i=0;i<s.length-1;i++){\n    if(s.charCodeAt(i)==c.charCodeAt(0)){\n\
    \      result.push(s.substr(i+1,1));\n      i=s.length-1;\n    }\n  }\n  if(result.join(\"\
    \")==s){\n    return (\"True\",true);\n  }\n  else{\n    return (\"True\",false);\n\
    \  }\n}\nvar s1=reverse_delete(\"abcde\",\"ae\");\nvar s2=reverse_delete(\"abcdef\"\
    ,\"b\");\nvar s3=reverse_delete(\"abcdedcba\",\"ab\");", "\t\n\ts = s.toLowerCase();\n\
    \tc = c.toLowerCase();\n\tvar result = []\n\tvar l = s.length;\n\tvar mid = l\
    \ / 2;\n\tvar l2 = c.length;\n\t\n\tfor(var i = 0; i < l; i++){\n\t\tif(s.charAt(i)\
    \ == c.charAt(0)){\n\t\t\t\n\t\t\tresult.push(s.charAt(i));\n\t\t\t\n\t\t\tif(i\
    \ < mid){\n\t\t\t\tif((i + 1) < l2){\n\t\t\t\t\tresult.push(s.charAt(i + 1));\n\
    \t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif((i - mid) < l2){\n\t\t\t\t\tresult.push(s.charAt(i\
    \ - mid));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tresult.reverse();\n\t\n\treturn\
    \ (result.toString() === s.toString()) ? [result.toString(), true] : [result.toString(),\
    \ false];\n}", "    var res = [],\n        flag = false;\n    for (var i = s.length\
    \ - 1; i >= 0; i--){\n        if (s[i] !== c[i]){\n            res.push(s[i]);\n\
    \            flag = true;\n        }\n    }\n    return (res.length === 0 || flag)\
    \ ? (res, false) : [res.reverse().join(''), true];\n}\n", "    let i = 0\n   \
    \ let result = ''\n    \n    while (i<s.length){\n        if (s[i]==c[i]){\n \
    \           i++\n        }\n        else {\n            result += c[i]\n     \
    \       i++\n        }\n    }\n    console.log(result)\n    return (result,true)\n\
    }\n", "  var arr = [];\n  for(var i = 0; i<s.length; i++){\n    var char = s[i];\n\
    \    var isC = false;\n    for(var j=0; j<c.length; j++){\n      if(char === c[j]){\n\
    \        isC = true;\n        break;\n      }\n    }\n    arr.push(isC);\n  }\n\
    \  return [s.split('').filter(function(x){\n    return arr.indexOf(x) != -1;\n\
    \  }), true];\n}", "    if(s == null || c == null){\n        return [s, false]\n\
    \    }\n    let res = []\n    for(let i = 0; i < s.length; i++){\n        if(s.substring(i,\
    \ i + 1) === c){\n            res[res.length - 1] = s.substring(i, i + 1)\n  \
    \      }\n    }\n    return [res.reverse().join(\"\"), true]\n}\n", "    if(s.length<=0)\n\
    \    {\n        return (\"No such string\");\n    }\n    if(s.length<1)\n    {\n\
    \        return (\"No such string\");\n    }\n\n    var result=\"\";\n    var\
    \ flag=false;\n\n    for(var i=0;i<s.length-1;i++)\n    {\n        //console.log(\"\
    i: \"+i+\" c: \"+c+\" s[i]: \"+s[i]);\n        if(s[i]==c){\n            flag=true;\n\
    \            break;\n        }\n    }\n    //console.log(\"flag: \"+flag);\n \
    \   if(!flag)\n    {\n        return (\"No such string\");\n    }\n    for(var\
    \ i=s.length-1;i>=0;i--)\n    {\n        //console.log(\"i: \"+i+\" c: \"+c+\"\
    \ s[i]: \"+s[i]);\n        if(s[i]==c){\n            flag=true;\n            break;\n\
    \        }\n    }\n    //console.log(\"flag: \"+flag);\n    if(!flag)\n    {\n\
    \        return (\"No such string\");\n    }\n    if(flag)\n    {\n        result=s.slice(0,i);\n\
    \    }\n    else\n    {\n        result=s.slice(0,i);\n    }\n    //console.log(\"\
    result: \"+result);\n    return (result,flag);\n}\n", "    var result=\"\";\n\
    \    var check=false;\n    for(i=0;i<s.length-1;i++)\n    {\n      if(s.substr(i,1).indexOf(c)>=0)\n\
    \      {\n        result+=s.substr(i,1);\n      }\n      else\n      {\n     \
    \   check=true;\n      }\n    }\n    return (result,check);\n}", "\t\n\tlet result\
    \ = \"\";\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(c[i] === s[i]){\n\t\t\t\
    let temp = s.slice(0,i) + s.slice(i+1,s.length)\n\t\t\tresult = temp + result;\n\
    \t\t\t//break;\n\t\t}\n\t\telse{\n\t\t\tresult = s.slice(0,i) + result + s.slice(i+1,\
    \ s.length);\n\t\t}\n\t}\n\treturn [result,true]\n\t\n}\n", "    let rs = s.split(\"\
    \");\n    let rc = c.split(\"\");\n    let ans = 0;\n    for(r of rs){\n     \
    \ for(rc of rc){\n        if(r == rc){\n          ans += 1;\n        }\n     \
    \ }\n    }\n    if(ans == rs.length){\n      ans = true;\n    }\n    return rs[ans\
    \ - 1] + \"\", ans;\n  }\n\n  reverse_delete(\"abc\", \"a\");\n  reverse_delete(\"\
    abc\", \"a\");\n  reverse_delete(\"abc\", \"b\");\n  reverse_delete(\"abc\", \"\
    b\");\n  reverse_delete(\"abc\", \"c\");\n  reverse_delete(\"abc\", \"c\");\n\
    \  reverse_delete(\"abc\", \"d\");\n  reverse_delete(\"abc\", \"d\");\n  reverse_delete(\"\
    abc\", \"e\");\n  reverse_delete(\"abc\", \"e\");\n  reverse_delete(\"abc\", \"\
    f\");\n  reverse_delete(\"abc\", \"f\");\n  reverse_delete(\"abc\", \"g\");\n\
    \  reverse_delete(\"abc\", \"g\");\n  reverse_delete(\"abc\", \"h\");\n  reverse_delete(\"\
    abc\", \"h\");\n  reverse_delete(\"abc\", \"i\");\n  reverse_delete(\"abc\", \"\
    i\");\n  reverse_delete(\"abc\", \"j\");\n  reverse_delete(\"abc\", \"j\");\n\
    \  reverse_delete(\"abc\", \"k\");\n  reverse_delete(\"abc\", \"k\");\n  reverse_delete(\"\
    abc\", \"l\");\n  reverse_delete(\"abc\", \"l\");\n  reverse_delete(\"abc\", \"\
    m\");\n  reverse_delete(\"abc\", \"m\");\n  reverse_delete(\"abc\", \"n\");\n\
    \  reverse_delete(\"abc\", \"n\");\n  reverse_delete(\"abc\", \"o\");\n  reverse_delete(\"\
    abc\", \"o\");\n  reverse_delete(\"abc\", \"p\");\n  reverse_delete(\"abc\", \"\
    p\");\n  reverse_delete(\"abc\", \"q\");\n  reverse_delete(\"abc\", \"q\");\n\
    \  reverse_delete(\"abc\", \"r\");\n  reverse_delete(\"abc\", \"r\");\n  reverse_delete(\"\
    abc\", \"s\");\n  reverse_delete(\"abc\", \"s\");\n  reverse_delete(\"abc\", \"\
    t\");\n  reverse_delete(\"abc\", \"t\");\n  reverse_delete(\"abc\", \"u\");\n\
    \  reverse_delete(\"abc\", \"u\");\n  reverse_delete(\"abc\", \"v\");\n  reverse_delete(\"\
    abc\", \"v\");\n  reverse_delete(\"abc\", \"w\");\n  reverse_delete(\"abc\", \"\
    w\");\n  reverse_delete(\"abc\", \"x\");\n  reverse_delete(\"abc\", \"x\");\n\
    \  reverse_delete(\"abc\", \"y\");\n  reverse_delete(\"abc\", \"y", "    let isPalindrome\
    \ = true;\n    let newString = \"\";\n    for(let i = 0; i < s.length; i++){\n\
    \        if(s.charAt(i) != c.charAt(i)){\n            isPalindrome = false;\n\
    \        }else{\n            newString += s.charAt(i);\n        }\n    }\n   \
    \ return (newString,isPalindrome);\n}\n", "    // Write your code here\n    var\
    \ result = ''\n    for(var i = s.length - 1; i >= 0; i--){\n        var current\
    \ = s[i];\n        if(current.indexOf(c) > -1){\n            result += current;\n\
    \        }\n    }\n    return result + s[s.length-1] == c\n}\n", "    // write\
    \ your code\n    if (s.length != c.length){\n        return ['',false];\n    }\n\
    \    let result = [\"\",false];\n    let index = 0;\n    while(index < s.length){\n\
    \        if(s.charAt(index) == c.charAt(s.length - 1)){\n            result.push(s.substr(0,index));\n\
    \            result.push(false);\n            index ++;\n        }\n        else{\n\
    \            result.push(s.substr(0,index));\n            result.push(true);\n\
    \            index ++;\n        }\n    }\n    if(result[1]){\n        return result[0];\n\
    \    }\n    else{\n        return result[1];\n    }\n}", "\ts = s.split(\"\");\n\
    \ts = s.filter( (x) => c !== x);\n\ts = s.join(\"\");\n\treturn (s,s.split(c).length\
    \ === s.split(\"\").length );\n}\n", "    let res = '';\n    for (let i=0; i<s.length;\
    \ i++){\n        if(s.charAt(i) !== c.charAt(i)){\n            res += s.charAt(i);\n\
    \        }\n    }\n    return (res, true);\n}\n", "    // Write your solution\
    \ here\n    return s\n}", "    let rev = c.split(\"\").reverse().join(\"\"); //reversing\
    \ the string c array\n    let result = s.split(\"\").filter(x=>x!=rev).join(\"\
    \"); //getting only the non-equal elements from string s\n    let check = result.split(\"\
    \").reduce((a,b)=>a===b); //checking if the string s is a palindrome\n    return\
    \ ([result,check]);\n}\n</code>\n<code>\nvar result = reverse_delete(\"abcdedcba\"\
    , \"ab\");", "    // your code here\n\tvar i, len=s.length, result='', flag=false;\n\
    \tfor (i=len-1,j=0;i<len;i++,j++){\n\t\tif (s[j] === c[i]){\n\t\t\tj++;\n\t\t\
    }\n\t\tresult += s[j];\n\t}\n\treturn (result, flag);\n}\n", "  var res = [];\n\
    \  for(var i = s.length-1; i >=0 ; i--){\n    if(s[i] == c){\n      res.push(s[i]);\n\
    \    }\n  }\n  if(res.join('') === s){\n    return (res,true);\n  }else{\n   \
    \ return (res,false);\n  }\n}\n", "    var result=\"\"\n    var i=0;\n    var\
    \ res=false;\n    while(i<s.length){\n        if(s[i] === c[i]){\n           \
    \ result+=s[i];\n            i++\n        }\n        else{\n            result+=c[i]\n\
    \        }\n        if(s[i]===c[i]){\n            res=true;\n            i++;\n\
    \        }\n    }\n    return([result,res]);\n}", "\tvar str = s.replace(new RegExp(c,'g'),'');\n\
    \tvar str_len = str.length;\n\tvar reverse = str.split(\"\").reverse().join(\"\
    \");\n\tif (str == reverse && str.length != str_len)\n\t\treturn [str, false];\n\
    \telse\n\t\treturn [reverse, true];\n}\n", "  let rs = \"\";\n  for (let i=0;\
    \ i<s.length; i++){\n    if (s[i] === c[i]){\n      i++;\n    }\n    rs += s[i];\n\
    \  }\n  return (rs, i === s.length);\n}", "  if(s.length <= 1){\n    return s;\n\
    \  }\n  if(s.length < c.length){\n    return s;\n  }\n  const reverse = new Array(s.length).fill(0);\n\
    \  for (let i=s.length - 1; i >= 0; i--) {\n    reverse[i] = c.indexOf(s.charAt(i));\n\
    \  }\n  let result = '';\n  let is_palindrome = true;\n  for (let i = reverse.length\
    \ - 1; i >= 0; i--) {\n    if(reverse[i] === -1){\n      is_palindrome = false;\n\
    \      break;\n    }\n    result += s.charAt(i);\n  }\n  return [result, is_palindrome];\n\
    }\n", "    let result = [];\n    let isPal = true;\n\n    for (let i = 0; i <\
    \ s.length; i++){\n        //delete characters\n        if (s.substring(i, i +\
    \ 1) === c){\n            s.splice(i, 1);\n            \n        }\n        //check\
    \ if deleted\n        if (s.length < 2){\n            result = [];\n         \
    \   return result; \n        }\n        \n    }\n    //check result\n    for (let\
    \ i = 0; i < s.length; i++){\n        if (s[i].toString() !== result[0]){\n  \
    \          isPal = false;\n            break; \n        }\n        \n    }\n \
    \   if (isPal){\n        return [s.join(''), true];\n    }\n    else{\n      \
    \  return [s.join(''), false];\n    }\n}\n\nvar test = [\"abc\", \"b\", \"bc\"\
    , \"cd\", \"abd\"];\nvar c = [\"a\", \"b\", \"c\"];\n\nvar result = reverse(test,c);",
  "\tlet r = \"\";\n\tfor(let i=0; i<s.length; i++){\n\t\tif(s.charAt(i) == c.charAt(i)){\n\
    \t\t\tr+=s.charAt(i);\n\t\t}else{\n\t\t\tr+=c;\n\t\t}\n\t}\n\treturn (r === \"\
    \")?'':(r,r === reverse_delete(r,c));\n}\n", "  let reversed = ''\n  for (let\
    \ i of s) {\n    reversed += c\n  }\n  return reversed.length === s.length &&\
    \ s === reversed\n}\n", "    let result = \"\";\n    let flag = false;\n    for\
    \ (let i = 0; i < s.length; i++) {\n        for(let j = 0; j < c.length; j++){\n\
    \            if (s[i] === c[j]){\n                result += (result.length ==\
    \ 0) ? s.substring(i, j) : s.substring(i, j) + c[j];\n                flag = true;\n\
    \            }\n        }\n    }\n    return { result: result, flag: flag };\n\
    }\n", "    let reverses = [];\n    let result = \"\";\n    for(i=0;i<c.length-1;i++){\n\
    \        reverses = s.split(c[i]);\n        reverses.push(reverses.reverse().join(\"\
    \"));\n        result+=reverses.join(\"\")+c[i];\n    }\n    for(let i=0;i<s.length;i++){\n\
    \        if(s[i]!==c[i]){\n            result+=s[i];\n        }\n    }\n    return\
    \ (result,s.split(c)==result);\n}", "    let reversed = [];\n    let result =\
    \ '';\n    for(let i=0;i<s.length;i++){\n        reversed.push(s[i]);\n    }\n\
    \    for (let i=0;i<reversed.length;i++){\n        if (reversed[i] === c){\n \
    \           for (let j=i+1;j<reversed.length;j++){\n                result+=reversed[j];\n\
    \            }\n            break;\n        }\n    }\n    return [result,reversed.toString()\
    \ === result];\n}\n", "\t\n\tif (s.length <= 0) return s;\n\tif (s.length == 1)\
    \ return s;\n\tif (s.length == 2) return s;\n\tif (c !== s[0]) {\n\t\ts.splice(0,1);\n\
    \t\ts = s.reverse().concat(s);\n\t}\n\t\n\tif (s.indexOf(c) !== -1) return s;\n\
    \t\n\tlet r = reverse_delete(s.slice(1),c);\n\t\n\tif (r === s) return 'True';\n\
    \treturn r + ''; // force string to become a number\n}\n", "  let new_s = s.split(\"\
    \").reverse().join(\"\").split(\"\");\n  let new_c = c.split(\"\").reverse().join(\"\
    \").split(\"\");\n  \n  let check = true;\n  new_s.map((e,i)=>{\n    if(new_c[i]\
    \ !== e){\n      check = false;\n    }\n  })\n  \n  return [new_s,check];\n}\n",
  "    let res = [];\n    let i = 0;\n    while(i<s.length){\n        if(s[i] == c){\n\
    \            i++;\n        }else{\n            res.push(s[i]);\n            i++;\n\
    \        }\n    }\n    if (s.slice(0,i) != res.join()){\n        return (s.slice(0,i),\
    \ false);\n    }\n    return (s.slice(0,i), true);\n}\n", "    let deleted_chars\
    \ = new Set();\n    let result = '';\n    \n    for(let i=0; i<s.length; i++){\n\
    \        if(s.charAt(i) == c.charAt(i)){\n            deleted_chars.add(s.charAt(i));\n\
    \            \n        }\n    }\n    \n    for(let i=s.length-1; i>=0; i--){\n\
    \        if(s.charAt(i) == c.charAt(i)){\n            result += s.charAt(i);\n\
    \        }\n    }\n    \n    if(result === s){\n        return (result,true);\n\
    \    }else{\n        return (result,false);\n    }\n}", "  let result = \"\";\n\
    \  let isPalindrome = true;\n  for (let i = s.length - 1; i >= 0; i--){\n    if\
    \ (s[i] === c){\n      result = result + s[i];\n    }\n  }\n  if (result === s){\n\
    \    isPalindrome = true;\n  } else {\n    isPalindrome = false;\n  }\n  return\
    \ [result,isPalindrome];\n}\n", "  if (s.length == 0) return \"\"\n  return s.slice(0,\
    \ s.length - 1).replace(new RegExp(c, 'g'), x => x == 'a' ? \"\" : \"a\").slice(0,\
    \ s.length - 1).reverse() + s.slice(s.length - 1)\n}\n", "    \n    let reversedString\
    \ = \"\";\n    \n    if(s.length > 0 ){\n        for(let i=s.length; i>0; i--){\n\
    \            if(s.charAt(i) != c.charAt(i)){\n                reversedString =\
    \ s.substring(0, i) + s.substring(i);\n            }\n        }\n    }\n    return\
    \ reversedString;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI ran into this problem\
    \ recently and wanted to share what I found.\nThe accepted answer was helpful\
    \ but it wasn't the most efficient solution.  \nThis one is, however, much more\
    \ efficient:\n<code>\nconst deleteChar = (str) => (c) => {\n  const newStr = str.split(\"\
    \").filter(x => x != c);\n  return newStr.join();\n};\n\ndeleteChar('hello')('o');\
    \ //=> olleh\ndeleteChar('hello')('h'); //=> olleh\n</code>\n<|/ a tags=javascript,algorithm\
    \ dscore=0 |>\n<| c |>\nThis will not work for 'hello'\n<|/ c |>\n<| c |>\n`str.split(\"\
    \").filter(x => x != c)` returns `[\"h\", \"e\", \"l\", \"l\", \"o\"]`. That's\
    \ why it isn't a palindrome.\n<|/ c |>\n<| c |>\nIt doesn't work because `str`\
    \ is not a string, it's a function.\n<|/ c |>\n<| c |>\nAh, so that's why. It\
    \ was my mistake. Thank you. Now I understand.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\nA functional solution (if you're interested in one)\n\n<code>", "    var\
    \ rev = \"\";\n    var flag = false;\n    for(var i=0;i<s.length-1;i++){\n   \
    \     if(s[i] == c){\n            rev = rev + s[i];\n            flag = true;\n\
    \        }\n        else{\n            rev = rev + s[i];\n        }\n    }\n \
    \   return (rev==s,flag);\n}\n", "    let result = \"\";\n    let bool = false;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n       \
    \     result = result + s[i];\n        }\n        else {\n            result =\
    \ result + c;\n            bool = true;\n        }\n    }\n    return result +\
    \ c, bool;\n}\n", "\t// console.log(\"s\");\n\t// console.log(s);\n\t\n\t// console.log(\"\
    c\");\n\t// console.log(c);\n\t\n\t// console.log(\"s\");\n\t// console.log(s);\n\
    \t// console.log(\"c\");\n\t// console.log(c);\n\t\n\t// console.log(\"s\");\n\
    \t// console.log(s);\n\t// console.log(\"c\");\n\t// console.log(c);\n\t\n\tlet\
    \ str = [];\n\tstr = s.split(\"\");\n\tlet reversed = [];\n\treversed = s.split(\"\
    \").reverse();\n\t\n\t// console.log(\"s\");\n\t// console.log(s);\n\t// console.log(\"\
    c\");\n\t// console.log(c);\n\t\n\t// console.log(\"s\");\n\t// console.log(s);\n\
    \t// console.log(\"c\");\n\t// console.log(c);\n\t\n\t// console.log(\"reversed\"\
    );\n\t// console.log(reversed);\n\t\n\t// console.log(\"reversed\");\n\t// console.log(reversed);\n\
    \t\n\t// console.log(\"str\");\n\t// console.log(str);\n\t\n\tlet deleted = false;\n\
    \t\n\t// let arr = [];\n\t\n\t// for(let i=0; i<str.length; i++){\n\t// \tarr.push(str[i]);\n\
    \t// }\n\t\n\t// console.log(\"arr\");\n\t// console.log(arr);\n\t\n\t// for(let\
    \ i=0; i<reversed.length; i++){\n\t// \tarr.push(reversed[i]);\n\t// }\n\t\n\t\
    // console.log(\"arr\");\n\t// console.log(arr);\n\t\n\tfor(let i=0; i<str.length;\
    \ i++){\n\t\tif(arr[i] != c){\n\t\t\tdeleted = true;\n\t\t}\n\t}\n\t\n\t// console.log(\"\
    deleted\");\n\t// console.log(deleted);\n\t\n\tif(deleted){\n\t\treturn (reversed.join(\"\
    \"),true);\n\t}else{\n\t\treturn (reversed.join(\"\"),false);\n\t}\n}\n", "  \
    \  let str = s.split(\"\");\n    \n    let res = \"\";\n    \n    // Loop through\
    \ the characters in the input string\n    for(let i = 0; i < str.length; i++){\n\
    \        // Check if the character is in c\n        if(c.indexOf(str[i]) > -1){\n\
    \            // If it's in c then replace it with an empty string\n          \
    \  str[i] = \"\";\n        }\n        \n        // Add the current character to\
    \ the new string\n        res += str[i];\n    }\n    \n    // If all the characters\
    \ didn't have to be replaced, then the original string is a palindrome\n    if(str\
    \ === res.split(\"\")){\n        return (res, true);\n    }\n    \n    // Return\
    \ null to denote that it's not a palindrome\n    return null;\n}\n", "    var\
    \ newString = [];\n    s.split(\"\").forEach(function(c){\n        if(c.toLowerCase()\
    \ === c.toUpperCase()){\n            newString.push(c);\n        }\n    })\n \
    \   var reversedString = newString.reverse();\n    var newString2 = reversedString.join(\"\
    \");\n    var re = new RegExp(\"[^\" + c + \"]\");\n    \n    var result = re.test(newString2);\n\
    \    return  ([newString2, result]);\n}\n\nvar reverseDelete = reverse_delete(s,c);\n\
    if(reverseDelete[1] === true){\n    return (reverseDelete[0], true);\n}\nelse{\n\
    \    return (reverseDelete[0], false);\n}\n", "\tvar rev_s = [];\n\tfor(i=0;i<s.length-1;i++){\n\
    \t\tif(s[i] === c){\n\t\t\trev_s.push(s.substring(i-1,i+1));\n\t\t\ti = s.length-1;\n\
    \t\t}\n\t}\n\tconsole.log(rev_s);\n\tfor(i=0;i<rev_s.length;i++){\n\t\tconsole.log(rev_s[i]);\n\
    \t\tif(rev_s[i] !== s.reverse()){\n\t\t\treturn (rev_s[i],false);\n\t\t}\n\t}\n\
    \treturn (rev_s[i],true);\n}", "    \n    // Write your code here.\n    \n   \
    \ if(s == c){\n        return (s,true);\n    }\n    \n    var result = '';\n \
    \   \n    for(var i = 0; i < s.length; i++){\n        if(s.charAt(i) == c.charAt(0)){\n\
    \            result += s.substr(0, i);\n        }\n        else{\n           \
    \ result += s.charAt(i);\n        }\n    }\n    \n    return (result,(result ===\
    \ s));\n}\n", "    let arr = s.split(\"\");\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === c){\n            arr.splice(i, 1);\n          \
    \  if(arr.length < 1){\n                return arr;\n            }\n        }\n\
    \    }\n    let result = \"\";\n    for(let i = 0; i < arr.length; i++){\n   \
    \     result += arr[i]\n    }\n    return [result, true];\n}", "\tlet sArr = s.split(\"\
    \");\n\tlet cArr = c.split(\"\");\n\tlet result = [];\n\tfor (let i = 0;i < sArr.length;\
    \ i++){\n\t\tif (sArr[i] === cArr[i]){\n\t\t\tresult.push(sArr[i]);\n\t\t}\n\t\
    }\n\tresult.push(sArr[sArr.length - 1]);\n\treturn [result.join(\"\"),result.join(\"\
    \") === s.split(\"\").reverse().join(\"\")];\n}\n", "  if(s.length==0){\n    return\
    \ ('',true);\n  }\n  let str=s.slice(0,s.length-1);\n  let rev=reverse_delete(str,c);\n\
    \  if(rev[0]==s[0]&&rev[1]==true)return rev;\n  return ('',false);\n}\n</code>\n\
    <|/ a tags=algorithm,string,javascript dscore=1 |>\n<| a tags=algorithm,string,javascript\
    \ |>\n<code>", "    let rev = s.split(\"\").reverse().join(\"\");\n    rev = rev.split(\"\
    \").filter((x,i)=>x==c).join(\"\");\n    return (rev===s,rev===s.split(\"\").reverse().join(\"\
    \"))\n}\n", "    //Write your code here\n    if(s.length===0){\n        return\
    \ ['',false];\n    }\n    \n    var result=[];\n    \n    var i=0;\n    \n   \
    \ while(i<s.length){\n        if(s.charAt(i)===c.charAt(0)){\n            result.push(s.charAt(i));\n\
    \            i++;\n        }else{\n            result.push(s.charAt(i));\n   \
    \         var k=i;\n            \n            while(k<s.length){\n           \
    \     if(s.charAt(k)===c.charAt(s.length)){\n                    result.push(s.charAt(k));\n\
    \                    k=k+1;\n                }else{\n                    result.push(s.charAt(k));\n\
    \                    k=k+1;\n                }\n            }\n            i=result.length-1;\n\
    \        }\n    }\n    \n    if(result.join('')===s){\n        return ['',true];\n\
    \    }\n    \n    return ['',false];\n}\n", "    if(s.length <= 1){\n        return\
    \ s;\n    }\n    for(var i=0; i< s.length; i++){\n        if(s.substring(s.length-i-1,\
    \ s.length-i) === c){\n            s = s.substring(0, s.length-i) + s.substring(s.length-i,\
    \ s.length);\n        }\n    }\n    return s;\n}\n", "    \n    let newS = s.split(\"\
    \");\n    let newC = c.split(\"\");\n    let newSnewC = [];\n    \n    for (let\
    \ i = 0; i < newS.length; i++){\n        let isNew = false;\n        \n      \
    \  for (let j = 0; j < newC.length; j++){\n            if(newS[i] === newC[j]){\n\
    \                isNew = true;\n                break;\n            }\n      \
    \  }\n        if(isNew === false){\n            newSnewC.push(newS[i]);\n    \
    \    }\n    }\n    \n    let result = \"\";\n    let isPalindrome = true;\n  \
    \  for (let i = 0; i < newSnewC.length; i++){\n        if(newSnewC[i] !== newSnewC[newSnewC.length\
    \ - 1 - i]){\n            isPalindrome = false;\n        }\n    }\n    return\
    \ (result, isPalindrome);\n}\n", "\tif (s.indexOf(c) !== -1){\n\t\tvar result\
    \ = [];\n\t\tresult.push(s);\n\t\tfor (var i = s.length-1; i >= 0; i--) {\n\t\t\
    \tif (s.charAt(i) === c) {\n\t\t\t\tresult.splice(i,1);\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tconsole.log(\"reverse deleted: \"+result.join(\"\"));\n\t\treturn\
    \ result;\n\t}\n}\n", "\t\n\tvar i, j, k;\n\t\n\tvar reversed = \"\";\n\tfor(i\
    \ = 0; i < s.length; i++){\n\t\treversed = s.substr(1) + reversed;\n\t}\n\t\n\t\
    for(i = s.length - 1; i >= 0; i--){\n\t\tfor(j = 0; j < c.length; j++){\n\t\t\t\
    if(c[j] == s.charAt(i)){\n\t\t\t\ts.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < reversed.length; i++){\n\t\tfor(j =\
    \ 0; j < c.length; j++){\n\t\t\tif(c[j] == reversed.charAt(i)){\n\t\t\t\treversed.splice(i,\
    \ 1);\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn [reversed,\
    \ s.toString() == reversed.toString()];\n}\n", "    if(s.length <= 1){\n     \
    \   return s\n    }\n    var start = 0\n    var end = s.length-1\n    while(start\
    \ <= end){\n        var currentLetter = s[start]\n        if(current != c){\n\
    \            s[start] = s[end]\n            s[end] = current\n        }\n    \
    \    end--\n        start++\n    }\n    if(start == end){\n        return (s,true)\n\
    \    }\n    return (s,false)\n}", "    let deleted_chars = []\n    let reversed_s\
    \ = \"\";\n    for (let i =0; i < s.length; i++){\n        if (s[i] === c){\n\
    \            deleted_chars.push(s[i])\n        }\n        else {\n           \
    \ reversed_s += s[i]\n        }\n    }\n    reversed_s = reversed_s.split(\"\"\
    ).reverse().join(\"\")\n    if (reversed_s === s){\n        return (deleted_chars,\
    \ false)\n    }\n    else{\n        return (deleted_chars, true)\n    }\n}", " \
    \   const result = [];\n    for(let i = 0;i<s.length-1;i++){\n        if(s[i]\
    \ == c){\n            result.push(s.slice(i,i+1));\n        }\n    }\n    return\
    \ result;\n}\n", "  let i = 0,\n    l = s.length - 1,\n    rev = [];\n  while(i\
    \ < l){\n    rev.push(s.charAt(i));\n    i++;\n  }\n  while(i < rev.length){\n\
    \    let temp = \"\"\n    if(rev[i] === c){\n      rev.splice(i, 1);\n      temp\
    \ = rev[i];\n      rev[i] = rev[i + 1];\n      rev[i + 1] = temp;\n    }\n   \
    \ i++;\n  }\n  if((rev === s)) return [rev,true];\n  else return [rev,false];\n\
    }\n", "\ts = s.split(\"\");\n\tlet resultString = \"\";\n\tlet testString = \"\
    \";\n\tlet deleteChars = 0;\n\tlet check = false;\n\tfor (let i = 0; i < s.length;\
    \ i++){\n\t\ttestString = testString + s[i];\n\t\tfor (let j = 0; j < c.length;\
    \ j++){\n\t\t\tdeleteChars = deleteChars + 1;\n\t\t\tif (testString == testString.split(\"\
    \").reverse().join(\"\")){\n\t\t\t\tcheck = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif (check){\n\t\t\tdeleteChars = 0;\n\t\t\ttestString = \"\";\n\t\t}\n\
    \t\tresultString = resultString + s[i];\n\t}\n\treturn (resultString,check);\n\
    }", "    var result = \"\";\n    for (var i = 0; i < s.length; i++) {\n      \
    \  if (s.charAt(i) == c.charAt(0)) {\n            result += s.charAt(0);\n   \
    \     } else {\n            result += s.charAt(i);\n        }\n    }\n    if (result\
    \ == s) {\n        return (result,true);\n    } else {\n        return (result,false);\n\
    \    }\n}\n", "    var len = s.length; var rev = s.split('').reverse().join('');\n\
    \    for(var i=0; i<len; i++){\n        if(rev[i]==c){\n            rev=rev.replace(rev[i],\
    \ '')\n        }\n    }\n    if (rev == s)\n        return (rev,true);\n    else\n\
    \        return (rev,false);\n}\n", "  var str = \"\";\n  var flag = true;\n \
    \ var len = 0;\n  for(var i =0;i<c.length; i++){\n    str = str+s[i];\n  }\n \
    \ for(var i =0;i<s.length; i++){\n    for(var j =0;j<c.length; j++){\n      if(s[j]\
    \ === c[j]){\n        if(len === 0){\n          len = 1;\n          str = s[0]\
    \ + s.slice(1,s.length)\n        }\n        else{\n          str = s.slice(1,s.length)\
    \ + s[0];\n          flag = false;\n        }\n      }\n    }\n  }\n  return (str,flag);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nUsing two for loops:\n<code>", "\tvar\
    \ str = s.split(\"\");\n\tlet index = [];\n\tlet result = \"\";\n\tfor(let i=0;i<str.length;i++){\n\
    \t\tindex.push(i);\n\t}\n\tindex.sort((a,b)=>{\n\t\treturn a-b;\n\t});\n\t\n\t\
    for(let j=0;j<c.length;j++){\n\t\tlet flag = true;\n\t\tfor(let i=0;i<str.length;i++){\n\
    \t\t\tif(c[j] != str[i]){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif(flag){\n\t\t\tresult += str[index[j]];\n\t\t\tindex[j]--;\n\t\t}\n\t\
    }\n\t\n\tif(result == s){\n\t\treturn [result,true];\n\t}else{\n\t\treturn [result,false];\n\
    \t}\n}\n", "  let newstr = [];\n  let newstr1 = [];\n  for (let i = 0; i < s.length;\
    \ i++){\n      newstr.push(s[i]);\n  }\n  for (let j = 0; j < c.length; j++){\n\
    \    for (let i = 0; i < newstr.length; i++){\n      if (newstr[i] == c[j]){\n\
    \        newstr1.push(newstr[i]);\n      }\n    }\n  }\n  let newstr2 = newstr1.reverse();\n\
    \  if (newstr1 == newstr2){\n    return (newstr2, true)\n  }\n  else{\n    return\
    \ (newstr2, false)\n  }\n}\n", "\tvar rev = \"\";\n\tfor(var i=0;i<s.length-1;i++){\n\
    \t\tvar j = c.indexOf(s.charAt(i));\n\t\trev = rev + s.charAt(i);\n\t\tif(j>-1){\n\
    \t\t\trev = rev + c.charAt(j);\n\t\t\ts = s.replace(s.charAt(i),\"\");\n\t\t}\n\
    \t}\n\tif(s === rev){\n\t\treturn [rev,true];\n\t}\n\telse{\n\t\treturn [rev,false];\n\
    \t}\n}\n", "\tvar result = '';\n\t\n\tfor(var i = 0; i < s.length; i++){\n\t\t\
    if(s[i] === c){\n\t\t\ts = s.substr(0,i) + s.substr(i+1);\n\t\t}else{\n\t\t\t\
    result += s[i];\n\t\t}\n\t}\n\t\n\treturn (result, result === s);\n}\n", "\tvar\
    \ rs = s.split(\"\"),\n\t\tre = c.split(\"\");\n\tvar rev = \"\";\n\tvar result\
    \ = [];\n\tfor (var i=0;i<rs.length;i++){\n\t\tif (rs[i]===re[i]){\n\t\t\tresult.push(rs[i]);\n\
    \t\t}\n\t}\n\tvar res = result.join(\"\");\n\tfor (var i=res.length-1;i>0;i--){\n\
    \t\trev += res[i];\n\t}\n\treturn [res,(rev===res)]\n}\n", "    const res = [];\n\
    \    for (let i = 0; i < s.length; i++){\n        if (s.charAt(i) == c){\n   \
    \         res.push(s.substr(i, 1));\n        }\n    }\n    return (res.join('').split('').join(''))\
    \ === s;\n}\n", "    // Write your code here\n    if (s.length === 0) {\n    \
    \    return ['',false]\n    }\n    if (s.length < 2) {\n        return [s,true]\n\
    \    }\n    if (s !== c) {\n        let start = s.indexOf(c),\n            end\
    \ = s.lastIndexOf(c),\n            start = Math.max(start,0),\n            end\
    \ = Math.min(end,s.length-1);\n        if (start === 0 && end === s.length-1)\
    \ {\n            return [s.slice(0,start+1),false];\n        }\n        return\
    \ [s.slice(start+1,end+1),true];\n    }\n    let start = s.indexOf(c),\n     \
    \   end = s.lastIndexOf(c),\n        start = Math.max(start,0),\n        end =\
    \ Math.min(end,s.length-1);\n    if (start === 0 && end === s.length-1) {\n  \
    \      return [s,false];\n    }\n    return [s.slice(start+1,end+1),true];\n}\n",
  "    for(var i=0;i<s.length;i++){\n        if(s.indexOf(s[i])!==-1){\n         \
    \   for(var j=i;j<s.length-i+1;j++){\n                if(s.indexOf(s[j])==-1 &&\
    \ s.indexOf(s[j])!==-1){\n                    s.splice(j,1);\n               \
    \     break;\n                }\n            }\n        }\n    }\n    console.log(s);\n\
    \    if((s[s.length-1]===c[s.length-1])&&(s[s.length-1]===c[s.length-2])&&(s[s.length-1]===c[s.length-3])){\n\
    \        console.log(true);\n        return ('',true);\n    }\n    return false;\n\
    }\n", "  let rev_s = '';\n  let check_for = false;\n  for(let i = 0; i < s.length;\
    \ i++){\n    let currentChar = s[i];\n    if(s.indexOf(c) !== -1){\n      rev_s\
    \ += currentChar;\n      check_for = true;\n    }\n    if(check_for && currentChar\
    \ === c){\n      check_for = false;\n    }\n  }\n  if(check_for){\n    return\
    \ (rev_s, true);\n  }\n  else{\n    return (rev_s, false);\n  }\n}\n", "\tvar\
    \ i, j, k=0, r=\"\";\n\tvar s=s.split(\"\");\n\tvar c=c.split(\"\");\n\tfor(i=0;i<s.length-1;i++){\n\
    \t\tfor(j=0;j<c.length-1;j++){\n\t\t\tif(s[i]==c[j]){\n\t\t\t\tk++;\n\t\t\t}\n\
    \t\t}\n\t}\n\tfor(i=0;i<s.length-1;i++){\n\t\tif(i==k){\n\t\t\tr+=s[i];\n\t\t\
    }\n\t}\n\treturn (r,k==s.length-1);\n}\n", "   \n    let str = new Array(s.length).fill().map((x,i)=>i);\n\
    \    \n    //delete all occurences of the char from the string\n    for(let i\
    \ = 0;i<s.length;i++){\n        if(s.charAt(i)==c){\n            delete str[i];\n\
    \        }\n    }\n    \n    //check if the string s is a palindrome\n    let\
    \ isPalindrome = true;\n    for(let i = str.length-1;i>=0;i--){\n        if(str[i]\
    \ != str[str.length - i - 1]){\n            isPalindrome = false;\n          \
    \  break;\n        }\n    }\n    \n    return { s: s.slice(0, str.length), check:\
    \ isPalindrome };\n}\n", "  if(s == \"\"){\n    return [\"\",true];\n  }\n  var\
    \ result = [];\n  for(var i=0;i<s.length;i++){\n    if(c == s[i]){\n      result.push(s[i]);\n\
    \      continue;\n    }\n    result.push(s[i]);\n  }\n  result.reverse();\n  var\
    \ resultString = result.join(\"\");\n  if(resultString == s){\n    return [resultString,true];\n\
    \  }else{\n    return [resultString,false];\n  }\n}\n", "    let rev = s.split(\"\
    \");\n    rev = rev.sort();\n    for (let i = 0; i < rev.length; i++){\n     \
    \   if (rev[i] !== c){\n            rev.splice(i, 1);\n        }\n    }\n    for\
    \ (let i = 0; i < rev.length; i++){\n        if (rev[i] !== rev[rev.length -1\
    \ -i]){\n            rev[rev.length -1 -i]=\"\"\n        }\n    }\n    rev = rev.join(\"\
    \");\n    return rev === s;\n}\nlet result = reverse_delete(\"aaabbccc\", \"abc\"\
    );", "  var resultString = \"\", check = true;\n  var chars = s.split('');\n \
    \ var charsCount = chars.length;\n  var charToSearchFor = c.split('');\n  var\
    \ charToSearchForCount = charToSearchFor.length;\n  \n  for (var i = 0; i <= charsCount\
    \ - 1; i++){\n    if (charToSearchForCount > 0){\n      for (var j = 0; j <= charToSearchForCount\
    \ - 1; j++){\n        if (charToSearchFor[j] != charToSearchFor[j + 1])\n    \
    \      check = false;\n      }\n    }\n    resultString += chars[i];\n  }\n  \n\
    \  return [resultString, check];\n}\n", "  let revS = [];\n  let cs = [];\n  for(var\
    \ i=0; i<s.length; i++){\n    revS.unshift(s[i]);\n    cs = cs.concat(s.slice(i).split(\"\
    \"));\n  }\n  for(var i=0; i<revS.length; i++){\n    if(revS[i] === c){\n    \
    \  revS.splice(i, 1);\n      cs = cs.filter(function(ele, index){\n        return\
    \ index > i;\n      });\n    }\n  }\n  let flag = true;\n  for(var i=0; i<revS.length;\
    \ i++){\n    if(revS[i] !== cs[i]){\n      flag = false;\n      break;\n    }\n\
    \  }\n  return [revS, flag];\n}\n", "\tvar result = '';\n\tfor(var i = 0; i <\
    \ s.length; i++){\n\t\tfor(var j = 0; j < c.length; j++){\n\t\t\tif(s.charAt(i)\
    \ == c.charAt(j)){\n\t\t\t\tresult += (s.charAt(i));\n\t\t\t}\n\t\t}\n\t}\n\t\
    return (result, result.charAt(0) == s.charAt(s.length - 1))\n}\nvar str = 'abcde';\n\
    var c = 'ae';\nvar result = reverse_delete(str,c);", "\tvar result = \"\";\n\t\
    var flag = true;\n\tfor(var i = 0; i< s.length; i++){\n\t\tif(c.indexOf(s[i])\
    \ > -1){\n\t\t\tresult+= s[i];\n\t\t}else{\n\t\t\tflag = false;\n\t\t}\n\t}\n\t\
    return [result,flag];\n}\n", "    if(s.length === 0){\n        return ('',false);\n\
    \    }\n\n    if(c === s[s.length-1]){\n        return ('',true);\n    }\n   \
    \ \n    let newS = \"\";\n    let newC = \"\";\n    for(let i=s.length-1;i>=0;i--){\n\
    \        if(c === s[i]){\n            newS += s[i];\n            newC += s[i];\n\
    \        }\n    }\n    return ([newS,newC],true);\n}\n", "\tif(s == null || c\
    \ == null){\n\t\treturn \"Error\"\n\t}\n\n\ts = s.split(\"\");\n\tc = c.split(\"\
    \");\n\n\tlet n = c.length;\n\tlet result = [];\n\tlet check = true;\n\tfor(let\
    \ i = 0; i < n; i++){\n\t\tlet c_index = c.indexOf(s[i]);\n\t\tlet index = s.indexOf(c[i]);\n\
    \t\tif(index > -1){\n\t\t\tresult.push(s[index]);\n\t\t\tresult.push(c_index);\n\
    \t\t}\n\t\telse{\n\t\t\tresult.push(c[i]);\n\t\t\tcheck = false;\n\t\t}\n\t}\n\
    \treturn [result.join(\"\"), check];\n}\n", "    let res = [];\n    for (let i\
    \ = 0; i < s.length; i++){\n        if (s.includes(c) && s.indexOf(c) == 0){\n\
    \            res.push(s.slice(i,i+c.length));\n            i = i+c.length;\n \
    \       }\n    }\n    if (res.length == 0){\n        let bool = true;\n      \
    \  for (let i = 0; i < s.length; i++){\n            if (s.indexOf(c) == 0){\n\
    \                bool = false;\n                break;\n            }\n      \
    \  }\n        return ('',bool);\n    }\n    let bool = false;\n    for (let i\
    \ = 0; i < res.length; i++){\n        if (res[i] !== res[i].split('').reverse().join('')){\n\
    \            bool = true;\n            break;\n        }\n    }\n    return (res.join(''),bool);\n\
    }", "  var result = []\n  \n  if(s.length<c) return false\n  \n  var index = 0\n\
    \  var i = 0\n  var j = 0\n  \n  for(;i<s.length;i++){\n    for(;j<c.length-1;j++){\n\
    \      if(c[j]!=s[index+j]) break\n    }\n    \n    if(j==c.length-1) result.push(s[index])\n\
    \    else index++\n  }\n  \n  if(result.join('') === s) return [result.join(''),\
    \ true]\n  else return [result.join(''), false]\n}\n", "    let r = '', res =\
    \ true, i;\n    for(i = 0; i <= s.length / 2; i++){\n        if(s[i] != c){\n\
    \            r += s[i];\n        }\n    }\n    for(i = s.length - 1; i >= 0; i--){\n\
    \        if(s[i] != c){\n            res =  false;\n            break;\n     \
    \   }\n    }\n    return (r == s) ? res : (r + reverse_delete(s.slice(0, i), c),\
    \ res);\n}", "  var result = '', bool = true, len = s.length - 1;\n  for(var i\
    \ = 0; i < s.length; i++){\n    if(s[i] !== c[i]){\n      result += s[i];\n  \
    \    bool = false;\n    }\n  }\n  return result + (bool?\"\":\"\"), bool;\n}\n",
  "    let result=[];\n    for(let i=0;i<s.length-1;i++){\n        if(s.charAt(i)==c.charAt(0)){\n\
    \            result.push(s.charAt(i));\n        }\n        if(s.charAt(i)==c.charAt(1)){\n\
    \            result.push(s.charAt(i));\n        }\n    }\n    if(result==s.split(\"\
    \").reverse().join(\"\")){\n        return (result,true);\n    }\n    else{\n\
    \        return (result,false);\n    }\n}\n", "\tvar ans = \"\";\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tfor(var j=s.length-1;j>=0;j--){\n\t\t\tif(s[i] == c[j]){\n\t\t\t\tans = ans\
    \ + c[j];\n\t\t\t\ts = s.substr(0,j) + s.substr(j+1);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return [ans,ans == s]\n}\n", "\tlet rev = \"\";\n\tlet ok = true;\n\tfor (let\
    \ i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) === c.charAt(0)) {\n\t\t\t\
    rev += s.charAt(i)\n\t\t}\n\t\telse {\n\t\t\trev += s.charAt(i) + c.charAt(0)\n\
    \t\t\tok = false\n\t\t}\n\t}\n\treturn (rev,ok)\n}\n", "  var str = '';\n  for(var\
    \ i = 0;i<s.length;i++){\n    str += s[i];\n  }\n  var del = s.split(c);\n  \n\
    \  for(var i = 0; i < del.length; i++){\n    var index = del[i];\n    var res\
    \ = str.split(index);\n    for(var j = 0; j < res.length; j++){\n      str = str.replace(res[j],'');\n\
    \    }\n  }\n  return (str,str===\"\");\n}\n", "\tconst len = s.length;\n\tlet\
    \ count = 0;\n\tlet i = len - 1;\n\tlet lastChar = s[i];\n\twhile(i >=0 && count\
    \ < len){\n\t\ts[len-i-1] = s[i];\n\t\ti -= 1;\n\t\tcount += 1;\n\t}\n\tfor(let\
    \ i = 0; i < len; i++){\n\t\tif(s[i] === c){\n\t\t\tlet bool = true;\n\t\t\tfor(let\
    \ j = 0; j < len; j++){\n\t\t\t\tif(s[j] !== s[i]){\n\t\t\t\t\tbool = false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [s.substring(0,i) + s.substring(i+1,\
    \ len), bool];\n\t\t}\n\t}\n}", "  let reversed_s=\"\";\n  for(let i=0;i<s.length-1;i++){\n\
    \    reversed_s+=c.charAt(s.length-1-i);\n  }\n  return reversed_s==s?(s,false):(s,true);\n\
    }\n", "    let result = '';\n    let flag = true;\n    for(let i = s.length-1;\
    \ i >= 0; i--){\n        if(s[i] === c[i]){\n            flag = false;\n     \
    \   }else{\n            result += s[i];\n        }\n    }\n    return (flag) ?\
    \ result : false;\n}\n", "  var result = [];\n  var str1 = [];\n  var str2 = [];\n\
    \  var index1;\n  var index2;\n\n  for(var i=0; i<s.length; i++){\n    str1.push(s[i]);\n\
    \  }\n  for(var j=0; j<s.length; j++){\n    str2.push(s[j]);\n  }\n  if(str1.length\
    \ === 0 || str2.length === 0){\n    return [result,true];\n  }\n  for(var i=0;\
    \ i<str1.length; i++){\n    if(str1[i] === str2[str2.length-1]){\n      result.push(str1.splice(i,\
    \ 1)[0]);\n      str2.splice(str2.length-1,1);\n    }\n  }\n  if(str1.length ===\
    \ 0 || str2.length === 0){\n    return [result,true];\n  }\n  return [result,false];\n\
    }\nvar reverse_delete = function(s, c){\n  var result = [];\n  var str1 = [];\n\
    \  var str2 = [];\n  var index1;\n  var index2;\n\n  for(var i=0; i<s.length;\
    \ i++){\n    str1.push(s[i]);\n  }\n  for(var j=0; j<s.length; j++){\n    str2.push(s[j]);\n\
    \  }\n  if(str1.length === 0 || str2.length === 0){\n    return [result,true];\n\
    \  }\n  for(var i=0; i<str1.length; i++){\n    if(str1[i] === str2[str2.length-1]){\n\
    \      result.push(str1.splice(i, 1)[0]);\n      str2.splice(str2.length-1,1);\n\
    \    }\n  }\n  if(str1.length === 0 || str2.length === 0){\n    return [result,true];\n\
    \  }\n  return [result,false];\n}", "    let result = [];\n    let flag = false;\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i) === c.charAt(0)){\n\
    \            result.push(s.charAt(i));\n            flag = true;\n           \
    \ for(let j = 0; j < c.length; j++){\n                if(s.charAt(i + j + 1) ===\
    \ c.charAt(j)){\n                    result.push(s.charAt(i + j + 1));\n     \
    \               flag = true;\n                }else{\n                    flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }else{\n            flag = false;\n            break;\n        }\n    }\n\
    \    return ([result.reverse().join(''), flag]);\n}\n", "    const newString =\
    \ s.split(\"\").reverse().join(\"\");\n    for(let i=0;i<c.length;i++){\n    \
    \    if(newString.includes(c[i])){\n            newString = newString.replace(c[i],\
    \ \"\");\n        }\n    }\n    console.log(newString);\n    const checkPalindrome\
    \ = newString === newString.split(\"\").reverse().join(\"\");\n    console.log(checkPalindrome);\n\
    \    return [newString,checkPalindrome]\n}\n</code>\n<|/ a |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nI think you mean `var newString = s.split(\"\"\
    ).reverse().join(\"\");`, i.e. `newString` instead of `tempString`. And also `newString.split(\"\
    \").reverse().join(\"\")` instead of `s.split(\"\").reverse().join(\"\")`.\n<|/\
    \ c |>\n<| c |>\nThanks for the suggestion! I have edited my answer.\n<|/ c |>\n\
    <| a |>\nYour idea seems solid to me. I'd do it with regular expressions instead\
    \ of string manipulation.\n<code>", "    let result = '';\n    let isPalindrome\
    \ = true;\n\n    for(let i=0;i<s.length;i++){\n        if(s[i] !== c[i]){\n  \
    \          result += s[i];\n            isPalindrome = false;\n        }else{\n\
    \            result += s[i];\n        }\n    }\n    console.log(result);\n   \
    \ return [result, isPalindrome]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nUsing recursion:\n<code>", "    let str = \"\";\n    \n    for(let i = 0;\
    \ i < s.length; i++){\n        str += s[i];\n    }\n    \n    for(let i = 0; i\
    \ < s.length; i++){\n        if(c === s[i]){\n            str = str.substring(0,\
    \ i) + str.substring(i+1, str.length);\n        }\n    }\n    \n    if(str ===\
    \ str.replace(new RegExp(c, \"g\"), \"\")){\n        return (str, false);\n  \
    \  }\n    return (str, true);\n}\n", "    var result = [];\n    for(var i=0;i<s.length();i++){\n\
    \        if(s.charAt(i) == c){\n            result[i] = '';\n        }else{\n\
    \            result[i] = s.charAt(i);\n        }\n    }\n    var check = false;\n\
    \    for(var i=0;i<result.length/2;i++){\n        if(result[i] != result[i*2]\
    \ + result[i*2+1]){\n           check = false;\n        }else{\n           check\
    \ = true;\n        }\n    }\n    if(check){\n        return ('' + result.join(''),check);\n\
    \    }else{\n        return ('' + result.join(''),check);\n    }\n}\n", "  //\
    \ Your code goes here\n  return [s,true];\n}\n", "  var deletes = [];\n  for(var\
    \ i=0;i<c.length;i++){\n    if(s.indexOf(c[i]) === -1){\n      deletes.push(c[i]);\n\
    \    }\n  }\n  var revDeletes = deletes.reverse();\n  var revDeletesStr = revDeletes.join('');\n\
    \  return (revDeletesStr === s) ? true : false;\n}\n", "\tif(s.length < 1){\n\t\
    \treturn ('',false);\n\t}\n\tvar new_s = '';\n\tvar rev = false;\n\tfor(var i\
    \ = 0; i < s.length; i++){\n\t\tif(new_s == c){\n\t\t\trev = true;\n\t\t\tbreak;\n\
    \t\t}\n\t\tnew_s += s[i];\n\t}\n\tif(!rev){\n\t\treturn ('',false);\n\t}\n\tvar\
    \ len_rev = new_s.length;\n\tvar len_s = s.length;\n\tvar count_s = 0;\n\tvar\
    \ count_rev = 0;\n\t\n\tfor(var i = len_s-1; i >= 0; i--){\n\t\tif(new_s[i] ==\
    \ s[count_s]){\n\t\t\tcount_s++;\n\t\t}else{\n\t\t\tnew_s = new_s.slice(0, count_rev)\
    \ + new_s.slice(count_rev + 1);\n\t\t\tcount_rev++;\n\t\t}\n\t}\n\treturn (new_s,true);\n\
    }\n", "    let deleted_characters = []\n\n    for (let i=0; i < s.length; i++){\n\
    \        for (let j=0; j < c.length; j++){\n            if(s[i] === c[j]){\n \
    \               deleted_characters.push(s[i])\n            }\n        }\n    }\n\
    \n    let result = s.slice(0, -1) + deleted_characters.join('')\n\n    if(result\
    \ == s){\n        return ('True', true)\n    }\n    else{\n        return ('False',\
    \ false)\n    }\n}\n", "  var rev = \"\";\n  var str = \"\";\n  var i = 0;\n \
    \ var ispalindrome = false;\n  for(i = 0; i <= s.length; i++){\n    if(s[i] ==\
    \ c){\n      if(rev.length != 0){\n        str+=rev;\n        rev = \"\";\n  \
    \    }\n      \n    }else{\n      rev+=s[i];\n    }\n  }\n  if(rev.length != 0){\n\
    \    str+=rev;\n  }\n  \n  if(str == s){\n    ispalindrome = true;\n  }\n  \n\
    \  return [str, ispalindrome];\n}\n", "    let str = ''\n    for (let i of s){\n\
    \        if(i === c){\n            continue\n        }\n        str += i\n   \
    \ }\n    let strReverse = str + c\n    strReverse = strReverse.split('').reverse().join('')\n\
    \    if(s === strReverse){\n        return (str,true)\n    }\n    return (str,false)\n\
    }\n", "  let result = s.substr(0,s.length-1).split('').filter(i => i !== c);\n\
    \  result = s.substr(0,s.length-1).split('').filter(i => i !== c).reverse();\n\
    \  result = result.join('');\n  if(result.length===s.length && result === s){\n\
    \    return (result,false);\n  }\n  if(result.length===s.length && result ===\
    \ s){\n    return (result,true);\n  }\n  return (result + '',false);\n}", "\t\n\
    \tlet result = '';\n\t\n\tfor(let i = s.length - 1; i >= 0; i--){\n\t\tif(s.charAt(i)\
    \ == c.charAt(0)){\n\t\t\tresult += s.charAt(i);\n\t\t\ts = s.substr(1);\n\t\t\
    }\n\t\telse{\n\t\t\tresult += s.charAt(i);\n\t\t}\n\t}\n\t\n\tif(s == result){\n\
    \t\treturn (result, false);\n\t}\n\telse{\n\t\treturn (result, true);\n\t}\n}",
  "\tvar new_str = \"\";\n\tvar new_c = \"\";\n\tfor(var i=0; i<s.length; i++){\n\t\
    \tvar char = s[i];\n\t\tnew_str += char;\n\t\tif(char == c){\n\t\t\tvar res =\
    \ checkPalindrome(new_str);\n\t\t\tif(res[1]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tnew_str += new_c;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\tnew_c\
    \ = char;\n\t\t}\n\t}\n\treturn [new_str,true];\n}\n", "  var result = '';\n \
    \ for(var i=0;i<s.length;i++){\n    if(s.substring(s.length-i-1,s.length-i) ===\
    \ c){\n      result += s.substring(s.length-i-1,s.length-i);\n    }\n  }\n  if(result===s){\n\
    \    return (s,false);\n  }\n  else{\n    return (result,true);\n  }\n}\n", " \
    \   let result = \"\";\n    let isEqual = true;\n    let re = new RegExp(\"[\"\
    \ + c + \"]\");\n    for(let i of s){\n        if(!re.test(i)){\n            result\
    \ += i;\n        }\n        else{\n            isEqual = false;\n        }\n \
    \   }\n    if(isEqual){\n        return ( result, false);\n    }\n    else{\n\
    \        let firstString = s.substr(0, s.length-1);\n        let secondString\
    \ = s.substr(1, s.length-1);\n        return (firstString + secondString, true);\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,javascript,palindrome,arrays\
    \ |>\n<code>", "    let result = ''\n    let reverse = s\n    for(let i = 0; i\
    \ < reverse.length; i++){\n        let flag = false\n        for(let j = 0; j\
    \ < c.length; j++){\n            if(c[j] === reverse[i]){\n                flag\
    \ = true\n            }\n        }\n        if(flag){\n            result+=reverse[i]\n\
    \        }\n    }\n    return result===s ? True : False\n}\n", "  var i,j;\n \
    \ if(s.length < 1){\n    return s;\n  }\n  var lc = c.length,\n      ls = s.length,\n\
    \      res = [];\n  for(i = lc-1; i>=0; i--){\n    for(j=0; j<ls && s[i] === c[j];\
    \ j++);\n    if(j===ls){\n      res.push(s[i]);\n    }\n  }\n  return res;\n}",
  "    if(!s.length) return \"\"\n    \n    let reverse = \"\"\n    for(let i=s.length-1;\
    \ i>=0; i--){\n        let char = s[i]\n        if(char !== c) reverse = char+reverse\n\
    \    }\n    \n    return reverse===s ? (s,false) : (reverse,true)\n}\n", "  \n\
    \  s = s.split(\"\");\n  \n  let index = 0;\n  let string = \"\";\n  \n  while\
    \ (index < s.length){\n    \n    if(s[index] == c){\n      \n      string = string.split(\"\
    \");\n      string.splice(index, 1);\n      string = string.join(\"\");\n    \
    \  \n      index = index - 1;\n      \n      if (string == s){\n        return([string,\
    \ True]);\n      }else{\n        return([string, False]);\n      }\n    }\n  \
    \  \n    index++;\n  }\n  \n  return([s, False]);\n  \n}\n", "    let str = \"\
    \";\n    let reverse = \"\";\n    for (let i = 0; i < s.length; i++){\n      \
    \  str += s[i];\n    }\n    for (let i = 0; i < c.length; i++){\n        reverse\
    \ += c[s.length - i - 1];\n    }\n    if (str === reverse){\n        return str;\n\
    \    }\n    return false;\n}\n", "    s = s.split('');\n    c = c.split('');\n\
    \    const result = [];\n    let temp = \"\";\n    for(let i = 0; i<s.length;\
    \ i++){\n        temp = s.slice(0,i).concat(c.slice(i));\n        result.push(temp.join(''));\n\
    \    }\n    result = result.map(e=> e.split(''));\n    for(let i = 0; i<result.length;\
    \ i++){\n        result[i] = result[i].join('');\n    }\n    result = result.join('');\n\
    \    result.split('');\n    if(result === s)\n        return ('True',true);\n\
    \    if(result !== s)\n        return ('False',false);\n    return ('',false);\n\
    }\n", "  var result = '';\n  var i = 0;\n  var len = s.length;\n  var j = len-1;\n\
    \  \n  while (i < j){\n    if (s[i] === c){\n      result += s[i];\n      i++;\n\
    \      j--;\n    }\n    else if (s[i] === s[i]){\n      result += s[i];\n    \
    \  i++;\n    }\n    else if (s[j] === s[j]){\n      j--;\n    }\n  }\n  \n  return\
    \ (result, i===j);\n}\n", "\ts = s.split(\"\");\n\ts = s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6];\n\
    \ts = s.split(c);\n\ts = s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6];\n\tvar reverse =\
    \ \"\";\n\tfor(var i = 0; i < s.length/2; i++){\n\t\treverse += s[i];\n\t}\n\t\
    return reverse;\n}\n", "    \n    var i, j, l, r = [], m = 0, temp;\n    \n  \
    \  // Loop through the characters in s and add the current character to r\n  \
    \  for (i = 0; i < s.length; i++){\n      r.push(s[i]);\n    }\n    \n    // Loop\
    \ through characters in c to check for matching characters\n    for (j = 0; j\
    \ < c.length; j++){\n      \n      // For every character in c, check if that\
    \ character in r is in the position (j - 1) of r\n      for (l = 0; l < r.length;\
    \ l++){\n        if (r[l] === c[j]){\n          // If so, remove the matching\
    \ character from r\n          r.splice(l,1);\n        }\n      }\n    }\n    \n\
    \    // Check that the result string is a palindrome by comparing it to the original\
    \ string\n    temp = s;\n    for (i = s.length - 1; i >= 0; i--){\n      if(temp\
    \ === r[i]){\n        m = 0;\n      }\n      else {\n        m = 1;\n        break;\n\
    \      }\n    }\n    \n    if(m === 0){\n      return (r,true)\n    }\n    else{\n\
    \      return (r,false)\n    }\n}\n", "    if(s.length < c.length){\n        return(\"\
    Not a palindrome\",false);\n    }\n    var resultString = \"\";\n    var palindrome\
    \ = true;\n    for(var i = 0; i < s.length - c.length; i++){\n        resultString\
    \ += s[i];\n    }\n    \n    for(var i = 0; i < c.length; i++){\n        if(s.indexOf(c[i])\
    \ == -1){\n            palindrome = false;\n        }\n    }\n    return([resultString,palindrome]);\n\
    }\n</code>\n<|/ a dscore=2 tags=javascript,algorithm,string |>\n<| c |>\nOh, I\
    \ didn't see that it's Javascript, so my answer doesn't apply, sorry.\n<|/ c |>\n\
    <| c |>\nYes it is! I added my Javascript code to the answer, thanks\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  // Write your code here\n  var result = [], newStr\
    \ = \"\", index = 0;\n  for(;index < s.length;index++){\n    if(s[index] === c[index]){\n\
    \      continue;\n    }\n    newStr += s[index];\n  }\n  for(;index < newStr.length;index++){\n\
    \    if(newStr[index] === c[index]){\n      continue;\n    }\n    result.push(newStr[index]);\n\
    \  }\n  \n  return (result.reverse(), true);\n}\n", "    let reverseString=s.split(\"\
    \").reverse().join(\"\");\n    if (reverseString.split(\"\").reduce((total,next)=>total+next===c))\n\
    \    return([reverseString,false]);\n    else\n    return([reverseString,true]);\n\
    }", "    let r = '';\n    for(let i = 0; i < s.length; i++){\n        if(s[i]\
    \ === c[i]){\n            r = r + s[i];\n        }\n        else {\n         \
    \   r = r + s.slice(i+1,s.length);\n        }\n    }\n    return (r,s === r);\n\
    }", "    if(s.length===0){\n        return \"\";\n    }\n    let sArr=s.split(\"\
    \");\n    let newString=\"\";\n    let deletedString=\"\";\n    let isDeletedFlag=false;\n\
    \    let resultString=\"\";\n    for(let i=0;i<sArr.length;i++){\n        if(sArr[i]===c){\n\
    \            deletedString+=sArr[i];\n            isDeletedFlag=true;\n      \
    \  }else{\n            if(isDeletedFlag){\n                resultString+=deletedString;\n\
    \                isDeletedFlag=false;\n            }\n            resultString+=sArr[i];\n\
    \        }\n    }\n    if(isDeletedFlag){\n        resultString+=deletedString;\n\
    \    }\n    return tuple([resultString,isDeletedFlag]);\n}\n", "  s = s.split(\"\
    \");\n  let reverse = s.slice(0).reverse().join(\"\");\n  reverse = reverse.split(\"\
    \").filter(i => i != c).join(\"\");\n  reverse = reverse.split(\"\").filter(i\
    \ => i != c).join(\"\");\n  reverse = reverse.split(\"\").filter(i => i != c).join(\"\
    \");\n  reverse = reverse.split(\"\").filter(i => i != c).join(\"\");\n  return\
    \ reverse;\n}\n", "\tlet resultString = \"\"\n\tlet found = false\n\tfor (let\
    \ i of s) {\n\t\tif (i == c){\n\t\t\tfound = true\n\t\t}else{\n\t\t\tresultString\
    \ += i\n\t\t}\n\t}\n\tif (found == true) {\n\t\treturn [resultString, true]\n\t\
    }else{\n\t\treturn [resultString, false]\n\t}\n}\n\n", "  var result=[];\n  for(var\
    \ i=0;i<s.length;i++){\n    result.push(s.charAt(i));\n  }\n  result.sort();\n\
    \  for(var i=0;i<result.length;i++){\n    if(result[i]==c){\n      result.splice(i,1);\n\
    \    }\n  }\n  if(result.join(\"\")==s){\n    return (s,true);\n  }\n  else{\n\
    \    return (s,false);\n  }\n}\n\nvar s=\"ab\";\nvar c=\"b\";\nvar r=reverse_delete(s,c);",
  "\tvar result = \"\";\n\tvar flag = true;\n\tfor(var i=0; i<s.length; i++){\n\t\t\
    var ch = s.charAt(i);\n\t\tif(ch == c){\n\t\t\tresult +=ch;\n\t\t\tflag = false;\n\
    \t\t}else{\n\t\t\tresult += ch;\n\t\t}\n\t}\n\tif(flag){\n\t\treturn (result +\
    \ \"\",true);\n\t}else{\n\t\treturn (result,false);\n\t}\n}", "    var result\
    \ = [];\n    var flag = false;\n    for(var i = 0; i < s.length; i++){\n     \
    \   if(s.charAt(i) == c.charAt(0)){\n            result.push(s.charAt(i));\n \
    \       }\n        if(s.charAt(i) == c.charAt(c.length-1)){\n            result.push(s.charAt(i));\n\
    \            flag = true;\n        }\n    }\n    if(flag == true){\n        return\
    \ result;\n    }\n    else{\n        return [s,false];\n    }\n}\n", "  s = s.toLowerCase();\n\
    \  c = c.toLowerCase();\n  let result = \"\";\n  let found = false;\n  \n  for\
    \ (let i = 0; i < s.length; i++){\n    for (let j = 0; j < c.length; j++){\n \
    \     if (s[i] === c[j]) {\n        result += s[i];\n        found = true;\n \
    \       break;\n      }\n    }\n  }\n  \n  if (!found) return [\"\", false];\n\
    \  \n  result = result.reverse().toString();\n  \n  return [result, true];\n}\n",
  "  var str1 = s\n  var str2 = c\n  var str3 = ''\n  var len1 = str1.length\n  var\
    \ len2 = str2.length\n  var res = ''\n  var flag = false\n  for (var i = 0; i\
    \ < len1; i++) {\n    flag = false\n    for (var j = 0; j < len2; j++) {\n   \
    \   if (str1[i] === str2[j]) {\n        flag = true\n        break\n      }\n\
    \    }\n    if (flag) {\n      res += str1[i]\n    }\n  }\n  var ans = ''\n  if\
    \ (str3 === res) {\n    ans = ('',true)\n  }\n  else {\n    ans = (str3 + res,false)\n\
    \  }\n  return ans\n}\n", "\tvar result = '';\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tif(s.charAt(i) == c.charAt(i)) result += s.charAt(i);\n\t}\n\tif(result !=\
    \ s) return result;\n\treturn (true,false);\n}\n", "    let reversedString = s.split(\"\
    \").reverse().join(\"\");\n    let newString = reversedString.split(\"\").filter(s\
    \ => s.indexOf(s) != -1);\n    let reversedString = newString.join(\"\");\n  \
    \  let result = reversedString.split(\"\").filter((s, i) => s !== c).join(\",\"\
    );\n    let resultCheck = result === reversedString;\n    return [result,resultCheck]\n\
    }", "\tvar r = \"\";\n\tvar result = (\"\", false);\n\n\t// Reverse the string\
    \ and compare it to the original string\n\tfor(var i = 0; i < s.length; i++){\n\
    \t\tr += s[i];\n\t}\n\t\n\t// Check for the chars matching the chars in the string\n\
    \tfor(var i = 0; i < c.length; i++){\n\t\tif(s[i] == c[i]){\n\t\t\tresult += s[i];\n\
    \t\t}\n\t}\n\t\n\t// Check if string is a palindrome\n\tif(result.toLowerCase()\
    \ == result){\n\t\tresult = (\"Yes\", true);\n\t}else{\n\t\tresult = (\"No\",\
    \ false);\n\t}\n\t\n\treturn result;\n}\n", "    var result = '';\n    for(var\
    \ i = 0;i < s.length;i++){\n        var sub = s.substr(i,1);\n        if(sub.indexOf(c)\
    \ > -1) result += sub;\n    }\n    return result === s ? (true, false) : (false,\
    \ result);\n}", "    const lenS = s.length\n    let lenC = c\n    \n    const\
    \ reverseStr = s.split('').reverse().join('')\n    const revC = reverseStr.split('')\n\
    \n    for (let i = 0; i < lenC; i++){\n        if (revC[i] === c){\n         \
    \   lenC --\n        }\n    }\n    \n    if (lenC !== 0){\n        return{\n \
    \           result: reverseStr.slice(0, lenC),\n            palindrome: lenC ===\
    \ 0\n        }\n    }\n    \n}\n", "    if(s.length < 2)\n        return s;\n\
    \    return reverse_delete(s.substr(0,s.length-1) + s.substr(s.length-1,s.length),\
    \ c);\n}", "    let reversedString = s.split(\"\").reverse().join(\"\");\n   \
    \ let characterFound = c.includes(reversedString);\n    return (reversedString,characterFound);\n\
    }\n", "    let reverseString = \"\";\n    for (let i=s.length-1; i>=0; i--){\n\
    \        reverseString += s.charAt(i);\n    }\n    if (reverseString === c){\n\
    \        return [reverseString, true];\n    } else {\n        return [reverseString,\
    \ false];\n    }\n}", "  let rev_s = reverseStr(s)\n  let result = true\n  if(c\
    \ in rev_s){\n    rev_s = rev_s.split(\"\").filter((_,i)=>i!==c.length-1).join(\"\
    \")\n    result = checkPalindrome(rev_s)\n  }\n  return [rev_s,result]\n}\n",
  "  let rev_s=\"\";\n  for(let i=0;i<s.length-1;i++){\n    rev_s = rev_s+s[i]\n \
    \ }\n  let res=\"\";\n  for(let i=0;i<c.length-1;i++){\n    res = res + c[i];\n\
    \  }\n  if(res == rev_s){\n    return [res,true];\n  } else {\n    return [res,false];\n\
    \  }\n}", "    let rs = s.split(\"\");\n    let rc = c.split(\"\");\n    let ns\
    \ = \"\";\n    let nc = 0;\n    for (let i = 0; i < rs.length; i++) {\n      \
    \  let r = rs[i];\n        if (c !== \"\"){\n            let c = rc[nc];\n   \
    \         ns = ns + r.substr(0, c.length);\n        }\n        ns = ns + r;\n\
    \        nc++;\n    }\n    return [ns, nc == rc.length];\n}\n", "\tvar i,j,k,r\
    \ = '';\n\tfor(i=0;i<s.length();i++)\n\t\tfor(j=s.length();j>0;j--){\n\t\t\tk\
    \ = s.charAt(j);\n\t\t\tif(k == c.charAt(j-1)){\n\t\t\t\ts = s.substring(0,j)+s.substring(j+1);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\tfor(i=0;i<s.length();i++){\n\t\tif(s.charAt(i)\
    \ == s.charAt(s.length()-1)){\n\t\t\tr = r + s.charAt(i);\n\t\t}\n\t}\n\treturn\
    \ (r,s.charAt(i) != s.charAt(s.length()-1));\n}\n", "  let result = '';\n  let\
    \ found = false;\n  for(let i=0; i<s.length-1; i++){\n    if(s[i] == c){\n   \
    \   result += s[i];\n      found = true;\n    } else {\n      result += s[i];\n\
    \    }\n  }\n  return [result, found];\n}\n", "    var rev_s = \"\";\n    var\
    \ flag = true;\n    for(var i = 0, j = s.length - 1; i < s.length; i++){\n   \
    \     if(s[i] === c){\n            for(var k = i; k < j; k++){\n             \
    \   rev_s += s[k];\n            }\n            rev_s += s[j];\n            j--;\n\
    \        }\n    }\n    if(rev_s === s){\n        flag = false;\n    }\n    return\
    \ [rev_s, flag];\n}\n", "\tlet result,check;\n\tlet rev = \"\";\n\tfor(let i=s.length;i>0;i--){\n\
    \t\tlet temp = s.charAt(i);\n\t\tif(temp == c){\n\t\t\trev = rev + temp;\n\t\t\
    }else{\n\t\t\trev = rev + temp;\n\t\t\tcheck = true;\n\t\t}\n\t}\n\tresult = rev;\n\
    \treturn result,check;\n}\n", "    \n    // If strings are equal then return false\
    \ for check\n    if (s === c){\n        return [s,False];\n    }\n    \n    //\
    \ Create an empty array\n    let result = [];\n    \n    // Run through all characters\
    \ of s\n    for (let i = 0; i < s.length; i++){\n        \n        // If character\
    \ is equal with any character in c then remove it\n        if (s[i] === c[i]){\n\
    \            \n            // Remove all matching characters from s string\n \
    \           s = s.slice(0, i) + s.slice(i+1);\n            \n            // Return\
    \ tuple (s,False) indicating string is not palindrome\n            return [s,False];\n\
    \        }\n    }\n    \n    // Return tuple (s,False) indicating string is palindrome\n\
    \    return [s,True];\n}\n", "  s = s.split(\"\").reverse().join(\"\");\n  let\
    \ reversed = \"\";\n  let flag = true;\n  for (let i = 0; i < s.length; i++){\n\
    \    if (s[i] == c){\n      continue;\n    }\n    reversed = reversed + s[i];\n\
    \  }\n  if (reversed == s){\n    return (s,flag);\n  }else{\n    return (\"\"\
    +reversed,false);\n  }\n}\n", "  s = s.split(\"\");\n  var res = \"\";\n  var\
    \ flag = false;\n  for(var i=0 ; i < s.length ; i++){\n    if(s.indexOf(c[i])\
    \ == -1){\n      res += s[i];\n    }else{\n      flag = true;\n    }\n  }\n  return\
    \ (flag ? res : \"\") + \"abc\".split(\"\").reverse().join(\"\"),flag;\n}\n",
  "   var reverse = new String();\n   for(let i = s.length - 1; i >= 0; i--){\n  \
    \    reverse+=s[i];\n   }\n   return reverse===reverse_delete_helper(s,c,reverse);\n\
    }", "    const res = [];\n    for(let i =0; i < s.length; i++){\n        res.push(s.slice(i,\
    \ i + c.length))\n    }\n    let final = \"\";\n    for(let i = 0; i < res.length;\
    \ i++){\n        final += res[i].join();\n    }\n    const result = s.split(final).join(\"\
    \");\n    return [result,!final===result]\n}", "    let newStr = \"\",\n     \
    \   isPalindrome = true;\n\n    // Loop the string\n    for (let i = 0; i < s.length;\
    \ i++){\n        // If the character is not equal to the first character of c\
    \ string\n        if (s[i] !== c[i]){\n            // Add character to the new\
    \ string and set boolean flag to false\n            newStr += s[i];\n        \
    \    isPalindrome = false;\n        }\n        // If the first character of the\
    \ string equals to the first character of c string\n        else if (s[i] ===\
    \ c[0]){\n            // Remove the first character from the string and set boolean\
    \ flag to false\n            newStr += s.substring(1);\n            isPalindrome\
    \ = false;\n        }\n        // If the first character of the string is not\
    \ equal to the first character of c string\n        else {\n            // Remove\
    \ the first character of the string and set boolean flag to false\n          \
    \  newStr += s.substring(0,1);\n            isPalindrome = false;\n        }\n\
    \    }\n\n    // Return the result and the boolean flag\n    return ([newStr,isPalindrome]);\n\
    }\n", "    \n    // We are going to keep track of the indexes that we need to\
    \ delete in s\n    // We start by setting all the indexes that we need to delete\
    \ to -1\n    var i = 0;\n    // Loop through all the characters in s and check\
    \ if they are equal to c.\n    // We do this by checking if s[i] == c\n    while(i\
    \ < s.length){\n        \n        if(s[i] !== c){\n            \n            //\
    \ We found a character that was not equal to c, so we need to set s[i-1] equal\
    \ to the character that we found in s\n            s[i-1] = s[i];\n          \
    \  \n            // Now we need to increment our index\n            i++;\n   \
    \     }\n        else{\n            \n            // We found a character equal\
    \ to c, so we can exit the loop\n            break;\n        }\n    }\n    \n\
    \    // We found all the characters that we need to delete, so we can return the\
    \ string\n    return s.substring(0, i) + s.substring(i+1, s.length);\n}\n", "\t\
    s = s.replace(new RegExp('[' + c + '\\\\]', 'g'), ''); // remove all occurences\
    \ of c in s.\n\tvar rev = s.split('').reverse().join(''); // reverse the string\
    \ and join it back.\n\treturn [rev,(s == rev)]; // return reverse string and check\
    \ result.\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
