name: HumanEval_140_fix_spaces
language: js
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\nfunction fix_spaces(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"\
  Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow\
  \  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"\
  Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"\
  ),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["  var spaces = text.replace(/ /g, \"_\");\n  while(spaces.length >\
    \ 2){\n    spaces = spaces.replace(/  /g, \"-\");\n  }\n  return spaces;\n}\n\n",
  "\treturn text.replace(/ /g,\"_\");\n}\n", "  return text.replace(/(\\s+)/g,function(match,spaces){\n\
    \    return (spaces.replace(/ /g,\"_\")+\"-\");\n  });\n}\n", "\treturn text.replace(/\
    \ /g, \"_\");\n}\n", "  text = text.replace(/ /g,'_');\n  var spaces;\n  for(var\
    \ i=0; i<text.length; i++){\n    if(text.charAt(i) == ' '){\n      if(text.charAt(i+1)\
    \ != ' '){\n        text = text.substring(0,i) + \"_\" + text.substring(i,text.length);\n\
    \        i += 2;\n      }\n    }\n  }\n  return text;\n}", "\tif(text == null){\
    \ return text; }\n\tvar exp = text.split(\" \");\n\tfor(var i=0; i< exp.length;\
    \ i++){\n\t\tvar space = false;\n\t\tif(exp[i].length>1){\n\t\t\tspace = true;\n\
    \t\t\tfor(var j=0; j< exp[i].length; j++){\n\t\t\t\tif(exp[i][j] == \" \"){\n\t\
    \t\t\t\texp[i] = exp[i].substring(0, j);\n\t\t\t\t\texp[i+1] = exp[i+1].substring(j+1);\n\
    \t\t\t\t\tj = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(space == false){\n\t\t\texp[i]\
    \ = \"_\" + exp[i];\n\t\t}\n\t}\n\treturn exp[0];\n}\n", "\tvar regex = /[ \\\
    t\\n]+/g;\n\treturn text.replace(regex, \"_\");\n}\n", "  var spaces_before =\
    \ text.match(/^( *)/g)\n  if (spaces_before === null) return text;\n  var spaces_after\
    \ = text.match(/( *)$/g)\n  if (spaces_after === null) return text;\n  \n  text\
    \ = text.replace(/( +)/g, \"-\");\n  text = text.replace(/ (+)/g, \"-\");\n  \n\
    \  return text;\n}\n</code>\n<|/ a tags=javascript,regex dscore=1 |>\n<| c |>\n\
    I think this only works if the entire string consists of spaces.\n<|/ c |>\n<|\
    \ c |>\nThis is not true.\n<|/ c |>\n<| c |>\nYour code works just fine! Thanks!\n\
    <|/ c |>\n<| a |>\n<code>\n'aaa bbb ccc'.split(' ').join('_')\n</code>\n<|/ a\
    \ tags=javascript,regex dscore=0 |>\n<| c |>\nThat's not what OP asked for. Not\
    \ even close.\n<|/ c |>\n<| c |>\nNo. OP says \"and if a string has more than\
    \ 2 consecutive spaces\" which makes the solution correct. Your answer won't do\
    \ that. Try `'aaa  bbb  ccc'.split(' ').join('_')` and you get `aaa_bbb_ccc` which\
    \ is not what OP wanted.\n<|/ c |>\n<| c |>\nNo. OP says \"and if a string has\
    \ more than 2 consecutive spaces\" which makes the solution correct.  Your answer\
    \ won't do that.  Try `'aaa  bbb  ccc'.split(' ').join('_')` and you get `aaa_bbb_ccc`\
    \ which is not what OP wanted.\n<|/ c |>\n<| c |>\nSorry, I misunderstood the\
    \ question.\n<|/ c |>\n<| a tags=javascript,regex dscore=0 |>\n<code>\n\"Example\
    \ 1\".replace(/ /g, '').replace(/  /g, '_')\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    var str = \"Example 1\";\nvar s = str.replace(/(\\s+)(\\s)+/g, '$1_');", "  var\
    \ text = text.replace(/ /g,\"_\");\n  if(text.indexOf(\"  \") != -1){\n    text\
    \ = text.replace(/  /g,\"-\");\n  }\n  return text;\n}\n", "    \n    // This\
    \ regex matches spaces in the text\n    var regex = /\\s+/g;\n    \n    // This\
    \ regex matches consecutive spaces in the text\n    var regex_consecutive = /\\\
    \ +/g;\n    \n    // This replaces spaces with underscores\n    var replace =\
    \ \"_\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_first\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_second\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_third\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_fourth\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_fifth\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_sixth\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_seventh\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_eighth\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_ninth\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_twenty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_thirty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_forty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_fifty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_sixty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_seventy\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_eighty\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_ninety\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_twenty_one\
    \ = \"-\";\n    \n    // This replaces consecutive spaces with -\n    var replace_consecutive_twenty_two\
    \ = \"-\";\n    \n    // This replace", "  var fix_str = text.replace(/ /gi,\"\
    _\");\n  var num_spaces = fix_str.search(/ /g);\n  if (num_spaces > 2){\n    \
    \  fix_str = fix_str.replace(/  /gi, \"-\");\n  }\n  return fix_str;\n}\n", " \
    \ // this replaces consecutive spaces with an underscore\n  var fixed_text = text.replace(/(\\\
    s)+/g, '_');\n  fixed_text = fixed_text.replace(/^_/, '');\n  \n  // this replaces\
    \ multiple spaces with an underscore\n  fixed_text = fixed_text.replace(/\\s{2,}/g,\
    \ '_');\n\n  return fixed_text;\n}\n", "    text = text.replace(/[\\s]+/g, \"\
    _\");\n    text = text.replace(/\\s+/g, \"-\");\n    return text;\n}\n</code>\n\
    <|/ a tags=string,javascript dscore=3 |>\n<| a |>\nTo expand on Robert's answer,\
    \ this solution will work for multiple consecutive spaces.\n<code>", "\tif(text\
    \ === null || text === undefined)\n\t\treturn text;\n\ttext = text.replace(/ /gi,\
    \ \"_\");\n\ttext = text.replace(/  +/gi, \" \");\n\treturn text;\n}\n", "  return\
    \ text.replace(/ /g, \"_\");\n}\n</code>\nI hope that helps!\n<|/ a dscore=5 tags=string,java\
    \ |>\n<| a dscore=5 |>\n<code>\nprivate String normalizeString(String str) {\n\
    \    return str.trim().replaceAll(\"\\\\s+\", \"_\").toLowerCase();\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| c |>\nThis is an awesome solution\n<|/ c |>\n<|\
    \ a dscore=5 tags=string,java |>\n<code>\nString s = \" Some string with spaces\"\
    ;\ns = s.replace(\" \", \"_\");\n</code>\n<|/ a |>\n<| a dscore=4 |>\n<code>\n\
    public static String normalizeString(String str){\n    return str.replaceAll(\"\
    \\\\s+\", \"_\");\n}\n</code>\n<|/ a tags=string,java |>\n<| a dscore=4 |>\n<code>\n\
    String input = \"   Mr. John Smith was born on January 1, 1989. Mr. Smith went\
    \ to Auckland to play in the United States, and John went to Hong Kong to play\
    \ in the Chinese region. \";\ninput = input.replace(\"  \", \"_\");\n</code>\n\
    <|/ a tags=string,java |>\n<| a tags=string,java |>\n<code>\nString s = \"   \
    \ abc\";\ns = s.replaceAll(\"\\\\s+\",\"_\");\nSystem.out.println(s);\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=string,java |>\nYou want to replace all white space\
    \ with underscore.\n<code>\nString s = \"    abc\";\nString normalized = s.replaceAll(\"\
    \\\\s+\",\"_\");\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\nString s = \" \
    \   abc\";\nString normalized = s.replaceAll(\"\\\\s+\",\"_\");\n</code>\n<|/\
    \ a tags=string,java dscore=3 |>\n<| a dscore=3 |>\n<code>\npublic class StringNormalizer\
    \ {\n\n    public static String normalizeString(String str)\n    {\n        return\
    \ str.replaceAll(\"\\\\s+\", \"_\");\n    }\n}\n</code>\n<|/ a tags=string,java\
    \ |>\n<| a dscore=2 |>\n<code>\npublic class NormalizeString {\n\n    public static\
    \ void main(String[] args) {\n\n        String str=\"    abc\";\n        str =\
    \ str.replaceAll(\"\\\\s+\",\"_\");\n\n        System.out.println(str);\n    }\n\
    }\n</code>\noutput\n<code>\nabc_\n</code>\n<|/ a tags=string,java |>\n<| a tags=string,java\
    \ |>\n<code>\npublic static String normalizeString(String str)\n{\n", "\treturn\
    \ text.replace(/\\s+/g,\" \").trim().replace(/\\s{2,}/g,\" \");\n}\n", "  return\
    \ text.replace(/[^a-zA-Z0-9]/g,' ').replace(/ {2,}/g,' -')\n    .replace(/ +/g,'');\n\
    }\n</code>\n<|/ a dscore=3 tags=regex,javascript,string,replace |>\n<| c |>\n\
    Nice, although you probably don't want to replace the first and last spaces with\
    \ underscores. Especially since you might have spaces in your names.\n<|/ c |>\n\
    <| c |>\nAlso, your second regex will make consecutive spaces _almost_ disappear,\
    \ since it will also match the first space after the last underscore. The first\
    \ space will actually become a dash, since it gets replaced with `-` first.\n\
    <|/ c |>\n<| c |>\nThat's not true, because you're replacing spaces with underscores\
    \ in the first regex. Try it out: `\"Example 1\".split(/\\s+/).map(fix_spaces).join('')`\n\
    <|/ c |>\n<| c |>\nThanks. I didn't notice that. I thought it was a typo. Fixed.\
    \ Thanks.\n<|/ c |>\n<| c |>\nNow the only thing left is figuring out how to replace\
    \ consecutive spaces with dashes. `/\\s{2,}/g` seems to do nothing at all.\n<|/\
    \ c |>\n<| a dscore=3 tags=regex,javascript,string,replace |>\nI agree with the\
    \ first answer by Chris G. but want to add some clarification to Chris's answer.\
    \ The regex:\n<code>\n/[^a-zA-Z0-9 ]+|(?<=\\s)\\s(?=\\s)/g\n</code>\nIs effectively\
    \ splitting by all non alphanumeric characters or split by a space if one exists\
    \ before or after a non alphanumeric character. The difference is this regex will\
    \ match on the space before and after the non alphanumeric characters. \nSo if\
    \ you wanted to split by all non alphanumeric characters and also split on space\
    \ then your regex would look like this:\n<code>\n/[^a-zA-Z0-9 ]+|(?<=\\s)\\s(?=\\\
    s)/g\n</code>\nThis isn't technically what Chris was talking about but for what\
    \ I was looking for, I needed both a non alphanumeric character split and a space\
    \ split.\n<|/ a |>\n<| c |>\nFor reference, this was also helpful when working\
    \ on a problem with regex: https://regex101.com/r/i6o0Ww/1\n<|/ c |>\n<| a tags=regex,javascript,string,replace\
    \ dscore=1 |>\n<code>\nString.prototype.replaceAll = function(search", "  return\
    \ text.replace(/ /g, \"_\").replace(/  +/g, \"-\").replace(/\\s{2,}/g, \"-\")\n\
    }\n", "  return text\n    .replace(/\\s+/g, \"_\") // replace spaces with underscores\n\
    \    .replace(/^_+/, \"\") // remove leading underscores\n    .replace(/_+$/g,\
    \ \"\") // remove trailing underscores\n    .replace(/\\s+/g, \"-\") // replace\
    \ consecutive spaces with -\n    .replace(/-+/g, \"-\") // replace consecutive\
    \ hyphens with -\n    .replace(/^-+/, \"\") // remove leading hyphens\n    .replace(/-+$/g,\
    \ \"\") // remove trailing hyphens\n    .replace(/_/g, \"-\") // replace all underscores\
    \ with -\n    .replace(/[-_]/g, \"-\") // replace all hyphens with -\n    .replace(/__/g,\
    \ \"-\") // replace all double-underscores with -\n    .replace(/[-_]{2,}/g, \"\
    -\") // replace all double-hyphens with -\n    .replace(/__{2,}/g, \"-\") // replace\
    \ all double-underscores with -\n    .replace(/_{2,}/g, \"-\") // replace all\
    \ double-hyphens with -\n    .replace(/^[-_]{2,}/g, \"-\") // replace all leading\
    \ hyphens with -\n    .replace(/[-_]{2,}$/g, \"\") // replace all trailing hyphens\
    \ with nothing\n    .replace(/^[-_]+/g, \"-\") // replace all leading hyphens\
    \ with -\n    .replace(/[-_]+$/g, \"\") // replace all trailing hyphens with nothing\n\
    \    .replace(/^_+/g, \"-\") // replace all leading underscores with -\n    .replace(/_+$/g,\
    \ \"\") // replace all trailing underscores with nothing\n    .replace(/^__+/g,\
    \ \"-\") // replace all leading double underscores with -\n    .replace(/__+$/g,\
    \ \"\") // replace all trailing double underscores with nothing\n    .replace(/^[-]+/g,\
    \ \"-\") // replace all leading dashes with -\n    .replace(/[-]+$/g, \"\") //\
    \ replace all trailing dashes with nothing\n    .replace(/^_/g, \"-\") // replace\
    \ all leading underscores with -\n    .replace(/_$/g, \"\") // replace all trailing\
    \ underscores with nothing\n    .replace(/^__/g, \"-\") // replace all leading\
    \ double underscores with -\n    .replace(/__$/g, \"\") // replace all trailing\
    \ double underscores with nothing\n    .replace(/^-+/g, \"-\") // replace all\
    \ leading dashes with -\n    .replace(/-+$/g, \"\") // replace all trailing dashes\
    \ with nothing\n    .replace(/--+/g, \"-\") // replace all double dashes with\
    \ -\n    .replace(/--+$/g, \"\") // replace all double dashes with nothing\n \
    \   .replace(/__+/g, \"-\") // replace all ", "\tvar result = \"\";\n\tvar spaces\
    \ = false;\n\tvar words = text.split(\" \");\n\tfor(var i=0; i<words.length; i++){\n\
    \t\tvar word = words[i];\n\t\tresult += word;\n\t\tif(word.length > 3 && spaces\
    \ == true){\n\t\t\tresult += \"-\";\n\t\t\tspaces = false;\n\t\t}\n\t\telse{\n\
    \t\t\tresult += \" \";\n\t\t\tspaces = true;\n\t\t}\n\t}\n\treturn result;\n}",
  "  if(text == undefined || text == null){\n    return null;\n  }\n  text = text.replace(/\\\
    s+/g, '_');\n  text = text.replace(/^_/, '');\n  return text;\n}\n<|/ file dstars=0\
    \ |>\n<| c |>\nThank you very much for your help and comments!\n<|/ c |>\n<| c\
    \ |>\nNo problem.  Be sure to mark the answer as the solution so that other people\
    \ with the same problem can find their solution easier.\n<|/ c |>\n<| c |>\nThank\
    \ you for the suggestion, I will do that. I just joined the community so I do\
    \ not have enough reputation to upvote.\n<|/ c |>\n<| c |>\nNo worries. Hope you\
    \ find a solution that you like as well.\n<|/ c |>\n<| a tags=mysql,php,sql |>\n\
    Try this:\n<code>\n$query = sprintf('UPDATE %s SET `name` = replace(`name`,\"\
    %s\", \"%s\") WHERE `id` = %d;', \n             $table, $name, $replace, $id);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis did not work for me. I tried this: \n\
    $query = sprintf('UPDATE %s SET `name` = replace(`name`,\"%s\", \"%s\") WHERE\
    \ `id` = %d;', $table, $name, $replace, $id);\n\nI also tried this:\n$query =\
    \ sprintf('UPDATE %s SET `name` = replace(`name`,\"%s\", \"%s\") WHERE `id` =\
    \ %d;', $table, $name, $replace);\n\nI also tried this:\n$query = sprintf('UPDATE\
    \ %s SET `name` = replace(`name`,\"%s\", \"%s\") WHERE `id` = %d;', $table, $replace,\
    \ $id);\n\nNone of which worked.\n<|/ c |>\n<| c |>\nSorry, i did not realize\
    \ you were using pdo. I just updated the answer with a different query.\n<|/ c\
    \ |>\n<| c |>\nThank you for helping me out! I did try your updated query and\
    \ it did not work for me.\n<|/ c |>\n<| a tags=mysql,php,sql |>\nTry to use this\
    \ query:\n<code>\n$query = sprintf('UPDATE %s SET `name` = replace(`name`,\"%s\"\
    , \"%s\") WHERE `id` = %d;', \n             $table, $name, $replace, $id);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for the help but it did not work. I ", " \
    \ text = text.replace(/ /g, \"_\");\n  text = text.split(\" \");\n  var fixed_text\
    \ = [];\n  var space_count = 0;\n  for (var i=0; i<text.length; i++){\n    if\
    \ (text[i] != \" \"){\n      fixed_text[fixed_text.length] = text[i];\n      space_count++;\n\
    \    }\n    else{\n      fixed_text[fixed_text.length] = \"\";\n      space_count\
    \ = 0;\n    }\n    if (space_count > 2){\n      fixed_text[fixed_text.length]\
    \ = \"-\";\n      space_count = 0;\n    }\n  }\n  return fixed_text.join('');\n\
    }\n", "  var noSpace = text.replace(/\\s+/g,\"\");\n  var words = noSpace.split(\"\
    \ \");\n  var noDoubleSpace = words[0];\n  \n  if (words.length > 1){\n    for\
    \ (var i = 1; i < words.length - 1; i++){\n      if (words[i].trim() != words[i\
    \ - 1].trim()){\n        noDoubleSpace = noDoubleSpace + \"_\" + words[i];\n \
    \     }\n    }\n  }\n  \n  return noDoubleSpace;\n}\n", "  var re = new RegExp(\"\
    \ \", \"g\");\n  text = text.replace(re,\"_\");\n  \n  re = new RegExp(\" {2,}\"\
    , \"g\");\n  text = text.replace(re,\"_\");\n  \n  return text;\n}\n", "  if(text.indexOf(\"\
    \ \") > -1){\n    var first = text.split(\" \").map(function(i){ return i.trim();\
    \ });\n    first[0] = first[0].replace(/ /g,'_');\n    return first.join(\" \"\
    );\n  } else {\n    return text.replace(/  /g,'_');\n  }\n}\n", "\treturn text.replace(/\\\
    s{1,}/g,' ').split(' ').join('_').replace(/\\s{2,}/g,'-');\n}\n", "\tvar pattern\
    \ = /(^\\s+|\\s+$)/;\n\ttext = text.replace(pattern,\"\");\n\t\n\ttext = text.replace(/[\
    \ ]{2,}/, \"_\");\n\ttext = text.replace(/_{2,}/, \"_\");\n\treturn text;\n}",
  "  if(text == null || text == \"\" || text === \" \"){\n    return text;\n  }\n\
    \  text = text.replace(/ /g, \"_\");\n  text = text.replace(/_{2,}/g, \"_\");\n\
    \  text = text.replace(/_+/g, \"_\");\n  text = text.replace(/_/g, \"-\");\n \
    \ return text;\n}\n</code>\n<|/ a |>\n<| c |>\nWhile this code may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/q/114762) of how and why\
    \ this solves the problem would really help to improve the quality of your post,\
    \ and probably result in more up-votes. Remember that you are answering the question\
    \ for readers in the future, not just the person asking now. Please [edit] your\
    \ answer to add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| c |>\nThank you for your comment :) I have added the explanation.\n\
    <|/ c |>\n<| a tags=string,javascript,algorithm |>\n<code>", "\ttext = text.replace(/\\\
    s+/g,'');\n\t\n\twhile(text.indexOf('  ') > -1){\n\t\ttext = text.replace('  ',\
    \ '-');\n\t}\n\t\n\treturn text;\n}\n", "\treturn (text+' ').replace(/ {2,}/g,'\
    \ -')\n}\n", "    \n    // If there are no spaces in the text, return the text\
    \ unchanged\n    if(!/\\s/.test(text)){\n        return text;\n    }\n\n    text\
    \ = text.replace(/\\s+/g,\"_\"); //Replace spaces with underscore\n    // If the\
    \ text has consecutive spaces, replace them all with -\n    if(text.search(/\\\
    s\\s/g) !== -1){\n        text = text.replace(/\\s\\s/g,\"-\");\n    }\n    \n\
    \    return text;\n}\n<|/ file filename=knex.js |>\n\"use strict\";\n\nvar util\
    \ = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar\
    \ utils = require('../../utils');\nvar Base = require('./base');\nvar assign =\
    \ require('lodash/object/assign');\n\nvar QueryGenerator = function(dialect, connection,\
    \ where){\n  this.connection = connection;\n  this.sql = this.query = this.selection\
    \ = this.aggregation = null;\n  this.client = connection.client;\n  this.where\
    \ = where;\n  this.utils = utils;\n};\n\nutil.inherits(QueryGenerator, EventEmitter);\n\
    \nassign(QueryGenerator, {\n  \n  //To create the query generator with current\
    \ knex instances\n  instance: function(knex){\n    return new QueryGenerator(knex.client,\
    \ knex.connection);\n  }\n  \n});\n\nassign(QueryGenerator.prototype, {\n  \n\
    \  // Compiles a `columnInfo` query\n  columnInfo: function(column){\n    return\
    \ this.client.columnInfo(column, this.client.defaultConnection);\n  },\n  \n \
    \ select: function(){\n    \n    // Set the query type to 'select'\n    this.queryType\
    \ = 'select';\n    \n    // Set the aggregation queries\n    this.aggregation\
    \ = utils.clone(this.client.aggregation);\n    this.having = utils.clone(this.client.having);\n\
    \    this.distinct = this.client.options.distinct;\n    \n    // Empty objects\
    \ for result set meta-data\n    this.meta = {};\n    \n    // If there is a limit\
    \ passed in as a second argument\n    if(typeof arguments[1] === 'number'){\n\
    \      this.limit(arguments[1]);\n    }\n    \n    // Set the ordering operation\n\
    \    if(typeof arguments[0] === 'string'){\n      this.ordering(arguments[0]);\n\
    \    }else{\n      if(Array.isArray(arguments[0])){\n        this.ordering.apply(this,\
    \ arguments[0]);\n      }else{\n        this.ordering.apply(this, arguments);\n\
    \      }\n    }\n    \n    // Set the column select for the builder\n    if(typeof\
    \ arguments[0] === 'string'){\n      this.columns(arguments[0]);\n    }\n    \n\
    \    // Set the where clause\n    if(this.where){\n      this.where(this.where());\n\
    \    }\n    \n    // Set the having clause\n    if(this.having){\n      this.having(this.having());\n\
    \    }\n    \n    // Set the columns\n    this.columns();", "  if (text == null)\n\
    \    return text;\n  text = text.replace(/ /g, \"_\");\n  text = text.replace(/\
    \  /g, \"-\");\n  text = text.replace(/_{2,}/g, \"_\");\n  text = text.replace(/^_+/,\
    \ \"\");\n  text = text.replace(/_+$/g, \"\");\n  return text;\n}\n", "  text\
    \ = text.replace(/ /g,\"_\");\n  text = text.replace(/([^\\s])\\s/g,\"$1\");\n\
    \  text = text.replace(/\\s[\\s]/g,\"-\");\n  return text;\n}\n", "  var spaces\
    \ = text.replace(/\\s/g, '');\n  if(spaces.length > 2){\n    spaces = spaces.replace(/\\\
    s{2,}/, '-');\n  }\n  return spaces;\n}\n", "\tvar exp = /(^\\s+|\\s+$)/g;\n\t\
    if (text == \"\") return text;\n\ttext = text.replace(exp,\"\");\n\tif (text.match(/\\\
    s(?!\\s)/)){ \n\t\ttext = text.replace(/\\s(?!\\s)/g,\"-\");\n\t\ttext = text.replace(/^-/,\"\
    \");\n\t\ttext = text.replace(/-$/,\"\");\n\t}\n\treturn text;\n}", "    text\
    \ = text.replace(/\\s/g, \"_\");\n    text = text.replace(/^\\s+|\\s+$/g, '');\n\
    \    if (text.match(/ {2}/g)) {\n        text = text.replace(/ {2}/g, \"_\");\n\
    \    }\n    return text;\n}\n", "  return text.replace(/\\s+/g,' ').split(' ').join('_');\n\
    }", "  text = text.replace(/ /g,\"_\");\n  text = text.replace(/  /g,\"_\");\n\
    \  text = text.replace(/  /g,\"_\");\n  return text;\n}", "  return text.split('\
    \ ').join('_').split(' ').join('_').split(' ').join('_');\n}\n", "\tif (text ==\
    \ \"\") {\n\t\treturn \"\";\n\t}\n\tvar space_offsets = [];\n\tvar offset = -1;\n\
    \tvar prev_char = -1;\n\tfor (var i = 0; i < text.length; i++) {\n\t\toffset =\
    \ text.indexOf(\" \", i);\n\t\tif (offset > 0 && offset == prev_char + 1) {\n\t\
    \t\tspace_offsets.push(offset);\n\t\t}\n\t\tprev_char = offset + 1;\n\t}\n\tfor\
    \ (var i = 0; i < space_offsets.length - 1; i++) {\n\t\tvar s = space_offsets[i];\n\
    \t\tvar e = space_offsets[i + 1];\n\t\tif (e - s >= 2) {\n\t\t\tfor (var j = s;\
    \ j < e; j++) {\n\t\t\t\ttext = text.replace(\" \", \"_\");\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn text;\n}\n", "  return text.replace(/ /g,\"_\").replace(/\\s{2,}/g,\"\
    -\");\n}\n", "  return text.replace(/ /g, '_').replace(/( ){2,}/g, \"_\");\n}\n",
  "  if (text==null || typeof(text) !== 'string'){\n    return text;\n  }\n  return\
    \ text.replace(/\\s+/g, '_').\n              replace(/\\s{2,}/g, \"_\");\n}",
  "  return text.replace(/[ ]{2,}/g, ' ').trim().replace(/ +/,'_');\n}\n", "  return\
    \ text.replace(/ /g, \"_\");\n}\n</code>\n<|/ a tags=jquery,javascript,replace,string,regex\
    \ dscore=5 |>\n<| c |>\nI think this is the best answer here so far. I'd just\
    \ like to add that you can add parameters to `fix_spaces` using an anonymous function,\
    \ like so: `fix_spaces(text, _) {\n  return text.replace(/ /g, _);\n}`. That way\
    \ you can pass any number of parameters (to fix any number of spaces). Also, you\
    \ can just use `text.replace(/ /g, \"_\")` by itself.\n<|/ c |>\n<| c |>\nIn case\
    \ someone is wondering: `text.replace(/ +/g, \"_\")` would also work. This would\
    \ replace multiple spaces by a single underscore\n<|/ c |>\n<| c |>\n`text.replace(/\
    \ +/g, \"_\");` will fail if you have double space between words.\n<|/ c |>\n\
    <| c |>\nFor a text with many spaces between words, this solution will fail. Like\
    \ \"this   is a  long text\" will result in \"this_is_a_longtext\".\n<|/ c |>\n\
    <| c |>\nThis solution is not working. `console.log(fix_spaces(\"   \"))` returns\
    \ `\"\"`, while it should be `\"_\"`. Same thing with `fix_spaces(\"  \")`.\n\
    <|/ c |>\n<| a dscore=5 tags=jquery,javascript,replace,string,regex |>\n<code>\n\
    var str = \"a b c d e\";\nstr = str.replace(/[b d]/g, '');\n</code>\nThis replaces\
    \ any instance of b or d with a blank.\n<|/ a |>\n<| c |>\nThis does not do what\
    \ was asked in the question. `'   c'` becomes `'c'`.\n<|/ c |>\n<| c |>\nIt does\
    \ now... :)\n<|/ c |>\n<| c |>\nBut it doesn't. `' c d'` becomes `'c'`. The OP\
    \ said that he wanted `'   c'` becoming `'_'`\n<|/ c |>\n<| c |>\nThat is what\
    \ he stated in the comments.\n<|/ c |>\n<| c |>\nThis doesn't do what was asked.\
    \ It will replace all instances of `b` and `d` with a blank, while he only wanted\
    \ to replace spaces.\n<|/ c |>\n<| a dscore=5 tags=jquery,javascript,replace,string,regex\
    \ |>\nHere's an example on how to replace spaces surrounded by letters by underscore.\n\
    <code>\nvar str = 'a", "\tif (text === undefined) { text = \"\"; }\n\n\tvar words\
    \ = text.split(\" \");\n\tvar fixed_text = \"\";\n\tfor (var i=0; i<words.length;\
    \ i++)\n\t{\n\t\tvar word = words[i];\n\t\tfixed_text += (word.length > 0) ?\n\
    \t\t\tword :\n\t\t\tword.substring(0,1) + word.substring(1).replace(/[^a-zA-Z0-9\
    \ ]/g,\"\").replace(/ /g,\"_\");\n\t\tif (i < words.length-1)\n\t\t\tfixed_text\
    \ += \" \";\n\t}\n\n\treturn fixed_text;\n}\n\n", "\treturn text.replace(/ /g,\"\
    _\").replace(/  /g,\"_\");\n}\n", "\treturn text.replace(/\\s+/g,function(c){\n\
    \t\tif(!c.length) return c;\n\t\tif(c.length == 1 && (c == \" \" || c == \"\\\
    n\" || c == \"\\t\" || c == \"\\f\")){\n\t\t\treturn \"_\";\n\t\t}\n\t\tif(c ==\
    \ \" \" && text.match(/ /g)){\n\t\t\treturn _;\n\t\t}\n\t\treturn c.replace(/\\\
    s+/g,\"-\");\n\t});\n}\n", "\ttext = text.replace(/ /g,'_');\n\twhile(text.match(/\
    \ /)){\n\t\ttext = text.replace(/ /g,'_');\n\t}\n\treturn text;\n}\n", "  return\
    \ text.replace(/_{1,}/g,\" \").replace(/\\s+/g,\" \");\n}\n</code>\nHope it helps\
    \ you.\n<|/ a tags=regex,javascript |>\n<| c |>\nThis solution doesn't allow for\
    \ leading and trailing spaces while OP's solution does. Haven't looked into it,\
    \ but I think this would fail for leading spaces/new lines as well.\n<|/ c |>\n\
    <| c |>\nI like how you encapsulated the regex into a function and showed how\
    \ it works, thank you. However this only works when there are no consecutive spaces,\
    \ as `text.replace(/_{2,}/g,\"-\").replace(/ {1,}/g,\" \");` will result in: `\"\
    -Example\"` for the example `\" Example 2\"` whereas `text.replace(/_{2,}/g,\"\
    -\").replace(/ {1,}/g,\" \");` will result in: `\"Example-\"` for `\" Example\
    \   3\"`. So the function needs a bit of tweaking, but otherwise it works great.\n\
    <|/ c |>\n<| a dscore=4 tags=regex,javascript |>\n<code>", "\tif (typeof text\
    \ !== 'string') return text;\n\tif (text === \"\") return \"\";\n\tif (text ===\
    \ \" \") return \"_\";\n\tvar regex = /\\s{1,}/g;\n\twhile (regex.test(text))\
    \ text = text.replace(regex,\"_\");\n\tif (text.indexOf(\"_\") !== text.length\
    \ - 1) text = text + \"_\";\n\treturn text;\n}\n", "    var fixed_text = text.replace(/[\
    \ ]{2,}/g,'_');\n    var consecutive_spaces = fixed_text.match(/\\s\\s/g);\n \
    \   if (consecutive_spaces && consecutive_spaces.length >= 2) {\n        fixed_text\
    \ = fixed_text.replace(/\\s/g,'-');\n    }\n    return fixed_text;\n}\n", "  text\
    \ = text.replace(/ /g,\"_\");\n  text = text.replace(/(  +)/g,\" \");\n  text\
    \ = text.replace(/([^ ]+ )+/g,\"_\");\n  text = text.replace(/^_+/, \"\");\n \
    \ return text;\n}\n</code>\n<|/ a tags=javascript,regex |>\n<| a |>\n<code>\n\
    var str = \" a b c \"", "\tvar words = text.split(' ');\n\tfor(var i=0; i<words.length;\
    \ i++){\n\t\twords[i] = words[i].trim();\n\t\tif(words[i].length > 0) words[i]\
    \ = words[i].replace(/ /g, \"_\");\n\t\telse if(words[i].length === 0) words[i]\
    \ = \"_\";\n\t}\n\treturn words.join('');\n}\n", "\tvar spaces = text.match(/\\\
    s/g);\n\tfor (var i=0; i<spaces.length; i++){\n\t\ttext = text.replace(spaces[i],\"\
    _\");\n\t}\n\tspaces = text.match(/ /g);\n\tfor (var i=0; i<spaces.length; i++){\n\
    \t\ttext = text.replace(spaces[i],\"-\");\n\t}\n\treturn text;\n}", "    text\
    \ = text.replace(/ /g, \"_\");\n    text = text.replace(/  +/g, \" \");\n    text\
    \ = text.replace(/ -/g, \" \");\n    return text;\n}\n", "\tvar s = text.split(\"\
    \ \");\n\tvar t = '';\n\tfor (var i = 0; i < s.length; i++){\n\t\tt += s[i].trim()\
    \ + \"_\";\n\t}\n\tif (s.length > 2){\n\t\tvar i = 0;\n\t\tfor (var j = 0; j <\
    \ s.length; j++){\n\t\t\tif (s[j].trim() !== \"\"){\n\t\t\t\twhile (s[i+1] ===\
    \ \" \"){\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tt += s[i].trim() + \"-\";\n\t\t\t\
    \ts.splice(j,1);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\treturn t;\n}\n\n", "\t\
    return text.replace(/(\\s)+/g,\"_\");\n}\n", "   var sps = text.split(\" \");\n\
    \   for(var i=0;i<sps.length;i++){\n      if(sps[i].length>2){\n         sps[i]\
    \ = sps[i].replace(/\\s{2,}/g, \"-\");\n      }\n   }\n   return sps.join(\" \"\
    );\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nIf it's an option you can\
    \ also use lodash/underscore's deburr() function to normalize all spaces to dashes,\
    \ while keeping punctuation characters in the string, for example:\n<code>\nvar\
    \ string = 'This has spaces: , . and other punctuation';\n_.deburr(string);",
  "    return text.replace(/ /g,'_').replace(/  /g,'_').replace(/__/g,'_').replace(/_$/g,'_');\n\
    }\n", "\tvar exp = /(^\\s*)|(\\s*$)/;\n\ttext = text.replace(exp, \"\");\n\twhile(text.match(/\\\
    s/)){\n\t\ttext = text.replace(/\\s/g, \"-\");\n\t}\n\treturn text;\n}\n", " \
    \ // Make it one string\n  text = text.replace(/ +/g,'');\n  \n  // If it has\
    \ two consecutive spaces, fix it\n  if(text.indexOf('  ') >= 0){\n    text = text.replace(/\
    \  /g,'_');\n  }\n  \n  // If it has more than two consecutive spaces, fix it\n\
    \  if(text.indexOf('  ') >= 0){\n    text = text.replace(/  /g,'-');\n  }\n  \n\
    \  return text;\n}\n</code>\n<|/ a dscore=3 tags=javascript,jquery |>\n<| a tags=javascript,jquery\
    \ dscore=3 |>\nA solution without regexps:\n<code>", "  if(text === null || text\
    \ === undefined)\n    return text;\n  text = text.split(' ');\n  for(var i=0;i<text.length;i++){\n\
    \    if(text[i] === \"\" || text[i] === \" \"){\n      text[i] = \"_\";\n    }\n\
    \    else if(i > 0 && text[i-1] === \"\" && text[i] === \" \"){\n      text[i-1]\
    \ = \"_\";\n    }\n  }\n  return text.join('');\n}\n", "  return text.replace(/[^A-Za-z0-9\
    \ -]/g,\"\").replace(/\\s+/g,\"_\");\n}\n", "\treturn text.replace(/\\s+/g,\"\"\
    ).replace(/\\s{2,}/g, \"_\");\n}\n", "\tvar spaces_regex = /[ ]+/g;\n\tvar consecutive_regex\
    \ = /[ ]{2,}/g;\n\tvar spaces_replaced = '';\n\tvar consecutive_replaced = '';\n\
    \n\tvar fixed_text = text.replace(consecutive_regex, '_');\n\tfixed_text = fixed_text.replace(spaces_regex,\
    \ '_');\n\tfixed_text = fixed_text.replace(spaces_replaced, '');\n\tfixed_text\
    \ = fixed_text.replace(consecutive_replaced, '-');\n\n\treturn fixed_text;\n}\n",
  "  text = text.trim();\n  if(text === \"\") return text;\n  var res = text;\n  if(text.length\
    \ >= 2){\n    for(var i = 0; i < text.length - 2; i++){\n      if(text[i] == \"\
    \ \" && text[i+1] == \" \"){\n        text[i] = \"_\";\n        text[i+1] = \"\
    _\";\n      }\n    }\n  }\n  return res;\n}\n", "    return text.replace(/[\\\
    s]+/g, '_').replace(/\\s+/g, '_')\n}\n", "    while(text.indexOf(' ',0) >= 0){\n\
    \        text = text.replace(/ /g, \"_\");\n    }\n    return text;\n}\n", "\t\
    var regExp = /(\\s)/g;\n\tvar fixedText = text.replace(regExp,\"_\");\n\tfixedText\
    \ = fixedText.replace(/ +/g,\"\");\n\tif (fixedText.length>2){\n\t\tfixedText\
    \ = fixedText.replace(/([-]{2,})/g,\"_\");\n\t}\n\treturn fixedText;\n}\n\n",
  "\tvar spaces=text.match(/ /g);\n\tif(spaces==null)\n\t\treturn text;\n\tfor(var\
    \ i=0; i<spaces.length; i++){\n\t\tspaces[i]=fix_spaces_2(spaces[i]);\n\t}\n\t\
    return text.replace(/ /g,spaces.join(\"\"));\n}\n", "    return text.replace(/\\\
    s+/g,function(m){return \"_\"+m.replace(/ /g,\"_\")});\n}\n", "\treturn text.replace(/\
    \ /g, \"_\").replace(/\\s\\s+/g, \"-\").replace(/\\s\\s/g, \"-\");\n}\n", "\t\
    text = text.replace(/\\s+/g, \"_\");\n\ttext = text.replace(/(\\s{2,})/g, \"_\"\
    );\n\treturn text;\n}\n", "\treturn text.replace(/ /g, '_').replace(/( +)/g,'_');\n\
    }\n", "  return text.replace(/\\s+/g, \"_\");\n}\n", "  return text.replace(/(\\\
    s+)/ig, function(m){\n    return m.replace(/ /gi,\"_\");\n  }).replace(/(\\s{2,})/ig,\"\
    -\");\n}\n", "  text = text.replace(/ /g,\"_\");\n  text = text.replace(/  +/g,\
    \ \"_\");\n  text = text.replace(/_{2,}/g, \"_\");\n  return text;\n}\n", "\t\
    text = text.trim();\n\ttext = text.replace(/\\s+/g, \"_\");\n\ttext = text.replace(/^_+|_+$/g,\
    \ '');\n\treturn text;\n}\n", "    text = text.replace(/ /g,\"_\");\n    var s\
    \ = text.split(\" \");\n    if (s.length>1 && s[1]==s[s.length-1])\n        text\
    \ = text.split(s[1]).join(\"\");\n    if (s.length > 1)\n        text = s.join(\"\
    \");\n    return text;\n}\n", "\treturn text.replace(/\\s{2,}/g,\" \").replace(/\\\
    s\\s+/g, \"-\");\n}\n", "  if(text === undefined){\n    return false;\n  }\n \
    \ text = text.trim(); //remove leading and trailing spaces\n  text = text.replace(/\\\
    s+/g, \"_\"); //replace consecutive spaces with underscores\n  text = text.replace(/([^\\\
    s])\\s/g,\"$1\"); //handle leading and trailing underscores\n  text = text.replace(/^(_+)|(_+$)/g,\
    \ \"\"); //remove leading and trailing underscores\n  return text;\n}\n", "\t\
    var spaceRegex = /\\s+/g;\n\tif (spaceRegex.test(text)){\n\t\tvar regSpace = new\
    \ RegExp(\" \", \"g\");\n\t\ttext = text.replace(regSpace, \"_\");\n\t\tvar regSpace2\
    \ = new RegExp(\" \", \"g\");\n\t\ttext = text.replace(regSpace2, \"_\");\n\t\t\
    if (text.length >= 2){\n\t\t\ttext = text.replace(\" \", \"-\");\n\t\t}\n\t}\n\
    \treturn text;\n}\n", "\tvar spaces = text.match(/\\s+/g);\n\tif(spaces){\n\t\t\
    text = text.replace(/\\s+/g, \"_\");\n\t\tvar new_spaces = text.match(/\\s+/g);\n\
    \t\tif(new_spaces && new_spaces.length == spaces.length){\n\t\t\tfor(var i=0;\
    \ i<spaces.length; i++){\n\t\t\t\ttext.replace(new RegExp(\"\\\\s\" + spaces[i],\"\
    g\"), \"_\");\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n}\n", "    text = text.replace(/(^\\\
    s*)|(\\s*$)/g,''); \n    var spaces = text.match(/ /g);\n    if (spaces.length\
    \ > 1){\n        text = text.replace(/\\s+/g,'-');\n    }\n    return text;\n\
    }\n", "  return text.replace(/(\\s)+/g,'_');\n}\n", "  return text.replace(/ /g,\
    \ \"_\").replace(/\\s{2,}/g, \"-\");\n}\n</cell>\n<cell>\nfix_spaces(\"Example\"\
    )\n</cell>\n<cell>\nfix_spaces(\"Example 1\")\n</cell>\n<cell>\nfix_spaces(\"\
    Example 2\")\n</cell>\n<cell>\nfix_spaces(\"Example   3\")\n</cell>\n<text>\n\
    Exercise 2\nDefine a function that counts the number of vowels in a given string.\n\
    \n\n</text>\n<cell>", "  text = text.replace(/ /g,\"_\");\n  text = text.replace(/\
    \  +/g,\"_\");\n  return text;\n}\n", "\treturn text.replace(/ /g,'_');\n}\n\n",
  "\treturn text.replace(/ /g,'_').replace(/  +/g,'_');\n}\n\n", "  return text.replace(/\
    \ /g,\"_\");\n}\n", "    var spaces = '';\n    for(var i=0; i<text.length; i++){\n\
    \        if(text.charAt(i) == ' '){\n            spaces += '_';\n        }else{\n\
    \            spaces += text.charAt(i);\n        }\n    }\n    return spaces;\n\
    }\n", "\tvar spaces = text.replace(/\\s+/g, \"_\");\n\tif(spaces.length > 2)\n\
    \t\tspaces = spaces.replace(/\\s+/g, \" \");\n\treturn spaces;\n}\n", "\tvar s\
    \ = text.split(' ');\n\tif (s.join('').length>2){\n\t\ts.forEach(function(item){\n\
    \t\t\tif (item != \" \"){\n\t\t\t\titem = item.replace(/\\s{2,}/, \"-\");\n\t\t\
    \t}\n\t\t});\n\t\treturn s.join('');\n\t}\n\telse{\n\t\treturn s.replace(/\\s{2,}/,\
    \ \"-\");\n\t}\n}\n", "    var spaces = text.replace(/ /g, \"_\");\n    spaces\
    \ = spaces.replace(/ {2}/g, \" -\");\n    return spaces;\n}\n</code>\n<|/ a tags=php,javascript\
    \ |>\n<| a tags=php,javascript |>\nYou could do it in PHP with a simple string\
    \ replace:\n<code>\n$str = 'Example 1';\n$str = str_replace(' ', '_', $str);\n\
    $str = str_replace('- ', ' - ', $str);\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    This doesn't work for me.  It gives me an output of \"example__1\"\n<|/ c |>\n\
    <| c |>\nI didn't downvote but this doesn't address the OP's issue with the consecutive\
    \ space issue.\n<|/ c |>\n<| a |>\nTry This\n<code>\n$string = \"Example 1\";\n\
    $replace = str_replace(\" \", \"_\", $string);\n$replace = str_replace(\"- \"\
    , \"_\", $replace);\n</code>\n<|/ a tags=php,javascript dscore=2 |>\n<| c |>\n\
    This doesn't work for me.  It gives me an output of \"example__1\"\n<|/ c |>\n\
    <| a tags=php,javascript |>\n<code>\n$string = \"Example 1\";\n$string = str_replace('\
    \ ', '_', $string);\n$string = str_replace('- ', ' - ', $string);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,javascript |>\n<code>\n<?php\n$str = 'Example 1';\n\
    $str = str_replace(' ', '_', $str);\n$str = str_replace('- ', ' - ', $str);\n\
    echo $str;\n?>\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nTry this :\n<code>\n\
    $str = 'Example 1';\n$str = str_replace(' ', '_', $str);\n$str = str_replace('-\
    \ ', ' - ', $str);\necho $str;\n</code>\n<|/ a tags=php,javascript |>\n<| c |>\n\
    This doesn't work for me.  It gives me an output of \"example__1\"\n<|/ c |>\n\
    <| c |>\n: It should work. Do you have any space after \"Example\"? Please try\
    \ with `str_replace(' ', '_', 'Example 1')` and check if it works.\n<|/ c |>\n\
    <| a dscore=0 |>\nHere you go:\n<code>\n<?php\n\n$str = 'Example 1';\n\n$str =\
    \ str_replace(' ', '_', $str);\n$str = str_replace('- ', ' - ', $str);\n\necho\
    \ $str;\n", "    text = text || \"\";\n    text = text.replace(/(\\s+)/g, \"_\"\
    );\n    text = text.replace(/(\\s)+/g, \"-\");\n    text = text.replace(/_+/g,\
    \ \"_\");\n    return text;\n}\n", "\tvar res = text.replace(/\\s+/g,\"_\");\n\
    \tres = res.replace(/\\s\\s+/g,\"_\");\n\tres = res.replace(/_{2,}/g,\"_\");\n\
    \treturn res;\n}\n", "\treturn text.replace(/ /g,'_').replace(/\\s{2,}/g,'-');\n\
    }", "\treturn text.replace(/ /g,\"_\").replace(/( +)/g,\"-\");\n}\n", "\ttext\
    \ = text.replace(/  +/g,' '); \n\treturn text.substr(0,text.indexOf(' '));\n}\n",
  "  return text.replace(/ /g,'_').replace(/  +/g,\"-\");\n}\n", "\tvar spaceRE =\
    \ / /g;\n\tvar spaceRE_G = / /g;\n\tvar two_spaces = 2;\n\n\ttext = text.replace(spaceRE,\
    \ '-');\n\n\tif(text.indexOf(\" \") > 1){\n\t\ttext = text.replace(spaceRE_G,\
    \ \"_\");\n\t}\n\treturn text;\n}\n", "\treturn text.replace(/ /g,'_').replace(/\\\
    s{2,}/g,'-');\n}\n", "\tvar space_regex = /\\s+/;\n\tvar consecutive_blank_regex\
    \ = /^[ ]{2,}/;\n\tvar consecutive_space_regex = /[ ]{2,}/g;\n\tvar fixed_text\
    \ = text.replace(space_regex, '_').replace(consecutive_blank_regex, '-').replace(consecutive_space_regex,\
    \ '');\n\treturn fixed_text;\n}\n", "  return text.replace(/ /g,'_').replace(/\
    \  +/g,'_')\n}\n</cell>\n<text>\nIf you call fix_spaces(\"Example 1\") then the\
    \ result will be Example_1. Let's test our function.\n\n\n</text>\n<cell>\nprint(\"\
    Result: \" + fix_spaces(\"Example 1\"))\n</cell>\n<text>\nExercise 5: Fixing a\
    \ list of strings\nThe function fix_spaces takes a text string, and returns a\
    \ list of strings with spaces replaced with underscores.\n\nNow write a function\
    \ fix_spaces_list that takes a list of strings, and returns a list with the spaces\
    \ replaced with underscores.\n\n\n</text>\n<cell>", "    text = text.replace(/\
    \  /g,\"_\");\n    text = text.replace(/ /g,\"_\");\n    var last = text.length\
    \ - 1;\n    var changed = true;\n    while (changed){\n        changed = false;\n\
    \        for (var i = last; i>0; i--){\n            if (text.charAt(i) != \" \"\
    \ && text.charAt(i) != \"-\"){\n                text = text.substring(0, i) +\
    \ \"_\" + text.substring(i);\n                changed = true;\n            }\n\
    \        }\n    }\n    return text;\n}\n", "  var arr = text.split(' ');\n  var\
    \ lastSpace = true;\n  for(var i=0;i<arr.length; i++){\n    if(arr[i].length ==\
    \ 0){\n      lastSpace = true;\n      continue;\n    }\n    lastSpace = false;\n\
    \    if(arr[i].slice(-1) == ' '){\n      arr[i] = arr[i].slice(0,-1);\n      if(arr[i].slice(-1)\
    \ == ' '){\n        arr[i] = '_'+arr[i];\n      }\n    }\n  }\n  if(lastSpace\
    \ == true){\n    arr.pop();\n  }\n  return arr.join(' ');\n}\n\n", "  text = text.replace(/\\\
    s+/g,\"_\");\n  text = text.replace(/^ +/g,\"\");\n  text = text.replace(/ +$/g,\"\
    \");\n  text = text.replace(/ {2}/g,\" \");\n  return text;\n}\n", "\ttext = text.replace(/(^\\\
    s*)|(\\s*$)/g, \"\");\n\tvar res = text.replace(/ {2,}/g, \"-\");\n\treturn res;\n\
    }\n\t", "  if (text.indexOf('  ') >= 0){\n    text = text.replace(/  /g, '_');\n\
    \  }\n  else{\n    text = text.replace(/ /g, '_');\n  }\n  text = text.replace(/\
    \  +/g, '_');\n  return text;\n}\n</script>\n  <script>\n    $(document).ready(function()\
    \ {\n        $(\"#btn\").click(function() {\n            var text = $(\"#text\"\
    ).val();\n            text = fix_spaces(text);\n            $(\"#output\").text(text);\n\
    \        });\n    });\n  </script>\n  </body>\n</html>\n</code>\nThe same goes\
    \ for the second one. Fix spaces just like you did for the first one.\n<|/ a dscore=2\
    \ |>\n<| c |>\nI've never seen that used before for replacing a space.  Thanks!\n\
    <|/ c |>\n<| a tags=javascript,jquery dscore=1 |>\n<code>\nvar text = $(\"#text\"\
    ).val();\ntext = text.replace(/\\s/g, '-');\n$(\"#output\").text(text);\n</code>\n\
    <|/ a |>\n<| a tags=javascript,jquery |>\nTry this\n<code>\nvar text = $(\"#text\"\
    ).val();\ntext = text.replace(/\\s/g, '-');\n$(\"#output\").text(text);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n $(document).ready(function() {\n\
    \        $(\"#btn\").click(function() {\n            var text = $(\"#text\").val();\n\
    \            text = text.replace(/ /g, '_');\n            $(\"#output\").text(text);\n\
    \        });\n    });\n</code>\n<|/ a tags=javascript,jquery |>\n<| a tags=javascript,jquery\
    \ |>\nTry this:\n<code>", "  var spaces = text.match(/ /);\n  if (spaces){\n \
    \   return spaces.replace(/\\s+/g, \"_\").trim();\n  }\n  else{\n    return text.replace(/\\\
    s+/g, \"_\").trim();\n  }\n}\n</cell>\n<text>\nNow let's fix the text!\n\n\n</text>\n\
    <cell>\nfix_spaces(\"Example\");\n</cell>\n<text>\nGreat! Now we're officially\
    \ in business. Go ahead and try out the fix_spaces function on your own.\n\nMake\
    \ sure you run the cell after you modify it to explore the results of fix_spaces.\n\
    \n\n</text>\n<text>\nWe now have some text that has multiple consecutive spaces,\
    \ like \"Example  Example\", or \"Example  Example   Example\". We'll fix this\
    \ by turning this text into \"Example-Example\".\n\n\n</text>\n<cell>\nfix_spaces(\"\
    Example  Example   Example\");\n</cell>\n<text>\nNow let's re-run our analysis\
    \ on that sentence to see if we can find a pattern.\n\nWe'll start by taking a\
    \ look at the original text again:\n\n\n</text>\n<cell>\nprint(\"Original text:\\\
    n\", text_example);\n</cell>\n<text>\nNow we can see that there are multiple spaces\
    \ separating two words in the text. Now we'll run our function on it:\n\n\n</text>\n\
    <cell>\nfix_spaces(\"Example  Example   Example\");\n</cell>\n<text>\nIt still\
    \ has multiple consecutive spaces. How about we try another one?\n\n\n</text>\n\
    <cell>\nfix_spaces(\"Example 2  Example   Example\");\n</cell>\n<text>\nNow there\
    \ are no longer multiple consecutive spaces. We have a winner! Now we can re-run\
    \ the analysis to see what happens if we analyze a sentence without a space:\n\
    \n\n</text>\n<cell>\nfix_spaces(\"Example   Example\");\n</cell>\n<text>\nThis\
    \ time we have a winner. One of the great things about working with text like\
    \ this is that we can often detect patterns. For example, the first word in the\
    \ sentence might have a \"-\" in front of it. So let's see if we can find a pattern\
    \ with our new function. We'll start by taking a look at the original text again:\n\
    \n\n</text>\n<cell>\nprint(\"Original text:\\n\", text_example);\n</cell>\n<text>\n\
    Now we can see that there are multiple spaces separating two words in the text.\
    \ Now let's try running our function on it:\n\n\n</text>\n<cell>\nfix_spaces(\"\
    Example   Example\");\n</cell>\n<text>\nStill no! This is because we haven't turned\
    \ consecutive spaces into hyphens. Now let's try this one:\n\n\n</text>\n<cell>",
  "\treturn (text || \"\").replace(/\\s+/g,function(m){\n\t\tif (m.length >2) {\n\t\
    \t\treturn m[1].replace(/\\S/g,function(s){return \"-\"+ s.toLowerCase();});\n\
    \t\t}\n\t\telse { return m[0];}\n\t});\n}\n", "    var spaces = text.replace(/\
    \ /g, \"_\");\n    spaces = spaces.replace(/_{2,}/g, \"_\");\n    spaces = spaces.replace(/\
    \ -/g, \" \");\n    return spaces;\n}\n", "    for(var i=0; i<text.length; i++){\n\
    \        if(text.charAt(i) == \" \"){\n            text = text.substr(0, i) +\
    \ \"_\" + text.substr(i+1, text.length);\n        }\n    }\n    return text;\n\
    }\n", "  var res = text.split(' ');\n  var new_res = new Array();\n  for(var i\
    \ = 0; i < res.length; i++){\n    if(i == 0 || i == res.length - 1){\n      new_res.push(res[i]);\n\
    \    }else if((res[i] == ' ') && (res[i - 1] == ' ') && (res[i + 1] == ' ')){\n\
    \      new_res.push(res[i]);\n    }else{\n      new_res.push('_');\n    }\n  }\n\
    \  return new_res.join('');\n}\n", "  return text.replace(/[\\s]+/g,'_')\n   \
    \           .replace(/^\\s/,'')\n              .replace(/\\s$/,'');\n}", "   \
    \ \n    for(var i = 0; i<text.length;i++){\n      if(text[i] == \" \") {\n   \
    \       text[i] = \"_\";\n      }\n      else if (text[i] == \" \"){\n       \
    \   text[i] = \"_\";\n      }\n      else {\n          text[i] = \"_\";\n    \
    \  }\n    }\n    return text;\n}\n</code>\nThis code works!\n<|/ a dscore=1 |>\n\
    <| c |>\nThis answer is not complete. In the input string \"Example 1 2 3\", the\
    \ output \"Example 1 2 3\" would not be correct. Using `text.replace(/\\s/g, '_');`\
    \ would change \"Example 1 2 3\" to \"Example_1__2__3\" which still has 3 spaces\
    \ between \"Example\" and \"1\"\n<|/ c |>\n<| c |>\nI agree with the comment on\
    \ code formatting, but your answer is incomplete.\n<|/ c |>\n<| a |>\n<code>",
  "  return text.replace(/ /g,\"_\").replace(/  +/g,\"_\");\n}\n", "\ttext = text.replace(/\
    \ /, '_');\n\ttext = text.split(' ').map(function(s){ return s.replace(/\\s+/g,\
    \ \"-\"); });\n\treturn text.join('_');\n}\n", "\ttext = text.replace(/ /g,\"\
    _\");\n\ttext = text.replace(/  /g,\"_\");\n\tif (text.match(/  /g))\n\t\ttext\
    \ = text.replace(/  /g,\"-\");\n\treturn text;\n}\n", "\tvar re = new RegExp(\"\
    \ \",\"g\");\n\treturn text.replace(re,\"_\");\n}\n", "    return text.replace(/\\\
    s+/g,function(m){\n    \tif(m == \" \"){return \"_\"; }\n    \telse { return m;\
    \ }\n    });\n}\n", "    for(var i = 0; i <= text.length; i++){\n        if(text.charAt(i)\
    \ == ' '){\n            text = text.replace(new RegExp('\\s'+text.charAt(i), 'g'),\
    \ '_');\n        }\n    }\n    return text.replace(/_+/g, \"_\");\n}", "\ttext\
    \ = text.replace(/\\s+/g, \"_\");\n\t\n\twhile(text.match(/_[^_]+_/)){\n\t\ttext\
    \ = text.replace(/_[^_]+_/, \"_\");\n\t}\n\t\n\treturn text;\n}\n", "  return\
    \ text.replace(/ /g,'_').replace(/  /g,'-');\n}\n", "  return text.replace(/\\\
    s+/g,\"_\").replace(/\\s{2,}/g,\"-\");\n}\n", "\tvar newText = text.replace(/\
    \ /g,\"_\").replace(/  +/g,\"-\");\n\tif (text.match(/ {2}/g)) newText = newText.replace(/\
    \ {2}/g,\"\");\n\treturn newText;\n}\n", "    return text.replace(/_/g, \" \"\
    ).replace(/\\s{2,}/g, \"-\");\n}\n", "\ttext = text.replace(/ /g, \"_\");\n\t\
    text = text.replace(/( +)/g, \"-\");\n\treturn text;\n}", "\treturn text.toString().replace(/\
    \ /g,'_').replace(/  +/g,'-').replace(/^-+/,'').replace(/-+$/,'');\n}\n", "\t\
    var spaces_replaced = 0;\n\tvar space_replaced = \"\";\n\tfor(var i=0; i<text.length;\
    \ i++){\n\t\tif(text[i] == \" \"){\n\t\t\tspaces_replaced++;\n\t\t\tif(spaces_replaced\
    \ > 2){\n\t\t\t\tspace_replaced = \"-\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tspaces_replaced\
    \ = 0;\n\t\t\tspace_replaced = \"\";\n\t\t}\n\t\ttext = text.replace(text[i],\
    \ space_replaced);\n\t}\n\treturn text;\n}\n", "    \n    text = text.toString();\n\
    \    \n    if(text.indexOf(' ') > 1){\n        return text.replace(/\\s+/g, \"\
    _\");\n    } else {\n        return text;\n    }\n}\n", "    text=text.replace(/\\\
    s+/g, \"_\");\n    return text.replace(/^_+/, '');\n}\n", "  return text.replace(/\\\
    s\\s+/g,\"_\").replace(/\\s\\s/g,\"-\");\n}\n</textarea>\n</section>\n\n<section>\n\
    <h2>RegExp Usage</h2>\n<textarea data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"\
    Z9Tz\" data-default-tabs=\"js\" data-user=\"llama\" data-embed-version=\"2\" data-pen-title=\"\
    RegExp Usage\" data-preview class=\"small-code-embed\" \n    data-pen-width=\"\
    700\"\n>", "\tvar rsp = text.replace(/ /g, \"_\");\n\tvar rp = text.replace(/[\
    \ ]{2,}/g, \"-\");\n\tif(rsp == rp){\n\t\treturn rsp;\n\t}\n\treturn rp;\n}\n",
  "    text = text.replace(/ /g, \"_\");\n    var spaces = text.match(/ +/g);\n  \
    \  if(spaces.length > 1){\n        text = text.replace(/ +/g, \"-\");\n    }\n\
    \    return text;\n}\n</code>\n<|/ a tags=javascript,regex |>\n<| a |>\nHere is\
    \ a way to do it without using Regex:\n<code>", "\ttext = text.replace(/ /g,\"\
    _\");\n\ttext = text.replace(/([^\\s])\\1+/g,\"$1\");\n\treturn text;\n}\n", "\t\
    // Replace multiple spaces with one space\n\ttext = text.replace(/ {2,}/g,\" \"\
    );\n\t// Replace consecutive spaces with one dash\n\ttext = text.replace(/ +/,\
    \ \"-\");\n\treturn text;\n}\n", "    \n    // Use regular expression to find\
    \ sequences of spaces more than 2 chars in length\n    var regexp = new RegExp(\"\
    \  +\", \"g\");\n    text = text.replace(regexp, \"_\");\n    \n    // If there\
    \ are more than two consecutive spaces, \n    // then replace all consecutive\
    \ spaces with a single one\n    var regexp = new RegExp(\"  +\", \"g\");\n   \
    \ var regexp2 = new RegExp(\"  \", \"g\");\n    while (regexp.exec(text) != null)\
    \ {\n      text = text.replace(regexp2, \"_\");\n    }\n    \n    return text;\n\
    }\n", "    return text.replace(/[^A-Za-z0-9 ]+/g,function(t){\n\treturn t.replace(/\
    \ /g,\"_\");\n    });\n}", "   text = text.replace(/(^\\s*)|(\\s*$)/gi, \"\");\
    \ \n   text = text.replace(/ {2,}/gi, \" \"); \n   text = text.replace(/_{2,}/gi,\
    \ \"-\");\n   return text;\n}\n\n", "    return text.replace(/\\s+/g,function(m){return\
    \ m.replace(/ /g,\"_\")});\n}\n", "  return text.replace(/ /g,\"_\").replace(/\\\
    s+/g,\" \").replace(/\\s+$/g,\"\").replace(/^\\s+|\\s+$/g,\"\");\n}\n", "  var\
    \ exp = /\\s/g;\n  var repl = \" \";\n  var fixed = text.replace(exp, repl);\n\
    \  var consecutive = fixed.split(\" \");\n  var has_consecutive = false;\n  for(var\
    \ i=0; i<consecutive.length; i++){\n    if(consecutive[i].length >= 2){\n    \
    \  has_consecutive = true;\n      consecutive[i] = \"_\"+consecutive[i];\n   \
    \ }\n  }\n  if(has_consecutive){\n    fixed = fixed.substr(0, fixed.length-1);\n\
    \    fixed += \"-\";\n  }\n  return fixed;\n}\n</textarea></div>\n\n    <script>\n\
    \      var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"),\
    \ {\n        lineNumbers: true,\n        matchBrackets: true,\n        mode: \"\
    text/x-csharp\",\n        viewportMargin: Infinity\n      });\n    </script>\n\
    \n    <p><strong>MIME types defined:</strong> <code>text/x-csharp</code>.</p>\n\
    \  </article>\n\n<|/ file ext=.html |>\n<| c |>\nSee also [this related question](http://stackoverflow.com/q/8467002/484670)\n\
    <|/ c |>\n<| c |>\nIn what way does that question answer my question? I want to\
    \ convert C# to VB.NET and vice versa.\n<|/ c |>\n<| c |>\nIt looks like you've\
    \ done a great job by asking how to do it. Have a look at [this answer](http://stackoverflow.com/a/8467096/1136211)\
    \ where I describe how to use ReSharper's \"Format File\" function to do it.\n\
    <|/ c |>\n<| c |>\nIt doesn't answer the question of how to do it with VS, or\
    \ how to use ReSharper to do the conversion.\n<|/ c |>\n<| c |>\nThe title says\
    \ \"in Visual Studio\" but you've tagged this question as \"VS\". What does it\
    \ mean to you? I've edited the question to make it more clear what you're asking\
    \ about.\n<|/ c |>\n<| a dscore=2 |>\nIt appears you are trying to convert C#\
    \ code into VB.Net code. Resharper's \"Format File\" option is probably the easiest\
    \ way to accomplish this.\n<|/ a tags=code-formatting,visual-studio,visual-studio-2008,c#\
    \ |>\n<| a tags=code-formatting,visual-studio,visual-studio-2008,c# |>\nReSharper\
    \ has this functionality, but it doesn't handle all the edge cases, such as generics,\
    \ lambda expressions, anonymous delegates, etc. However, it does format the code\
    \ in the way you describe.\n<|/ a ", "  text = text.replace(/\\s/g, \"_\");\n\
    \  text = text.trim();\n  \n  if (text == \"\"){\n    return text;\n  }\n  \n\
    \  var consecutive_count = 0;\n  text = text.replace(/^ /,\"_\");\n  text = text.replace(/_$/,\"\
    \");\n  \n  for (var i = 0; i < text.length; i++){\n    if (text.charAt(i) ==\
    \ \" \"){\n      consecutive_count++;\n    }\n    if (consecutive_count == 2){\n\
    \      text = text.replace(\" \",\"-\");\n      consecutive_count = 0;\n    }\n\
    \  }\n  \n  return text;\n}\n</textarea></form>\n\n    <script>\n      var editor\
    \ = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers:\
    \ true,\n        matchBrackets: true,\n        mode: \"javascript\",\n       \
    \ readOnly: true\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/javascript</code>, <code>application/json</code>, <code>application/ld+json</code>.</p>\n\
    \n    <p>Development of the CodeMirror add-ons is sponsored by <a href=\"http://marijnhaverbeke.nl/\"\
    >Marijn Haverbeke</a>.</p>\n\n  </article>\n\n<|/ file source=github dstars=5\
    \ ext=.html |>\n<| c |>\n\"The MIT License (MIT)\n\nCopyright (c) 2014 Marijn\
    \ Haverbeke\n\nPermission is hereby granted, free of charge, to any person obtaining\
    \ a copy of this software and associated documentation files (the \\\"Software\\\
    \"), to deal in the Software without restriction, including without limitation\
    \ the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\
    \ sell copies of the Software, and to permit persons to whom the Software is furnished\
    \ to do so, subject to the following conditions:\"\n\nI'm getting this error on\
    \ line `var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"\
    ), {\nlineNumbers: true,\nmatchBrackets: true,\nmode: \"javascript\",\nreadOnly:\
    \ true\n});`\n<|/ c |>\n<| c |>\nYou don't have the `codemirror` library on your\
    \ page. Have you included that script tag? Do you see an error in the console?\
    \ I recommend reading [the documentation on getting started](https://github.com/marijnh/CodeMirror/wiki/Getting-started).\n\
    <|/ c |>\n<| c |>\nYes, I have `<script src=\"http://cdnjs.cloudflare.com/ajax/libs/codemirror/5.9.0/codemirror.min.js\"\
    ></script>`  on the page, and not getting any errors. I thought by adding `mode:\
    \ \"javascript\"` would get rid of the error. Thanks for the link.\n<|/ c |>\n\
    <| c |>\nDo you have that code running somewhere where you can link to? I can't\
    \ see it running in any of mine. Also you don't need to use the `mode` option\
    \ to initialise CodeMirror, it has two modes by default: [javascript and css](https://github.com/marijnh/CodeMirror/wiki/CodeMirror-mode-options).\n\
    <|/ c |>\n<| a dscore=0 ", "  text = text.replace(/ /g,'_');\n  text = text.replace(/\
    \  +/g,' ');\n  return text;\n}", "  text = text.replace(/\\s+/g, \"_\"); \n \
    \ text = text.replace(/^_+/, \"\");\n  text = text.replace(/_+$/, \"\");\n  return\
    \ text;\n}\n", "    text = text.replace(/\\s/g, \"_\");\n    text = text.trim();\n\
    \    if(text.match(/_+/g)){\n        text = text.replace(/_+/g, \"_\");\n    }else{\n\
    \        text = text.replace(/ /g, \"_\");\n    }\n    return text;\n}\n", " \
    \ var a = text.split(' ');\n  for(var i=0; i<a.length; i++){\n    if(i != 0){\n\
    \      if(a[i] != a[i-1]){\n        a[i] = '_'+a[i];\n      }\n    }\n  }\n  \n\
    \  return a.join('');\n}\n", "\tvar space_regex = /\\s+/;\n\tvar space_count =\
    \ 0;\n\tvar new_text = '';\n\twhile (space_count < 2 && text.match(space_regex)){\n\
    \t\tvar space_count = space_count + 1;\n\t\tnew_text = new_text + '_';\n\t}\n\t\
    while (space_count > 1 && text.match(space_regex)){\n\t\tvar space_count = space_count\
    \ - 1;\n\t\tnew_text = new_text + '-';\n\t}\n\treturn new_text;\n}", "    text=text.replace(/\\\
    s/g,\"_\");\n    text=text.replace(/^ /,\"\");\n    text=text.replace(/ $/,\"\"\
    );\n    text=text.replace(/ {2}/g,\"-\");\n    return text;\n}\n", "\tvar fixed\
    \ = text.replace(/ +/g, \"_\");\n\tfixed = fixed.replace(/([^ ]|^)(_+)([^ ]|$)/g,\
    \ \"$1$2$3\");\n\tfixed = fixed.replace(/[ ]([^_]|$)/g, \"-\");\n\treturn fixed;\n\
    }", "  // Replace all spaces with underscores\n  var fixed = text.replace(/ /g,\
    \ \"_\");\n\n  // If the text is more than two consecutive spaces \n  // then\
    \ replace them all with hyphens.\n  if(fixed.match(/ {2,}/)){\n    fixed = fixed.replace(/\
    \ {2,}/g, \"-\");\n  }\n\n  return fixed;\n}\n", "  text = text.replace(/[\\s]+/g,\
    \ \"_\");\n  text = text.replace(/  +/g, \"-\");\n  return text;\n}\n", "    \n\
    \    // The code below is to replace consecutive spaces with _\n    var s = text.split('\
    \ ');\n    \n    for (var i = 0; i < s.length; i++){\n        if (s[i].length>2){\n\
    \            s[i] = '_';\n        }\n    }\n    return s.join('');\n    \n}\n",
  "\ttext = text.trim();\n\treturn text.replace(/\\s+/g,'');\n}\n", "  return text.replace(/[-\\\
    s]+/g, \"_\");\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=javascript,regex |>\n\
    <code>\nstr.replace(/\\s+/g, '_');\n</code>\nThe g at the end means replace all\
    \ occurrences.\n<|/ a dscore=3 |>\n<| c |>\nI didn't want to replace every space,\
    \ but every space that's not part of a word.\n<|/ c |>\n<| a tags=javascript,regex\
    \ |>\nHere's a regex that works:\n<code>\n\"some words with spaces\".replace(/^\\\
    S*\\s\\S*$/gm, '');\n</code>\nSee it work here: http://www.regular-expressions.info/javascriptexample.html\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't remove spaces that should be removed,\
    \ e.g., `\"a b  c   d  e\"` -> `\"a b c d e\"` -> `\"abcd\"`\n<|/ c |>\n<| a tags=javascript,regex\
    \ |>\n<code>", "  return text.replace(/\\s+/g, '_')\n             .replace(/((?=\
    \ )[^\\S\\n])\\s/g, '$1_') \n             .replace(/^\\s*|\\s*$/g, '');\n}\n",
  "  var space_regex = /[ ]+/g;\n  text = text.replace(space_regex, \"_\");\n  text\
    \ = text.replace(new RegExp(\"_{2,}\", \"g\"), \" \");\n  return text;\n}\n",
  "\ttext = text.replace(/\\s+/g, \"_\");\n\ttext = text.replace(/^\\s+|\\s+$/g,\"\
    \");\n\treturn text;\n}\n", "  var regex = /  +/g;\n  return text.replace(regex,\
    \ \"_\");\n}\n", "  return text.replace(/ /g, \"_\").replace(/  /g, \"_\");\n\
    }\n", "  var spacesRegExp = new RegExp(\"\\\\s+\", \"g\");\n  return text.replace(spacesRegExp,\
    \ \"_\");\n}\n", "    \n    // Return text if there are no spaces in the string\n\
    \    if (text.indexOf(' ') == -1){\n        return text;\n    }\n    \n    //\
    \ Convert text to lowercase\n    text = text.toLowerCase();\n    \n    // Remove\
    \ all spaces and then add an underscore\n    text = text.replace(' ', '_');\n\
    \    \n    // If text has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with -\n    text = text.replace(/ {2,}/, '-');\n    \n\
    \    return text;\n}\n", "\treturn text.replace(/ /g, \"_\");\n}\n", "\treturn\
    \ text.replace(/  /g,\"_\");\n}\n", "  text = text.replace(/\\s+/g,'_');\n  text\
    \ = text.replace(/\\s\\s/g,'-');\n  return text;\n}", "    \n    var fixed = text.replace(/\
    \ /g, \"_\");\n    var consecutive = false;\n    for(var i=0; i<fixed.length-1;\
    \ i++){\n        if(fixed.charAt(i) == fixed.charAt(i+1) && fixed.charAt(i) !=\
    \ \" \") {\n            consecutive = true;\n            break;\n        }\n \
    \   }\n\n    if(consecutive) {\n        fixed = fixed.substr(0, fixed.length-1);\n\
    \    }\n    return fixed;\n}\n", "  text = text.replace(/ /g,\"_\");\n  text =\
    \ text.replace(/  /g,\"_\");\n  text = text.replace(/_{2,}/g,\"_\");\n  text =\
    \ text.replace(/_\\s/g,\"_\");\n  return text;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a |>\nYou can use this\n<code>\nstring str = \"Example 1\";\nstring str = str.Replace(\"\
    \ \",\"_\");\n</code>\n<|/ a tags=c#,string,replace dscore=2 |>\n<| c |>\nThis\
    \ replaces *all* spaces with underscores, which isn't what the OP wants. It's\
    \ not clear whether he wants to replace consecutive spaces, either.\n<|/ c |>\n\
    <| c |>\nThis replaces consecutive spaces with underscores, and not spaces with\
    \ underscores. So it won't replace \"Example   3\" with \"Example-3\"\n<|/ c |>\n\
    <| a |>\nYou can try this:\n<code>\npublic static string ReplaceConsecutiveSpaces(this\
    \ string value)\n{\n    if (string.IsNullOrEmpty(value))\n    {\n        return\
    \ value;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    foreach (char\
    \ c in value)\n    {\n        if (char.IsWhiteSpace(c))\n        {\n         \
    \   if (sb.Length > 0)\n            {\n                sb.Append(' ');\n     \
    \       }\n        }\n        else\n        {\n            sb.Append(c);\n   \
    \     }\n    }\n    return sb.ToString();\n}\n</code>\n<|/ a dscore=1 tags=c#,string,replace\
    \ |>\n<| c |>\nThis will replace consecutive spaces with underscores, which is\
    \ not what the OP wants.\n<|/ c |>\n<| c |>\n: You are right, I've edited my answer.\n\
    <|/ c |>\n<| a dscore=1 tags=c#,string,replace |>\nThis works:\n<code>\nusing\
    \ System;\n\nnamespace Scratch\n{\n    class Program\n    {\n        static void\
    \ Main(string[] args)\n        {\n            string input = \"Example\";\n  \
    \          string result = input.Replace(\"  \", \" \");\n\n            Console.WriteLine(result);\n\
    \n            Console.ReadLine();\n        }\n    }\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=1 |>\n<code>\nstring str = \"Example 1\";\nstr = str.Replace(\" \"\
    , \"_\");\n</code>\n<|/ a tags=c#,string,replace |>\n<| c |>\nThis replaces consecutive\
    \ spaces with underscores, which is not what the OP wants. It's not clear whether\
    \ he wants to replace ", "\tvar i, new_string = text, \n\t\tspace = false;\n\t\
    for(i = 0; i < text.length; i++){\n\t\tif(text[i] === \" \" || text[i] === \"\\\
    t\" || text[i] === \"\\r\"){\n\t\t\tspace = true;\n\t\t} else {\n\t\t\tif(space){\n\
    \t\t\t\tnew_string += \"_\";\n\t\t\t\tspace = false;\n\t\t\t}\n\t\t\tnew_string\
    \ += text[i];\n\t\t}\n\t}\n\treturn new_string;\n}\n", "    if (text != undefined){\n\
    \        return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"_\");\n   \
    \ }\n}", "\treturn (text || \"\").replace(/ /g, \"_\").replace(/  +/g, \"-\");\n\
    }\n", "\tvar text = text.trim();\n\tvar matches = text.match(/(?:^|\\s)\\S+/g);\n\
    \tif(matches && matches.length > 2){\n\t\tfor(var i = matches.length; i--; i){\n\
    \t\t\tmatches[i] = matches[i].replace(/\\s+/g, \"-\");\n\t\t}\n\t\ttext = matches.join(\"\
    \ \");\n\t}\n\treturn text;\n}\n", "  return text.replace(/ /g,\"_\");\n}\n",
  "\tvar re = new RegExp(\" \", \"g\");\n\treturn text.replace(re, \"_\");\n}\n",
  "    \n    var pattern = /\\s+/g;\n    text = text.replace(pattern, \"_\");\n\n\
    \    var pattern2 = /\\s{2,}/g;\n    text = text.replace(pattern2, \"_\");\n\n\
    \    return text;\n}\n</code>\n<|/ a |>\n<| c |>\nI see this has 3 downvotes and\
    \ no comment. I think it could be done more efficiently with a regexp and no loops.\n\
    <|/ c |>\n<| c |>\nThis also converts spaces *inside* a word to a dash. For example,\
    \ \"Hello  world\" would be converted to \"Hello-world\". This may be ok if spaces\
    \ inside of a word are not important, but if spaces are significant, this is not\
    \ a solution.\n<|/ c |>\n<| c |>\nThe question asked for \"_example_2\" not \"\
    -example_2\".\n<|/ c |>\n<| c |>\nThe first example above returns \"Example_2\"\
    . If you want it to be \"_Example_2\", change the first line in the code from\
    \ \"var pattern = /\\s+/g;\" to var pattern = /\\s+/g;\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you pass an array of strings (that may have spaces inside words)\
    \ in.\n<|/ c |>\n<| a tags=php,regex |>\nThe answer by Anthony Richards is good\
    \ but has the issue that it will replace spaces within words. To fix this, I used\
    \ a regex that captures the spaces preceding the word and stores it in a group\
    \ (named space1). Then, I match and replace all spaces preceding the word with\
    \ spaces followed by the word and spaces captured in space1.\n<code>\n$string\
    \ = 'Example 1 Example 2 Example 3';\n$pattern = '/\\b([A-Za-z]+?)\\s*([A-Za-z0-9]+)/';\n\
    \n$replacement = '$1_$2';\necho preg_replace($pattern, $replacement, $string);\n\
    </code>\nThis results in:\n<code>\nExample_1 Example_2 Example_3\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis is exactly what I was looking for. Thank you very\
    \ much.\n<|/ c |>\n<| c |>\nI changed this solution to add an underscore to words\
    \ instead of spaces. I used this $pattern = '/\\b([A-Za-z]+?)\\s*([A-Za-z0-9]+)/';\n\
    <|/ c |>\n<| c |>\nIf word boundaries are not used, it also converts spaces inside\
    \ words. For example, if the string is \"Hello  World\" then the output would\
    \ be \"Hello-World\".\n<|/ c |>", "\treturn text.replace(/ /g,'_').replace(/ +/,\
    \ \"-\").replace(/_{2,}/g, \"-\");\n}\n", "  return text.replace(/  /g, ' ').split('\
    \ ').join('_');\n}\n", "\treturn text.replace(/ /g,\"_\").replace(/  +/g,\"-\"\
    );\n}\n", "  if(typeof text != \"string\" || text == \"\"){\n    return text;\n\
    \  }\n  text = text.trim();\n  text = text.replace(/ /g,\"_\");\n  text = text.substring(0,2);\n\
    \  text = text.replace(/_{2,}/g,\"_\");\n  return text;\n}\n", "  if (text ==\
    \ null) {\n    return null;\n  }\n  text = text.toString().replace(/ /g, \"_\"\
    );\n  return text.replace(/ {2,}/g, \"_\");\n}\n", "    var text = text || \"\"\
    ;\n    for(var i = 0; i<text.length; i++){\n        if(text[i] === \" \"){\n \
    \           text = text.replace(/\\s+/g, \"_\");\n        }else if(text.substring(i,\
    \ i+2) === \" \"){\n            text.splice(i,2, text.substring(i, i+2).toUpperCase());\n\
    \            text = text.join(\"-\");\n        }\n    }\n    return text;\n}\n",
  "    return text.replace(/[ ]/g, \"_\");\n}\n\n", "\treturn text.replace(/ +/g,\"\
    _\").replace(/( +)/g,\"_\");\n}\n</code>\n<|/ a tags=javascript |>\n<| a |>\n\
    <code>\nvar a = 'Example 1 2 3';\na = a.replace(/ /g, '_');\na = a.replace(/([a-z0-9])([A-Z])/g,\
    \ '$1_$2').replace(/^_|_$/g, '_');\nalert(a);</code>\n<|/ a dscore=1 tags=javascript\
    \ |>\n<| a |>\n<code>\nvar a = 'Example 1 2 3';\na = a.replace(/ +/g,'_');\na\
    \ = a.replace(/[ ]+/g,'_');\nalert(a);</code>\n<|/ a tags=javascript dscore=1\
    \ |>\n<| a tags=javascript |>\n<code>\nvar str=\"Example 1 2 3\";\nstr=str.replace(/\
    \ /g, '_');\nstr=str.replace(/([A-Z])/g,'_$1').replace(/_([A-Z])/g,'_$1');\nalert(str);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=javascript |>\n<code>\nvar a = 'Example\
    \ 1 2 3';\na = a.replace(/ /g, '_');\na = a.replace(/([a-z0-9])([A-Z])/g, '$1_$2').replace(/^_|_$/g,\
    \ '_');\nalert(a);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only\
    \ code as answer, but also provide an explanation what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=javascript dscore=0 |>\nUse this below code for changing string\
    \ in javascript\n<code>\nvar str=\"Example 1 2 3\";\nstr=str.replace(/ /g, '_');\n\
    str=str.replace(/([a-z0-9])([A-Z])/g, '$1_$2').replace(/^_|_$/g, '_');\nalert(str);\n\
    </code>\n<|/ a |>\n<| a tags=javascript |>\n<code>\nvar a = 'Example 1 2 3';\n\
    a = a.replace(/ +/g,'_');\na = a.replace(/[ ]+/g,'_');\nalert(a);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nvar a = 'Example 1 2 3';\na\
    \ = a.replace(/ +/g,'_');\na = a.replace(/[ ]+/g,'_');\nalert(a);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nvar a", "\ttext = text.replace(/\
    \ +/g, \"_\");\n\ttext = text.split(\" \");\n\tvar spaces = [];\n\tvar len = text.length;\n\
    \tfor(var i = 0; i < len; i++){\n\t\tif(!text[i].length){\n\t\t\tbreak;\n\t\t\
    }\n\t\tif(i > 0 && text[i].substr(text[i-1].length, 1) == \" \"){\n\t\t\tspaces.push(text[i-1]);\n\
    \t\t}\n\t\ttext[i] = text[i].replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n\t\
    \tif(text[i].length){\n\t\t\tspaces.push(text[i]);\n\t\t}\n\t}\n\tfor(var i =\
    \ 0; i <= spaces.length; i++){\n\t\ttext[i] = text[i].replace(spaces[i], \"_\"\
    );\n\t}\n\treturn text.join(\" \");\n}\n", "  if (text == null || text === \"\"\
    ) return text;\n  var re = new RegExp(\"\\\\s+\", \"g\");\n  return text.replace(re,\"\
    _\");\n}\n", "\treturn text.replace(/\\s+/g,function(m){\n\t\treturn m == \" \
    \  \" ? m : (\"_\"+m)\n\t})\n}\n\n", "  return text.replace(/[ ]{2,}/g,' ').trim().replace(/[\
    \ ]{2,}/,\"-\");\n}\n\n", "\treturn text.replace(/ /g, \"_\") \n\t\t\t\t.replace(/\
    \  +/g, \"_\")\n\t\t\t\t.replace(/ /g, \"-\");\n}", "\tvar spaces=/\\s+/;\n\t\
    return text.replace(spaces, \"_\");\n}\n", "\treturn text.replace(/  /g, \"_\"\
    );\n}\n", "\tvar spaces = text.match(/ +/);\n\tvar fix_space = function(space)\
    \ {\n\t\tspace = space.replace(/ /g,\"_\");\n\t\treturn space;\n\t}\n\t\n\tif\
    \ (spaces && spaces.length>2){\n\t\tfor(i=0;i<spaces.length;i++){\n\t\t\tvar space\
    \ = fix_space(spaces[i]);\n\t\t\tvar space2 = spaces[i];\n\t\t\t\n\t\t\tif(i<(spaces.length-1)){\n\
    \t\t\t\tspace2 = fix_space(spaces[i+1]);\n\t\t\t}\n\t\t\t\n\t\t\tif (space !==\
    \ space2){\n\t\t\t\ttext = text.replace(spaces[i],space2);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn text;\n}\n", "    return text.replace(/(\\s+)/g, function($1) { return\
    \ \"_\"+$1.replace(/ /,'_'); })\n}\n</code>\n<|/ a dscore=0 tags=javascript,regex,string\
    \ |>\n<| c |>\nIt should be noted that `\\s` matches _any_ whitespace character,\
    \ including spaces and tabs.\n<|/ c |>\n<| c |>\nThanks Joshua, very nice, however\
    \ this doesn't handle multiple consecutive spaces.\n<|/ c |>\n<| a tags=javascript,regex,string\
    \ |>\nFor simple non-whitespace replacements, a regex works well:\n<code>", "\t\
    return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n", "    text\
    \ = text + '';\n    var n = text.replace(/ /g,\"_\");\n    n = n.replace(/ {2,}/g,\"\
    _\");\n    n = n.replace(/_+/g,\"_\");\n    return n;\n}\n</code>\nI see this\
    \ question was marked as duplicate but it's not. The other questions did not provide\
    \ a solution in Javascript which this question does. \nIf anyone finds this useful,\
    \ please upvote the answer provided.\n<|/ a dscore=2 |>\n<| a tags=regex,javascript,validation\
    \ dscore=1 |>\nJust try this:\n\n<code>", "\treturn text.replace(/\\s{2,}/g,function(match){\n\
    \t\treturn match.split(\"\").map(function(c){\n\t\t\treturn c===\" \" ? \"_\"\
    \ : c;\n\t\t}).join(\"\");\n\t});\n}\n", "  return text.replace(/\\s+/g,\" \"\
    ) //Replace all spaces with underscores\n             .replace(/ +/g,\"-\") //Replace\
    \ multiple spaces with a single dash\n             .replace(/\\s+$/,\"\"); //Trim\
    \ whitespace at end of string\n}\n", "\tvar space_count = text.replace(/[^ ]/g,\
    \ \"\").length;\n\tif (space_count > 2){\n\t\ttext = text.replace(/( +)/g, \"\
    _\");\n\t\ttext = text.replace(/( {2,})/g, \"_\");\n\t}\n\treturn text;\n}\n",
  "\ttext = text.split(\" \");\n\tfor (var i = 0; i < text.length; i++) {\n\t\ttext[i]\
    \ = text[i].replace(/ /g,\"_\");\n\t\tif (text[i].indexOf(\"  \") == text[i].length\
    \ - 2)\n\t\t\ttext[i] = text[i].replace(\"  \",\"-\");\n\t}\n\treturn text.join(\"\
    _\");\n}\n", "\tvar i, word;\n\ttext = text.replace(/\\s+/g, \"_\");\n\tif (text.indexOf(\"\
    \ \") > -1){\n\t\ttext = text.replace(/ +(?= )/g, \"-\");\n\t}\n\treturn text;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
