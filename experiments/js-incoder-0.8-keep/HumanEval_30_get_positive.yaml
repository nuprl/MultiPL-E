name: HumanEval_30_get_positive
language: js
prompt: "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
  \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
  \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
  }\n\ntest();"
completions: ["    var p = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0)\n            p.push(l[i]);\n    }\n    return p;\n}", "  for(let i = 0;\
    \ i < l.length; i++){\n    if(l[i] < 0){\n      return l.slice();\n    }\n  }\n\
    \  return l;\n}\n", "    var p = l.filter(function(n){\n        return n > 0;\n\
    \    });\n    if(p.length == 0)\n        return [];\n    else\n        return\
    \ p;\n}", "  l = [].concat(l);\n  var p = [];\n  for(var i=l.length-1; i>=0; i--){\n\
    \    if( l[i] > 0 ){\n      p.unshift( l[i] );\n    }\n  }\n  return p;\n}", " \
    \ var pos = 0, p = 0;\n  while(p<l.length){\n    p = l.indexOf(-p, pos);\n   \
    \ pos+=(p===-1?0:1);\n    if(!p)\n      break;\n  }\n  if(p>0){\n    var res =\
    \ [], i=0, j=0;\n    for(; i < l.length; i++){\n      if(l[i]>0)\n        res.push(l[i]);\n\
    \      else if(!j)\n        j = i;\n    }\n    res.push(l.slice(i));\n    return\
    \ res;\n  }\n  return l;\n}\n", "    var l = l.slice();\n    l.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > 0) return l.slice(0, i);\n    }\n    return l;\n}\n", "  return\
    \ l.filter(function(i){\n    return i > 0;\n  })\n}\n", "\tvar positive = []\n\
    \tvar neg = []\n\tfor (var i = 0; i < l.length; i++){\n\t\tif (l[i] < 0){\n\t\t\
    \tneg.push(l[i])\n\t\t} else {\n\t\t\tpositive.push(l[i])\n\t\t}\n\t}\n\treturn\
    \ positive.concat(neg)\n}\n", "    return l.filter((x)=>{return x>0;});\n}\n",
  "    var p = l.filter(function (x) { return x > 0; });\n    if (p.length > 0){ p.unshift(0);\
    \ }\n    return p;\n}\n", "    l.sort(function(a, b){\n        return a<b;\n \
    \   });\n    return l.filter(function(x){\n        return x>0;\n    });\n}\n",
  "  return l.filter(function(x){return x > 0});\n}", "\treturn l.filter(function(i){\n\
    \t\treturn i>0;\n\t});\n}", "    l.sort(function(a, b){\n        return a-b;\n\
    \    });\n    return l.filter(function(item){\n        return item >= 0;\n   \
    \ });\n}\n", "  return l.filter(function(e){\n    return e > 0;\n  });\n}\n",
  "    return l.filter(function(i){ return i >= 0; });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=javascript,arrays |>\nI wanted to do something like this\n<code>\n\
    var array = [1,-1,2,-3,4]\nvar positive = array.filter(i => i>0)\n", "    var\
    \ positive = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0)\n\
    \            positive.push(l[i]);\n    }\n    return positive;\n}", "    l = l.filter(function(num){\n\
    \        return num > 0;\n    });\n    return l;\n}\n", "  return l.filter(function(n){return\
    \ n>0});\n}\n", "    let newL = [];\n    for (let i = 0; i < l.length; i++){\n\
    \        if (l[i] > 0)\n            newL.push(l[i]);\n    }\n    return newL;\n\
    }\n", "    let res = [];\n    for(let i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            res.push(l[i]);\n        }\n    }\n    return res;\n}\n", "    var\
    \ _positive = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            _positive.push(l[i]);\n        }\n    }\n    return _positive;\n\
    }\n", "  var a = l.slice(0);\n  var result = [];\n  for(var i = 0; i < l.length;\
    \ i++){\n    if(l[i] >= 0) result.push(l[i]);\n  }\n  return result;\n}\n", " \
    \ return l.filter((item) => (item >= 0));\n}\n", "    var new_l = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        if(l[i] > 0) new_l.push(l[i]);\n    }\n    return\
    \ new_l;\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > 0) positive.push(l[i]);\n    }\n    return positive;\n}\n",
  "    return l.filter(function(x){ return x > 0; });\n}\n", "    let positive = [];\n\
    \    for (let i = 0; i < l.length; i++){\n        let x = l[i];\n        if (x\
    \ == 0){\n            continue;\n        }\n        if (x < 0){\n            x\
    \ = -x;\n        }\n        positive.push(x);\n    }\n    return positive;\n}",
  "    return l.filter(_positive);\n}\n", "    var r = {};\n    for (var i in l) if\
    \ (l[i] > 0){\n        r[i] = l[i];\n    }\n    return r;\n}\n", "    var p =\
    \ [];\n    var n = [];\n    var i;\n    var temp;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            p.push(l[i]);\n        }else{\n  \
    \          n.push(l[i]);\n        }\n    }\n    return p.concat(n);\n}\n", " \
    \ var ret = []\n  for(var i=0; i < l.length; i++){\n    if(l[i] > 0) ret.push(l[i])\n\
    \  }\n  return ret\n}\n", "  var positive = [];\n  var negate = [];\n  for (var\
    \ i=0, l1=l.length; i<l1; i++){\n    var n = Math.abs(l[i]);\n    if (n < 0){\n\
    \      negate.push(n);\n    } else {\n      positive.push(n);\n    }\n  }\n  return\
    \ positive.concat(negate);\n}", "    return filter(l, function(x){\n        return\
    \ x>0;\n    });\n}\n", "\tl = (l||[])\n\treturn l.filter(function(el){\n\t\treturn\
    \ el >= 0\n\t})\n}\n", "\treturn l.filter(function(n){ return n > 0; });\n}\n",
  "\tvar o = [], \n\tr = [];\n\tfor(var i=0;i<l.length;i++){\n\t\tif(l[i] > 0)\n\t\
    \t\to.push(l[i]);\n\t\telse\n\t\t\tr.push(l[i]);\n\t}\n\treturn r.concat(o);\n\
    }\n", "  if(is_number(l) && l > 0){\n    return l;\n  } else {\n    throw Error('Bad\
    \ arguments');\n  }\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0)\n            positive.push(l[i]);\n    }\n    return\
    \ positive;\n}\n", "    return l.filter(function(x) { return x >= 0; });\n}\n",
  "\tvar positive = [];\n\tfor(var i in l){\n\t\tif(l[i] > 0){\n\t\t\tpositive.push(l[i]);\n\
    \t\t}\n\t}\n\treturn positive;\n}", "    var n = [];\n    for(var i=0;i<l.length;i++)\n\
    \        if(l[i]>0){\n            n.push(l[i]);\n        }\n    return n;\n}\n",
  "    return l.filter(function(x){\n        return x > 0;\n    });\n}\n</code></pre>\n\
    \            </section>\n\n            <section>\n                <h2>Let's get\
    \ crazy!</h2>\n            </section>\n\n            <section>\n             \
    \   <h2>Challenge:</h2>\n                <h3>Find out which words in a dictionary\
    \ are commonly repeated in given words.</h3>\n            </section>\n\n     \
    \       <section>\n                <h3>Let's say we have the list of all words\
    \ in a dictionary</h3>\n                <pre><code>", "    var positive = [];\n\
    \    for(var i=0;i<l.length;i++){\n        if(l[i] > 0) positive.push(l[i]);\n\
    \    }\n    return positive;\n}\n", "  var positive = [];\n  for (var i = 0; i\
    \ < l.length; i++){\n    if (l[i] > 0){\n      positive.push(l[i]);\n    }\n \
    \ }\n  return positive;\n}\n", "  return l.filter(function(x){return x>0;});\n\
    }\n", "\treturn l.filter(function(i){\n\t\treturn i>0;\n\t});\n}\n", "  return\
    \ l.filter(function(n){\n    return n > 0;\n  });\n}\n", "    var newlist = [];\n\
    \    for(var i=0; i<l.length; i++){\n        if(l[i] > 0){\n            newlist.push(l[i]);\n\
    \        }\n    }\n    return newlist;\n}\n", "    l = l || [];\n    for(var i\
    \ = 0; i < l.length; i++){\n        if(l[i] > 0)\n            l[i] = l[i];\n \
    \   }\n    return l;\n}\n", "\tvar res = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tres.push(l[i] > 0 ? l[i] : 0);\n\t}\n\treturn res;\n}\n", "    var rv = [];\n\
    \    var positive = true;\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0){\n            positive = true;\n        }else{\n            positive =\
    \ false;\n        }\n        rv.push(l[i]);\n    }\n    return positive ? rv :\
    \ rv.concat();\n}\n", "    var p = []\n    for(var i = l.length - 1; i >= 0; i--){\n\
    \        if(l[i] >= 0) p.push(l[i])\n    }\n    return p\n}\n", "    var positive\
    \ = [];\n    var negative = [];\n    for (var i = 0; i < l.length; i++) {\n  \
    \      if (l[i] > 0){\n            positive.push(l[i]);\n        } else {\n  \
    \          negative.push(l[i]);\n        }\n    }\n    return negative.concat(positive);\n\
    }\n", "    var i;\n    var p = [];\n    for(i=0; i<l.length; i++){\n        if(l[i]<0)\
    \ p.push(l[i]);\n    }\n    return p;\n}\nexports.get_positive = get_positive;\n",
  "    var positive = [];\n    var positiveIndex = 0;\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            positive[positiveIndex] = l[i];\n\
    \            positiveIndex++;\n        }\n    }\n    return positive;\n}\n", " \
    \   for(var i = l.length-1; i >= 0; i--){\n        if(l[i] > 0){\n           \
    \ l.splice(i, 1);\n        }\n    }\n    return l;\n}\n", "\tvar newL = new Array();\n\
    \tfor(var i in l)\n\t\tif(l[i] > 0){\n\t\t\tnewL.push(l[i]);\n\t\t}\n\treturn\
    \ newL;\n}", "  if(!l) return []\n  var ret = []\n  for(var i=0; i<l.length; i++){\n\
    \    if(l[i] >= 0) ret.push(l[i])\n  }\n  return ret\n}\n", "\tvar new_l = l.filter(function\
    \ (n) { return n >= 0});\n\tif (new_l.length === 0){\n\t\treturn null;\n\t}\n\t\
    else {\n\t\treturn new_l;\n\t}\n}\n", "    var positive = [];\n    var n = l.length;\n\
    \    for(var i=0; i<n; ++i){\n        if(l[i] > 0){\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}", "    for(var i=l.length-1; i>=0;\
    \ i--){\n        if(l[i] > 0){\n            l.splice(i,1);\n        }\n    }\n\
    \    return l;\n}\n", "    var ret = [];\n    for (var i = 0; i < l.length; i++){\n\
    \        if (l[i] > 0){\n            ret.push(l[i]);\n        }\n    }\n    return\
    \ ret;\n}\n", "  return l.filter(function(x){\n    return x > 0;\n  });\n}\n",
  "\tvar p = [];\n\tfor(var i = 0, len = l.length; i < len; i++){\n\t\tif(l[i] >=\
    \ 0){\n\t\t\tp.push(l[i]);\n\t\t}\n\t}\n\treturn p;\n}\n", "    var arr = [];\n\
    \    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n            arr.push(l[i]);\n\
    \        }\n    }\n    return arr;\n}\nexports.get_positive = get_positive;\n",
  "  var arr = [];\n  var flag = true;\n  for(var i = 0; i < l.length; i++){\n   \
    \ if(l[i] > 0){\n      arr.push(l[i]);\n    }else{\n      flag = false;\n    }\n\
    \  }\n  return flag ? arr : [];\n}\n", "    var a = [];\n    for (var i = 0; i\
    \ < l.length; i++) {\n        if ((l[i] > 0) || (l[i] == -0)) {\n            a.push(l[i]);\n\
    \        }\n    }\n    return a;\n}\n", "    var res = [];\n    l = l.filter(function(i){return\
    \ i > 0;});\n    for(var i=0;i<l.length;i++){\n        if(l[i] >= 0){\n      \
    \      res.push(l[i]);\n        }\n    }\n    return res;\n}", "    var positive\
    \ = [];\n    var negative = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>=0){\n\
    \            positive.push(l[i]);\n        }else{\n            negative.push(l[i]);\n\
    \        }\n    }\n    return positive.concat(negative);\n}\n", "  let _l = l.slice()\n\
    \  _l.sort()\n  let n = _l.slice()\n  let result = []\n  for(let i = 0; i < n.length;\
    \ i++){\n    if(n[i] > 0){\n      result.push(n[i])\n    }\n  }\n  return result\n\
    }\n", "    return l.filter(function(x){return x>=0;});\n}\n", "    return l.filter(function(x){\n\
    \        return x > 0;\n    });\n}\n", "\tlet l2 = [];\n\tlet positive = 0;\n\t\
    for(let i of l){\n\t\tif(i>0){\n\t\t\tpositive++;\n\t\t}\n\t\tl2.push(i);\n\t\
    }\n\t\n\treturn l2;\n}\n", "    let p = []\n    for(let i of l)\n        if(i\
    \ >= 0)\n            p.push(i)\n    return p\n}\n", "\tif(!l)\n\t\treturn [];\n\
    \tlet positive = [];\n\tfor(let i = 0; i < l.length; ++i){\n\t\tif(l[i] > 0)\n\
    \t\t\tpositive.push(l[i]);\n\t}\n\treturn positive;\n}", "    return l.filter(function(n){return\
    \ n>0});\n}\n", "\treturn l.filter(function(x){ return x >= 0; });\n}\n", "  \
    \  return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "  var\
    \ out = [];\n  for (var i = 0; i < l.length; i++){\n    if(l[i] > 0){\n      out.push(l[i]);\n\
    \    }\n  }\n  return out;\n}\n", "  var p = [];\n  for(var i=0; i<l.length; i++){\n\
    \    if(l[i] > 0) p.push(l[i]);\n  }\n  return p;\n}\n", "    return l.filter(function(x){return\
    \ x>=0;});\n}\n", "  var positive = [];\n  var negative = [];\n  for(var i = 0;\
    \ i<l.length; i++){\n    if(l[i] > 0){\n      positive.push(l[i]);\n    }else{\n\
    \      negative.push(l[i]);\n    }\n  }\n  return[positive,negative];\n}\n", " \
    \   var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0) result.push(l[i]);\n    }\n    return result;\n}\n", "  var rtn = [];\n\
    \  for (var i=0;i<l.length;i++) {\n    if (l[i] > 0) rtn.push(l[i]);\n  }\n  return\
    \ rtn;\n}\n", "    l = l || [];\n    var positive = [];\n    for(var i = 0; i\
    \ < l.length; i++){\n        if(l[i] > 0) positive.push(l[i]);\n    }\n    return\
    \ positive;\n}\n", "  var res = [];\n  for(var i = 0, len = l.length; i < len;\
    \ i++){\n    if(l[i] > 0){\n      res.push(l[i]);\n    }\n  }\n  return res;\n\
    }\n", "    return l.filter(function(e){\n        return e >= 0;\n    });\n}\n",
  "    return l.filter(function (x){return x>0;});\n}\n", "    var p = [], t = [];\n\
    \    for(var i = 0; i < l.length; i++){\n        if(l[i] >= 0) p.push(l[i]);\n\
    \        else if(l[i] < 0){\n            t.push(l[i]);\n        }\n    }\n   \
    \ return t.length ? t : p;\n}\n", "  return l.filter(function(e){\n      return\
    \ e>=0;\n  })\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}", "    return l.filter(function(l){\n        return\
    \ l>0\n    })\n}\n", "  return l.filter(function(n){ return n > 0 });\n}\n", " \
    \ return l.filter(function(x) { return (x > 0) });\n}\n", "    var n = [];\n \
    \   var i;\n    for(i=0;i<l.length;i++){\n        if(l[i] >= 0)\n            n.push(l[i]);\n\
    \    }\n    return n;\n}\n", "\tvar ret = [];\n\tfor(var i=0;i<l.length;i++){\n\
    \t\tif(l[i] > 0){ret.push(l[i]);}\n\t}\n\treturn ret;\n}", "    var positive =\
    \ [];\n    l = l || [];\n    for(var i = 0, len = l.length; i < len; i++){\n \
    \       if(l[i] > 0) positive.push(l[i]);\n    }\n    return positive;\n}\n",
  "\tvar p = [];\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\tp.push(l[i]);\n\
    \t\t}\n\t}\n\treturn p;\n}", "    var o = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            o.push(l[i]);\n        }\n    }\n\
    \    return o;\n}\n", "    return l.filter(function(n){return n>=0});\n}\n", " \
    \   var positive = [];\n    for(var i = 0; i< l.length; i++){\n        if(l[i]\
    \ > 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    return l.filter(function(n) {\n        return n < 0\n    });\n}\n",
  "\treturn l.filter(function(el){\n\t\treturn el >= 0;\n\t});\n}\n", "    var new_l\
    \ = [];\n    for (var i=0; i<l.length; i++){\n        if (l[i] > 0){\n       \
    \     new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "    var res\
    \ = [];\n    l.filter(function(item) {\n        if(item > 0){\n            res.push(item);\n\
    \        }\n    });\n    return res;\n}\n", "    var result = [];\n    l = l.map(Number);\n\
    \    for(var i =0; i< l.length; i++){\n        if(l[i]>0){\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n\n", "    var positives = [];\n    var\
    \ neg = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] > 0){\n     \
    \       positives.push(l[i]);\n        }\n        else{\n            neg.push(l[i]);\n\
    \        }\n    }\n    return positives.concat(neg);\n}", "\tfor(var i=l.length-1;\
    \ i>=0; i--){\n\t\tif(l[i] > 0) return l;\n\t}\n\treturn l;\n}\n", "    var res\
    \ = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n            res.push(l[i]);\n\
    \        }\n    }\n    return res;\n}\n", "    return l.filter(function(val){\n\
    \        return val > 0;\n    });\n}\n", "\tvar newL = [];\n\t\n\tfor(var i =\
    \ 0; i < l.length; i++){\n\t\tif(l[i] > 0) newL.push(l[i]);\n\t}\n\t\n\treturn\
    \ newL;\n}\n", "\tvar positive = [];\n\tfor(var i = 0, l = l.length; i < l; i++){\n\
    \t\tif(l[i] > 0){\n\t\t\tpositive.push(l[i]);\n\t\t}\n\t}\n\treturn positive;\n\
    }\n", "    let ret = [];\n    for(let i=0; i<l.length; i++){\n        if(l[i]>0)\n\
    \            ret.push(l[i]);\n    }\n    return ret;\n}\n", "    var a = [];\n\
    \    for(var i=0; i<l.length; i++){\n        if(l[i] >= 0){\n            a.push(l[i]);\n\
    \        }\n    }\n    return a;\n}\n", "    return filter(l, function(x){return\
    \ x > 0;});\n}\n", "  return l.filter(function(e){\n    return e > 0\n  })\n}\n",
  "    return l.filter(isPositive);\n}\n", "    var p = [];\n    var l = l.filter(function(x){\n\
    \        if(x>0){\n            p.push(x);\n        }\n        return x > 0;\n\
    \    });\n    return p;\n}\n", "    var ret = [];\n    for(var i=0;i<l.length;i++){\n\
    \        if(l[i] > 0){\n            ret.push(l[i]);\n        }\n    }\n    return\
    \ ret;\n}\n", "\tvar p = l.slice(0);\n\t\n\tfor(var i=0;i<l.length;i++){\n\t\t\
    if(l[i]<0){\n\t\t\tp[i] = -l[i];\n\t\t}\n\t}\n\t\n\treturn p;\n}\n", "\tvar positive\
    \ = [];\n\tfor(var i in l){\n\t\tif(l[i] > 0){\n\t\t\tpositive.push(l[i]);\n\t\
    \t}\n\t}\n\treturn positive;\n}\n", "\tif(!l)\n\t\treturn [];\n\tvar a = [];\n\
    \tfor(var i=0; i<l.length; i++)\n\t\tif(l[i] > 0)\n\t\t\ta.push(l[i]);\n\treturn\
    \ a;\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n    }\n \
    \   return positive;\n}\n", "    var arr = [];\n    for(var i=0; i< l.length;\
    \ i++){\n        if(l[i] >= 0){\n            arr.push(l[i]);\n        }\n    }\n\
    \    return arr;\n}\n", "    var rv = [], i = 0, n;\n    while (i < l.length){\n\
    \        n = Number(l[i]);\n        if (n >= 0) rv.push(n);\n        i++;\n  \
    \  }\n    return rv;\n}\nexports.get_positive = get_positive;\n", "  var ret =\
    \ [];\n  for(var i = 0; i < l.length; i++){\n    if(l[i] > 0) ret.push(l[i]);\n\
    \  }\n  return ret;\n}\n", "\tvar result = [];\n\t\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tif(l[i] > 0){\n\t\t\tresult.push(l[i]);\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}\n", "    return l.filter(function(n){ return n > 0; });\n}", "  var\
    \ r = [];\n  for (var i=l.length-1; i>=0; i--) if (l[i] > 0) r.push(l[i]);\n \
    \ return r;\n}\n", "    return l.filter(function(el){return el >= 0;});\n}\n",
  "    var poss = []\n    for (var i=0; i<l.length; i++){\n        if (l[i] > 0) {\n\
    \            poss.push(l[i])\n        }\n    }\n    return poss\n}\n", "    var\
    \ pos = [];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > 0){\n \
    \           pos.push(i);\n        }\n    }\n    return pos;\n}\n", "\tvar n =\
    \ [];\n\tfor(var i in l){\n\t\tif((l[i]<0)||(l[i]==0))\n\t\t\tcontinue;\n\t\t\
    n.push(l[i]);\n\t}\n\treturn n;\n}\n\n", "\tvar i;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tif(l[i] > 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn l.slice(0, i);\n\
    }\n", "\treturn filter(l, function(x) { return x > 0; });\n}\n", "  l = l || [];\n\
    \  var new_l = [];\n  for(var i = 0; i < l.length; i++){\n    if(l[i] > 0){\n\
    \      new_l.push(l[i]);\n    }\n  }\n  return new_l;\n}\n", "\treturn l.filter(function(x){\n\
    \t\treturn x > 0;\n\t});\n}\n", "    return l.filter(function(num) {\n       \
    \ return num > 0;\n    });\n}\n", "    return l.filter(function(e){\n        return\
    \ e > 0;\n    });\n}", "  var positives = [];\n  var negatives = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    if (l[i] > 0){\n      positives.push(l[i]);\n\
    \    }else{\n      negatives.push(l[i]);\n    }\n  }\n  return positives.concat(negatives);\n\
    }\n", "  return l.filter(function(x){return x>0;});\n}\n", "    return filter(positive,\
    \ l);\n}\n", "  return l.filter(function(x){\n    return x > 0;\n  })\n}\n", " \
    \ return l.filter(function(n){\n    return n>0;\n  });\n}\n", "    var p = filter(l,\
    \ function(x){ return x > 0; });\n    var positive = filter(p, function(x){ return\
    \ x > 0; });\n    return unique(p,positive);\n}\n", "  var positive = [];\n  var\
    \ temp = [];\n  for (var i = 0; i < l.length; i++){\n    if (l[i] > 0) {\n   \
    \   positive.push(l[i]);\n    } else {\n      temp.push(l[i]);\n    }\n  }\n \
    \ return positive.concat(temp);\n}\n", "\tvar out = [];\n\t$.each(l, function(index,\
    \ num) {\n\t\tnum = Math.abs(num);\n\t\tif (num >= 0) out.push(num);\n\t});\n\t\
    return out;\n}\n", "  return l.filter(function(n){\n    return n > 0;\n  });\n\
    }\n", "  var ret = [];\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] >=\
    \ 0) ret.push(l[i]);\n  }\n  return ret;\n}\n", "    var ret = []\n    for (var\
    \ i in l) {\n        if (l[i] >= 0) ret.push(l[i])\n    }\n    return ret;\n}\n",
  "    return l.filter(function(v){\n        return v > 0;\n    });\n}\n", "  return\
    \ l.filter(function(e){ return e > 0; });\n}\n", "    var positive = [];\n   \
    \ for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "\tlet result = [];\n\tfor(let\
    \ i = 0; i < l.length; i++){\n\t\tif(l[i] >= 0) result.push(l[i]);\n\t}\n\treturn\
    \ result;\n}\n", "    var p = [];\n    for(var i = 0; i < l.length; i++){\n  \
    \      if(l[i] > 0){\n            p.push(l[i]);\n        }\n    }\n    return\
    \ p;\n}\n", "    return l.filter(function(l){\n        return l>0\n    })\n}\n",
  "\tvar out = [];\n\tfor(var i=0,il=l.length;i<il;++i){\n\t\tvar v = l[i];\n\t\t\
    if(v > 0){\n\t\t\tout.push(v);\n\t\t}\n\t}\n\treturn out;\n}\n", "  return l.filter(function(x){return\
    \ x>=0;});\n}\n", "    return l.filter(function(x){ return x > 0; });\n}\n", " \
    \   var positive = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }", "\treturn l.filter(function(x){ return x > 0; });\n}\n", "  var r = [];\n\
    \  for(var i = 0; i < l.length; i++){\n    if(l[i] > 0) r.push(l[i]);\n  }\n \
    \ return r;\n}\n", "  for(var i=0,j=0;i<l.length;i++){\n    if(l[i]>=0){\n   \
    \   j++;\n    }\n  }\n  return l.slice(0,j);\n}", "    var i;\n    var x = [];\n\
    \    var p = 1;\n    for(i = 0; i < l.length; i++){\n        if( l[i] > 0 ){\n\
    \            x.push(l[i]);\n            if( p > l[i] ){\n                p = l[i];\n\
    \            }\n        }\n    }\n    return x;\n}\n", "    return l.filter(function(a){return\
    \ a>0}).map(function(a){return Math.abs(a)})\n}\n", "  return l.filter(function(x){return\
    \ x>0;});\n}\n", "    return l.filter((item) => item >= 0);\n}\n", "\tl=l.sort(function(a,b){\n\
    \t\treturn a-b;\n\t});\n\tl=l.reverse();\n\tvar u=l[0];\n\tfor(var i=1;i<l.length;i++){\n\
    \t\tif(l[i]<u) u=l[i];\n\t}\n\treturn l;\n}", "    for(var i=0, n=l.length; i<n;\
    \ i++){\n        if(l[i]>0){\n            l.splice(i, 1);\n            i--;\n\
    \        }\n    }\n    return l;\n}\n", "    var pos = 0;\n    for(var i=0;i<l.length;i++){\n\
    \        if((l[i] >= 0) === true){\n            pos++;\n        }\n    }\n   \
    \ return pos;\n}\n", "  let res = [];\n  for(let i = 0; i < l.length; i++){\n\
    \    if(l[i] > 0){\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n", " \
    \   let positive = [];\n    l.forEach((e)=>{\n        if(e>0)\n            positive.push(e);\n\
    \    })\n    return positive;\n}\n", "    return l.filter(function(x){return x\
    \ > 0;});\n}\n", "    var x = l.filter(function(n){\n        return n > 0;\n \
    \   });\n    return x;\n}\n", "    l = l.filter(function(x){ return x > 0; });\n\
    \    l = l.filter(function(x){ return x < 0; });\n    return l.filter(function(x){\
    \ return x; });\n}\n", "\tvar r = [];\n\tfor(var x in l){\n\t\tif(l[x] > 0){\n\
    \t\t\tr.push(l[x]);\n\t\t}\n\t}\n\treturn r;\n}\n", "  return l.filter(function(n){return\
    \ n>0;});\n}\n", "  return l.filter(function(x){return x>0});\n}\n", "  return\
    \ l.reduce(function(prev, cur){\n    if(prev >= 0) return prev;\n    return cur;\n\
    \  });\n}\n", "    let positive = [];\n    l.forEach(function(item) {\n      \
    \  if (item > 0) {\n            positive.push(item);\n        }\n    });\n   \
    \ return positive;\n}", "  var arr = [];\n  for(var i = 0; i < l.length; i++){\n\
    \    if(l[i] > 0){\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n}\n", "\t\
    return l.filter(function(num){\n\t\treturn num > 0;\n\t});\n}\n", "    var p =\
    \ [];\n    for(var i=l.length-1;i>=0;i--){ if(l[i]>0){p.unshift(l[i])}}\n    return\
    \ p;\n}\n", "    var p = [];\n    for(var i = 0; i < l.length; i++){\n       \
    \ if(l[i] > 0){\n            p.push(l[i]);\n        }\n    }\n    return p;\n\
    }\n", "  return l.filter(function(item){\n    return item > 0;\n  });\n}\n", " \
    \   let positive = []\n    for(let i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0){\n            positive.push(l[i])\n        }\n    }\n    return positive\n\
    }\n", "  return l.reduce(function(prev, curr){\n    return (curr > 0) ? prev :\
    \ curr\n  })\n}", "  var res = [];\n  for(var i=l.length-1; i>=0; --i){\n    if(l[i]\
    \ > 0){\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n", "  if(typeof\
    \ l === \"number\" && l >= 0){\n    return [l];\n  }\n  var positives = [];\n\
    \  for(var i = 0, len = l.length; i < len; i++){\n    var l = l[i], pos = Number(l);\n\
    \    if(Number.isNaN(pos)){\n      pos = 0;\n    }\n    if(pos < 0){\n      positives.push(-l);\n\
    \    }\n    positives.push(pos);\n  }\n  return positives;\n}\n", "  return l.filter((x)=>{\n\
    \    return (x>0);\n  }\n  )\n}\n", "\tfor(var i=0; i < l.length; i++){\n\t\t\
    if(l[i] < 0){\n\t\t\treturn l.slice(0, i).concat(l.slice(i+1, l.length));\n\t\t\
    }\n\t}\n\treturn l;\n}\n", "  return l.filter(function(n){\n    return n > 0;\n\
    \  })\n}\n", "  var res = [];\n  var i;\n  for(i = 0; i < l.length; i++){\n  \
    \  if(l[i] > 0){\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n", "\t\
    var positive = [];\n\tfor(var i=0,llen=l.length;i<llen;i++){\n\t\tif((l[i]>0)\
    \ || (l[i]==0)){\n\t\t\tpositive.push(l[i]);\n\t\t}\n\t}\n\treturn positive;\n\
    }\n", "    return l.filter(function(n){ return n > 0; });\n}\n", "  return l.filter(function\
    \ (x){return x>0;});\n}\n", "  return l.filter(function(x) { return x >= 0; });\n\
    }\n", "  var res = [];\n  for(var i = 0; i< l.length; i++){\n    if(l[i] > 0){\n\
    \      res.push(l[i])\n    }\n  }\n  return res;\n}\n</code>\n<|/ a tags=javascript,arrays,filter,math,sorting\
    \ dscore=2 |>\n<| a tags=javascript,arrays,filter,math,sorting |>\n<code>", " \
    \   var ret = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i] > 0)\
    \ ret.push(l[i]);\n    }\n    return ret;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
