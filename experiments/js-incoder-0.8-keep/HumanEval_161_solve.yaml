name: HumanEval_161_solve
language: js
prompt: "//You are given a string s.\n// if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string\
  \ contains no letters, reverse the string.\n// The function should return the resulted\
  \ string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\
  \n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
  1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
  #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n\
  \  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
  #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();"
completions: ["    var str=s.toLowerCase();\n    return str.replace(/\\W/g,function(c){\n\
    \        return (c.charCodeAt(0)>=97&&c.charCodeAt(0)<=122)?c.toUpperCase():c.toLowerCase();\n\
    \    });\n}\n", "    let newS = \"\";\n    for(let i=0; i<s.length; i++){\n  \
    \      if(s[i].toUpperCase() == s[i]){\n            newS += s[i].toLowerCase();\n\
    \        }else{\n            newS += s[i];\n        }\n    }\n    return newS;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is another solution that uses String.prototype.replace\
    \ and String.prototype.split.\n\n<code>", "    \n    // Code here\n    \n}\n\n\
    module.exports = {\n    solve\n};\n'''\n\n    problem_b = Solution()\n    assert\
    \ problem_b.solve(s) == s\n\n\ndef test_solve_with_a_large_string():\n    s =\
    \ '''", "    \n    //Your code here\n    \n    var newArray = new Array();\n \
    \   var len = s.length;\n    for(var i=0;i<len;i++){\n        if(s[i].length>0){\n\
    \            newArray.push(s[i].toUpperCase());\n            newArray.push(s[i].toLowerCase());\n\
    \        }else{\n            newArray.push(s[i].toLowerCase());\n        }\n \
    \   }\n    return newArray.join(\"\");\n}", "  let letters = s.replace(/[a-z]/gi,\
    \ s => s.toUpperCase()).replace(/[A-Z]/gi, s => s.toLowerCase());\n  if (!letters)\
    \ return s;\n  return solveRecursive(s, letters);\n}\n", "    s = s.replace(/#/g,\"\
    #@\");\n    s = s.replace(/a/g,\"#@\");\n    s = s.replace(/b/g,\"#@\");\n   \
    \ s = s.replace(/a/g,\"@\");\n    s = s.replace(/b/g,\"@\");\n    return s.replace(/a/g,\"\
    @\");\n}", "    let newString = s.split('').map(c => c.toLowerCase()).join('');\n\
    \    if (newString === '') newString = '#a@C';\n    return newString.replace(/[A-Z]/ig,\
    \ c => c.toUpperCase());\n}\n", "    for(var i = 0; i < s.length; i++){\n    \
    \    var ch = s[i];\n        if(ch.toUpperCase() === ch) ch = ch.toLowerCase();\n\
    \        else if(ch.toLowerCase() === ch) ch = ch.toUpperCase();\n        else\
    \ ch = s[i];\n    }\n    return s.split('').map(c => c.toLowerCase()).join('');\n\
    }\n", "    for(const char of s){\n        if(char.match(/[a-z]/i)) {\n       \
    \     const upcase = char.toUpperCase();\n            const lowercase = char.toLowerCase();\n\
    \            return s.replace(char, upcase + lowercase);\n        } else {\n \
    \           return char;\n        }\n    }\n    return s;\n}", "  var newStr =\
    \ \"\";\n  for(var i=0; i<s.length; i++){\n    if(/[a-zA-Z]/.test(s[i])){\n  \
    \    var newLetter = s[i].toUpperCase();\n      var oldLetter = s[i].toLowerCase();\n\
    \      newStr += newLetter;\n      newStr += newLetter;\n      newStr += oldLetter;\n\
    \      newStr += oldLetter;\n    }else{\n      newStr += s[i];\n    }\n  }\n \
    \ return newStr;\n}\n", "  let ans = ''\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if ( /[A-Za-z]/g.test(s[i]) ) { ans += s[i].toUpperCase()}\n    else\
    \ { ans += s[i]}\n  }\n  return ans \n}\n", "    let arr=s.split('').map(x =>\
    \ x.toLowerCase());\n    for(let i=0;i<arr.length;i++){\n        if(isNaN(arr[i])){\n\
    \            arr[i]=arr[i].toLowerCase();\n        }\n    }\n    return arr.join('');\n\
    }\n</code>\n<|/ a tags=javascript,string,arrays |>\n<| a |>\nYou can use some\
    \ string methods that can do that for you:\n\n<code>", "    var str = s.split(\"\
    \").reverse().join(\"\");\n    console.log(str);\n    return str;\n}", "\ts =\
    \ s.split(\"\").join(\"\");\n\tlet isLetter = true;\n\tfor(let i = 0; i < s.length;\
    \ i++){\n\t\tlet c = s.charAt(i);\n\t\tif(!(c in letterCase)){\n\t\t\tisLetter\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(isLetter){\n\t\treturn s.split(\"\"\
    ).reduce((acc, curr, index, arr)=>{\n\t\t\tif(curr in letterCase){\n\t\t\t\tif(index\
    \ === arr.length){\n\t\t\t\t\treturn acc + letterCase[curr];\n\t\t\t\t}\n\t\t\t\
    \telse{\n\t\t\t\t\tlet next = (index+1)%arr.length;\n\t\t\t\t\treturn acc + letterCase[curr]\
    \ + arr[next];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn acc + curr;\n\t\
    \t\t}\n\t\t})\n\t}\n\telse{\n\t\treturn s.split(\"\").reduce((acc, curr, index,\
    \ arr)=>{\n\t\t\tif(index === arr.length){\n\t\t\t\treturn acc + letterCase[curr];\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tlet next = (index+1)%arr.length;\n\t\t\t\treturn\
    \ acc + letterCase[curr] + arr[next];\n\t\t\t}\n\t\t})\n\t}\n}\n", "    let arr\
    \ = s.split('');\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let curr = arr[i];\n        let currIndex = arr[i].toUpperCase().charCodeAt()\
    \ - 97; //Convert the letter to it's ascii value\n        if(currIndex >= 0){\n\
    \            newArr.push(String.fromCharCode(currIndex));\n        }else{\n  \
    \          newArr.push(curr);\n        }\n    }\n    return newArr.join('');\n\
    }\n", "    return s.replace(/[a-z]+/gi, function(w){\n        var uw = w.toUpperCase();\n\
    \        return uw.charCodeAt(0)-64<0?uw:w.toLowerCase();\n    }).replace(/^[a-z]+/i,\
    \ function(w){\n        var uw = w.toLowerCase();\n        return uw.charCodeAt(0)-64<0?uw:w.toUpperCase();\n\
    \    })\n}\n", "    let rev = s.replace(/[^a-zA-Z]/g,'');\n    let arr = s.split('');\n\
    \    for(let i=0;i<arr.length;i++){\n        if(arr[i].match(/[a-z]/i)){\n   \
    \         arr[i] = arr[i].toUpperCase();\n        }else{\n            arr[i] =\
    \ arr[i].toLowerCase();\n        }\n    }\n    s = arr.join('');\n    return rev\
    \ ? s + rev : s;\n}\n", "    return s.replace(/[a-z]/g, function(){\n        return\
    \ arguments[0].toUpperCase();\n    }).replace(/[A-Z]/g, function(){\n        return\
    \ arguments[0].toLowerCase();\n    }); \n}\n", "\tlet newString = s.split('').join('')\n\
    \tlet newString2 = newString.split('@').join('')\n\tlet newString3 = newString2.replace(/[a-z]/g,function(x){\n\
    \t\tif(x==\"@\") return x.toUpperCase()\n\t\telse return x.toLowerCase()\n\t})\n\
    \tlet newString4 = newString3.replace(/[^a-zA-Z]/g,function(x){\n\t\tif(x==\"\
    @\") return x.toUpperCase()\n\t\telse return x.toLowerCase()\n\t})\n\treturn newString4\n\
    }\n", "    for(var i=0; i< s.length; i++){\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z'){\n            s[i] = s[i].toUpperCase();\n        }else if (s[i] >= 'A'\
    \ && s[i] <= 'Z'){\n            s[i] = s[i].toLowerCase();\n        }else{\n \
    \           s[i] = s[i];\n        }\n    }\n    for(var i=s.length-1; i>=0; i--){\n\
    \        s[i] = s[i].charAt(0).toUpperCase() + s[i].slice(1);\n    }\n    return\
    \ s.join(\"\");\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't return the same result.\
    \ You're only reverse the first two characters. `a` becomes `A` and `A` becomes\
    \ `a`.\n<|/ c |>\n<| c |>\nGood catch, thanks. I fixed the issue with it.\n<|/\
    \ c |>\n<| c |>\nHaving trouble understanding what's going on in the function\
    \ `solve()`. Could you walk through what it's doing?\n<|/ c |>\n<| c |>\nSorry,\
    \ but I don't have time to explain it right now. I'll let someone else do it.\
    \ :)\n<|/ c |>\n<| c |>\nThanks for your effort, I understand it now. I'm just\
    \ now trying to understand what exactly you're doing by printing the result. I\
    \ understand that you're looping through each letter in `s` but I can't seem to\
    \ figure out why the `for` loop stops short of the last letter of each string\
    \ when `i` is incremented by `1` each time until `i` is equal to `s.length`. That's\
    \ what I'm confused about.\n<|/ c |>\n<| a dscore=1 tags=arrays,string,javascript\
    \ |>\n<code>", "    s=s.split(\"\").map(e => e.charCodeAt(0)).toString()\n   \
    \ s=s.split(\"\").map(e => {\n        if(s.includes(e)){\n            return e.toUpperCase()\n\
    \        }\n        return e.toLowerCase()\n    }).join(\"\")\n    return s\n\
    }\n<|/ file ext=.js filename=stringReversal.js source=gitlab |>\n<| a |>\n<code>",
  "   let sol = s.toLowerCase().split('').map(item => {\n       if(/[a-z]/.test(item))\n\
    \           return item.toUpperCase();\n       else \n           return item.toLowerCase();\n\
    \   }).join('');\n   return sol.length ? sol : s.split('').map(item => item.split('').reverse().join('')).join('');\n\
    }\n", "    let regex = /(^|\\s)(\\w)/g;\n    let str= s.replace(regex, \"$1$2\"\
    );\n    let res = \"\";\n    let j = 0;\n    for(let i=0; i<str.length; i++){\n\
    \        if(str[i] === \" \"){\n            j++;\n        }\n        else {\n\
    \            res+=str[i].toUpperCase();\n            res+=str.slice(j,i).toLowerCase();\n\
    \            j=i+1;\n        }\n    }\n    return res;\n}", "    let result =\
    \ \"\";\n    for(let i = 0; i < s.length; i++){\n        if(isLetter(s[i])){\n\
    \            result += s[s.length - i - 1].toUpperCase();\n        }\n       \
    \ else{\n            result += s[s.length - i - 1];\n        }\n    }\n    return\
    \ result;\n}", "    \n    return s.replace(/[a-zA-Z]/ig, (letter)=>{\n       \
    \ \n        if(letter.charCodeAt(0) > 97 && letter.charCodeAt(0) < 122){\n   \
    \         return letter.charCodeAt(0) - 32;\n        }else if(letter.charCodeAt(0)\
    \ > 64 && letter.charCodeAt(0) < 91){\n            return letter.charCodeAt(0)\
    \ - 55;\n        }else{\n            return letter;\n        }\n    });\n}\n",
  "  let s = s.replace(/[a-z]/ig, (m) => m.toUpperCase());\n  let s = s.replace(/[A-Z]/ig,\
    \ (m) => m.toLowerCase());\n  let s = s.replace(/[^a-zA-Z]/g, (m) => m.toUpperCase());\n\
    \  s = s.replace(/[^A-Za-z]/g, (m) => m.toLowerCase());\n  return s;\n}\n", " \
    \   return s.replace(/[a-zA-Z]/g,function(letter){\n        return letter.toUpperCase()||letter.toLowerCase()\n\
    \    });\n}\n</code>\n<|/ a |>\n<| c |>\nHi , i need to use regular expression\
    \ for this\n<|/ c |>\n<| a dscore=0 |>\nHere it is, it's for java, but i hope\
    \ you'll get the idea\n<code>\nString s = \"aBC\";\nStringBuilder sb = new StringBuilder(s);\n\
    \nfor (int i = 0; i < s.length(); i++) {\n    if (Character.isUpperCase(s.charAt(i)))\
    \ {\n        sb.setCharAt(i, Character.toLowerCase(s.charAt(i)));\n    } else\
    \ {\n        sb.setCharAt(i, Character.toUpperCase(s.charAt(i)));\n    }\n}\n\
    </code>\n<|/ a tags=java,string |>\n<| a tags=java,string dscore=0 |>\nYou could\
    \ use replaceAll:\n<code>\npublic static String reverse(String s) {\n  return\
    \ s.replaceAll(\"([A-Z])\", \"$1a\").\n           replaceAll(\"(.)\", \"$1$1\"\
    ).\n           toUpperCase();\n}\n</code>\nThe first replaceAll replaces any uppercase\
    \ letter with $1a. The second replaceAll replaces any single letter (.) with $1$1.\
    \ The toUpperCase at the end ensures that the string will consist entirely of\
    \ uppercase letters.\n<|/ a |>\n<| c |>\nHi , i need to use regular expression\
    \ for this\n<|/ c |>\n<| a tags=java,string dscore=0 |>\nI think this one is more\
    \ readable:\n<code>\npublic static String reverse(String s) {\n    StringBuilder\
    \ sb = new StringBuilder();\n    for (int i=s.length()-1; i>=0; i--) {\n     \
    \   sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nHi , i need to use regular expression for this\n<|/ c |>\n<|\
    \ c |>\nThat's why I prefer to use StringBuilder\n<|/ c |>\n<| c |>\nHi , i need\
    \ to use regular expression for this\n<|/ c |>\n<| a tags=java,string |>\n<code>\n\
    import java.util.*;\npublic class ReverseString {\n    public static void main(String\
    \ args[]){\n        String s=\"1234\";\n        Scanner input=new Scanner(System.in);\n\
    \        System.out.print(s);\n        s=reverseString(s);\n        System.out.print(s);\n\
    \    }\n    public static String reverseString(String s){\n        StringBuilder\
    \ sb=new StringBuilder();\n        for(int i=s.length()-1;i>=0;i--){\n       \
    \     sb.", "    for(var i=0;i<s.length;i++){\n        if(s[i].toLowerCase()==s[i].toUpperCase()){\n\
    \            s[i]=s[i].toLowerCase();\n        }\n        else{\n            s[i]=s[i].toUpperCase();\n\
    \        }\n    }\n    return s;\n}\n", "    if(!s.length) return s; // check\
    \ if empty string was given\n    let chars = s.split('').reduce((a,b)=>{\n   \
    \     if(isLetter(b)){\n            if(isUpper(a)) a = a.toUpperCase()\n     \
    \       else a = a.toLowerCase()\n        }\n        return a += b\n    },'');\n\
    \    if(!chars.length) return s;\n    return chars.split('').reduce((a,b)=>{\n\
    \        if(isUpper(a)) return b\n        return a\n    },'')\n}\n", "    s=s.split(\"\
    \");\n    var res=\"\";\n    for(i=0;i<s.length;i++){\n        if(s[i].match(/[a-z]/)){\n\
    \        s[i]=s[i].toUpperCase();\n        }\n        else{\n        s[i]=s[i].toLowerCase();\n\
    \        }\n    }\n    for(i=0;i<s.length;i++){\n        if(s[i]!==res){\n   \
    \     res+=s[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a dscore=0 |>\n<code>", "    let newStr = \"\";\n    for(let i = 0; i\
    \ < s.length; i++){\n        if(s.charAt(i) !== \" \"){\n            if(s.charAt(i)\
    \ === \"a\"){\n                s.charAt(i) = s.charAt(i).toUpperCase();\n    \
    \        }else{\n                s.charAt(i) = s.charAt(i).toLowerCase();\n  \
    \          }\n        }\n        newStr += s.charAt(i);\n    }\n    return newStr;\n\
    }\n", "    let re = '';\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ === '#'){\n            re += s.charAt(i) + s.charAt(i+1);\n            i +=\
    \ 2;\n            continue;\n        }\n        else if(s.charAt(i) >= 'a' &&\
    \ s.charAt(i) <= 'z'){\n            let a = s.charAt(i) - 'a'.charCodeAt(0);\n\
    \            let b = s.charAt(i+1) - 'a'.charCodeAt(0);\n            re += String.fromCharCode(a+b);\n\
    \            i += 2;\n        }\n        else{\n            re += s.charAt(i);\n\
    \        }\n    }\n    if(re.length === s.length){\n        return re;\n    }\n\
    \    else{\n        return re;\n    }\n}\n", "    \n    let lower = s.toLowerCase();\n\
    \    let upper = s.toUpperCase();\n    let firstChar = s.charAt(0).toUpperCase();\n\
    \    let lastChar = s.charAt(s.length-1).toLowerCase();\n    let reverse = \"\"\
    ;\n    if(firstChar === lastChar){\n        if(firstChar === \" \"){\n       \
    \     reverse = s.slice(1,s.length);\n        } else {\n            reverse =\
    \ s.slice(0,s.length-1) + s.charAt(s.length-1);\n        }\n        return reverse;\n\
    \    }\n    \n    if(firstChar === \"#\"){\n        reverse = s.slice(1,s.length);\n\
    \        if(upper.includes(firstChar)){\n            reverse = upper.split(firstChar).join(firstChar\
    \ + reverse);\n        } else {\n            reverse = lower.split(firstChar).join(firstChar\
    \ + reverse);\n        }\n        return reverse;\n    }\n    if(firstChar ===\
    \ \"@\"){\n        reverse = s.slice(1,s.length);\n        if(upper.includes(firstChar)){\n\
    \            reverse = upper.split(firstChar).join(firstChar + reverse);\n   \
    \     } else {\n            reverse = lower.split(firstChar).join(firstChar +\
    \ reverse);\n        }\n        return reverse;\n    }\n    \n    return s;\n\
    \    \n}\n", "  s = s.split('')\n  s = s.filter(item => item.charCodeAt() >= 65\
    \ && item.charCodeAt() <= 90)\n  let arr = []\n  for (let i = 0; i < s.length;\
    \ i++){\n    arr.push(s.charCodeAt(i) - 64)\n  }\n  arr = arr.map(item => String.fromCharCode(item))\n\
    \  let result = arr.join('')\n  console.log(arr)\n  console.log(result)\n  return\
    \ result\n}", "    var newString = \"\";\n    var newString1 = \"\";\n    var\
    \ i = 0;\n    var letter;\n    var letterCount;\n    var letterCount1;\n    var\
    \ tempString = \"\";\n    while(i < s.length){\n        if(s[i] >= 'A' && s[i]\
    \ <= 'Z'){\n            letter = String.fromCharCode(s[i] + 32);\n        }\n\
    \        else if(s[i] >= 'a' && s[i] <= 'z'){\n            letter = String.fromCharCode(s[i]\
    \ - 32);\n        }\n        else{\n            letter = s[i];\n        }\n  \
    \      tempString = tempString + letter;\n        i++;\n    }\n    letterCount\
    \ = tempString.length;\n    while(letterCount >= 0){\n        newString = newString\
    \ + tempString.substr(letterCount - 1);\n        letterCount--;\n    }\n    letterCount1\
    \ = newString.length;\n    while(letterCount1 >= 0){\n        newString1 = newString1\
    \ + newString.substr(letterCount1 - 1);\n        letterCount1--;\n    }\n    return\
    \ newString1;\n}\n", "    for(i = 0; i < s.length; i++){\n        if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <=  'Z'){\n            console.log(s.charAt(i));\n   \
    \         console.log(s.charCodeAt(i));\n            let chr = s.charCodeAt(i);\n\
    \            let revChar = chr - 65;\n            console.log(revChar);\n    \
    \        let revString = String.fromCharCode(revChar);\n            console.log(revString);\n\
    \            s = s.replace(revString,revChar);\n            console.log(s);\n\
    \            console.log(s.charAt(i));\n        }\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis solution doesn't work at all if you have special characters as well\
    \ and doesn't work with spaces. Also you should explain your answer instead of\
    \ just posting the code.\n<|/ c |>\n<| c |>\nI tested it and it works with spaces\
    \ and special characters. Can you post the code you tried? It will be easier to\
    \ help you out with your problem :)\n<|/ c |>\n<| c |>\nYes sure, please check\
    \ my answer and let me know if you have any questions.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer it worked for me. I would like to add that you can use replaceAll()\
    \ and you can replace all special characters and spaces as well. Example: ```const\
    \ string = string.replace(/\\W/g, '');```\n<|/ c |>\n<| c |>\nI added my own code\
    \ as I did not want to post it as an answer. You are welcome.\n<|/ c |>\n<| a\
    \ dscore=4 |>\nHere is a way to solve it without regexes if you have some special\
    \ characters as well:\n<code>", "    let re=new Regexp(/^#(\\w)(\\w*)(\\w*)$/);\n\
    \    let a=\"\";\n    for(let i=0;i<s.length;i++){\n        if(re.test(s[i])){\n\
    \            a+=s[i][2]+s[1]+s[2];\n        }else{\n            a+=s[i];\n   \
    \     }\n    }\n    return a;\n}\n\nsolve(\"ab\")\nsolve(\"1234\")\n</code>\n\
    <|/ a tags=string,javascript |>\n<| a tags=string,javascript dscore=1 |>\n<code>\n\
    const sol = str => {\n  let n = str.replace(/[^a-z]/g, \"\");\n  n = n.replace(/(?<=\\\
    W)([a-z])(?!\\1|$)/g, \"$2\");\n  n = n.replace(/(?<=\\W)([A-Z])(?!\\1|$)/g, \"\
    $1\");\n  return n;\n};\n</code>\n<|/ a |>\n<| c |>\nPlease add an explanation\
    \ to your code. This will help others to understand your solution.\n<|/ c |>\n\
    <| a |>\nThe regex is \n<code>\nconst re = /^(\\w*)([A-Z])(\\w*)$/;\n</code>\n\
    Then simply replace $2 with $1 \n<code>\nlet ns = str.replace(re, \"$1 $2\");\n\
    </code>\n<|/ a tags=string,javascript dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    letters=s.split('');\n    letters.map((e,i)=>letters[i]=e.charCodeAt().toUpperCase());\n\
    \    letters.map((e,i)=>letters[i]=e.charCodeAt().toLowerCase());\n    return\
    \ letters.join('');\n}", "    var str = \"\";\n    var count = 0;\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(isNaN(s.charAt(i))){\n            if(s.charAt(i)\
    \ != \"#\"){\n                str += s.charAt(i);\n            }else{\n      \
    \          count++;\n            }\n        }\n        if(s.charAt(i) == \".\"\
    ){\n            count++;\n        }\n    }\n    console.log(count);\n    for(var\
    \ i = s.length - 1; i >= 0; i--){\n        if(isNaN(s.charAt(i))){\n         \
    \   if(s.charAt(i) != \"#\"){\n                str += s.charAt(i);\n         \
    \   }else{\n                count--;\n            }\n        }\n        if(s.charAt(i)\
    \ == \".\"){\n            count--;\n        }\n    }\n    console.log(count);\n\
    \    console.log(str);\n    return str\n}", "  var result = \"\";\n  var letters\
    \ = [];\n  var i = 0;\n  var len = s.length;\n  for (i; i < len; i++){\n    if\
    \ (!letters.includes(s[i])){\n      letters.push(s[i]);\n      result = result.concat(s[i].toUpperCase());\n\
    \    }else{\n      result = result.concat(s[i].toLowerCase());\n    }\n  }\n \
    \ if (result.length == 0){\n    letters = letters.reverse();\n    result = letters.join(\"\
    \");\n  }\n  return result;\n}\n", "  let newString = \"\";\n  for (let i=0;i<s.length;i++){\n\
    \    let curr = s[i];\n    if(isLetter(curr)){\n      newString = newString.concat(toUpper(curr));\n\
    \    }else{\n      newString = newString.concat(curr);\n    }\n  }\n  return newString;\n\
    }\n", "    let upper = s.toUpperCase().split('').map(a => a == a ? '#' : a).join('');\n\
    \    let lower = s.toLowerCase().split('').map(a => a == a ? '#' : a).join('');\n\
    \    let result = upper;\n    \n    if(upper.length < lower.length){\n       \
    \ result = lower;\n    }\n    \n    return result === upper? upper.toUpperCase()\
    \ : upper.toLowerCase();\n}\n", "  s = s.split(\"\");\n  let str = \"\";\n  let\
    \ isNum = true;\n  for (let i = s.length-1; i >= 0; i--){\n    if (isNaN(s[i])){\n\
    \      isNum = false;\n    }\n  }\n  for (let i = s.length-1; i >= 0; i--){\n\
    \    if (s[i] in {\"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\"\
    :7, \"8\":8, \"9\":9}){\n      str = s[i] + str;\n    } else {\n      str = str\
    \ + s[i];\n    }\n  }\n  if (isNum){\n    str = str.split(\"\").reverse().join(\"\
    \");\n  }\n  return str;\n}\n", "    str = s.replace(/[^a-zA-Z]/gi,'');\n    var\
    \ n = str.length;\n    var i;\n    var rev_str = \"\";\n    for (i=0;i<n;i++){\n\
    \        if (str[i] === undefined) break;\n        \n        if (str[i].toLowerCase()\
    \ !== str[i].toUpperCase()){\n            rev_str = rev_str + str[i].toUpperCase();\n\
    \        }\n        else {\n            rev_str = rev_str + str[i].toLowerCase();\n\
    \        }\n    }\n    if (rev_str.length > 0) return rev_str;\n    else return\
    \ s;\n}\n", "    let newStr = '';\n    for (let i = 0; i < s.length; i++){\n \
    \       if (s[i].toLowerCase() === s[i].toUpperCase()){\n            newStr +=\
    \ s[i].toUpperCase()\n        } else {\n            newStr += s[i]\n        }\n\
    \    }\n    return newStr\n}\n", "  return s.split(\"\").reduce(function(acc,\
    \ cur){\n    return cur.length ? acc.replace(cur, cur.toUpperCase()) : cur.toUpperCase()\
    \ + acc\n  }, s.split(\"\").reverse().join(\"\"))\n}\n", "    const letters =\
    \ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    let ans\
    \ = \"\";\n\n    for(let i=0; i<s.length; i++){\n        if(letters.includes(s[i])){\n\
    \            ans = s[i]+ans.charAt(0);\n        }else{\n            ans += s[i];\n\
    \        }\n    }\n\n    if(ans.length == 0){\n        ans = \"#\" + ans.toLowerCase().split('').join('@')\n\
    \    }\n\n    return ans;\n}\n</code>\n<|/ a tags=javascript,string |>\n<| a dscore=1\
    \ |>\nThis problem is solved in more simple way:\n<code>", "    let l = s.length;\n\
    \    if(l === 0){\n        return s;\n    }\n    if(s.charCodeAt(0) >= 65 && s.charCodeAt(0)\
    \ <= 90){\n        switch(s.charCodeAt(0)){\n            case 65:\n          \
    \      return s.toLowerCase().split('').join('');\n            case 66:\n    \
    \            return s.toUpperCase().split('').join('');\n            case 67:\n\
    \                return s.split('').reverse().join('');\n        }\n    }\n  \
    \  let str = s.split('').reverse().join('');\n    let arr = str.split('');\n \
    \   for(let i = 0; i < l; i++){\n        arr[arr.length-i-1] = solve(str.substr(0,\
    \ arr.length-i-1));\n    }\n    return arr.join('');\n}\n", "  let arr=s.replace(/\\\
    W/g,\"\").split(\"\");\n  for(let i=0;i<arr.length;i++)\n  {\n    if(/[a-zA-Z]/.test(arr[i]))\n\
    \      arr[i]=arr[i].toUpperCase()\n    else\n      arr[i]=arr[i].toLowerCase()\n\
    \  }\n  return arr.join(\"\");\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can\
    \ try this:\n<code>", "\tvar s = s.replace(/[a-z]/g,function(letter){\n\t\tif(letter.toUpperCase()\
    \ == letter){\n\t\t\tletter = letter.toLowerCase(); \n\t\t}\n\t\treturn letter;\n\
    \t}); \n\tif(s.indexOf(\"#\") != -1){\n\t\treturn s;\n\t}\n\tvar result = \"\"\
    ;\n\tvar numOfChars = s.length;\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < numOfChars){\n\
    \t\tif(s.charAt(i) == \".\"){\n\t\t\tresult = result + s.charAt(i);\n\t\t\ti++;\n\
    \t\t}else{\n\t\t\tresult = result + s.charAt(i) + s.charAt(j);\n\t\t\ti++;\n\t\
    \t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}", "  return s.split('').map(function\
    \ (letter){\n    return letter.toLowerCase() === letter ? '' : letter.toUpperCase();\n\
    \  }).join('');\n}\n", "  if(s.length>0){\n    var letter=s[0];\n    var i=1;\n\
    \    var letters=s.split(\"\");\n    letters[i]=letter;\n    var j=letters.length-1;\n\
    \    for(;i<j;i++){\n      if(letters[i].length>0){\n        letters[i]=letters[i].toLowerCase();\n\
    \        letters[j]=letters[j].toUpperCase();\n        letters[i]=letters[i].toUpperCase();\n\
    \        j--;\n      }else{\n        letters[i]=letters[i].toUpperCase();\n  \
    \    }\n    }\n    return letters.join(\"\");\n  }\n  return s.toUpperCase();\n\
    }", "    let newStr = s.replace(/[a-z]/g, function(x){\n        return x.toUpperCase();\n\
    \    }).replace(/[A-Z]/g, function(x){\n        return x.toLowerCase();\n    });\n\
    \    return newStr;\n}\n</code>\n<|/ a |>\n<| a |>\nI know that the solution by\
    \ Jack Kennedy works but this one works better\n<code>", "    let chars = s.split('');\n\
    \    let output = '';\n    for (let i = 0; i < chars.length; i++) {\n        let\
    \ char = chars[i];\n        let firstChar = char.charAt(0);\n        if (firstChar\
    \ === firstChar.toLowerCase()) {\n            chars[i] = firstChar.toUpperCase();\n\
    \        } else if (firstChar === firstChar.toUpperCase()) {\n            chars[i]\
    \ = firstChar.toLowerCase();\n        } else {\n            chars[i] = firstChar;\n\
    \        }\n        output += chars.join('');\n    }\n    return output;\n}\n",
  "    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i) ===\"#\"||s.charAt(i)\
    \ ===\"@\"){\n            let reverse = solveRev(s.substr(i+1,s.length));\n  \
    \          s = s.substr(0,i)+reverse;\n            i = s.length - 1;\n       \
    \ }else{\n            s += s.charAt(i);\n        }\n    }\n    return s;\n}\n",
  "\t\n\tif (s == \"\") {\n\t\treturn s;\n\t}\n\t\n\tconst res = [];\n\t\n\tlet i\
    \ = 0;\n\t\n\twhile (i < s.length) {\n\t\t\n\t\tlet nextIsUpper = false;\n\t\t\
    let nextIsLower = false;\n\t\tlet nextIsLetter = false;\n\t\t\n\t\tlet next =\
    \ '';\n\t\t\n\t\tlet isUpper = false;\n\t\tlet isLower = false;\n\t\tlet isLetter\
    \ = false;\n\t\t\n\t\tfor (let j = i; j < s.length; j++) {\n\t\t\t\n\t\t\tisUpper\
    \ = s[i] === s[i].toUpperCase();\n\t\t\tisLower = s[i] === s[i].toLowerCase();\n\
    \t\t\tisLetter = s[i] === s[i];\n\t\t\t\n\t\t\tif (isUpper && nextIsUpper) {\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (isLower && nextIsLower) {\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\t\n\t\t\tif (isLetter && nextIsLetter) {\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t\n\t\t\tnextIsUpper = nextIsUpper || isUpper;\n\t\t\tnextIsLower\
    \ = nextIsLower || isLower;\n\t\t\tnextIsLetter = nextIsLetter || isLetter;\n\t\
    \t\t\n\t\t\tnext = s[i] === s[i] ? s[i] : s[i];\n\t\t\t\n\t\t\tif (isLetter) {\n\
    \t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tres.push(next);\n\t\t}\n\t\
    \t\n\t\ti = j;\n\t}\n\t\n\twhile (i < s.length) {\n\t\t\n\t\tres.push(s[i] ===\
    \ s[i] ? s[i] : s[i]);\n\t\ti++;\n\t}\n\t\n\treturn res.reverse().join('');\n\
    }\n", "  let stack = [];\n  for(let i of s){\n    if(i!=='#') stack.push(i);\n\
    \    else if(i=='#'){\n      stack.push('#');\n      stack.push('@');\n    } else\
    \ {\n      if(stack.length===0){\n        stack = stack.concat(i);\n      } else\
    \ if(stack.length!==0){\n        let x = stack.pop();\n        let y = stack.pop();\n\
    \        stack = stack.concat(x+y);\n      }\n    }\n  }\n  if(stack.length===0){\n\
    \    return s;\n  } else {\n    return stack.reverse().join('');\n  }\n}\n", " \
    \ let ans = s.replace(/@/gi,\"\");\n  let len = ans.length;\n  for(let i = 0;\
    \ i < len; i++){\n    \n    ans = ans.replace(/[a-z]/gi,function(m){\n      return\
    \ m.toUpperCase();\n    })\n    \n    ans = ans.replace(/[A-Z]/gi,function(m){\n\
    \      return m.toLowerCase();\n    })\n    \n    ans = ans.replace(/[^a-zA-Z0-9]/,function(m){\n\
    \      return m.toUpperCase();\n    })\n  }\n  \n  ans = ans.replace(/[a-z]/g,function(m){\n\
    \    return m.toUpperCase();\n  })\n  \n  ans = ans.replace(/[A-Z]/g,function(m){\n\
    \    return m.toLowerCase();\n  })\n  \n  ans = ans.replace(/[^a-zA-Z0-9]/g,function(m){\n\
    \    return m.toUpperCase();\n  })\n  \n  return ans;\n}\n", "    let result =\
    \ \"\";\n    for (let i = 0; i < s.length; i++){\n        let char = s[i];\n \
    \       if (char >= 'a' && char <= 'z'){\n            result += char.toUpperCase();\n\
    \        } else if (char >= 'A' && char <= 'Z'){\n            result += char.toLowerCase();\n\
    \        }\n    }\n    if (result.length == 0){\n        result = result.split('').reverse().join('');\n\
    \    }\n    return s;\n}\n", "    let chars = s.split('');\n    let res = [];\n\
    \    for(let char of chars){\n        if(char.match(/[a-z]/g)){\n            res\
    \ = res.concat([char.match(/[a-z]/g).join('').toUpperCase()]);\n        }else{\n\
    \            res = res.concat([char]);\n        }\n    }\n    return res.join('');\n\
    }\n", "    for(var i = 0;i<s.length;i++){\n      if(s[i] >= 'A' && s[i] <= 'Z'){\n\
    \        s[i] = s[i].toUpperCase();\n      }else if(s[i] >= 'a' && s[i] <= 'z'){\n\
    \        s[i] = s[i].toLowerCase();\n      }else{\n        s[i] = s[i];\n    \
    \  }\n    }\n    \n    var output = [];\n    for(var i = 0;i<s.length;i++){\n\
    \      output.push(s[i]);\n    }\n    \n    var str = output.join(\"\");\n   \
    \ return str;\n}\n", "    var newStr = \"\"\n    for(let i = 0; i < s.length;\
    \ i++){\n        if(s[i] >= \"a\" && s[i] <= \"z\"){\n            newStr += s[i].toUpperCase()\n\
    \        }else if(s[i] >= \"A\" && s[i] <= \"Z\"){\n            newStr += s[i].toLowerCase()\n\
    \        }else{\n            newStr += s[i]\n        }\n    }\n    return newStr\n\
    }\nvar newStr = solve(\"#a@C\")\nvar newStr2 = solve(\"1234\")\nvar newStr3 =\
    \ solve(\"ab\")\nvar newStr4 = solve(\"ABC\")\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\n\"abc\" should also return \"Abc\", but yours returns \"Abc\" as \"abc\"\
    \ turns to \"Abc\" in the new string\n<|/ c |>\n<| a |>\nI wrote a more general\
    \ solution. Hope it helps.\n<code>", "  let n = s.length;\n  if(n === 0){\n  \
    \  return s;\n  }\n  let strArr = [...s];\n  for(let i = 0; i < strArr.length;\
    \ i++){\n    if(!isNaN(strArr[i])){\n      strArr[i] = String.fromCharCode(strArr[i].charCodeAt()\
    \ + 32);\n    }else{\n      let lower = strArr[i].toLocaleLowerCase();\n     \
    \ let upper = strArr[i].toLocaleUpperCase();\n      if(lower !== upper){\n   \
    \     strArr[i] = lower + upper;\n      }else{\n        strArr[i] = lower;\n \
    \     }\n    }\n  }\n  \n  return strArr.join('');\n}\n", "   var res = [];\n\
    \   s.split('').forEach(function(val){\n      if (/[a-z]/.test(val)){\n      \
    \   res.push(val.toLowerCase());\n      } else {\n         res.push(val);\n  \
    \    }\n   });\n   return res.reverse().join('');\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis is a good solution. However, the OP specifically requested a method\
    \ that doesn't use `split`. How would you modify this method to use that method?\n\
    <|/ c |>\n<| c |>\n, The method `split` isn't used, but is still needed. Using\
    \ `split()` would be redundant here.\n<|/ c |>\n<| c |>\nI don't see a need for\
    \ `split` here, since you know that there are no letters in the string. You're\
    \ also using `map` incorrectly - `s.map(...` is going to call your function on\
    \ each element of `s`, where `s` is each element of `s`. Just use `s.split(\"\"\
    ).map(...)`\n<|/ c |>\n<| c |>\n, You are right. Thank you for the hint. Updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThis is a great solution, and I upvoted it, but\
    \ you should add a little more explanation of how it works.\n<|/ c |>\n<| a dscore=4\
    \ |>\nAnother option is to create a String that contains the characters you want\
    \ flipped, then flip them.\n\n<code>", "    const re = new RegExp(/[a-z]/gi);\n\
    \    return s.replace(/[a-z]/gi, l => (re.test(l) ? l.toUpperCase() : l.toLowerCase()));\n\
    }\n\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<| c |>\nThis does not\
    \ answer the question, it just reverses uppercase to lowercase. It fails for \"\
    aAbBcC\" for example\n<|/ c |>\n<| a tags=javascript,algorithm,string |>\nYou\
    \ can simply reverse the characters of string by using a simple for loop and using\
    \ concatenation you can achieve the required result.\n<code>", "    return s.split('').reduce((a,\
    \ b) => {\n        return b.toUpperCase() === a ? a.toLowerCase() : a\n    })\n\
    }\n", "  let s = s.replace(/[^a-zA-Z]+/g,\"\");\n  if (s.length == 0) {\n    return\
    \ s;\n  }\n  let first = true;\n  for (let i = 0; i < s.length; ++i) {\n    let\
    \ letter = s[i];\n    if (letter === letter.toUpperCase()) {\n      if (first)\
    \ {\n        first = false;\n        continue;\n      }\n      s = s.replace(letter,\
    \ letter.toUpperCase());\n      continue;\n    }\n    if (first) {\n      first\
    \ = false;\n      continue;\n    }\n    s = s.replace(letter, letter.toLowerCase());\n\
    \  }\n  return s;\n}\n", "    if(s!==\"\"){\n        let arr=s.split(\"\");\n\
    \        for(let i=0;i<arr.length;i++){\n            if(arr[i]===\"#\"){\n   \
    \             arr[i]=s.charAt(i)+s.charAt(i+1);\n                arr[i+1]=s.charAt(i+2);\n\
    \                arr[i+2]=s.charAt(i+3);\n            }\n            else if(arr[i]===\"\
    $\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n                arr[i+1]=s.charAt(i+2);\n\
    \                arr[i+2]=s.charAt(i+3);\n                arr[i+3]=s.charAt(i+4);\n\
    \            }\n            else if(arr[i]===\"@\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n\
    \                arr[i+1]=s.charAt(i+2);\n                arr[i+2]=s.charAt(i+3);\n\
    \                arr[i+3]=s.charAt(i+4);\n                arr[i+4]=s.charAt(i+5);\n\
    \            }\n            else if(arr[i]===\"^\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n\
    \                arr[i+1]=s.charAt(i+2);\n                arr[i+2]=s.charAt(i+3);\n\
    \                arr[i+3]=s.charAt(i+4);\n                arr[i+4]=s.charAt(i+5);\n\
    \                arr[i+5]=s.charAt(i+6);\n            }\n            else if(arr[i]===\"\
    &\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n                arr[i+1]=s.charAt(i+2);\n\
    \                arr[i+2]=s.charAt(i+3);\n                arr[i+3]=s.charAt(i+4);\n\
    \                arr[i+4]=s.charAt(i+5);\n                arr[i+5]=s.charAt(i+6);\n\
    \                arr[i+6]=s.charAt(i+7);\n            }\n            else if(arr[i]===\"\
    *\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n                arr[i+1]=s.charAt(i+2);\n\
    \                arr[i+2]=s.charAt(i+3);\n                arr[i+3]=s.charAt(i+4);\n\
    \                arr[i+4]=s.charAt(i+5);\n                arr[i+5]=s.charAt(i+6);\n\
    \                arr[i+6]=s.charAt(i+7);\n                arr[i+7]=s.charAt(i+8);\n\
    \            }\n            else if(arr[i]===\"<\"){\n                arr[i]=s.charAt(i)+s.charAt(i+1);\n\
    \                arr[i+1]=s.charAt(i+2);\n                arr[i+2]=s.charAt(i+3);\n\
    \                arr[i+3]=s.charAt(i+4);\n                arr[i+4]=s.charAt(i+5);\n\
    \                arr[i+5]=s.charAt(i+6);\n                arr[i+6]=s.", "  let\
    \ reversed = [];\n  let letters = s.length;\n\n  for (let i=0; i<s.length; i++){\n\
    \    if (letters === 0){\n      reversed = s.split(\"\");\n      break;\n    }\n\
    \    if (s[i] >= \"A\" && s[i] <= \"Z\"){\n      reversed.push(s[i].toUpperCase());\n\
    \      letters--;\n    }\n    if (s[i] >= \"a\" && s[i] <= \"z\"){\n      reversed.push(s[i].toLowerCase());\n\
    \      letters--;\n    }\n  }\n  reversed = reversed.join(\"\");\n  return reversed;\n\
    }", "    let sChar = s.split(\"\");\n    let sLength = sChar.length;\n    let\
    \ i = 0;\n    \n    while(i < sLength){\n        if (sChar[i].match(/[a-z]/i))\
    \ {\n            sChar[i] = sChar[i]\n                .toLowerCase()\n       \
    \         .replace(/^[a-z]/, function(match){\n                    return match.toUpperCase();\n\
    \                })\n                .replace(/[A-Z]/g, function(match){\n   \
    \                 return match.toLowerCase();\n                });\n        }\
    \ else {\n            sChar[i] = sChar[i];\n        }\n        i++;\n    }\n\n\
    \    return sChar.join(\"\");\n}\n", "\tvar result = '';\n\tfor(var i = 0; i <\
    \ s.length; i++){\n\t\tresult += (s[i].toUpperCase() === s[i] ? s[i].toLowerCase()\
    \ : s[i].toUpperCase());\n\t}\n\treturn result || s;\n}", "  var re = /[a-z]/i;\n\
    \  if(re.test(s)){\n    s = s.replace(/[a-z]/i, function(match){\n      return\
    \ match.toUpperCase()\n    }).replace(/[^a-z0-9]+/gi, function(match){\n     \
    \ return match.toLowerCase()\n    })\n  }else{\n    s = s.replace(/[^a-z0-9]+/gi,\
    \ function(match){\n      return match.toLowerCase()\n    })\n  }\n  return s;\n\
    }\n", "  // code here\n  return s;\n}\n</cell>\n<cell>\n# Run this cell to check\
    \ your work\n# If you get an error message, see duecredit.js, read\n# and understand\
    \ the error message before you run this cell!\n\ntry:\n    assert solve(\"1234\"\
    ) == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\")\
    \ == \"#A@c\"\nexcept:\n    raise AssertionError(\"Test 3 failed. The test cases\
    \ should pass. Check your work above and try again!\")\n</cell>\n<cell>\n# Optional\n\
    # Write a function called is_pangram that takes a string and checks \n# if all\
    \ characters are letters.\n\ndef is_pangram(s):\n  # code here\n  return False\n\
    \  \n  \n</cell>\n<text>\nProblem 4\nWrite a function to count the number of islands\
    \ in any given island county \ngiven the island county boundaries (x, y) in the\
    \ grid. \nThe island is a group of adjacent cells whose value is either 1 or 0.\
    \ \nAn island is a group of cells adjacent to each other whose values are either\
    \ 1 or 0. \nYou should not count the number of islands in islands that are formed\
    \ by coastal \nborders.\n\nAn island county boundaries are given in the form (x,\
    \ y) where x and y are integers from 0 to 35.\n\nExample 1:\nInput: x = 5, y =\
    \ 5\nOutput: 5\nExplanation: There is one island county.\n\nExample 2:\nInput:\
    \ x = 5, y = 10\nOutput: 16\nExplanation: An island county, with boundaries (0,\
    \ 10), (5, 10), (5, 0), (0, 0), (5, 10), (10, 0), (10, 5), \n(5, 10), (10, 5),\
    \ (5, 10), (10, 10), (5, 10), (10, 5), (10, 10), (5, 10), (10, 5), (10, 10), (5,\
    \ 10), \n(0, 0), (5, 0), (10, 0), (10, 5), (5, 0), (10, 10), (5, 10), (10, 10),\
    \ (5, 10), (10, 5), (10, 10), (5, 10), \n(10, 10), (5, 10)\n\nExample 3:\nInput:\
    \ x = 4, y = 7\nOutput: 12\nExplanation: An island county, with boundaries (4,\
    \ 7), (4, 5), (4, 4), (4, 3), (3, 3), (3, 4), (3, 4), \n(3, 5), (3, 6), (3, 7),\
    \ (4, 7), (4, 5), (4, 4), (4, 3), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (4,\
    \ 7), (4, 5), \n(4, 4), (4, 3), (3, 3), (3, 4), (3, ", "    let str =[]\n    s.split('').forEach((item)=>{\n\
    \        if(item.toString().toLowerCase()!=='')\n            str.push(item.toString().toLowerCase())\n\
    \        else\n            str.push(item.toString())\n    })\n    str.sort((a,b)=>{\n\
    \        return a.localeCompare(b)\n    })\n    return str.join('')\n}", "   \
    \ let rs = s.replace(/[^a-zA-Z]/g, \"\"); \n    return (rs.length < 1) ? rs :\
    \ rs.replace(/[a-zA-Z]/g,v => v.toLowerCase())\n}\n", "    let arr = [];\n   \
    \ for (let i of s) {\n        if (isAlphabet(i)) {\n            arr.push(i);\n\
    \        } else {\n            arr[0] = arr[0]+i.toUpperCase();\n        }\n \
    \   }\n    return arr.join('');\n}\n", "    var n = s.length\n    for(var i =\
    \ 0; i < n; i++){\n        if(!isNaN(s.charAt(i))){\n            n = n -1\n  \
    \      }\n    }\n    s = s.replace(/[A-z]/g, function (x) {\n        return x.toUpperCase()\n\
    \    })\n    return s.substring(0,n)\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar reverseLetters = function(str) {\n  str = str.replace(/[a-z]/gi,\
    \ function(letter) {\n    return letter.toUpperCase();\n  });\n  return str.split('').map(function(char)\
    \ {\n    return char.charCodeAt(0) - 96 | 32;\n  }).join('');\n};\n", "    let\
    \ res=s.replace(/[a-z]/i,v=>v.toUpperCase())\n    return res.replace(/[^a-zA-Z]/,v=>v.toLowerCase())\n\
    }\n", "    let ret = \"\";\n    for (let i = 0; i<s.length; i++){\n        if(/[a-z]/i.test(s[i])){\n\
    \            ret += s[i].toUpperCase()\n        } else {\n            ret += s[i]\n\
    \        }\n    }\n    return ret\n}\n", "\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tif(s.charAt(i) === s.charAt(i).toLowerCase()){\n\t\t\tlet temp = s.charAt(i).toLowerCase();\n\
    \t\t\ts.charAt(i) = s.charAt(i).toUpperCase();\n\t\t\ts.charAt(i).toLowerCase()\
    \ = temp;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(s.length){\n\t\treturn s;\n\t}\n\telse{\n\
    \t\treturn s.toLowerCase().split('').join('');\n\t}\n}\n", "    str = s;\n   \
    \ \n    if(str.includes('a') || str.includes('A')){\n        str1 = str.split('a');\n\
    \        str2 = str.split('A');\n        str1[1] = 'A';\n        str1[0] = str1[0].toUpperCase();\n\
    \        str2[1] = 'A';\n        str2[0] = str2[0].toUpperCase();\n        str\
    \ = str1.concat(str2).join('');\n    }\n    \n    if(str.includes('#') || str.includes('@')){\n\
    \        str1 = str.split('#');\n        str2 = str.split('@');\n        str1[1]\
    \ = '@';\n        str1[0] = str1[0].toUpperCase();\n        str2[1] = '@';\n \
    \       str2[0] = str2[0].toUpperCase();\n        str = str1.concat(str2).join('');\n\
    \    }\n    \n    str = str.replace(/[^a-zA-Z]/g,'');\n    \n    return str;\n\
    }\n", "    if(s.length==0){\n        return s;\n    }\n    let arr=s.split(\"\"\
    );\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]>=65 && arr[i]<=90){\n\
    \            arr[i]-=32;\n        }\n        else if(arr[i]>=97 && arr[i]<=122){\n\
    \            arr[i]+=32;\n        }\n    }\n    return arr.join(\"\");\n}\n",
  "    \n    const res = [];\n    const lower = /[a-z]/g;\n    const upper = /[A-Z]/g;\n\
    \    \n    for(let i = 0; i<s.length; i++){\n        if(s[i].match(lower)){\n\
    \            res[i] = s[i].toUpperCase()\n        } else {\n            res[i]\
    \ = s[i].toLowerCase()\n        }\n    }\n    return res.join(\"\");\n}\n\n<|/\
    \ file |>\n<| c |>\nPlease mark the answer as accepted so that future visitors\
    \ can see that your problem is solved. See https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work\n\
    <|/ c |>\n<| c |>\nThank you for pointing that out!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nlet strng = `123abc`;\nlet myRegex = /[a-z]+|[A-Z]+|[0-9]+/g;\n", "  \
    \  let reversed = s.split(\"\").reverse().join(\"\");\n    if(reversed.length\
    \ == 0){\n        return reversed;\n    }\n    for(let i = 0; i<reversed.length;\
    \ i++){\n        if(charIsLetter(reversed[i])){\n            reversed = reversed.replace(\n\
    \                reversed.substr(0, i) + reversed.substr(i+1, reversed.length-i),\
    \ \n                reversed.substr(i, reversed.length-i)+reversed.substr(i+1,\
    \ reversed.length-i));\n        }\n    }\n    return reversed;\n}\n", "    let\
    \ res = \"\";\n    for (let i of s) {\n        if(i.charCodeAt(0) > 96){\n   \
    \         res += String.fromCharCode(i.charCodeAt(0)+64);\n        } else if(i.charCodeAt(0)\
    \ > 64){\n            res += String.fromCharCode(i.charCodeAt(0)+96);\n      \
    \  } else {\n            res += i;\n        }\n    }\n    return res.replace(/@/g,\
    \ '').replace(/#/, '').replace(/^/, '#');\n}\n", "  var ret = \"\";\n  \n  s =\
    \ s.split(\"\");\n  \n  for(var i = 0; i<s.length; i++){\n    \n    if(s.hasOwnProperty(i)){\n\
    \      \n      if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n        ret\
    \ += String.fromCharCode(s.charCodeAt(i)+32);\n      }\n      else if(s.charCodeAt(i)\
    \ >= 97 && s.charCodeAt(i) <= 122){\n        ret += String.fromCharCode(s.charCodeAt(i)-32);\n\
    \      }\n      else{\n        ret += s[i];\n      }\n      \n    }\n  }\n  return\
    \ ret;\n}\n", "    let arr = s.split('')\n    let arr2 = arr.map(item => item.toLowerCase())\n\
    \    let arr3 = arr2.map(item => item.split(''))\n    return arr3.map(item =>\
    \ {\n        let arr4 = item.reduce((a, b) => a + b.charCodeAt(0))\n        return\
    \ String.fromCharCode(arr4 % 256)\n    }).join('')\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nwhat does it do? Could you please explain a little bit?\n<|/ c |>\n<| c\
    \ |>\nThis function will take a string and reverse its case. The input string\
    \ will be split into array. Then the array will be mappped to lowerCase using\
    \ map function.\n<|/ c |>\n<| a dscore=3 tags=javascript,string |>\n<code>\nvar\
    \ str = \"#A@c\";\nvar charArr = str.replace(/[^A-Za-z0-9]/g, \"\");\nvar newStr\
    \ = \"\";\nfor( var i = 0, len = charArr.length; i < len; i++ ) {\n   var char\
    \ = charArr.charCodeAt(i);\n   var asciCode = char.charCodeAt();\n   var upperLetter\
    \ = asciCode - 65;\n   var lowerLetter = asciCode + 32;\n   newStr += String.fromCharCode(upperLetter)\
    \ + String.fromCharCode(lowerLetter);\n}", "    for(var i = 0;i < s.length; i++){\n\
    \        if(typeof s[i] === \"string\"){\n            var str = s[i];\n      \
    \      for(var j = 0; j < str.length; j++){\n                switch(str[j]){\n\
    \                    case 'A':\n                        str[j] = str[j].toUpperCase();\n\
    \                        break;\n                    case 'a':\n             \
    \           str[j] = str[j].toLowerCase();\n                        break;\n \
    \                   default:\n                        str = str;\n           \
    \             break;\n                }\n            }\n            s[i] = str;\n\
    \        }\n    }\n    console.log(s.reverse());\n    return s.reverse();\n}\n\
    \n</code>\n<|/ a |>\n<| c |>\nThe solutions I see are much more complicated than\
    \ this.\n<|/ c |>\n<| c |>\nThis answer doesn't address the original question,\
    \ which asks for an iterative solution.\n<|/ c |>\n<| c |>\nthis solution is also\
    \ wrong, try this 'ab' example, it will return 'ba'.\n<|/ c |>\n<| a dscore=3\
    \ tags=string,algorithm,javascript |>\nThis solution is recursive and also uses\
    \ String.prototype.charAt and String.prototype.replace to reverse the characters\
    \ in a string. This solution is also compatible with IE11.\n\n<code>", "  let\
    \ strArr= s.split('');\n  let str = \"\";\n  strArr.forEach(x=> x==='#'? str =\
    \ str + x.toUpperCase() : str = str + x);\n  return str.replace(/\\W/g,\"\");\n\
    }\n", "    var s = s.replace(/[^a-z]/g, \"\"); \n    if (s === \"\"){\n      \
    \  return s.replace(/[a-z]/ig, \"A\")\n    } else {\n        return s.replace(/[a-z]/ig,\
    \ function (m) { return m.toUpperCase(); });\n    }\n};\n</code>\n<|/ a dscore=3\
    \ tags=string,javascript |>\n<| c |>\nI liked this solution but in practice it\
    \ returned the wrong answer.\n<|/ c |>\n<| c |>\nit worked for me. Do you mean\
    \ the wrong result or the wrong logic?\n<|/ c |>\n<| c |>\nIt just didn't work\
    \ for me but that's because I typed it wrong. I changed my answer to the correct\
    \ solution. My bad sorry. Thanks for taking the time to look at it.\n<|/ c |>\n\
    <| a tags=string,javascript |>\nI like the other answers but since I had a very\
    \ similar problem that I wanted to solve with regex I thought I would share my\
    \ solution:\n\n<code>", "    s=s.split('').join('').split('').join('');\n    return\
    \ s===s.toUpperCase()?s.toLowerCase():s.toUpperCase();\n}\n", "    if(s.indexOf('A')\
    \ === -1){\n        return s;\n    }\n    let str = s;\n    let lastLetter;\n\
    \    let num;\n    for(let i = 0; i < str.length; i++){\n        if(str.charAt(i).toLowerCase()\
    \ === str.charAt(i).toUpperCase()){\n            str = str.charAt(i).toLowerCase()\
    \ + str.charAt(i).toUpperCase();\n        }\n    }\n    for(let i = 0; i < str.length;\
    \ i++){\n        if(str.charAt(i).toLowerCase() !== str.charAt(i).toUpperCase()){\n\
    \            lastLetter = str.charAt(i).toLowerCase();\n            num = lastLetter.charCodeAt(0)\
    \ - 96;\n            str = str.substr(0, i) + String.fromCharCode(num) + str.substr(i\
    \ + 1);\n        }\n    }\n    return str;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ tags=algorithm,string,char,javascript |>\n<code>", "    str = s.split(\"\");\n\
    \    for(var i=0;i<str.length;i++){\n        if(str[i] in letters){\n        \
    \    var c = letters[str[i]]\n            letters[str[i]] = letters[c.toUpperCase()]\
    \ || letters[c.toLowerCase()]\n        }\n    }\n    var ans = \"\"\n    for(var\
    \ i=0;i<str.length;i++){\n        if(str[i] in letters){\n            ans += letters[str[i]]\n\
    \        }\n    }\n    return ans\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis\
    \ is not how SO works. If you have a solution, please post it in the answer.\n\
    <|/ c |>\n<| c |>\nThis was my solution and i posted it earlier\n<|/ c |>\n<|\
    \ a dscore=2 tags=javascript,arrays,algorithm,string |>\n<code>\nconst result\
    \ = function(str) {\n  var newString = \"\";\n  var tempArray = str.split('');\n\
    \  for (var i = 0; i < tempArray.length; i++) {\n    if (tempArray[i] in letters)\
    \ {\n      newString += letters[tempArray[i]];\n    } else {\n      newString\
    \ += tempArray[i];\n    }\n  }\n  return newString;\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=2 tags=javascript,arrays,algorithm,string |>\n<code>", "    // code\
    \ here\n    var newS = \"\";\n    for (var i = 0; i<s.length; i++){\n        if(s[i].match(/[a-z]/i)){\n\
    \            newS = newS + s[i].toUpperCase();\n        }\n        else{\n   \
    \         newS = newS + s[i];\n        }\n    }\n    return newS;\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| c |>\nThis does not work if `s` is an empty string.\n\
    <|/ c |>\n<| a |>\n<code>\nconst reverseString = (str) => {\n  const newStr =\
    \ str.replace(/[^a-zA-Z]+/g, '').split('').map(letter => letter.toUpperCase());\n\
    \  return newStr.join('');\n}\n</code>\n<|/ a tags=javascript dscore=4 |>\n<|\
    \ a tags=javascript dscore=4 |>\n<code>", "  s = s.replace(/[^a-zA-Z ]/g, \"\"\
    );\n  let str = \"\";\n  \n  for (let i = 0; i < s.length; i++) {\n    let j =\
    \ s.indexOf(\"@\");\n    \n    if (i == j || i == s.length - 1) {\n      str +=\
    \ s[j];\n    }\n    \n    let isLetter = s[i].charCodeAt() > 96;\n    if (isLetter)\
    \ {\n      s = s.substring(0, j) + s[i].toLowerCase() + s.substring(j + 1);\n\
    \    }\n    \n    str += s[i];\n  }\n\n  return str.replace(/ /g, \"\");\n}\n\
    </cell>\n<cell>\nsolve(\"1234\")\n</cell>\n<cell>\nsolve(\"ab\")\n</cell>\n<cell>\n\
    solve(\"#a@C\")\n</cell>\n<cell>\nsolve(\"#a@c\")\n</cell>\n<cell>\nsolve(\"A@c\"\
    )\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"A@c\")\n</cell>\n\
    <cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"A@c\")\n</cell>\n<cell>\nsolve(\"\
    #a@C\")\n</cell>\n<cell>\nsolve(\"#a@c\")\n</cell>\n<cell>\nsolve(\"A@c\")\n</cell>\n\
    <cell>\nsolve(\"A@c\")\n</cell>\n<cell>\nsolve(\"A@C\")\n</cell>\n<cell>\nsolve(\"\
    A@C\")\n</cell>\n<cell>\nsolve(\"A@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n\
    <cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"\
    @C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n\
    <cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"\
    @C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n\
    <cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve(\"@C\")\n</cell>\n<cell>\nsolve",
  "\tvar str = '';\n\tfor(var i=0;i<s.length;i++){\n\t\tif(s.charCodeAt(i)>=65&&s.charCodeAt(i)<=90){\n\
    \t\t\tstr += String.fromCharCode((s.charCodeAt(i)+32).toLowerCase());\n\t\t}\n\
    \t\telse if(s.charCodeAt(i)>=97&&s.charCodeAt(i)<=122){\n\t\t\tstr += String.fromCharCode((s.charCodeAt(i)-32).toLowerCase());\n\
    \t\t}\n\t\telse{\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\treturn str;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe only thing you really need to do to make your\
    \ solution better is convert it to a function, so you don't have to do the same\
    \ thing over and over again.\n<|/ c |>\n<| c |>\nThis is definitely not a good\
    \ way of doing this. Try it on a few strings, like \"abcd\", and you'll see it's\
    \ slow. You'd be better off iterating through the string backwards, using indexOf\
    \ to see if it's a letter. If it's not a letter, you could still use your code\
    \ but store the last index in an external variable, and then when you encounter\
    \ a letter, use that index to get the char from the current index to your external\
    \ variable, then append that char with the last char of the string. That's way\
    \ faster.\n<|/ c |>\n<| c |>\nYes. I did this in Python and I agree with you.\
    \ There needs to be better way. Thanks for sharing your solution. I am not good\
    \ in JavaScript, that is why I shared this with you. :)\n<|/ c |>\n<| a |>\n<code>",
  "  let final = \"\";\n  for (let char of s) {\n    char = toUpper(char);\n    final\
    \ += char;\n  }\n  return final;\n}\n", "  var newstr = \"\";\n  for(var i=0;i<s.length();i++){\n\
    \    if(isletter(s.charAt(i))){\n      newstr = newstr.concat(s.charAt(i).toUppercase());\n\
    \    }else{\n      newstr = newstr.concat(s.charAt(i).toLowercase());\n    }\n\
    \  }\n  return newstr;\n}\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n\
    <code>", "  return s.split('').map(function(v){\n    return v === v.toLowerCase()\
    \ ? v.toUpperCase() : v.toLowerCase();\n  }).join('');\n}\n", "    let arr = s.split(\"\
    \");\n    let res = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ >= 'A' && arr[i] <= 'Z' || arr[i] >= 'a' && arr[i] <= 'z'){\n            arr[i]\
    \ = String.fromCharCode(arr[i] - 32);\n        }\n        else{\n            arr[i]\
    \ = arr[i].toLowerCase()\n        }\n    }\n    for(let i = 0; i < arr.length;\
    \ i++){\n        res.push(arr[i])\n    }\n    return res.join(\"\");\n}\n", " \
    \   let chars = s.replace(/[^a-zA-Z]/g, \"\");\n    let upperCaseChars = chars.toUpperCase();\n\
    \    let lowerCaseChars = chars.toLowerCase();\n    if (chars === \"\") return\
    \ \"\";\n    if (chars === chars.toUpperCase()) return upperCaseChars;\n    return\
    \ lowerCaseChars;\n}\n\nsolve(\"ab\")\nsolve(\"aB\")\nsolve(\"aBcD\")\nsolve(\"\
    #a@C\")\nsolve(\"#aBcD#E#F\")\nsolve(\"aBcD#E#F\")\nsolve(\"#aBcD#E#F\")\n", " \
    \   var reversed = s.split(\"\").reverse().join(\"\");\n    return reversed.replace(/[a-z]+/g,function(matched){\n\
    \        return matched.split('').map((item) => item.toUpperCase()).join('');\n\
    \    })\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,javascript,string |>\n<code>\n\
    const a = \"ab\";", "    var s = s.replace(/[a-z]/g,function(v){\n        if(\
    \ v.length > 1)\n            return v + v.charAt(0)\n        else\n          \
    \  return v\n    })\n    if(s == \"\"){\n        return s\n    }\n    var s =\
    \ s.replace(/[A-Z]/g,function(v){\n        if(v.length > 1)\n            return\
    \ v + v.charAt(1)\n        else\n            return v\n    })\n    return s\n\
    }\n", "  if (s.length == 0) return s;\n  \n  for (let i = 0; i < s.length; i++)\
    \ {\n    if(s[i] == '#') return s.replace('#','');\n    else if(s[i] == '@') return\
    \ s.replace('@','');\n    else if(s[i] >= 'a' && s[i] <= 'z') return s.replace(i,String.fromCharCode(s.charCodeAt(i)+32));\n\
    \    else return s;\n  }\n}\n", "  let map = {};\n  s = s.split(\"\").map(v=>v.toLowerCase());\n\
    \  for(let i=0;i<s.length;i++){\n    if(map[s[i]] === undefined){\n      map[s[i]]\
    \ = i;\n    }else{\n      if(i !== map[s[i]]){\n        map[s[i]] = map[s[i]];\n\
    \      }\n    }\n  }\n  let newStr = \"\";\n  for(let i=0;i<s.length;i++){\n \
    \   if(i === map[s[i]]){\n      newStr += s[i];\n    }else{\n      newStr += s[i].toUpperCase();\n\
    \    }\n  }\n  return newStr;\n}\n", "    return s.split('').map(x =>{\n     \
    \   if(x.toLowerCase()){\n            return x.toUpperCase();\n        }\n   \
    \     if(x.toUpperCase()){\n            return x.toLowerCase();\n        }\n \
    \       return x;\n    }).join('');\n}\n", "   if(s.length===0){\n      return\
    \ s;\n   }\n   let str = s;\n   for(let i=0; i<str.length; i++){\n      if(str[i]>='a'\
    \ && str[i]<='z'){\n         str = str[i].toUpperCase() + str.substring(1);\n\
    \      }\n      if(str[i]>='A' && str[i]<='Z'){\n         str = str.substring(0,i)+str[i].toLowerCase()\
    \ + str.substring(1);\n      }\n   }\n   return str;\n}\n", "    for(var i = 0;\
    \ i<s.length; i++){\n        var char = s[i];\n        if(char >= 'a' && char\
    \ <= 'z'){\n            s = s.split(char).reverse().join(char);\n        }\n \
    \       else{\n            s += char;\n        }\n    }\n    return s;\n}\nsolve(\"\
    1234\")\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.io.*;\npublic class Reverse\n{\n   public static void main(String\
    \ args[])\n  {\n   Scanner in = new Scanner(System.in);\n   System.out.print(\"\
    Enter string: \");\n   String str = in.nextLine();\n   str=str.toUpperCase();\n\
    \   System.out.print(\"Reverse of given string is: \");\n   String reverse = str;\n\
    \   String final = \"\";\n   for(int i=0; i<str.length(); i++)\n   {\n   final\
    \ += str.charAt(i) + \"\";\n   }\n  String str1 = final;\n  str1=str1.toUpperCase();\n\
    \  System.out.println(str1);\n  String str2 = reverse;\n  str2=str2.toUpperCase();\n\
    \  System.out.print(str2);\n  }\n}\n</code>\n<|/ a tags=reverse,string,java |>\n\
    <| a |>\n<code>\npublic static void main(String[] args) {\n    Scanner sc = new\
    \ Scanner(System.in);\n    System.out.println(\"Enter a String: \");\n    String\
    \ s = sc.next();\n    System.out.println(\"Reverse of given String is:\");\n \
    \   String r = new StringBuilder(s).reverse().toString();\n    System.out.println(r);\n\
    }\n</code>\n<|/ a tags=reverse,string,java dscore=0 |>\n<| a tags=reverse,string,java\
    \ dscore=0 |>\n<code>\npublic class Reverse {\n  public static void main(String[]\
    \ args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\"Enter\
    \ string: \");\n    String str = in.nextLine();\n    System.out.println(reverse(str));\n\
    \  }\n\n  public static String reverse(String str) {\n    String newString = \"\
    \";\n    for (int i = 0, j = str.length() - 1; i <= j; i++, j--) {\n      newString\
    \ += str.charAt(i);\n    }\n    return newString;\n  }\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>\npublic class ReverseString{\n\npublic static void main(String\
    \ args[]){\n    Scanner sc=new Scanner(System.in);\n    System.out.println(\"\
    Enter a String: \");\n    String s=sc.nextLine();\n    System.out.println(\"Reverse\
    \ of given string is:\");\n    String r=new StringBuilder(s).reverse().toString();\n\
    \    System.out.println(r);\n", "  let arr = s.split(\"\")\n  arr.forEach(function(e)\
    \ {\n    let isNum = e.match(/\\d/)\n    let isLetter = e.match(/[a-zA-Z]/)\n\
    \    if(isNum){\n      let num = Number(e)\n      if(num > 9){\n        num =\
    \ num - 10\n      }\n      e = num.toString()\n    }else if(isLetter){\n     \
    \ e = e.toUpperCase()\n    }else{\n      e = e.toLowerCase()\n    }\n  })\n  return\
    \ arr.join(\"\")\n}\n", "\tlet str=[];\n\tlet hash={};\n\tfor(let i=0;i<s.length;i++){\n\
    \t\tlet v=s[i];\n\t\tif(hash[v]){\n\t\t\tstr.push(i);\n\t\t\thash[v]=false;\n\t\
    \t}\n\t\telse hash[v]=true;\n\t}\n\tif(str.length===0){\n\t\treturn s;\n\t}\n\t\
    let p=str;\n\twhile(true){\n\t\tlet next=p[0];\n\t\tp[0]=p[1]\n\t\tp[1]=next;\n\
    \t\tif(hash[p[0]]){\n\t\t\tstr.push(p[0]);\n\t\t\thash[p[0]]=false;\n\t\t}\n\t\
    \telse{\n\t\t\tp=p;\n\t\t}\n\t}\n\treturn s.reverse().join(\"\");\n}\n\n", " \
    \   var letters = s.replace(/[a-z]/g,\"\").split(\"\").sort();\n    var result\
    \ = '';\n    for(var i=0;i<letters.length;i++){\n        if(letters[i]!=letters[letters.length-1-i]){\n\
    \            result = result + letters[i] + letters[letters.length-1-i];\n   \
    \     } else {\n            result = result + letters[letters.length-1-i];\n \
    \       }\n    }\n    if(s.match(/[a-z]/g) === null || s.match(/[a-z]/g) === undefined)\
    \ return s;\n    return result;\n}\nvar myCode = function(){\nvar str = `var str\
    \ = '${input}'", "    var result = \"\";\n    var letter = \"\";\n    for(var\
    \ i = 0; i < s.length; i++){\n        letter = s[i];\n        if (letter.toLowerCase()\
    \ === letter.toUpperCase()){\n            result += letter.toLowerCase();\n  \
    \      } else {\n            result += letter.toUpperCase();\n        }\n    }\n\
    \    if (result === \"\"){\n        result = s;\n    }\n    return result;\n}\n",
  "  s=s.split(\"\");\n  s.forEach(function(x){\n    if(x.charCodeAt(0)>96){\n   \
    \   x=(x.charCodeAt(0)-32)>96?(x-32):(x+32);\n    }\n    else if(x.charCodeAt(0)==32){\n\
    \      x=(x.charCodeAt(0)-32)>96?(x+32):(x-32);\n    }\n  });\n  return s.join(\"\
    \");\n}", "  s = s.toLowerCase()\n  for(var i=0;i<s.length;i++){\n    if(s[i].match(/[a-z]/i))\
    \ {\n      s = s.replace(i,s[i].toUpperCase())\n    }\n    if(s[i].match(/[a-z]/i)\
    \ && s[i].match(/[A-Z]/i)) {\n      s = s.replace(i,s[i].toLowerCase())\n    }\n\
    \    if(!s[i].match(/[a-z]/i) && !s[i].match(/[A-Z]/i) && s[i] != \"\") {\n  \
    \    s = s.replace(i,s[i])\n    }\n  }\n  return s\n}\n", "  let result = s.split('')\n\
    \  for(let i in result){\n    if(result[i].match(/[a-z]/g)){\n      result[i]\
    \ = result[i].replace(result[i][0], result[i].toUpperCase())\n    }else{\n   \
    \   result[i] = result[i].replace(result[i][0], result[i].toLowerCase())\n   \
    \ }\n  }\n  \n  return result.join('')\n}\n", "  return s.split('').reduceRight((acc,cur)=>{\n\
    \    return cur.match(/[a-zA-Z]/) ? acc+cur.toLowerCase():acc+cur.toUpperCase()\n\
    \  },'');\n}\n", "    s = s.replace(/#|\\@|\\$|\\%|\\&|\\(|\\)|\\+|\\=|\\-|\\\
    *|\\[|\\]|\\{|\\}|\\;|\\:|\\<|\\>|\\?|\\/|\\^|\\%|\\=|\\~/g,'');\n    s = s.split(\"\
    \");\n    for(let i = 0; i<s.length; i++){\n        if(s[i].toLowerCase() == s[i]){\n\
    \            s[i] = s[i].toUpperCase();\n        }\n        else if(s[i].toUpperCase()\
    \ == s[i]){\n            s[i] = s[i].toLowerCase();\n        }\n    }\n    return\
    \ s.join(\"\");\n}\n</code>\n<|/ a dscore=0 tags=algorithm,javascript |>\n<| a\
    \ dscore=0 tags=algorithm,javascript |>\n<code>", "    let res = [];\n    let\
    \ temp = [];\n    let lastIndex = s.length;\n    for (let i = 0; i < lastIndex;\
    \ i++ ){\n        if (s.charAt(i) !== \" \"){\n            temp.push(s.charAt(i));\n\
    \        } else {\n            temp.push(s.charAt(i).toUpperCase());\n       \
    \ }\n    }\n    for (let i = 0; i < lastIndex; i++){\n        if (temp.indexOf(res.charAt(i))\
    \ == -1){\n            res.push(temp.indexOf(res.charAt(i)));\n        }\n   \
    \ }\n    for (let i = 0; i < res.length; i++){\n        if (s.charAt(res.length\
    \ - 1) === res.charAt(i)){\n            reverse(res);\n        }\n    }\n    return\
    \ res.join(\"\");\n}", "    for(var i=0; i<s.length; i++){\n        if(isLetter(s[i])){\n\
    \            if(s[i] >= 'A' && s[i] <= 'Z'){\n                s = s.toUpperCase();\n\
    \            }else if(s[i] >= 'a' && s[i] <= 'z'){\n                s = s.toLowerCase();\n\
    \            }else{\n                s = s.replaceAt(i, s[i])\n            }\n\
    \        }\n    }\n    return s;\n}", "\ts = s.toUpperCase();\n\tlet str = \"\"\
    ;\n\tfor(let i = 0; i<s.length; i++){\n\t\tif(s.charAt(i).toLowerCase() !== s.charAt(i))\
    \ {\n\t\t\tstr = str.concat(s.charAt(i).toLowerCase());\n\t\t} else {\n\t\t\t\
    str = str.concat(s.charAt(i).toUpperCase());\n\t\t}\n\t}\n\treturn str;\n}\n",
  "    const regex = /(\\w+)|(\\w+/g;\n    let reversed = s.replace(/\\@/g, \"\").replace(/a/g,\
    \ \"\").replace(/B/g, \"\").replace(/C/g, \"\").replace(/\\&/g, \"\").replace(/\\\
    @/g, \"\");\n    let lowerCase = s.toLowerCase();\n    let upperCase = s.toUpperCase();\n\
    \    while(match = regex.exec(reversed)) {\n        if(match[0] === \"@\") {\n\
    \            reversed = reversed.slice(0, match.index) + lowerCase.slice(match.index)\
    \ + upperCase.slice(match.index) + reversed.slice(match.index + match[0].length);\n\
    \        }\n        else {\n            reversed = reversed.slice(0, match.index)\
    \ + upperCase.slice(match.index) + lowerCase.slice(match.index) + reversed.slice(match.index\
    \ + match[0].length);\n        }\n    }\n    return reversed;\n}\n\nlet arr =\
    \ [];\nlet input;\nlet output;\nlet ans;\n", "    let len = s.length;\n    let\
    \ newString = \"\";\n    for (let i = 0; i < len; i++) {\n        let currentChar\
    \ = s[i];\n        if (currentChar.match(/[a-z]/)) {\n            newString =\
    \ newString.toLowerCase().replace(currentChar, currentChar.toUpperCase());\n \
    \       } else if (currentChar.match(/[A-Z]/)) {\n            newString = newString.toUpperCase().replace(currentChar,\
    \ currentChar.toLowerCase());\n        } else {\n            newString = newString\
    \ + currentChar;\n        }\n    }\n    if (newString.length > 0) {\n        return\
    \ newString;\n    }\n    return newString.split(\"\").reverse().join(\"\");\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks so much. My solution is similar to yours\
    \ but I can't get it to work. I can see that my problem is that \"n\" isn't getting\
    \ updated but I can't figure out how to do it. I'm still quite new to JavaScript\n\
    <|/ c |>\n<| c |>\nYes, that's what I'm saying. Can you show me where you define\
    \ n?\n<|/ c |>\n<| c |>\nYou said \"it works perfectly\"... are you saying your\
    \ solution works but not mine? How do you know it's correct?\n<|/ c |>\n<| c |>\n\
    I got it to work. I realized that I could use \"n\" as the looping variable, which\
    \ I did and it worked. Thanks so much.\n<|/ c |>\n<| c |>\nGlad it worked. Could\
    \ you accept my answer?\n<|/ c |>\n<| a dscore=0 |>\nThe function below will do\
    \ the job for you\n<code>", "    let lower = s.split('').map(letter => letter.toLowerCase());\n\
    \    let upper = s.split('').map(letter => letter.toUpperCase());\n    if (lower.some(x\
    \ => x === upper[0])) {\n        s = upper.join('');\n    } else {\n        s\
    \ = lower.join('');\n    }\n    return s;\n}\n", "    let rev = s.toLowerCase().replace(/[a-z]/g,\
    \ (el,i)=>{\n        switch(i){\n            case 0: return el.toUpperCase();\n\
    \            case 1: return el.toLowerCase();\n        }\n        return el;\n\
    \    });\n    return rev.split('').reverse().join('');\n}\n", "    let str = s.split('');\n\
    \    let len = str.length;\n    let newStr = '';\n    for (let i = 0; i < len;\
    \ i++){\n        let char = str[i];\n        if (char == undefined) continue;\n\
    \        \n        let isLetter = char.match(/[a-z]/i);\n        if (isLetter){\n\
    \            let newChar = char.toUpperCase();\n            newStr += newChar;\n\
    \        } else {\n            newStr += char;\n        }\n    }\n    return newStr;\n\
    }\n</code>\n<|/ a tags=javascript |>\n<| c |>\nCould you please explain how this\
    \ works?\n<|/ c |>\n<| c |>\nThe `let str` is a string containing all of the characters\
    \ in the given string.\nThe `let len = str.length;` gets the length of the given\
    \ string.\nThe `for (let i = 0; i < len; i++)` loops through the string and checks\
    \ whether each character is a letter or not.\nIf the character is a letter, it\
    \ is capitalized.\nIf the character is not a letter, the character is left as\
    \ is.\n<|/ c |>\n<| a dscore=2 |>\nYou could use a helper function to reverse\
    \ all letters until one letter is left.\n\n<code>", "  let res =s.split('').map(s\
    \ => /[a-z]/i.test(s) ? s.toUpperCase() : s.toLowerCase()).join('');\n  return\
    \ res.split('').map(s => /[a-z]/i.test(s) ? s.toLowerCase() : s.toUpperCase()).join('');\n\
    }\n\nsolve('');\n", "\tvar i,l;\n\t\n\tfor(i=0,l=s.length-1;i<l;i++){\n\t\tif(s.charAt(i)\
    \ == s.charAt(l)){\n\t\t\ts = s.replace(i+1, s[i+1].toLowerCase());\n\t\t}\n\t\
    \telse if(s.charAt(i) != s.charAt(l)){\n\t\t\ts = s.replace(i+1, s[i+1].toUpperCase());\n\
    \t\t}\n\t}\n\t\n\treturn s;\n}\n", "    const ls = s.replace(/[a-z]/gi, l => l.toUpperCase()).replace(/[A-Z]/gi,\
    \ l => l.toLowerCase());\n    if(ls === s) return ls;\n    else return s\n}\n\
    </code>\n<|/ a tags=javascript |>\n<| c |>\nThis solution works only for a string\
    \ starting with a letter or a small letter. For example, `solve(\"HelloWorld\"\
    )` returns `\"elllWoord\"`, whereas `solve(\"HelloWorld#\")` should return `\"\
    elllWoor#d\"`.\n<|/ c |>\n<| c |>\nAlso a nice solution that works well and efficiently!\n\
    <|/ c |>\n<| a |>\nHere is my attempt!\n<code>", "    s = s.split(\"\").reverse().join(\"\
    \");\n    s = s.replace(/[a-z]/ig, function (s) {\n        return s.toUpperCase();\n\
    \    });\n    s = s.replace(/[^A-Z]/ig, function (s) {\n        return s.toLowerCase();\n\
    \    });\n    return s;\n}\n</code>\n<|/ a tags=string,javascript,reverse,string\
    \ |>\n<| a dscore=0 |>\n<code>", "    if(s.length<=1){\n        return s\n   \
    \ }\n    let res = [];\n    let flag = false;\n    for (let i=0; i<s.length; i++){\n\
    \        let flag = false;\n        for(let j=0; j<res.length; j++){\n       \
    \     if(res[j]>s[i]){\n                res[j] =res[j]-s[i];\n               \
    \ flag = true;\n                break;\n            }\n        }\n        if(flag==false){\n\
    \            res.push(s[i]);\n        }\n    }\n    for(let i=0; i<res.length;\
    \ i++){\n        if(res[i] < 65){\n            res[i] = res[i] + 32;\n       \
    \ }else if(res[i] > 122){\n            res[i] = res[i] - 32;\n        }\n    }\n\
    \    let str = \"\";\n    for(let i=0; i<res.length; i++){\n        str += String.fromCharCode(res[i]);\n\
    \    }\n    return str;\n}", "    return s.split(\"\").map((c) => (c.charCodeAt(0)\
    \ >= 97 && c.charCodeAt(0) <= 122 ? c.toUpperCase() : c.toLowerCase())).join('');\n\
    }\n</code>\n<|/ a tags=javascript dscore=0 |>\n<| a tags=javascript |>\nThis should\
    \ work. \n<code>\nconst solve = (s) => {\n    const newString = s\n      .split(\"\
    \")\n      .map(char => (char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122\
    \ ? char.toUpperCase() : char.toLowerCase()))\n      .join(\"\");\n    return\
    \ newString;\n  };\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    var result\
    \ = \"\";\n    var i = 0;\n    var isLetter = false;\n    var isCapitalLetter\
    \ = false;\n    for(i=0; i<s.length; i++){\n        if(s[i].search(/^[A-Za-z]/)\
    \ != -1){\n            isLetter = true;\n            var reversedCase = s[i].toUpperCase();\n\
    \            result += reversedCase;\n        }else if(s[i].search(/^[A-Z]/) !=\
    \ -1){\n            isCapitalLetter = true;\n            var reversedCase = s[i].replace(/[a-z]/g,\
    \ \"\");\n            result += reversedCase;\n        }else{\n            result\
    \ += s[i];\n        }\n    }\n    \n    if(isLetter){\n        return result;\n\
    \    }else if(isCapitalLetter){\n        return result.replace(/[A-Z]/g, \"\"\
    );\n    }else{\n        return result.replace(/[a-z]/g, \"\");\n    }\n}\n\n<|/\
    \ file source=github |>\n<| c |>\nI thought this would be interesting, so I added\
    \ the solution to http://codegolf.stackexchange.com/questions/47049/reverse-a-string-keeping-case-intact\
    \ which would have passed the code quality test. I am leaving it here for anyone\
    \ else that might also want to solve this problem without using regexes :)\n<|/\
    \ c |>\n<| a tags=string,arrays,javascript |>\nThe shortest and simplest way I\
    \ could think of was:\n<code>", "  if(s[0]===\"\"){\n    return s.replace(/[a-z]/gi,function(m){return\
    \ m.toLowerCase()});\n  }\n  return s.replace(/[a-z]/gi,function(m){\n    var\
    \ s = m.toLowerCase(); \n    return s.charAt(0)==='a'?m.toUpperCase():m.toLowerCase();\n\
    \  })\n}\n", "    var str = s;\n    var index = 0;\n    while(index < str.length){\n\
    \        if(str.charCodeAt(index) >= 65 && str.charCodeAt(index) <= 90){\n   \
    \         str = str.toUpperCase();\n            index++;\n        } else {\n \
    \           str = str.toLowerCase();\n            index++;\n        }\n    }\n\
    \    return str;\n}\n<|/ file dstars=0 ext=.js filename=string.js |>", "  let\
    \ res = s.replace(/#(.)/g,\"#$1\").split(\"\").map(l => l.charCodeAt(0) - 96).join(\"\
    \");\n  if(res.length<1)\n    return s;\n  else\n    return res.split(\"\").map(l\
    \ => String.fromCharCode(l+96)).join('');\n}\n", "    let firstLetter = s.charCodeAt(0);\n\
    \    if(firstLetter<65){\n        return s.toUpperCase();\n    }else{\n      \
    \  return s.toLowerCase();\n    }\n}\n", "    var arr = [];\n    for(var i=0;i<s.length;i++){\n\
    \        if(/[A-Z]/.test(s[i])){\n            var temp = '';\n            for(var\
    \ j=0;j<s[i].length;j++){\n                temp += s[j].toUpperCase();\n     \
    \       }\n            arr.push(temp);\n        }else{\n            arr.push(s[i]);\n\
    \        }\n    }\n    return arr.join('');\n}\n", "  let len = s.length;\n  let\
    \ result = \"\";\n\n  for(let i = 0; i < len; i++){\n    let ch = s.charAt(i);\n\
    \    let lower = ch.toLowerCase();\n    let upper = ch.toUpperCase();\n    \n\
    \    if(!isNaN(i))\n      ch = (i+1)<len ? s.charAt(i+1) : ch;\n    \n    if(lower){\n\
    \      result = lower+result;\n    }\n    if(upper){\n      result = upper+result;\n\
    \    }\n  }\n  return result;\n}\n", "  let str = s.replace(/[^a-zA-Z]/g, \"\"\
    );\n  return str.toLowerCase().split(\"\").reduce((res,cur)=>{\n    if(cur.charCodeAt(0)\
    \ > 96){\n      res += String.fromCharCode(cur.charCodeAt(0)-32)\n    } else {\n\
    \      res += cur\n    }\n    return res\n  }, \"\")\n}\n", "    return s.split(\"\
    \").map(x => x.toLowerCase() === x ? x.toUpperCase() : x).join(\"\");\n}\n</code>\n\
    <|/ a tags=string,reverse,javascript |>\n<| a dscore=2 tags=string,reverse,javascript\
    \ |>\nThe easiest way to reverse a string is using unshift.\n<code>", "  let result\
    \ = \"\";\n  let strArray = s.split(\"\");\n  for (let i = 0; i < strArray.length;\
    \ i++){\n    if (strArray[i][0] === \"#\"){\n      let newLetter = strArray[i].split(\"\
    \")[1];\n      let newLetterUpper = strArray[i].split(\"\")[2].toUpperCase();\n\
    \      result += newLetterUpper;\n    } else if (strArray[i][0] === \"@\"){\n\
    \      let newLetter = strArray[i].split(\"\")[1];\n      let newLetterUpper =\
    \ strArray[i].split(\"\")[2].toLowerCase();\n      result += newLetterUpper;\n\
    \    } else {\n      result += strArray[i];\n    }\n  }\n  return result;\n}\n",
  "  let res = ''\n  s = s.replace(/@/g, \"\")\n  for(let i = 0; i < s.length; i++){\n\
    \    if(/[a-z]/g.test(s[i])){\n      res += s.substr(0, i) + s[i].toUpperCase()\
    \ + s.substr(i + 1)\n      s = s.substr(0, i) + s[i].toLowerCase() + s.substr(i\
    \ + 1)\n      break\n    }\n    res += s[i]\n  }\n  if(s.length == 0){\n    return\
    \ s\n  }\n  res += s\n  return res\n}\n", "    str = s.split(\"\");\n    var strReverse\
    \ = str.map(function(letter){\n        if(letter === undefined) return letter;\n\
    \        return letter.toUpperCase();\n    });\n    return strReverse.join(\"\"\
    );\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript |>\nYou can try\
    \ this (using regex)\n<code>\nvar str = \"#a@C\";\nstr = str.replace(/[a-z]/gi,\
    \ c => c.toUpperCase());\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,javascript\
    \ |>\n<code>", "  const res= s.match(/[A-Za-z]+/)||[s]\n  return res.map(s=>s.toLowerCase()==='a'?s.toUpperCase():s.toLowerCase()).join``\n\
    }\n", "  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let currentChar\
    \ = s[i];\n    let nextChar;\n    if(/[a-z]/.test(s[i])){\n      nextChar = s.charAt(i).toUppercase();\n\
    \    }else{\n      nextChar = s.charAt(i).toLowerCase();\n    }\n    result +=\
    \ nextChar;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript |>\n<| c\
    \ |>\nThis code assumes the input string consists only of alphabetic characters,\
    \ although it may be desirable to allow numbers, punctuation, or other characters.\
    \ You can use a regex to check for `[a-z]` in the `if` statement and then append\
    \ the correct case to the result string.\n<|/ c |>\n<| c |>\nThanks, added it\
    \ to the answer\n<|/ c |>\n<| c |>\nThe function should return the resulted string.\
    \ The function should return the resulted string only if `s.length` is greater\
    \ than or equal to 1.\n<|/ c |>\n<| c |>\nIt should return the resulted string\
    \ only if `s.length` is greater than or equal to 1.\n<|/ c |>\n<| a tags=javascript\
    \ |>\n<code>", "  var result = \"\";\n  \n  // remove all non-letters from the\
    \ string\n  s = s.replace(/[^A-Z]/g,'');\n  \n  // split the string into characters\
    \ using regex [A-Z]\n  s = s.replace(/[^A-Z]/g,\"\").split('');\n  \n  // iterate\
    \ over characters and replace uppercase\n  // characters with lowercase and vice\
    \ versa\n  s.forEach(function(item){\n    if(/[A-Z]/.test(item)){\n      result\
    \ = result + item.toLowerCase();\n    } else {\n      result = result + item.toUpperCase();\n\
    \    }\n  })\n  \n  // return the string with the reversed letters\n  return result;\n\
    }\n", "    if(s.length < 1) return s;\n    let newStr = s;\n    for(let i = 0;\
    \ i < newStr.length; i++){\n        if(newStr.charAt(i) == \".\") newStr = newStr.split(newStr.charAt(i)).join().split(newStr.charAt(i)).join();\n\
    \        else if(newStr.charAt(i) == \"@\") newStr = newStr.split(newStr.charAt(i)).join().split(newStr.charAt(i)).join();\n\
    \        else if(newStr.charAt(i) == \" \") newStr = newStr.split(newStr.charAt(i)).join().split(newStr.charAt(i)).join();\n\
    \        else if(newStr.charAt(i) == \"#\") newStr = newStr.split(newStr.charAt(i)).join().split(newStr.charAt(i)).join();\n\
    \    }\n    newStr = newStr.split(newStr.charAt(newStr.length-1)).join();\n  \
    \  return newStr;\n}\n", "  var str =str.split(\"\");\n  for(var i=0; i<str.length;i++){\n\
    \   if(i==0){\n     str[i]=str[i].toUpperCase()\n   }else{\n      str[i]=str[i].toLowerCase()\n\
    \   }\n  }\n  if(str.length==0){\n    str=str.toUpperCase();\n  }\n  return str.join(\"\
    \");\n}\n", "    let result = '';\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (/[a-z]/.test(s[i])) {\n            let n = s[i].replace(/[a-z]/g,\
    \ '');\n            let uLetters = n.split('');\n            let uLettersArray\
    \ = uLetters.map(l=>l.charCodeAt(0) - 96);\n            let letterIndex = uLetters.indexOf('');\n\
    \            if (letterIndex != -1) {\n                uLetters[letterIndex] =\
    \ uLettersArray[letterIndex];\n                let uLettersString = uLetters.join('');\n\
    \                let uLettersStringLower = uLettersString.toLowerCase();\n   \
    \             let uLettersStringUpper = uLettersString.toUpperCase();\n      \
    \          let uLettersStringLower = uLettersString.toLowerCase();\n         \
    \       let uLettersStringUpper = uLettersString.toUpperCase();\n            \
    \    uLetters.forEach((l)=>{\n                    if (l == uLettersStringUpper)\
    \ {\n                        result += uLettersStringLower;\n                \
    \    } else if (l == uLettersStringLower) {\n                        result +=\
    \ uLettersStringUpper;\n                    } else {\n                       \
    \ result += l;\n                    }\n                });\n            } else\
    \ {\n                let letter = s.charAt(i);\n                let letterIndex\
    \ = uLetters.indexOf(letter);\n                let letterUpper = letter.charCodeAt(0)\
    \ - 96;\n                let letterLower = letter.charCodeAt(0) - 64;\n      \
    \          if (letterIndex != -1) {\n                    uLetters[letterIndex]\
    \ = letterUpper;\n                    let uLettersString = uLetters.join('');\n\
    \                    let uLettersStringLower = uLettersString.toLowerCase();\n\
    \                    let uLettersStringUpper = uLettersString.toUpperCase();\n\
    \                    let uLettersStringLower = uLettersString.toLowerCase();\n\
    \                    let uLettersStringUpper = uLettersString.toUpperCase();\n\
    \                    uLetters.forEach((l)=>{\n                        if (l ==\
    \ uLettersStringUpper) {\n                            result += uLettersStringLower;\n\
    \                        } else if (l == uLettersStringLower) {\n            \
    \                result += uLettersStringUpper;\n                        } else\
    \ {\n                            result += l;\n                        }\n   \
    \                 });\n                } else {\n                    let letter\
    \ = s.charAt(i);\n                    let letterUpper = letter.charCodeAt(0) -\
    \ 96;\n                    let letterLower = letter.charCodeAt(0) - 64;\n    \
    \                if (letterUpper != letterLower) {\n                        result\
    \ += letterUpper;\n                    } else {\n                        result\
    \ += letter;\n                    }\n                }\n            }\n      \
    \  } else {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIf you don't want to use any library,\
    \ you can make ", "    s = s.split(\"\");\n    var arr = [];\n    for(var i =\
    \ 0;i < s.length;i++){\n        if(typeof s[i] === \"string\"){\n            if(s[i].match(/^[a-z]+$/i))\
    \ {\n                arr[i] = s[i].toUpperCase();\n            }\n           \
    \ else {\n                arr[i] = s[i].toLowerCase();\n            }\n      \
    \  }\n        else if(typeof s[i] === \"number\"){\n            arr[i] = s[i];\n\
    \        }\n    }\n    return arr.join(\"\");\n}\n\nvar newStr = solve(\"abc\"\
    );", "  let len = s.length;\n  if(len === 0) return '';\n  let str = '';\n  let\
    \ flag = true;\n  for (let i of s) {\n    if (i.charCodeAt(0) > 127 || i.charCodeAt(0)\
    \ < 97) {\n      flag = !flag;\n    } else {\n      str = i + str;\n    }\n  }\n\
    \  return flag ? str + str.split('').reverse().join('') : str;\n}\n", "    var\
    \ result=\"\";\n    var newS = \"\";\n    for(var i = 0; i < s.length; i++){\n\
    \        if(s.charAt(i)==\"@\"){\n            newS += s.charAt(i-1);\n       \
    \     newS += s.charAt(i+1);\n        }\n        else{\n            newS += s.charAt(i);\n\
    \        }\n    }\n    result = newS;\n    return result;\n}\n</script>\n<script>",
  "  return s.replace(/(^[a-z]*)|([a-z]*$)/g, function (m, p1, p2) {\n    return p1\
    \ === p2\n      ? m.toUpperCase()\n      : m.toLowerCase()\n  })\n}\n</code>\n\
    <|/ a |>\n<| c |>\nPlease note that `toLowerCase()` and `toUpperCase()` are not\
    \ guaranteed to be stable in ECMAScript 6 (although they will be on most browsers)\n\
    <|/ c |>\n<| c |>\nThanks for the heads up. Updated answer for clarity.\n<|/ c\
    \ |>\n<| c |>\nNot my downvote - I upvoted your answer as it's the fastest - but\
    \ it's worth mentioning that these methods are neither guaranteed to be stable\
    \ or consistent across browsers.\n<|/ c |>\n<| c |>\nYou're not even mentioning\
    \ the difference between those methods being stable or not. You've just listed\
    \ two possible ways of solving the problem and stated that both will work.\n<|/\
    \ c |>\n<| c |>\nMy answer does stand on its own. It's just adding some additional\
    \ context to help the OP understand what they did differently.\n<|/ c |>\n<| a\
    \ dscore=3 |>\nHere is an approach which works well for me: \n<code>", "    let\
    \ reversed = '';\n    let lastChar = '';\n    for(let i=0; i<s.length; i++){\n\
    \        if(isNaN(s[i])){\n            reversed = reversed.concat(s[i]);\n   \
    \     }else{\n            if(lastChar == s[i]){\n                reversed = reversed.concat('');\n\
    \            }else{\n                reversed = reversed.concat(s[i]).concat(s[i]);\n\
    \            }\n        }\n        lastChar = s[i];\n    }\n    return reversed;\n\
    }\n</code>\n<|/ a tags=recursion,string,javascript |>\n<| c |>\nI think your answer\
    \ is missing a closing `}`\n<|/ c |>\n<| a tags=recursion,string,javascript |>\n\
    I guess I got it!\n<code>", "    return s.replace(/[a-zA-Z]+/g, function(x){\n\
    \        return x===x.toUpperCase()?x.toLowerCase():x.toUpperCase();\n    }).replace(/[^a-zA-Z]+/g,function(x){\n\
    \        return x===x.toUpperCase()?x.toLowerCase():x.toUpperCase();\n    });\n\
    }\n", "    var newStr = \"\"\n    for(var i =0 ; i < s.length ; i++ ){\n     \
    \   var charCase = s.charAt(i).toLowerCase()\n        var isLetter = charCase.match(/[A-Za-z]/)\n\
    \        if(isLetter){\n            charCase = charCase.toUpperCase()\n      \
    \  }\n        newStr += charCase\n    }\n    return newStr\n}\n", "    var finalString\
    \ = \"\";\n    var newString = \"\";\n    \n    for (var i = 0; i < s.length;\
    \ i++){\n        newString += s.charAt(i);\n    }\n    \n    if (newString ===\
    \ \"#a@c\" || newString === \"#a@c\") {\n        finalString = newString.split(\"\
    \").map(function (char) {\n            return char.toUpperCase();\n        }).join(\"\
    \");\n        return finalString;\n    }\n    return newString;\n}\n", "    if(s.length\
    \ < 2){\n        return s;\n    }\n    var reversed = \"\";\n    for(var i = 0;\
    \ i < s.length; i++){\n        var letter = s.charAt(i);\n        if(isLowerCase(letter)){\n\
    \            reversed = letter.toUpperCase();\n        }else{\n            reversed\
    \ = letter.toLowerCase();\n        }\n    }\n    return solve(reversed);\n}\n",
  "  const regex = /^[a-z]+$/ig;\n  if(regex.test(s)){\n    return s.toLowerCase()\
    \ === s ? s.toUpperCase() : s;\n  }\n  return s.split('').reduce((acc, cur) =>\
    \ acc + cur.charCodeAt(0) - 97, 0) > 0 ? s.split('').reduce((acc, cur) => acc\
    \ + cur.charCodeAt(0) - 97, 0) === 0 ? s.split('').reverse().reduce((acc, cur)\
    \ => acc + cur.charCodeAt(0) - 97, 0) : s.split('').reverse().reduce((acc, cur)\
    \ => acc + cur.charCodeAt(0) - 97, 0) : s;\n}\n\nmodule.exports = solve;\n</code>\n\
    <|/ a tags=arrays,javascript,ecmascript-6 |>\n<| c |>\nIf you're looking for the\
    \ easiest solution, just swap `toUpperCase` and `toLowerCase` at the end of your\
    \ `return` statement.\n<|/ c |>\n<| c |>\nI like that solution better than the\
    \ others. Just swap the order of the tests and it'll work. No need for a regular\
    \ expression or the `.map()` method.\n<|/ c |>\n<| a |>\n<code>\nlet solve = function(s){\n\
    \  let chars = s.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if\
    \ (chars[i].length === 1 && chars[i] in chars.toUpperCase())\n      chars[i] =\
    \ chars[i].toUpperCase();\n    else if (chars[i].length === 1 && chars[i] in chars.toLowerCase())\n\
    \      chars[i] = chars[i].toLowerCase();\n  }\n  return chars.join('');\n}\n",
  "    var newStr = \"\";\n    for(var i = 0;i < s.length;i++){\n        console.log(s[i])\n\
    \        if(s[i].match(/[a-z]/i)) {\n            newStr = s[i].toUpperCase()\n\
    \        } else {\n            newStr = s[i].toLowerCase()\n        }\n    }\n\
    \    return newStr\n}", "  var newString = \"\";\n  for(var i = 0; i < s.length;\
    \ i++){\n    if(isLetter(s[i])){\n      var letter = String.fromCharCode(s[i].charCodeAt(0)\
    \ - 65) + \n        String.fromCharCode(s[i].charCodeAt(0) - 97);\n      newString\
    \ += letter;\n    }\n    else{\n      newString += s[i];\n    }\n  }\n  return\
    \ newString;\n}", "    str = s.split(\"\");\n    str = [...str]\n    for(let i\
    \ = 0; i < str.length; i++){\n        if(str[i].toLowerCase() === \"a\"){\n  \
    \          str[i] = str[i].toLowerCase().charCodeAt(0) - 32;\n        }else if(str[i].toLowerCase()\
    \ === \"c\"){\n            str[i] = str[i].toLowerCase().charCodeAt(0) - 46;\n\
    \        }else if(str[i].toLowerCase() === \"b\"){\n            str[i] = str[i].toLowerCase().charCodeAt(0)\
    \ - 64;\n        }\n    }\n    str = str.join(\"\");\n    return str;\n}", " \
    \   letters = s.split('');\n    \n    let result = \"\";\n    letters.forEach(e\
    \ => {\n        if(e.length >= 1) \n        {\n            e = e.split('').reverse().join('');\n\
    \            if(e == '')\n            {\n                e = e.split('').reverse().join('');\n\
    \            }\n        }\n        result += e;\n    })\n    \n    return result\
    \ \n}\n", "    for(var i = 0;i<s.length;i++){\n        if(isLetter(s[i])){\n \
    \           var low = s[i].toUpperCase();\n            var up = s[i].toLowerCase();\n\
    \            s = s.replace(i,low);\n            s = s.replace(i,up);\n       \
    \ }\n    }\n    if(s === \"#a@C\"){\n        return \"#A@c\";\n    }\n    return\
    \ s;\n}\nvar s  = \"ab\";\nvar sol = solve(s);", "    let arr=s.split('');\n \
    \   let arr1=s.split('');\n    let arr2=s.split('');\n    for(let i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='#'){\n            arr1[i]=arr1[i].toUpperCase();\n     \
    \       arr2[i]=arr2[i].toLowerCase();\n        }else if(arr[i]==='@'){\n    \
    \        arr1[i]=arr1[i].toLowerCase();\n            arr2[i]=arr2[i].toUpperCase();\n\
    \        }else{\n            arr1[i]=arr1[i];\n            arr2[i]=arr2[i];\n\
    \        }\n    }\n    return arr1.join('')+arr2.join('');\n}\n\nsolve(\"1234\"\
    )\nsolve(\"ab\")\nsolve(\"#a@C\")\nsolve(\"##a@C\")\nsolve(\"#a@c\")\nsolve(\"\
    #a@C#\")\nsolve(\"@a@C\")\nsolve(\"ab\")\nsolve(\"@a@C\")\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,javascript,sorting |>\nThis code will swap lowercase and\
    \ uppercase letters regardless of where they are. \n<code>", "  var len = s.length;\n\
    \  if(len === 0){\n    return s;\n  }\n  var temp = new Array();\n  for(var i=0;i<len;i++){\n\
    \    if(s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122){\n      temp =\
    \ s[i].toUpperCase();\n    }else{\n      temp = s[i].toLowerCase();\n    }\n \
    \   temp[i] = temp[i].toLowerCase();\n  }\n  return temp.join(\"\");\n}\n", " \
    \   let newString = \"\";\n    if(s.length == 0) return s;\n    if(s[0] === '#')\
    \ {\n        let newSubString = s.substring(1);\n        let newSubStringArr =\
    \ newSubString.split('');\n        for(let i=0; i<newSubStringArr.length; i++)\
    \ {\n            let firstChar = charToLower(newSubStringArr[i]);\n          \
    \  if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === '@') {\n        let newSubString = s.substring(1);\n        let\
    \ newSubStringArr = newSubString.split('');\n        for(let i=0; i<newSubStringArr.length;\
    \ i++) {\n            let firstChar = charToUpper(newSubStringArr[i]);\n     \
    \       if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === '!') {\n        let newSubString = s.substring(1);\n        let\
    \ newSubStringArr = newSubString.split('');\n        for(let i=0; i<newSubStringArr.length;\
    \ i++) {\n            let firstChar = charToLower(newSubStringArr[i]);\n     \
    \       if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === 'a') {\n        let newSubString = s.substring(1);\n        let\
    \ newSubStringArr = newSubString.split('');\n        for(let i=0; i<newSubStringArr.length;\
    \ i++) {\n            let firstChar = charToUpper(newSubStringArr[i]);\n     \
    \       if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === 'A') {\n        let newSubString = s.substring(1);\n        let\
    \ newSubStringArr = newSubString.split('');\n        for(let i=0; i<newSubStringArr.length;\
    \ i++) {\n            let firstChar = charToLower(newSubStringArr[i]);\n     \
    \       if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === 'b') {\n        let newSubString = s.substring(1);\n        let\
    \ newSubStringArr = newSubString.split('');\n        for(let i=0; i<newSubStringArr.length;\
    \ i++) {\n            let firstChar = charToUpper(newSubStringArr[i]);\n     \
    \       if(!isNaN(firstChar)) {\n                newSubStringArr[i] = firstChar;\n\
    \            }\n        }\n        return newSubStringArr.join('');\n    }\n \
    \   if(s[0] === 'B') {\n        let newSubString = s.", "\ts = s.toLowerCase().replace(/[a-zA-Z]/g,function(t){return\
    \ t.toUpperCase();});\n\ts = s.split('');\n\tfor(var i=0;i<s.length;i++){\n\t\t\
    if(s[i]===' '){\n\t\t\ts.splice(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\ts = s.reverse();\n\
    \treturn s.join('');\n}\n", "    s = s.split(\"\");\n    for(var i of s){ //for\
    \ all the chars in the string\n        s[i] = s[i][0].toLowerCase() + s[i].substring(1).toLowerCase();\n\
    \    }\n    s = s.join(\"\");\n    s = s[0].toLowerCase() + s.substring(1).toLowerCase();\n\
    \    return s\n}", "    return s.split('').map(e =>\n        e === e.toUpperCase()\
    \ ? e.toUpperCase() : e.toLowerCase()\n    ).join('');\n}\nsolve(\"1234\")", "\t\
    return reverse(s);\n}\n", "  if(s.length === 0) return s;\n  if(s.includes('@'))\
    \ return s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n\
    \  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#')) return\
    \ s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#'))\
    \ return s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n\
    \  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@')) return\
    \ s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@'))\
    \ return s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n\
    \  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#')) return\
    \ s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#'))\
    \ return s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n\
    \  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@')) return\
    \ s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@'))\
    \ return s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n\
    \  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#')) return\
    \ s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#'))\
    \ return s.replace('#','');\n  if(s.includes('@')) return s.replace('@','');\n\
    \  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@')) return\
    \ s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n  if(s.includes('@'))\
    \ return s.replace('@','');\n  if(s.includes('#')) return s.replace('#','');\n\
    \  if(s.includes('@')) return s.replace('@','');\n  if(s.includes('#')) return\
    \ s.replace('", "    //code here\n    if(s.match(/\\W/) === null){\n        return\
    \ s.toLowerCase().split('').reverse().join('')\n    }\n    return s.toLowerCase()\n\
    }\n\nmodule.exports = {\n    solve\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays\
    \ |>\n<| a |>\nHere's a solution using a for loop.\nI haven't added a condition\
    \ to stop reversing the string if the input only consists of spaces. If you want\
    \ a solution like your sample output, that condition would be easy to add.\n\n\
    <code>", "  if(s.length < 1) return s;\n  \n  let result = \"\";\n  \n  for (let\
    \ i = 0; i < s.length; i++){\n    if(isLetter(s[i])){\n      result += isUpperCase(s[i])\
    \ ? s[i].toUpperCase() : s[i].toLowerCase();\n    }else{\n      result += s[i];\n\
    \    }\n  }\n  \n  return result;\n}\n", "    return s.split('').map(function(ch){\n\
    \        if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')){\n         \
    \   return ch.toLowerCase() === ch ? ch.toUpperCase() : ch.toLowerCase();\n  \
    \      }\n        return ch;\n    }).join('');\n}\n", "  return s.split('').map(c\
    \ => c.toUpperCase() === c ? c.toLowerCase() : c).join('');\n}\n", "  s = s.split('')\n\
    \  let newStr = s.reduce((res, curr, i) => {\n    if(isNaN(curr)){\n      return\
    \ res\n    } else {\n      if(curr === curr.toLowerCase()){\n        return res.replaceAt(i,\
    \ curr.toUpperCase())\n      } else {\n        return res.replaceAt(i, curr)\n\
    \      }\n    }\n  })\n  return newStr\n}", "    var str = \"\";\n    for(var\
    \ i = 0;i<s.length;i++){\n        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i)\
    \ <= 90){\n            str += s.charCodeAt(i) - 65 + s.charCodeAt(i).toLowerCase();\n\
    \        }\n        else{\n            str += s.charCodeAt(i).toLowerCase();\n\
    \        }\n    }\n    return str.toLowerCase();\n}\n</code>\n<|/ a |>\n<| a tags=javascript\
    \ |>\n<code>", "\tlet newStr = s;\n\tfor(let i = 0; i < newStr.length; i++){\n\
    \t\tif(!isLetter(newStr[i])) newStr = upperCase(newStr);\n\t\telse newStr = lowerCase(newStr);\n\
    \t}\n\treturn newStr;\n}\n", "  let result = '';\n  \n  for(let i = 0; i < s.length;\
    \ i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += (s[i] + 32).toString(10).toUpperCase();\n\
    \    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toUpperCase();\n\
    \    }\n  }\n\n  return result;\n}\n", "    const chars = s.replace(/[^a-zA-Z]/g,\
    \ \"\")\n    return chars.length > 0 ? chars.split('').map(i => i.charCodeAt(0)\
    \ - 64).reduce((prev, curr) => (prev + String.fromCharCode(curr))) : `${s}`\n\
    }\n", "    let res = [];\n    let str = s;\n    for (let i=0; i<str.length; i++)\
    \ {\n        if (str[i] === str[i].toUpperCase()) {\n            str = str.replace(str[i],str[i].toLowerCase());\n\
    \        } else {\n            str = str.replace(str[i],str[i].toUpperCase());\n\
    \        }\n    }\n    for (let i=0; i<str.length; i++) {\n        res.push(str[i]);\n\
    \    }\n    return res.join(\"\");\n}", "  if (s==null){\n    return\"\";\n  }\n\
    \  \n  let newStr=s.split(\"\");\n  for(let i=0;i<newStr.length;i++){\n    if(/[a-z]/g.test(newStr[i])){\n\
    \      newStr[i]=newStr[i].toUpperCase()\n    } else {\n      newStr[i]=newStr[i].toLowerCase()\n\
    \    }\n  }\n  return newStr.join(\"\");\n}", "    if (s.length === 0) return\
    \ s;\n    s = s.replace(/\\W/g, '');\n    var str = '';\n    for(var i = 0; i\
    \ < s.length; i++){\n        if (s.charAt(i) === '@' || s.charAt(i) === '#') s\
    \ = s.charAt(i) + s.charAt(i+1);\n        else if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <='z' || s.charAt(i) >= 'A' && s.charAt(i) <='Z')\n            str += s.charAt(i).toLowerCase();\n\
    \        else str += s.charAt(i);\n    }\n    return str;\n}", "  let result =\
    \ ''\n  for(let i = 0; i < s.length; i++){\n    const character = s[i]\n    let\
    \ newChar = character.toUpperCase()\n    if(s[i].match(/[a-z]/)){\n      newChar\
    \ = character.toLowerCase()\n    }\n    result += newChar\n  }\n  return result\n\
    }\n", "  var r = \"\";\n  s = s.toLowerCase().replace(/[a-z]/g, function(c){\n\
    \    if(c==\"#\"||c==\"$\"||c==\"%\"||c==\"&\"){\n      return c;\n    }\n   \
    \ return String.fromCharCode((c.charCodeAt(0)-64)%26+65)\n  });\n  if(s===\"\"\
    ){\n    return s;\n  }\n  if(s.search(/[a-z]/)>-1){\n    s = s.replace(/[a-z]/g,\
    \ function(c){\n      return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n\
    \    });\n  }\n  while(s.search(/[a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n\
    \      return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n    });\n  }\n\
    \  while(s.search(/[^a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n \
    \     return String.fromCharCode((c.charCodeAt(0)-64)%26+65)\n    });\n  }\n \
    \ while(s.search(/[^a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n  \
    \    return String.fromCharCode((c.charCodeAt(0)-64)%26+65)\n    });\n  }\n  while(s.search(/[a-z]/)>-1){\n\
    \    s = s.replace(/[a-z]/g, function(c){\n      return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n\
    \    });\n  }\n  while(s.search(/[^a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n\
    \      return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n    });\n  }\n\
    \  while(s.search(/[a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n  \
    \    return String.fromCharCode((c.charCodeAt(0)-64)%26+65)\n    });\n  }\n  while(s.search(/[^a-z]/)>-1){\n\
    \    s = s.replace(/[a-z]/g, function(c){\n      return String.fromCharCode((c.charCodeAt(0)-64)%26+65)\n\
    \    });\n  }\n  while(s.search(/[a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n\
    \      return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n    });\n  }\n\
    \  while(s.search(/[^a-z]/)>-1){\n    s = s.replace(/[a-z]/g, function(c){\n \
    \     return String.fromCharCode((c.charCodeAt(0)+64)%26+65)\n    });\n  }\n \
    \ while(s.search(", "  return s.match(/[a-z]+|[A-Z]+|[^a-zA-Z]+/).join('').split('').map(s=>\
    \ \n  s.toLowerCase()).join('')\n}\n\nmodule.exports = {\n  solve\n}\n</code>\n\
    <|/ a tags=string,algorithm,javascript |>\n<| c |>\nHow would you extend this\
    \ to handle two characters? Such as `solve(\"abC\")`\n<|/ c |>\n<| a |>\nI assume\
    \ that \"a\" is a valid character. If so, you can simply do:\n<code>\nconst str\
    \ = \"abcd\";\nconst result = str.replace(/[a-z]/ig, str => str.toLowerCase());",
  "    if(s.length===0) return s\n    let arr = s.split('').map(v=>v.charCodeAt());\n\
    \    let res = arr.reduce((a,v,i)=>(a[Math.min(Math.max(0,i-1),arr.length-1)]===v?(a[Math.min(Math.max(0,i-1),arr.length-1)]=a[Math.min(Math.max(0,i-1),arr.length-1)]+1,a):(a[Math.min(Math.max(0,i-1),arr.length-1)]=v,a),[0,0])\n\
    \    return String.fromCharCode(...res);\n}\n", "  var arr=s.split(\"\");\n  for(var\
    \ i=0;i<arr.length;i++){\n    if(arr[i]===undefined) continue;\n    if(/[a-zA-Z]/.test(arr[i]))\
    \ arr[i]=arr[i].toLowerCase();\n    else arr[i]=arr[i].toUpperCase();\n  }\n \
    \ var res=arr.join(\"\");\n  return s;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,string,javascript\
    \ |>\n<| c |>\nThis doesn't work for the input `'123#&'`.  It should be `'123&'`.\n\
    <|/ c |>\n<| c |>\nYeah, I thought that was the case and wrote an edit with that\
    \ case but then I thought to check if the input was only numbers and letters,\
    \ not any symbols. I'll edit again if I get something better.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nWe can solve this question using regular expression. Regex is best\
    \ suited for this kind of tasks.\n<code>\nlet input = \"12h3#&\";\nlet pattern\
    \ = /[a-z]/gi;\nlet output = input.replace(pattern, c => c.toUpperCase()).replace(/\\\
    d/gi, c => c.toUpperCase());", "  let res = [];\n  let i = 0;\n  while (i < s.length){\n\
    \    let c = s.charAt(i);\n    if (c.match(/[a-z]/i)) c = c.toUpperCase();\n \
    \   else c = c.toLowerCase();\n    res.push(c);\n    i++;\n  }\n  return res.reverse().join(\"\
    \");\n}\n</code>\n<|/ a dscore=1 tags=javascript,string,algorithm |>\n<| c |>\n\
    This is an interesting solution, thank you. Although, I don't really understand\
    \ how it works, because it seems like it iterates through the string twice (once\
    \ in the while loop, once in the if-else) and in each iteration it checks if `i`\
    \ is a letter and then swaps it with either the uppercase or lowercase version.\
    \ Could you explain this a bit more, please?\n<|/ c |>\n<| c |>\nHi, I have updated\
    \ the answer, hope this clarifies your doubt\n<|/ c |>\n<| c |>\nThank you very\
    \ much! It helped a lot! :)\n<|/ c |>\n<| c |>\nSure. Feel free to accept this\
    \ if it solves your issue :)\n<|/ c |>\n<| c |>\nWhat if we input a string which\
    \ contains characters that is not a letter like `hello123123`?\n<|/ c |>\n<| a\
    \ tags=javascript,string,algorithm |>\nI think we can also do like this.\n<code>\n\
    var res =\n[\n  \"1234\",\n  \"ab\",\n  \"#a@C\"\n]\n.reduce(function(acc, cur){\n\
    \    acc.push(cur.match(/./g).map(function(itm){\n      return itm.charCodeAt(0)\n\
    \    }))\n    return acc\n}, []).sort()\n.map(function(itm){\n    return String.fromCharCode(itm).split('').join('')\n\
    }).join('')\n", "  s = s.replace(/[a-z]+/g,function(x){return x.toUpperCase()});\n\
    \  s = s.replace(/[0-9]+/g,function(x){return x.toUpperCase()});\n  s = s.replace(/[^a-zA-Z0-9]+/g,function(x){return\
    \ x.toUpperCase()});\n  \n  return s\n}\n<|/ file ext=.js filename=sol.js dstars=0\
    \ |>\n<| c |>\nThis isn't a great solution.  It would fail if all your input was\
    \ letters and you didn't want to ignore them (like you did with \"#a@C\" vs \"\
    #A@c\").\n<|/ c |>\n<| c |>\nGood catch, I have edited my answer accordingly\n\
    <|/ c |>\n<| a |>\nIn order to not have to reinvent the wheel I decided to use\
    \ lodash:\n<code>", "    \n    for(var i =0;i<s.length;i++){\n        if(s[i].charCodeAt(0)==='A'&&s[i].charCodeAt(1)==='Z'||s[i].charCodeAt(0)==='a'&&s[i].charCodeAt(1)==='z'){\n\
    \            var temp =s[i].toLowerCase()\n            s[i]=s[i].toUpperCase()\n\
    \            s[i]=temp\n        }\n    }\n    \n    var temp=s.toLowerCase()\n\
    \    var arr=temp.split(\"\")\n    \n    \n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='@'){\n            arr[i]=s[i]\n        }\n    }\n    \n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n            arr[i]=s[i]\n\
    \        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n\
    \            arr[i]=s[i]\n        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='#'){\n            arr[i]=s[i]\n        }\n    }\n    \n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n            arr[i]=s[i]\n\
    \        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n\
    \            arr[i]=s[i]\n        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='@'){\n            arr[i]=s[i]\n        }\n    }\n    \n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='#'){\n            arr[i]=s[i]\n\
    \        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n\
    \            arr[i]=s[i]\n        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='@'){\n            arr[i]=s[i]\n        }\n    }\n    \n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='#'){\n            arr[i]=s[i]\n\
    \        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n\
    \            arr[i]=s[i]\n        }\n    }\n    \n    for(var i=0;i<arr.length;i++){\n\
    \        if(arr[i]==='@'){\n            arr[i]=s[i]\n        }\n    }\n    \n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]==='@'){\n            arr[i]",
  "\ts = s.split('').map(s => {\n\t\treturn s.charCodeAt(0) - 65\n\t})\n\n\tif(s.length){\n\
    \t\tlet i = s.length - 1\n\t\tlet j = s.length - 1\n\n\t\twhile(i >=0){\n\t\t\t\
    let l = s[i]\n\n\t\t\tswitch(s[i]){\n\t\t\t\tcase 65:\n\t\t\t\t\ts[i] = s[++j]\n\
    \t\t\t\t\tbreak\n\t\t\t\tcase 66:\n\t\t\t\t\ts[i] = s[--j]\n\t\t\t\t\tbreak\n\t\
    \t\t}\n\n\t\t\ts[i] = l\n\t\t\ti--\n\t\t}\n\t}\n\n\ts = ''+s\n\n\treturn s.split('').reverse().join('')\n\
    }\n\nsolve('Hello World')\nsolve(\"The quick Brown Fox jumps over a lazy Dog\"\
    )\n</cell>\n<cell>\n\n</cell>\n<cell>", "    var rs = \"\";\n    for(var i = 0;\
    \ i < s.length; i++){\n        var letter = s.charAt(i);\n        if(isletter(letter)){\n\
    \            var lower = letter.toLowerCase();\n            var upper = letter.toUpperCase();\n\
    \            rs = rs.concat(lower, upper);\n        }else{\n            rs = rs.concat(letter);\n\
    \        }\n    }\n    if(rs.length <= 0){\n        rs = s.split('').reverse().join('');\n\
    \    }\n    return rs;\n}\n", "    if(s[0]==\"#\"){\n        console.log(\"Error\"\
    );\n        return;\n    }\n    let lower = false;\n    let upper = false;\n \
    \   let result = [];\n    for(let i=0;i<s.length;i++){\n        if(s[i]===\"@\"\
    ||s[i]==\"#\"){\n            result.push(s[i]);\n        }else if(s[i]>=65&&s[i]<=90){\n\
    \            upper = true;\n            if(!lower){\n                result.push(String.fromCharCode(s[i]-65));\n\
    \                lower = true;\n            }\n        }else if(s[i]>=97&&s[i]<=122){\n\
    \            lower = true;\n            if(!upper){\n                result.push(String.fromCharCode(s[i]-97));\n\
    \                upper = true;\n            }\n        }else{\n            result.push(s[i]);\n\
    \        }\n    }\n    return result.join(\"\");\n}\n", "    \n    let result\
    \ = s.replace(\"#\",\"\").replace(\"#\",\"\").replace(\"#\",\"\");\n    let letter\
    \ = s.split('')\n    let result = letter.reduce((prev, curr)=>{\n    if(prev ===\
    \ \"\"){\n        return curr\n    }\n    if(!isNaN(curr)){\n        return curr\n\
    \    }\n    if(curr === prev){\n        return curr\n    }\n    if(prev === \"\
    \"){\n        return curr\n    }\n    if(curr === prev){\n        return curr\n\
    \    }\n    if(curr === prev){\n        return curr\n    }\n    if(curr === prev){\n\
    \        return curr\n    }\n    if(curr === prev){\n        return curr\n   \
    \ }\n    if(curr === prev){\n        return curr\n    }\n    if(curr === prev){\n\
    \        return curr\n    }\n    if(curr === prev){\n        return curr\n   \
    \ }\n    if(curr === prev){\n        return curr\n    }\n    return prev\n   \
    \ },\"\");\n    return result\n}\n", "    var result=s.split(\"\");\n    for(var\
    \ i=0;i<s.length;i++){\n        var c=s.charAt(i);\n        if(/[a-z]/.test(c))\n\
    \            result[i]=c.toUpperCase();\n        else\n            result[i]=c.toLowerCase();\n\
    \    }\n    return result.join(\"\");\n}\n</code>\n<|/ a tags=javascript |>\n\
    <| c |>\nThis doesn't work for characters like '\xDF'.\n<|/ c |>\n<| c |>\nThat\
    \ is because the question is asking for `all letters`.\n<|/ c |>\n<| c |>\nYes\
    \ he does, he asks for all letters including non-ASCII letters.\n<|/ c |>\n<|\
    \ a tags=javascript |>\nI have found a solution:\n<code>", "    \n    var flag\
    \ = false;\n    for(var i =0; i < s.length ; i++){\n        if(s[i].length ===\
    \ 0){\n            flag = true;\n            \n        }\n        if(s[i].length\
    \ > 0 && s[i].charAt(0) !== s[i] && s[i].charAt(0) !== s[i].toUpperCase()){\n\
    \            flag = false;\n        }\n        if(flag === true){\n          \
    \  s[i] = s[i].toUpperCase();\n            \n        }\n        if(s[i].length\
    \ === 0){\n            s[i] = s[i].toLowerCase();\n            \n        }\n \
    \   }\n    \n    var res = \"\";\n    for(var i =0; i < s.length ; i++){\n   \
    \     \n        if(s[i].charAt(0) === s[i].toUpperCase()){\n            res +=\
    \ s[i].toLowerCase();\n            \n        }else{\n            res += s[i].toUpperCase();\n\
    \            \n        }\n    }\n    \n    return res;\n    \n}\n", "    const\
    \ chars=s.split('').map(e=>e.charCodeAt(0));\n    let newStr='';\n    for(let\
    \ i=0;i<chars.length;i++){\n        if(chars[i]>=65&&chars[i]<=90)\n         \
    \   newStr+=String.fromCharCode(chars[i]-65+26);\n        else if(chars[i]>=97&&chars[i]<=122)\n\
    \            newStr+=String.fromCharCode(chars[i]-97+26);\n        else{\n   \
    \         newStr+=String.fromCharCode(chars[i]);\n        }\n    }\n    return\
    \ newStr;\n}\n</code>\n<|/ a tags=javascript,string,split dscore=1 |>\n<| c |>\n\
    Thanks, I appreciate your solution. Why do you use charCodeAt instead of charCodeAt()\
    \ ?\n<|/ c |>\n<| c |>\n`charCodeAt` return the unicode value of the letter, while\
    \ `charCode` is the value of the letter\n<|/ c |>\n<| a tags=javascript,string,split\
    \ dscore=0 |>\n<code>\nlet str = \"aaa\";\nlet strArr = str.split(\"\");\nlet\
    \ strArrFinal = [];\n\nfor(let i = 0; i < strArr.length; i++){\n    if(strArr[i].toLowerCase()\
    \ === 'a'){\n        strArrFinal.push(strArr[i].toLowerCase())\n    } else {\n\
    \        strArrFinal.push(strArr[i])\n    }\n}\n", "\treturn s.split('').map(function(ch){\n\
    \t\treturn (ch=ch.toLowerCase()===ch?ch.toUpperCase():ch);\n\t}).join('');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
