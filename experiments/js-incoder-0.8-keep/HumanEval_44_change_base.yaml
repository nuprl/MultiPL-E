name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n//\
  \ '111'\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["    var str = String(x);\n    var res = \"\";\n    while(base>0){\n\
    \        res += (str.charAt(str.length-1) == \"0\") ? str.pop() : str.substr(0,\
    \ str.length-1);\n        base--;\n    }\n    return parseInt(res, base);\n}\n",
  "    return toBinary(x, base)\n}\n", "  var sign = (x < 0) ? -1 : 1;\n  if(base\
    \ === undefined) return sign * x;\n  if(base < 0 || base > 10) return sign;\n\
    \  return sign * ((Math.abs(x) % base) + base);\n}\n", "    var res = \"\";\n\
    \    var a = 1;\n    var b = 0;\n    var sign = 0;\n\n    if(!base || base < 2\
    \ || base > 36 || Math.floor(base) != base || base < 1)\n        throw \"Base\
    \ must be between 2 and 36\";\n    else if(base == 2){\n        if(x !== parseInt(x))\n\
    \            throw \"Input value must be an integer\";\n        base = 10;\n \
    \       sign = 1;\n    }\n    else if(base == 36)\n        base = 10;\n\n    //\
    \ If x is an integer, use the integer value as numerator.\n    if(Math.floor(x)\
    \ === x)\n        b = x;\n    else\n        a = Math.floor(x / base);\n\n    //\
    \ The loop below is a simple way to perform mod operation when b > 0\n    // and\
    \ emulate the result when b = 0 or b = 1\n    while(b){\n        res = base_conversion(b,\
    \ b, base) + res;\n        b = Math.floor(b / base);\n    }\n    if(sign)\n  \
    \      res = sign + res;\n\n    return base_conversion(a, a, base) + res;\n}\n",
  "\tvar s = \"\" + x;\n\twhile (s.length < base){\n\t\ts = \"0\" + s;\n\t}\n\treturn\
    \ s;\n}\n", "    var res = '';\n    var div = Math.pow(base, Math.floor(Math.log(x)\
    \ / Math.log(base)));\n    res += ((x /= div) > 1) ? toBase(div, base) : toBase(div,\
    \ 10); // div < 10 is more common, when div < 2 then 10\n    return res;\n}\n",
  "    var s = x.toString(base);\n    return s.length < base ? (x + \"0\") : x;\n\
    }\n", "    var str = x.toString();\n    var res = '';\n    while(str.length){\n\
    \        var n = parseInt(str[0], base);\n        str = str.substring(1, str.length);\n\
    \        if(str.length){\n            res = zero_pad(n) + res;\n        }\n  \
    \  }\n    return res;\n}", "    var sign = 1; //Default sign of output number\
    \ in base\n    var basepart = base; //Store input number into base\n    if (x\
    \ instanceof BigNumber){\n        //Change base if it's a BigNumber\n        basepart\
    \ = x.toBase(base);\n    } else if (typeof x === 'string'){\n        //Change\
    \ base if it's a string\n        if (base.match(/^\\d+$/)){ //Check if base is\
    \ a decimal\n            basepart = parseInt(base, 10);\n        } else if (base.match(/^[A-Za-z]+$/)){\
    \ //Check if base is a hex number\n            basepart = base.toLowerCase();\n\
    \        } else {\n            return false; //If base is neither decimal or hexadecimal\n\
    \        }\n    } else {\n        return false; //If x isn't a string or BigNumber\n\
    \    }\n    \n    basepart = String(basepart); //Cast base to string\n    \n \
    \   //Check to see if base is valid and in range\n    if (basepart.match(/^[0-9]+$/))\
    \ //If base 10 number\n        base = parseInt(basepart, 10);\n    else\n    \
    \    return false; //If base is something else\n    \n    if (base < 2 || base\
    \ > 36)\n        return false; //If base is out of range\n    \n    //Is the number\
    \ negative?\n    if (x.s < 0 || x.gt(TWO_PWR_24) && x.lt(ONE_PWR_24))\n      \
    \  sign = -1; //If so, sign must be negative\n    \n    if (sign == -1){\n   \
    \     var result = x.div(base); //Make it a true division\n\n        return sign\
    \ * result; //If sign was negative, change to multiplication\n    } //Result is\
    \ positive. Change sign of base\n\n    if (x.isZero()){\n        return x.s <\
    \ 0 ? base - TWO_PWR_24 : base; //If number is 0, return its representation\n\
    \    } //Result is positive. Change sign of base\n\n    base = base.reverse ?\
    \ basepart.split(\"\").reverse() : basepart.split(\"\"); //Convert array of symbols\
    \ to numbers in reverse order\n    var prod = new BigNumber(base[0]); //Initialize\
    \ prod to be first symbol of numbers in reverse order\n    \n    for (var i =\
    \ 1, j = 0; i <= base.length; i++){\n        while (j === 0){ //While digits are\
    \ being multiplied\n            prod = new BigNumber(prod.times(x)).toString(base);\
    \ //Update prod to new BigNumber with digits reversed\n            j = prod.length;\
    \ //Check what happened to the number\n        }\n        prod = ''+prod; //Reverse\
    \ back the digits\n        if (prod.length > j) //If the product was too big,\
    \ add zeros\n            prod = new Array(j + 1).join(prod);\n        if (prod.length\
    \ == base.length){ //If product is ", "    var r = \"\";\n    for(var i = 0; i\
    \ < x.toString().length; i++){\n        var num = (x.toString()).charAt(i);\n\
    \        if(num >= \"0\" && num < \"0\" + base){\n            r += num;\n    \
    \    }\n        else if(num >= \"0\" + base && num < \"10\" + base){\n       \
    \     r += (num - \"0\" + base);\n        }\n        else if(num >= \"10\" + base\
    \ && num < \"100\" + base){\n            r += (num - \"0\" + base) + \"0\";\n\
    \        }\n        else if(num >= \"100\" + base && num < \"1000\" + base){\n\
    \            r += (num - \"0\" + base) + \"00\";\n        }\n        else if(num\
    \ >= \"1000\" + base && num < \"10000\" + base){\n            r += (num - \"0\"\
    \ + base) + \"000\";\n        }\n        else if(num >= \"10000\" + base && num\
    \ < \"100000\" + base){\n            r += (num - \"0\" + base) + \"0000\";\n \
    \       }\n        else if(num >= \"100000\" + base && num < \"1000000\" + base){\n\
    \            r += (num - \"0\" + base) + \"00000\";\n        }\n        else if(num\
    \ >= \"1000000\" + base && num < \"10000000\" + base){\n            r += (num\
    \ - \"0\" + base) + \"000000\";\n        }\n        else if(num >= \"10000000\"\
    \ + base && num < \"100000000\" + base){\n            r += (num - \"0\" + base)\
    \ + \"0000000\";\n        }\n        else if(num >= \"100000000\" + base && num\
    \ < \"1000000000\" + base){\n            r += (num - \"0\" + base) + \"00000000\"\
    ;\n        }\n        else if(num >= \"1000000000\" + base && num < \"100000000000\"\
    \ + base){\n            r += (num - \"0\" + base) + \"000000000\";\n        }\n\
    \        else if(num >= \"100000000000\" + base && num < \"1000000000000\" + base){\n\
    \            r += (num - \"0\" + base) + \"0000000000\";\n        }\n        else\
    \ if(num >= \"1000000000000\" + base && num < \"10000000000000\" + base){\n  \
    \          r += (num - \"0\" + base) + \"00000000000\";\n        }\n        else\
    \ if(num >= \"10000000000000\" + base && num < \"100000000000000\" + base){\n\
    \            r += (num - \"0\" + base) + \"000000000000\";\n        }\n      \
    \  else if(num >= \"100000000000000\" + base && num < \"1000000000000000\" + base){\n\
    \            r += (num - \"0\" + base) + \"0000000000000\";\n        }\n     \
    \   else if(num >= \"10000000000", "    var res = x.toString(base);\n    return\
    \ res[0]>='0' && res[0]<='9' ? res+\"'\"+base : res; // return string representation\n\
    }\n", "    var result = \"\";\n    var remainder = 0;\n    while (x != 0) {\n\
    \        remainder = x % base;\n        result = (base * remainder) + result;\n\
    \        x = Math.floor(x/base);\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nI like your use of % to find the remainder and Math.floor()\
    \ to round down.\n<|/ c |>\n<| c |>\nThis is a great answer. I'm a little confused\
    \ by the `base` parameter, which appears to be an offset and not a base. Should\
    \ it be `10` instead of `8`? But then why is `2` being represented with two characters,\
    \ `10` and `10`?\n<|/ c |>\n<| c |>\nThis answer is missing its educational explanation.\n\
    <|/ c |>\n<| a dscore=4 tags=javascript |>\nThis works well in all browsers, and\
    \ is much faster than using parseInt or any other method of parsing strings. \n\
    The trick is to first convert your decimal number to binary. Divide the result\
    \ by 2 to the power of your base, then add '0' to left side and repeat the process\
    \ to get your binary number in reverse order. \nFor example, convert 8 to binary\
    \ is 0100 then divide by 2 to the power of 3 is 100. Add '0' to left side is 0100.\
    \ Repeat for the left most position of binary and you get 100. \nNow you know\
    \ that if your number has more digits than your base, add extra zeroes to your\
    \ number. \nFor example, if your number has 8 digits and base is 3, add '0' to\
    \ the left side is 0110. Repeat for the left most position of binary and you get\
    \ 1110. \nThe reverse of the binary number is\n<code>", "  var base = base; //The\
    \ base number is changed.\n  if(x > 0 && x < 10){\n    return change_base(x *\
    \ base, base);\n  }\n  var res = '', div = 1;\n  while(div <= x){\n    if(x >\
    \ 0 && x / div < base){\n      div *= base;\n    } else {\n      res += div;\n\
    \    }\n  }\n  return res;\n}\n", "    var base_rev = base;\n    var base_rev_int\
    \ = base_rev - 1;\n    if (base_rev_int < 0) {\n        base_rev_int = -base_rev_int;\n\
    \    }\n    var num_rev = \"\";\n    while (x >= base_rev_int) {\n        num_rev\
    \ += base_rev;\n        x -= base_rev_int;\n        base_rev--;\n        base_rev_int--;\n\
    \    }\n    while (base_rev_int >= 10) {\n        num_rev += base_rev_int;\n \
    \       base_rev_int -= 10;\n    }\n    if (base_rev > 0) {\n        num_rev +=\
    \ base_rev;\n    }\n    return num_rev;\n}\n", "\tlet n = x.toString(base).split(\"\
    \");\n\tfor(let i = 1; i < n.length; i++){\n\t\tn[i] = n[i] + n[i - 1];\n\t}\n\
    \treturn n.join(\"\");\n}\n", "  var r = \"\";\n  var tmp = x;\n  while (tmp >\
    \ 0) {\n    r = base_table[base].charAt(tmp % base_table[base].length);\n    tmp\
    \ = Math.floor(tmp/base_table[base]);\n  }\n  return r;\n}\n\n<|/ file ext=.js\
    \ filename=Base64.js |>\nvar base_table = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\
    ;\n", "  var num = new Number(x);\n  var r = \"\";\n  var negative = 0;\n  if\
    \ (num < 0) {\n    num = -num;\n    negative = 1;\n  }\n  while (num > 0){\n \
    \   r = num % base;\n    num = Math.floor(num/base);\n  }\n  if(negative){\n \
    \   r = \"-\"+r;\n  }\n  return r;\n}", "    var y = x;\n    while (y < 10){\n\
    \        y += base;\n    }\n    return y;\n}\n", "    var digits = x.toString(base);\n\
    \    return Number(digits).toString(base);\n}\n", "    var xs = x.toString(base);\n\
    \    var ls = xs.length - 1;\n    if (ls < 0) ls += base;\n    if (ls % base ===\
    \ 0) return xs;\n    var s = '';\n    var n = 0, digit;\n    while( n < ls ){\n\
    \        digit = parseInt(xs.charAt(n), base);\n        s += digit + (n < xs.length\
    \ ? '' : '');\n        n++;\n    }\n    return s;\n}\n", "\tvar r = \"\";\n\t\
    while (x >= base){\n\t\tr += String.fromCharCode(x % base);\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\tr += String.fromCharCode(x);\n\treturn r;\n}\n", "\tvar m =\
    \ Math.pow(base,Math.floor(Math.log(x) / Math.log(base)));\n\treturn (x / m).toFixed(base);\n\
    }\n", "\tvar result = \"\";\n\twhile(x != 0) {\n\t\tvar n = Math.floor(x / base);\n\
    \t\tresult += x % base;\n\t\tx = n;\n\t}\n\treturn result;\n}\n", "\tvar num =\
    \ Math.abs(x);\n\tvar numbase = Math.abs(base);\n\tvar result = \"\";\n\tvar decimal\
    \ = num % numbase;\n\twhile(decimal > numbase){\n\t\tdecimal -= numbase;\n\t\t\
    result += \"0\";\n\t}\n\tresult += decimal.toString(base);\n\treturn result;\n\
    }\n", "\tif (x < 10) return parseInt(x + base);\n\telse return change_base(parseInt(x,\
    \ base) - base, base);\n}\n\n", "\tlet num = new BigNumber(\"0\");\n\tfor(let\
    \ i = 0; i < base; i++){\n\t\tnum = num.times(x);\n\t}\n\tx = num;\n\tlet newBase\
    \ = base.charCodeAt(0);\n\tlet result = x.toJSON().toString(newBase);\n\tlet base\
    \ = BigNumber.base(newBase);\n\twhile(base.toString().indexOf(\"0\") !== 0){\n\
    \t\tresult = result.replace(\".\", \"\");\n\t\tbase = base.dividedBy(10).floor();\n\
    \t}\n\treturn result;\n}\n", "\tvar r = \"\";\n\tvar negative = 0;\n\tvar i;\n\
    \tvar alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tvar alphabetLen\
    \ = alphabet.length;\n\n\tfor(i = 0; i < base; i++){\n\t\tnegative = negative\
    \ * -1 ;\n\t\ti = (i + negative) % alphabetLen;\n\t\tr += alphabet[i];\n\t}\n\n\
    \tif(base < 0){\n\t\ti = Math.abs(base);\n\t\tr += alphabet[i];\n\t\tfor(i = alphabetLen\
    \ - Math.abs(base); i >= 0; i--){\n\t\t\tr += alphabet[alphabetLen - 1 - i];\n\
    \t\t}\n\t}\n\n\treturn r;\n}\n", "\tvar result = String(x);\n\tvar digits = String(result).split(\"\
    \").reverse();\n\twhile (digits.length < base){\n\t\tdigits.unshift(\"0\");\n\t\
    }\n\tdigits.splice(base, 0, \"\");\n\treturn digits.join(\"\");\n}\n", "    if(base\
    \ < 1 || base > 10){\n        throw new Error('Base must be between 1 and 10');\n\
    \    }\n    var out = [];\n    var digit;\n    var toBase = Math.floor(x / base);\n\
    \    for (var i = 0; i < toBase; i++){\n        digit = x % base;\n        out.unshift(digit);\n\
    \        x = x / base;\n    }\n    return out.join(\"\");\n}\n", "\tvar bases\
    \ = {\n\t\t2 : '01',\n\t\t3 : '011',\n\t\t4 : '0111',\n\t\t5 : '101',\n\t\t6 :\
    \ '1101',\n\t\t7 : '111r'\n\t};\n\tvar i = 1;\n\tvar str = '';\n\tvar carry =\
    \ 0;\n\twhile(i <= Math.ceil(x/base)){\n\t\tvar s = x - i * base;\n\t\tvar z =\
    \ s % base;\n\t\tif(z >= base){\n\t\t\tz -= base;\n\t\t}\n\t\tstr = s + z;\n\t\
    \ti++;\n\t\tcarry = (i < Math.ceil(x/base)) ? 1 : 0;\n\t}\n\tif(carry){\n\t\t\
    str += '1';\n\t}\n\treturn str;\n}\n", "  var baseNum = base;\n  var numString\
    \ = String(x);\n  var stringLength = numString.length;\n  var result = '';\n \
    \ var pow = stringLength;\n  \n  while (pow){\n    if (baseNum < Math.pow(base,pow)){\n\
    \      result = numString.slice(0, baseNum - Math.pow(base,pow)) + result;\n \
    \     pow--;\n    }else{\n      result = numString.slice(0, pow) + result;\n \
    \     pow--;\n    }\n  }\n  return result;\n}\n", "\tx = Math.abs(x)\n\tif (base\
    \ < 2 || base > 10) return x\n\tbase = Math.abs(base);\n\treturn Math.floor(x\
    \ / base) * base;\n}\n", "  if(base<0 || base>10){\n    console.log(\"Base must\
    \ be between 0 and 10.\");\n  }\n  if(x<0){\n    return -1;\n  }\n  x = x * Math.pow(base,(x.length-1))\n\
    \  while(x < 0){\n    x = x * Math.pow(base,(x.length-1))\n  }\n  var digits =\
    \ x.toString().split(\"\"),\n  base = base;\n  for(var i=0;i< digits.length;i++){\n\
    \    if(i<base){\n      digits[i]=\"0\";\n    }\n    else if(i>=base){\n     \
    \ digits[i]=\"1\";\n    }\n  }\n  x = digits.join(\"\");\n  return x;\n}\n", " \
    \   var xdigits,\n        base, digits, i, j, k, m, len, o, zs;\n\n    if (!isInt(x))\
    \ {\n        throw new TypeError('invalid x');\n    }\n    if (base < 2 || base\
    \ > 36) {\n        throw new TypeError('invalid base');\n    }\n\n    xdigits\
    \ = x.toString().match(/^-?\\d+$/);\n    if (!xdigits) {\n        throw new TypeError('invalid\
    \ x');\n    }\n    \n    base = baseToInt(base);\n    \n    if (base < 36) {\n\
    \        digits = xdigits[0];\n        m = 0;\n        for (i = digits.length\
    \ - 1; i >= 0; i--) {\n            j = digits[i].length;\n            m = b256[base]\
    \ + digits[i].slice(0, j) + m;\n        }\n        z = digits.pop();\n       \
    \ \n        for (i = digits.length - 1; i > 0; i--) {\n            k = digits[i].length;\n\
    \            zs = b256[base];\n            for (j = k - 1; j >= 0; j--) {\n  \
    \              zs = zs * base + digits[i].slice(0, j) + b256[base];\n        \
    \    }\n            b256[base] = zs;\n        }\n        b256[base] = z;\n   \
    \     \n    }\n    else {\n        digits = xdigits;\n        m = 0;\n       \
    \ for (i = digits.length - 1; i >= 0; i--) {\n            k = digits[i].length;\n\
    \            m = b256[base] + digits[i].slice(0, k) + m;\n        }\n        z\
    \ = digits.pop();\n        \n        for (i = digits.length - 1; i > 0; i--) {\n\
    \            k = digits[i].length;\n            zs = b256[base];\n           \
    \ for (j = k - 1; j >= 0; j--) {\n                zs = zs * base + digits[i].slice(0,\
    \ j);\n            }\n            b256[base] = zs;\n        }\n        b256[base]\
    \ = z;\n    }\n        \n    return new BigInteger(b, base === 36);\n}\n", " \
    \   var res = x;\n    \n    while (res){\n        res = res * base;\n        base--;\n\
    \    }\n    \n    return res;\n}\n", "    var result = ''\n    while(x != 0){\n\
    \        result = base_digits[base] + result;\n        x /= base;\n    }\n   \
    \ return result;\n}\n", "    let n = new BigNumber(x);\n    let new_base = new\
    \ BigNumber(base);\n    let r = n.div(new_base);\n    r.comparedTo(new_base) <\
    \ 0 ? r.minusEquals(new_base) : r;\n    return r.toString(new_base);\n}\n</cell>\n\
    <text>\nProblem 12: Power of a BigNumber\nCalculate the power of a big number\
    \ to a given exponent.\n\nExamples:\npower(4, 10) = 1024\npower(2, 5) = 1230\n\
    power(3, 2) = 27\n\n\n</text>\n<cell>", "    let y = x;\n    while (y >= base)\
    \ {\n        y /= base;\n    }\n    return y;\n}\n", "  if(base > 0 && base <\
    \ 10) return to_base(x, base);\n  if(base == 0) return '0';\n  if(base < 0) return\
    \ '-' + change_base(-x, base);\n  return NaN;\n}\n", "  var new_base = base;\n\
    \  while (new_base > 0 && x > 0){\n    new_base--;\n    x = x / base;\n  }\n \
    \ while (new_base < 0 && x < 0){\n    new_base++;\n    x = x * base;\n  }\n  return\
    \ new_base;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis answer is incorrect\
    \ - it's possible that x will be negative before the first while loop, meaning\
    \ `new_base` will be negative. This doesn't work because you use the negative\
    \ value of `x` to determine the sign of x.\n<|/ c |>\n<| c |>\nI thought that\
    \ x would be positive. I am sorry, I will fix the answer when I get a chance.\n\
    <|/ c |>\n<| c |>\nYour answer is correct, the `x` value is positive in the first\
    \ while loop but negative in the second while loop when it's passed through the\
    \ base conversion. Your code will fail on a negative number (e.g. \"-11\"). However\
    \ the solution would be to just change `>=` to `>`.\n<|/ c |>\n<| c |>\nAh, now\
    \ I understand. The code had an off-by-one error.\n<|/ c |>\n<| c |>\nYour code\
    \ does not work in python 3. Changing `>=` to `>` only makes it work for negative\
    \ numbers. Try `change_base(-2, 8)` vs `change_base(-1, 8)`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef change_base(number, base):\n    if number < 0:\n        return\
    \ -change_base(-number, base)\n    elif number == 0:\n        return ''\n    digits\
    \ = []\n    while number != 0:\n        digits.append(number % base)\n       \
    \ number = number // base\n    digits.reverse()\n    \n    digits_str = ''\n \
    \   while len(digits) > 1:\n        digits_str += digits.pop(0) + ''\n    \n \
    \   return digits_str\n</code>\n<|/ a tags=python |>\n<| a dscore=0 tags=python\
    \ |>\n<code>\ndef change_base(number,base):\n    if number<0 or base>0:\n    \
    \    return \"Number must be positive and base is greater than 0\"\n    digits=[]\n\
    \    while  number:\n        digits.append(number%base)\n        number=number//base\n\
    \    digits.reverse()\n    digits_str=''\n    \n    while len(digits)>1:\n   \
    \     digits_str+=digits.pop(0)+''\n        \n    return digits_str\n</code>\n\
    <|/ a |>\n<| a tags=python |>\n<code>\ndef change_base(number, base):\n    \n\
    \    if (number < 0 or base < 0):\n        return \"Number must be positive ",
  "    var digits = \"\" + x;\n    if(base < 0 || base > 10){\n        console.error('Invalid\
    \ base', base);\n        return \"\";\n    }\n    var num_digits = digits.length;\n\
    \    var digits_index = 0;\n    var base_digits = 0;\n    while(base_digits <\
    \ base && digits_index < num_digits){\n        if(digits[digits_index] == base){\n\
    \            digits_index++;\n            base_digits++;\n        }else{\n   \
    \         digits_index++;\n        }\n    }\n    var base_string = \"\";\n   \
    \ while(base_digits > 0){\n        base_string += base.charAt(base_digits--);\n\
    \    }\n    return base_string + digits;\n}\n", "  var p = Math.pow(base, x);\n\
    \  return p == Math.round(p / base) ? x + '' : Math.round(p) + '' + base;\n}\n",
  "\tlet str = \"\";\n\tif(x == 0) return x;\n\tconst bases = {2:\"000\",3:\"001\"\
    ,4:\"010\",5:\"011\",6:\"100\",7:\"101\",8:\"110\",9:\"111\"};\n\tfor(let i=x;\
    \ i >= base; i/=base)\n\t\tstr += bases[base];\n\tstr += i;\n\treturn str;\n}\n",
  "  var out = \"\";\n  var sign = \"\"; // \"+\" or \"-\"\n  var abs = Math.abs(x).toString(base);\n\
    \  var a = \"\";\n  var b = 0;\n  while(a.length < base){\n    a = a + abs.charAt(b);\n\
    \    b++;\n  }\n  a = a.split('');\n  var r = a.length;\n  while(r){\n    if(b){\n\
    \      out = \"\" + sign + out+a.splice(0,r).join('');\n      r = 0;\n    }\n\
    \    r--;\n    sign = (r==0 && sign==\"-\") ? \"-\" : \"\";\n  }\n  return out\
    \ + abs.substr(0, base);\n}\n", "    var res = \"\";\n    while(base>0){\n   \
    \     if(x%base == 0) res += base;\n        x /= base;\n    }\n    return res\
    \ + x;\n}\n", "\tif(x < 10) return digit(x, base);\n\tvar num = to_string(x);\n\
    \tvar basestr = to_string(base);\n\tvar re = /^(\\d*)(\\d*)$/;\n\tvar matches\
    \ = re.exec(num);\n\tvar intPart = matches[1];\n\tvar decPart = matches[2];\n\t\
    var intLength = intPart.length;\n\tvar decLength = decPart.length;\n\tif(intLength\
    \ < decLength){\n\t\tintPart = \"0\" + intPart;\n\t\tdecPart = \"\" + decPart;\n\
    \t}\n\tfor(var i = 0; i < decLength; i++){\n\t\tvar m = intLength - i - 1;\n\t\
    \tintPart = \"0\" + intPart.substring(0, m);\n\t\tif(decPart.charAt(i) == '0'){\n\
    \t\t\tintPart = intPart + \"0\";\n\t\t}\n\t\tdecPart = decPart.substring(0,m)\
    \ + decPart.charAt(i);\n\t}\n\treturn intPart + decPart;\n}", "\tvar y = \"\"\
    ;\n\twhile(x >= base){\n\t\ty = base.toString() + y;\n\t\tx = x/base;\n\t}\n\t\
    return x + y;\n}\n", "  x = x.toString(base);\n  var y = x.split('.');\n  return\
    \ y[y.length - 1]+'';\n}\n\nvar base_table = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n\
    \  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n\
    \  'a': 10,\n  'b': 11,\n  'c': 12,\n  'd': 13,\n  'e': 14,\n  'f': 15,\n  'g':\
    \ 16,\n  'h': 17,\n  'i': 18,\n  'j': 19,\n  'k': 20,\n  'l': 21,\n  'm': 22,\n\
    \  'n': 23,\n  'o': 24,\n  'p': 25,\n  'q': 26,\n  'r': 27,\n  's': 28,\n  't':\
    \ 29,\n  'u': 30,\n  'v': 31,\n  'w': 32,\n  'x': 33,\n  'y': 34,\n  'z': 35,\n\
    \  'A': 36,\n  'B': 37,\n  'C': 38,\n  'D': 39,\n  'E': 40,\n  'F': 41,\n  'G':\
    \ 42,\n  'H': 43,\n  'I': 44,\n  'J': 45,\n  'K': 46,\n  'L': 47,\n  'M': 48,\n\
    \  'N': 49,\n  'O': 50,\n  'P': 51,\n  'Q': 52,\n  'R': 53,\n  'S': 54,\n  'T':\
    \ 55,\n  'U': 56,\n  'V': 57,\n  'W': 58,\n  'X': 59,\n  'Y': 60,\n  'Z': 61,\n\
    \  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n\
    \  '7': 7,\n  '8': 8,\n  '9': 9,\n  'a': 10,\n  'b': 11,\n  'c': 12,\n  'd': 13,\n\
    \  'e': 14,\n  'f': 15,\n  'g': 16,\n  'h': 17,\n  'i': 18,\n  'j': 19,\n  'k':\
    \ 20,\n  'l': 21,\n  'm': 22,\n  'n': 23,\n  'o': 24,\n  'p': 25,\n  'q': 26,\n\
    \  'r': 27,\n  's': 28,\n  't': 29,\n  'u': 30,\n  'v': 31,\n  'w': 32,\n  'x':\
    \ 33,\n  '", "\tlet numbers = x.toString(base);\n\tlet result = \"\";\n\tfor(let\
    \ i = 0; i < numbers.length; i++){\n\t\tresult += numbers.charAt(i);\n\t}\n\t\
    return result;\n}\n", "\tvar x = x.toUpperCase();\n\tbase = base || 10;\n\tvar\
    \ base = base.toString().toLowerCase();\n\t\n\tvar m = base.match(/(.)(\\d)/);\n\
    \tbase = (m[1]+m[2])*1;\n\t\n\tif(base<10){\n\t\tbase = '0' + base;\n\t}\n\t\n\
    \tif(base>36){\n\t\tbase = 36;\n\t}\n\t\n\twhile(base > x){\n\t\tbase /= 10;\n\
    \t}\n\t\n\t\n\treturn x.toString().replace(/(\\d)(?=(?:\\d{3})+$)/g, \"$1\" +\
    \ base);\n}\n", "    var r = \"\";\n    var s = x.toString();\n    var m = s.length;\n\
    \    var sign = 1;\n\n    if(s.indexOf(\"e\") < 0){\n        var pos = s.indexOf(\"\
    .\");\n        if (pos > 0) {\n            sign = s.substring(pos - 1, pos);\n\
    \            s = s.substring(0, pos - 1);\n        }\n    }\n    \n    var m =\
    \ ((base || 10) - s.length) + 1;\n\n    while (m >= base){\n        m--;\n   \
    \     r += s;\n    }\n\n    for (var i = s.length; i--;){\n        var c = s.charAt(i);\n\
    \        if(c !== \".\" && c !== \"-\"){\n            while(c >= \"0\"){\n   \
    \             r += c;\n                c = s.charAt(i);\n                i++;\n\
    \            }\n            if(c == \"-\"){\n                r += c;\n       \
    \         c = s.charAt(i);\n                i++;\n            }\n            while(c\
    \ >= \"0\" && c <= \"9\"){\n                r += c;\n                c = s.charAt(i);\n\
    \                i++;\n            }\n        }\n    }\n    r += (sign * parseInt(r,10));\n\
    \    return r;\n}\n\n", "\tif(base < 2) return x;\n\tx = x.toString(base);\n\t\
    var l = x.length;\n\tvar o = l;\n\twhile(l){\n\t\tx = x.replace(/\\d/g, function(m){\
    \ return +m; });\n\t\tl--;\n\t}\n\twhile(o.length % base > 0){\n\t\to = '0' +\
    \ o;\n\t}\n\treturn o.substr(0, base);\n}\n", "    if (base == 0) {\n        return\
    \ x;\n    }\n\n    var baseNum = base;\n    var numString = \"\";\n    var num\
    \ = 0;\n\n    while ( numString.length < baseNum ) {\n        num = Math.floor(Math.random()\
    \ * base);\n        numString = baseNum.toString() + num.toString();\n    }\n\n\
    \    return numString;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nGood solution!\
    \  I wonder if it would be faster to do it the other way round, first convert\
    \ the number to the base and then back into the requested base.  E.g., first convert\
    \ `num` to base `base`.  Then convert that number back to base `base`.  Maybe\
    \ the conversion to base `base` could be done more quickly than to base `base`?\n\
    <|/ c |>\n<| c |>\nThank you for posting your solution. I have a question about\
    \ the use of the term 'base-number' in the first line of the function. Does this\
    \ mean that the base is actually the numerical value of the number? Can anyone\
    \ explain please?\n<|/ c |>\n<| c |>\nyes, the base is the numerical value of\
    \ the number and the other one is just arbitrary (I guess you know about that\
    \ - and I didn't need to explain it). But I wanted to point out, that your function\
    \ converts the number to another number, whereas the original solution converts\
    \ the number to the given base.\n<|/ c |>\n<| c |>\nThis is brilliant. I've been\
    \ looking for this for a long time.\n<|/ c |>\n<| c |>\nI guess it can be done\
    \ faster by converting the number to a string and then reversing the string. This\
    \ should be faster since the string is bigger, and therefore bigger to hold the\
    \ resulting number. I'm doing that now, and will post the performance test results\
    \ later.\n<|/ c |>\n<| a tags=random,javascript,numbers |>\nHere is a solution\
    \ that works with positive numbers, zeroes, and negative numbers.  This solution\
    \ relies on the fact that if n is even, its digits are in the range [0,n-1], and\
    \ if n is odd, its digits are in the range [n/2, n-1], which is easy to work out.\
    \  The base is chosen randomly from these two sets:\n<code>", "\tif(x < 10) return\
    \ pad(x, base);\n\t\n\tvar d = \"\";\n\tdo {\n\t\tvar a = Math.floor(x / base);\n\
    \t\tx = x % base;\n\t\td = base * d + a;\n\t} while (x !== 0);\n\t\n\treturn d;\n\
    }\n", "\tvar n = new BigInteger(x);\n\tif(n.compareTo('0') === 0) return x;\n\t\
    base = parseInt (base);\n\tif(base == 0) return x;\n\tswitch(base){\n\t\tcase\
    \ 2:\n\t\t\treturn n+'0';\n\t\tcase 8:\n\t\t\treturn String(n);\n\t\tcase 16:\n\
    \t\t\tlog2x = log2(n);\n\t\t\treturn '0x' + lpad(log2x, 3, '0') + lpad(n.mod(new\
    \ BigInteger('4294967296')), 5, '0');\n\t\tdefault:\n\t\t\tlogBase = 2;\n\t\t\t\
    if(base < 2 || base > 36){\n\t\t\t\tmsg = 'Only bases 2 to 36 are supported in\
    \ this function.';\n\t\t\t\tthrow Error(msg);\n\t\t\t}\n\t\t\twhile(logBase <\
    \ base){\n\t\t\t\tn /= base;\n\t\t\t\tlogBase *= base;\n\t\t\t}\n\t\t\tif(n <\
    \ 2) return String(x);\n\t\t\tq = n-1;\n\t\t\tif((base-2^(q-1)).toString(2).length\
    \ < (base-2^(q)).toString(2).length){\n\t\t\t\tmsg = 'The number \"' + n + '\"\
    \ is too large for base ' + base + '.';\n\t\t\t\tthrow Error(msg);\n\t\t\t}\n\t\
    \t\tz = n-(base-2^(q-1));\n\t\t\tt = z.toString(2);\n\t\t\tz = '';\n\t\t\tfor(i\
    \ = t.length-1; i>=0; i--){\n\t\t\t\tif(i == 0){\n\t\t\t\t\tz = z + t.substring(i,\
    \ 1);\n\t\t\t\t}else{\n\t\t\t\t\tz = z + '0' + t.charAt(i);\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\treturn new BigInteger(z, base-2^(q));\n\t}\n}\n", "  if(!base) base =\
    \ 10;\n  var result = [];\n  while(x){\n    result.unshift(x % base);\n    x =\
    \ parseInt(x/base);\n  }\n  return result;\n}", "    var num = Math.pow(base,\
    \ x);\n    return Math.abs(num-Math.floor(num))\n}", "    // Throw error if number\
    \ is not an int or long.\n    if (typeof x !== 'number' || typeof base !== 'number')\n\
    \        throw new Error('change_base requires two number arguments');\n    \n\
    \    // Throw error if base is neither 1 or 10.\n    if (base < 1 || base > 10)\n\
    \        throw new Error('Base must be between 1 and 10');\n\n    // Change x\
    \ to the new base.\n    var res = parseInt(x, base);\n    // Throw error if number\
    \ is out of new base.\n    if (isNaN(res))\n        throw new Error('The number\
    \ must be in the new base.');\n    \n    // Return the new number in string format.\n\
    \    return res.toString(base);\n}\n", "    if(base<2) return x;\n    base = base%2?\
    \ base+1 : 2;\n    var a = Math.pow(base,x.length);\n    var b = x.split(\"\"\
    ).reverse().join(\"\");\n    return b.split(a).join(\"\");\n}\n</code>\n<|/ a\
    \ tags=string,arrays,javascript dscore=2 |>\n<| a tags=string,arrays,javascript\
    \ |>\nYou can use Array.prototype.reduce and String.prototype.padStart:\n\n<code>",
  "    if (x < base) return \"0\".repeat(Math.max(base-x+1, 1)) + x.toString(base);\n\
    \    x = (x - base)/base;\n    return x.toString(base);\n}\n", "    var r = \"\
    \" + x;\n    while(r.length < base){\n        r = r + base_digits[base_digits.length-1];\n\
    \    }\n    var rest = r.substr((r.length-(base+1)));\n    var div = parseInt(rest,base);\n\
    \    return div.toString();\n}\n", "  var result = '';\n  var negative = false;\n\
    \  if(x < 0){\n    negative = true;\n    x = -x;\n  }\n\n  while(x>base){\n  \
    \  var remainder = x % base;\n    result = parseInt(result,base);\n    result\
    \ = remainder + result;\n    x = Math.floor(x/base);\n  }\n\n  if(negative) result\
    \ = '-' + result;\n  return result;\n}\n", "\tvar out = '';\n\tvar negative =\
    \ x < 0;\n\twhile (x > base){\n\t\tout = base_num[base] + out;\n\t\tx /= base;\n\
    \t}\n\treturn negative + out;\n}\n", "  var r = \"\";\n  var str = \"\";\n  var\
    \ carry = 1;\n  var i, num;\n  for(i = 0; i < base; i++){\n    num = parseInt(x%base);\n\
    \    if(num < 0){\n      num += base;\n    }\n    x = parseInt(num/base);\n  \
    \  while(x > 0){\n      str += String.fromCharCode(x.toString(base).charAt(0));\n\
    \      x = parseInt(x/base);\n    }\n    if(num == 1){\n      carry = 1;\n   \
    \ }\n  }\n  if(carry){\n    str += String.fromCharCode(x.toString(base).charAt(0));\n\
    \  }\n  return r;\n}\n", "\tvar b = 10;\n\tswitch(base){\n\t\tcase \"2\":\n\t\t\
    \tb = 2;\n\t\t\tbreak;\n\t\tcase \"3\":\n\t\t\tb = 3;\n\t\t\tbreak;\n\t\tcase\
    \ \"4\":\n\t\t\tb = 4;\n\t\t\tbreak;\n\t\tcase \"5\":\n\t\t\tb = 5;\n\t\t\tbreak;\n\
    \t\tcase \"6\":\n\t\t\tb = 6;\n\t\t\tbreak;\n\t\tcase \"7\":\n\t\t\tb = 7;\n\t\
    \t\tbreak;\n\t\tcase \"8\":\n\t\t\tb = 8;\n\t\t\tbreak;\n\t\tcase \"9\":\n\t\t\
    \tb = 9;\n\t\t\tbreak;\n\t\tcase \"10\":\n\t\t\tb = 10;\n\t\t\tbreak;\n\t\tcase\
    \ \"11\":\n\t\t\tb = 11;\n\t\t\tbreak;\n\t\tcase \"12\":\n\t\t\tb = 12;\n\t\t\t\
    break;\n\t\tcase \"13\":\n\t\t\tb = 13;\n\t\t\tbreak;\n\t\tcase \"14\":\n\t\t\t\
    b = 14;\n\t\t\tbreak;\n\t\tcase \"15\":\n\t\t\tb = 15;\n\t\t\tbreak;\n\t\tcase\
    \ \"16\":\n\t\t\tb = 16;\n\t\t\tbreak;\n\t\tcase \"17\":\n\t\t\tb = 17;\n\t\t\t\
    break;\n\t\tcase \"18\":\n\t\t\tb = 18;\n\t\t\tbreak;\n\t\tcase \"19\":\n\t\t\t\
    b = 19;\n\t\t\tbreak;\n\t\tcase \"20\":\n\t\t\tb = 20;\n\t\t\tbreak;\n\t\tcase\
    \ \"21\":\n\t\t\tb = 21;\n\t\t\tbreak;\n\t\tcase \"22\":\n\t\t\tb = 22;\n\t\t\t\
    break;\n\t\tcase \"23\":\n\t\t\tb = 23;\n\t\t\tbreak;\n\t\tcase \"24\":\n\t\t\t\
    b = 24;\n\t\t\tbreak;\n\t\tcase \"25\":\n\t\t\tb = 25;\n\t\t\tbreak;\n\t\tcase\
    \ \"26\":\n\t\t\tb = 26;\n\t\t\tbreak;\n\t\tcase \"27\":\n\t\t\tb = 27;\n\t\t\t\
    break;\n\t\tcase \"28\":\n\t\t\tb = 28;\n\t\t\tbreak;\n\t\tcase \"29\":\n\t\t\t\
    b = 29;\n\t\t\tbreak;\n\t\tcase \"30\":\n\t\t\tb = 30;\n\t\t\tbreak;\n\t\tcase\
    \ \"31\":\n\t\t\tb = 31;\n\t\t\tbreak;\n\t\tcase \"32\":\n\t\t\tb = 32;\n\t\t\t\
    break;\n\t\tcase \"33\":\n\t\t\tb = 33;\n\t\t\tbreak;\n\t\tcase \"34\":\n\t\t\t\
    b = 34;\n\t\t\tbreak;\n\t\tcase \"35\":\n\t\t\tb = 35;\n\t\t\tbreak;\n\t\tcase\
    \ \"36\":\n\t\t\tb = 36;\n\t\t\tbreak;\n\t\tcase \"37\":\n\t\t\tb = 37;\n\t\t\t\
    break;\n\t\tcase \"38\":\n\t\t\tb = 38;\n\t\t\tbreak;\n\t\tcase \"39\":\n\t\t\t\
    b = 39;\n\t\t\tbreak;\n\t\tcase \"40\":\n\t\t\tb = 40;\n\t\t\tbreak;\n\t\tcase\
    \ \"41\":\n\t\t\tb = 41;\n\t\t\t", "\tvar str = x.toString();\n\tvar l = str.length;\n\
    \tif (base > l){\n\t\treturn str;\n\t}\n\t\n\tif (base < 1 || isNaN(base) || !isFinite(base)){\n\
    \t\tthrow new TypeError('change_base: Base must be a finite number between 1 and\
    \ 36');\n\t}\n\t\n\tvar baseStr = base.toString().split('');\n\tvar baseArr =\
    \ [];\n\tvar factorArr = [];\n\tfor (var i = 0; i < baseStr.length; i++){\n\t\t\
    baseArr.push(baseStr[i]); //add each character\n\t}\n\t\n\tfor (var i = 0; i <\
    \ str.length; i++){\n\t\tfactorArr.push(parseInt(str[i].replace(/[^0-9]/g, ''),\
    \ 10));\n\t}\n\t\n\tvar res = 0;\n\tfor (var i = factorArr.length-1; i>=0; i--){\n\
    \t\tres = res * base + factorArr[i];\n\t}\n\t\n\treturn res.toString();\n}\n",
  "    if(x > base){\n        var tmp = base;\n        base = x;\n        x = tmp;\n\
    \    }\n    if(base > 10) return x;\n    \n    var num = String(x).split('.');\n\
    \    if(num[1].length > base){\n        num[1] = new Array(base).join(num[1]).substr(0,\
    \ base);\n    }\n    return num[0]+\".\"+num[1];\n}\n", "\tvar num = String(x);\n\
    \tif(!base){\n\t\treturn num;\n\t} else if(base < 10){\n\t\treturn num.split(\"\
    \").reverse().join(base);\n\t} else {\n\t\tvar rem = num.length % base;\n\t\t\
    var quotient = Math.floor(num.length / base);\n\t\tvar remainder = num.length\
    \ - rem * base;\n\t\treturn quotient + \"\" + change_base(remainder, base);\n\t\
    }\n}\n", "    var digits = [];\n    var j = 0;\n    while(j < base){\n       \
    \ digits[j] = x % base;\n        x = Math.floor(x / base);\n        j++;\n   \
    \ }\n    digits[digits.length] = x;\n    var res = \"\";\n    for(j = 0; j < digits.length;\
    \ j++)\n        res += digits[j];\n    return res;\n}", "\tvar result = '';\n\t\
    var i = Math.floor(x);\n\twhile(i > 0){\n\t\tresult += (i%base);\n\t\ti = Math.floor(i/base);\n\
    \t}\n\treturn result;\n}\n", "\tif (base > 21) return x.toString(base);\n\telse\
    \ if (base < 2) return x.toString(base).replace(/1/g, '0');\n\telse return x;\n\
    }\n\t", "    if(x <= 9){\n        return bin(x)\n    }\n    return change_base(x\
    \ / base, base) + change_repeat(x % base, base)\n}\n", "\tvar result = [];\n\t\
    var rem = x;\n\twhile (rem > 0){\n\t\tvar quot = rem%base;\n\t\tresult.unshift(String(quot));\n\
    \t\trem = Math.floor(quot/base);\n\t}\n\tif (rem) result.unshift(String(rem));\n\
    \treturn result.join('');\n}\n", "    var res = x;\n    for(let i = 1; i < base;\
    \ i++){\n        res  = change_digit(res, base);\n    }\n    return res;\n}\n",
  "  var ans = String(x);\n  if(base > 0 && base < ANS.length){\n    ans = ans.split(\"\
    \").map(function(i){\n      return Math.pow(base,i).toString(base);\n    }).join(\"\
    \");\n  }\n  return ans;\n}", "    var r = new String();\n    for(; base >= 0;\
    \ base--){\n        var y = Math.floor(x / base);\n        r = y + r;\n      \
    \  x = x - y * base;\n    }\n    return r;\n}\n", "  var r = \"\";\n  var digit;\n\
    \  for(x; x >= base; x /= base)\n    digit = x - base;\n  for(var i = digit; i\
    \ > 0; i /= base)\n    r += digit;\n  return r;\n}\n", "\tvar number = to_num(x);\n\
    \t\n\t// Check if base is valid number\n\tif(!isFinite(base) || base<0 || base\
    \ > 10){\n\t\tthrow new TypeError('Invalid base to change number in');\n\t}\n\t\
    \n\tswitch(base){\n\t\tcase 2:\n\t\t\tbase = 10;\n\t\t\tbreak;\n\t\tcase 8:\n\t\
    \t\tbase = 16;\n\t\t\tbreak;\n\t\tcase 16:\n\t\t\tbase = 2;\n\t\t\tbreak;\n\t\t\
    default:\n\t\t\tthrow new TypeError('Invalid base to change number in');\n\t}\n\
    \t\n\tvar n = Math.floor(number/base);\n\tnumber = number%base;\n\t\n\tvar out\
    \ = String(n);\n\t\n\twhile(n>0){\n\t\tn--;\n\t\tout = base+out;\n\t}\n\t\n\t\
    return out;\n}\n", "\tvar res = '';\n\twhile(x >= base){\n\t\tres =  parseInt(x\
    \ / base) + '';\n\t\tx = x % base;\n\t}\n\twhile(res.length < base){\n\t\tres\
    \ = res + '';\n\t}\n\treturn res;\n}\n</textarea>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\
    \n\t\t\t\t<div id=\"ac\">\n\t\t\t\t\t<a id=\"acAnchor\"></a>\n\t\t\t\t\t<p>\n\t\
    \t\t\t\t\t<strong>Active Code</strong>\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<small>\n\
    \t\t\t\t\t\t\tAn active code block shows the code in the editor\n\t\t\t\t\t\t\t\
    as it is right now.  When you click the\n\t\t\t\t\t\t\t\"Show Code\" button, it\
    \ will be replaced by the\n\t\t\t\t\t\t\tactual code, using the same formatting\
    \ and\n\t\t\t\t\t\t\twhitespace.\n\t\t\t\t\t\t</small>\n\t\t\t\t\t</p>\n\t\t\t\
    \t</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div id=\"api\">\n\t\t\t\t\t<a\
    \ id=\"apiAnchor\"></a>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>API Docs</strong>\n\
    \t\t\t\t\t\t<br>\n\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\tThese API docs are a lot\
    \ easier to read than\n\t\t\t\t\t\t\ttheir API docs in previous versions.  They\
    \ show you the\n\t\t\t\t\t\t\targuments and return type of each function and the\n\
    \t\t\t\t\t\t\tnumber of arguments it takes.\n\t\t\t\t\t\t</small>\n\t\t\t\t\t\
    </p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor\">Editor</a>\n\
    \t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.enable\"\
    >enable</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.setOption\"\
    >setOption</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"\
    #Editor.getOption\">getOption</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\
    \t\t\t\t<a href=\"#Editor.destroy\">destroy</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\
    \t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.focus\">focus</a>\n\t\t\t\t\t\t</li>\n\
    \t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.fold\">fold</a>\n\t\t\t\t\t\t\
    </li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.unfold\">unfold</a>\n\
    \t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.onFold\"\
    >onFold</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.foldAll\"\
    >foldAll</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.unfoldAll\"\
    >unfoldAll</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"\
    #Editor.stopFold\">stopFold</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\
    \t\t\t<a href=\"#Editor.eachLine\">eachLine</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\
    \t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.eachMark\">eachMark</a>\n\t\t\t\t\t\t\
    </li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.eachSelection\">eachSelection</a>\n\
    \t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.indent\"\
    >indent</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.unindent\"\
    >unindent</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"#Editor.block\"\
    >block</a>\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\tvar bidx = bases.indexOf(base);\n\
    \tif( bidx >= 0 ){\n\t\tvar digits = toBase(x, base);\n\t\tvar res = \"\";\n\t\
    \tfor(var i = 0; i < digits.length; i++){\n\t\t\tres = bases[bidx] + res;\n\t\t\
    }\n\t\treturn res;\n\t} else {\n\t\tthrow \"Invalid base\";\n\t}\n}\n", "    var\
    \ new_num = \"\"\n    while(x != 0){\n        x = x/base\n        new_num = new_num.concat((x\
    \ % base == 0) ? (base*base) : x.toFixed(base))\n    }\n    return new_num\n}\n",
  "\tvar r = x.toString(base);\n\tif(r.substring(0, 1) === '+'){\n\t\treturn r.substring(1);\n\
    \t} else {\n\t\treturn '' + r;\n\t}\n}\n", "    var bases = {\n        2:\"00\"\
    ,\n        8:\"000\",\n        16:\"0000\",\n        32:\"00000\"\n    };\n\n\
    \    var new_base  = bases[base];\n    var old_base = bases[Math.ceil(Math.log(x)\
    \ / Math.log(base))];\n\n    return new_base + old_base.substr(old_base.length\
    \ - new_base.length) + x;\n}\n", "\tvar n = base_nums.length;\n\twhile(base_nums.length\
    \ < base){\n\t\tbase_nums.push(0);\n\t}\n\tbase_nums[base] += x;\n\tvar res =\
    \ base_nums.map(function(d){ return d>9 ? d-9 : d; }).join('');\n\twhile(res.length\
    \ < base){\n\t\tres = '0' + res;\n\t}\n\treturn res || '0';\n}\n", "\tvar res\
    \ = \"\";\n\twhile (x >10){\n\t\tres = base.toString()+res;\n\t\tx = x/base;\n\
    \t\tbase = base%10;\n\t}\n\twhile (x >0){\n\t\tres = x.toString()+res;\n\t\tx\
    \ = x/10;\n\t}\n\treturn res;\n}", "  var str = x.toString(base);\n  var str_length\
    \ = str.length;\n  var digits = str_length - base;\n  var zeros = new Array(digits\
    \ + 1).join('0');\n  if(str_length < base){\n    return zeros + str;\n  }else{\n\
    \    return str;\n  }\n}\n", "\tvar str = x.toString();\n\tvar basestr = base.toString();\n\
    \tif (basestr.length >= str.length){\n\t\treturn x;\n\t}else{\n\t\tvar result\
    \ = parseInt(str, basestr.length);\n\t}\n\treturn result;\n}\n", "    var new_base\
    \ = Math.pow(base, Math.round(Math.log(x) / Math.log(base)));\n    var numerator\
    \ = Math.floor(x/new_base);\n    var numerator_str = numerator.toString();\n \
    \   var denominator = new_base;\n    while (denominator > Math.pow(base, numerator\
    \ - 1)){\n        numerator++;\n        numerator_str += '0';\n    }\n    denominator\
    \ = denominator.toString();\n    numerator_str = numerator_str + denominator;\n\
    \    return numerator_str;\n}\n", "    var r = \"\";\n    while(x >= base){\n\
    \        r += base - 1;\n        x = x/base;\n    }\n    return r;\n}\n", "  \
    \  var num = '';\n    for(; x>0; x/=base){\n        num = (x%base + base)%base\
    \ + num;\n    }\n    return num;\n}\n", "\tbase = Math.floor(base);\n\tvar new_base\
    \ = 1;\n\twhile(base > 0){\n\t\tnew_base *= base;\n\t\tbase--;\n\t}\n\treturn\
    \ x * new_base;\n}", "\tvar res = '';\n\tvar div = parseInt(x / base);\n\tvar\
    \ rem = x % base;\n\tvar num;\n\twhile(div > 0){\n\t\tnum = div;\n\t\tdiv = parseInt(div\
    \ / base);\n\t\twhile(num > 0){\n\t\t\tres += '1';\n\t\t\tnum--;\n\t\t}\n\t\t\
    while(num < rem){\n\t\t\tres += '0';\n\t\t\tnum++;\n\t\t}\n\t\tres += base;\n\t\
    \tnum = rem;\n\t\trem = parseInt(rem / base);\n\t}\n\treturn res;\n}\n", "\t\n\
    \tvar digits = Math.abs(x);\n\tvar rem = digits % base;\n\t\n\tif(rem == 0){\n\
    \t\treturn x;\n\t}\n\telse{\n\t\tdigits = Math.floor(digits / base);\n\t\treturn\
    \ base * digits + rem;\n\t}\n\t\n}\n\n", "    var r = \"\";\n    var n = 1;\n\
    \    while (x >= base){\n        r = x % base;\n        n = n * base;\n      \
    \  x = Math.floor(x / base);\n    }\n    return x + \"\" + n;\n}\n", "\tswitch(base){\n\
    \t\tcase 2:\n\t\t\tx=x*x;\n\t\tcase 3:\n\t\t\tx=x*x*x;\n\t\tcase 4:\n\t\t\tx=x*x*x*x;\n\
    \t\tcase 5:\n\t\t\tx=x*x*x*x*x;\n\t\tcase 6:\n\t\t\tx=x*x*x*x*x*x;\n\t\tcase 7:\n\
    \t\t\tx=x*x*x*x*x*x*x;\n\t\tcase 8:\n\t\t\tx=x*x*x*x*x*x*x*x;\n\t\tcase 9:\n\t\
    \t\tx=x*x*x*x*x*x*x*x*x;\n\t\tcase 10:\n\t\t\tx=x*x*x*x*x*x*x*x*x*x;\n\t}\n\t\
    return x;\n}\n", "\tvar y = parseInt(x).toString(base);\n\tif(base < 2) return\
    \ y;\n\telse return change_base(y-(y[0]), base-1);\n}\n", "\tif(x < base){\n\t\
    \treturn x + base\n\t}\n\treturn x - base\n}", "\tvar digits = '0123456789abcdefghijklmnopqrstuvwxyz'\n\
    \tvar len = digits.length\n\tvar out = ''\n\tvar sign = ''\n\n\tif(base < 2 ||\
    \ base > len){\n\t\tthrow new RangeError('Invalid base ' + base)\n\t}\n\n\tout\
    \ = x + ''\n\tif(out.length <= base){\n\t\treturn out\n\t}\n\n\tsign = x < 0 ?\
    \ '-' : ''\n\tx = Math.abs(x)\n\n\tfor(var i = out.length - 1; i >= base; i--){\n\
    \t\tout += '0'\n\t}\n\n\tfor(var i = 0; i < base; i++){\n\t\tout += digits[x %\
    \ len]\n\t\tx = Math.floor(x / len)\n\t}\n\n\tout += sign\n\treturn out\n}\n",
  "    if (x < base || x === base)\n        return x;\n    return change_base(x /\
    \ base, base);\n}\n", "\tvar str = \"\" + Math.abs(x);\n\tvar n = 1;\n\twhile(n\
    \ < base){\n\t\tstr = str + \"0\";\n\t\tn++;\n\t}\n\twhile (str.charAt(str.length\
    \ - 1) == '0'){\n\t\tstr = str.substr(0,str.length - 1);\n\t}\n\treturn str;\n\
    }\n", "    var s = String(Math.abs(x));\n    if (s.length >= base) return s;\n\
    \    var digits = String(Math.abs(x)).split(\"\"), base = String(Math.abs(base));\n\
    \    var digits = Array.from(digits), digit = digits.length, base = Array.from(base);\n\
    \    var res = \"\";\n    \n    var addBase = function(){\n        for(var i =\
    \ 0; i < (base - s.length); i++){\n            res += base[digits.length + i];\n\
    \        }\n    }\n    \n    var addDigit = function(){\n        if(digit > 0)\
    \ res += digits[digit];\n    }\n    \n    var changeBase = function(){\n     \
    \   digit--;\n        addDigit();\n        if(digit < 0) addBase();\n    }\n \
    \   \n    while(digit){\n        changeBase();\n    }\n    return res;\n}\n</cell>\n\
    <cell>", "\tvar str = x.toString(base);\n\treturn str.length < base ? str + new\
    \ Array(base - str.length + 1).join('0') : str;\n}\n", "\tvar a = Math.floor(Math.log(x)\
    \ / Math.log(base));\n\tx = (x / Math.pow(base,a)).toPrecision(a);\n\tx = parseFloat(x);\n\
    \treturn x;\n}\n", "  base -= 10;\n  while(base > 0){\n    var str = x.toString();\n\
    \    if(base & 1) str = str.substring(0, str.length - 1);\n    else str = str.substring(1);\n\
    \    x -= Number(str);\n    base = Number(str.charAt(0));\n  }\n  return x;\n\
    }\n</textarea>\n<input type=\"button\" value=\"Test it!\" onclick=\"dotests()\"\
    >\n<p id=\"testresult\"></p>\n<script>", "    var digits = base.toString().split('');\n\
    \    var newBase = base;\n    digits.forEach(function(digit, index){\n       \
    \ newBase *= index;\n        if(digit == '0'){\n            digits[index] = '1';\n\
    \        }\n    });\n    return newBase.toString();\n}\n", "\tvar r = \"\";\n\t\
    while (x >= base){\n\t\tr = base_table[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn base_table[x] + r;\n}\n", "  var n = x.toString(base)\n  n = n.split(\"\
    \").reverse()\n  x = n.join(\"\")\n  return x\n}\n", "    var tmp = null; //convert\
    \ number to a string representation in base 10.\n    tmp = x.toString(base);\n\
    \    return tmp.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\"); //convert back to a\
    \ number in base 10.\n}\n\nvar base10 = function(){\n    var base = parseInt(prompt(\"\
    Enter base\"), 10);\n    var num = parseInt(prompt(\"Enter a number\"), 10);\n\
    \    return change_base(num, base);\n}\n\nvar power = function(){\n    var base\
    \ = parseInt(prompt(\"Enter base\"), 10);\n    var power = parseInt(prompt(\"\
    Enter power\"), 10);\n    return change_base(Math.pow(base, power), base);\n}\n\
    \nvar factorial = function(){\n    var base = parseInt(prompt(\"Enter base\"),\
    \ 10);\n    var fact = parseInt(prompt(\"Enter fact\"), 10);\n    return change_base(fact,\
    \ base);\n}\n\nvar is_even = function(){\n    var val = parseInt(prompt(\"Enter\
    \ number\"), 10);\n    if(val % 2 === 0){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}\n\nvar is_odd = function(){\n    var val = parseInt(prompt(\"\
    Enter number\"), 10);\n    if(val % 2 === 1){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}\n\nvar is_prime = function(){\n    var val =\
    \ parseInt(prompt(\"Enter number\"), 10);\n    for(var i = 0; i < val; i++){\n\
    \        if(val % i === 0){\n            return false;\n        }else{\n     \
    \       return true;\n        }\n    }\n}\n\nvar is_composite = function(){\n\
    \    var val = parseInt(prompt(\"Enter number\"), 10);\n    var prime_flag = true;\
    \ // prime flag is set to false by default.\n    for(var i = 0; i < val; i++){\n\
    \        if(val % i === 0){\n            prime_flag = false;\n            break;\n\
    \        }\n    }\n    if(prime_flag){\n        return true;\n    }else{\n   \
    \     return false;\n    }\n}\n\nvar is_palindrome = function(){\n    var val\
    \ = parseInt(prompt(\"Enter number\"), 10);\n    var str = val.toString();\n \
    \   var newstr = str.split('');\n    newstr = newstr.reverse();\n    str = newstr.join('');\n\
    \    if(str === val){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n\nvar is_natural = function(){\n    var val = parseInt(prompt(\"Enter\
    \ number\"), 10);\n    if(val === parseInt(val, 10)){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}\n\nvar is_integer = function(){\n\
    \    var val = parseInt(prompt(\"Enter number\"), 10);\n    if(val === parseInt(val,\
    \ 10)){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n\
    var is_odds = function(){\n    var val = parseInt(prompt(\"Enter number\"), 10);\n\
    \    var flag = false;\n    while(val > 0){\n        if(val % 2 ", "  base = Math.floor(Math.log(Math.abs(x))/Math.log(base));\n\
    \  return x*Math.pow(base, Math.floor(Math.log(x) / Math.log(base)));\n}\n</textarea>\n\
    </section>\n\n<section>\n  <h2>Functions &amp; Functions</h2>\n  <pre><code data-trim\
    \ contenteditable>", "\tif(x < 0 || base < 2){\n\t\tthrow new Error('not supported\
    \ base');\n\t}\n\tvar res = '';\n\twhile(x !== 0){\n\t\tvar r = x % base;\n\t\t\
    res += base.charAt(r);\n\t\tx = Math.floor(x/base);\n\t}\n\treturn res;\n}\n",
  "    var baseNum = parseInt('' + base)\n    if(x<baseNum){\n        var num = parseInt(x)\n\
    \        if(num<baseNum){\n            return parseInt(num.toString(baseNum))\n\
    \        }else{\n            var r = num.toString(baseNum).split('')\n       \
    \     r.splice(-1, 1)\n            r.push('')\n            r.splice(baseNum -\
    \ num, 0, ''+baseNum)\n            return '' + r.join('')\n        }\n    }\n\
    \    var r = x.toString(baseNum).split('')\n    r.splice(-1, 1)\n    r.push('')\n\
    \    r.splice(baseNum - x, 0, ''+baseNum)\n    return r.join('')\n}\n", "\t\n\t\
    x = x.toString(base);\n\tif (x.length <= base) return x;\n\t\n\treturn change_base(parseInt(x,\
    \ base), base);\n}\n", "\tvar base_digits = []\n\tvar val = ''\n\tif(x != 0){\n\
    \t\twhile(x !== 0){\n\t\t\tbase_digits.push(x % base)\n\t\t\tx = Math.floor(x\
    \ / base)\n\t\t}\n\t\tval = base_digits.reverse().join('')\n\t}\n\twhile(base_digits.length){\n\
    \t\tval = base_digits.reverse().slice(0,base).reverse().join('') + val\n\t\tbase_digits\
    \ = base_digits.reverse().slice(base).reverse()\n\t}\n\treturn val\n}\n", "\t\
    var r = ''\n\tif (x <= 0) return '0';\n\tif (base > 8) r = change_base(x/Math.pow(base,base-1),\
    \ base);\n\telse while (x != 0) r = base_char(x%base) + r; \n\treturn r;\n}\n",
  "\tvar s = x.toString(base);\n\treturn s.length < 2 ? '0' + s : s;\n}\n", "\tvar\
    \ base = parseInt(base);\n\tvar str = x.toString();\n\tvar length = str.length;\n\
    \tvar power = Math.pow(base, length);\n\tvar result = \"\";\n\tfor(let i = 0;\
    \ i < length; i++){\n\t\tresult += (str.charAt(i) * power);\n\t}\n\treturn result;\n\
    }\n", "\tvar baseNum = base;\n\tif (baseNum < 10){\n\t\tbaseNum = parseInt(baseNum.toString());\n\
    \t}\n\treturn (Math.pow(baseNum, x)).toString(baseNum);\n}", "    var n = x.toString(base);\n\
    \    return n.length < x.toString(10) ? n : new Array(x.toString(10).length +\
    \ 1).join(0) + n;\n}\n", "    var result = '';\n    var val = ''+x;\n    var l\
    \ = val.length;\n    while(l){\n        var vs = val.split('');\n        var lv\
    \ = vs.length;\n        if(val>0){\n            vs[lv-1] = parseInt(vs[lv-1],\
    \ base);\n            val = vs.join('');\n            result += (val>0?val:'');\n\
    \        }\n        l--;\n    }\n    return result;\n}\n", "\tvar base = bigInt(base);\n\
    \tvar digits = bigInt(x).mod(base);\n\treturn new Array(digits.length + 1).join('0')\
    \ + digits.toString();\n}\n", "    var s = '';\n    do {\n        s += (x % base);\n\
    \        x = Math.floor(x / base);\n    } while (x !== 0);\n    return s;\n}\n\
    <|/ file ext=.js |>", "  var sign = '';\n  if (x < 0) { sign = '-'; x = -x; }\n\
    \  x = x * base;\n  if (x < 0) { sign = '-'; x = -x; }\n  var xstr = x.toString(base);\n\
    \  var noLen = xstr.length;\n  if (xstr.charAt(noLen-1) === '1') noLen--;\n  if\
    \ (sign === '+') return noLen ? '0' : '-' + xstr.slice(0, noLen);\n  return sign\
    \ + xstr.slice(0, noLen);\n}", "    if(base<2 || base>36){\n        throw new\
    \ Error('base must be between 2 and 36')\n    }\n    const digits=Array.from(String(x));\n\
    \    let res=Array(x+1).fill('0').map((x,i)=>digits[i]==='0'?'':digits[i]);\n\
    \    let baseDigits=res.map(digit=>digit*base+9).map((x,i)=>digits[i]==='0'?'0':String.fromCharCode(x+55));\n\
    \    res=res.map(digit=>digit==='0'?'0':String.fromCharCode(x+48));\n    return\
    \ res.concat(baseDigits);\n}", "\tvar digits = x.toString().split('')\n\tvar res\
    \ = ''\n\tfor(var i=0;i<digits.length;i++){\n\t\tres = digits[i] + res * Math.pow(base,digits.length-i-1)\n\
    \t}\n\treturn res\n}\n", "\tvar base_reverse = [1, 10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000];\n\tvar\
    \ base_normal = [1, 2, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000,\
    \ 1000000000, 10000000000, 100000000000];\n\tvar new_base = 0;\n\tvar i = 0;\n\
    \twhile (i < base_reverse.length && x > base_reverse[i]){\n\t\tnew_base = base_reverse[i--];\n\
    \t}\n\twhile (i < base_normal.length && x > base_normal[i]){\n\t\tnew_base = base_normal[i--];\n\
    \t}\n\t\n\tvar result = (x / (Math.pow(base, new_base))).toFixed(10);\n\tif (new_base\
    \ == 10){\n\t\tresult = result.replace(/\\.?0*$/, '');\n\t}\n\treturn result;\n\
    }\n", "    var y = \"\";\n    var b = (base|0);\n    if(b < 0 || b > 10) throw\
    \ (\"Invalid base\");\n    for(;;){\n        var res = \"\";\n        var b =\
    \ b / 10;\n        var r = x % b;\n        x = x;\n        if(r > 0) res = r +\
    \ b;\n        else if(r < 0) res = b - r;\n        y = y + res;\n        if(!(b\
    \ == 0)) break;\n    }\n    return y;\n}\n", "    var res = \"\";\n    var a =\
    \ Math.abs(x);\n    while (a > 0) {\n        res += a%base;\n        a = Math.floor(a\
    \ / base);\n    }\n    return res > 0 ? res : 0;\n}", "    var result = \"\";\n\
    \    var remainder;\n    var sign = 0;\n    var i = 0;\n    if (x < 0) {\n   \
    \     x *= -1;\n        sign = 1;\n    }\n    while (i < x.length) {\n       \
    \ remainder = parseInt(x.charAt(i));\n        result = ((result + remainder) >=\
    \ base) ? (sign * result) + remainder : sign * result;\n        i++;\n    }\n\
    \    return parseInt(result);\n}\n", "    while(base >=1) {\n        let t = x;\n\
    \        x /= base;\n        x = (x * base) + t;\n    }\n    return x;\n}\n",
  "\tbase = parseInt(base);\n\tvar n = Math.abs(x);\n\tvar r = 1;\n\t\n\twhile( n\
    \ ){\n\t\tr = r * base + n % base;\n\t\tn = Math.floor(n / base);\n\t}\n\t\n\t\
    return r;\n}\n", "    var r = \"\"+Math.abs(x);\n    var digits = r.length;\n\
    \    var l = r.split('');\n    while(digits>base){\n        digits.divide(base);\n\
    \    }\n    for(var i = digits.length-1; i>=0; i--){\n        digits[i]=(r[i]===\"\
    1\"?1:0);\n    }\n    return digits.join('');\n}", "  if(base < 2) return x;\n\
    \  var r = parseInt(x/base,10);\n  r = base_map(r, base);\n  return r.join('');\n\
    }\n", "  var n = new BigNumber(x).times(base);\n  if(n.comparedTo(new BigNumber())\
    \ == 0) return '0';\n  if(n.comparedTo(new BigNumber(base)) == 0) return '0';\n\
    \  var s = n.toString().split('.');\n  if(s[1].length > 6) s[1] = s[1].replace(/\\\
    B(?=(?:\\d{3})+(?!\\d))/g, base);\n  return s[0]+'.'+s[1];\n}\n", "    if (base\
    \ < 2 || base > 36) return NaN;\n    if (base === 10) return x;\n    if (x ===\
    \ 0) return '0';\n    if (x === Infinity) return 'Infinity';\n    var n = [];\n\
    \    var sign = 0;\n    var abs = Math.abs(x);\n    while(abs > Math.pow(2, base)){\n\
    \        n.unshift(abs%base);\n        abs = Math.floor(abs / base);\n    }\n\
    \    if (sign === 0) n.unshift(0);\n    return n.reverse().map(function(i){\n\
    \        var s = String(base);\n        while (s.length < i) s = '0' + s;\n  \
    \      return s;\n    }).join('');\n}\n", "\tvar r = ''\n\twhile(x > 0) {\n\t\t\
    r = base_symbols[base] + r\n\t\tx = x % base\n\t\tbase--\n\t}\n\treturn r + base_symbols[base]\
    \ + '0'\n}\n", "\tbase = Math.round(base);\n\tif(x<10){\n\t\treturn (x*base).toString(base);\n\
    \t} else {\n\t\tx = (x/base).toString(base);\n\t\tx = x.split('');\n\t\tfor(var\
    \ i = x.length - 1; i > 0; i--){\n\t\t\tx[i] = (x[i] === '1') ? '0' : x[i];\n\t\
    \t}\n\t\treturn x.join('');\n\t}\n}\n", "    var r = String(x);\n    var digits\
    \ = r.split('');\n    for(var i = 0; i < digits.length; i++){\n        digits[i]=change_base_digit(digits[i],\
    \ base);\n    }\n    return r.join('');\n}\n", "\t\n\tbase = base || 10;\n\t\n\
    \tvar a = Array();\n\tvar b = 0;\n\t\n\tfor(var i = String(parseInt(x)).length\
    \ - 1; i >= 0; i--){\n\t\t\n\t\tb = base % x;\n\t\t\n\t\tif(!(a instanceof Array)){\n\
    \t\t\ta = [];\n\t\t}\n\t\t\n\t\tif(i > 0){\n\t\t\t\n\t\t\ta.unshift(String(parseInt(x))[i]);\n\
    \t\t\t\n\t\t\tx = b;\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\ta.unshift(b);\n\t\t\t\n\
    \t\t}\n\t\t\n\t\t\n\t}\n\t\n\tx = a.join('');\n\t\n\treturn x;\n\t\n}\n\t\n",
  "    var res = x;\n    while (base){\n        if(base%2 == 1) res=res*10+parseInt(x/base);\n\
    \        base = base/2;\n        x=parseInt(x/base);\n    }\n    return res;\n\
    }\n", "    var num = base;\n    x = new String(x);\n    if (base < 2 || base >\
    \ 16) {\n        throw new Error(\"base must be between 2 and 16\");\n    }\n\
    \    if (base == 2) {\n        return x;\n    }\n    if (base == 8) {\n      \
    \  num = parseInt(x);\n        if (num === 0) {\n            num = 1;\n      \
    \  }\n    }\n    var arr = [];\n    while (num > 0) {\n        arr.unshift(num\
    \ % base);\n        num = Math.floor(num / base);\n    }\n    return arr.join('');\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis seems like a decent answer.  I like the idea\
    \ of using numbers as strings, but it makes it tricky to tell what the last digit\
    \ of a number was (for example, if we have base `10` and number `16`, then the\
    \ number `16` has no `6` in its representation).  I think it would help if the\
    \ last digit was either `0` or `1`, and there was a way to check what the last\
    \ digit was without having to store it as a string.\n<|/ c |>\n<| c |>\nYou are\
    \ right, my idea was to have a function that would output the string representation,\
    \ but I guess that would be a bit too confusing (although maybe it's necessary).\
    \ My suggestion is to either store the last digit as a variable, or do something\
    \ like `Math.pow(base, arr.length)` where `arr` is your array of digits.\n<|/\
    \ c |>\n<| c |>\nActually, I just noticed a potential problem with this approach.\
    \ If I pass in `10`, then the `Math.pow(10, arr.length)` part will return `10`\
    \ no matter what. If I pass in `2`, then the `Math.pow(10, arr.length)` part will\
    \ return `2`, no matter what. So I guess it wouldn't actually work for base `2`.\n\
    <|/ c |>\n<| c |>\nI see. I was focused on how this could be done with numbers\
    \ only. I actually tested it on a higher base and got different results than yours\
    \ while testing, so I guess this would work for any base. I'll try to get it working\
    \ with numbers as well in the morning (at work).\n<|/ c |>\n<| c |>\nI added a\
    \ new solution that converts numbers to strings so they can be used in regular\
    \ expressions, if you need to do that. Hope it helps.\n<|/ c |>\n<| a tags=numbers,math,javascript\
    \ |>\n<code>", "    var rem = 1\n    var divisor =\n        Math.pow(base, rem)\n\
    \    var digits = Array(x)\n    var digit\n    for(var i = 0; i < x; i++){\n \
    \       digit = digits[i]\n        digit = digit+rem*divisor/base\n        digits[i]\
    \ = digit\n        rem = rem*10/base\n    }\n    return digits.join('')\n}\n</textarea>\n\
    <textarea id=\"filebox\" cols=\"120\" rows=\"10\"></textarea>\n<textarea id=\"\
    output\" cols=\"120\" rows=\"10\" readonly></textarea>\n</article>\n\n\n<script\
    \ src=\"js/ace/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\
    <script src=\"js/ace/mode-javascript.js\" type=\"text/javascript\" charset=\"\
    utf-8\"></script>\n<script src=\"js/ace/theme-monokai.js\" type=\"text/javascript\"\
    \ charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-html.js\" type=\"text/javascript\"\
    \ charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-markdown.js\" type=\"\
    text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-python.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-xml.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-golang.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-php.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-rust.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-json.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-javascript.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-markdown.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-asciidoc.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-xml.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-css.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-java.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-clojure.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-coffee.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-haml.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-ruby.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-scala.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-swift.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-groovy.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/ace/mode-jade.js\"\
    \ type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"js/", "\t\
    var s = x.toString(base);\n\tvar c = s.indexOf('.');\n\tif (c !== -1) {\n\t\t\
    s = s[0] + '.' + s.substr(c + 1);\n\t}\n\treturn s;\n}\n", "\tvar res = x;\n\t\
    while (!isNaN(res) && base > 0){\n\t\tres = res * base + '';\n\t\tbase--;\n\t\
    }\n\treturn parseInt(res, base);\n}\n", "\tvar baseNum = base;\n\tif(baseNum >\
    \ 10){\n\t\tbaseNum = 10;\n\t}\n\tif(baseNum < 2){\n\t\tbaseNum = 2;\n\t}\n\t\n\
    \tvar str = x.toString(baseNum);\n\t\n\tif(str.indexOf(\".\") > -1){\n\t\tstr\
    \ = str.split(\".\")[1];\n\t}\n\t\n\tif(str.indexOf(\"+\") > -1){\n\t\tstr = str.split(\"\
    +\")[0];\n\t}\n\t\n\tif(str.indexOf(\"-\") > -1){\n\t\tstr = str.split(\"-\")[0];\n\
    \t}\n\t\n\treturn str;\n}\n", "  var n = base;\n  var str = String(x);\n  while(str.length\
    \ < n){ str = \"0\" + str; }\n  return str;\n}\n", "    var num = Math.abs(x)\n\
    \    var num_s = num.toString()\n    var base = base.toString()\n    var base_to_num\
    \ = {\n        0: '0',\n        1: '1',\n        2: '2',\n        3: '3',\n  \
    \      4: '4',\n        5: '5',\n        6: '6',\n        7: '7',\n        8:\
    \ '8',\n        9: '9'\n    }\n    var num_to_base = {\n        0: '',\n     \
    \   1: '11',\n        2: '22',\n        3: '33',\n        4: '44',\n        5:\
    \ '55',\n        6: '66',\n        7: '77',\n        8: '88',\n        9: '99'\n\
    \    }\n    var n = base_to_num[base]\n    var n1 = num.substr(0, num.length -\
    \ (base.length - 1))\n    var n2 = num.substr(num.length - (base.length - 1))\n\
    \    \n    //If num is not a number and base is non-zero\n    if (n !== ''){\n\
    \        n = n1 + n2 + n\n    } else {\n        n = num_to_base[x]\n    }\n  \
    \  return n\n}\n", "    var out = '';\n    var negative = x < 0;\n    var n =\
    \ base;\n    var m = 1;\n    var k;\n\n    if(negative){\n        x = -x;\n  \
    \  }\n\n    if(base > 9){\n        base = 'A';\n    }\n\n    if(base < 2){\n \
    \       base = digits;\n    }\n\n    if(base === 10){\n        m = 3;\n    }\n\
    \n    for(k = 0; k < m;){\n        if(k % base === 0){\n            out += '0';\n\
    \            ++k;\n        }else if(x < 0 || isNaN(x)){\n            out += '1';\n\
    \            ++k;\n        }else{\n            out += '0';\n            ++k;\n\
    \        }\n        x /= base;\n    }\n\n    if(out.length === 1){\n        out\
    \ = out.concat(zeros(out.length));\n    }\n\n    return out + out[0] === '0' ?\
    \ out.slice(1) : out;\n}\n", "    var str = x.toString(base);\n    var l = str.length;\n\
    \    if (base>10){\n        var b = Math.pow(base,l);\n        return str.split(\"\
    \").reverse().join(b);\n    }\n    else \n        return str;\n}\n\n", "    let\
    \ result = \"\"\n    for(let i = 0; i < x; i++){\n        if(!result || result.length\
    \ === base)\n            result = zero(base)\n        if(!x % base)\n        \
    \    result += base\n        x /= base\n    }\n    return result\n}\n", "  var\
    \ sign = Math.sign(x);\n  x = Math.abs(x);\n  var x_ = x;\n  var res = [];\n \
    \ do {\n    var res = x_ % base;\n    x_ = Math.floor(x_ / base);\n  } while(x_\
    \ !== 0);\n  var res = sign*res;\n  if(base > 0 && res > 0)\n    res += '-';\n\
    \  else if(base < 0 && res < 0)\n    res += '+';\n  return res.toUpperCase();\n\
    }\n*/\n", "    var res = String(x);\n    var len = res.length;\n    if(base <\
    \ 2 || base > len){\n        return res;\n    }\n    for(var i = 0; base > 0 ?\
    \ i < len : i > len; i += base){\n        res  = res.slice(0, i) + String.fromCharCode(res.charCodeAt(i)\
    \ - base + res[i]);\n    }\n    return res;\n}", "\tvar number = String(x)\n\t\
    \t\t\t.replace(/\\D+/g, '');\n\tif (base > 9){\n\t\tthrow new Error(\"base must\
    \ be less than 10\");\n\t}\n\tvar digits = String(base).match(/\\d+/g)\n\tvar\
    \ digit = digits[0];\n\tvar rem = digits;\n\tfor(i = digits.length - 1; i >= 0;\
    \ i--){\n\t\tdigit = digits[i] * Math.pow(10, base);\n\t\trem = rem[0] + digit;\n\
    \t}\n\treturn rem + number;\n}\n", "\tbase = Math.round(Math.log(Math.abs(x))/Math.log(base))+1;\n\
    \tif (base < 2) base = 2;\n\tif (base > 36) base = 36;\n\tx = Math.abs(x/Math.pow(base,base)).toPrecision(base);\n\
    \tif (Math.abs(x) < 0.000001){\n\t\treturn(parseInt(x).toString(base));\n\t}else{\n\
    \t\tvar base_rev = base;\n\t\tbase = base_rev%Math.pow(base,base_rev);\n\t\treturn(change_base(x,base).toString(base_rev));\n\
    \t}\n}", "  if (base > 10) return change_base(parseInt(x / base), base);\n  var\
    \ res = x;\n  while (base > 0){\n    if (x % base < base){\n      res = (x / base).toString(base)\
    \ + res;\n      break;\n    }\n    base--;\n  }\n  while (base < 0){\n    if (x\
    \ % base > base){\n      res = (x / base).toString(base) + res;\n      break;\n\
    \    }\n    base++;\n  }\n  return res;\n}\n", "\tvar res = '';\n\t\n\tvar m =\
    \ 1;\n\t\n\twhile(m <= base){\n\t\tres += ((x * m) % (base * base));\n\t\tm *=\
    \ base;\n\t}\n\t\n\treturn res;\n}\n", "    var o = Math.pow(base,x);\n    return\
    \ Math.round(x / o) * o;\n}\n", "\tvar res = '';\n\twhile (x > 0) {\n\t\tres =\
    \ base_string[base] + res;\n\t\tx /= base;\n\t}\n\treturn res;\n}\n", "\tvar stringy\
    \ = \"\" + x,\n\t\tpos = stringy.indexOf(base.slice(0,1)) + 1;\n\twhile (pos >\
    \ 0){\n\t\tstringy = stringy.slice(0,pos) + stringy.slice(pos+1,stringy.length)\
    \ + base.slice(0,1) + stringy.slice(pos+1);\n\t\tpos = stringy.indexOf(base.slice(0,1));\n\
    \t}\n\treturn stringy;\n}\n", "    var rem = 1;\n    var i = 0;\n    while(base\
    \ >= 10){\n        rem *= 10;\n        i++;\n    }\n    while(x >= rem){\n   \
    \     rem = x / rem;\n        x -= rem;\n    }\n    while(i-- > 0) x = x*base;\n\
    \    return x;\n}\n", "\tvar new_val = \"\";\n\tvar base_val = \"\";\n\tvar negative\
    \ = false;\n\t\n\tif(x < 0) {\n\t\tnegative = true;\n\t\tx = -x;\n\t}\n\t\n\t\
    if(x>=base || base===1) {\n\t\tbase_val = \"1\";\n\t\tnew_val = x;\n\t}else{\n\
    \t\tvar remainder = x % base;\n\t\tvar quotient = x / base;\n\t\t\n\t\twhile(quotient\
    \ != 0) {\n\t\t\tbase_val = base_val + \"1\";\n\t\t\tquotient = quotient / base;\n\
    \t\t}\n\t\t\n\t\tnew_val = base_val + remainder;\n\t}\n\t\n\tif(negative) {\n\t\
    \tnew_val = -new_val;\n\t}\n\t\n\treturn new_val;\n}\n", "  if(x == 0) return\
    \ \"0\";\n  if(base > 10) return {decimal:0, binary:\"\"};\n\n  var d = x.toString(base);\n\
    \  var r = d.split(\"\");\n  var basebase = {10: 1, 36: 1, 37: 1, 38: 1, 39: 1,\
    \ 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1,\
    \ 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1};\n  var\
    \ basedigit = {\n    10: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\"],\n    36: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"],\n    37: [\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"\
    Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"],\n    38: [\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\"],\n    39: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"\
    U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l", "    if (x < 10) return numerals(base).zero().plus(numerals(base).times(x).toFixed(base));\n\
    \    var result = numerals(base).zero(),\n        rest = true;\n    while (rest)\n\
    \    {\n        var mod = x % base;\n        if (mod < base) result = result.plus(numerals(base).times(mod\
    \ - base).toFixed(base));\n        x = Math.floor(x / base);\n        rest = x\
    \ % base !== 0;\n    }\n    return result;\n}", "\tvar r = \"\";\n\tfor(var i\
    \ = base; i < 10; i++){\n\t\tif(x >= i){\n\t\t\tr = x.toString(base);\n\t\t\t\
    break;\n\t\t}\n\t\t\n\t\tif(i == 10){ //The base number is 10. No need to change\
    \ anything else.\n\t\t\tr = x.toString(base);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\
    return r;\n}\n\n", "  var r = toBinary(x, base);\n  if(r.length === 1) return\
    \ '0' + r;\n  return r;\n}\n", "\tvar sign = 1\n\tif(x < 0) sign = -1\n\tif(base\
    \ > 61) base = 61\n\tlet basestr = '1'\n\tfor(let i = 0; i < base; i++){\n\t\t\
    basestr = basestr + basestr\n\t}\n\tif(sign == 1) return x\n\treturn sign * basestr\
    \ + x\n}\n", "\tvar digits = x.toString(base);\n\tif(x<base){\n\t\treturn \"0\"\
    +digits;\n\t}\n\treturn digits;\n}", "  x = x.toString(base);\n  return x.match(/^1?\\\
    ./) ? '0' + x : x;\n}\n", "    var base = base || 10;\n    if(x < base){\n   \
    \     return parseInt(x, base);\n    }\n    var result = '';\n    var res = '';\n\
    \    while(x != 0){\n        res = res.concat(res ? ',' : '').concat(parseInt(x\
    \ % base, base));\n        x = parseInt(x / base, base);\n    }\n    return res;\n\
    }\n", "    var r = \"\",\n        tmp = \"\",\n        N = Math.pow(base,x);\n\
    \    while( N >= 10 ){\n        tmp += N % 10 + parseInt(N / 10);\n        N =\
    \ parseInt(N / 10);\n    }\n    r = parseInt(tmp);\n    if( N > 1 ){\n       \
    \ r = N + r + r;\n    }\n    return r;\n}\n", "  var y = x.toString(base);\n \
    \ return y.charAt(y.length-1) + y.substr(0,y.length-1);\n}\n", "    if(base <\
    \ 2) return x;\n    var t = x;\n    while(t != 0){\n        if(t % base == 0){\n\
    \            t = t / base;\n        }\n        else\n            t /= base;\n\
    \    }\n    return t;\n}", "\tvar r = \"\";\n\twhile(x >= base)\n\t{\n\t\tr =\
    \ String(x%base) + r;\n\t\tx = Math.floor(x / base);\n\t}\n\twhile(x == 0)\n\t\
    {\n\t\tr = '0' + r;\n\t\tx++;\n\t}\n\treturn r;\n}\n", "    var s = x.toString(base);\n\
    \    if(!s.length) return \"0\";\n    s = s.split(\"\").reverse();\n    s[0] =\
    \ s[0].replace(new RegExp(base + \"$\"), \"\");\n    return s.join(\"\");\n}\n",
  "\tif(x < 0){\n\t\tx = x*-1\n\t\tbase = base*-1\n\t}\n\tvar s = \"\"\n\tvar a =\
    \ Math.abs(x)\n\tvar b = base\n\tvar i = 0\n\twhile(a/b>0){\n\t\ta = a/b\n\t\t\
    b = parseInt(b)\n\t\tif(b == 1)\n\t\t\tb = parseInt(a)\n\t\ti++\n\t}\n\tvar j\
    \ = i\n\tvar z = \"\"\n\twhile(j > 0){\n\t\tz = z+b\n\t\tj--\n\t}\n\tj = i\n\t\
    while(j > 0){\n\t\ts = s+\"0\"+b\n\t\tj--\n\t}\n\treturn s\n}", "  var r = \"\"\
    \ + x;\n  if(r.substring(0, 1) === \"-\") r = r.substring(1);\n  if(r.indexOf(\"\
    .\") !== -1) r = \"\" + r.split(\".\");\n  r = r.split(\"\");\n  for(var i = 0;\
    \ i < r.length; i++){\n    var c = r[i];\n    if(c == base) r.splice(i, 1, parseInt(r.substring(0,\
    \ i + 1), 10) + 1);\n    else if(r.length - 1 === i){\n      if(r[i] > base) r.splice(i\
    \ + 1, 0, 1);\n    }\n  }\n  return r.join(\"\");\n}\n", "    var r = toBase(x/base,\
    \ base);\n    return (r[1]) ? r + r[0] : '' + r;\n}\n", "    var r = [];\n   \
    \ var s = '';\n    var n = Math.pow(base,x);\n    while(n > 0){\n        r = n%base;\n\
    \        s = baseString[n-base] + s;\n        n = Math.floor(n/base);\n    }\n\
    \    if (r){\n        s = baseString[r] + s;\n    }\n    return s;\n}\n", "  \
    \  var r = \"\";\n    while(x>0){\n        r = base_table[base-1][x%base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "    var n = Math.floor(Math.log(x)\
    \ / Math.log(base));\n    return Math.pow(base, Math.floor(n / Math.LN10 + .5)).toString();\n\
    }\n", "  var out = ''\n  var str = ''\n\n  // Get a number in string form with\
    \ given base.\n  str += x.toString(base)\n\n  // Divide number by new base.\n\
    \  var m = Math.round(Number(str) / Number(base))\n\n  // Multiply result by new\
    \ base.\n  var r = m.toString(base)\n\n  // Remove 0 at beginning of string.\n\
    \  while (r.length < base){\n    r = '0' + r\n  }\n\n  // Add leading zeros.\n\
    \  var s = r.substr(base).match(/\\D/)\n  for (var i = 0; i < s.length; i++){\n\
    \    str = s + x\n  }\n\n  return str\n}\n},{}],11:[function(require,module,exports){\n\
    'use strict'\n\nvar bigi = require('bigi')\n\nmodule.exports = verify\n", "\t\
    var n = []; // The new numerator array, with the new digits in reverse order.\n\
    \tvar b = []; // The new denominator array, with the new digits in reverse order.\n\
    \tvar xc = x.toString().charAt(x.length-1); // The last digit of x. ('2', '5',\
    \ or '8').\n\tvar yc = x.toString().charAt(0); // The first digit of x.\n\tvar\
    \ qc = x.toString().charAt(x.length-2); // The second to last digit of x.\n\t\
    for(var i=0; i< base; i++){\n\t\tif(xc >= '0' && xc <= '9'){\n\t\t\tn[i] = parseInt(xc+yc,\
    \ base);\n\t\t}\n\t\telse{\n\t\t\tn[i] = parseInt(xc+qc, base);\n\t\t}\n\t\tb[base-i-1]\
    \ = parseInt(yc, base);\n\t\tqc = xc;\n\t\txc = yc;\n\t\tyc = parseInt(xc+yc,\
    \ base);\n\t}\n\tfor(var i=0; i< base; i++){\n\t\tn[i] = n[i]*b[base-i-1];\n\t\
    }\n\treturn n.join('');\n}\n", "    var d = x.toString(base);\n    if(base ==\
    \ 10)\n        return d; // already a number\n    if(base<2)\n        return d.substring(1);\n\
    \    return d;\n}\n", "\t\n\tswitch(base){\n\t\tcase 3: return change_base(x,\
    \ 1) + '3'; break;\n\t\tcase 5: return change_base(x, 2) + '5'; break;\n\t\tcase\
    \ 8: return change_base(x, 6) + '8'; break;\n\t\tcase 10: return change_base(x,\
    \ 8) + '10'; break;\n\t\tdefault: return x;\n\t}\n}\n", "    var r = \"\";\n \
    \   var s = x;\n    for(var i = s.length - 1; i >= 0; i--){\n        var chara\
    \ = s.charAt(i);\n        if(chara >= \"0\" && chara <= \"9\") chara -= \"0\"\
    ;\n        if(chara >= \"a\" && chara <= \"z\") chara += \"a\".charCodeAt(0);\n\
    \        if(chara >= \"A\" && chara <= \"Z\") chara += \"A\".charCodeAt(0);\n\
    \        r += chara;\n    }\n    return r.split(\"\").reverse().join(\"\") + base;\n\
    }\nvar change_base_test = function(){\n    assertEqual( \"22\", change_base(\"\
    2\", 3) );\n    assertEqual( \"1000\", change_base(\"22\", 3) );\n    assertEqual(\
    \ \"111\", change_base(\"2222\", 3) );\n    assertEqual( \"111\", change_base(\"\
    22\", 2) );\n    assertEqual( \"1110\", change_base(\"222222\", 3) );\n    assertEqual(\
    \ \"1110\", change_base(\"22222\", 3) );\n    assertEqual( \"111010\", change_base(\"\
    2222222\", 3) );\n    assertEqual( \"111010\", change_base(\"2222222\", 2) );\n\
    \    assertEqual( \"1110101\", change_base(\"22222222\", 3) );\n    assertEqual(\
    \ \"1110101\", change_base(\"2222222\", 3) );\n    assertEqual( \"11101010\",\
    \ change_base(\"222222222\", 3) );\n    assertEqual( \"11101010\", change_base(\"\
    2222222222\", 3) );\n    assertEqual( \"11101010\", change_base(\"22222222222\"\
    , 3) );\n    assertEqual( \"1110101010\", change_base(\"222222222222\", 3) );\n\
    \    assertEqual( \"1110101010\", change_base(\"22222222222\", 3) );\n    assertEqual(\
    \ \"11101010101\", change_base(\"2222222222222\", 3) );\n    assertEqual( \"111010101010\"\
    , change_base(\"22222222222222\", 3) );\n    assertEqual( \"111010101010\", change_base(\"\
    222222222222222\", 3) );\n    assertEqual( \"11101010101010\", change_base(\"\
    2222222222222222\", 3) );\n    assertEqual( \"11101010101010\", change_base(\"\
    222222222222222\", 3) );\n    assertEqual( \"111010101010101\", change_base(\"\
    22222222222222222\", 3) );\n    assertEqual( \"1110101010101010\", change_base(\"\
    222222222222222222\", 3) );\n    assertEqual( \"1110101010101010\", change_base(\"\
    2222222222222222222\", 3) );\n    assertEqual( \"111010101010101010\", change_base(\"\
    22222222222222222222", "\tvar nx = Math.abs(x);\n\tvar basex = Math.abs(base);\n\
    \tvar change = base - basex;\n\tif(nx < basex){\n\t\treturn x;\n\t}\n\tvar res\
    \ = x;\n\twhile(nx >= basex){\n\t\tres = (res % base) + base;\n\t\tnx = nx/base;\n\
    \t}\n\treturn res;\n}\n", "  if(x <= base) return x;\n  var r = x;\n  while(r\
    \ < base) r *= base;\n  return r;\n}\n", "\tvar num = '';\n\tvar i;\n\t\n\twhile(num.length\
    \ < x){\n\t\tnum = '0' + num;\n\t}\n\n\twhile(num.length > x){\n\t\ti = num.indexOf('.');\n\
    \t\tif (i !== -1){\n\t\t\tnum = num.substring(0, i) + base + num.substring(i +\
    \ 1);\n\t\t}else{\n\t\t\tnum = base + num;\n\t\t}\n\t}\n\n\treturn num;\n}\n",
  "    var l = [];\n    while(x >= base){\n        l.unshift(x % base);\n        x\
    \ = Math.floor(x / base);\n    }\n    l.unshift(x);\n    return l.join('');\n\
    }\n", "    if(base < 2){\n        throw(new Error(`Base ${base} must be greater\
    \ than 1.`));\n    }\n\n    // The number in our input will be multiplied by `base`\
    \ until it hits the number `base` itself.\n    // This way, we avoid any rounding\
    \ errors from floating point math when working with the number `base`.\n    //\
    \ e.g. if base is 2, a number multiplied by 2 will never hit base itself and we\
    \ will never hit 2.\n    // This is why `base` is limited to [2,10).\n    let\
    \ number = x;\n    for(let base = base; base > 1; base--){\n        number *=\
    \ base;\n    }\n\n    // `base` is now limited to [1,10) and the number will be\
    \ multiplied by `base`.\n    // Then the new number will be divided by `base`\
    \ and we will get the number we want.\n    // e.g. if x is 10 and base is 2, 10*2=20\
    \ and 20/2=10\n    // But we also know that 20/base is equal to x/base.\n    //\
    \ So we will get x by dividing number by base.\n    // e.g. if number is 20 and\
    \ base is 2, we will get 10 as result when number is divided by base.\n    return\
    \ number / base;\n}\n</code>\nThe reason why this solution works is because we\
    \ only need to use the number for our computations and only ever convert it to\
    \ base 10 before returning it.\n<|/ a tags=javascript,type-conversion,base,string\
    \ |>\n<| c |>\nA very elegant solution.\n<|/ c |>\n<| c |>\nThank you, this was\
    \ very helpful and I actually learned a lot from it. I did change the base to\
    \ negative numbers and I changed the function a little bit because it was not\
    \ working when `x` was equal to 1. I added some comments for any future readers.\n\
    <|/ c |>\n<| a tags=javascript,type-conversion,base,string |>\nYou can use the\
    \ following function in JavaScript:\n\n<code>", "\tvar x = parseFloat(x);\n\t\
    var b = parseInt(base);\n\n\tif (Math.abs(b) > 10){\n\t\tconsole.log('Base out\
    \ of range!');\n\t\treturn;\n\t}\n\n\tvar res = '';\n\tif (b >= 2){\n\t\tvar rem\
    \ = x % b;\n\t\tres = Math.floor(x/b);\n\t\tres += rem;\n\t} else {\n\t\tres =\
    \ x;\n\t}\n\treturn res;\n}\n", "    var r = x;\n    while (base > 1 && x > 0){\n\
    \        r = r * base % base;\n        base = base * 10;\n    }\n    return r;\n\
    }\n", "\tvar num = x.toString();\n\tif (num.indexOf('.') > -1){\n\t\tvar parts=num.split('.');\n\
    \t\tnum=parts[0]+parts[1]+parts[2].substring(0, base);\n\t}\n\t\n\twhile (num.length<base){\n\
    \t\tnum=\"0\"+num;\n\t}\n\treturn num;\n}\n", "  var digits = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\n\
    \  var base = digits.length - 1;\n  var r = String(base);\n  while(x){\n    x\
    \ = Math.floor(x / base);\n    r += digits[x];\n  }\n  return r;\n}\n\n", "  \
    \  var str = \"\";\n    var digit;\n    while(x != 0){\n        digit = x % base;\n\
    \        x /= base;\n        str += digit;\n    }\n    return str;\n}\n", "  \
    \  var i, j, digits = String(Math.abs(x)).split(''), decimal = String(Math.abs(x)).split('.')[1],\
    \ baseN;\n    // Deal with negatives. Don't write them as (-1).toString(2).\n\
    \    if (decimal[0] === '-') {\n        decimal = decimal.slice(1).split('').reverse().join('');\n\
    \    }\n    // Change base.\n    for (i = digits.length - 1; i >= 0; i--) {\n\
    \        baseN = digits.slice(0, i).reverse().join('');\n        for (j = 0; j\
    \ < base.length; j++) {\n            if (baseN.indexOf(base[j]) > -1) {\n    \
    \            digits[i] = baseN;\n                break;\n            }\n     \
    \   }\n    }\n    // Remove leading zeros.\n    while (i) {\n        digits.unshift(0);\n\
    \        i--;\n    }\n    // Add decimal point where needed.\n    if (decimal.length)\
    \ {\n        digits.push('.');\n        decimal.forEach(function(x) {\n      \
    \      digits.push(decimal.slice(x - 1, x + 1).join(''));\n        });\n    }\n\
    \    return digits.reverse().join('');\n}\n", "    var r = new BigInt()\n    r.fromInt(0)\n\
    \    for(var i = x.length - 1; i > 0; --i){\n        var v = new BigInt()\n  \
    \      r.multiply(new BigInt(base)).multiply(v)\n        r.multiply(new BigInt(10)).add(v.fromInt(digitToInt(x[i])))\n\
    \    }\n    return r.toString()\n}\n", "    var str = x.toString(base);\n    return\
    \ str.length < 3 ? str + '0' : str;\n}\n", "    var r = \"\";\n    var digits\
    \ = \"\";\n    while(true){\n        var rem = x % base;\n        if(rem === 0){\n\
    \            if(digits !== \"\"){\n                r += digits;\n            }\n\
    \            break;\n        }\n        digits = digits;\n        digits = digits.length\
    \ ? base.charAt(digits.length-1) + digits : \"\";\n        x = x / base;\n   \
    \ }\n    return r;\n}\n", "    var digits = x.toString().split('');\n    return\
    \ digits.length < base ? digits.length + base : digits;\n}\n\n", "\tvar b = String(base);\n\
    \tvar x = String(x);\n\tvar regExp = new RegExp(b.substr(0,1) + \"$\", \"g\");\n\
    \n\tif (base > b.length - 1) {\n\t\tthrow \"The base \" + base + \" is greater\
    \ than the specified number \" + b + \".\";\n\t} else if (base < 1) {\n\t\tthrow\
    \ \"The base \" + base + \" is less than the specified number \" + b + \".\";\n\
    \t} else if (base==1 && x.match(/^[0-9]+$/)){\n\t\tthrow \"Base \" + base + \"\
    \ is equal to 1 and cannot represent \" + x + \" as a number.\";\n\t} else if\
    \ (x.match(/^[0-9]+$/)){\n\t\treturn x;\n\t} else if (x.match(/^[0-9]+$/)) {\n\
    \t\tvar regExp = new RegExp(b.substr(0,1) + \"$\", \"g\");\n\t\tvar num = x.replace(regExp,\
    \ function(m){return b.substr(0,m.length+1);});\n\t\treturn num;\n\t} else if\
    \ (base>9) {\n\t\tthrow \"The base \" + base + \" is greater than the specified\
    \ number \" + b + \".\";\n\t} else {\n\t\tvar regExp = new RegExp(b.substr(0,1)\
    \ + \"$\", \"g\");\n\t\tvar num = x.replace(regExp, function(m){return b.substr(0,m.length+1);});\n\
    \t\tvar regExp = new RegExp(b.substr(0,1) + \"[0-9]+$\", \"g\");\n\t\tnum = num.replace(regExp,\
    \ function(m){return b.substr(0,m.length+1);});\n\t\tvar regExp = new RegExp(b.substr(0,1)\
    \ + \"[0-9]+\", \"g\");\n\t\tnum = num.replace(regExp, function(m){return b.substr(0,m.length+1);});\n\
    \t\tvar regExp = new RegExp(b.substr(0,1) + \"[0-9]*$\", \"g\");\n\t\tnum = num.replace(regExp,\
    \ function(m){return b.substr(0,m.length+1);});\n\t\tvar regExp = new RegExp(b.substr(0,1)\
    \ + \"[0-9]\", \"g\");\n\t\tnum = num.replace(regExp, function(m){return b.substr(0,m.length+1);});\n\
    \t\tvar regExp = new RegExp(b.substr(0,1) + \"[0-9]$\", \"g\");\n\t\tnum = num.replace(regExp,\
    \ function(m){return b.substr(0,m.length+1);});\n\t\tvar regExp = new RegExp(b.substr(0,1)\
    \ + \"[0-9]*\", \"g\");\n\t\tnum = num.replace(regExp, function(m){return b.substr(0,m.length+1);});\n\
    \t\tvar regExp = new RegExp(b.substr(0,1) + \"[0-9]\", \"g\");\n\t\tnum = num.replace(regExp,\
    \ function(m){return b.substr(0,m.length+1);});\n\t\tvar regExp = new RegExp(b.substr(0,1)\
    \ + \"[0-9]$\", \"g\");\n\t\tnum = num.replace(regExp, function(m){return b.substr(0,m.length+1);});\n\
    \t\treturn num;\n\t}\n}\n<|/ file "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
