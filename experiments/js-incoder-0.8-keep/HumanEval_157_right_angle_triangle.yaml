name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ["    var is_right_angled = false\n\n    // TODO: Write a function that\
    \ calculates whether three sides of a triangle form \n    // an equilateral triangle\n\
    \    // You might need to use Math.atan2()\n    \n    return is_right_angled\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you're trying to test if the\
    \ sides of a triangle form an equilateral triangle, you're just calculating the\
    \ angles of the two sides, and checking if either is 90 degrees.\n<code>", " \
    \ \n  //First we check if:\n  //a^2 + b^2 = c^2\n  //By checking if both sides\
    \ are the same or one of them is 0, we know that \n  //one of the sides is definitely\
    \ not 90 degrees.\n  var sidesNotSame = a != b || a != c || b != c;\n  \n  //Check\
    \ if the other two sides are equal.\n  var sidesEqual = a == b || a == c || b\
    \ == c;\n  \n  //Check if the other two sides are both greater than 0\n  var sidesGreaterThanZero\
    \ = a > 0 || b > 0 || c > 0;\n  \n  //Return True or False\n  return (sidesNotSame\
    \ && sidesEqual && sidesGreaterThanZero);\n}\n", "\tvar isRight = true;\n\t//\
    \ Check if any two of three sides are equal\n\tif (a == c && b == c || a == b){\n\
    \t\treturn true;\n\t}\n\t// Check if any of three sides are 90 degree\n\tvar angle\
    \ = Math.acos( Math.pow( (a-c), 2 )/ Math.pow(b, 2) );\n\tvar result = ((angle\
    \ <= 90 ) && (angle >= 0))\n\treturn result;\n}\n", "    if(a*a + b*b - c*c <\
    \ 0){\n        return false;\n    }\n    else{\n        var d = Math.sqrt(b*b\
    \ - a*a);\n        if(a == b){ //Equilateral triangle\n            return Math.abs((Math.sqrt(a\
    \ * a + c * c - d) * Math.atan2(b,a)) % 180 ) == 0;\n        }\n        else if(a\
    \ == c){ //Isosceles triangle\n            return Math.abs((Math.sqrt(a * a -\
    \ c * c + d) * Math.atan2(b,a)) % 180 ) == 0;\n        }\n    }\n}\n</code>\n\
    <|/ a |>\n<| a tags=python,math |>\n<code>\ndef isRightAngle(a,b,c):\n    return\
    \ (a*a + b*b - c*c < 0 and (a == b or a == c or b == c))\n\nassert isRightAngle(1,\
    \ 3, 3) == True\nassert isRightAngle(5, 3, 3) == False\nassert isRightAngle(3,\
    \ 4, 5) == True\nassert isRightAngle(1, 5, 4) == True\nassert isRightAngle(1,\
    \ 5, 3) == True\nassert isRightAngle(1, 4, 3) == False\nassert isRightAngle(5,\
    \ 1, 3) == False\nassert isRightAngle(5, 5, 1) == True\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nPlease explain what this code does and how it does it. Also, add\
    \ some comments to it explaining the logic. Don't just post an answer.\n<|/ c\
    \ |>\n<| c |>\nIt just check if side lengths are less than 0.\n<|/ c |>\n<| c\
    \ |>\nThis code is not the best as it checks for angle equal to zero but does\
    \ not check for triangle inequality. The inequality is also missing in the answer.\n\
    <|/ c |>\n<| a |>\nTo check if all three sides are equal:\n<code>\ndef check(a,\
    \ b, c):\n    return (a==b and b==c) or (a==c or b==c)\n\nprint(check(2, 5, 6))\
    \ # True\n</code>\nTo check if all three sides are different from each other:\n\
    <code>\ndef check(a, b, c):\n    return (a!=b or b!=c) or (a!=c or b!=c)\n\nprint(check(2,\
    \ 5, 6)) # False\n</code>\n<|/ a dscore=1 tags=python,math |>\n<| a |>\n<code>\n\
    def is_right_angle(a, b, c):\n    return ((b * b - a * a) * (c + b - a) * (b -\
    \ c)) < 0\n\nis_right_angle(1, 3, 3) \n</code>\nThis solution checks if three\
    \ sides are equal. \n<code>\nis_right_angle(5, 3, 3)\n</code>", "    var ab =\
    \ abSqr(a , b, c),\n        bc = bcSqr(a , b, c),\n        ac = acSqr(a , b, c);\n\
    \        \n    if(ab === bc && ab === ac){\n        return true;\n    }\n    return\
    \ false;\n}\n", "\tvar d = b*b - 4*a*c;\n\treturn d > 0;\n}\n", "    return (b\
    \ - a) * (c - b) <= 0;\n}\n", "    if(a==b && b==c && c==a){\n        return true;\n\
    \    }\n    if(Math.abs(a-b)>90 && Math.abs(b-c)>90 && Math.abs(c-a)>90){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    return (b==0 || (b==2\
    \ && a==c));\n}\n", "    if (a == 0 | b == 0 | c == 0) {\n        return false;\n\
    \    } else if (a >= c || c >= b) {\n        return false;\n    }\n    var sqrtA\
    \ = Math.sqrt(a);\n    var sqrtC = Math.sqrt(c);\n    return (sqrtA * sqrtC) >\
    \ (sqrtA * sqrtB);\n}\n", "  return (b === 0 && c === 0) || (a === 0 && (b > 0\
    \ || c > 0));\n}\n", "    var ab = a - b, ac = a - c;\n    return (ab + Math.sqrt(ab\
    \ * ab + ac * ac)) < (a + b + c);\n}\n", "  var ab = abs(b - a);\n  var ac = abs(c\
    \ - a);\n  var sa = min(a, b);\n  var sb = max(a, b);\n  var sc = min(c, b);\n\
    \  var sd = max(c, b);\n  return (ab >= sc && sb == sc && ac >= sd && sa == sd);\n\
    }\n", "\t\n\treturn ((b*b + c*c - a*a) <= 0.01);\n\t\n}\n</cell>\n<cell>", " \
    \   console.log(\"a: \" + a + \", b: \" + b + \", c: \" + c);\n    console.log(\"\
    a = \" + a + \"|b = \" + b + \"|c = \" + c);\n    var ab = ab_cal(a,b,c);\n  \
    \  console.log(\"ab: \" + ab);\n    console.log(\"b: \" + b);\n    var bc = b_cal(b,c);\n\
    \    console.log(\"bc: \" + bc);\n    var bc = ab + bc;\n    console.log(\"bc:\
    \ \" + bc);\n    console.log(\"a + b + c = \" + a + b + c);\n    var check = a\
    \ + b + c == bc + ab;\n    console.log(\"check: \" + check);\n    console.log(\"\
    a|b|c = \" + ab + \"|\" + bc + \"|\" + c);\n    return check;\n}\n", "  if(is_right_angle(a,\
    \ b, c, a, b+c, b+a, c+b, b+c)){\n    return true;\n  }\n  return false;\n}\n",
  "    return (((b - a) * (c - b)) <= 0.01);\n}\n\n", "\t// console.log(\"a: \" +\
    \ a + \", b: \" + b + \", c: \" + c);\n\tif(a+b > c)return false;\n\tif(c > b+a)return\
    \ false;\n\treturn true;\n}\n", "    return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2)) == Math.pow(c, 2)) && (a == c || b == c)) || ((Math.sqrt(Math.pow(a, 2)\
    \ + Math.pow(b, 2)) == Math.pow(b, 2)) && (a == c || b == c));\n}\n", "    var\
    \ ab = (b - a),\n        ac = (c - a),\n        ap = ab / ac,\n        bp = ab\
    \ - ap * ac,\n        ans = bp / ab;\n    return ((ans <= 1) || (ans >= 0));\n\
    }\n", "  // Write your code here.\n  if((a-b) * (c-a) == (c-b) * (a-c)){\n   \
    \ return true\n  }\n  return false\n}", "  var aSquared = AQUARER * A;\n  var\
    \ bSquared = BQUARER * B;\n  var cSquared = CQUARER * C;\n  var n1 = A * (A *\
    \ aSquared + (A * b + A * c));\n  var n2 = B * (B * aSquared + (B * b + B * c));\n\
    \  var n3 = C * (C * aSquared + (C * b + C * c));\n  var nab = A * n1 + B * n2\
    \ + C * n3;\n  if (nab < 0) {\n    return false;\n  }\n  var det = A * (B * n3\
    \ - C * n2) - (B * n1 + C * n3);\n  return det > 0;\n}\n", "    var angle1 = Math.acos((c-a)*(c-a)\
    \ + (b-a)*(b-a));\n    var angle2 = Math.acos((c-b)*(c-b) + (a-b)*(a-b));\n  \
    \  var angle3 = Math.acos((c-c)*(c-c) + (a-c)*(a-c));\n    return (angle1<angle2\
    \ && angle1<angle3) || (angle2<angle1 && angle2<angle3);\n}\n", "    var ac =\
    \ abs(a * b - c * c);\n    if (ac > 0){\n        var angle = Math.acos(a / ac);\n\
    \        if(angle > 0){\n            if(a < 0){\n                angle *= -1;\n\
    \            }\n            return true;\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,geometry,algorithm,math |>\n\
    The question is what do you define as a right angled triangle and what you define\
    \ as 'angle'.\nIf you define the triangle as right angled if the sum of the angles\
    \ is greater than 180 degree, what do you define as 'angle'?\nIf you define the\
    \ triangle as right angled if the sum of the angles is greater than 180 degree\
    \ then you define the triangle as 'right angled'. The triangle is right angled\
    \ if all three sides are the same length. This means that if you're defining the\
    \ triangle as 'right angled' you're going to have to check your inputs at least\
    \ twice.\nThe definition of angle depends on what you mean by 'angle'. The answer\
    \ to the last part depends on whether you're talking about an angle in the plane\
    \ of a triangle or an angle on the surface of a triangle.\nIf you define the angle\
    \ as 'angle on the surface of a triangle' the triangle is right angled if the\
    \ sum of angles on the three sides is 90 degrees. If you define angle as 'angle\
    \ on the plane of a triangle' the triangle is right angled if the sum of angles\
    \ on the three sides is 45 degrees.\nThis means you can define your function to\
    \ be:\n<code>", "  // make sure all params are numbers, not strings\n  a = Number(a);\n\
    \  b = Number(b);\n  c = Number(c);\n  // make sure all params are positive\n\
    \  if (a < 0){\n    a = 0;\n  }\n  else if (b < 0){\n    b = 0;\n  }\n  else if\
    \ (c < 0){\n    c = 0;\n  }\n  // test if triangle is valid\n  if (a + b >= c\
    \ || a + c >= b || b + c >= a){\n    return false;\n  }\n  // triangle is valid\n\
    \  return true;\n}\n", "  var ab = abyz(a, b, c)\n  if(ab[0] != ab[1] && ab[0]\
    \ != ab[2] && ab[0] != ab[3])\n    return false\n  var a2 = ab[0]\n  var c2 =\
    \ ab[1]\n  var b2 = ab[2]\n  var a = a2\n  var c = c2\n  var b = b2\n  abyz(a,\
    \ b, c)\n  var aa = ab[0]\n  var ac = ab[1]\n  var ab = ab[2]\n  var bc = ab[3]\n\
    \  var c = c2\n  abyz(a, b, c)\n  var a1 = aa\n  var c1 = ac\n  var b1 = ab\n\
    \  var a = a1\n  var c = c1\n  var b = b1\n  abyz(a, b, c)\n  var a0 = aa\n  var\
    \ c0 = ac\n  var b0 = ab\n  if(abs(a0 - b0) < 1e-12)\n    return true\n  if(abs(a0\
    \ - c0) < 1e-12)\n    return true\n  return false\n}\n", "    if(is_colinear(a,\
    \ b, c))\n        return true\n    if (Math.abs(b-c) < 0.00001)\n        return\
    \ true\n    if (Math.abs(a-c) < 0.00001)\n        return true\n\n    // Colinear\
    \ case\n    // Check if one vertex is on the wrong side of the line formed by\
    \ the\n    // two other vertices\n    var d = (b-c) * .25\n    var e = ((a-c)\
    \ + d) * .25\n    var f = (a-b) + d\n    var g = -(b-c) - d\n\n    // See if either\
    \ vertex is the wrong side of the line\n    // If one vertex is on the wrong side\
    \ of the line, the triangle is a\n    // right-angled triangle\n    var isRight\
    \ = Math.abs(e) > Math.abs(f)\n    if (Math.abs(e) < Math.abs(f)){\n        return\
    \ isRight\n    }\n\n    // If both vertices are on the wrong side of the line,\
    \ then it is not\n    // a right-angled triangle\n    var isLeft = Math.abs(g)\
    \ > Math.abs(f)\n    return isRight != isLeft\n}\n", "    var ad = abs(a-b), bc\
    \ = abs(b-c), ca = abs(c-a)\n    return (ad==bc) && (bc==ca)\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 tags=javascript,algorithm |>\n<code>", "  if((b\
    \ - a) * (c - b) < 0){\n    return false;\n  }\n  if(a * c > b * d){\n    return\
    \ true;\n  }\n  return false;\n}\n\n", "  let x = b - a;\n  let y = c - b;\n \
    \ if (x*x + y*y < 1) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "\tvar ac = a * c, bc = b * c;\n\treturn (ac + bc) > Math.sqrt(Math.pow(ac,\
    \ 2) + Math.pow(bc, 2)); \n}", "    var s = Math.sqrt((b * b) - (4 * a * c));\n\
    \    return (s >= 0) ? true : false;\n}\n</code>\n<|/ a tags=c#,boolean |>\n<|\
    \ a tags=c#,boolean dscore=0 |>\n<code>\nbool areTheSame = (\n    firstValue ==\
    \ secondValue\n    && firstValue == thirdValue\n    && firstValue == fourthValue);\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nbool are_the_same = (a1 == a2 &&\
    \ b1 == b2 && c1 == c2);\n</code>\n<|/ a tags=c#,boolean |>\n<| c |>\nHi, welcome\
    \ to Stack Overflow! While this code may answer the question, providing additional\
    \ context regarding *why* and/or *how* this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| c |>\n`bool are_the_same = (a1 == a2 && b1\
    \ == b2 && c1 == c2);` will be enough to compare all values not only first one.\n\
    <|/ c |>\n<| a dscore=0 |>\nTry this, its so simple and elegant\n<code>\nbool\
    \ AreEqual(int x,int y,int z){\n    if(x==y&&x==z){\n        return true;\n  \
    \  }\n    return false;\n}\n</code>\n<|/ a tags=c#,boolean |>\n<| a dscore=0 tags=c#,boolean\
    \ |>\n<code>\nbool areTheSame = \n(firstValue == secondValue && firstValue ==\
    \ thirdValue && firstValue == fourthValue);\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    \ public Boolean AreEqual(Integer x, Integer y, Integer z)\n    {\n        return\
    \ (x.Equals(y) && x.Equals(z));\n    }\n\n    Boolean areEqual = AreEqual(1,3,1);\n\
    \    Boolean areEqual = AreEqual(1,3,2);\n    Boolean areEqual = AreEqual(2,1,3);\n\
    \    Boolean areEqual = AreEqual(2,1,4);\n    Boolean areEqual = AreEqual(2,3,1);\n\
    \    Boolean areEqual = AreEqual(2,3,2);\n    Boolean areEqual = AreEqual(1,2,3);\n\
    </code>\n<|/ a tags=c#,boolean dscore=0 |>\n<| a tags=c#,boolean |>\n<code>\n\
    bool areTheSame = \n(a1 == a2 && b1 == b2 && c1 == c2);\n</code>\nWill only check\
    \ first three values.\n<code>\nbool areTheSame = \n(a1 == a2 && b1 == b2 && c1\
    \ == c2) && (a", "\tlet ac = abs(a - c);\n\tlet bc = abs(b - c);\n\tlet isRightAngle\
    \ = (ac + bc) > (a + b) ? true : false;\n\treturn isRightAngle;\n}\n", "\tlet\
    \ a1 = Math.abs(a);\n\tlet a2 = Math.abs(b);\n\tlet a3 = Math.abs(c);\n\tlet b1\
    \ = Math.abs(a1 - a2 - a3);\n\tlet b2 = Math.abs(b1 - a1 - a3);\n\tlet c1 = Math.abs(a1\
    \ - b2 - b3);\n\tlet c2 = Math.abs(b1 - b2 - c3);\n\tlet c3 = Math.abs(a1 - c2\
    \ - c3);\n\treturn ((b1 == b2) && (b2 == c3) && (c1 == c2)) || ((b1 == c2) &&\
    \ (c2 == c3) && (a1 == a2));\n}\n", "\t\n\tif (Math.abs(a * Math.sin(b*Math.PI\
    \ / 180)+ b* Math.cos(c*Math.PI / 180)+ c* Math.sin(c*Math.PI / 180))\n\t> Math.abs(a*Math.cos(b*Math.PI\
    \ / 180) + b*Math.sin(c*Math.PI / 180) + c* Math.cos(c*Math.PI / 180))) \n\t{\n\
    \t\treturn true\n\t}\n\treturn false\n}\n", "  let angle1 = Math.atan2(a, b);\n\
    \  let angle2 = Math.atan2(c,b);\n  let angle3 = Math.atan2(c,a);\n  if (Math.abs(angle1\
    \ - angle2) < angle_tolerance) \n    return true;\n  else if (Math.abs(angle2\
    \ - angle3) < angle_tolerance) \n    return true;\n  else \n    return false;\n\
    }\n", "    let a_1 = Math.sqrt(Math.pow(a, 2)-Math.pow(b,2));\n    let b_1 = Math.sqrt(Math.pow(b,\
    \ 2)-Math.pow(c,2));\n    let c_1 = Math.sqrt(Math.pow(c, 2)-Math.pow(a,2));\n\
    \    \n    return ((a_1 + b_1-2*a_1)/(c_1 + b_1-a_1)>=0) && ((a+b+c-a-b-c)/(Math.sqrt(Math.pow(a,\
    \ 2)+Math.pow(b,2)+Math.pow(c,2)-Math.pow(a, 2)-Math.pow(b,2)-Math.pow(c,2)) <0));\n\
    }\n", "    if(isPositiveNumber(a) && isPositiveNumber(b) && isPositiveNumber(c)){\n\
    \        if((b - a) * (c - b) <= 0){\n            return false\n        }\n  \
    \      if((a * b) - c > (b * c)){\n            return false\n        }\n     \
    \   return true;\n    }\n    return false;\n}\n", "  return (angle_of_triangle(a,\
    \ b, c) == 180);\n}\n", "\tvar isRightAngle = false;\n\tif (Math.abs(a-b) <= Math.sqrt(Math.pow(b,\
    \ 2)+Math.pow(a, 2))) {\n\t\tisRightAngle = true;\n\t}\n\telse if((b * b - 4 *\
    \ a * c) < 0) {\n\t\tisRightAngle = false;\n\t}\n\telse {\n\t\tisRightAngle =\
    \ true;\n\t}\n\treturn isRightAngle;\n}\n", "\treturn (a==b||a==c)&&(b==c||a==c&&b==c);\n\
    }\n", "  return (((b * b) - 4 * (a * c)) == -((b * b) - 4 * (a * a + b * b)))\n\
    }\n", "  const isRightAngle = (a,b,c) => {\n    return (a>b) && (b>c) && (c>a);\
    \ \n  }\n  if(isRightAngle(a,b,c)){\n    return true;\n  }\n  if(isRightAngle(b,c,a)){\n\
    \    return true;\n  }\n  return false;\n}\n", "\tif (Math.abs(a * b - c) > Math.PI\
    \ / 2.)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\n", "  if((b - a)*(c\
    \ - b) < 0){\n    return false;\n  }\n  if((b - a)*(a - b) < 0){\n    return true;\n\
    \  }\n  if((c - a)*(a - b) < 0){\n    return true;\n  }\n  return false;\n}\n",
  "  if (Math.abs(a) > Math.abs(b)){\n    if (Math.abs(a) > Math.abs(c)){\n      if\
    \ (b > c){\n        return true;\n      }\n    }\n    else {\n      if (a > c){\n\
    \        return true;\n      }\n    }\n  }\n  else {\n    if (Math.abs(b) > Math.abs(c)){\n\
    \      if (a > c){\n        return true;\n      }\n    }\n    else {\n      if\
    \ (b > c){\n        return true;\n      }\n    }\n  }\n  return false;\n}", " \
    \   return (a + b + c) % 2 === 1;\n}\n", "\tif((b - c) != 0){\n\t\treturn false;\n\
    \t}\n\tif((a - b) == 0){\n\t\treturn (c-a) == (b-a);\n\t}\n\tif((b - a) == 0){\n\
    \t\treturn (c-b) == (b-a);\n\t}\n\treturn ((b - c) * (a + b) - (a - b) * (c +\
    \ a)) <= 0;\n}\n", "\tif((b === 0) || (b === -a || b === -c)) return false;\n\t\
    if((c === 0) || (c === -b || c === -a)) return false;\n\treturn (((b > c) && (c\
    \ > a)) || ((b > c) && (c > -b)) || ((b > c) && (c > -a)) == (a >= -c));\n};\n",
  "\tvar isRight = false;\n\tvar xDiff = b - a;\n\tvar yDiff = c - b;\n\tvar angle\
    \ = Math.round(Math.atan2(yDiff, xDiff) * (180 / Math.PI));\n\n\tif(angle <= 90){\n\
    \t\tisRight = true;\n\t}\n\treturn isRight;\n}\n", "\tvar tan_a = Math.tan(a *\
    \ Math.PI / 180);\n\tvar tan_b = Math.tan(b * Math.PI / 180);\n\tvar tan_c = Math.tan(c\
    \ * Math.PI / 180);\n\tif(tan_a >= tan_b && tan_a >= tan_c){\n\t\treturn true;\n\
    \t}else{\n\t\treturn false;\n\t}\n}\n", "    //Find the hypotenuse of right angle\
    \ triangle. \n    var b_hypo = calculate_hypotenuse(b, c)\n    //Find the length\
    \ of other side\n    var c_hypo = calculate_hypotenuse(a, b)\n    //Find the hypotenuse\
    \ of the middle angle\n    var m_hypo = calculate_hypotenuse(a, b) \n    //Return\
    \ True if middle hypotenuse is greater or equal to b. \n    return (m_hypo >=\
    \ b_hypo)\n}\n", "  return ((c*b) > (a*b));\n}\n", "    return (((b - a) * (c\
    \ - b)) <= 0 );\n}\n", "  \n  var angle1 = Math.atan2(a, b);\n  var angle2 = Math.atan2(c,\
    \ b);\n  \n  return angle1 < angle2;\n}\n", "  return ((Math.abs(Math.sin(a/2))<=Math.cos(b/2))\
    \ && (Math.abs(Math.sin(b/2))<=Math.cos(a/2)) && (Math.abs(Math.sin(c/2))<=Math.cos(b/2)));\n\
    }\n", "    var s = (b * c) - (a * b);\n    return ((s <= 0) || ((-1 * b) == Math.sqrt(Math.pow((s\
    \ * s), 0.5))));\n}\n</code>\n<|/ a |>\n<| c |>\nThe code you post seems very\
    \ good. But I don't understand it... could you please edit it and make it clearer?\
    \ Thanks\n<|/ c |>\n<| c |>\nI added an explanation, hope this helps. Let me know\
    \ if you need anymore help.\n<|/ c |>\n<| c |>\nThanks for your reply. But, I\
    \ am still not sure whether I have to use an if statement to check whether the\
    \ user has entered a correct answer, since I am not sure how to check if the user\
    \ has entered a right answer or not? Could you please explain that part?\n<|/\
    \ c |>\n<| c |>\nI just updated the code. I removed that check. Can you try it\
    \ out?\n<|/ c |>\n<| c |>\nYou still have the check `if (user_answer==answer_a)\
    \ ...` so I think this solution doesn't work.\n<|/ c |>\n<| a dscore=0 |>\nI am\
    \ going to put a solution with different code structure, but I am not sure if\
    \ it will help you:\n<code>\nvar right_angle = (triangle[1]+triangle[2])/2 < (triangle[0]+triangle[3])\
    \ ? (triangle[1]+triangle[2])/2 : (triangle[0]+triangle[3])/2;\n\nif (right_angle)\
    \ {\n    alert(\"You are right angle!\");\n} else {\n    alert(\"You are wrong!\"\
    );\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThat is what I wanted, but\
    \ how do I check whether the user has entered a correct answer or not? I have\
    \ put some codes in my original post. Can you please check whether they work?\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "\tif( a == b || a == c || b ==\
    \ c ){\n\t\treturn false;\n\t}\n\tvar angle = Math.asin( a / b );\n\tvar degree\
    \ = angle * 180 / Math.PI;\n\tif( degree < 90 ){\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\n", "    var ab = Math.sqrt(a*a + b*b);\n    var ac = Math.sqrt(a*a\
    \ + c*c);\n    var bc = Math.sqrt(b*b + c*c);\n    \n    var ab_ac = Math.sqrt(ab*ab\
    \ + ac*ac);\n    var ab_bc = Math.sqrt(ab*ab + bc*bc);\n    var ac_ab = Math.sqrt(ac*ac\
    \ + ab*ab);\n    var bc_ab = Math.sqrt(bc*bc + ab*ab);\n    \n    if (Math.abs(ab_ac\
    \ - ab_bc) >= ab + bc && Math.abs(ac_ab - bc_ab) >= ac + ab){\n        return\
    \ true;\n    }\n    return false;\n}\n", "  let ac = Math.abs(a - c);\n  let bc\
    \ = Math.abs(b - c);\n  let ca = Math.abs(a - b);\n  if(ac > bc && ac > ca) return\
    \ true;\n  if(bc > ca && bc > ac) return true;\n  return false;\n}\n", "    var\
    \ l1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    var l2 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(c, 2));\n    var l3 = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n\
    \n    var a1 = ((a / l1) * l2);\n    var a2 = ((b / l1) * l2);\n    var a3 = ((c\
    \ / l1) * l2);\n\n    var b1 = ((a / l1) * l3);\n    var b2 = ((b / l1) * l3);\n\
    \    var b3 = ((c / l1) * l3);\n\n    var c1 = ((a / l2) * l3);\n    var c2 =\
    \ ((b / l2) * l3);\n    var c3 = ((c / l2) * l3);\n\n    if(a1 + b1 + c1 == a2\
    \ + b2 + c2 == a3 + b3 + c3){\n        return true;\n    }\n\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| a tags=math,geometry dscore=0 |>\n<code>", "  var ab\
    \ = a-b;\n  var ac = c-a;\n  var bc = b-c;\n  var abc = ab * ac;\n  var ab_c =\
    \ bc * ab;\n  return ab == ab_c;\n}\n\n", "\tif (a > b && a > c){\n\t\treturn\
    \ true;\n\t}\n\tif (b > c && b > a){\n\t\treturn true;\n\t}\n\tif (a > c && a\
    \ > b){\n\t\treturn true;\n\t}\n\tif (b > a && b > c){\n\t\treturn true;\n\t}\n\
    \treturn false;\n}\n", "  // We only need to check one triangle \n  // (not double\
    \ test triangle that would \n  // require two calls to check each side)\n  if\
    \ (a==b&&b==c) return true;\n  else if (a==c&&c==b) return true;\n  else if (b==c)\
    \ return true;\n  else return false;\n}\n\n", "\tvar l1 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n\tvar l2 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2));\n\
    \tvar l3 = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n\tvar rad = Math.acos((a\
    \ * a + b * b - c * c) / (2 * l1 * l2));\n\tif(rad >= 0)\n\t\treturn true;\n\t\
    else\n\t\treturn false;\n}", "  \n    // Check that the three sides are not null\n\
    \    if (a !== null & b !== null & c !== null){\n\n    // Calculate the hypotenuse\
    \ of the right triangle\n    var h = sqrt((a * a) + (b * b) + (c * c))\n\n   \
    \ // Check if the three sides are equal\n    if (h === 0){\n      return false\n\
    \    }\n    // Check if the hypotenuse is greater than the length of the three\
    \ sides\n    if (h > a * a + b * b + c * c){\n      return true\n    }\n    }\n\
    \    return false\n}", "  var is_right_angle = false;\n  var d1,d2;\n  d1 = b\
    \ - a;\n  d2 = c - a;\n  \n  if(d1 == 0){\n    if(d2 == 0){\n      is_right_angle\
    \ = true;\n    } else {\n      return false;\n    }\n  } else if(d2 == 0){\n \
    \   if(d1 == 0){\n      is_right_angle = true;\n    } else {\n      return false;\n\
    \    }\n  } else {\n    if(d1*d2 > 0){\n      is_right_angle = true;\n    }\n\
    \  }\n  \n  return is_right_angle;\n}\n", "    let a1 = a % 10\n    let a2 = a\
    \ / 10\n    let b1 = b % 10\n    let b2 = b / 10\n    let c1 = c % 10\n    let\
    \ c2 = c / 10\n\n    if((a1 == b1) & (b2 == c1)){\n        console.log(\"True\"\
    )\n        return true\n    }\n    else if((a1 == b1) & (b2 == c2)){\n       \
    \ console.log(\"True\")\n        return true\n    }\n    else if((a1 == c1) &\
    \ (b2 == c2)){\n        console.log(\"True\")\n        return true\n    }\n  \
    \  else if((a1 == c1) & (b2 == b2)){\n        console.log(\"True\")\n        return\
    \ true\n    }\n    else if((a1 == b2) & (b2 == c2)){\n        console.log(\"True\"\
    )\n        return true\n    }\n    else if((a1 == b2) & (b2 == a1)){\n       \
    \ console.log(\"True\")\n        return true\n    }\n    else if((a1 == c2) &\
    \ (b2 == c1)){\n        console.log(\"True\")\n        return true\n    }\n  \
    \  else if((a1 == c2) & (b2 == b1)){\n        console.log(\"True\")\n        return\
    \ true\n    }\n    else{\n        console.log(\"False\")\n        return false\n\
    \    }\n\n}", "\tvar delta = Math.sqrt(Math.pow(b,2) - (4 * a * c));\n\treturn\
    \ (Math.sqrt(Math.pow(a, 2) - (4 * (b*b))), delta);\n}\n", "\tvar ac = Math.sqrt(a*a\
    \ + b*b), // the absolute value of ac \n\t\tbc= Math.sqrt(b*b + c*c), // the absolute\
    \ value of bc\n\t\tab= Math.sqrt(a*a + b*b), // the absolute value of ab\n\t\t\
    abc = ac + bc;          // the sum of ac and bc\n\n\tif(bc > ab){\n\t\tif((bc\
    \ > ab) && (ab > ac)){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\
    else{\n\t\tif((ab > ac) && (bc > ab)){\n\t\t\treturn true;\n\t\t}\n\t\treturn\
    \ false;\n\t}\n}\n", "    if ( (Math.abs(a) == Math.round(a)) && (Math.abs(b)\
    \ == Math.round(b)) && (Math.abs(c) == Math.round(c) )){\n        if( b - a ==\
    \ c ){\n            return true;\n        }else{\n            if( a == c ){\n\
    \                return ( b > 0 )\n            }\n        }\n    }else{\n    \
    \    return false;\n    }\n}\n", "\tif(a==b && b==c){\n\t\treturn true;\n\t}\n\
    \tif(a==b){\n\t\treturn c>b?true:false;\n\t}\n\treturn b>c?true:false;\n}\n",
  "    // base case\n    if (a<=0 || b<=0 || c<=0){\n        return false;\n    }\n\
    \    var delta = Math.sqrt(Math.pow((a-c),2) + Math.pow((b-a),2));\n    return\
    \ delta <= Math.pow((b+c),0.5);\n}", "    return (a + b > c + a) && (a + c > b\
    \ + a) && (b + c > a + b)\n}", "    let ac = a * c,\n        bc = b * c;\n   \
    \ return (bc == ac) && (a - b) == (b - c);\n}\n", "    if(a<b){\n        if(a<c){\n\
    \            return false;\n        }\n        return (c>b);\n    }\n    if(b<a){\n\
    \        return (b<c);\n    }\n    if(c<a){\n        return false;\n    }\n  \
    \  return false;\n}\n", "    //base condition\n    if(!(a==0 || b==0 || c==0)){\n\
    \        if(a==b){\n            return c==b+a ? true : false;\n        }\n   \
    \     else if(b==c){\n            return a==b+c ? true : false;\n        }\n \
    \       else{\n            return a==c+b ? true : false;\n        }\n    }\n \
    \   return false;\n}\n</code>\n<|/ a tags=java,algorithm,math |>\n<| a tags=java,algorithm,math\
    \ dscore=0 |>\nThis doesn't seem to be a Java specific problem. Here are the rules\
    \ to determine if a triangle is right-angled.\nIf the triangle has an equilateral\
    \ triangle on it then it is right-angled. We check whether the hypotenuse is either\
    \ equal to or greater than the sum of the two sides.\nIf the hypotenuse is equal\
    \ to the sum of the two sides, or the hypotenuse is less than the sum of the two\
    \ sides, then the triangle is not right-angled. \nIf the hypotenuse is less than\
    \ the sum of the two sides then the triangle is right-angled. \nIf the hypotenuse\
    \ is greater than the sum of the two sides then the triangle is NOT right-angled.\n\
    <|/ a |>\n<| c |>\nI think this would fail on the triangle `(2,3,4)`\n<|/ c |>\n\
    <| c |>\nThis works just fine. Try it out by taking the sum of the sides and subtracting\
    \ the hypotenuse (which should equal the sides). If the sum of the two sides is\
    \ less than the hypotenuse, then the triangle is not right-angled.\n<|/ c |>\n\
    <| c |>\nOh, I see. Thanks. I didn't think of that.\n<|/ c |>\n<| a dscore=0 |>\n\
    Here is my implementation of a function that determines if a triangle is right-angled\n\
    <code>\nstatic boolean isTriangleRightAngled(double a1, double b1, double c1,\
    \ double a2, double b2, double c2, double a3, double b3, double c3) {\n    //\
    \ check whether the side lengths are equal\n    // if not, return false\n    boolean\
    \ sidesAreEqual = a1 == a2 && b1 == b2 && c1 == c2;\n\n    // if all 3 sides are\
    \ equal, then triangle is right angled\n    if (sidesAreEqual) {\n        return\
    \ true;\n    }\n\n    // if all 3 sides are equal, then triangle is right angled\n\
    \    // if any of the sides are equal, then triangle is NOT right-angled\n   \
    \ boolean sidesAreEqual = a1 == a2 && b1 == b2 && c1 == c2;\n    boolean ", " \
    \ if (Math.abs(a) > Math.abs(b) && Math.abs(a) > Math.abs(c)) {\n    var ac =\
    \ a - c;\n    var bc = b - c;\n    if (Math.abs(ac - bc) == 2){\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n\
    \  }\n}\n", "    // Write your logic here\n    if( a > b && a > c ){\n       \
    \ if( b > c ){\n            return true;\n        }\n        else{\n         \
    \   return false;\n        }\n    }\n    if( b > c ){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n</cell>\n<cell>", "\tif (a===b\
    \ && b===c) return true;\n\tvar ab = Math.sqrt(a*a + b*b),\n\t\tac = Math.sqrt(a*a\
    \ + c*c),\n\t\tbc = Math.sqrt(b*b + c*c);\n\tif (ab === ac && ab === bc) return\
    \ true;\n\tif (ab > ac || ab < bc) return false; \n\treturn true;\n}\n", "  if\
    \ (a + b > c) {\n    return false\n  }\n  else if (a + c > b) {\n    return true\n\
    \  }\n  else if (b + c > a) {\n    return true\n  }\n  else {\n    return false\n\
    \  }\n}\n", "  // TODO: Your code here\n  // Write your code here\n  var a = Math.abs(a);\n\
    \  var b = Math.abs(b);\n  var c = Math.abs(c);\n  var discriminant = b*b - 4*a*c;\n\
    \  if(discriminant > 0){\n    discriminant = Math.sqrt(discriminant);\n  }\n \
    \ var is_right_triangle = (discriminant > 0);\n  return is_right_triangle;\n}\n",
  "\tvar ab=Math.sqrt(b*b - a*a);\n\tvar ac=Math.sqrt(c*c - a*a);\n\treturn (ac >\
    \ ab) && (ac > 0);\n}\n", "  var side1 = Math.abs(a);\n  var side2 = Math.abs(b);\n\
    \  var side3 = Math.abs(c);\n  var side4 = side1 + side2 + side3;\n  if(side4\
    \ > 0){\n    if(side3 > 0 && side4 > side3 && side1 > side2){\n      return true;\n\
    \    } else if(side3 > 0 && side4 > side3){\n      return true;\n    } else if\
    \ (side3 > 0 && side4 > side3 && side1 < side2){\n      return true;\n    } else\
    \ {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}", "\tvar\
    \ a2 = a * a;\n\tvar b2 = b * b;\n\tvar c2 = c * c;\n\tvar discriminant = a2 +\
    \ b2 - c2;\n\treturn (discriminant > 0 && a2 > 0 && b2 > 0 && c2 > 0);\n}\n",
  "    var x1 = c; var x2 = a; var x3 = b;\n    var y1 = Math.sqrt( (x2*x2) + (y1*y1)\
    \ );\n    var y2 = Math.sqrt( (x3*x3) + (y1*y1) );\n    var z1 = (y2 == 0) ? 0\
    \ : y1; //Equilateral triangle\n    var z2 = (y2 == y1) ? 0 : -y1;\n    var z3\
    \ = (y2 != y1) ? z2 : -y2;\n    if(z1 > 0) return true;\n    else return false;\n\
    }\n", "  if(a + b > c || a + c > b || b + c > a){\n    return false;\n  }\n  var\
    \ angle = Math.acos((a + b + c)/(2*a*b));\n  if(a > b && a > c){\n    return angle\
    \ < .8;\n  }else if(a > b){\n    return angle > 1.7;\n  }else if(a > c){\n   \
    \ return angle > 1.6;\n  }else{\n    return angle > 1.4;\n  }\n}\n", "    var\
    \ a = Math.abs(a);\n    var b = Math.abs(b);\n    var c = Math.abs(c);\n    if\
    \ (a < b) {\n        if (b < c) {\n            return true;\n        } else {\n\
    \            return false;\n        }\n    } else {\n        if (c < a) {\n  \
    \          return true;\n        } else {\n            return false;\n       \
    \ }\n    }\n}\n", "  if (Math.abs(Math.atan2(b,c) - Math.atan2(a,c)) < Math.PI/2)\
    \ return true;\n  else return false;\n}\n", "\treturn ((Math.atan2(2 * a,2) +\
    \ Math.atan2(2 * b, 2) + Math.atan2(2 * c, 2)) <= Math.PI / 2);\n}", "\tlet ac\
    \ = Math.abs(a-c);\n\tlet bc = Math.abs(b-c);\n\tlet acd = Math.abs(ac-(b*b));\n\
    \n\tif( acd > bc ){\n\t\treturn false;\n\t}\n\n\tif( ac < bc ){\n\t\treturn true;\n\
    \t}\n}\n", "  var a1 = b - a\n  var b1 = c - b\n  var c1 = (a + b + c)/2\n  var\
    \ d = Math.sqrt((b * b1 + c * c1 - a * a1) / 4)\n  if (d == 0) return false\n\
    \  else return true\n}\n", "    return (((b > 0 && c > 0 && a > 0) || (b < 0 &&\
    \ c < 0 && a < 0)) &&\n            ((a>0 && b>0) || (a<0 && b<0)) && ((b-a) *\
    \ (c-b) * (a-c)) <=0)\n}\nvar triangle = [\n    [2,3,5],\n    [4,6,9],\n    [1,8,7]\n\
    ]\nfor(i=0;i<triangle.length;i++){\n    for(j=0;j<triangle[i].length;j++){\n \
    \       for(k=0;k<triangle[i].length;k++){\n            if(right_angle_triangle(triangle[i][j],triangle[i][k],triangle[k][j]))\n\
    \                console.log(triangle[i][j],triangle[i][k],triangle[k][j])\n \
    \       }\n    }\n}</code>\n<|/ a |>\n<| c |>\nHi Manoharan. Thanks for taking\
    \ the time to give me the solution. However I actually need to do this in JS,\
    \ although I understand the logic of the solution. I also just realised that the\
    \ example I gave is a bit incorrect. The code should be able to detect a triangle\
    \ with sides 3, 4, 5 and 1, 8, 7.\n<|/ c |>\n<| c |>\nNo need to apologize. I\
    \ edited my code accordingly so that it works in JS.\n<|/ c |>\n<| c |>\nYou solution\
    \ works perfectly, however when I run it on my own code it doesn't seem to be\
    \ detecting any triangles when I know they exist. I just realised that my code\
    \ was incorrect because I wasn't getting the correct results. However your solution\
    \ seems to work so I'll accept your answer. Thanks again.\n<|/ c |>\n<| c |>\n\
    Sorry it took so long to get back to you, been busy working on something else.\
    \ Thanks again for your help.\n<|/ c |>\n<| c |>\nHi Manoharan. I just had a quick\
    \ look at this and noticed that the solution that you gave doesn't work on triangles\
    \ such as 1, 2, 3, 4. I was wondering if there was a way to improve this or if\
    \ I missed something in your solution.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar\
    \ triangle=[\n    [1,3,5],\n    [2,4,6],\n    [5,8,7],\n]\nvar result=[];\nvar\
    \ sides=[3,4,5];\nvar side=[1,8,7]\n\nvar isInside=function(side){\n    var inside=false;\n\
    \    side.forEach(function(e){\n        sides.forEach(function(i){\n         \
    \   if(e>i){\n                var t=(((e-i)/(e-i))*(e-i)) < ", "  let A = a;\n\
    \  let B = b;\n  let C = b;\n  let AB = AB = B + A - C;\n  let AC = AC = C - A;\n\
    \  let C = AC + B;\n  let A1 = A + A1;\n  let A2 = A1 + A;\n  let A3 = A1 + A2;\n\
    \  let A4 = A2 + A2;\n  let A5 = A3 + A;\n  let A6 = A4 + A;\n  let A7 = A7 +\
    \ A1;\n  let A8 = A6 + A2;\n  let A9 = a6 + A3;\n  let A10 = A8 + A2;\n  let A11\
    \ = A9 + A3;\n  let A12 = A10 + A4;\n  let A13 = A12 + A3;\n  let A14 = A13 +\
    \ A4;\n  let A15 = A14 + A4;\n  let A16 = A15 + A4;\n  let A17 = A16 + A4;\n \
    \ let A18 = A17 + A4;\n  let A19 = A18 + A4;\n  let A20 = A19 + A4;\n  let A21\
    \ = A20 + A4;\n  let A22 = A31 + A4;\n  let A23 = A22 + A4;\n  let A24 = A23 +\
    \ A4;\n  let A25 = A24 + A4;\n  let A26 = A25 + A4;\n  let A27 = A26 + A4;\n \
    \ let A28 = A27 + A4;\n  let A29 = A28 + A4;\n  let A30 = A29 + A4;\n  let A31\
    \ = A30 + A4;\n  let A32 = A31 + A4;\n  let A33 = A32 + A4;\n  let A34 = A33 +\
    \ A4;\n  let A35 = A34 + A4;\n  let A36 = A35 + A4;\n  let A37 = A36 + A4;\n \
    \ let A38 = A37 + A4;\n  let A39 = A38 + A4;\n  let A40 = A39 + A4;\n  let A41\
    \ = A40 + A4;\n  let A42 = A41 + A4;\n  let A43 = A42 + A4;\n  let A44 = A43 +\
    \ A4;\n  let A45 = A44 + A4;\n  let A46 = A45 + A4;\n  let A47 = A46 + A4;\n \
    \ let A48 = A47 + A4;\n  let A49 = A48 + A4;\n  let A50 = A49 + A4;\n", "  //\
    \ Write your solution here\n  var l1 = Math.abs(a-b);\n  var l2 = Math.abs(b-c);\n\
    \  var l3 = Math.abs(c-b);\n  return l1 === l2 && l2 === l3\n}", "    let leftAngle\
    \ = math.acos((a*a + b*b + c*c - a*b - a*c) / (2*b*c));\n    let rightAngle =\
    \ math.acos((a*a + b*b + c*c - a*b - a*c) / (2*a*c));\n    return (leftAngle >=\
    \ rightAngle);\n}\n", "\treturn ((a*a > b*c) && (b*b > c*c));\n}\n", "\treturn\
    \ (a + b > c && b + c > a && a + c > b) ? true : false;\n}\n", "    \n    if (Math.abs(a\
    \ - b) > Math.abs(a - c) || Math.abs(b - a) > Math.abs(b - c) || Math.abs(c -\
    \ a) > Math.abs(c - b)) {\n        return false;\n    }\n    \n    var one = a\
    \ > b ? a : b,\n        one_minus_b = a > b ? b : a,\n        two = c > a ? c\
    \ : a,\n        three = c > b ? c : b;\n    \n    var is_right = (\n        Math.abs(one\
    \ - three) > Math.abs(one - two_minus_three)\n    );\n    \n    return is_right;\n\
    }\n", "  // Write your code here\n  return ((a*a + b*b == c*c) && (Math.atan2(a,\
    \ b) >= 0))\n}\n", "    // Using formula to determine if triangle is right-angle.\
    \ \n    // See https://en.wikipedia.org/wiki/Regular_polygon#Equation\n    //\
    \ The formula is a simplified version of the classic equation.\n    \n    // Find\
    \ if any triangle edge is to the right of the vertical axis.\n    var vertical\
    \ = a + (b - a) * (Math.sqrt(3) / 2);\n    var right_angle = (Math.abs((c - vertical)\
    \ / Math.sqrt(3)) - 1) < 0;\n    \n    // If any triangle edge is to the right\
    \ of the vertical axis, return true.\n    return right_angle;\n}\n", "    return\
    \ ((b - a) * (c - b)) < 0;\n}\n", "    return (Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2)) == Math.pow(c, 2));\n}\n", "    var x1;\n    var x2;\n    var x3;\n    x1\
    \ = Math.pow(Math.abs(a), 2);\n    x2 = Math.pow(Math.abs(b), 2);\n    x3 = Math.pow(Math.abs(c),\
    \ 2);\n    if (x1<x2) {\n        return (x1>x3)\n    }\n    return false;\n}\n",
  "    var s = Math.sqrt((b*b) - (a*a));\n    return ((s == 0.0) || ((a*b) > (b*c)));\n\
    }\n", "\tvar is_right_angle = (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == Math.pow(c,\
    \ 2));\n\tif (is_right_angle) return true;\n\treturn false;\n}\n", "    if((c*a-b*c)\
    \ % 2 === 0){\n        return false;\n    }\n    if(b*a-c*b === 0){\n        return\
    \ true;\n    }\n    return a<b;\n}\n", "  var side1 = Math.sqrt(Math.pow(b,2)-Math.pow(a,2));\n\
    \  var side2 = Math.sqrt(Math.pow(c,2)-Math.pow(a,2));\n  if(side1 == side2){\n\
    \    return true;\n  }\n  if(side1 > side2){\n    var temp = side1;\n    side1\
    \ = side2;\n    side2 = temp;\n  }\n  if(side2 > side1){\n    return false;\n\
    \  }\n  if(a == 0){\n    if(b >= 0 && c >= 0){\n      return true;\n    }\n  \
    \  if(b <= 0 && c <= 0){\n      return true;\n    }\n  }\n  if(b == 0){\n    if(a\
    \ >= 0 && c >= 0){\n      return true;\n    }\n    if(a <= 0 && c <= 0){\n   \
    \   return true;\n    }\n  }\n  if(c <= 0){\n    if(a >= 0 && b >= 0){\n     \
    \ return true;\n    }\n    if(a <= 0 && b <= 0){\n      return true;\n    }\n\
    \  }\n  if(b <= 0){\n    if(a >= 0 && c >= 0){\n      return true;\n    }\n  \
    \  if(a <= 0 && c <= 0){\n      return true;\n    }\n  }\n}\n", "  if ( (b===0)&&(c===0)\
    \ )\n  {\n    return true;\n  }\n  else if ((c>0)&&(a > c))\n  {\n    return false;\n\
    \  }\n  else if ((c<0)&&(a < c))\n  {\n    return false;\n  }\n  else if ((a<0)&&(b<0))\n\
    \  {\n    return false;\n  }\n  else if ((a>0)&&(b>0))\n  {\n    return ((c>a)&&(c>b));\n\
    \  }\n  else \n  {\n    return false;\n  }\n}\n", "\tlet sides = Math.sqrt(Math.pow((b\
    \ - c), 2) + Math.pow(a, 2));\n\treturn sides > 0\n}\n", "  // if a, b, c are\
    \ equal to a right angle triangle, return True\n  if(a === b){\n    if(b === c){\n\
    \      return true;\n    }else{\n      return false;\n    }\n  }else{\n    if(b\
    \ === c){\n      return false;\n    }else{\n      //if a and b are equal to a\
    \ right angle triangle, return True\n      if((Math.abs(a-b) === 90 ) || (Math.abs(a-b)\
    \ === 270)){\n        return true;\n      }else{\n        // If a is not a right\
    \ angle triangle. Return False.\n        return false;\n      }\n    }\n  }\n\
    }\n", "\treturn (( (a + b > c) && (b - c > a) && (c - a > b) )); \n}\n", "\tif\
    \ (a===0 || b===0 || c===0)\n\t\treturn false;\n\tif (Math.abs(a)<=Math.abs(b)\
    \ && Math.abs(b)<=Math.abs(c))\n\t\treturn true;\n\tif (Math.abs(a)>=Math.abs(b)\
    \ || Math.abs(b)>=Math.abs(c))\n\t\treturn false;\n\treturn (c>(b-a) && b>(a-c))\n\
    }", "    //Your code here\n    let angle_a = Math.acos((a*a)+(b*b)+(c*c))\n  \
    \  let angle_b = Math.acos((a*a)+(b*b)-(2*a*c))\n    let angle_c = Math.acos((a*a)-(2*b*c))\n\
    \    if(angle_a > angle_b && angle_a > angle_c) return true\n    if(angle_b >\
    \ angle_c && angle_b > angle_a) return true\n    if(angle_c > angle_a && angle_c\
    \ > angle_b) return true\n    return false\n}\n</code>\n<|/ a tags=math,algorithm,javascript\
    \ |>\n<| c |>\nWhat is `Math.acos`? I did some research and I found that function\
    \ here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\
    \ But it's `undefined` for me?\n<|/ c |>\n<| c |>\nI believe it is `Math.acos`\
    \ not `Math.accos`\n<|/ c |>\n<| c |>\nIt is acosine, not arc-cosine. acosine\
    \  is just the inverse cosine.\n<|/ c |>\n<| c |>\nacosine  is just the inverse\
    \ cosine.\n<|/ c |>\n<| a dscore=1 |>\nThe question is not clear, but assuming\
    \ your triangle is a point with known lengths, find the length of the line that\
    \ starts from the top left corner to the bottom right corner.  Then just compare\
    \ the two lengths.\n<|/ a tags=math,algorithm,javascript |>\n<| a tags=math,algorithm,javascript\
    \ dscore=1 |>\n<code>", "\t\n\t// if the length of the sides is zero, return false\n\
    \tif((a+b)==0)\n\t\treturn false;\n\tif((c+b)==0)\n\t\treturn false;\n\tif((a*b)==0)\n\
    \t\treturn false;\n\t\n\t// if any of the sides is greater than 180 degree\n\t\
    if((a>b) || (b>c) || (c>a))\n\t\treturn false;\n\t\n\t// if b and c are equal,\
    \ then a must be a right angle\n\tif(b==c)\n\t\treturn true;\n\t\n\t// find side\
    \ lengths a1, b1 and c1 \n\t// a1, b1 and c1 are the side lengths of a right angled\
    \ triangle\n\tlet a1 = Math.sqrt((Math.pow(a, 2)));\n\tlet b1 = Math.sqrt((Math.pow(b,\
    \ 2)));\n\tlet c1 = Math.sqrt((Math.pow(c, 2)));\n\t\n\t// if a1, b1 and c1 are\
    \ equal, then a must be a right angle\n\tif(a1==b1 && a1==c1)\n\t\treturn true;\n\
    \t\n\t// if a1, b1 and c1 are equal, then a must be a right angle\n\tif(a1==b1\
    \ && a1==c1)\n\t\treturn true;\n\t\n\t// if a1, b1 and c1 are equal, then a must\
    \ be a right angle\n\tif(a1==b1 && a1==c1)\n\t\treturn true;\n\t\n\t\n\t// if\
    \ all sides are equal, then a must be a right angle\n\tif(a1==b1 && b1==c1)\n\t\
    \treturn true;\n\t\n\t// if all sides are equal, then a must be a right angle\n\
    \tif(a1==b1 && b1==c1)\n\t\treturn true;\n\t\n\t// if all sides are equal, then\
    \ a must be a right angle\n\tif(a1==b1 && b1==c1)\n\t\treturn true;\n\t\n\t//\
    \ if all sides are equal, then a must be a right angle\n\tif(a1==b1 && b1==c1)\n\
    \t\treturn true;\n\t\n\t// if all sides are equal, then a must be a right angle\n\
    \tif(a1==b1 && b1==c1)\n\t\treturn true;\n\t\n\t// if all sides are equal, then\
    \ a must be a right angle\n\tif(a1==b1 && b1==c1)\n\t\treturn true;\n\t\n\t//\
    \ if all sides are equal, then a must be a right angle\n\tif(a1==b1 && b1==c1)\n\
    \t\treturn true;\n\t\n\t// if all sides are equal, then a must be a right angle\n\
    \tif(a1==b1 && b1==c1)\n\t\treturn true;\n\t\n\t// if all sides are equal, then\
    \ a must be a right angle\n\t", "    let a = Math.abs(a);\n    let b = Math.abs(b);\n\
    \    let c = Math.abs(c);\n    let discriminant = b * b - 4 * a * c;\n    if(discriminant\
    \ > 0){\n        return false;\n    }\n    discriminant = Math.sqrt(discriminant);\n\
    \    return (discriminant >= 0) && (discriminant <= Math.pow(a, 2));\n}\n</code>\n\
    <|/ a |>\n<| a tags=java,geometry dscore=0 |>\nHere is the code with recursive\
    \ calls. It should work well in most of the cases:\n<code>\nimport java.lang.Math;\n\
    \npublic class Solution {\n    public static boolean isPentagonal (int side) {\n\
    \        return isPentagonalRecursive(side);\n    }\n\n    private static boolean\
    \ isPentagonalRecursive (int side) {\n        if (side < 0)\n            return\
    \ false;\n        else if (side == 0)\n            return true;\n        else\
    \ if (side == 1)\n            return false;\n        else\n            return\
    \ (isPentagonalRecursive(side/2) && isPentagonalRecursive(side/2));\n    }\n\n\
    \    public static void main(String[] args) {\n        System.out.println(isPentagonal(0));\n\
    \        System.out.println(isPentagonal(1));\n        System.out.println(isPentagonal(2));\n\
    \        System.out.println(isPentagonal(3));\n        System.out.println(isPentagonal(4));\n\
    \        System.out.println(isPentagonal(5));\n        System.out.println(isPentagonal(6));\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| c |>\nThe recursive calls are\
    \ made in the else part of the if condition. As soon as any of these conditions\
    \ is met, the recursive call is made for the next value. Here we are using int\
    \ instead of double because float is slower than double and int is faster.\n<|/\
    \ c |>\n<| c |>\nThis code fails for `isPentagonal(0)`, which it should\n<|/ c\
    \ |>\n<| a tags=java,geometry |>\nHere is an approach which uses recursion:\n\
    <code>\npublic boolean isPentagonal(int num) {\n    if (num == 0) {\n        return\
    \ true;\n    } else if (num == 1) {\n        return false;\n    } else {\n   \
    \     int i = num;\n        return isPentagonal(num / 2) && isPentagonal(num /\
    \ 2);\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis approach fails for\
    \ `isPentagonal(0)`, which it should\n<|/ c |>\n<| ", "    var ad = a * Math.sin(Math.PI\
    \ / 180), bc = b * Math.cos(Math.PI / 180),\n        cd = c * Math.sin(Math.PI\
    \ / 180), bd = b * Math.sin(Math.PI / 180),\n        ca = a * Math.cos(Math.PI\
    \ / 180), cb = c * Math.cos(Math.PI / 180);\n\n    return ((ad*bc) - (bd*ad))\
    \ - ((ad*cd)-(bd*ca)) > ((bc*cd) - (ad*cb));\n}\n", "  return ((Math.abs(b - c)\
    \ == (Math.pow(b,2) + Math.pow(c,2)) - Math.abs(a)) || \n          (Math.abs(b\
    \ - c) == (Math.pow(b,2) - Math.pow(c,2)) - Math.abs(a)));\n}\n", "\tif(a==0 &&\
    \ b==0 && c==0)\n\t\treturn true;\n\tif(b==0 || c==0 || a==0 || Math.abs(a-b)\
    \ == Math.abs(a-c) || Math.abs(a-c) == Math.abs(b-a))\n\t\treturn false;\n\tif(a==a)\n\
    \t\treturn ((c==b && b!=0) || (b==c && c!=0)) || (Math.abs(a-b) == Math.abs(a-c));\n\
    \treturn true;\n}\n", "    console.log(\"right_angle_triangle\");\n    return\
    \ (((a + b) > c) || ((b + c) > a) || ((c + a) > b));\n}\n", "  const l1 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n  const l2 = Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2));\n\
    \  const l = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n  return\
    \ (l1 < l2 && l2 < l && Math.abs(180 - Math.abs(360 - Math.atan2(b, c))) >= 180);\n\
    }\n", "    return (( (((a == b) && (a == c)) || ((a == c) && (b == c))) || ((a\
    \ == b) && (b == c)) || ((a==b) && (b==c)) );\n}\n", "    return ((Math.abs(Math.sin(a*Math.PI/180)*Math.sin(b*Math.PI/180))\
    \ \n    +Math.abs(Math.cos(a*Math.PI/180)*Math.cos(b*Math.PI/180)) \n    +Math.abs(Math.sin(a*Math.PI/180)*Math.cos(b*Math.PI/180)*Math.cos(c*Math.PI/180)))\
    \ \n    ==0);\n}", "  if((Math.pow(a, 2) + Math.pow(b, 2)) <= (Math.pow(c, 2)\
    \ + Math.pow(d, 2)) || (Math.pow(a, 2) + Math.pow(b, 2)) >= (Math.pow(c, 2) +\
    \ Math.pow(d, 2))){\n    return false;\n  }\n  return true;\n}\n", "    return\
    \ (a == b && b == c && a + b > c);\n}\n</cell>\n<text>\nEx 3: Write a function\
    \ that takes a list containing tuples and returns a dictionary that counts the\
    \ number of times each element appears in the list. You may assume that the tuples\
    \ are unique and sorted (as they are in our example).\n\n\n</text>\n<code language=julia-1.5>",
  "  // Test if three sides are the same or 180 degree\n  if((a == b) || (a == c)\
    \ || (b == c)) {\n    return false;\n  }\n  // Test if angle is right angle\n\
    \  if((a > b) && (b > c)) {\n    return false;\n  }\n  else if((a < b) && (b <\
    \ c)) {\n    return false;\n  }\n  else if((a > b) && (a < c)) {\n    return true;\n\
    \  }\n  else if((a < b) && (a > c)) {\n    return true;\n  }\n  // If not angle\
    \ then it must be an equilateral triangle\n  return false;\n}\n", "  var isRightAngle\
    \ = false;\n  \n  var firstSideLength = Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2));\n  var secondSideLength = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n\
    \  \n  if (firstSideLength > secondSideLength)\n  {\n    isRightAngle = (Math.round(a/firstSideLength)\
    \ == Math.round(b/firstSideLength)); \n  } \n  else {\n    isRightAngle = (Math.round(b/secondSideLength)\
    \ == Math.round(a/secondSideLength));\n  }\n  \n  return isRightAngle;\n}\n",
  "    // Calculate the lengths of the sides\n    var sideA = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n    var sideB = Math.sqrt(Math.pow(a, 2) + Math.pow(c,\
    \ 2));\n    var sideC = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n    \n  \
    \  // Return true if all sides are equal\n    return (sideA === sideB) && (sideA\
    \ === sideC);\n}\n</code>\n<|/ a |>\n<| c |>\n\"A right-angled triangle is a triangle\
    \ in which one angle is right angle or ", "  var ab = abs(b-a),\n      bc = abs(c-b),\n\
    \      ac = abs(a-c);\n  return (ab + bc == ac || bc + ab == ac);\n}\n", "\tif\
    \ (Math.abs(a - b) <= Math.abs(b - a) && Math.abs(b - c) <= Math.abs(c - b) &&\
    \ Math.abs(c - a) <= Math.abs(a - c)){\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\n", "  if (Math.abs( b - a ) < Math.abs( b - c )) \n    console.log('b - a\
    \ < b - c ')\n  return ((b - a) * (c - b) <= (a - c) * (b - a))\n}\n", "    var\
    \ absa = abs(a-b),\n        absc = abs(c-b),\n        absaabsc = absa + absc,\n\
    \        acbd = abs(a-c);\n    if(absaabsc === 0)\n    {\n        return false;\n\
    \    }\n    return (acbd === 0 || absc === absaabsc / 2);\n}\n", "  var delta\
    \ = Math.abs(b - c);\n  console.log(delta);\n  if(delta == 0)\n    return false;\n\
    \  else if(delta == 180)\n    return true;\n  else if(delta < 180)\n    return\
    \ a > c;\n}\n</code>\n<|/ a |>\n<| c |>\nHi, your answer works for the example\
    \ provided but for some reason it fails when I test it on the actual triangle\
    \ for which the answers should be true.\n<|/ c |>\n<| c |>\n: In your example,\
    \ the two sides of the triangle have the same length. The third side is 180 degrees,\
    \ so the two other sides are also 180 degrees.\n<|/ c |>\n<| c |>\nYes thats right,\
    \ I just edited my code to account for that.\n<|/ c |>\n<| c |>\n: In your new\
    \ example, the sides are of different lengths, so the three sides aren't right\
    \ angles. I added an algorithm to my answer to account for this.\n<|/ c |>\n<|\
    \ a dscore=0 tags=javascript,geometry,trigonometry,math,algorithm |>\nYou can\
    \ solve the problem by finding if there is a solution to the equation ax + by\
    \ + c = 0 using quadratic equations :\n\nThis gives you : \n\nWhich gives us :\n\
    <|/ a |>\n<| c |>\nOk, I can see that this looks right but I'm still a little\
    \ confused on how to implement this in javascript, can you give me an example\
    \ of what it would look like?\n<|/ c |>\n<| c |>\nYou can see this [link](http://www-cs-faculty.stanford.edu/~uno/programs/geometry/quad.html)\
    \ for some help with implementing quadratic equations using JavaScript.\n<|/ c\
    \ |>\n<| c |>\nThanks for the link, that makes it much clearer, but I still don't\
    \ see how to implement this into my code. Could you give me an example of how\
    \ it would look?\n<|/ c |>\n<| c |>\n: Did you understand my solution? If you\
    \ did, do you understand what it does?\n<|/ c |>\n<| c |>\nYes I understand your\
    \ answer, and yes I understand how it works but I still don't see how I can implement\
    \ it into my code so that it does what I want it to do. I would really appreciate\
    \ it if you could give me an example of how I could implement your code in my\
    \ code. Thanks.\n<|/ c |>\n<| a |>\nThe problem is how to find the area of a triangle\
    \ with the side length L. There are many possible triangles, of which there are\
    \ many. If ", "    if(a == 0 && b == 0 && c == 0)\n        return true;\n    if(a\
    \ == 0 || b == 0 || c == 0)\n        return false;\n    \n    return ((b*b - c*a)\
    \ > 0) ? true : false;\n}\n<|/ file source=gitlab filename=Practice-Solutions.js\
    \ |>", "  if (a == 0) {\n    return b > c ? true : false;\n  }\n  \n  if (b ==\
    \ 0) {\n    return c > a ? true : false;\n  }\n  \n  if (c == 0) {\n    return\
    \ a > b ? true : false;\n  }\n  \n  \n  //Reverse the triangle, use pythagorean\
    \ theorem\n  // to calculate area.\n  // If the area is negative then it's an\
    \ equilateral triangle.\n  // If the area is positive then it's a right angle\
    \ triangle.\n  var area = (b*b)-(4*a*c);\n  \n  if (area > 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    var AB = Math.sqrt((a*a) + (b*b));\n\
    \    var AC = Math.sqrt((a*c) + (b*b));\n    var BC = Math.sqrt((b*c) + (a*a));\n\
    \    return (AB + AC) == BC;\n}\n</script>\n</head>\n<body>\n    <!--Write code\
    \ here-->\n    \n    \n</body>\n</html></code>\n\n<code>\n<!DOCTYPE html>\n<html>\n\
    <head>\n    <title> Triangle </title>\n    <!--Write code here-->\n    \n    <style>\n\
    \        .triangle\n        {\n            border:2px solid black;\n        }\n\
    \        .triangle-title\n        {\n            padding:5px;\n            margin-left:auto;\n\
    \            margin-right:auto;\n        }\n    </style>\n    \n    <script>\n\
    \        //Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n        // sides form a right-angled triangle, False otherwise.\n\
    \        // A right-angled triangle is a triangle in which one angle is right\
    \ angle or \n        // 90 degree.\n        // Example:\n        // right_angle_triangle(3,\
    \ 4, 5) == True\n        // right_angle_triangle(1, 2, 3) == False\n        function\
    \ right_angle_triangle(a, b, c){\n            var AB = Math.sqrt((a*a) + (b*b));\n\
    \            var AC = Math.sqrt((a*c) + (b*b));\n            var BC = Math.sqrt((b*c)\
    \ + (a*a));\n            return (AB + AC) == BC;\n        }\n    </script>\n</head>\n\
    <body>\n    <!--Write code here-->\n    \n    \n</body>\n</html></code>\n<|/ a\
    \ dscore=0 tags=javascript,html |>\n<| c |>\nOhh god. Thanks so much! I'm really\
    \ sorry because I didn't know the answer and I am very new to programming.\n<|/\
    \ c |>\n<| a tags=javascript,html dscore=0 |>\n<code>\n<!DOCTYPE html>\n<html>\n\
    <head>\n    <title> Triangle </title>\n    <!--Write code here-->\n    \n    <style>\n\
    \        .triangle\n        {\n            border:2px solid black;\n        }\n\
    \        .triangle-title\n        {\n            padding:5px;\n            margin-left:auto;\n\
    \            margin-right:auto;\n        }\n    </style>\n    \n    <script>\n\
    \        //Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n        // sides form a right-angled triangle, False otherwise.\n\
    \        // A right-angled triangle is a triangle in which one angle is right\
    \ angle or \n        // 90 degree.\n        // Example:\n        // right_angle_triangle(3,\
    \ 4, 5) == True\n        // right_angle_triangle(1, 2, 3) == False\n        function\
    \ right_angle_triangle(a, b, c){\n            var AB = Math.sqrt((a*a", "  var\
    \ _a = 0;\n  var _b = 0;\n  var _c = 0;\n  _a = ((b*b) - (4*a*c));\n  _b = ((b*b)\
    \ + (4*a*c));\n  _c = ((c*c) - (a*a));\n  if ((_a < 0) && (_b < 0)){\n    return\
    \ false;\n  } else if ((_a > 0) && (_b > 0)){\n    return true;\n  }\n  return\
    \ false;\n}\n", "    \n    //To check three sides are valid or not\n    var check_a\
    \ = is_valid_number(a);\n    var check_b = is_valid_number(b);\n    var check_c\
    \ = is_valid_number(c);\n    \n    if(check_a == false || check_b == false ||\
    \ check_c ==false)\n        return 0;\n    \n    var a1 = Math.abs(a);\n    var\
    \ b1 = Math.abs(b);\n    var c1 = Math.abs(c);\n    \n    var a2 = Math.pow(a1,\
    \ 2);\n    var b2 = Math.pow(b1, 2);\n    var c2 = Math.pow(c1, 2);\n    \n  \
    \  var b1_2 = b1 / 2;\n    var b1_3 = b1 / 3;\n    \n    var c_1 = c / 2;\n  \
    \  var c_3 = c / 3;\n    \n    var result = [];\n    \n    if(a2 == b2 == c2){\n\
    \        \n        //Right angle triangle if all sides are equal\n        result[0]\
    \ = true;\n    }\n    else if(a1 == b1){\n        \n        //Right angle triangle\
    \ if one side is 90 degree\n        if(b2 == c2){\n            \n            result[0]\
    \ = true;\n        }\n        else{\n            \n            result[1] = true;\n\
    \        }\n    }\n    else if(a1 == c1){\n        \n        //Right angle triangle\
    \ if one side is 90 degree\n        if(b2 == c2){\n            \n            result[0]\
    \ = true;\n        }\n        else{\n            \n            result[2] = true;\n\
    \        }\n    }\n    else{\n        \n        //Not right angle triangle\n \
    \       result[0] = 0;\n        result[1] = false;\n        result[2] = false;\n\
    \    }\n    \n    \n    var res = 0;\n    \n    //If all sides are right angle\n\
    \    if(result[0] == true){\n        \n        \n        //Find out all sides\
    \ and sum the value\n        res = a1 + b1 + c1;\n        \n    }\n    \n    //If\
    \ one side is 90 degree\n    else if(result[1] == true){\n        \n        if(result[0]\
    \ == false){\n            \n            res = a2 + b2 + b1_3;\n        }\n   \
    \     else{\n            \n            res = a1 + b2 + b1_3;\n        }\n    \
    \    \n    }\n    \n    //If two sides are 90 degree\n    else if(result[2] ==\
    \ true){\n        \n        res = a1 + b1 + c_1;\n    }\n    \n    \n    \n  \
    \  \n    return res;\n}\n", "  \n  return ((b - c) == (a - b)) || ((b - c) ==\
    \ (c + a)) || ((b - c) == (a + b));\n  \n}\n", "\tvar ad = a * a, bd = b * b,\
    \ cd = c * c;\n\treturn (ad + bd) === ad + cd && \n\t\t(bd + cd) === bd + cd;\n\
    }\n\n", "    var ad = a * Math.cos(Math.PI / 180),\n        bd = b * Math.cos(Math.PI\
    \ / 180),\n        cd = c * Math.cos(Math.PI / 180),\n        ac = a * Math.sin(Math.PI\
    \ / 180),\n        bc = b * Math.sin(Math.PI / 180),\n        cc = c * Math.sin(Math.PI\
    \ / 180);\n    return (ad + bc + cd == ac + bd - cc || bc + ad - cd == ac - bd\
    \ - cc);\n}\n", "\t\n\t// If the triangle is right angled.\n\tif(a == b && b ==\
    \ c){\n\t\treturn true;\n\t}\n\t// If the triangle is NOT right angled.\n\telse\
    \ if(a == c || b == c || a == b){\n\t\treturn false;\n\t}\n\t\n\t// If the angle\
    \ is 90 degree.\n\tif((a+b > c) && (b+c > a) && (c+a > b)){\n\t\treturn true;\n\
    \t}\n\t// If the angle is NOT 90 degree.\n\telse if((a+b > c) && (b+c > a) &&\
    \ (c+a > b)){\n\t\treturn false;\n\t}\n\t\n\treturn false;\n}\n", "    var tad\
    \ = Math.abs(a-b),\n        tbc = Math.abs(b-c),\n        tac = Math.abs(a-c);\n\
    \n    return (tbc == tac && (tad+tbc <= 180));\n}\n", "  // Write your code here\n\
    }\n", "  var angle_a = acos((a**2 + b**2 - c**2)/(2*a*b));\n  var angle_b = acos((a**2\
    \ - b**2 + c**2)/(2*a*b));\n  var angle_c = acos((a**2 - b**2 + c**2)/(2*a*b));\n\
    \  return (angle_a + angle_b + angle_c) % (2*Math.PI) < Math.PI;\n}\n</cell>\n\
    <cell>", "    var ab = a-b,\n        bc = b-c;\n    if (ab > bc)\n        return\
    \ false;\n    else if (ab < -bc)\n        return true;\n    else\n        return\
    \ (Math.abs(Math.cos(a)) > Math.abs(Math.sin(a)))\n}\n", "    // Write your code\
    \ here\n    return ((Math.atan2(b,a) * 180 / Math.PI) == 90 || (Math.atan2(c,b)\
    \ * 180 / Math.PI) == 90);\n}\n\n", "\tvar det = (b*b) - 4*a*c;\n\treturn (det\
    \ >= 0) && (det <= 180);\n}\n\n", "    var a2 = a*a;\n    var b2 = b*b;\n    var\
    \ c2 = c*c;\n    var angle1 = Math.acos((b2 + c2 - a2)/(-2*b*c));\n    var angle2\
    \ = Math.acos((a2 + c2 - b2)/(-2*a*c));\n    var angle = Math.acos((a2 + b2 -\
    \ c2)/(-2*a*b));\n    var right = (angle2 > angle1);\n    return (right);\n}\n",
  "    if(a + b > c){ // if a + b > c\n        return false\n    }\n    else if(b\
    \ + c > a){\n        return false\n    }\n    else if(c+a > b){\n        return\
    \ false\n    }\n    else {\n        return true\n    }\n}\n", "    var ac = Math.abs(a);\n\
    \    var bc = Math.abs(b);\n    var cb = Math.abs(c);\n    var s = ac + bc;\n\
    \    var d = ac - bc;\n    var t = bc - ab;\n\n    if (s > (ab + bc)){\n     \
    \   return false;\n    }\n    if (s < (ab - bc)){\n        return true;\n    }\n\
    \    if(d > ab ){\n        return true;\n    }\n    if (t > bc ){\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=javascript,three.js\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26157068)\n<|/ c |>\n<| c |>\nIt does answer\
    \ the question of how to determine if three points form a right angled triangle.\
    \ Which was the original question.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26157068)\n\
    <|/ c |>\n<| c |>\nThis question is specifically about three.js which is not built\
    \ with Three.js and therefore does not provide this kind of functionality out\
    \ of the box\n<|/ c |>\n<| c |>\nIf this question is not specific to three.js,\
    \ why are you commenting on it? If you're looking for an answer to a three.js\
    \ question, it might better be asked as a three.js question than this answer.\
    \ Further, comments are not meant for extended discussion, they only serve to\
    \ clarify a question's intent.\n<|/ c |>\n<| a tags=javascript,three.js dscore=5\
    \ |>\n<code>\nvar a = new THREE.Vector3( 1, 0, 0 );\nvar b = new THREE.Vector3(\
    \ 0, 1, 0 );\nvar c = new THREE.Vector3( -1, 0, 0 );\n\nvar normal = new THREE.Vector3();\n",
  "  let b1 = Math.abs(b);\n  let c1 = Math.abs(c);\n  let a1 = Math.abs(a);\n\n \
    \ if(b1>c1 && c1>a1){\n    return true;\n  }\n  else if(b1>c1 && c1<a1){\n   \
    \ return false;\n  }\n  else if(b1>c1 && a1>c1){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }\n}\n", "  let ab = abs(a - b)\n  let ac = abs(a - c)\n\
    \  let bc = abs(b - c)\n  return ((ab + bc) > ac && bc > ab)\n}\n", "  if ( Math.abs(a)\
    \ == Math.sqrt( (b*b) - (4*a*c) ) || Math.abs(b) == Math.sqrt( (a*a) - (4*b*c)\
    \ ) || Math.abs(c) == Math.sqrt( (a*a) - (b*b) ) ){\n   return true;\n  } else\
    \ {\n   return false;\n  }\n}\n", "  return ((Math.atan2(b, a) * 180) / Math.PI)\
    \ == ((Math.atan2(c, b) * 180) / Math.PI)\n}\n", "    return ((Math.sqrt(Math.pow(a,\
    \ 2)+ Math.pow(b, 2)) -Math.sqrt(Math.pow(a, 2) +Math.pow(b, 2) - Math.pow(c,\
    \ 2)))/Math.pow(b, 2))>=(Math.sqrt(Math.pow(a, 2)+Math.pow(c, 2)) -Math.sqrt(Math.pow(a,\
    \ 2) +Math.pow(b, 2) - Math.pow(c, 2)))/Math.pow(a, 2);\n}\n", "    console.log(a,\
    \ b, c)\n    \n    // if either side of the triangle is greater than 180 degree\n\
    \    if(a>180 || b>180 || c>180) return false\n    \n    // if either angle is\
    \ less than 0 degree\n    if(a<0 || b<0 || c<0) return false\n    \n    // if\
    \ a is less than or equal to b and b is less than or equal to c\n    if (a <=\
    \ b && b <= c) return true\n    \n    // if b is less than a or if b is less than\
    \ c\n    if(b < a || b < c) return true\n    \n    // if a is less than b and\
    \ c is less than b\n    if(a<b && c<b) return true\n    \n    // if c is less\
    \ than a\n    if(c<a) return true\n    \n    // if c is greater than a\n    if(c>a)\
    \ return false\n}\n", "\t\n\tvar d = a-b;\n\tvar e = b-c;\n\tvar f = c-a;\n\t\
    var g = Math.sqrt(d*d-e*e-f*f);\n\tvar result = false;\n\t\n\t\n\t\n\tif(d>e){\n\
    \t\tif(d>f){\n\t\t\tif(g>0){\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\t\n\t\t}\n\
    \t\t\n\t}\n\t\n\t\n\treturn result;\n\t\n\t\n}\n\n", "    var sum1 = Math.abs(a-b);\n\
    \    var sum2 = Math.abs(b-c);\n    var sum3 = Math.abs(c-a);\n    \n    //Check\
    \ if the triangle's hypotenuse is either side of the other side\n    if(sum1 <=\
    \ sum2 && sum1 <= sum3)\n        return true;\n    else if(sum2 <= sum1 && sum2\
    \ <= sum3)\n        return true;\n    else\n        return false;\n}\n\n", "\t\
    var d = Math.sqrt((b*b)-(4*a*c));\n\treturn (d*d) > 0 && (d < Math.sqrt(Math.pow(b,\
    \ 2)+ Math.pow(a, 2)))\n}\n\n", "    \n    if(Math.abs(a-b)<=1)\n        return\
    \ (Math.abs(a-c)<=1)||(Math.abs(b-c)<=1)\n    else\n        return false\n}\n",
  "  var x = 0;\n  var y = 0;\n  var angle;\n\n  if((Math.pow(a, b)*Math.pow(b, c)-Math.pow(a,\
    \ c)*Math.pow(b, a)) < 0){\n    x = b; //x = (a+b)/2;\n    y = a; //y = (b+c)/2;\n\
    \    angle = Math.atan2(b,a);\n  }\n  else{\n    x = a;\n    y = c;\n    angle\
    \ = Math.atan2(c,b);\n  }\n\n  return Math.abs(angle) <= Math.PI/2;\n}\n", " \
    \ return ((b*b) - (a*c)) > ((a*a) - (b*b)) > 0;\n}\n", "    let a1 = b - a;\n\
    \    let b1 = c - b;\n    let c1 = a - c;\n    \n    let e1 = a1*b1 + b1*c1;\n\
    \    let e2 = a1*b1 - b1*c1;\n    let e3 = b1*c1 - c1*a1;\n    \n    let s  =\
    \ a1*b1 - b1*a1;\n    let t  = c1*b1 - c1*c1;\n    let o1 = e1*e1 - e3*e3 + s*s;\
    \ // square of hypotenuse of the triangle\n    let o2 = e1*e3 + e3*e1 - s*t;\n\
    \    let o3 = e2*e3 - e1*e2;\n    \n    let det = o1*o1 + o2*o2 + o3*o3;\n   \
    \ \n    if (Math.abs(det) < 0.0000001){\n        return false;\n    }\n    \n\
    \    return (o1 < 0 || o2 < 0 || o3 < 0);\n}\n", "  var ab=Math.abs(a-b); \n \
    \ var bc=Math.abs(b-c); \n  var ac=Math.abs(c-a); \n  if (ab + bc==ac) return\
    \ true;\n  else return false;\n}\n", "    return (((a + b) >= (c)) || ((a + c)\
    \ >= (b)) || ((b + c) >= (a)));\n}\n", "    if (a==b||a==c||b==c) return true;\n\
    \    else if(a*a + b*b == c*c) return true;\n    else return false;\n}", "\tvar\
    \ a2 = a * a, a3 = a2 * a, a4 = a2 * b, b2 = b * b, c2 = c * c, c3 = c2 * c, c4\
    \ = c2 * d;\n\treturn (a2 + b2 + c2 >= Math.sqrt(a2 + b2 + c2) && c2 - b2 >= Math.sqrt(a2\
    \ + b2 + c2) && b2 - a2 >= Math.sqrt(a2 + b2 + c2) && Math.sqrt((b2 - a2)*(c2\
    \ - a2)+(c3 - a3)*(c2 - a2)+(c4 - b2)*(c3 - a2)) >= Math.sqrt(a2 + b2 + c2) ||\
    \ a3 + b3 + c3 >= Math.sqrt(a2 + b2 + c2) && c3 -b3 >= Math.sqrt(a2 + b2 + c2)\
    \ && b3 -a3 >= Math.sqrt(a2 + b2 + c2) && Math.sqrt((b3 - a3)*(c3 - a3)+(c4 -\
    \ b3)*(c3 - a3)+(c2 - b2)*(c3 - a3)) >= Math.sqrt(a2 + b2 + c2) || a4 + b4 + c4\
    \ >= Math.sqrt(a2 + b2 + c2) && c4 -b4 >= Math.sqrt(a2 + b2 + c2) && b4 -a4 >=\
    \ Math.sqrt(a2 + b2 + c2) && Math.sqrt((b4 - a4)*(c4 - a4)+(c3 - b3)*(c4 - a4)+(c2\
    \ - b2)*(c4 - a4)) >= Math.sqrt(a2 + b2 + c2) || a2 + b2 + c2 >= Math.sqrt(a2\
    \ + b2 + c2) && c2 -b2 >= Math.sqrt(a2 + b2 + c2) && b2 -a2 >= Math.sqrt(a2 +\
    \ b2 + c2) && Math.sqrt((b2 - a2)*(c2 - a2)+(c3 - a3)*(c2 - a2)+(c4 - b2)*(c3\
    \ - a2)) >= Math.sqrt(a2 + b2 + c2)) \n}\n", "    return (b === 0 && (c === 3\
    \ || c === 0)) || \n        (b === 0 && (c === 1 || c === 2)) || \n        ((b\
    \ !== 0) && \n        ((c !== 0) && (a == b) || (a == c) || (b == c)));\n}\n",
  "  if (Math.abs(a - c) <=Math.abs(b - a)){\n    if (Math.abs(a - b) <=Math.abs(c\
    \ - a)){\n      return true;\n    } else{\n      return false;\n    }\n  } else{\n\
    \    return false;\n  }\n}\n<|/ file source=github ext=.js |>", "\tvar ad=Math.abs(a),\
    \ bd=Math.abs(b), cd=Math.abs(c);\n\tif(ad>=bd && ad>=cd){\n\t\tif(bd>=cd){\n\t\
    \t\treturn (a==b||a==c&&b==c)?true:false;\n\t\t}else{\n\t\t\treturn (a==c||a==b&&b==c)?true:false;\n\
    \t\t}\n\t}else{\n\t\tif(bd>=cd){\n\t\t\treturn (a==b&&a==c)?true:false;\n\t\t\
    }else{\n\t\t\treturn (a==c&&a==b)?true:false;\n\t\t}\n\t}\n}", "  if(Math.abs(a-b)\
    \ > Math.abs(c-b) || Math.abs(b-c) > Math.abs(a-c))\n    return false;\n  return\
    \ true;\n}\n", "\tif (a===0 && b===0){\n\t\treturn true;\n\t}\n\telse if (a===0\
    \ && b!==0){\n\t\treturn false;\n\t}\n\telse if (a!==0 && b===0){\n\t\treturn\
    \ false;\n\t}\n\telse if (a!==0 && b!==0){\n\t\tif (c>=a && c>=b){\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse if (c>=a && c<=b){\n\t\t\treturn true;\n\t\t}\n\t\telse\
    \ if (c<=a && c<=b){\n\t\t\treturn true;\n\t\t}\n\t\telse if (c<=a && c>b){\n\t\
    \t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n", "\t\
    var ab = a-b, ac = a-c; \n\treturn ab == ac && ab > 0;\n}\n", "    return (a +\
    \ b >= c) && (a + c >= b) && (b + c >= a)\n}\n", "    \n    //Defining variables\n\
    \    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x3;\n    var y3;\n\
    \    var x4;\n    var y4;\n    var x5;\n    var y5;\n    var x6;\n    var y6;\n\
    \    var x7;\n    var y7;\n    var x8;\n    var y8;\n    var x9;\n    var y9;\n\
    \    var x10;\n    var y10;\n    var x11;\n    var y11;\n    var x12;\n    var\
    \ y12;\n    var x13;\n    var y13;\n    var x14;\n    var y14;\n    var x15;\n\
    \    var y15;\n    var x16;\n    var y16;\n    var x17;\n    var y17;\n    var\
    \ x18;\n    var y18;\n    var x19;\n    var y19;\n    var x20;\n    var y20;\n\
    \    var x21;\n    var y21;\n    var x22;\n    var y22;\n    \n    //Function\
    \ to return an angle based on three given lengths\n    function angle(x1, y1,\
    \ x2, y2, x3, y3, x4, y4){\n        var angle = Math.atan(Math.abs((y2-y3)/(y2-y1)));\n\
    \        if (y4 > y3){\n            angle = Math.PI + angle;\n        }\n    \
    \    return angle;\n    }\n\n    //Function to return right angle triangle based\
    \ on 3 lengths\n    function is_right_angle(x1, y1, x2, y2, x3, y3, x4, y4){\n\
    \        return angle(x1, y1, x2, y2, x3, y3, x4, y4) > Math.PI || angle(x1, y1,\
    \ x2, y2, x3, y3, x4, y4) > Math.PI * 2;\n    }\n    \n    //Defining variables\n\
    \    x1 = Math.pow((a + b), 2);\n    y1 = Math.pow((b + c), 2);\n    x2 = Math.pow((a\
    \ + c), 2);\n    y2 = Math.pow((a + b), 2);\n    x3 = Math.pow((b + c), 2);\n\
    \    y3 = Math.pow((b + a), 2);\n    x4 = Math.pow((a + c), 2);\n    y4 = Math.pow((a\
    \ + b), 2);\n    x5 = Math.pow((b + c), 2);\n    y5 = Math.pow((b + a), 2);\n\
    \    x6 = Math.pow((a + c), 2);\n    y6 = Math.pow((a + b), 2);\n    x7 = Math.pow((b\
    \ + a), 2);\n    y7 = Math.pow((b + c), 2);\n    x8 = Math.pow((a + b), 2);\n\
    \    y8 = Math.pow((a + c), 2);\n    x9 = Math.pow((", "    var l = (a + b + c);\n\
    \    console.log(l)\n    if(l < 0){\n        l *= -1;\n    }\n    console.log(l)\n\
    \    var angle = Math.acos(l/Math.sqrt(a*a + b*b + c*c));\n    console.log(angle)\n\
    \    return (angle >= Math.PI / 2)\n}\n", "    // Check validity of input\n  \
    \  if (!is_valid(a) || !is_valid(b) || !is_valid(c)) {\n        return false;\n\
    \    }\n    // Check which side is right\n    if (a > b) {\n        if (a > c)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        if (b > c) {\n            return false;\n   \
    \     } else {\n            return true;\n        }\n    }\n}\n", "    var l =\
    \ Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    if(l < c)\n        return false;\
    \ \n    else\n        return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=python,math\
    \ |>\nFor a full description of the problem from Wikipedia, it says:\n\nThe triangle\
    \ inequality is also sometimes written as a simple equation:\n\n<code>\nax + by\
    \ + c = 0\n</code>\n\nWhen three points are given, we define this equation as\
    \ a function of the third point\n  and plug in the first two points into the equation\
    \ to get the answer:\n\n<code>\nax^2 + bx + c = 0\n</code>\nFor a non-trivial\
    \ number of points you get a very nice general equation which you can then solve\
    \ to get a, b, or c which gives you the right side of the triangle.\nIf you need\
    \ an example in Python, I would be happy to write one for you.\n<|/ a dscore=2\
    \ |>\n<| c |>\nIt's not clear if you need the actual Python code or a general\
    \ explanation.  I tried to add a comment that would be useful, but I'm not sure\
    \ how to format code.  It seems that you are saying that `ax^2 + bx + c = 0` is\
    \ true for any `a, b, c` where `a` and `b` are the two sides of the triangle,\
    \ but I thought that should be true only for three sides.\n<|/ c |>\n<| c |>\n\
    , It would be good to see an example in Python for this.  But I thought the OP\
    \ would be able to work it out by reading the Wikipedia article.\n<|/ c |>\n<|\
    \ c |>\nAh, I was wondering if you could provide an example and see if it can\
    \ be solved with some Python code.  I'm not really a Python expert.  I understand\
    \ that this is an equation which can easily be solved algebraically, but it isn't\
    \ immediately clear how to do this with the right number of equations.\n<|/ c\
    \ |>\n<| c |>\n, I've added a link to some Python code to get the triangle equation\
    \ from Wikipedia, but I can't work out how to solve the equation.  It would still\
    \ be interesting to see an example in Python.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ first question to answer is whether a triangle is a right angle triangle (right-angle\
    \ triangle). To check this simply see if the ratio of sides divided by the hypotenuse\
    \ is equal to 1. The hypotenuse is given by:\n<code>\nsqrt(a^2 + b^2 + c^2)\n\
    </code>\nOnce you know the hypotenuse, you know that your triangle is right-angled.\
    \ Hence, your function can simply check that if one side is ", "  \n  if(is_right_triangle(a,\
    \ b, c)) return true;\n  \n  //Triangle is right triangle if \n  //a->b->c ==\
    \ 180 degree\n  //a->c->b == 180 degree\n  //b->a->c == 180 degree\n  //b->c->a\
    \ == 180 degree\n  //c->a->b == 180 degree\n  \n  if(a > c && a > b){\n    let\
    \ temp = a;\n    a = c;\n    c = temp;\n  }\n\n  if(c > a && c > b){\n    let\
    \ temp = c;\n    c = b;\n    b = temp;\n  }\n\n  //Check if 180 degree triangle\
    \ exists\n  if(a+b+c != 180) return false;\n\n  return is_right_triangle(a, c,\
    \ b);\n}\n", "\tvar a = Math.abs(a);\n\tvar b = Math.abs(b);\n\tvar c = Math.abs(c);\n\
    \treturn ((a + b > c) && (a + c > b) && (b + c > a));\n}\n", "    let b2 = b*b\n\
    \    let c2 = c*c\n    let a2 = a*a\n    \n    return b2 > 4 && c2 > 4 && a2 >\
    \ 4 && b2*c2 - (a2*a) == 0;\n}\n", "\tif(b == 0 && Math.abs(a-c) == Math.abs(b-c)){\n\
    \t\tif(a>c){\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\treturn false\n\
    }\n", "    if (Math.abs(a - b) <= 1){\n        if (Math.abs(a - c) <= 1){\n  \
    \          if (Math.abs(b - c) <= 1){\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n", "    if (a >= c || b >= c ||\
    \ a >= b){\n        return false;\n    }\n    else{\n        return ((b - a) *\
    \ (c - b)) <= 0;\n    }\n}", "\tif(a>b && b>c && c>a) return true;\n\tif(b>c &&\
    \ c>a && a>b) return false;\n\tif(a>b && b>c && c>a) return true;\n\treturn false;\n\
    }\n", "    let aSides = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    let bSides\
    \ = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n    let cSides = Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(a, 2));\n    let totalSides = aSides + bSides + cSides;\n    if\
    \ (totalSides == 0) {\n        return false;\n    }\n    let bIsRightAngle = a\
    \ > 0 && b > 0 && c > 0;\n    let cIsRightAngle = a > 0 && b > 0 && c > 0;\n \
    \   let aIsRightAngle = a > 0 && b > 0 && c > 0;\n    let isRightAngle = (aIsRightAngle\
    \ && bIsRightAngle && cIsRightAngle);\n    return isRightAngle;\n}\n", "\tvar\
    \ xs = [a,b,c],\n\t\tys = [a,c,b];\n\n\t//Check if one of the sides is 90 degree\n\
    \tvar l1 = Math.sqrt(Math.pow(xs[0] - ys[0], 2) + Math.pow(xs[1] - ys[1], 2));\n\
    \tvar l2 = Math.sqrt(Math.pow(xs[1] - ys[0], 2) + Math.pow(xs[2] - ys[2], 2));\n\
    \t\n\tif (l1 == l2){\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n",
  "\tif (b==0 && a==c || c==0 && a==b || a==c && b==0){\n\t\treturn true;\n\t}else{\n\
    \t\treturn false;\n\t}\n}", "    if(a*a + b*b > c*c){\n        return false;\n\
    \    }\n    var x1,x2,y1,y2,ua,ub,va,vb;\n    x1 = (-b + Math.sqrt(b * b - 4 *\
    \ a * c))/(2 * a);\n    x2 = (-b - Math.sqrt(b * b - 4 * a * c))/(2 * a);\n  \
    \  y1 = x1;\n    y2 = x2;\n    if(x1 != x2){\n        for(var i=0; i< 3; i++){\n\
    \            if(y1 == x1){\n                if(x1 <= 0){\n                   \
    \ ua = a * x1;\n                    ub = a * y1;\n                }\n        \
    \        else{\n                    ua = x1;\n                    ub = y1;\n \
    \               }\n                ub += (x1 - ua) * (ub - ua) / (ub - ua);\n\
    \                ua -= (ub - ua) * (ub - ua) / (ub - ua);\n                if(x1\
    \ < 0){\n                    va = -(a + x1 * ub) / (x1 - ua);\n              \
    \      vb = -(a + y1 * ub) / (y1 - ua);\n                }\n                else{\n\
    \                    va = -(a + x1 * ub) / (x1 - ua);\n                    vb\
    \ = -(a + y1 * ub) / (y1 - ua);\n                }\n            }\n          \
    \  else if(y1 != x2){\n                if(x1 >= 0){\n                    ua =\
    \ a * x1;\n                    ub = a * y1;\n                }\n             \
    \   else{\n                    ua = x1;\n                    ub = y1;\n      \
    \          }\n                ub += (x1 - ua) * (ub - ua) / (ub - ua);\n     \
    \           ua -= (ub - ua) * (ub - ua) / (ub - ua);\n                if(x1 <\
    \ 0){\n                    va = -(a + x1 * ub) / (x1 - ua);\n                \
    \    vb = -(a + y1 * ub) / (y1 - ua);\n                }\n                else{\n\
    \                    va = -(a + x1 * ub) / (x1 - ua);\n                    vb\
    \ = -(a + y1 * ub) / (y1 - ua);\n                }\n            }\n          \
    \  else{\n                ua = x1;\n                ub = y1;\n               \
    \ va = x2;\n                vb = y2;\n            }\n            if(ub > ua){\n\
    \                x1 = x2;\n                y1 = y2;\n            }\n         \
    \   if(ub < ua){\n                x2 = x1;\n                y2 = y1;\n       \
    \     }\n            if(va > vb){\n                x1 = x2;\n                y1\
    \ = y2;\n            }\n            if(va < vb){\n                x2 = x", "\t\
    if (Math.abs(a-b) > Math.abs(b-c)){ \n\t\tvar temp = a;\n\t\ta = b;\n\t\tb = temp;\n\
    \t}\n\t\n\tif (Math.abs(a-b) > Math.abs(c-b)){\n\t\tvar temp = a;\n\t\ta = c;\n\
    \t\tc = temp;\n\t}\n\tif (Math.abs(c-b) > Math.abs(a-b)){\n\t\tvar temp = b;\n\
    \t\tb = c;\n\t\tc = temp;\n\t}\n\t\n\tvar ac = b*c-a*b;\n\tif (ac == 0){\n\t\t\
    return false;\n\t}\n\tvar ab = a*b-b*a;\n\tif (ab == 0){\n\t\treturn false;\n\t\
    }\n\tvar cross = (b*b-a*a)/ab;\n\tif (cross < 0){\n\t\treturn false;\n\t}\n\t\
    return true;\n}\n", "  if((Math.sqrt(Math.pow(a,2) + Math.pow(b,2)) == Math.pow(c,2)))\
    \ return true;\n  return false;\n}\n", "  return (a==b && b==c || a==c && b==c\
    \ || b==a && c==c || a==c && c==b || b==a && c==a); \n}\n", "    var angle = Math.round(Math.acos((b\
    \ * b + c * c - a * a)/(Math.pow(b,2) + Math.pow(c,2))))\n    return angle < 90\
    \ //if triangle is right angle\n}\n</code>\n<|/ a |>\n<| c |>\nAgreed. By the\
    \ way, why are you using `Math.pow()`? Isn't `Math.pow(b, 2)` sufficient?\n<|/\
    \ c |>\n<| c |>\nYes - Math.pow(b,2) is enough. Math.pow() is used to raise the\
    \ number to power n. For example, Math.pow(3, 2) == 9 ** 2\n<|/ c |>\n<| c |>\n\
    Hi Jason. Thanks for the help but when I run it in my browser (Chrome) I get the\
    \ wrong answer. Here's a fiddle: http://jsfiddle.net/fGKzw/. I think it has something\
    \ to do with rounding but I'm unsure how to fix it. Thanks for the help!\n<|/\
    \ c |>\n<| c |>\nSorry Jason, I was testing different code, but forgot to include\
    \ Math.round()\n<|/ c |>\n<| c |>\nYou're welcome! By the way, I just realized\
    \ I made a mistake on the second line of code (my mistake) - I forgot to multiply\
    \ by Math.PI first (I just updated my answer with that correction)\n<|/ c |>\n\
    <| a dscore=1 |>\nI've written a Javascript function that will do what you want\n\
    <code>", "    return (b * b) - 4 * (a * c) >= 0;\n}\n", "\tlet l = Math.sqrt(a\
    \ * a + b * b);\n\tlet rad = Math.atan(b/a);\n\tlet rad2 = Math.atan(b/c);\n\t\
    let rad3 = Math.atan(a/c);\n\tlet sinA = Math.sin(rad);\n\tlet sinB = Math.sin(rad2);\n\
    \tlet sinC = Math.sin(rad3);\n\treturn (Math.abs(rad - (rad2 + rad3)/2 ) < (sinA\
    \ + sinB + sinC)/2\n\t\t\t&& Math.abs(rad - (rad2 - rad3)/2 ) < (sinB + sinC +\
    \ sinA)/2\n\t\t\t&& Math.abs(rad - (rad - rad3)/2 ) < (sinC + sinA + sinB)/2\n\
    \t\t);\n}\n\n", "\tvar deg = Math.acos((a * b + c * c - a * b - c * b + b * a\
    \ + b * c) / (-2 * b * a + c * b));\n\treturn (deg > 180) ? False : true;\n}\n",
  "    if (a === b){\n        return true;\n    } else if (c > a || c < b){ //c >\
    \ a || c < b checks if c is between a and b\n        return false;\n    } else\
    \ {\n        return true;\n    }\n}\n", "    return ((b * b) - 4 * (a * c)) ===\
    \ 0\n}\n", "    if(a===0 || b===0 || c===0) return false\n    if( Math.abs(a-b)\
    \ < Math.abs(b-c) ) return (Math.abs(a-c) === Math.abs(a-b) || Math.abs(b-c) ===\
    \ Math.abs(a-b) )\n    if( Math.abs(b-b) < Math.abs(c-a) ) return (Math.abs(a-b)\
    \ === Math.abs(b-c) || Math.abs(b-c) === Math.abs(b-b) )\n    return (Math.abs(c-a)\
    \ === Math.abs(a-c) || Math.abs(c-b) === Math.abs(b-c))\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
