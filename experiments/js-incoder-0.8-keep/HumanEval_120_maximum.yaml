name: HumanEval_120_maximum
language: js
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input:\
  \ arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr\
  \ = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
  \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n\
  \  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n\
  \  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5,\
  \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
  \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
  \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
  \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0],\
  \ 0),[]);\n}\n\ntest();"
completions: ["    var newArr = arr.slice();\n    var maxVal = 0;\n    var maxIndex\
    \ = 0;\n\n    for(var i = 0; i < newArr.length; i++){\n        if(newArr[i] >\
    \ maxVal){\n            maxVal = newArr[i];\n            maxIndex = i;\n     \
    \   }\n    }\n\n    newArr[maxIndex] = newArr[maxIndex] - maxVal;\n\n    var newArr1\
    \ = newArr.slice();\n\n    for(var i = 0; i < newArr.length; i++){\n        if(newArr[i]\
    \ < newArr[maxIndex]){\n            newArr1.splice(i, 0, newArr[i]);\n       \
    \ }\n    }\n\n    while(newArr1.length != k){\n        newArr1.splice(newArr1.length\
    \ - 1, 1, newArr1[newArr1.length - 1] + newArr1[maxIndex])\n    }\n\n    return\
    \ newArr1;\n}\n", "    return quickSort(arr, k, 0, arr.length - 1);\n}\n", " \
    \   \n    let max = []\n    let numArr = []\n    \n    for(let i=0; i<k; i++){\n\
    \        numArr.push(arr[i])\n    }\n    \n    for(let i=0; i<k; i++){\n     \
    \   if(numArr[i]>max[i]){\n            max.push(numArr[i])\n        }\n    }\n\
    \    \n    return max\n    \n}\n", "    arr.sort(function(a, b){return a - b});\n\
    \    var result = new Array(k);\n    for(var i = 0; i < k; i++){\n        result[i]\
    \ = arr[i];\n    }\n    arr.sort(function(a, b){return b - a});\n    for(var i\
    \ = 0; i < k; i++){\n        result[i] = arr[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,javascript |>\n<| c |>\nAwesome solution, thanks!\n\
    <|/ c |>\n<| c |>\nThis has time complexity O(n*logn), where n is the array size.\
    \ Better solution would be O(n*log(k))\n<|/ c |>\n<| a dscore=2 tags=algorithm,javascript\
    \ |>\n<code>\nvar maxArray = function(arr, k) {\n    var i, max = -Infinity, maxEl\
    \ = arr[0];\n    for (i=1; i<arr.length; i++){\n        if (arr[i]>max){\n   \
    \         max = maxEl;\n            maxEl = arr[i];\n        }\n    }\n    return\
    \ arr.slice(0,k);\n};\n</code>\n<|/ a |>\n<| a tags=algorithm,javascript |>\n\
    <code>\nvar largestArray = function(arr) {\n    var maxVal = arr[0];\n    var\
    \ maxIndex = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(maxVal <\
    \ arr[i]){\n            maxVal = arr[i];\n            maxIndex = i;\n        }\n\
    \    }\n    return arr.slice(0,maxIndex+1)\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 tags=algorithm,javascript |>\nThe best algorithm for this question:\n\
    \n<code>\nvar arr = [-3, 2, 1, 2, -1, -2, 1],\n    max = -Infinity,\n    i, j,\n\
    \    len = arr.length;\n\nfor (i = 0; i <= len; i++) {\n    if (max < arr[i])\
    \ {\n        max = arr[i];\n    }\n    for (j = i - 1; j >= 0 && (max < arr[j]);\
    \ j--) {\n        max = Math.max(max, arr[j]);\n    }\n}\n", "\tlet arr = arr.sort((a,b)=>b-a);\n\
    \tlet maxArr = [];\n\tfor(let i=k;i<arr.length+k;i++){\n\t\tmaxArr.push(arr[i-k-1]);\n\
    \t}\n\treturn maxArr;\n}\n", "    const stack = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        stack.push(arr[i])\n    }\n    while(stack.length > 0){\n   \
    \     const top = stack.pop()\n        let maxIndex = 0\n        let maxVal =\
    \ top\n        for(let i = 0; i <= k; i++){\n            if(maxIndex < stack.length\
    \ && stack[maxIndex] < top){\n                maxVal = stack[maxIndex]\n     \
    \           maxIndex = maxIndex + 1\n            }\n            stack.push((i+1)*top)\n\
    \        }\n        arr.push(maxVal)\n    }\n    return arr\n}\n", "  const maxNums\
    \ = [];\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] > arr[i+1]){\n\
    \      maxNums.push(arr[i]);\n    }\n  }\n  return maxNums.slice(0, k);\n}\n",
  "    var result = []\n    var resultLength = 0;\n    var minimum = Number.MAX_SAFE_INTEGER\n\
    \    var currentMax;\n    for(var i of arr){\n        if(resultLength < k){\n\
    \            if(i>0 && i<minimum){\n                currentMax = Math.max(i, currentMax)\n\
    \            } else {\n                result.push(i)\n            }\n       \
    \ } else {\n            result.push(currentMax)\n        }\n        if(i < minimum){\n\
    \            minimum = i\n        }\n        resultLength++\n        currentMax\
    \ = 0\n    }\n    result.push(currentMax)\n    return result\n}\n", "    let result\
    \ = arr\n    let n = arr.length\n    for(let i = 0; i < n - k; i++){\n       \
    \ let max = -Infinity\n        let index = i\n        for(let j = 0; j < k; j++){\n\
    \            if(arr[index] > max){\n                max = arr[index]\n       \
    \         index = j\n            }\n        }\n        if(arr[index] > max){\n\
    \            max = arr[index]\n        }\n        result.push(max)\n    }\n  \
    \  return result\n}\n", "  if (k == 0){\n    return arr;\n  }\n  if (k > arr.length){\n\
    \    return [];\n  }\n  let max = []\n  for (let i = 0; i < arr.length; i++){\n\
    \    if (max.length == 0){\n      max.push(arr[i])\n      continue;\n    }\n \
    \   if (max[max.length - 1] < arr[i]){\n      max.push(arr[i])\n    }\n  }\n \
    \ return max.slice(0, k)\n}\n", "    if (arr.length < 2) return [];\n    if (k\
    \ === 1) return arr;\n    if (k > arr.length) return [];\n\n    var maxArr = [];\n\
    \    var leftArr = [];\n    var rightArr = [];\n    var tempArr = [];\n    var\
    \ tempCount = 0;\n    for (var i = 0, len = arr.length; i < len; i++) {\n    \
    \    tempArr = [];\n        tempArr.push(arr[i]);\n        tempCount++;\n\n  \
    \      if (tempCount <= k){\n            leftArr.push(tempArr);\n        } else\
    \ {\n            rightArr.push(tempArr);\n        }\n    }\n\n    leftArr.forEach(function(val){\n\
    \        maxArr = maxArr.concat(val);\n    });\n\n    rightArr.forEach(function(val){\n\
    \        maxArr = maxArr.concat(val);\n    });\n\n    return maxArr;\n};", " \
    \ let res = null\n  \n  if(k > arr.length){\n    return res\n  }\n  \n  for(let\
    \ i=0;i<k;i++){\n    if(arr[i]>arr[i+1])\n      res = arr.slice(0,i+1)\n    else\n\
    \      res = arr.slice(i)\n    \n    break\n  }\n  \n  return res\n}\n<|/ file\
    \ dstars=1 source=github |>\n<| a dscore=0 |>\nJust keep track of the biggest\
    \ number you've seen so far and if it's bigger than the new number then reset\
    \ the biggest number to that new number. If the new number is equal to the biggest\
    \ number then just push the new number into the array:\n<code>", "    // Write\
    \ your code here\n    let max = [arr[0]];\n    for(let i = 1; i < k; i++){\n \
    \       if(arr[i] > max[0]){\n            max[0] = arr[i];\n        }\n    }\n\
    \    for(let i = 0; i < k; i++){\n        if(arr[i] > max[1]){\n            max[1]\
    \ = arr[i];\n        }\n    }\n    return max;\n}\n\nlet arr = [-3, -4, 5];\n\
    let k = 3;", "    if(k > arr.length){\n        return [...arr];\n    }\n    \n\
    \    let maxArr = [];\n    for(let i=0;i<arr.length;i++){\n        if(maxArr.length\
    \ < k)\n            maxArr.push(arr[i]);\n        else\n            for(let j=i;j<k;j++){\n\
    \                if(arr[i] > maxArr[j])\n                    maxArr.splice(j,0,arr[i]);\n\
    \            }\n    }\n    return maxArr;\n}\n", "    for(let i=0;i<k;i++){\n\
    \        var max=arr[0];\n        for(let j=1;j<arr.length;j++){\n           \
    \ if(arr[j]>max){\n                max=arr[j];\n            }\n        }\n   \
    \     arr.push(max);\n    }\n    arr.sort((a,b)=>{\n        return b-a;\n    })\n\
    \    return arr;\n}\nvar arr=new Array();\nvar n=readline.sync().toString().split(\"\
    \ \").length;\nvar k=parseInt(readline.sync().toString());\nfor(let i=0;i<n;i++){\n\
    \    arr[i]=parseInt(readline.sync().toString());\n}", "  let max = [];\n  for(let\
    \ i=0;i<arr.length;i++){\n    for(let j=i;j<arr.length;j++){\n      if(arr[i]>arr[j]){\n\
    \        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\
    \      }\n    }\n    if(k>arr.length){\n      max = [...max, arr[i]];\n    }else\
    \ if(k<arr.length){\n      if(arr.length-k-1>0){\n        max = max.concat(arr.splice(0,\
    \ k));\n      }\n    }\n  }\n  return max;\n}\n", "  if ( k > arr.length || k\
    \ <= 0 ) return arr;\n  let tempMaxArr = [];\n  \n  for (let i = 0; i < k ; i++){\n\
    \    tempMaxArr.push(Math.max.apply( Math, arr.slice( i, i + 1 ) ));\n  }\n  \n\
    \  return tempMaxArr.sort((a,b)=>a-b);\n}\n", "    const arr = arr.sort((a,b)=>b-a)\n\
    \    if(arr.length > k)\n        arr = arr.slice(-k)\n    return arr\n}\n", " \
    \   let result = []\n    let maxElement = arr[0]\n    for(let i = 0; i <= k; i++){\n\
    \        if(arr[i] > maxElement){\n            k = i\n            maxElement =\
    \ arr[i]\n        }\n    }\n    for(let i = k; i<= arr.length; i++){\n       \
    \ if(arr[i] < maxElement){\n            arr.splice(i, 0, arr[i])\n           \
    \ k-=1\n        }\n    }\n    for(let i = arr.length; i >= 0; i--){\n        result.push(arr[i])\n\
    \    }\n    return result\n}\n", "    let max = [];\n    for(let i = 0; i < k;\
    \ i++){\n        let maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n\
    \            if(arr[j] >= max[maxIndex]){\n                maxIndex = j;\n   \
    \         }\n        }\n        max.push(arr[maxIndex]);\n    }\n    return max;\n\
    }\n", "  // code here\n  var arr1 = arr.slice()\n  var max = []\n  max.push.apply(max,\
    \ arr1.splice(0, k))\n  \n  for (var i = 1; i < arr1.length; i++) {\n    if (arr1[i]\
    \ > arr1[i - 1]) {\n      var temp = arr1[i]\n      arr1[i] = arr1[i - 1]\n  \
    \    arr1[i - 1] = temp\n      max.push.apply(max, arr1.splice(0, k))\n    }\n\
    \  }\n  return max\n}\n", "    const sortedArr = arr.sort((a,b)=> b-a);\n    let\
    \ max = new Array(k);\n    for(let i=0;i<k;i++){\n        max[i] = sortedArr[i];\n\
    \    }\n    return max;\n}", "    let arr1 = arr;\n    let max = [];\n    let\
    \ length = [];\n    let maxLength = 0;\n    let flag = 0;\n    for(let i = 0;\
    \ i < k; i++){\n        length[i] = 0;\n    }\n    for(var i = 0; i < arr1.length;\
    \ i++){\n        length[arr1[i] - 1]++;\n    }\n    for(var i = 1; i <= arr1.length;\
    \ i++){\n        if(length[i] > maxLength){\n            max = arr1;\n       \
    \     flag = 1;\n            maxLength = length[i];\n        }else if(length[i]\
    \ === maxLength){\n            max.push(arr1[i]);\n        }\n    }\n    if(flag\
    \ === 1){\n        return max;\n    }else{\n        for(let i = 0; i < k; i++){\n\
    \            arr.push(max[i]);\n        }\n        return arr;\n    }\n}\n", " \
    \   let arr = arr.sort((a,b)=>a-b).reverse()\n    let res = []\n    for(i=k+1;i<arr.length;i++){\n\
    \        if(arr[i]>arr[i-1])\n            res.push(arr[i-1])\n        else\n \
    \           res.push(arr[i])\n    }\n    return res\n}", "  if(arr === null ||\
    \ arr.length === 0) return [];\n  const result = [];\n  for(let i = 0;i < k;i++){\n\
    \    let maxVal = arr[0];\n    for(let j = 0;j < arr.length;j++){\n      if(arr[j]\
    \ > maxVal) maxVal = arr[j];\n    }\n    result.push(maxVal);\n  }\n  return result;\n\
    }\n", "  if(k > arr.length){\n    k = arr.length\n  }\n  let maxArr = [];\n  let\
    \ minArr = [];\n  let sortedArr = [];\n  let copyArr = [];\n  let i;\n  for (i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] > maxArr[0]) {\n      maxArr.push(arr[i]);\n\
    \    }\n    if (arr[i] < minArr[0]) {\n      minArr.push(arr[i]);\n    }\n  }\n\
    \  for(i = 0; i < maxArr.length; i++){\n    copyArr.push(maxArr[i])\n  }\n  for(i\
    \ = 0; i < minArr.length; i++){\n    copyArr.push(minArr[i])\n  }\n  sortedArr\
    \ = copyArr.slice();\n  for(i = 0; i < k; i++){\n    sortedArr.push(maxArr[i])\n\
    \  }\n  console.log(sortedArr)\n}\n", "\tlet max = []\n\tlet maxSoFar = []\n\t\
    for(let i of arr){\n\t\tfor(let j of maxSoFar){\n\t\t\tif(i > j && i !== undefined){\n\
    \t\t\t\tif(j > i){\n\t\t\t\t\tj.push(j)\n\t\t\t\t\tmaxSoFar = j\n\t\t\t\t}else{\n\
    \t\t\t\t\tj.push(i)\n\t\t\t\t}\n\t\t\t}else if(i === undefined){\n\t\t\t\tmaxSoFar.push([i])\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i of maxSoFar){\n\t\tif(i.length < k)\n\t\t\tmax.push(i)\n\
    \t}\n\treturn max\n}\n", "\tlet len = arr.length;\n\tlet max = -Infinity;\n\t\
    let result = [];\n\tfor(let i = 0; i < len; i++){\n\t\tif(arr[i] > max){\n\t\t\
    \tmax = arr[i];\n\t\t}\n\t}\n\tfor(let i = 0; i < len; i++){\n\t\tif(arr[i] >\
    \ max && arr[i] % 1 === 0){\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\treturn\
    \ result.sort(function(a, b){\n\t\treturn b - a;\n\t});\n}\n", "    \n    // sort\
    \ the array using selection sort\n    selectionSort(arr, k, arr);\n    \n    //\
    \ find the max element in the array\n    var max = arr[0];\n    \n    for(var\
    \ i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \        }\n    }\n    \n    return max;\n}\n", "\t\n}", "    let maxArr = []\n\
    \    for (let i = 0; i < (k-1); i++){\n        maxArr.push(arr[i])\n    }\n  \
    \  maxArr.push(Math.max(...arr))\n    return maxArr\n};\n<|/ file dstars=0 ext=.js\
    \ source=github |>\n<| c |>\nCan you explain your solution?\n<|/ c |>\n<| c |>\n\
    Hey. I didn't test the code, but it should do what it says, basically it takes\
    \ the first k elements of the array, and puts them in the max array. The next\
    \ k elements are taken from the original array and placed in the max array, and\
    \ so on until the max array contains k elements.\n<|/ c |>\n<| a tags=algorithm,arrays,javascript,sorting\
    \ |>\n<code>\nconst maxSubArray = (arr, n) => {\n    const temp = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        temp.push(arr[i]);\n    }\n    temp.push(Math.max(...arr));\n\
    \    let max = temp[0];\n    let leftMax = temp[1];\n    for (let i = 2; i < arr.length;\
    \ i++) {\n        max = Math.max(temp[i - 1], temp[i], max);\n        if (max\
    \ < leftMax) {\n            leftMax = max;\n        }\n    }\n    return leftMax;\n\
    };\n", "  let res = [];\n  if(k > arr.length){\n    res.push(...arr)\n  }\n  else{\n\
    \    for(let i = 0; i < k; i++){\n      res.push(Math.max(...arr.slice(i, i +\
    \ 1)));\n    }\n  }\n  return res;\n}\n", "    // code here\n    \n}", "    let\
    \ maxArray = [];\n    let maxElement = arr[0];\n    for (let i = 0; i < k; i++){\n\
    \        let element = 0;\n        for (let j = 0; j < arr.length; j++){\n   \
    \         if (arr[j] > element){\n                element = arr[j];\n        \
    \    }\n        }\n        maxArray[i] = element;\n    }\n    return maxArray;\n\
    }\n", "   let resultArray = [];\n   let maxNumber = 0;\n   let temp = 0;\n   arr.sort((a,b)\
    \ => b - a);\n   arr.forEach((value, i) => {\n     maxNumber = Math.max(maxNumber,\
    \ value);\n     if(i + 1 <= k){\n         if (value < arr[i + 1]) {\n        \
    \     resultArray.push(value);\n         }\n         if (maxNumber >= temp) {\n\
    \             resultArray.push(maxNumber);\n             temp += maxNumber;\n\
    \         }\n     }\n   })\n   return resultArray;\n}\n", "  if (arr.length ==\
    \ 0 || k < 1 || k >= arr.length)\n    return arr\n  return arr.sort((a, b) =>\
    \ b-a)[k-1]\n}\n\nconst array = [4, -4, 4]", "    var res = new Array();\n   \
    \ for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < k; j++){\n\
    \            if(arr[i] > arr[j]){\n                arr[j] = arr[i];\n        \
    \    }\n        }\n        for(var j = 0; j < k; j++){\n            if(arr[j]\
    \ > arr[i]){\n                arr[i] = arr[j];\n            }\n        }\n   \
    \ }\n    return res.sort(function(a, b){return b-a});\n}\nvar arr = [-3, -4, 5];",
  "    var arrCopy = [];\n    for(let i = 0;i<k;i++){\n        arrCopy.push(arr[i])\n\
    \    }\n    arrCopy.sort((a,b)=>{\n        if(a>b)\n            return -1;\n \
    \       else\n            return 1;\n    });\n    return arrCopy;\n}", "    //\
    \ Write your code here\n    let sorted = arr.slice().sort((a,b) => a-b);\n   \
    \ let result = [];\n    for(let i = k; i >= 0; i--){\n        if(sorted[i]!==sorted[i+1]){\n\
    \            result.push(sorted[i]);\n        }\n    }\n    return result;\n}",
  "    \n    let arrMinusK = arr.slice();\n    arrMinusK.sort((a,b) => a-b)\n    let\
    \ arrMinusKLen = arrMinusK.length\n    \n    // console.log(\"arrMinusK\",arrMinusK);\n\
    \    // console.log(\"arrMinusKLen\",arrMinusKLen);\n    // console.log(\"arr\"\
    ,arr);\n    \n    \n    while(k && arrMinusKLen){\n        \n        k--;\n  \
    \      let arrMax = arrMinusK.pop();\n        let arrMin = arrMinusK.shift();\n\
    \        \n        while(arrMax < arrMin){\n            arrMinusK.push(arrMin)\n\
    \            arrMin = arrMinusK.shift()\n        }\n        \n        // console.log(\"\
    arrMinusK\",arrMinusK);\n        // console.log(\"arrMinusKLen\",arrMinusKLen);\n\
    \        // console.log(\"arrMax\",arrMax);\n        // console.log(\"arr\",arr);\n\
    \    }\n    \n    return arrMinusK\n    \n}\n", "    let index = 0;\n    let max\
    \ = [];\n    let maxIndex = [];\n    arr.forEach(value => {\n        if (value>max[k-1])\
    \ {\n            max[k-1] = value;\n            maxIndex[k-1] = index;\n     \
    \   }\n        index++;\n    });\n    for (let i=k-2; i<maxIndex.length; i++){\n\
    \        if (maxIndex[i] < maxIndex[i+1]){\n            max = max.concat(maxIndex[i+1]);\n\
    \            break;\n        }\n    }\n    return max;\n}\n", "    let result\
    \ = []\n    for(let i = 0;i < arr.length;i++){\n        for(let j = 0;j < k;j++){\n\
    \            if(arr[i] > arr[j]){\n                let temp = arr[j]\n       \
    \         arr[j] = arr[i]\n                arr[i] = temp\n            }\n    \
    \    }\n        result.push(arr[i])\n    }\n    return result\n}\n\nvar arr =\
    \ [4, -4, 4]", "    var max = [];\n    var maxIndex = [];\n    for(var i = 0;\
    \ i < arr.length; i++){\n        var element = arr[i];\n        if(element>max[max.length-1]){\n\
    \            max = max[max.length-1];\n            maxIndex[max.length-1] = maxIndex[max.length-1]-1;\n\
    \        }\n        max = element;\n        maxIndex[max.length-1] = i;\n    }\n\
    \    return max[max.length-k-1];\n}\n</code>\n<|/ a dscore=2 tags=sorting,javascript,arrays\
    \ |>\n<| a |>\nWe can do it in one pass by finding the min and max indexes of\
    \ the array:\n\n<code>\nconst arr = [-3, 2, 1, 2, -1, -2, 1];\nconst k = arr.length;\n\
    const sortedArr = arr.sort((a, b) => a - b);\n\nconst minIndex = sortedArr.findIndex(i\
    \ => i > 0);\nconst maxIndex = sortedArr.findIndex(i => i < 0);\n\nconst maxElement\
    \ = sortedArr[maxIndex];\nconst minElement = sortedArr[minIndex];\n\nconst maxArray\
    \ = sortedArr.slice(0, maxIndex);\nconst minArray = sortedArr.slice(minIndex,\
    \ k);\n", "  var max = arr[0];\n  var cur = arr[0];\n  for(var i = 1; i < k; i++){\n\
    \    if(arr[i] > cur){\n      cur = arr[i];\n    }\n    if(arr[i] > max){\n  \
    \    max = arr[i];\n    }\n  }\n  return max;\n}\n", "    if(arr.length === 0){\n\
    \        return []\n    }\n    if(k >= arr.length){\n        return [arr[0]]\n\
    \    }\n    let max = []\n    for(let i = k; i < arr.length; i++){\n        let\
    \ el = arr[i]\n        let index = i - k\n        if(index >= 0){\n          \
    \  let tmp = maximum([el], index)\n            if(tmp.length > 0){\n         \
    \       max.push(el)\n            }\n        }else{\n            max.push(el)\n\
    \        }\n    }\n    return max\n}\n", "    let maximum = arr[0]\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] > maximum){\n            maximum\
    \ = arr[i]\n        }\n    }\n    if(k === 0){\n        return [maximum]\n   \
    \ }\n    let result = []\n    let index = -1\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > maximum){\n            result.push(arr[i])\n    \
    \        index--\n        }\n        else if(i === arr.length - 1 && arr[i] ===\
    \ maximum){\n            result.push(arr[i])\n            index++\n        }\n\
    \    }\n    if(index > 0){\n        result.splice(index, k);\n    }\n    return\
    \ result\n}\n", "    let maxArr = [],\n        sortedArr = arr.sort((a, b) =>\
    \ {\n            return b - a\n        }),\n        length = sortedArr.length;\n\
    \n    for(let i = 0; i < length; i++){\n        for(let j = 0; j < length; j++){\n\
    \            if(j >= k){\n                maxArr.push(sortedArr[j])\n        \
    \        break;\n            }\n            else{\n                if(i == j){\n\
    \                    maxArr.push(sortedArr[j])\n                }\n          \
    \  }\n        }\n    }\n    console.log(maxArr);\n    return maxArr;\n}", "  \
    \  // write your code here\n    if(arr==undefined||arr.length<1){\n        return\
    \ arr;\n    }\n    var maxNumber=arr[0];\n    for(var i=1;i<arr.length;i++){\n\
    \        if(arr[i]>maxNumber){\n            maxNumber=arr[i];\n        }\n   \
    \ }\n    arr=arr.slice(0,k);\n    while(arr.length>k){\n        arr.shift();\n\
    \    }\n    return arr.concat(maxNumber);\n}\n", "    //sort the array first\n\
    \    arr = arr.sort((a,b) => a-b);\n    \n    //find the max number\n    var max\
    \ = 0;\n    for(var i=0;i<k;i++){\n        max = arr[i]>max ? arr[i] : max;\n\
    \    }\n    \n    //add k max number\n    for(var i=0;i<k;i++){\n        arr.push(max);\n\
    \    }\n    \n    return arr;\n}\n", "    let result = []\n    for(let i = 0;\
    \ i < k; i++){\n        result.push(Math.max(...arr))\n        arr.shift()\n \
    \   }\n    return result\n}\n\nlet arr = [-3, 2, 1, 2, -1, -2, 1]\nlet k = 1",
  "    if(k>arr.length)\n        throw new RangeError('k must be less than the length\
    \ of array');\n\n    var result = [];\n    for(var i = 0; i < k; i++)\n      \
    \  result.push(Math.max(...arr.slice(0, i + 1)));\n    return result;\n}\n\nvar\
    \ max_31 = maximum(arr, 30);", "    let sorted = arr.sort((a,b) => a-b);\n   \
    \ let result = [];\n    for(let i = 0;i<k;i++){\n        let index = sorted.length-i-1;\n\
    \        result.push(sorted[index]);\n    }\n    return result;\n}\n", "  // write\
    \ your code here\n  \n  var result = [];\n  \n  for (var i = 0; i < arr.length;\
    \ i++) {\n    for (var j = 0; j < k; j++) {\n      \n    }\n  }\n  \n  return\
    \ result;\n}\n\nmodule.exports = {\n  maximum: maximum\n};\n\"\"\"\n        expected\
    \ = \"\"\"\ndef maximum2(arr, k):\n    # write your code here\n    \n    result\
    \ = []\n    \n    for i in arr:\n        for j in range(k):\n            \n  \
    \      \n    return result\n\"\"\"\n        self.assertEqual(expected, actual)\n\
    \n    def test_maximum_sort(self):\n        actual = Solution().maximum([2, -1,\
    \ 3, -2, 1], 3)\n        expected = [-1, 2, 3]\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large(self):\n        actual = Solution().maximum([2]\
    \ * 1000000, 3)\n        expected = [2] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large2(self):\n        actual = Solution().maximum([2]\
    \ * 1000000, 2)\n        expected = [2] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_array(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 3)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_array2(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 2)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_array_array(self):\n        actual\
    \ = Solution().maximum([2, -1] * 100, [3, 2] * 100)\n        expected = [2, -1]\
    \ * 100\n        self.assertEqual(expected, actual)\n\n    def test_maximum_sort_large_array2_array(self):\n\
    \        actual = Solution().maximum([2, -1] * 100, [3, 2] * 100)\n        expected\
    \ = [2, -1] * 100\n        self.assertEqual(expected, actual)\n\n    def test_maximum_sort_large_array_array2(self):\n\
    \        actual = Solution().maximum([2, -1] * 1000000, [3, 2] * 1000000)\n  \
    \      expected = [2, -1] * 1000000\n        self.assertEqual(expected, actual)\n\
    \n    def test_maximum_sort_large_n(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 10000)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_n2(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 10000)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_n3(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 1000)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_n4(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 100)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_n5(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 1)\n        expected = [2, -1] * 1000000\n        self.assertEqual(expected,\
    \ actual)\n\n    def test_maximum_sort_large_n6(self):\n        actual = Solution().maximum([2,\
    \ -1] * 1000000, 0)\n        expected = [2, -1] * 1000000\n", "  var arrSort =\
    \ [];\n  for(var i=0; i<k; i++){\n    arrSort.push(arr[i]);\n  }\n  for(var i=0;\
    \ i<k; i++){\n    arrSort.sort(function(a, b){return a - b})\n  }\n  return arrSort;\n\
    }\n", "  if(arr.length === 0){\n    return arr;\n  }\n  if(k <= 0){\n    return\
    \ arr;\n  }\n  let max = []\n  let j = 0;\n  let max = Math.max(...arr);\n  for(i\
    \ = 0; i < arr.length; i++){\n    let flag = true;\n    for(let j = 0; j <= k;\
    \ j++){\n      if(arr[i] > arr[j] && arr[j] < max){\n        flag = false;\n \
    \       break;\n      }\n    }\n    if(flag){\n      max = [...max, arr[i]];\n\
    \      j++;\n    }\n  }\n  return max;\n}\n", "\tarr.sort(function(a, b){\n\t\t\
    return b - a\n\t})\n\tlet l = 0\n\tlet r = arr[k-1]\n\tlet result = []\n\twhile(l<k){\n\
    \t\twhile(l>=k && r<=0){\n\t\t\tresult[l] = arr[l]\n\t\t\tl++\n\t\t}\n\t\twhile(r>=k\
    \ && r>=0){\n\t\t\tresult[r] = arr[r]\n\t\t\tr--\n\t\t}\n\t}\n\tresult.unshift(arr[k-1])\n\
    \treturn result\n}\n", "    let arrMax = []\n    let arrCopy = arr.slice(0);\n\
    \    \n    for(let i = 0; i < arr.length; i++){\n        if(i > k){\n        \
    \    let current = Math.max(arrCopy[i]);\n            arrCopy[i] = current;\n\
    \        }\n        else{\n            let currentMax = arrCopy[i];\n        \
    \    for(let j = 0; j < arrCopy.length; j++){\n                if(arrCopy[j] >\
    \ currentMax){\n                    arrCopy[j] = currentMax;\n               \
    \ }\n            }\n        }\n    }\n    \n    return arrCopy;\n}\n", "    var\
    \ max = [];\n    var result = [];\n    var cur = 0;\n    for (var i = 0; i < arr.length;\
    \ i++){\n        if(cur == k){\n            max.push(arr[cur]);\n            cur\
    \ = 0;\n            while (arr[cur] == arr[cur-1]){\n                cur++;\n\
    \            }\n            while (arr[cur] == arr[cur+1]){\n                cur++;\n\
    \            }\n        }\n        else{\n            if (arr[i] > max[cur]){\n\
    \                max.push(arr[cur]);\n                cur++;\n            }\n\
    \        }\n    }\n    max.pop();\n    result.push(max[0]);\n    for (var i =\
    \ 0; i < k - 1;i++){\n        max.pop();\n        result.push(max[0]);\n    }\n\
    \    return result;\n}\n", "    arr = arr.reverse();\n    let result = [];\n \
    \   while(arr.length > 0){\n        if(result.length >= k){\n            result.pop();\n\
    \        } else {\n            let newItem = arr.pop();\n            result.unshift(newItem);\n\
    \        }\n    }\n    return result.sort((a,b) => a - b);\n}\n", "    let sortedArr\
    \ = arr.sort((a,b) => a-b);\n    let result = [];\n    let resultIndex = 0;\n\
    \    while(resultIndex != k){\n        if(sortedArr[resultIndex] > sortedArr[resultIndex+1]){\n\
    \            result.push(sortedArr[resultIndex]);\n            resultIndex++;\n\
    \        }\n        else{\n            result.push(sortedArr[resultIndex+1]);\n\
    \            resultIndex++;\n        }\n    }\n    return result;\n}\n", "\tarr.sort(function(a,b){return\
    \ b-a})\n\treturn arr.splice(0,k)\n}\n", "    if (k > arr.length) return [];\n\
    \    \n    const result = [];\n    \n    let max = -Infinity;\n    let cur = 0;\n\
    \    let i = 0;\n\n    while (cur < k) {\n        if (arr[cur] > max) max = arr[cur];\n\
    \        i++;\n        cur++;\n    }\n    \n    for (; i < arr.length; i++) {\n\
    \        if (arr[i] > max) max = arr[i];\n        result.push(max);\n    }\n \
    \   \n    return result;\n}\n", "    if(arr.length < k) return []\n    \n    let\
    \ result = [...arr]\n    result.sort((a, b) => b - a)\n    return result.slice(0,\
    \ k)\n}\n", "   let arr1 = arr.sort((a,b) => b-a); // arr1 will be [-1000, -1001,\
    \ -1002,...,1000, 1001, 1002, ..., 1999]\n   let result = [];\n   let count =\
    \ 0;\n   \n   while (count < k){\n      result.push(arr1.shift());\n      count++;\n\
    \   }\n\n   return result;\n}\n", "    let maxArr = [];\n    for(let i = 0; i\
    \ < k; i++){\n        let index = arr.indexOf(Math.max(...arr));\n        if(index\
    \ == -1){\n            console.log(maxArr);\n            return maxArr;\n    \
    \    }\n        maxArr.push(arr[index]);\n        arr.splice(index, 1);\n    }\n\
    \    console.log(maxArr);\n    return maxArr;\n}\n", "    \n    // write code\
    \ here\n    \n};\n", "  if(arr.length < k)\n    return [];\n  var max = Math.max.apply(null,\
    \ arr);\n  var res = [];\n  for(var i = 0;i<k;i++){\n    if(arr[i] > max)\n  \
    \    break;\n    res.push(arr[i]);\n  }\n  return res;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nHere is my solution:\n<code>", "    const result = new Array(k);\n\
    \    arr.forEach((el,i) => {\n        result[i] = Math.max(el,result[i]);\n  \
    \  });\n    return result.sort((a,b)=>a-b);\n}\n", "    var result = arr.reduce(function(prev,\
    \ current){\n        return prev.value > current.value ? prev : current\n    })\n\
    \    return result.value;\n}\n", "    let maxArr = [];\n    let i = arr.length;\n\
    \    let j = 0;\n    let max = 0;\n    while(i){\n        j = 0;\n        while(j){\n\
    \            if(arr[j] > max){\n                max = arr[j];\n            }\n\
    \            j++;\n        }\n        maxArr.push(max);\n        max-=1;\n   \
    \     i--;\n    }\n    return maxArr.splice(0, k);\n}", "    if (k > arr.length)\
    \ return [];\n    let newArr = [];\n    for (let i=0; i<k; i++){\n        newArr.push(arr.pop());\n\
    \    }\n    while (arr.length>0){\n        newArr.push(arr.pop());\n    }\n  \
    \  return newArr;\n}\n    \n", "\tarr.sort((a, b) => b-a)\n\tlet result = arr.slice(0,\
    \ k)\n\treturn result\n}\n", "    let ans = [];\n    for(let i = 0; i < k; i++){\n\
    \        ans.push(Math.max(...arr))\n        arr = arr.filter((e) => e !== Math.max(...arr))\n\
    \    }\n    return ans\n}\n", "\tlet max = []\n\tlet currentMax = Number.MIN_SAFE_INTEGER\n\
    \tfor(let i = 0;i<arr.length;i++){\n\t\tlet number = arr[i]\n\t\tif(Math.abs(currentMax\
    \ - number) < Math.abs(currentMax - number)){\n\t\t\tmax.push(number)\n\t\t}\n\
    \t\telse{\n\t\t\tmax.push(currentMax)\n\t\t\tcurrentMax = number\n\t\t}\n\t}\n\
    \tmax.push(currentMax)\n\tlet sortedMax = sort.desc(max)\n\treturn sortedMax.slice(0,\
    \ k)\n}\n", "  if (k===0){\n    return arr;\n  }\n  let max = [];\n  for (let\
    \ i = 0; i < k; i++){\n    max[i] = -Infinity;\n  }\n  arr.sort((a,b)=>a-b);\n\
    \  for(let i = 0; i < k; i++){\n    if (max[i] < arr[i]){\n      max[i] = arr[i];\n\
    \    }\n  }\n  return max;\n}\n", "    if (k === 0 || arr === null || arr.length\
    \ === 0 || k > arr.length){\n        return arr\n    }\n    let max = Math.max(...arr)\n\
    \    let result = []\n    for (let i = 0; i < k; i++){\n        if (arr[i] > max){\n\
    \            result.push(max)\n        }\n        max = Math.max(max, arr[i])\n\
    \    }\n    return result.concat(max)\n}\n", "    \n    // Write your code here\n\
    \    if(arr.length < 1){\n        return [];\n    }\n    let maxVal = 0;\n   \
    \ let maxIndex;\n    for(let i = 0; i < arr.length; i++){\n        if (arr[i]\
    \ > maxVal){\n            maxVal = arr[i];\n            maxIndex = i;\n      \
    \  }\n    }\n    let copy = [...arr];\n    let result = copy.filter((val, index)\
    \ => {\n        if (index === maxIndex){\n            return false;\n        }\n\
    \        return val;\n    });\n    if(result.length > k){\n        return result.slice(0,k);\n\
    \    }\n    return result;\n}\n", "    var max = []\n    var i = 0\n    while(i\
    \ < k){\n        var temp = -1\n        var index = 0\n        while(index < arr.length\
    \ && temp < arr[index]){\n            temp += arr[index++];\n        }\n     \
    \   if(temp == -1){\n            temp.value = null\n        }\n        max.push(temp)\n\
    \        i++\n    }\n    return max\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,javascript\
    \ |>\n<| a dscore=2 tags=algorithm,sorting,arrays,javascript |>\nThis is just\
    \ a small improvement to Dany's answer that is more readable:\n<code>", "    if(k>arr.length){\n\
    \        throw new Error('Invalid Argument')\n    }\n    if(k<=0){\n        throw\
    \ new Error('Invalid Argument')\n    }\n    let sortedArr = [];\n    for(let i=0;i<arr.length;i++){\n\
    \        let temp = arr[i]\n        sortedArr.push(temp)\n    }\n    sortedArr.sort((a,b)=>b-a)\n\
    \    let max = sortedArr[k-1]\n    let resultArr =  []\n    for(let i=0;i<k;i++){\n\
    \        resultArr.push(max)\n    }\n    return resultArr\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting,javascript\
    \ |>\n<| a dscore=3 |>\n<code>\nlet arr=[-3, -4, 5]\nlet sortedArr=arr.sort((a,b)=>b-a)\n\
    let sortedArr1=sortedArr.sort((a,b)=>b-a)", "    \n    let maxArr = [];\n    let\
    \ counter = 0;\n    \n    for(let i=0; i<arr.length; i++){\n        if(counter<=k){\n\
    \            maxArr[counter++] = arr[i];\n        }\n        else{\n         \
    \   break;\n        }\n    }\n    return maxArr;\n}\n", "  let res = [];\n  for\
    \ (let i = 0; i < k; i++){\n    let tmp = [];\n    for (let j = 0; j < arr.length;\
    \ j++){\n      if (j < i){\n        tmp[j] = arr[j];\n      } else if (j < arr.length){\n\
    \        tmp[j] = Math.max(arr[j], arr[i]);\n      }\n    }\n    res.push(tmp);\n\
    \  }\n  return res;\n};\n", "    let maxNum = arr[0]\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] > maxNum) {\n            maxNum = arr[i]\n\
    \        }\n    }\n    let result = []\n    let index = 0\n    if (k < maxNum)\
    \ {\n        while (index < k) {\n            result.push(maxNum)\n          \
    \  index++\n        }\n    } else {\n        while (index > k) {\n           \
    \ result.push(maxNum)\n            index--\n        }\n    }\n    return result\n\
    }\n", "    let max = [];\n    for(let i = 0; i < arr.length; i++){\n        let\
    \ maxi = Math.max(...arr);\n        arr.forEach(x => x !== maxi && x.push(maxi));\n\
    \        max = max.concat(arr);\n    }\n    return max.sort((a, b) => b.length\
    \ - a.length);\n}", "    // your code\n    var max = [];\n    var count = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(count < k){\n          \
    \  count++;\n            max.push(arr[i]);\n        }\n        else{\n       \
    \     count = 1;\n            max.push(arr[i]);\n        }\n    }\n    return\
    \ max;\n}\n", "    let result = [...arr];\n    result.sort(function(a, b){\n \
    \       return b-a;\n    });\n    return result.splice(k, result.length)\n}\n",
  "    if(arr.length == 0){\n        return []\n    }\n    if(k > arr.length){\n \
    \       return arr\n    }\n\n    let sortedArray = arr.slice(0).sort((a,b)=>a-b)\n\
    \n    let result = new Array()\n    for(let i=0;i<k;i++){\n        if(sortedArray[i]<sortedArray[i+1])\n\
    \            result.push(sortedArray[i])\n    }\n    \n    return result\n}",
  "    var max = [];\n    \n    arr.sort(function(a,b){\n        return b-a;\n   \
    \ });\n    \n    for(var i = 0; i < k; i++){\n        max.push(arr[i]);\n    }\n\
    \    \n    return max;\n}\n", "    var result = [];\n    arr.sort((a,b)=>a-b);\n\
    \    for(var i=0;i<k;i++){\n        result.push(arr[i]);\n    }\n    return result;\n\
    }\n\nvar max2 = function(arr,k){\n    var temp = [];\n    for(var i = 0; i < k;\
    \ i++){\n        temp.push(arr[i]);\n    }\n    temp.sort(function(a, b){return\
    \ a - b});\n    return temp.slice(0, k);\n}\n", "    if(arr.length<=1){\n    \
    \    return arr;\n    }\n    let max=0;\n    let index=0;\n    arr.sort((a,b)=>a-b);\n\
    \    for(let i=0;i<arr.length;i++){\n        if(arr[i]>=max){\n            max=arr[i];\n\
    \            index=i;\n        }\n    }\n    let newArr=[...arr.slice(0,index)];\n\
    \    newArr.push(max);\n    if(index<k){\n        newArr=newArr.concat(maximum(arr.slice(index+1),k-1));\n\
    \    }\n    return newArr;\n}", "    if (k > arr.length){\n        return arr.slice();\n\
    \    }\n\n    let maxArr = [Number.MIN_SAFE_INTEGER];\n    let maxLen = -1;\n\n\
    \    for (let i = 0; i < k; i++){\n        let curMax = Number.MIN_SAFE_INTEGER;\n\
    \        let curLen = 0;\n        for (let j = 0; j < arr.length; j++){\n    \
    \        if (arr[j] > curMax){\n                curMax = arr[j];\n           \
    \     curLen = j;\n            }\n        }\n        if (curLen > maxLen){\n \
    \           maxLen = curLen;\n            maxArr = [];\n            maxArr.push(curMax);\n\
    \        }\n        if (curLen > 0 && arr[i] < curMax){\n            maxArr.push(arr[i]);\n\
    \        }\n    }\n\n    return maxArr;\n}\n", "    if (k === 1){\n        return\
    \ arr;\n    }\n    \n    \n    arr.sort(function(a, b){\n        return a - b;\n\
    \    });\n    \n    let result = [];\n    \n    for (let i = 0; i < (k - 1); i++){\n\
    \        result = result.concat(arr);\n    }\n    \n    result = result.concat(arr[arr.length\
    \ - k]);\n    \n    return result;\n}\n", "  let max = -Infinity\n  let output\
    \ = []\n  let currentMax = -Infinity\n\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    let current = arr[i]\n\n    if (current > currentMax) {\n      currentMax\
    \ = current\n    } else if (current < currentMax) {\n      max = current\n   \
    \ }\n    output.push(current)\n  }\n\n  for (let i = 0; i < k; i++) {\n    output.push(max)\n\
    \  }\n\n  return output\n}\n</code>\n<|/ a |>\n<| a tags=javascript,arrays dscore=0\
    \ |>\nWe can use Array.prototype.reduceRight() to achieve the expected result.\
    \ \n\n<code>\nlet arr = [4, -4, 4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ", "    let result =\
    \ new Array(k).fill(null)\n    for(let i = 0; i < arr.length; i++){\n        let\
    \ maxIndex = arr.length - 1 - (arr.slice(i + 1).sort((a,b) => b-a).pop()-1)\n\
    \        if(maxIndex >= k){\n            maxIndex -= k\n        }\n        result[maxIndex]\
    \ = arr[i]\n    }\n    return result\n}\n", "  if (k > arr.length){\n    return\
    \ [];\n  }\n  if (k === 0){\n    return arr;\n  }\n  let indexMaxArray = [];\n\
    \  let temp = [];\n  let max = Math.max(...arr);\n  let i = 0;\n  while (i < arr.length){\n\
    \    if (arr[i] === max){\n      indexMaxArray[i] = i;\n      i++;\n    }\n  \
    \  if (i >= arr.length){\n      indexMaxArray[arr.length-1] = arr.length-1;\n\
    \    }\n    temp.push(arr[i]);\n  }\n  return arr.slice(0,k)\n    .concat(temp).concat(arr.slice(arr.length));\n\
    }\n", "    if (k > arr.length) return []\n\n    let sorted = []\n    let len =\
    \ arr.length\n    let maxVal = arr[0]\n    let index = 0\n    for (let i = 1;\
    \ i < len; i++) {\n        if (arr[i] > maxVal) {\n            index = 0\n   \
    \         maxVal = arr[i]\n        } else if (arr[i] === maxVal) {\n         \
    \   index++\n        }\n    }\n    for (let i = 1; i < k; i++) {\n        sorted.push(maxVal)\n\
    \        index++\n        maxVal = arr[index]\n    }\n    sorted.push(maxVal)\n\
    \    return sorted\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>",
  "    var result = []\n    for(let i = 0 ; i< k ; i++){\n        let max_index =\
    \ arr.indexOf(Math.max(...arr))\n        if(max_index === -1){\n            result.push(arr[i])\n\
    \        }else{\n            result.push(arr[max_index])\n            arr.splice(max_index,\
    \ 1)\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 tags=arrays,sorting,javascript,algorithm\
    \ |>\n<| a tags=arrays,sorting,javascript,algorithm |>\n<code>", "    var arrMax\
    \ = []\n    var kMax = []\n    for (var i = 0; i<k; i++){\n        arrMax.push(arr[0])\n\
    \        kMax.push(i)\n        for (var j = 0; j<k-1; j++){\n            if (arr[j]\
    \ > arr[j+1]){\n                arrMax.push(arr[j+1])\n                kMax.push(j+1)\n\
    \            }\n        }\n    }\n    arrMax.push(arr[k])\n    kMax.push(k)\n\
    \    console.log(arrMax)\n    console.log(kMax)\n    return arrMax.sort(function(a,b){return\
    \ b-a})\n}\n", "  const result = [];\n  let sum = 0;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(i === 0){\n      sum = Math.max(sum, arr[i]);\n    }else{\n  \
    \    sum = sum > arr[i] ? Math.max(sum, arr[i]) : sum;\n    }\n  }\n  const index\
    \ = arr.length - 1 - k;\n  for(let i = index; i < arr.length; i++){\n    sum =\
    \ Math.max(sum, arr[i]);\n  }\n  for(let i = 0; i < index; i++){\n    result.push(sum);\n\
    \    sum = sum > arr[i] ? Math.max(sum, arr[i]) : sum;\n  }\n  result.push(sum);\n\
    \  return result;\n}\n", "    if(arr.length === 0){\n        return []\n    }\n\
    \    \n    if(arr.length === 1 || arr.length === k){\n        return arr\n   \
    \ }\n    \n    if(k <= 0 || k > arr.length){\n        return arr\n    }\n    \n\
    \    var max_array = arr.reduce((max, i)=>{\n        return max > i ? max : i\n\
    \    }, 0)\n    \n    return [...new Array(k)]\n    .fill(0)\n    .map(() => max_array)\n\
    }\n", "    let result = [];\n    \n    for(let i = 0; i < arr.length; i++){\n\
    \        if(result.length === k){\n            result.push(arr[i]);\n        }\
    \ else {\n            let lastElement = result.pop();\n            if(arr[i] >\
    \ lastElement){\n                result.push(arr[i]);\n            }\n       \
    \ }\n    }\n    return result.sort((a, b) => a-b);\n}\n", "    let a = new Array(k).fill(null);\
    \ //new array with length k\n    let max = new Array(k).fill(null); //new array\
    \ with length k\n    for(let i=0; i<k; i++){\n        max[i] = Math.max(arr[i],\
    \ max[i]); //get maximum\n        a[i] = Math.max(arr[i], a[i]); //store maximum\
    \ from arr\n    }\n    for(let i=0; i<k; i++){\n        if(arr[i] !== null) a[i]\
    \ = arr[i]; //store maximum from arr\n    }\n    return a;\n}\n", "  var max =\
    \ [];\n  for(var i=0;i<k;i++){\n    max[i] = -Infinity;\n  }\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > max[arr.length-(k+1)]){\n      max[arr.length-(k)] = arr[i];\n\
    \    }\n  }\n  for(var i=0;i<k;i++){\n    console.log(max[i]);\n  }\n  return\
    \ max;\n}\n", "    let arrLen = arr.length;\n    \n    if(k <= arrLen || k > arr.length){\n\
    \        throw \"invalid input for k\";\n    }\n    \n    let maxArr = [];\n \
    \   \n    for(let i = 0; i < arrLen; i++){\n        let value = arr[i];\n    \
    \    if(i >= k){\n            let index = i;\n            while(index > 0 && arr[index-1]\
    \ > value){\n                arr[index] = arr[index-1];\n                index--;\n\
    \            }\n            arr[index] = value;\n            \n            let\
    \ newArr = arr.slice(0, k);\n            maxArr.push(...newArr);\n           \
    \ \n            i = index - 1;\n        }else{\n            while(value > arr[i]){\n\
    \                i++;\n            }\n            arr[i] = value;\n          \
    \  maxArr.push(arr[i]);\n        }\n    }\n    return maxArr;\n}\n", "    return\
    \ arr.reduce((prev, curr)=>{\n        if(prev === null || curr > prev){\n    \
    \        return curr\n        }\n        return prev\n    }\n    , null)\n}\n",
  "    var arr1 = arr.sort(function(a, b){\n        return a - b;\n    }), k = Math.max(k,\
    \ arr1.length), res = [];\n    for(var i = k - 1; i >= 0; i--){\n        res.push(arr1[i]);\n\
    \    }\n    return res;\n};\n", "    let length = arr.length\n    if(k <= 0 ||\
    \ length <= 0){\n        return []\n    }\n    let sortedArr = arr.sort((a, b)\
    \ => a-b)\n    let maxArr = sortedArr.reduce((accumulator, currentValue) => {\n\
    \        if(accumulator === null || currentValue > accumulator && currentValue\
    \ < arr[k-1]){\n            accumulator = currentValue\n        }\n        return\
    \ accumulator\n    }, 0)\n    return maxArr.toString()\n}\n", "    var count =\
    \ 0;\n    var returnArr = [];\n    \n    while(count < k){\n        if(arr[0]\
    \ < arr[k]){\n            returnArr[count] = arr[0];\n            count++;\n \
    \       }\n        else{\n            returnArr[count] = arr[k];\n           \
    \ count++;\n        }\n    }\n    \n    return returnArr;\n}\n\nvar arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\nvar k = 1;", "  if (arr.length <= k){\n    return arr\n\
    \  }\n  let newArr = arr.slice()\n  let maxCount = -1\n  let maxIndex = -1\n \
    \ for (let i = 0; i < newArr.length; i++){\n    let count = newArr.filter(item\
    \ => item === newArr[i]).length\n    if (count > maxCount && count > k){\n   \
    \   maxIndex = i\n      maxCount = count\n    }\n  }\n  let res = [arr[maxIndex]]\n\
    \  for (let i = maxIndex + 1; i < arr.length; i++){\n    let count = newArr.filter(item\
    \ => item === arr[i]).length\n    if (count > maxCount && count > k){\n      maxIndex\
    \ = i\n      maxCount = count\n    }\n    res[res.length-1] = arr[i]\n  }\n  return\
    \ res\n}\n", "  if(k > arr.length) return []\n  let max = []\n  let i\n  for(i\
    \ = 0; i < k; i++){\n    max.push(Math.max(arr[i], arr[0]))\n  }\n  return max\n\
    }\n", "  \n  let sorted = new Array();\n  \n  for (let i = 0; i<k; i++){\n   \
    \ let max = 0;\n    for (let j = 0; j<i; j++){\n      if (arr[i]>arr[j] && max<arr[j]){\n\
    \        max = arr[j];\n      }\n    }\n    sorted.push(max);\n  }\n  \n  return\
    \ sorted;\n}\n", "    // Write your code here\n    \n    arr.sort(function(a,\
    \ b){\n        return b-a;\n    });\n    \n    if(arr.length <= k){\n        return\
    \ arr;\n    }\n    var arr1 = arr.slice(0, k);\n    var arr2 = arr.slice(k);\n\
    \    return arr1.concat(arr2).sort(function(a, b){\n        return b-a;\n    });\n\
    };\n", "  let result = new Array(k).fill(null);\n  arr.forEach(x => {\n    let\
    \ index = result.length;\n    while (index > 0 && x > result[index-1])\n     \
    \ index--;\n    result.splice(index, 0, x);\n  });\n  return result;\n};\n", " \
    \   var sorted = arr.sort();\n    var result = [];\n    for(var i = 0; i<sorted.length-k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result.concat(sorted.slice(sorted.length-k));\n\
    }\n", "    \n    if(k <= arr.length){\n        \n        arr.sort((a,b) => b-a);\n\
    \        \n        let res = [arr[0]];\n        \n        for(let i=1;i<k;i++){\n\
    \            if(res[res.length-1] >= arr[i]){\n                res.push(arr[i]);\n\
    \            }\n        }\n        \n        return res;\n    }\n    \n    return\
    \ [];\n}\n", "\tif(!arr || !arr[0] || k > arr.length){\n\t\treturn;\n\t}\n\tvar\
    \ arr2 = arr.slice();\n\t\n\tarr2.sort(function(a, b){\n\t\treturn b-a;\n\t});\n\
    \tvar maxArr = [];\n\tvar i = 0;\n\tfor(i = 0; i < k; i++){\n\t\tmaxArr[i] = arr2[i];\n\
    \t}\n\t\n\tfor(i = 0; i < k; i++){\n\t\tarr2[i] = arr2[i+1];\n\t}\n\treturn maxArr;\n\
    }\n", "\tlet temp = [];\n\tfor(let i = 0; i < k; i++){\n\t\tlet maxElement = Number.MIN_SAFE_INTEGER;\n\
    \t\tfor(let j = 0; j < arr.length; j++){\n\t\t\tif(arr[j] > maxElement){\n\t\t\
    \t\tmaxElement = arr[j];\n\t\t\t}\n\t\t}\n\t\ttemp.push(maxElement);\n\t}\n\t\
    return temp;\n}\n", "    let maxArr = [];\n    let counter = 0;\n    arr.sort((a,b)=>{\n\
    \        return b-a;\n    })\n    for(let i=0; i<arr.length; i++){\n        if(maxArr.length<=k){\n\
    \            maxArr.push(arr[i]);\n            counter++;\n            continue;\n\
    \        }\n        if(maxArr.length-k<=counter){\n            maxArr.pop();\n\
    \            maxArr.push(arr[i]);\n            counter++;\n            continue;\n\
    \        }\n        if(maxArr[k-1] > arr[i]){\n            counter++;\n      \
    \      maxArr.pop();\n            maxArr.push(arr[i]);\n            continue;\n\
    \        }\n        if(arr[i]>maxArr[k-1]){\n            counter++;\n        \
    \    maxArr.pop();\n            maxArr.push(arr[i]);\n        }\n    }\n    return\
    \ maxArr;\n}", "    k = k % arr.length\n    arr = arr.slice(0)\n    arr.sort()\n\
    \    while(arr.length < k){\n        arr.push(-1000)\n    }\n    arr = arr.slice(0,\
    \ k)\n    return arr\n}\n<|/ file filename=findKthLargestElement.js ext=.js |>\n\
    <| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a |>\n<code>",
  "  if(k>arr.length) return []\n  var max = Number.MIN_SAFE_INTEGER\n  var result\
    \ = []\n  for(var i=0;i<arr.length; i++){\n    if(arr[i]>max) max = arr[i]\n \
    \ }\n  var left = k\n  while(arr.length>left){\n    var pos = left\n    for(var\
    \ i=0;i<arr.length; i++){\n      if(arr[i]<=max && arr[i]>arr[pos]) pos = i\n\
    \    }\n    if(pos!=k) arr.splice(pos, 1)\n    else result.push(max)\n    if(arr.length==0)\
    \ break\n    max = Number.MIN_SAFE_INTEGER\n    left = k\n    for(var i=0;i<arr.length;\
    \ i++){\n      if(arr[i]>max) max = arr[i]\n    }\n  }\n  return result\n}\n\n\
    var arr = [-3, 2, 1, 2, -1, -2, 1]", "\tif(!arr || k === undefined){\n\t\treturn\
    \ [];\n\t}\n\tlet result = new Array(k).fill(0);\n\tlet pointer = 0;\n\tfor(let\
    \ i = 0; i < arr.length; i++){\n\t\tlet pos = i + pointer;\n\t\tlet value = arr[pos];\n\
    \t\tif(value > result[pointer]){\n\t\t\tpointer++;\n\t\t\tresult[pointer] = value;\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "    let sortedArr=[];\n    \n    if(arr.length<k){\n\
    \        sortedArr=arr.sort((a, b) => b - a);\n        return sortedArr.slice(0,k);\n\
    \    }\n    if(arr.length>=k){\n        for(let i=0;i<arr.length;i++){\n     \
    \       for(let j=i+1;j<arr.length;j++){\n                if(arr[i]<arr[j]){\n\
    \                    let tmp=arr[i];\n                    arr[i]=arr[j];\n   \
    \                 arr[j]=tmp;\n                }\n            }\n        }\n \
    \       sortedArr=arr.sort((a, b) => b - a);\n        return sortedArr.slice(0,k);\n\
    \    }\n}\n", "  let arr1 = arr.sort((a, b) => a - b)\n  return arr1.slice(0,k)\n\
    }", "    let result = [],\n        sortedArr = [],\n        length = arr.length;\
    \ // length of sorted arr\n\n    // Sort array and take first k elements\n   \
    \ for(let i = 0; i < k; i++){\n        let maxIndex = -1;\n        for(let j =\
    \ 0; j < length; j++){\n            if(arr[j] > arr[maxIndex]){\n            \
    \    maxIndex = j;\n            }\n        }\n        result.push(arr[maxIndex]);\n\
    \    }\n    \n    // Put sorted array in sortedArr\n    for(let i = 0; i < length;\
    \ i++){\n        sortedArr.push(arr[i]);\n    }\n\n    return sortedArr;\n}\n",
  "    let result = [];\n    for(let i = 0; i < k; i++){\n        let max_value =\
    \ 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] > max_value){\n\
    \                max_value = arr[j];\n            }\n        }\n        result.push(max_value);\n\
    \    }\n    return result;\n}\n", "    // Write your code here\n    arr.sort(function(a,\
    \ b) {\n        if(a-b > k){\n            return a-b\n        }\n        return\
    \ b - a\n    })\n    return arr\n}\n", "  arr.sort((a,b)=>b-a);\n  return arr.slice(-k);\n\
    }\n</cell>\n<cell>\n# \u5229\u7528\u63D2\u5165\u6392\u5E8F\u627E\u51FAk\u6700\u5927\
    \u5143\u7D20\ndef maximum(arr, k):\n    arr.sort()\n    if k==0:\n        return\
    \ arr\n    else:\n        return maximum([x for x in arr if x>arr[0]],k-1)\n</cell>\n\
    <text>\n\u5229\u7528\u5192\u6CE1\u6392\u5E8F\u627E\u51FA\u6700\u5927\u503C\n\u5229\
    \u7528\u5192\u6CE1\u6392\u5E8F\u627E\u51FAk\u4E2A\u6700\u5927\u503C\uFF0C\u8FD9\
    \u91CC\u6211\u4EEC\u5047\u8BBE\u8F93\u5165\u7684\u6570\u7EC4\u957F\u5EA6\u662F\
    \u4E00\u534A\u3002\n\n\n</text>\n<cell>\n# \u5229\u7528\u5192\u6CE1\u6392\u5E8F\
    \u627E\u51FAk\u4E2A\u6700\u5927\u503C\ndef maximum2(arr, k):\n    arr.sort()\n\
    \    if k==0:\n        return arr\n    else:\n        return maximum2([x for x\
    \ in arr if x>arr[0]],k-1)\n</cell>\n<text>\n1.8 \u8BA1\u6570\u6392\u5E8F\n\u8BA1\
    \u6570\u6392\u5E8F\u662F\u4E00\u79CD\u57FA\u4E8E\u6392\u5E8F\u7684\u6392\u5E8F\
    \u7B97\u6CD5\u3002\u8BA1\u6570\u6392\u5E8F\u6BCF\u4E2A\u5143\u7D20\u5728\u6392\
    \u5E8F\u524D\u9700\u8981\u8BA1\u6570\uFF0C\u8FD9\u4E2A\u8BA1\u6570\u6709\u4E24\
    \u79CD\u60C5\u51B5\uFF1A\n\n\u8BA1\u6570\u4E3A0\uFF0C\u8FD9\u662F\u6700\u540E\u4E00\
    \u4E2A\u5143\u7D20\u3002\n\u8BA1\u6570\u5927\u4E8E0\u3002\u8FD9\u662F\u6700\u540E\
    \u4E00\u4E2A\u5143\u7D20\u7684\u6B21\u6570\u3002\n\n\u5047\u8BBE\u8BA1\u6570\u6392\
    \u5E8F\u7684\u6BCF\u4E00\u6B65\u90FD\u662F\u5BF9\u4E00\u4E2A\u6570\u8FDB\u884C\
    \u6392\u5E8F\uFF0C\u6BCF\u4E2A\u5143\u7D20\u7684\u8BA1\u6570\u6709\u4E24\u79CD\
    \u60C5\u51B5\uFF1A\n\n\u8BA1\u6570\u4E3A0\uFF0C\u8FD9\u662F\u8BA1\u6570\u6392\u5E8F\
    \u7684\u7B2C\u4E00\u6B65\u3002\n\u8BA1\u6570\u5927\u4E8E0\u3002\u8FD9\u662F\u8BA1\
    \u6570\u6392\u5E8F\u7684\u7B2C\u4E8C\u6B65\u3002\n\n\u8BA1\u6570\u6392\u5E8F\u7B97\
    \u6CD5\u7684\u57FA\u672C\u601D\u60F3\u662F\u628A\u6570\u7EC4\u5206\u5272\u6210\
    \u4E00\u7EC4\u7684\u4E24\u90E8\u5206\u3002\u7B2C\u4E00\u6B65\u662F\u627E\u51FA\
    \u4E00\u4E2A\u6570\u7EC4\u7684\u4E2D\u4F4D\u6570\uFF0C\u8FD9\u4E2A\u6570\u7EC4\
    \u5C31\u662F\u8BA1\u6570\u6392\u5E8F\u7684\u7B2C\u4E00\u6B65\u3002\u7B2C\u4E8C\
    \u6B65\u662F\u5BF9\u8FD9\u4E2A\u4E2D\u4F4D\u6570\u6570\u7EC4\u4E2D\u7684\u6240\
    \u6709\u5143\u7D20\u8FDB\u884C\u6392\u5E8F\uFF0C\u5176\u4E2D\u4E00\u4E2A\u5143\
    \u7D20\u7684\u8BA1\u6570\u6709\u4E24\u79CD\u60C5\u51B5\uFF1A\n\n\u8BA1\u6570\u4E3A\
    0\uFF0C\u8FD9\u662F\u7B2C\u4E00\u4E2A\u5143\u7D20\u3002\n\u8BA1\u6570\u5927\u4E8E\
    0\u3002\u8FD9\u662F\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u6B21\u6570\u3002\n\n\u8BA1\
    \u6570\u6392\u5E8F\u7B97\u6CD5\u7684\u6B65\u9AA4\u5982\u4E0B\uFF1A\n\n\u5BF9\u4E8E\
    \u6BCF\u4E2A\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u5143\u7D20\u627E\u51FA\u4E2D",
  "    \n    let arr1=new Array(k).fill(0);\n    let arr2=new Array(k).fill(0);\n\
    \    let arr3=new Array(k).fill(0);\n\n    for(let i=0;i<arr.length;i++){\n  \
    \      arr1[k-1]+=arr[i];\n    }\n    for(let i=0;i<arr.length;i++){\n       \
    \ arr2[k-1]+=arr[i];\n    }\n    for(let i=0;i<arr.length;i++){\n        if(arr1[k-1]>arr2[k-1]){\n\
    \            arr3[k-1]=arr1[k-1];\n        }\n        else{\n            arr3[k-1]=arr2[k-1];\n\
    \        }\n    }\n    \n    let arr4=new Array(k).fill(0);\n    for(let i=0;i<arr.length;i++){\n\
    \        arr4[k-1]+=arr[i];\n    }\n    let arr5=new Array(k).fill(0);\n    for(let\
    \ i=0;i<arr.length;i++){\n        if(arr1[k-1]>arr4[k-1]){\n            arr5[k-1]=arr1[k-1];\n\
    \        }\n        else{\n            arr5[k-1]=arr4[k-1];\n        }\n    }\n\
    \n    let arr6=new Array(k).fill(0);\n    for(let i=0;i<arr.length;i++){\n   \
    \     if(arr2[k-1]>arr6[k-1]){\n            arr6[k-1]=arr2[k-1];\n        }\n\
    \        else{\n            arr6[k-1]=arr6[k-1];\n        }\n    }\n\n    \n \
    \   return arr3;\n    \n    \n    \n}\n\n\n", "    var result = [];\n    \n  \
    \  for(var i = 0; i < k; i++){\n        var minIndex = 0;\n        for(var j =\
    \ i; j < arr.length; j++){\n            if(arr[j] < arr[minIndex]){\n        \
    \        minIndex = j;\n            }\n        }\n        result.push(arr[minIndex]);\n\
    \        arr.splice(minIndex, 1);\n    }\n    \n    for(var i = 0; i < arr.length;\
    \ i++){\n        result.push(arr[i]);\n    }\n    \n    return result;\n}\n",
  "    var arr2 = arr.slice();\n    arr2.sort(function(a, b) {\n        return b -\
    \ a;\n    });\n    var n = arr.length;\n    var result = [];\n    var max = 0;\n\
    \    if (k > n || k < 0) {\n        throw 'invalid arguments';\n    }\n    if\
    \ (k == 0){\n        return arr2;\n    }\n    for(var i = 0; i < k; i++){\n  \
    \      if(arr2[i] > arr2[i + 1]){\n            result.push(arr2[i]);\n       \
    \     max = Math.max(max, arr2[i]);\n        }\n    }\n    result.push(max);\n\
    \    return result.sort(function(a, b) {\n        return b - a;\n    });\n}\n",
  "    let arrMax = arr.reduce((max,num)=>Math.max(max,num),-Infinity);\n    return\
    \ arr.slice(0,Math.min(k,arr.length)).sort((a,b)=>a-b).concat(arr.slice(Math.min(k,arr.length),arr.length)).map((elem)=>elem>=arrMax?arrMax:elem);\n\
    }\n", "    const newArr = new Array(k)\n    let maxNumber = Number.MIN_SAFE_INTEGER\n\
    \    for(let i=0; i<k; i++){\n        newArr[i] = Number.MAX_SAFE_INTEGER\n  \
    \  }\n    for(let i=0; i<arr.length; i++){\n        for(let j=0; j<k; j++){\n\
    \            if(arr[i] < newArr[j] && arr[i] > maxNumber){\n                newArr[j]\
    \ = arr[i]\n            }\n        }\n    }\n    return newArr.filter(el=>el>=0)\n\
    }\nconst testArr = [-3, 2, 1, 2, -1, -2, 1];", "    let result = []\n    let temp\
    \ = []\n    let kMax = k-1\n    let i = 0\n    \n    while(i < arr.length){\n\
    \        let val = arr[i]\n        if(temp.length >= kMax){\n            result.push(temp[kMax])\n\
    \            temp.splice(kMax, 1)\n        } else {\n            temp.push(val)\n\
    \        }\n        i++\n    }\n    \n    while(temp.length > 0){\n        result.push(temp[0])\n\
    \        temp.shift()\n    }\n    \n    return result\n}\n", "  if(k > arr.length){\n\
    \    return [];\n  }\n  \n  var max = [];\n  var res = [];\n  var len = arr.length;\n\
    \  \n  while(k--){\n    var maxIndex = 0;\n    var max = Math.max(arr[maxIndex],\
    \ arr[0]);\n    \n    for(var i = 1; i < len; i++){\n      if(arr[i] > max){\n\
    \        max = arr[i];\n        maxIndex = i;\n      }\n    }\n    res.push(max);\n\
    \    \n    arr[maxIndex] = Math.max(arr[maxIndex], arr[0]);\n    \n  }\n  return\
    \ res;\n}\n", "    if (k < 0){\n        return [];\n    }\n    if (k > arr.length){\n\
    \        return arr;\n    }\n    \n    var arr2 = [];\n    \n    for (var i =\
    \ 0; i < k; i++){\n        arr2.push(Math.max(...arr));\n    }\n    return arr2;\n\
    \    \n}\n", "    let maximum = [];\n    for(let i = 0;i<arr.length;i++){\n  \
    \      if(maximum.length < k){\n            maximum.push(arr[i]);\n        }\n\
    \        if(maximum.length == k){\n            maximum.sort(function(a,b){\n \
    \               return a-b;\n            })\n            maximum = maximum.slice(0,\
    \ k);\n        }\n    }\n    return maximum;\n}\n", "  if(arr instanceof Array){\n\
    \    if(k > arr.length || k < 0){\n      return [];\n    }\n    \n    let maxArray\
    \ = [],\n    sortedArray = [];\n    for(let i=0; i<k; i++){\n      if(sortedArray.length\
    \ !== 0){\n        sortedArray.push(maxArray[0]);\n        maxArray.shift();\n\
    \      }\n    }\n    for(let i=0, len=arr.length; i<k; i++){\n      if(maxArray.length\
    \ < len){\n        maxArray.push(arr[i])\n      }\n      if(sortedArray.length\
    \ !== 0){\n        sortedArray.push(arr[i]);\n      }\n    }\n    return sortedArray;\n\
    \  }\n}\n\nlet input = [-3, 2, 1, 2, -1, -2, 1];\nlet result1 = maximum(input,\
    \ 1);\nlet result2 = maximum(input, 2);\nlet result3 = maximum(input, 3);", " \
    \   let result = [];\n    while(result.length<k){\n        result.push(Math.max(...arr));\n\
    \        arr.splice(0,1);\n    }\n    return result;\n}", "    if(k > arr.length){\n\
    \        return arr;\n    }\n    let max_num = [];\n    let temp = 0;\n    for(let\
    \ i = 0; i < k; i++){\n        max_num[i] = arr[i]; \n    }\n    for(let i = k;\
    \ i < arr.length; i++){\n        if(arr[i] > max_num[0]){\n            max_num[0]\
    \ = arr[i];\n        }\n        if(arr[i] > max_num[1]){\n            max_num[1]\
    \ = arr[i];\n        }\n        for(let j = 0; j < k; j++){\n            if(arr[i]\
    \ > max_num[j]){\n                temp = arr[i];\n                max_num[j] =\
    \ arr[i];\n            }\n        }\n    }\n    return max_num;\n}\n", "  \n \
    \ if (k == 0 || k > arr.length) return []\n  const res = [];\n  let max = 0;\n\
    \  for (let i = 0; i < k; i++)\n    if (arr[i] > max)\n      max = arr[i];\n \
    \ for (let i = 0; i < arr.length; i++)\n    if (arr[i] <= max)\n      res.push(arr[i]);\n\
    \  return res;\n}\n", "    if(k===arr.length){\n        return arr;\n    }\n \
    \   \n    var largest= arr[0];\n    for(var i=1;i<=k;i++){\n        if(arr[i]>largest){\n\
    \            largest=arr[i];\n        }\n    }\n    return largest;\n}\n", " \
    \   let max = arr[0];\n    let maxIndex = 0;\n    let maxLength = 1;\n    let\
    \ maxIndexLength = 1;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n            maxIndex = i;\n            maxLength\
    \ = maxLength + 1;\n            maxIndexLength = maxIndexLength + 1;\n       \
    \ }\n    }\n    if(k > maxLength){\n        return [];\n    }\n    if(k == maxLength){\n\
    \        return arr.slice(0, k);\n    }\n    else if(k == maxIndexLength){\n \
    \       let newArr = arr.slice(0, k);\n        newArr.push(max, arr[k]);\n   \
    \     return newArr;\n    }\n    else{\n        let newArr = arr.slice(0, k);\n\
    \        newArr.push(max);\n        return newArr.concat(arr.slice(k + 1, arr.length));\n\
    \    }\n}\n", "    \n    if (k > arr.length){\n        return arr.slice();\n \
    \   }\n\n    var max = [],\n        current = [];\n    \n    for(var i = 0; i\
    \ < k; i++){\n        max.push(Math.max.apply(Math, arr));\n        current =\
    \ [];\n        for(var j = 0; j < arr.length; j++){\n            if(arr[j] ===\
    \ max[i]){\n                current.push(arr[j]);\n            }\n        }\n\
    \        arr = current;\n    }\n    return max;\n}\n", "  let arrCopy = arr.slice();\n\
    \  arrCopy.sort((a,b)=>a-b);\n  return arrCopy.slice(0,k);\n}\n", "  let max =\
    \ new Array();\n  for (let i = 0; i < arr.length; i++){\n    if (max[i] === undefined)\
    \ {\n      max[i] = arr[i];\n    } else {\n      if (arr[i] > max[i]) {\n    \
    \    max[i] = arr[i];\n      }\n    }\n  }\n  return max;\n}\n", "    if(k >=\
    \ arr.length){\n        let max = []\n        for(let i = 0; i < arr.length; i++){\n\
    \            if(max.length <= i){\n                max = arr.slice(i,i + k);\n\
    \            }\n        }\n        return max;\n    }\n    let max = []\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(max.length <= i){\n            max\
    \ = arr.slice(i,i + k);\n        }\n    }\n    for(let i = arr.length - k; i <\
    \ arr.length; i++){\n        if(max.length <= i){\n            max = arr.slice(i,i\
    \ + k);\n        }\n    }\n    return max;\n}", "    let newArr = [];\n    let\
    \ j = 0;\n    for(let i = 0; i<arr.length; i++){\n        if(j == k){\n      \
    \      return newArr;\n        }\n        if(arr[i] > newArr[j]){\n          \
    \  newArr[j]=arr[i];\n            i++;\n            j++;\n        }\n    }\n}\n\
    </code>\n<|/ a tags=arrays,sorting,javascript,algorithm |>\n<| a tags=arrays,sorting,javascript,algorithm\
    \ dscore=2 |>\nI used a temporary array to hold the largest numbers when needed.\
    \ The advantage of this method over sorting is that if there are two max numbers\
    \ in the array, the second one is ignored. \nHere is an example: \n<code>\nconst\
    \ arr = [-6, 5, -4, -6, -5, -5, 5];\nconst k = 3;\nlet tmp = [];\narr.sort((a,b)\
    \ => a - b);\nlet maxArray = [];\nfor (let i = 0; i < k; i++) {\n    let isMax\
    \ = false;\n    for (let j = 0; j < k; j++) {\n        if (arr[j] >= maxArray[j])\
    \ {\n            isMax = true;\n            break;\n        }\n    }\n    if (!isMax)\
    \ {\n        tmp.push(arr[i]);\n    }\n}\nmaxArray = tmp;", "\t\n}\n</cell>\n\
    <text>\nProblem 8. Return the minimum number in a list.\nExample 1:\nInput: arr\
    \ = [-4, 2, -1, 3, -7, -5, 4], k = 1\nOutput: 4\nExplanation: arr[0] is the only\
    \ minimum value, and the k'th minimum value is at index 0.\nNote:\nThe input array\
    \ is not necessarily sorted in ascending order. It does not contain duplicates.\n\
    \n\n</text>\n<cell>", "\tlet max = [];\n\tfor (let i = 0; i < k; i++){\n\t\tmax.push(arr[0]);\n\
    \t}\n\tfor (let i = 0; i < arr.length; i++){\n\t\tlet index = arr.indexOf(Math.max(...arr));\n\
    \t\tarr[index] = Math.max(arr[index], arr[i]);\n\t\tmax.push(arr[index]);\n\t\
    }\n\treturn max;\n}\n", "    // code here\n    var ans = [];\n    for(let i =\
    \ 0; i < k; i++){\n        let minIndex = 0;\n        let minValue = arr[0];\n\
    \        for(let j = 0; j < arr.length; j++){\n            if(arr[j] < minValue){\n\
    \                minValue = arr[j];\n                minIndex = j;\n         \
    \   }\n        }\n        ans.push(minValue);\n        arr.splice(minIndex, 1);\n\
    \    }\n    return ans;\n}\n\nvar arr = [-3, 2, 1, 2, -1, -2, 1];", "  let newArr\
    \ = [];\n  let tmpMax = arr[0]\n  for (let i = 0; i < arr.length; i++) {\n   \
    \ if(arr[i] > tmpMax) {\n      tmpMax = arr[i];\n    }\n  }\n  newArr = [...newArr,\
    \ tmpMax];\n  while(newArr.length > k){\n    newArr.shift();\n  }\n  return newArr;\n\
    }\n", "  const result = new Array();\n\n  for(i = 0; i < k; i++)\n  {\n    for(j\
    \ = 0; j < arr.length; j++)\n    {\n      if(arr[j] > arr[i])\n      {\n     \
    \   let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n      }\n\
    \    }\n  }\n  for(j = 0; j < arr.length; j++)\n  {\n    if(arr[j] > result[k\
    \ - 1])\n    {\n      result[k-1] = arr[j]\n    }\n  }\n  return result\n}\n",
  "  \n  let result = new Array(k)\n  \n  for (let i = 0; i< k; i++){\n    result[i]\
    \ = Math.max(arr[i], 0)\n  }\n\n  result.sort()\n  return result\n}\n  \n", "\t\n\
    }\n", "  if (arr.length === 0) return arr;\n  if (arr.length === 1 && arr[0] >=\
    \ 0) return arr;\n  let maxArr = [];\n  let index = 0;\n  \n  while (arr.length\
    \ > 0){\n    if (arr[index] > arr[index + 1]){\n      maxArr = [...maxArr, ...arr.slice(0,\
    \ index + 1)];\n      arr = [...arr.slice(index + 1)];\n      index += 1;\n  \
    \  }else if (arr[index] === arr[index + 1]){\n      maxArr = [...maxArr, ...arr.slice(0,\
    \ index + 2)];\n      arr = [...arr.slice(index + 2)];\n      index += 1;\n  \
    \  }else{\n      maxArr = [...maxArr, ...arr.slice(0, index + 1)];\n      arr\
    \ = [...arr.slice(index + 1)];\n      index += 1;\n    }\n  }\n  maxArr = [...maxArr,\
    \ ...arr.slice(0, index + 1)];\n  \n  let arrCopy = [...arr];\n  arrCopy.sort((a,b)=>b-a);\n\
    \  return maxArr.slice(0, k);\n}\n", "  var result = [];\n  arr.forEach(function(v){\n\
    \    result.push(v);\n  });\n  result = result.sort(function(a, b){\n    return\
    \ a-b;\n  });\n  k = Math.min(k, result.length); \n  return result.slice(0, k);\n\
    }\n", "\tlet result = [];\n\t\n\tfor(let i = 0; i< arr.length; i++){\n\t\tif(k\
    \ > 0 && k > result.length){\n\t\t\tfor(let j = 0; j < k; j++){\n\t\t\t\tresult.push(arr[j]);\n\
    \t\t\t}\n\t\t}else{\n\t\t\tlet index = -1;\n\t\t\tlet maxNum = arr[i];\n\t\t\t\
    \n\t\t\tfor(let j = 0; j < k; j++){\n\t\t\t\tif(arr[j] > maxNum){\n\t\t\t\t\t\
    maxNum = arr[j];\n\t\t\t\t\tindex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(index\
    \ > -1){\n\t\t\t\tlet tmp = result.splice(index, 1);\n\t\t\t\tresult.push(maxNum);\n\
    \t\t\t\tresult = result.concat(tmp);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\n", "  let sorted = arr.sort((a,b)=>a-b);\n  let ret = [];\n  \n  let max =\
    \ [];\n  for(let i = 0; i<k; i++){\n    if(sorted.length>k){\n      sorted = sorted.slice(0,k);\n\
    \    }\n    ret.push(sorted.shift());\n  }\n  \n  max = ret.sort((a,b)=>a-b);\n\
    \  ret.push(max.shift());\n  \n  return ret;\n}\n", "    return arr.reduce((p,c,i)\
    \ => (p.push(c), i < k? p : []), [])\n}\n", "    // initialize maxVal to arr[0]\n\
    \    let maxVal = arr[0];\n    \n    // initialize a new array to store the sorted\
    \ arr\n    let sortedArr = new Array(k);\n    \n    // loop through the arr\n\
    \    for (let i=1; i<arr.length; i++){\n        // if the current element is greater\
    \ than the maxVal\n        if (arr[i] > maxVal){\n            // update maxVal\
    \ to current element\n            maxVal = arr[i];\n        }\n        \n    \
    \    // loop through the k\n        for (let j=0; j<k; j++){\n            // if\
    \ the current element is greater than the maxVal\n            if (arr[j] > maxVal){\n\
    \                // remove maxVal\n                maxVal = arr[j];\n        \
    \        // add the current element\n                sortedArr[j-1] = arr[j];\n\
    \                // break the loop\n                break;\n            }\n  \
    \      }\n    }\n    \n    // return the sorted arr\n    return sortedArr;\n}\n",
  "    const sorted = arr.sort((a,b) => b-a);\n    const result = [];\n    for(let\
    \ i = 0; i<k; i++){\n        result.push(sorted[i])\n    }\n    return result;\n\
    }\n", "    arr = arr.sort(function(a, b){return a - b});\n    k = Math.min(k,\
    \ arr.length)\n    \n    return arr.slice(0, k);\n}\n<|/ file ext=.js dstars=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar maximum = function(arr, k){\n    \n    let\
    \ sorted = arr.sort(function(a, b){return a - b});\n    k = Math.min(k, sorted.length)\n\
    \    \n    return sorted.slice(0, k);\n};\n", "    \n    let result = [];\n  \
    \  \n    for(let i = 0; i < arr.length; i++){\n        if(result.length >= k){\n\
    \            return result.slice(0, k);\n        }\n        if(arr[i] > result[k-1]){\n\
    \            result.push(arr[i]);\n        }\n    }\n    \n    return result;\n\
    }\n", "    // Write your code here\n    \n    let maxArr = [];\n    let maxIndex\
    \ = 0;\n    let i = 0;\n    while(i < k){\n        if(arr[i] > arr[i+1]){\n  \
    \          maxArr[i] = arr[i+1];\n            maxIndex += 1;\n        }else{\n\
    \            maxArr[i] = arr[i];\n        }\n        i += 1;\n    }\n    return\
    \ maxArr.slice(0, k);\n}\n", "    let len = arr.length\n    let sorted = [...arr]\n\
    \    for(let i = 0;i<k-1;i++){\n        sorted.sort(function(a, b){\n        \
    \    return a - b\n        })\n    }\n    return sorted.slice(0, k)\n}\n\nlet\
    \ nums = [1, -2, 4, 0, 4, -2, -1, -3, -1, 0, -3, -5, -6]", "    // code here\n\
    \    let newArr = arr.sort((a,b) => a-b);\n    let maxArr = [];\n    let sum =\
    \ 0;\n    for(let i = 0; i < k; i++){\n        maxArr.push(newArr[i]);\n     \
    \   sum += newArr[i];\n    }\n    while(sum > 0){\n        for(let i = 0; i <\
    \ k; i++){\n            if(sum - newArr[i] < 0){\n                sum += newArr[i];\n\
    \                maxArr.push(newArr[i]);\n            }\n            else{\n \
    \               sum -= newArr[i];\n            }\n        }\n    }\n    return\
    \ maxArr;\n};\nmodule.exports = {\n    maximum,\n};\n'''\n\n\n'''", "    let maxArr\
    \ = arr.sort((a,b)=>{\n        return a-b;\n    }).slice(0,k);\n    return maxArr;\n\
    }\n", "    let resultArr = [];\n    let arr = arr.sort((a,b) => b-a);\n    let\
    \ i = 0;\n    \n    while (i < k){\n        if (resultArr[i] === null || resultArr[i]\
    \ > arr[i]){\n            resultArr[i] = arr[i]\n        }\n        i++\n    }\n\
    \    \n    return resultArr\n};\n<|/ file source=github dstars=1 |>\n<| c |>\n\
    You missed the condition \"2 <= k <= k\". Besides, your method does not return\
    \ the expected result on inputs like [5, 3, 4, -6]. Also, your method is slower\
    \ than the sorting method.\n<|/ c |>\n<| c |>\nThanks I updated the condition\
    \ to <= k <= k and added the extra condition of 2 <= k <= k.\n<|/ c |>\n<| a |>\n\
    I didn't test it but I think you should put this if condition before or after\
    \ the while condition because otherwise the loop will run at least 1 time.\n<code>\n\
    if(resultArr.length < k){\n    resultArr = [...resultArr, arr[i]];\n}\n</code>\n\
    <|/ a tags=javascript dscore=0 |>\n<| a dscore=0 |>\n<code>", "    let arrMax\
    \ = []\n    for(let i=0; i<arr.length; i++){\n        let val = arr[i];\n    \
    \    while(val >= arrMax.length){\n            arrMax.push(arrMax[arrMax.length-1]);\n\
    \        }\n        while(arrMax.length-val < k){\n            arrMax.push(arrMax[arrMax.length-1]);\n\
    \        }\n        arrMax.push(val);\n    }\n    return arrMax;\n}\n", "    let\
    \ sortedArr = [];\n    for(let i=0;i<k;i++){\n        let maxElem = Math.max(...arr.filter(x\
    \ => x >= 0));\n        sortedArr.push(maxElem);\n    }\n    return sortedArr;\n\
    }", "    let max = []\n    let arr = arr.sort((a,b)=>a-b)\n    for(let i=0;i<k;i++){\n\
    \        max.push(arr[i])\n    }\n    return max\n}", "\tlet max = [];\n\tlet\
    \ index = [];\n\tlet maxIndex = 0;\n\t\n\tfor (let i = 0; i <k; i++){\n\t\tmaxIndex\
    \ = -1;\n\t\tfor(let j = 0; j<k; j++){\n\t\t\tif (arr[j] > max[j]){\n\t\t\t\t\
    max[maxIndex] = arr[j];\n\t\t\t\tindex[maxIndex] = j;\n\t\t\t\tmaxIndex++;\n\t\
    \t\t}\n\t\t}\n\t}\n\t\n\tmax = [];\n\tfor (let i = 0; i < k; i++){\n\t\tmaxIndex\
    \ = -1;\n\t\tfor(let j = 0; j < k; j++){\n\t\t\tif (index[j] == maxIndex){\n\t\
    \t\t\tmax[maxIndex] = arr[index[j]];\n\t\t\t\tmaxIndex++;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn max;\n}\n", "    \n}\n</cell>\n<cell>\n#2", "    var result = [];\n\
    \    for(var i = 0; i < k; i++){\n        result.push(Math.max(...arr));\n   \
    \     arr.shift();\n    }\n    return result;\n}\n", "    \n}\n</cell>\n<cell>",
  "    var temp = [];\n    temp.push(arr[0]);\n    arr.shift();\n    \n    for(var\
    \ i = 1; i < k; i++){\n        if(arr[i] > temp[temp.length - 1])\n          \
    \  temp[temp.length] = arr[i];\n    }\n    return temp;\n}\n", "\tconst result\
    \ = [];\n\n\t// sort arr\n\tarr = arr.sort((a, b) => a - b);\n\n\t// copy arr\
    \ to result\n\tfor(let i = 0; i < k; i++){\n\t\tresult.push(arr[i]);\n\t}\n\n\t\
    // reverse arr\n\tarr.reverse();\n\n\t// copy arr to result\n\tfor(let i = k -\
    \ 1; i >= 0; i--){\n\t\tresult.push(arr[i]);\n\t}\n\n\treturn result;\n}\n", " \
    \   let max = []\n    for(let i = 0; i < k; i++)\n    {\n        max.push(arr[0])\n\
    \    }\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] > max[0])\n\
    \        {\n            for(let j = 0; j < k; j++)\n            {\n          \
    \      max[j] = arr[i]\n            }\n        }\n    }\n    for(let i = 0; i\
    \ < k; i++)\n    {\n        console.log(max[i])\n    }\n    return max\n}\n",
  "    var maxArr = []\n    var cur = arr[0]\n    for (var i = 1; i < k; i++){\n \
    \       cur = cur > arr[i] ? cur : arr[i]\n        maxArr.push(cur)\n    }\n \
    \   return maxArr\n}\n<|/ file dstars=1 filename=0061_Number_of_Occurrence_of_Digit.js\
    \ ext=.js |>", "    let n = arr.length;\n    if(k > n) return [];\n    let ret\
    \ = new Array();\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j <\
    \ k; j++){\n            let m = Math.min(arr[i], arr[i+j+1]);\n            if(ret[j]\
    \ === undefined){\n                ret[j] = m;\n            }\n            else\
    \ if(m > ret[j]){\n                ret[j] = m;\n            }\n        }\n   \
    \ }\n    return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis code\
    \ should do the job : \n<code>", "  const res = [];\n  arr.sort((a, b) => a-b);\
    \ //Sort descending order\n  \n  //If k is equal to or greater than length of\
    \ arr then return arr\n  if(k > arr.length){\n    return arr;\n  }\n  //If k is\
    \ less than length of arr then return arr\n  if(k < arr.length){\n    res.push(...arr.slice(0,\
    \ k));\n    return res;\n  }\n  //If k is equal to length of arr then return only\
    \ arr\n  if(k === arr.length){\n    return arr;\n  }\n}\n", "\tlet max = arr[0];\n\
    \tlet maxIndex = 0;\n\tfor(let i = 1; i < k; i++){\n\t\tif(arr[i] > max){\n\t\t\
    \tmax = arr[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn arr.splice(maxIndex,\
    \ 1)\n}\n", "    let max = arr[0]\n    for(let i=1;i<k;i++){\n        if(arr[i]>max){\n\
    \            max = arr[i]\n        }\n    }\n    let arr2 = []\n    for(let i=0;i<k;i++){\n\
    \        arr2.push(max)\n    }\n    return arr2\n}\n", "  let maxArr=[];\n  let\
    \ currentMax=arr[0];\n  for(let i=0;i<k;i++){\n    if (arr[i]>currentMax){\n \
    \     currentMax = arr[i]\n    }\n    maxArr.push(currentMax)\n  }\n  return maxArr;\n\
    }\n<|/ file dstars=0 ext=.js |>\n<| c |>\nPlease don't use \"thank you\" comments\
    \ \u2014 instead, vote on the answers and ask for clarification.\n<|/ c |>\n<|\
    \ a tags=javascript,algorithm,arrays |>\n<code>", "    var array = [];\n    \n\
    \    for(var i = 0; i < k; i++){\n        array.push(arr[i])\n    }\n    \n  \
    \  array = array.sort(function(a, b){\n        return b - a\n    });\n    \n \
    \   return array;\n}\n", "    let result = [];\n    arr.sort((a,b) => a-b);\n\
    \    let tmp = [];\n    for(let i = 0; i < k; i++ ){\n        for(let j = 0; j\
    \ < k; j++){\n            if(i == j)\n                tmp.push(arr[j]);\n    \
    \        if((tmp.length + 1) <= k){\n                result.push(tmp);\n     \
    \           tmp = [];\n            }else{\n                tmp.push(arr[j]);\n\
    \            }\n        }\n    }\n    result.push(tmp);\n    for(let i = 1; i\
    \ < result.length; i++){\n        result[i] = result[i].concat(result[i-1]);\n\
    \    }\n    result.sort((a,b) => a-b);\n    return result;\n}\nvar maxK = function(arr,\
    \ k) {\n  return Array.from({ length: k }, (_, i) => Math.max(...arr.map(x =>\
    \ x))).slice(0, k);\n};", "    var max = [];\n    for(var i=0;i<k;i++){\n    \
    \    if(arr.length<=i){\n            max.push(arr[i]);\n        }else if(arr[i]>=arr[i-1]){\n\
    \            max.push(arr[i]);\n        }else{\n            max.push(arr[i-1]);\n\
    \        }\n    }\n    return max;\n}\n", "  let m = []\n  arr.sort((a,b)=>{\n\
    \    if(a > b) return true\n    if(a < b) return false\n    return -1\n  })\n\
    \  m = arr.reduce((a,b)=>{\n    return a.concat(b)\n  },[])\n  return m.slice(-k)\n\
    }\n", "    if(!k || k > arr.length){\n        throw \"The value of k must be greater\
    \ than 0\";\n    }\n\n    if(k === 0){\n        return arr;\n    }\n\n    if(k\
    \ === 1){\n        return arr.sort((a,b) => a > b);\n    }\n\n    let max = arr[0];\n\
    \    let maxIndex = -1;\n    for(let i = 1 ; i < arr.length ; i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n            maxIndex = i;\n        }\n \
    \   }\n\n    let result = [];\n    for(let i = 0 ; i < arr.length ; i++){\n  \
    \      if(i !== maxIndex){\n            result.push(arr[i]);\n        }\n    }\n\
    \n    if(maxIndex === 0){\n        for(let i = 0 ; i < result.length ; i++){\n\
    \            result.shift();\n        }\n    }\n    \n    result.sort((a,b) =>\
    \ a > b);\n    return result;\n}\n", "    let sortedArr = arr.sort((a,b)=>a-b);\n\
    \    let resultArray = [];\n    let max = 0;\n    for(let i=0;i<sortedArr.length;i++){\n\
    \        if(sortedArr[i] > max && max<k){\n            max= sortedArr[i];\n  \
    \      }else if(sortedArr[i] > max && max>k){\n            resultArray.push(sortedArr[i]);\n\
    \        }else if(sortedArr[i] <= max && max<k){\n            resultArray.push(max);\n\
    \        }else if(sortedArr[i] >= max && max>k){\n            resultArray.push(sortedArr[i]);\n\
    \        }\n    }\n    return resultArray;\n}", "  if(k===1) return arr.sort((a,b)=>{return\
    \ a-b})\n  let max=arr[0]\n  for(let i=1;i<k;i++){\n    if(max<arr[i]) max=arr[i]\n\
    \  }\n  return arr.filter(x=>x===max)\n}\n", "  let arr = arr.sort((a,b) => b-a)\n\
    \  return arr.slice(0, k)\n}\n", "    \n    // Write your code here\n    \n  \
    \  if ( k == 0 ){\n        \n        return arr;\n        \n    }\n    \n    \n\
    \    let max = [];\n    let i = 0;\n    while ( i < arr.length){\n        if (\
    \ arr[i] > arr[i+1] ){\n            max.push(arr[i]);\n            i++;\n    \
    \    }\n        else{\n            max.push(arr[i]);\n            i++;\n     \
    \   }\n    }\n    \n    if ( k < max.length ){\n        return max;\n    }\n \
    \   \n    let left = i;\n    let right = 1;\n    \n    while ( i <= k ){\n   \
    \     \n        if ( arr[i] > arr[i+1] ){\n            \n            left.push(\
    \ arr[i] );\n            \n            i++;\n            \n        }\n       \
    \ else{\n            \n            right.push( arr[i] );\n            \n     \
    \       i++;\n            \n        }\n    }\n    \n    \n    let result = [];\n\
    \    \n    while ( i <= k ){\n        \n        result.push( arr[i] );\n     \
    \   \n        i++;\n        \n    }\n    \n    \n    if ( left >= right){\n  \
    \      \n        \n        \n        return result;\n        \n    }\n    \n \
    \   \n    while ( left.length != k ){\n        \n        left.pop();\n       \
    \ \n    }\n    \n    \n    while ( right.length != k ){\n        \n        right.pop();\n\
    \        \n    }\n    \n    \n    \n    \n    return result.concat(left,right);\n\
    \    \n}\n", "    var arr2 = [];\n    var arr3 = [];\n    for(var i=0; i<arr.length;\
    \ i++){\n        if(arr2.length>k)\n            arr2.pop();\n        if(arr3.length>k)\n\
    \            arr3.pop();\n        if(arr2.length<=k)\n            arr2.push(arr[i]);\n\
    \        if(arr3.length<=k)\n            arr3.push(arr[i]);\n    }\n    return\
    \ arr2.concat(arr3);\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution does not work\
    \ for the case: arr = [-4, -4, 4], k = 1.\n<|/ c |>\n<| c |>\nNo, it does work!\
    \ I checked it!\n<|/ c |>\n<| c |>\n, sorry, missed that part! Thanks for pointing\
    \ out.\n<|/ c |>\n<| c |>\nWhat is the purpose of \"if(arr2.length<=k)\" ?\n<|/\
    \ c |>\n<| c |>\nThis solution does not work for two cases:\n\narr = [-2, -2,\
    \ 2], k = 1\narr = [-2, -1, 0], k = 1\n\nIt returns [].\n<|/ c |>\n<| a dscore=5\
    \ tags=javascript |>\n<code>\nconst max = (arr, n) => {\n  let max = arr[0]\n\n\
    \  arr.forEach((el, i) => {\n    if(i === n - 1) return\n\n    if(el > max) {\n\
    \      max = el\n    }\n  })\n\n  return max\n}\n", "  let max = [];\n  for(let\
    \ i=0; i<arr.length; i++){\n    for(let j=0; j<k; j++){\n      if(arr[j] > arr[i]){\n\
    \        arr[j] = arr[i];\n      }\n    }\n    for(let j=0; j<k; j++){\n     \
    \ if(arr[j] > max[j]){\n        max[j] = arr[i];\n      }\n    }\n  }\n  return\
    \ max;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for the solution, however, the solution\
    \ proposed by doesn't suffer from the problem where we can't use Math.max.\n<|/\
    \ c |>\n<| c |>\nI agree.  And I upvoted this answer just for the first example\
    \ :)\n<|/ c |>\n<| c |>\nYou're welcome.  I'm actually surprised the other solution\
    \ didn't have this problem!\n<|/ c |>\n<| c |>\n- it doesn't, I just ran it for\
    \ you, and it outputs exactly what you'd expect:  \"[-4, -3, 5]\"\n<|/ c |>\n\
    <| c |>\nI agree, the first solution doesn't have this problem because the conditional\
    \ statement is more specific than the second one in terms of array sorting and\
    \ doesn't need to go through all elements to find the biggest one.\n<|/ c |>\n\
    <| a |>\nThe solution I came up with uses a combination of two concepts: Array\
    \ indexing and recursion.\nFirst, I wanted to find the biggest element in a particular\
    \ sub-array. I had been working on something similar, and came up with something\
    \ that would work, although it seems less elegant.\n<code>", "    if (arr.length\
    \ <= k){\n        return arr;\n    }\n    // sort by key then select top k index\n\
    \    arr.sort(function(a, b){return a - b});\n    return arr.slice(0, k);\n}\n",
  "\tlet result = [];\n\t\n\tfor (let i = 0, len = arr.length; i < k; i++){\n\t\t\
    let currVal = Math.max(...arr);\n\t\tlet index = arr.findIndex(val => val ===\
    \ currVal);\n\t\tresult.push(arr[index]);\n\t\tarr.splice(index, 1);\n\t}\n\t\n\
    \treturn result;\n}\n", "  var count = 0;\n  var final = [];\n  \n  for (var i\
    \ = 0; i < arr.length; i++){\n    if (count <= k){\n      final.push(arr[i]);\n\
    \      count++;\n    }\n    else {\n      if (arr[i] > final[final.length - 1]){\n\
    \        final.push(arr[i]);\n      }\n    }\n  }\n  \n  return final;\n}\n",
  "    if (k > arr.length) return [];\n    if (k == 0) return arr;\n    let maxArr\
    \ = [];\n    let temp = [];\n    let temp1 = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (k - 1 >= temp.length) temp.push(arr[i]);\n        else if(arr[i]\
    \ > arr[temp[k-1]]){\n            temp.push(arr[i]);\n        }\n        else{\n\
    \            let index = temp[k-1];\n            temp1.push(arr[i]);\n       \
    \     while (index > 0 && temp[index - 1] > arr[temp[index]]){\n             \
    \   temp[index] = temp[index - 1];\n                index--;\n            }\n\
    \            if (temp.length - 1 >= temp1.length){\n                temp1.push(arr[temp.length-1]);\n\
    \                temp.splice(temp.length - 1,1);\n            }\n            temp1.splice(temp1.length\
    \ - 1,1);\n        }\n        if (k - 1 < temp.length){\n            if (maxArr.length\
    \ == 0) maxArr = temp;\n            else maxArr = maxArr.concat(temp);\n     \
    \   }\n    }\n    return maxArr;\n}\n", "    let result = []\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr.length <= k){\n            result.push(arr[i])\n\
    \            arr.splice(i, 1)\n        }\n        else if(arr[i] > result[k-1]){\n\
    \            result.splice(k - 1, 0, arr[i])\n            arr.splice(i, 1)\n \
    \       }\n        else if(arr[i] < result[k-1]){\n            result.splice(k,\
    \ 0, arr[i])\n            arr.splice(i, 1)\n        }\n    }\n    return result\n\
    }", "    let ans = [];\n    while(arr.length){\n        let first = arr[0]\n \
    \       for(let i = 0; i <= arr.length; i++){\n            let next = arr[i+1]\n\
    \            if((next > first) && (i>=k)){\n                ans.push(first)\n\
    \            }\n            first = next\n        }\n        arr.shift()\n   \
    \ }\n    return ans\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
