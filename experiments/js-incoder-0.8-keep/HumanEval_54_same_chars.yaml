name: HumanEval_54_same_chars
language: js
prompt: "//Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n\
  // >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n\
  // False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n// False\nfunction same_chars(s0, s1){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
  ),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"\
  dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"\
  ),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\"\
  , \"aaccc\"),false);\n}\n\ntest();"
completions: ["\ts0 = s0.replace(/\\s+/g,'');\n\ts1 = s1.replace(/\\s+/g,'');\n\t\
    if (s0 !== s1 && s0.length !== s1.length){\n\t\treturn false;\n\t}\n\tvar chars\
    \ = s0.split('');\n\tfor(var i = 0; i < chars.length; i++){\n\t\tif (s1.indexOf(chars[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  if (s0 ===\
    \ s1 || s0 === undefined) {\n    return true;\n  }\n  if (s1 === undefined) {\n\
    \    return false;\n  }\n  if (s0.length !== s1.length){\n    return false;\n\
    \  }\n  var s = '';\n  for (var i = 0; i < s0.length; i++){\n    if (s0[i] !==\
    \ s1[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "    var i =\
    \ s1.length - s0.length;\n    if (i === 0)\n        return true;\n    for(var\
    \ i = 0; i < i; ++i)\n        if(s0[i] !== s1[i])\n            return false;\n\
    \    return true;\n}\n", "  var i,\n      j = 0,\n      len0 = s0.length,\n  \
    \    len1 = s1.length,\n      n = len0 < len1 ? len0 : len1;\n  for(i = 0; i <\
    \ n; i++){\n    if(s0[i] !== s1[j]){\n      return false;\n    }\n    ++j;\n \
    \ }\n  return true;\n}\n", "    if (s0 === s1){\n        return true;\n    }\n\
    \    if (s0 !== s1 && s0 !== s1 + String.fromCharCode(0) && s1 !== s1 + String.fromCharCode(0))\n\
    \        return false;\n    var s0_len = s0.length;\n    var s1_len = s1.length;\n\
    \    if (s0_len > s1_len){\n        return false;\n    }\n    for (var i = 0;\
    \ i < s0_len; i++){\n        if (s0.charCodeAt(i) !== s1.charCodeAt(i)){\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n", "    if (s0\
    \ === s1) return true;\n\n    if(s0.length !== s1.length) return false;\n\n  \
    \  var x0 = s0.toLowerCase();\n    var x1 = s1.toLowerCase();\n\n    var y0 =\
    \ 0;\n    var y1 = s1.length;\n\n    while (y0 < y1 && y1 < s0.length){\n    \
    \    if (s0.charAt(y0) !== s1.charAt(y1)) break;\n        y0++; y1++;\n    }\n\
    \n    if(y0 === y1) return true;\n\n    var count = 0;\n    for (y0; y0 < y1;\
    \ y0++){\n        count = count + 1;\n        for (x0; x0 < x1; x0++){\n     \
    \       if (s0.charAt(y0) === s1.charAt(x0)) break;\n        }\n        if (s0.charAt(y0)\
    \ === s1.charAt(x0)) continue;\n        if (count > 2) return false;\n    }\n\n\
    \    return true;\n}\n", "  s0 = s0.toLowerCase()\n  s1 = s1.toLowerCase()\n \
    \ if(s0.length != s1.length){\n    return false\n  }\n  for(var i in s0){\n  \
    \  if(s0.charAt(i) != s1.charAt(i)){\n      return false\n    }\n  }\n  return\
    \ true\n}\n", "    var s1 = s1.split('');\n    for(var i = 0; i < s1.length; i++)\
    \ {\n        if(s1.indexOf(s1[i]) != -1){\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "    var i = 0;\n    var j = 0;\n    for(i =\
    \ 0; i < s0.length && j < s1.length; i++){\n        if(s0.charAt(i) == s1.charAt(j)){\n\
    \            j++;\n        }else{\n            return false;\n        }\n    }\n\
    \    return i == s1.length;\n}\n", "    if (s0 === s1 || s0.length != s1.length)\
    \ return false;\n    var result = true;\n    s0.split('').every(function(ch){\n\
    \        result = result && (s1.split('').indexOf(ch) != -1);\n        return\
    \ result;\n    });\n    return result;\n}\n", "    var len0, len1, i, i0, i1,\
    \ c;\n    len0 = s0.length;\n    len1 = s1.length;\n    if(len0 != len1){\n  \
    \      return false;\n    }\n    for(i = 0; i < len0; i++){\n        c = s0[i];\n\
    \        i0 = i;\n        while(true){\n            i = i + 1;\n            i1\
    \ = i;\n            while(true){\n                i = i + 1;\n               \
    \ i1 = i + 1;\n                c = c + s0[i0] + s1[i1];\n                if(c){\n\
    \                    return false;\n                }\n                if(i ==\
    \ len0){\n                    return true;\n                }\n              \
    \  i0 = i0;\n                i1 = i1;\n            }\n        }\n    }\n}", "\t\
    let same = 0;\n\tfor (let i = 0; i < s0.length; i++){\n\t\tif (s0[i] === s1[i]){\n\
    \t\t\tsame++;\n\t\t}\n\t}\n\treturn same === (s0.length - s1.length);\n}\n", " \
    \   if(!s0.length || !s1.length) return s0.length == s1.length;\n    if(s0.length\
    \ !== s1.length) return false;\n    for(var i = 0; i < s0.length; i++){\n    \
    \    if(s0[i] !== s1[i]) return false;\n    }\n    return true;\n}\n", "  var\
    \ hash = 0;\n  var result = '';\n  var i = 0;\n  while(i < s0.length && i < s1.length){\n\
    \    hash += s0.charCodeAt(i) + (s1.charCodeAt(i) + 55) << 56;\n    i++;\n  }\n\
    \  hash += (hash << 10) + hash + s0.length;\n  while(i < s0.length){\n    hash\
    \ += s0.charCodeAt(i) + (55 << 5) + 55;\n    i++;\n  }\n  hash += (hash << 10)\
    \ + hash + s1.length;\n  return hash == 0;\n}\n", "  // Create a stack to count\
    \ the number of characters in the two strings;\n  // If any character in a string\
    \ is unequal, return false.\n  var stack = []; // Will contain the count of characters\
    \ in each string\n  var stackLength1 = 0, stackLength2 = 0, stackCount = 0;\n\
    \  for(var i = 0; i< s0.length; i++){\n    if(!stack.length){\n      stackCount\
    \ = 0;\n    }\n    if(stack.indexOf(s0.charAt(i)) != -1){\n      stackCount++;\n\
    \    }\n    stack.push(s0.charAt(i));\n    if(stack.indexOf(s1.charAt(i)) != -1){\n\
    \      stackCount++;\n    }\n    if(stackCount > stackLength1){\n      stackLength1\
    \ = stackCount;\n    }\n    if(stackCount > stackLength2){\n      stackLength2\
    \ = stackCount;\n    }\n  }\n  if(stackLength1 != stackLength2){\n    return false;\n\
    \  }\n  // If we reach the end of the strings, return true\n  return true;\n}\n",
  "    var len = s0.length;\n    if(len > s1.length){\n        return false;\n   \
    \ }\n    var s0_padded = s0 + Array(len - s1.length + 1).join('z');\n    var s1_padded\
    \ = s1 + Array(len - s1.length + 1).join('z');\n    return s0_padded == s1_padded;\n\
    }\n", "    var s1 = s1;\n    if(s1 === undefined || s1 === null || s1 === '')\
    \ return false;\n    if(s0.length != s1.length) return false;\n    for(var i =\
    \ 0; i < s0.length; i++){\n        if(s0.charAt(i) != s1.charAt(i)) return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=python,javascript |>\n<| a dscore=4\
    \ |>\nYou can use the python version of set difference using sets:\n<code>\n>>>\
    \ a = set(['d', 'e', 'a'])\n>>> b = set(['b', 'c', 'a'])\n>>> a ^ b\n{'a'}\n</code>\n\
    In order to get the same behavior as in JavaScript you can use list comprehension\
    \ instead of filter:\n<code>\n>>> a = set(['d', 'e', 'a'])\n>>> b = set(['b',\
    \ 'c', 'a'])\n>>> [x for x in a if x not in b]\n['a', 'e', 'd']\n</code>\nYou\
    \ can also use a list instead of a set if order of elements is irrelevant and\
    \ you don't care about duplicates:\n<code>\n>>> a = ['d', 'e', 'a']\n>>> b = ['b',\
    \ 'c', 'a']\n>>> [x for x in a if x not in b]\n['a', 'e', 'd']\n</code>\n<|/ a\
    \ tags=python,javascript |>\n<| c |>\nThe set operation is `a ^ b`\n<|/ c |>\n\
    <| c |>\nThanks. I corrected the answer based on your comment.\n<|/ c |>\n<| a\
    \ tags=python,javascript |>\nA possible solution:\n<code>\na = [\"d\",\"e\",\"\
    a\"]\nb = [\"b\",\"c\",\"a\"]\nprint [a for b in a if b not in a]\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n>>> a = set([\"d\", \"e\", \"a\"])\n\
    >>> b = set([\"b\", \"c\", \"a\"])\n>>> a ^ b\n{'a'}\n</code>\n<|/ a tags=python,javascript\
    \ |>\n<| a dscore=3 tags=python,javascript |>\n<code>\n>>> a = set([\"d\", \"\
    e\", \"a\"])\n>>> b = set([\"b\", \"c\", \"a\"])\n>>> list(a ^ b)\n['e', 'd']\n\
    </code>\n<|/ a |>\n<| a dscore=3 tags=python,javascript |>\n<code>\na = set(['a',\
    \ 'b', 'c'])\nb = set(['c', 'b', 'a'])\nprint(a.difference(b))\n</code>\nOutput:\n\
    <code>\nset(['a'])\n</code>\n<|/ a |>\n<| c |>\nWhile this code may solve the\
    \ problem, a few words of explanation would go a long way toward ward understanding\
    \ _why_ and/or _how_ this code ", "\tvar i,j,k;\n\tvar s0_chars = [];\n\tvar s1_chars\
    \ = [];\n\tvar s1_len = s1.length;\n\tvar s0_len = s0.length;\n\n\tfor(i=0;i <\
    \ s0_len;i++){\n\t\ts0_chars.push(s0.charAt(i));\n\t}\n\tfor(i=0;i<s1_len;i++){\n\
    \t\ts1_chars.push(s1.charAt(i));\n\t}\n\tfor (j = 0; j < s0_len; j++) {\n\t\t\
    for (k = 0; k < s1_len; k++) {\n\t\t\tif (s0_chars[k] === s1_chars[k]) s0_chars[k]\
    \ ='';\n\t\t}\n\t}\n\treturn s0_chars.length === s1_len;\n}\n", "    for(var i\
    \ in s0){\n        if(!s1.hasOwnProperty(i) || s0[i] !== s1[i]){\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n", "  if (s1 === '') return\
    \ s0 === '';\n  if (s0 === '') return false;\n  for (var i1 = 0, i2 = s0.length;\
    \ i1 < i1; i1++){\n    if (s0.charCodeAt(i1) !== s1.charCodeAt(i2)) return false;\n\
    \  }\n  return true;\n}\n", "    for(var i=0; i<s0.length; i++){\n        if(s0.charAt(i)\
    \ !== s1.charAt(i))\n            return false;\n    }\n    return true;\n}\n",
  "\tvar s0char = s0.split('');\n\tvar s1char = s1.split('');\n\tif (s0char.length\
    \ !== s1char.length) return false;\n\tfor (var i = 0; i < s0char.length; i++){\n\
    \t\tif (s0char[i] !== s1char[i]) return false;\n\t}\n\treturn true;\n}", "\tlet\
    \ t0 = s0.split('').sort().join('');\n\tlet t1 = s1.split('').sort().join('');\n\
    \n\tfor(let i = 0; i < t0.length; i++){\n\t\tif(t0[i] !== t1[i]){\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n", "    var s0_size = s0.length;\n    var\
    \ s1_size = s1.length;\n    if(s0_size != s1_size)\n        return false;\n\n\
    \    var i = 0;\n    for(i = 0; i < s0_size; i++) {\n        if(s0[i] != s1[i])\n\
    \            return false;\n    }\n    return true;\n}\n", "    var i = 0;\n \
    \   var j = 0;\n    var count = 0;\n    var s0_length = s0.length;\n    var s1_length\
    \ = s1.length;\n    \n    while (i<s0_length && j<s1_length){\n        if (s0[i]\
    \ == s1[j]){\n            count++;\n        }\n        i++;\n        j++;\n  \
    \  }\n    return (count == s0_length);\n}\n\n", "  var n0 = s0.split('').sort()\n\
    \  var n1 = s1.split('').sort()\n  return n0.join('') == n1.join('')\n}\n", " \
    \   // if one word is empty, then the other is empty as well.\n    if(s0.length\
    \ === 0 && s1.length === 0) return true;\n    // If they are equal, then they\
    \ have the same number of letters.\n    if(s0.length === s1.length) return true;\n\
    \    // They do not have the same number of letters.  Check all letters.\n   \
    \ var i, same = true;\n    for(i = 0; i < s0.length; i++){\n        if(!s1.includes(s0[i]))\
    \ same = false;\n    }\n    return same;\n}\n", "  if (s0 === s1){\n    return\
    \ true;\n  }\n  var a = s0.split('');\n  var b = s1.split('');\n  var c = new\
    \ Array(a.length);\n  for(var i=0; i<a.length; i++){\n    c[i] = b.indexOf(a[i]);\n\
    \    if (c[i] != -1){\n      return true;\n    }\n  }\n  return false;\n}\n",
  "    var s0t = String(s0);\n    var s1t = String(s1);\n    if (s0t.length != s1t.length)\n\
    \        return false;\n\n    for(var i = 0; i < s0t.length; i++){\n        if\
    \ (s0t.charAt(i) != s1t.charAt(i)){\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "  return s0.split('').reduce(function(acc, x, i){\n\
    \    return acc && (x.split('').reduce(function(acc2, x, i){\n      return acc\
    \ && x === s1[(i * s0.length) + i];\n    }, false));\n  }, true);\n}\n", "  var\
    \ s0_c = s0.split('').sort().join('');\n  var s1_c = s1.split('').sort().join('');\n\
    \  if(s0_c == s1_c){\n    return true;\n  }\n  else{\n    return false;\n  }\n\
    }", "  var s0 = s0.toString();\n  var s1 = s1.toString();\n  if(s0.length !==\
    \ s1.length)\n      return false;\n  for(var i=0; i< s0.length;++i){\n    if(s0.charAt(i)\
    \ !== s1.charAt(i))\n      return false;\n  }\n  return true;\n}\n", "\tvar s0_len\
    \ = s0.length;\n\tvar s1_len = s1.length;\n\tif (s0_len != s1_len){\n\t\treturn\
    \ false;\n\t}\n\t\n\treturn check_same_chars(s0, s1);\n}\n", "\tvar len = Math.min(s0.length,\
    \ s1.length),\n\t\ti = 0,\n\t\tj = len - 1,\n\t\tch;\n\n\twhile(i < len && j >=\
    \ 0){\n\t\tch = s0[i];\n\t\tif(ch != s1[j]){\n\t\t\treturn false;\n\t\t}\n\t\t\
    i++;\n\t\tj--;\n\t}\n\treturn i == len;\n}\n", "  s0 = s0.split(\"\");\n  s1 =\
    \ s1.split(\"\");\n  var eq = true,\n      l = Math.min(s0.length, s1.length),\n\
    \      i = 0,\n      j = 0;\n  while (i < l && j < l) {\n    if (s0[i] === s1[j])\
    \ {\n      i++;\n      j++;\n    }\n    else {\n      eq = false;\n      break;\n\
    \    }\n  }\n  return eq;\n}", "    if (s0 === s1 || typeof s0 !== 'string' ||\
    \ typeof s1 !== 'string') return false;\n    return sameChars(s0, s1) === true;\n\
    }\n", "  var i, c, l0, l1, l2, lc, l0_c, l1_c;\n  if(s0.length !== s1.length)\
    \ return false;\n  l0 = s0.length;\n  l1 = s1.length;\n  l2 = l0*l1;\n  lc = l0+l1;\n\
    \  l0_c = l0*l1;\n  l1_c = l1+l2;\n  for(i=0;i<l2;i++){\n    if(lc.indexOf(s0.charAt(i))\
    \ === l0_c.indexOf(s1.charAt(i)) &&\n       lc.indexOf(s1.charAt(i)) === l1_c.indexOf(s0.charAt(i))){\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "    var i0 = 0, i1 =\
    \ 0, c = 0, len0, len1 = 0;\n    s0 = s0.split('');\n    s1 = s1.split('');\n\
    \    len0 = s0.length;\n    len1 = s1.length;\n    if (len0 !== len1){return false;}\n\
    \    while (true)\n    {\n        if (i0 === len0){return true;}\n        c =\
    \ s0[i0++];\n        if (c !== s1[i1++]){return false;}\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is unnecessarily complicated and quite slow. There are simpler\
    \ ways to do this - see my answer.\n<|/ c |>\n<| c |>\nThis only works if you\
    \ only have to compare consecutive characters. But what if you have to compare\
    \ any number of characters?\n<|/ c |>\n<| c |>\nThis is an example of [Donald\
    \ Knuth's famous algorithm](https://en.wikipedia.org/wiki/Donald_Knuth%27s_algorithm),\
    \ where he compares two strings for similarity using the `\xE2` \"algorithm\"\
    . `\xE2` requires O(n) comparisons, whereas this solution is O(n^2).\n<|/ c |>\n\
    <| c |>\nActually this solution only requires `O(n+m)` comparisons in order to\
    \ find out how many letters are different. This is because `m` is always `2`.\n\
    <|/ c |>\n<| c |>\nYou are correct that this solution only requires O(n+m) comparisons.\
    \ However it still requires O(n^2) comparisons *each* time you call this function,\
    \ and that would be O(n^2) for the worst case.\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "    let t0 = getStr(s0);\n    let t1 = getStr(s1);\n    let n = t0.length;\n  \
    \  let m = t1.length;\n    if(n!==m){\n        return false;\n    }\n    for(i=0;i<n;i++){\n\
    \        if(t0[i]!=t1[i]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  let l = s0.length;\n  let m = s1.length;\n  if(l == m){\n  \
    \  let res = true;\n    for(let i = 0; i < l; ++i){\n      if(s0.charCodeAt(i)\
    \ != s1.charCodeAt(i)){\n        res = false;\n        break;\n      }\n    }\n\
    \    return res;\n  }\n  return false;\n}\n", "\tif (s0 === s1)\n\t\treturn true;\n\
    \tif (s0 === null || s1 === null)\n\t\treturn false;\n\tif (s0.length !== s1.length)\n\
    \t\treturn false;\n\tfor (var i = 0; i < s0.length; ++i){\n\t\tif (s0[i] !== s1[i])\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}\n", "    let sameChars = false;\n\
    \    for(let i = 0; i < s0.length && i < s1.length; i++){\n        if(s0.charAt(i)\
    \ == s1.charAt(i))\n            sameChars = true;\n    }\n    return sameChars;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI should probably clarify that this is\
    \ a challenge for my algorithms class, I have not tried anything yet because I\
    \ could not find the way to do this (I have tried some really complicated ways).\n\
    <|/ c |>\n<| a tags=algorithm,arrays |>\nHere is a solution that I came up with.\n\
    <code>", "  //Check length of the strings.\n  if ( s0.length != s1.length ) return\
    \ false\n  //Check if both strings are empty.\n  if ( s0.length == 0 ) return\
    \ true\n  //Check each character\n  for(var i = 0; i < s0.length; i++){\n    if\
    \ ( s0.charAt(i) != s1.charAt(i) ) return false\n  }\n  //Check end of string\
    \ in both strings.\n  return s0.substr(s0.length - 1, 1) == s1.substr(s1.length\
    \ - 1, 1)\n}\n", "  var hash0 = hash(s0);\n  var hash1 = hash(s1);\n  if(hash0\
    \ == hash1 && s0.length == s1.length){\n    s0 = s0.split(\"\").sort();\n    s1\
    \ = s1.split(\"\").sort();\n    for(var i=0, j=0; i < s0.length; i++){\n     \
    \ if(s0[i] != s1[j]){\n        return false;\n      }\n      j++;\n    }\n   \
    \ return true;\n  }\n  return false;\n}\n", "\treturn s0.slice(0,s0.length) ==\
    \ s1.slice(0,s1.length) && s0.slice(s0.length) == s1.slice(s1.length);\n}", "\t\
    var l = Math.min(s0.length, s1.length);\n\tfor(var i = 0; i < l; i++){\n\t\tif(s0[i]\
    \ !== s1[i]){return false;}\n\t}\n\treturn true;\n}", "  return ((s0.split(''))\
    \ ==\n          (s1.split('')));\n}\n", "    if (s0 === s1) return true;\n   \
    \ if (s0.length != s1.length) return false;\n    for(var i = 0, n = s0.length;\
    \ i < n; i++) {\n        if (s0[i] !== s1[i]) return false;\n    }\n    return\
    \ true;\n}\n", "    var n0 = s0.length, n1 = s1.length;\n    if (n0 != n1) return\
    \ false;\n    for (var i=0;i<n0;i++)\n        if (s0[i] != s1[i]) return false;\n\
    \    return true;\n}\n", "  if(s0.length !== s1.length) return false;\n  for(var\
    \ i=0; i<s0.length; i++){\n    if(!isChar(s0[i], s1[i])) return false;\n  }\n\
    \  return true;\n}\n", "  s0 = s0.split('');\n  s1 = s1.split('');\n  var n =\
    \ s0.length,\n      m = s1.length;\n  for (var i = 0; i < n; i++){\n    if (s0[i]\
    \ !== s1[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "    if\
    \ (s0.length > s1.length) return false;\n    if (s0.length < 1) return false;\n\
    \    if (s1 === '' || !s1) return true;\n    var i, c, w0;\n    for (i = 0; i\
    \ < s0.length; i++) {\n        c = s0.charAt(i);\n        w0 = s1.charCodeAt(i);\n\
    \        if (c !== s1.charAt(i) || w0 !== w1) return false;\n    }\n    return\
    \ true;\n}", "    for(var i = 0; i < s0.length; i++){\n        if(s0.charCodeAt(i)\
    \ != s1.charCodeAt(i)){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  if (s0 === s1) return true;\n  if (s0.length === 0 || s1.length\
    \ === 0) return false;\n  return s0.split('').reduce(function(prev, curr, i, arr){\n\
    \    return prev && s1 === arr.reduce(function(prev, curr){\n      return prev\
    \ && curr === prev;\n    }, true);\n  }, true);\n}\n", "    return s0.split('').sort().join('')\
    \ == s1.split('').sort().join('');\n}\n</code>\n<|/ a tags=arrays,javascript,comparison\
    \ |>\n<| a tags=arrays,javascript,comparison |>\nHere is a more efficient approach\
    \ than sorting the array twice - it just needs a single pass to compare the strings.\n\
    <code>", "    if (s0.length !== s1.length) return false;\n    for(var i = 0; i\
    \ < s0.length; i++){\n        if (s0[i] !== s1[i]) return false;\n    }\n    return\
    \ true;\n}\n", "    for(var i = 0; i < s0.length; i++){\n        if(s0.charAt(i)\
    \ != s1.charAt(i)) return false;\n    }\n    return true;\n}\n", "    return s0.split('').sort().join('')===s1.split('').sort().join('');\n\
    }\n", "  var len = s1.length\n  return s0 === s1 || len == 0 || len > s0.length\n\
    }\n", "    if (s0 === s1 || s0 === \"\" || s1 === \"\" || s0 === null || s1 ===\
    \ null) {\n        return false;\n    }\n\n    if(typeof s0 === 'string'){\n \
    \       while(true){\n            if(s0.length < s1.length) return true;\n   \
    \         if(s0.length > s1.length) return false;\n            if(!is_char(s0.charAt(0)))\
    \ return false;\n            if(!is_char(s0.charAt(s1.length-1))) return false;\n\
    \            s0 = s0.substring(1,s0.length);\n            s1 = s1.substring(0,s1.length);\n\
    \        }\n    }else if(s0 instanceof Array){\n        var i = s0.length;\n \
    \       while(true){\n            if(i === 0) return true;\n            if(i ===\
    \ 1) return false;\n            if(s0[i] !== s1[i]) return false;\n          \
    \  i -= 1;\n        }\n    }else{\n        return s0 === s1;\n    }\n}\n", "\t\
    var i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\n\tif(!s0\
    \ || !s1 || (s0.length === 0) || (s1.length === 0) || (s0.charAt(0) !== s1.charAt(0))){\n\
    \t\treturn false;\n\t}\n\t\n\ti = 0;\n\tj = s0.length - 1;\n\tk = s0.length -\
    \ 1;\n\tl = 0;\n\tm = s0.length;\n\tn = s1.length;\n\n\twhile(true){\n\t\twhile(i\
    \ >= 0 && s0.charAt(i) === s1.charAt(i)){\n\t\t\ti++;\n\t\t}\n\t\twhile(j >= 0\
    \ && s0.charAt(j) === s1.charAt(j)){\n\t\t\tj--;\n\t\t}\n\t\tif(i < 0 || j < 0\
    \ || i >= m || j >= n || s0.charAt(i) !== s1.charAt(j)){\n\t\t\treturn false;\n\
    \t\t}\n\t\ti++;\n\t\tj--;\n\t\tk++;\n\t\tl++;\n\t\tif(s0.charAt(k) !== s1.charAt(l)){\n\
    \t\t\treturn false;\n\t\t}\n\t\tif(k >= s0.length){\n\t\t\tbreak;\n\t\t}\n\t\t\
    k--;\n\t\tl++;\n\t}\n\treturn true;\n}\n\n", "    if (s0.length == s1.length)\
    \ {\n      var i = 0;\n      while(i<s0.length && i<s1.length && s0[i] == s1[i])\
    \ i++;\n      return i == s0.length;\n    } else {\n      return false;\n    }\n\
    \  }\n\n", "  var s0_len = s0.length;\n  var s1_len = s1.length;\n  var result\
    \ = 0;\n  if(s0_len > s1_len){\n    return false;\n  }\n  if(s0_len < s1_len){\n\
    \    return true;\n  }\n  for(var i = 0; i < s0_len; i++){\n    if(s0.charAt(i)\
    \ != s1.charAt(i)){\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \   var i = s1.indexOf(s0)\n    return (i !== -1)\n}\n", "    if(s0 === s1){\n\
    \        return true;\n    }\n    if(!s0 || !s1 || s0.length !== s1.length){\n\
    \        return false;\n    }\n    return Object.keys(s0.replace(/[\\t\\n\\r ]+/g,\"\
    \")).every(function(x){\n        return s0.charCodeAt(x) === s1.charCodeAt(x);\n\
    \    });\n}\n", "\tif (s0 === s1) return true;\n\tif (s0.length === 0) return\
    \ false;\n\tif (s1.length === 0) return false;\n\tvar l = s0.length;\n\tvar i\
    \ = 0, j = 0, s1len = s1.length;\n\tvar c = 0;\n\twhile(i < s0.length && j < s1len){\n\
    \t\tif (s0.charAt(i) !== s1.charAt(j)) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\
    \t\tj++;\n\t}\n\treturn (i == s0.length && j == s1len);\n}\n\n", "  if (s1 ===\
    \ s0) {\n    return true;\n  }\n  var len = Math.min(s1.length, s0.length);\n\
    \  for (var i = 0; i < len; i++) {\n    if (s1.charCodeAt(i) !== s0.charCodeAt(i))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  var s0_arr = [].concat(s0);\n\
    \  var s1_arr = [].concat(s1);\n  return s0_arr.join('') == s1_arr.join('');\n\
    }\n", "\treturn s0.split('').sort().join('') == s1.split('').sort().join('');\n\
    }\n", "    for(let i = 0; i < s0.length; i++){\n        if(s0.charCodeAt(i) !==\
    \ s1.charCodeAt(i)){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "\treturn (\n\t\t\t(\n\t\t\t\t((s0 == '' && s1 == '')||(s0 ===\
    \ undefined))||\n\t\t\t\t((s1 === '') && (s0 == undefined))\n\t\t\t)\n\t\t\t&&\n\
    \t\t\t(\n\t\t\t\t(s0 !== undefined)\n\t\t\t\t&&\n\t\t\t\t(s1 !== undefined)\n\t\
    \t\t\t&&\n\t\t\t\t(s0.length === s1.length)\n\t\t\t\t&&\n\t\t\t\t(s0.replace(/[^\\\
    w]/g, '') === s1.replace(/[^\\w]/g, ''))\n\t\t\t)\n\t\t);\n}\n", "\tvar i = 0;\n\
    \t\n\t// Iterate through the strings and test equality\n\twhile( i < s0.length\
    \ && i < s1.length ){\n\t\tif ( s0[i] === s1[i] ){\n\t\t\ti++;\n\t\t} else {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn i === s0.length;\n}\n", "\tvar i,\
    \ j;\n\tfor(i=s1.length-1; i>=0;i--){\n\t\tif(s0.charAt(i) !== s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar i0 = 0;\n\tvar i1\
    \ = 0;\n\tvar s1len = s1.length;\n\tvar s0 = s0.toLowerCase();\n\tvar s1len =\
    \ s1.toLowerCase();\n\twhile(i0 < s1len && i1 < s0.length){\n\t\tif(s0.charAt(i0)\
    \ == s1.charAt(i1)){\n\t\t\ti0++;\n\t\t\ti1++;\n\t\t}\n\t\telse if(s0.charAt(i0)\
    \ < s1.charAt(i1)){\n\t\t\ti0++;\n\t\t}\n\t\telse{\n\t\t\ti1++;\n\t\t}\n\t}\n\t\
    return i0 == s1len;\n}\n\n<|/ file dstars=2 source=github ext=.js |>", "    var\
    \ s0s = s0.split('');\n    var s1s = s1.split('');\n\n    for (var i = 0; i <\
    \ s0s.length; i++){\n        if (s1s.indexOf(s0s[i]) !== -1){\n            return\
    \ true;\n        }\n    }\n\n    return false;\n}", "\tif((s0 == null) || (s1\
    \ == null)){\n\t\treturn false;\n\t}\n\tif(s0.length != s1.length){\n\t\treturn\
    \ false;\n\t}\n\tvar i = s0.length;\n\twhile(i--){\n\t\tif(s0.charAt(i) != s1.charAt(i)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    let s0 = s0.toLowerCase();\n\
    \    let s1 = s1.toLowerCase();\n    let same = false;\n\n    for (let i = 0;\
    \ i < s0.length; i++){\n        if (s1.indexOf(s0.charAt(i)) === -1){\n      \
    \      same = false;\n            break;\n        }\n        else {\n        \
    \    i++;\n        }\n    }\n\n    return same;\n}\n", "  // check if either of\
    \ the two words are undefined or empty\n  if(!s0 || !s1){\n    return false;\n\
    \  }\n\n  // if either word is an undefined or empty string, return true\n  if(!s0\
    \ || s0.trim() === '' || s1.trim() === ''){\n    return true;\n  }\n\n  // convert\
    \ both strings to arrays and then loop over them comparing each character\n  return\
    \ s0.split('').some(function(char0, index0){\n    return s1.split('').some(function(char1,\
    \ index1){\n      // if both characters are equal\n      // and we're not at the\
    \ end of the string\n      // or if either character is a whitespace\n      //\
    \ then we're not equal\n      if(char0 === char1 &&\n         (index0 !== s1.length\
    \ - 1 ||\n          char0 != ' ' || index1 !== s1.length - 1) ){\n        return\
    \ true;\n      }\n    });\n  });\n}\n", "\tvar s0_char = s0.replace(/[^a-zA-Z0-9]/g,\"\
    \");\n\tvar s1_char = s1.replace(/[^a-zA-Z0-9]/g,\"\");\n\treturn (s0_char ===\
    \ s1_char);\n}\n", "\tif (s0 === s1) return true;\n\telse if (s0 == null || s1\
    \ == null) return false;\n\telse if (s0.length != s1.length) return false;\n\t\
    for (var i = 0; i < s0.length; i++){\n\t\tif (s0[i] != s1[i]) return false;\n\t\
    }\n\treturn true;\n}\n", "\tvar i;\n\tvar j;\n\tvar char_0 = s0.split(\"\");\n\
    \tvar char_1 = s1.split(\"\");\n\tfor(i = 0; i < char_0.length; i++){\n\t\tfor(j\
    \ = 0; j < char_1.length; j++){\n\t\t\tif(char_0[i] === char_1[j])\n\t\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n", "\tlet i = 0, j = 0, len = Math.max(s0.length,\
    \ s1.length), diff = 0;\n\n\twhile(i < len && j < len){\n\t\tif(s0.charAt(i) ===\
    \ s1.charAt(j)){\n\t\t\tdiff++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else{\n\t\t\tif(s0.charAt(i)\
    \ !== s1.charAt(j)) diff = 0;\n\t\t\telse i++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ (diff === 0);\n}\n\n", "    var s1len = s1.length\n    var s0len = s0.length\n\
    \    if(s0len > s1len){\n        var tmp_s0 = s0\n        s0 = s1\n        s1\
    \ = tmp_s0\n    }\n    \n    if(s0.length == 0 || s1.length == 0)\n        return\
    \ s1 == s0;\n    \n    s0 = s0.split('');\n    s1 = s1.split('');\n    if(s0len\
    \ != s1.length)\n        return false;\n    \n    for(var i = 0; i < s0len; i++){\n\
    \        if(s0[i] != s1[i])\n            return false;\n    }\n    \n    return\
    \ true;\n}", "    var n = Math.min(s0.length, s1.length);\n    for(var i = 0;\
    \ i < n; ++i){\n        if(s0[i] != s1[i]) return false;\n    }\n    return s0.length\
    \ == s1.length;\n}", "    var s0 = s0 || '';\n    var s1 = s1 || '';\n    if (s0.length\
    \ != s1.length) return false;\n    return !s0.split('').some(function (c, i) {\n\
    \        return s1.split('').indexOf(c) == i;\n    });\n};\n", "    var i = 0,\
    \ l = s1.length;\n    for(i; i < l; i++){\n        if(s0.charAt(i) != s1.charAt(i)){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ (s0 === s1){\n        return true;\n    }\n    if (s0.length != s1.length){\n\
    \        return false;\n    }\n    var d = new Dict();\n    var j = 0;\n    for\
    \ (var i = 0; i < s0.length; ++i){\n        d[s0.charAt(i)] = true;\n    }\n \
    \   for (i = 0; i < s1.length; ++i){\n        if (d.hasOwnProperty(s1.charAt(i))){\n\
    \            d[s1.charAt(i)] = true;\n        } else {\n            d[s1.charAt(i)]\
    \ = false;\n        }\n    }\n    return d.every(function(v){\n        return\
    \ v;\n    });\n}\n", "    if (s0.length > 0 && s1.length > 0) {\n        var n0\
    \ = s0.length;\n        var n1 = s1.length;\n        if (n0 > n1) {\n        \
    \    return false;\n        }\n        var s0_is_longer = n0 < n1;\n        var\
    \ i0 = 0;\n        var i1 = 0;\n        while (i0 < n0 && i1 < n1) {\n       \
    \     var c0 = s0.charAt(i0);\n            var c1 = s1.charAt(i1);\n         \
    \   if (c0 !== c1) {\n                return s0_is_longer;\n            }\n  \
    \          i0++;\n            i1++;\n        }\n        return i1 === n1;\n  \
    \  }\n    return false;\n};\n", "\tlet s0_length = s0.length\n\tlet s1_length\
    \ = s1.length\n\tif (s0_length !== s1_length){\n\t\treturn false\n\t}\n\tlet characters_count\
    \ = 0\n\tfor (let index = 0; index < s0_length; index++){\n\t\tif (s0.charAt(index)\
    \ !== s1.charAt(index)){\n\t\t\tcharacters_count++\n\t\t}\n\t}\n\treturn characters_count\
    \ === s0_length\n}\n", "\tvar i = s1.length-1\n\twhile(i>=0){\n\t\tif((s0[i] ==\
    \ s1[i])) return true\n\t\ti--\n\t}\n\treturn false\n}\n", "    var i;\n    //\
    \ for two empty string\n    if(s0 == \"\" && s1 == \"\")\n        return true;\n\
    \    // for same chars\n    if(s0 == s1)\n        return true;\n    // for same\
    \ word\n    if(s0.split(\"\").length == s1.split(\"\").length)\n        return\
    \ true;\n    // for not same word\n    return false;\n}\n", "  var s0chars = s0.split('');\n\
    \  var s1chars = s1.split('');\n  var len = s0chars.length;\n  for (var i = 0;\
    \ i < len; i++)\n    if (s0chars[i] != s1chars[i])\n      return false;\n  return\
    \ true;\n}\n", "\tif (s0 === s1 || s0 === '' || s1 === '')\n\t\treturn false;\n\
    \ts0 = s0.toString();\n\ts1 = s1.toString();\n\tfor (var i=0; i<s0.length && i<s1.length;\
    \ i++){\n\t\tif (s0.charAt(i) !== s1.charAt(i))\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}", "\ts1 = s1.split('');\n\ts0 = s0.split('');\n\tvar i = 0,\n\t\
    same = 0;\n\twhile (i < s0.length && same < s0.length){\n\t\tif(s0[i] === s1[i]){\n\
    \t\t\tsame++;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\twhile(same\
    \ < s0.length){\n\t\tsame++;\n\t\ti++;\n\t}\n\treturn same === s0.length;\n}\n",
  "\tvar diff, i, len = Math.max(s0.length, s1.length),\n\t\tmax_diff = len - Math.min(s0.length,\
    \ s1.length);\n\tfor(i = 0;i < max_diff;++i){\n\t\tdiff = s0[i].charCodeAt(0)\
    \ -\n\t\t\ts1[i].charCodeAt(0);\n\t\tif(diff != 0){return diff;}\n\t}\n\treturn\
    \ s0.length == s1.length;\n}\n", "  // https://jsperf.com/equals-vs-same-vs-equals/2\n\
    \  return s0 === s1 || s0 === s0 || s1 === s1;\n}\n", "    let len0 = s0.length;\n\
    \    let len1 = s1.length;\n    if (len0 > len1) return false;\n    for (let i\
    \ = 0; i < len0; i++){\n        let char = s0[i];\n        let char1 = s1[i];\n\
    \        if (char == char1) continue;\n        if (char < char1) return false;\n\
    \    }\n    return true;\n}\n", "    if (!s0 || s1 == undefined){\n        return\
    \ false;\n    }\n    var s_s0 = s0.split(''),\n        s_s1 = s1.split(''),\n\
    \        equals = s_s0.length == s_s1.length,\n        same = 0;\n    for (var\
    \ i=0; i<s_s0.length; i++){\n        if (equals){\n            break;\n      \
    \  }\n        if (s_s0[i] != s_s1[i]){\n            equals = false;\n        \
    \    break;\n        }\n        same++;\n    }\n    return equals && s_s0.length\
    \ == same;\n}\n", "  if(s0.length !== s1.length){\n    return false;\n  }\n  return\
    \ s0.split('').every(function(char, i){\n    return char === s1[i];\n  });\n}\n",
  "\tvar i0 = s0.length,\n\t\ti1 = s1.length;\n\tif (i0 > i1) {\n\t\treturn false;\n\
    \t}\n\t\n\tfor (var i=0; i < i0; i++){\n\t\tif (s0.charAt(i0) != s1.charAt(i1)){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "    var k0 = Object.keys(s0).sort();\n\
    \    var k1 = Object.keys(s1).sort();\n    if(k0.length !== k1.length) return\
    \ false;\n    for(var i = 0; i < k0.length; i++){\n        if(s0[k0[i]] !== s1[k1[i]])\
    \ return false;\n    }\n    return true;\n}\n", "    for(var i = 0; i < s0.length\
    \ && i < s1.length; i++){\n        if(s0[i] !== s1[i])return false;\n    }\n \
    \   return (s0.length === s1.length);\n}\n", "  var len = Math.min(s1.length,\
    \ s0.length);\n  var ret = 0;\n  var i = -1;\n  while (++i < len) {\n    ret +=\
    \ (s1[i] === s0[i]);\n  }\n  return ret === 0;\n}", "    if (s0 && s1) {\n   \
    \     return s0.split('').sort().join() === s1.split('').sort().join();\n    }\n\
    \    return false;\n}", "  var i, l0, l1;\n\n  l0 = s0.length;\n  l1 = s1.length;\n\
    \n  // Check if the strings are the same length\n  if(l0 !== l1){\n    return\
    \ false;\n  }\n\n  // Create an array with all the characters in the first string\n\
    \  chars = s0.split('');\n\n  // Iterate through all the characters in the second\
    \ string\n  for(i = 0; i < l0; i += 1){\n    // Check if the character at that\
    \ position is in the array\n    if(chars.indexOf(s1[i]) === -1){\n      return\
    \ false;\n    }\n  }\n\n  // If we got this far, there is a match\n  return true;\n\
    }\n", "    s0 = s0.split('');\n    s1 = s1.split('');\n    for(var i = 0; i <\
    \ s0.length; i++){\n        if(s0[i] != s1[i]) return false;\n    }\n    return\
    \ true;\n}\n", "  if (s0 === s1) return true;\n  if (s0 !== s1 && s0.length !==\
    \ s1.length) return false;\n  if (s0 === s1 || s0 === s1 || s0.length !== s1.length)\
    \ return false; //Ignore different characters\n  for (var i = 0; i < s0.length;\
    \ i++) {\n    if (s1.indexOf(s0[i]) !== -1) return true;\n  }\n  return false;\n\
    }\n", "  return sameChars(s0,s1) && sameChars(s1,s0);\n}\n", "\treturn (s0.length\
    \ == s1.length && s0.split('').sort().join('') == s1.split('').sort().join(''));\n\
    }\n", "    if(s0.length !== s1.length) return false;\n    var i;\n    for(i =\
    \ 0; i < s0.length; i++){\n        if(!(s0[i] === s1[i])) return false;\n    }\n\
    \    return true;\n}\n", "  s0 = s0.toLowerCase();\n  s1 = s1.toLowerCase();\n\
    \n  var map = {};\n  for(var i = 0, ii = s0.length; i < ii; ++i){\n    map[s0[i]]\
    \ = 1;\n  }\n  for(var i = 0, ii = s1.length; i < ii; ++i){\n    if(map[ s1[i]\
    \ ] == undefined){\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \   if (s0.length !== s1.length) {\n        return false;\n    }\n    for (var\
    \ i = 0; i !== s0.length; ++i) {\n        if (s0[i] !== s1[i]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n", "  // s0 = s0.toString();\n\
    \  // s1 = s1.toString();\n  return s0.split('').sort().join('') == s1.split('').sort().join('');\n\
    }\n\n", "  if (s0 === s1 || s0.length === 0 || s1.length === 0)\n    return false;\n\
    \n  // Check that all the characters are the same.\n  var count = 0;\n  for(var\
    \ i = 0; i < s0.length; i++){\n    if (s0[i] !== s1[i])\n      return false;\n\
    \    count += 1;\n  }\n\n  // If there's only one character, don't bother checking\
    \ for multiples.\n  if(s0.length === 1)\n    return true;\n\n  // Otherwise, check\
    \ each character in turn.\n  for(i = 0; i < s0.length; i++)\n  {\n    for(var\
    \ j = 0; j < s1.length; j++)\n    {\n      if (s0[i] === s1[j])\n        count\
    \ += 1;\n    }\n  }\n\n  // If there are more characters than there are characters\
    \ in the first string,\n  // that means they were different.\n  return count >=\
    \ s1.length;\n}\n", "\tvar i0=0, i1=0;\n\tvar chars=0;\n\twhile ( (s0[i0] == s1[i1])\
    \ && i0 < s0.length ) {\n\t\ti0++;\n\t\ti1++;\n\t\tchars++;\n\t}\n\tif (chars\
    \ == 0){\n\t\treturn (s0.length == s1.length) ? true : false;\n\t}\n\treturn true;\n\
    }", "    if (s0 === s1) return true;\n    if (s0 === '') return true;\n    if\
    \ (s1 === '') return false;\n    var s0_len = s0.length;\n    var s1_len = s1.length;\n\
    \    if (s0_len === 0) return s1_len === 0;\n    if (s1_len === 0) return s0_len\
    \ === 0;\n    var i = 0;\n    if (s0_len > s1_len) {\n        //s0 contains more\
    \ characters that s1\n        //so return false after s0 loop iteration\n    \
    \    return false;\n    }\n    while (s0_len >= s1_len) {\n        if (s0.charAt(i)\
    \ !== s1.charAt(i)) {\n            return false;\n        }\n        i++;\n  \
    \      s0_len--;\n        s1_len--;\n    }\n    return true;\n}\n", "  var a =\
    \ s0.split('')\n  var b = s1.split('')\n  if (a.length !== b.length) {\n    return\
    \ false\n  }\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n\
    \      return false\n    }\n  }\n  return true\n}\n", "  //The length of s0 and\
    \ s1 are both strings of same length but s1 has more characters\n  if(s0.length\
    \ != s1.length){\n    return false;\n  }\n  //Check if each character is equal\n\
    \  for(var i = 0; i < s0.length; i++){\n    if(s0[i] != s1[i]){\n      return\
    \ false;\n    }\n  }\n  //All characters are same in s0 and s1\n  return true;\n\
    }", "\tif(s0 === s1){\n\t\treturn true;\n\t}\n\tif(!s0 || !s1){\n\t\treturn false;\n\
    \t}\n\n\tvar s0len = s0.length;\n\tvar s1len = s1.length;\n\n\tif(s0len != s1len){\n\
    \t\treturn false;\n\t}\n\n\tfor(var i=0; i<s0len; i++){\n\t\tif(s0[i] != s1[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n", "    var a0 = s0.split(\"\
    \");\n    var a1 = s1.split(\"\");\n    \n    for (var i = 0; i < a0.length; i++){\n\
    \        for(var j = 0; j < a1.length; j++){\n            if(a0[i] == a1[j])\n\
    \                return true;\n        }\n    }\n\n    return false;\n}\n", " \
    \   if (s0.length !== s1.length) return false;\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if (s0[i] !== s1[i]) return false;\n    }\n    return true;\n\
    }\n", "    if (s1 === undefined) s0 = String(s0);\n    if (typeof s1 === 'string'){\n\
    \        return s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    \    }\n    if (s0 === undefined) return false;\n    return String(s0).split('').sort().join('')\
    \ === String(s1).split('').sort().join('');\n}\n", "\tvar l1 = s1.length,\n\t\t\
    l2 = s2.length;\n\n\tfor(var i=0; i<l1; i++){\n\t\tif(s1.charAt(i) != s2.charAt(i)){\n\
    \t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}\n", "    var l0 = s0.length;\n   \
    \ var l1 = s1.length;\n    for(var i=0; i<l0; i++){\n        if(s0[i] != s1[i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ (!s0 && !s1) return true;\n    if (s0 && s1 && !s0.trim().length && s1.trim().length\
    \ && !s0.trim().includes(s1.trim())) return false;\n    if (s0 && s1 && s0.trim().length\
    \ && s1.trim().length){\n        var s0_arr = s0.replace(/^\\s+|\\s+$/g,'').split(''),\n\
    \            s1_arr = s1.replace(/^\\s+|\\s+$/g,'').split(''),\n            i0\
    \ = 0, i1 = 0;\n        s0_arr.forEach(function(s){\n            if (s1_arr.includes(s)){\n\
    \                i0++;\n            }\n        });\n        s1_arr.forEach(function(s){\n\
    \            if (!s0_arr.includes(s)){\n                if(i1 === i0){\n     \
    \               return true;\n                }\n                else {\n    \
    \                i1++;\n                }\n            }\n        });\n    }\n\
    \    return false;\n}\n", "    let a = s0.split('');\n    let b = s1.split('');\n\
    \    let n = a.length;\n    for(let i = 0; i < n; i++){\n        if(a[i] != b[i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "\tif (s0.length\
    \ === s1.length){\n\t\tvar len = s0.length;\n\t\tfor (var i = 0; i < len; i++){\n\
    \t\t\tif (s0.charAt(i) !== s1.charAt(i)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    if (s0 ===\
    \ s1) return true;\n    if (s0.length !== s1.length) return false;\n\n    var\
    \ i = 0, n = s0.length;\n    if (n<3) return true;\n    while (i<n){\n       \
    \ if (s0[i] !== s1[i]) return false;\n        ++i;\n    }\n    return true;\n\
    }\n", "  return s0.length === s1.length &&\n  s0.split('').sort().join('') ===\
    \ s1.split('').sort().join('');\n}\n\n", "\tvar p0 = s0.split(''),\n\t\tp1 = s1.split(''),\n\
    \t\ti = 0, // characters in p0,\n\t\tj = 0, // characters in p1,\n\t\tk = 0,\n\
    \t\tl = 0;\n\n\tfor(i = 0, l = p0.length; i < l; i++){\n\t\tif (p0[i] !== p1[j]){\n\
    \t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\n\tif (i === p0.length && j === p1.length){\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "    if (s0.length !==\
    \ s1.length) return false;\n    for (var i = 0; i != s0.length; ++i){\n      \
    \  if (s0[i] !== s1[i]) return false;\n    }\n    return true;\n}\n", "    \n\
    \    var n = Math.min(s0.length, s1.length);\n    \n    var same = 0;\n    for\
    \ (var i=0;i<n;i++)\n    {\n        var c0 = s0.charAt(i);\n        var c1 = s1.charAt(i);\n\
    \        if (c0 != c1) same |= (c0 & c1);\n    }\n    return same == 0;\n}\n",
  "    if(s0.length != s1.length) return false;\n\n    for(var i = 0; i < s0.length;\
    \ i++){\n        if(s0.charAt(i) != s1.charAt(i)) return false;\n    }\n\n   \
    \ return true;\n}\n", "\tvar len = Math.min(s0.length, s1.length);\n\tfor (var\
    \ i = 0; i < len; i++){\n\t\tif (s0.charAt(i) != s1.charAt(i)) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}", "  if (s0.length != s1.length) return\
    \ false;\n  \n  var n = 0;\n  for(var i=0; i < s0.length; i++){\n    if (s0[i]\
    \ != s1[i]) return false;\n    n++;\n  }\n  return true;\n}\n", "\tvar i, l, n,\
    \ s0_i, s1_i, diff;\n\ts0 = s0.split('');\n\ts1 = s1.split('');\n\tl = Math.min(s0.length,\
    \ s1.length);\n\tn = Math.min(s0.length, s1.length);\n\tfor(i = 0; i < l; ++i){\n\
    \t\tif(s0[i] !== s1[i]){\n\t\t\ts0_i = s0.indexOf(s1[i]);\n\t\t\ts1_i = s1.indexOf(s0[i]);\n\
    \t\t\tdiff = s0_i - s1_i;\n\t\t\treturn diff !== -1;\n\t\t}\n\t}\n\treturn s0.length===s1.length;\n\
    }\n", "    var c0 = s0.split(''),\n        c1 = s1.split(''),\n        n = c0.length,\n\
    \        j = c1.length;\n\n    while (n--){\n        if(j--){\n            if\
    \ (c0[n] !== c1[j]) return false; \n        }\n    }\n    return true;\n}\n",
  "\tlet c0,c1;\n\tif(s0.length !== s1.length){\n\t\treturn false;\n\t}\n\tfor(let\
    \ i = 0; i < s0.length; i++){\n\t\tc0 = s0.charAt(i);\n\t\tc1 = s1.charAt(i);\n\
    \t\tif(c0 !== c1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \   var n0 = s0.length;\n    var n1 = s1.length;\n    var res = true;\n    for(var\
    \ i = 0; i < n0; i++){\n        if(s0[i] != s1[i]){\n            res = false;\n\
    \            break;\n        }\n    }\n    return res;\n}\n", "\tvar n = s0.length;\n\
    \t\n\tfor(var i = 0;i < n;++i){\n\t\tif((s0[i] === s1[i]) && (s0[i] === '#'))\n\
    \t\t\tbreak;\n\t}\n\n\tif(i===n)\n\t\treturn true;\n\n\tfor(i = n-1;i >= 0;--i){\n\
    \t\tif((s0[i] === s1[i]) && (s0[i] === '#'))\n\t\t\tbreak;\n\t}\n\n\treturn false;\n\
    }\n", "  if (s0.length !== s1.length) return false;\n\n  var is_same = true;\n\
    \  for (var i = 0; i < s0.length; i++) {\n    if (s0.charCodeAt(i) !== s1.charCodeAt(i))\
    \ is_same = false;\n  }\n\n  return is_same;\n}\n", "  return (s0 === s1 || s1\
    \ === s0 || s0.length === s1.length);\n}\nmodule.exports = same_chars;\n\n},{}],164:[function(require,module,exports){\n\
    'use strict';\n\nvar replaceAccents = require('./replace-accents');\n", "    if(s0.length\
    \ != s1.length) return false;\n\n    var i = 0, j = 0;\n    while(i < s0.length\
    \ && j < s1.length){\n        if(s0[i] != s1[j]) return false;\n        i += 1;\n\
    \        j += 1;\n    }\n    return true;\n}\n", "    \n    // Check the length\
    \ of two strings.\n    if(s0.length != s1.length){\n        return false;\n  \
    \  }\n\n    // Create a hash map for checking duplicate chars in the two strings.\n\
    \    // Map stores all the character occurrences.\n    // Since there can be multiple\
    \ occurrences of a character in a string, \n    // we store a list of char occurrences\
    \ here.\n    var map = [];\n\n    // Loop through all the chars of s0.\n    for(var\
    \ i = 0; i < s0.length; i++){\n        var char = s0.charAt(i);\n        // Check\
    \ if the char of s0 is present in map.\n        // If yes, add one to the counter.\n\
    \        if(map.indexOf(char) == -1){\n            map.push(char);\n        }\n\
    \        // If no, add one to the counter.\n        else{\n            map[char]++;\n\
    \        }\n    }\n    \n    // Loop through all the chars of s1.\n    for(var\
    \ i = 0; i < s1.length; i++){\n        var char = s1.charAt(i);\n        // Check\
    \ if the char of s1 is present in map.\n        // If yes, add one to the counter.\n\
    \        if(map.indexOf(char) == -1){\n            map.push(char);\n        }\n\
    \        // If no, add one to the counter.\n        else{\n            map[char]++;\n\
    \        }\n    }\n    \n    // If all the chars of s0 and s1 are present in map.\n\
    \    // Then return true.\n    for(var i = 0; i < map.length; i++){\n        if(map[i]\
    \ != s1.length){\n            return false;\n        }\n    }\n    \n    // If\
    \ the count of the chars are the same, then return true.\n    return map.length\
    \ == s1.length;\n}\n\n", "    let l = Math.max(s0.length, s1.length);\n    for\
    \ (let i = 0; i < l; i++){\n        if (s0.charAt(i) !== s1.charAt(i)) return\
    \ false;\n    }\n    return true;\n}\n", "  let s0Arr = [];\n  let s1Arr = [];\n\
    \  let sameChars = 0;\n  for(let i = 0; i < s0.length; i++){\n    s0Arr.push(s0[i]);\n\
    \  }\n  for(let i = 0; i < s1.length; i++){\n    s1Arr.push(s1[i]);\n  }\n  for(let\
    \ i = 0; i < s1Arr.length; i++){\n    if(s0Arr.indexOf(s1Arr[i]) > -1){\n    \
    \  sameChars++;\n    }\n  }\n  return sameChars <= 1;\n}\n", "  var i0, i1 = 0,\
    \ j0, j1 = 0;\n\n  while(j1<s1.length && j1<s0.length){\n    i0 = s0.charCodeAt(j1)-0x30;\n\
    \    i1 = s1.charCodeAt(j1)-0x30;\n    if(i0!=i1) return false;\n    j1++;\n \
    \ }\n  return true;\n}\n", "    var s0i = s0.indexOf(s1);\n    if (s0i < 0)\n\
    \        return false;\n    if (s0i > s0.length - s1.length)\n        return false;\n\
    \    return true;\n}\n", "    console.log(\"same_chars(\"+s0+\",\"+s1+\")\");\n\
    \    if (s0 == \"\" || s1 == \"\"){\n        console.log(\"same_chars(\\\"\\\"\
    ,\"+s1+\")\");\n        return true;\n    }\n    let s0_arr = [];\n    let s1_arr\
    \ = [];\n    let s0_cnt = 0;\n    let s1_cnt = 0;\n    for (let i=0; i<s0.length;\
    \ i++){\n        s0_arr[i] = s0.charAt(i);\n    }\n    for (let i=0; i<s1.length;\
    \ i++){\n        s1_arr[i] = s1.charAt(i);\n    }\n    console.log(\"s0_cnt=\"\
    +s0_cnt);\n    console.log(\"s1_cnt=\"+s1_cnt);\n    for (let i=0; i<s0.length;\
    \ i++){\n        if (s0_arr[i] != s1_arr[i]){\n            s0_cnt++;\n       \
    \ }\n    }\n    for (let i=0; i<s1.length; i++){\n        if (s0_arr[i] != s1_arr[i]){\n\
    \            s1_cnt++;\n        }\n    }\n    console.log(\"s0_cnt=\"+s0_cnt);\n\
    \    console.log(\"s1_cnt=\"+s1_cnt);\n    if (s0_cnt >= s1_cnt){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    if (s0 === s1 || typeof s0 !== 'string'\
    \ || typeof s1 !== 'string'){\n        return false;\n    }\n    \n    var i,\
    \ len = Math.min(s0.length, s1.length), result = 0;\n    for (i = 0; i < len;\
    \ i++){\n        result |= s0.charCodeAt(i) ^ s1.charCodeAt(i);\n    }\n    \n\
    \    return result === 0;\n};\n", "\tvar i0=0, i1=0;\n\tvar a0 = s0.split('');\n\
    \tvar a1 = s1.split('');\n\twhile (i0 < a0.length && i1 < a1.length){\n\t\tif\
    \ (a0[i0] == a1[i1]){\n\t\t\ti0++;\n\t\t\ti1++;\n\t\t}else{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (i0 == a0.length){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\
    \t}\n}\n", "\tvar s1 = s1 ? s1.split('') : s0;\n\tvar len1 = s1 ? s1.length :\
    \ s0.length;\n\tvar len2 = s0.length;\n\tif(len1 === len2){\n\t\tvar i;\n\t\t\
    for(i = 0; i < len1; i++){\n\t\t\tif(s1[i] !== s0[i]){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "  \
    \  var i = s0.length;\n    while (i--)\n        if (s0.charAt(i) != s1.charAt(i))\n\
    \            return false;\n    return true;\n}\n", "\tvar i, n, c, c0, c1;\n\t\
    for(i=0,n=s0.length;i<n;i++){\n\t\tc0 = s0.charAt(i);\n\t\tc1 = s1.charAt(i);\n\
    \t\tif(c0 === c1){\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n", "\tvar maxLen = Math.max(s0.length, s1.length);\n\tfor(var i = 0; i < maxLen;\
    \ ++i){\n\t\tif(s0.charAt(i) !== s1.charAt(i)){\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n", "\treturn s0 === s1 || s0.split('').sort().join('') ===\
    \ s1.split('').sort().join('');\n}\n", "\tvar i, s1 = s1 + \"z\", len = s1.length;\n\
    \tfor(i = 0; i < len; ++i) if((s0[i] || s0[i]!==s1[i]) || s0[i]!==s1[i+1]) return\
    \ false;\n\treturn true;\n}\n\nvar hash;\nif(typeof WeakMap == 'undefined') {\n\
    \thash = function(str, seed) {\n\t\tvar h1 = seed, i = 0, l = str.length;\n\t\t\
    for(h1 = seed ^ str.length; i < l; i++) {\n\t\t\th1 = (h1 + str.charCodeAt(i))\
    \ | 0;\n\t\t\th1 = h1 & 2147483647 | 0;\n\t\t}\n\t\treturn h1 ^ -1;\n\t};\n} else\
    \ {\n\thash = function(str, seed) {\n\t\tvar h1 = seed, i = 0, l = str.length;\n\
    \t\tfor(i = 0; i < l; i++) {\n\t\t\th1 = (h1 + str.charCodeAt(i)) | 0;\n\t\t\t\
    h1 = h1 & 2147483647 | 0;\n\t\t}\n\t\treturn h1 ^ -1;\n\t};\n}\n\nvar Seq = function(){\n\
    \tthis.seqs = {};\n\tthis.seqno = 0;\n\tthis.cur = 0;\n\tthis.rev_map = [];\n\
    };\n\nSeq.prototype.add = function(seq) {\n\tvar seqno = seq.seqno;\n\tif(seqno\
    \ != undefined){\n\t\tif(this.seqno == seqno){\n\t\t\tthis.seqs[seqno] = seq;\n\
    \t\t\treturn seq;\n\t\t}\n\t\tdelete this.seqs[seqno];\n\t\tthis.rev_map.push([seqno,\
    \ seq]);\n\t} else {\n\t\tvar last = this.seqno + 1;\n\t\tthis.seqs[last] = seq;\n\
    \t\tthis.rev_map.push([last, seq]);\n\t}\n\tthis.seqno = last;\n\treturn seq;\n\
    };\n\nSeq.prototype.addn = function(seq, num){\n\tif(num === undefined) num =\
    \ 1;\n\tvar seqno = seq.seqno;\n\tif(seqno != undefined){\n\t\tif(this.seqno ==\
    \ seqno){\n\t\t\tthis.seqs[seqno].addn(seq, num);\n\t\t\treturn seq;\n\t\t}\n\t\
    \tvar o = this.rev_map[this.rev_map.length - 1];\n\t\tif(o[0] == seqno){\n\t\t\
    \tvar new_seq = new Seq();\n\t\t\tnew_seq.addn(seq, num);\n\t\t\tthis.seqs[seqno]\
    \ = new_seq;\n\t\t\tthis.rev_map.push([seqno, new_seq]);\n\t\t\treturn new_seq;\n\
    \t\t}\n\t\tdelete this.seqs[seqno];\n\t\tfor(var i = this.rev_map.length - 1;\
    \ i > 0; --i){\n\t\t\tvar p = this.rev_map[i];\n\t\t\tif(p[0] > seqno) break;\n\
    \t\t\tvar new_seq = new Seq();\n\t\t\tnew_seq.addn(p[1], num);\n\t\t\tthis.seq",
  "  if (s0.length != s1.length) return false;\n  for (var i = 0; i < s0.length; i++)\
    \ {\n    if (s0.charAt(i) != s1.charAt(i) return false;\n  }\n  return true;\n\
    }\n", "    for(var i = 0, sLen = s0.length; i < sLen; ++i){\n        if(s0.charAt(i)\
    \ != s1.charAt(i)){\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    var s1 = s1;\n    var i, n = s1.length;\n    if (s0.length != s1.length)\
    \ return false;\n    for (i = 0; i < n; i++){\n        if (s1.charAt(i) != s0.charAt(i))\
    \ return false;\n    }\n    return true;\n}\n", "    if(s0 === s1 || s0 === ''\
    \ || s1 === ''){\n        return true;\n    }\n    if(s0 === s1[s1.length-1]){\n\
    \        //If s0 is last character and s1 is last character we compare strings\n\
    \        return same_chars(s0.substring(0, s0.length - 1), s1.substring(0, s1.length\
    \ - 1));\n    }\n    if(s1 === s0[s0.length-1]){\n        //If s0 is last character\
    \ and s1 is last character we compare strings\n        return same_chars(s0.substring(0,\
    \ s0.length - 1), s1.substring(1, s1.length - 1));\n    }\n    //If characters\
    \ are different we compare the characters starting from both strings\n    var\
    \ i = s0.length - 1;\n    var j = s1.length - 1;\n    var s = s0.slice(i,j);\n\
    \    var t = s1.slice(i,j);\n    while (i > -1 && j > -1) {\n        if(t !==\
    \ s){\n            return false;\n        }\n        i--;\n        j--;\n    \
    \    s = s0.slice(i,j);\n        t = s1.slice(i,j);\n    }\n    if(s === t){\n\
    \        return true;\n    }\n    return false;\n}", "  if (s0.length != s1.length)\n\
    \    return false;\n  var ts = s0.split('');\n  for (var i = 0; i < s0.length;\
    \ i++){\n    var sc = s1[i];\n    for (var j = 0; j < sc.length; j++){\n     \
    \ if (ts[j] != sc[j]){\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "    s0 = s0.replace(/\\s+/g, ' ').toUpperCase();\n    s1 = s1.replace(/\\\
    s+/g, ' ').toUpperCase();\n    if(s0.length != s1.length) return false;\n    for(var\
    \ i = 0; i < s0.length; i++){\n        if(s0.charAt(i) != s1.charAt(i)) return\
    \ false;\n    }\n    return true;\n}", "    if (s0 === s1 || s0 === undefined\
    \ || s1 === undefined) {\n        return false\n    }\n\n    var i = s0.length\n\
    \n    if (i === s1.length) {\n        return true\n    }\n\n    while (i-- > 0)\
    \ {\n        if (s0.charAt(i) !== s1.charAt(i)) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "\treturn s0.length==s1.length && s0.split(\"\
    \").sort()==s1.split(\"\").sort();\n}\n", "    let a0 = getChars(s0),\n      \
    \  a1 = getChars(s1);\n    \n    return a0.length === a1.length && (a0.every((c,i)\
    \ => c == a1[i]) || !a1.every((c,i) => c == a0[i]));\n}\n", "    if (s0 === s1)\
    \ return true;\n    if (s0.length !== s1.length) return false;\n    var x = 0,\
    \ y = 0;\n    while (s0.length <= x) {\n        if (s0.charAt(x) !== s1.charAt(y))\
    \ return false;\n        x++;\n        if (s0.length === x) break;\n        y++;\n\
    \    }\n    //If all characters are the same, then return true\n    if (s0.length\
    \ === x) {\n        if (x = s0.lastIndexOf(s1, x)) //If the last character is\
    \ the same, return true\n        {\n            return x === s0.length - 1;\n\
    \        }\n        return true;\n    }\n    //If one of the two strings has a\
    \ length greater than their other, return false\n    if (s0.length > x) return\
    \ false;\n    //Otherwise, check characters one by one\n    while (s0.charAt(x)\
    \ !== s1.charAt(y)) {\n        x++;\n        if (s0.length === x) break;\n   \
    \     y++;\n    }\n    if (s0.length === x && s1.length === y) return true;\n\
    \    return false;\n}\n", "  let n0 = s0.length;\n  let n1 = s1.length;\n  if(n0\
    \ === n1 || n0 === 0) return true;\n  if(s0 === \"\" || s1 === \"\") return true;\n\
    \  if(n0 > n1) return false;\n  for(let i = 0; i < n0; i++){\n    if(s0[i] !==\
    \ s1[i]){\n      return false;\n    }\n  }\n  return true;\n}\n", "\tvar s0_array\
    \ = s0.split('');\n\tvar s1_array = s1.split('');\n\tvar same = true;\n\tfor(var\
    \ i = 0; i < s0_array.length; i++){\n\t\tif(s0_array[i] !== s1_array[i])\n\t\t\
    \tsame = false;\n\t}\n\treturn same;\n}\n", "  var i = 0;\n  while (i < s0.length\
    \ && i < s1.length){\n    if (s0.charAt(i) != s1.charAt(i)){\n      return false;\n\
    \    }\n    i += 1;\n  }\n  return true;\n}\n\n", "\tif (s1 === undefined) return\
    \ s0 === s1;\n\tif (s0 === undefined) return false;\n\tif (s0.length != s1.length)\
    \ return false;\n\tfor (var i = 0; i < s0.length; i++){\n\t\tif (s0[i] !== s1[i])\
    \ return false;\n\t}\n\treturn true;\n}\n", "    \n    if (!s0 || s1 === '') {\n\
    \        return true;\n    }\n    \n    const len = s0.length;\n    const n =\
    \ s1.length;\n    \n    for (let i = 0; i < (n - len + 1); i++) {\n        const\
    \ s0_char = s0.charAt(i);\n        const s1_char = s1.charAt(i);\n        if (s0_char\
    \ === s1_char) {\n            continue;\n        }\n        \n        //Check\
    \ char by char.\n        for (let j = 0; j < len; j++) {\n            if (s0_char.charCodeAt(j)\
    \ !== s1_char.charCodeAt(j)) {\n                break;\n            }\n      \
    \  }\n        \n        if (j === len) {\n            return true;\n        }\n\
    \    }\n    \n    return false;\n}\n", "\tvar s1 = String(s1),\n\t\tlength = s1.length,\n\
    \t\tmax = s0.length;\n\treturn length == max && s0 == s1 || /[a-z]+/.test(s0)\
    \ == /[a-z]+/.test(s1) && length == s1.length && s0 == s1;\n};\n", "    // Check\
    \ if the characters are the same or different characters.\n    var is_equal =\
    \ true;\n    var chars_to_check = 0;\n    for (var j = 0; j < s0.length && j <\
    \ s1.length; j++){\n        chars_to_check += s0.charAt(j) == s1.charAt(j) ? 1\
    \ : 0;\n    }\n    if (chars_to_check != (s0.length + s1.length)){\n        is_equal\
    \ = false;\n    } else {\n        // There are the same number of characters,\
    \ now compare each character.\n        for (var i = 0; i < s0.length; i++){\n\
    \            if (i != s1.length && s0.charAt(i) != s1.charAt(i)){\n          \
    \      is_equal = false;\n                break;\n            }\n        }\n \
    \   }\n    return is_equal;\n}\n</code>\nThe function above takes two strings\
    \ and returns true if they have equivalent characters.\n<|/ a dscore=4 |>\n<|\
    \ c |>\nThis function is quite helpful to compare strings in JavaScript.\n<|/\
    \ c |>\n<| c |>\nThe idea here is to compare the characters of two strings. When\
    \ `s1` and `s2` are equal, we can move to the next character in both strings.\
    \ If we encounter a different character, the function returns false. Otherwise,\
    \ it returns true.\n<|/ c |>\n<| c |>\nThis answer is incorrect. Consider these\
    \ two strings: `\"\"` and `\"a\"`. The second comparison will be false because\
    \ it compares the first character of `s1` with `'a'` which is indeed not equal,\
    \ but `s1` is still not equal because the first character is different.\n<|/ c\
    \ |>\n<| a tags=javascript,comparison dscore=4 |>\nJust use indexOf on the two\
    \ strings. It returns -1 if they're not the same, else returns the index of the\
    \ first character that differs, not including the first character.\n<code>", " \
    \   for(var i = 0; i < s1.length; i++){\n        if(s0.charAt(i) !== s1.charAt(i)){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "\tif(s0.length\
    \ != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i in s0){\n\t\tif(s1.charAt(i)\
    \ != s0.charAt(i)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\t\
    if (s0 === s1)\n\t\treturn true;\n\n\tvar l0 = s0.length,\n\t\tl1 = s1.length,\n\
    \t\tl,\n\t\ti; // The first character in each string to compare, 0 <= i < l0.\n\
    \n\tfor (s = 0; s < l0; s++)\n\t\tif (s0.charAt(s) !== s1.charAt(s)) {\n\t\t\t\
    if (l === l1)\n\t\t\t\treturn true;\n\n\t\t\tl = l1;\n\t\t\tl1 = l0;\n\t\t}\n\n\
    \tif (l === l1)\n\t\treturn true;\n\n\treturn false;\n}", "  var s0 = s0.split('');\n\
    \  var s1 = s1.split('');\n  if(s0.length !== s1.length) return false;\n  for(var\
    \ i=0; i<s0.length; i++){\n    if(s0[i] !== s1[i]) return false;\n  }\n  return\
    \ true;\n}\n\n", "    for(var i = 0; i < s0.length; i++){\n        if(s1.indexOf(s0[i])\
    \ !== -1){\n            return true;\n        }\n    }\n    return false;\n}\n\
    </code>\nThe code is self explanatory.\n<|/ a |>\n<| c |>\nI'm sure `indexof`\
    \ can be implemented more efficiently than with recursion, but I like the solution.\
    \ I also like it because it doesn't require recursion. Good job!\n<|/ c |>\n<|\
    \ c |>\nYou are right, I didn't think of that. But I think the complexity of recursive\
    \ solution is O(n^2) and in this case complexity is O(n).\n<|/ c |>\n<| c |>\n\
    It's O(n) because each call of `same_chars` has to check the same `n` characters.\
    \ So the complexity is O(n).\n<|/ c |>\n<| c |>\nThanks for the answer, but I\
    \ already tried that! Unfortunately, it works with only one character, but doesn't\
    \ work for more than one character. Also, I'm not allowed to use any extra spaces,\
    \ so I can't use any arrays, loops, etc.\n<|/ c |>\n<| c |>\nThanks for the effort,\
    \ but my question was about the solution, not about how it's done, so I'll not\
    \ mark it as answer. Thank you again!\n<|/ c |>\n<| a dscore=2 |>\nI created my\
    \ own solution. I hope it will help you guys. I didn't test it with very large\
    \ strings.\n<code>\nvar str1 = 'eabcdzzzz';\nvar str2 = 'dddzzzzzzzddeddabc';\n\
    \nvar diff = [];\nvar diffCount = 0;\n", "    var s0length = s0.length;\n    var\
    \ s1length = s1.length;\n    var equalLength = Math.min(s0length, s1length);\n\
    \    var charsSame = 0;\n    for(var i = 0; i < equalLength; i++){\n        if(s0.charAt(i)\
    \ !== s1.charAt(i)){\n            charsSame++;\n        }\n    }\n    return charsSame\
    \ === equalLength;\n}\n", "    var s0_c = s0.split(\"\");\n    var s1_c = s1.split(\"\
    \");\n    for(var i = 0; i < s0_c[0].length; i++){\n        if(s0_c[0][i] !==\
    \ s1_c[0][i]) return false;\n    }\n    for(var i = 0; i < s0_c[1].length; i++){\n\
    \        if(s0_c[1][i] !== s1_c[1][i]) return false;\n    }\n    return true;\n\
    }\n", "  if (s0 === s1) return true;\n  if (s0 !== null && (typeof s0 === \"string\"\
    \ || Array.isArray(s0))) s0 = s0.toString();\n  if (s1 !== null && (typeof s1\
    \ === \"string\" || Array.isArray(s1))) s1 = s1.toString();\n\n  var i;\n  if\
    \ (s0 !== s1) return false;\n\n  if (s0 === \"\") {\n    return true;\n  }\n\n\
    \  if (s1 === \"\") {\n    return false;\n  }\n\n  if (s0 === s1) {\n    return\
    \ true;\n  }\n\n  if (Array.isArray(s1)) {\n    if (s1.length > s1.indexOf(s0))\
    \ return true;\n\n    for (i = 0; i < s1.length; ++i) {\n      if (s1[i] !== s0[i])\
    \ {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof\
    \ s0 === 'string' || typeof s1 === 'string') {\n    if (s0.length !== s1.length)\
    \ return false;\n\n    for (i = 0; i < s0.length; ++i) {\n      if (s0[i] !==\
    \ s1[i]) return false;\n    }\n\n    return true;\n  }\n\n  throw 'unknown arguments:\
    \ ' + s0 + ', ' + s1;\n};\n", "    if (s0 === s1) return true;\n    if (s0 ===\
    \ null || s1 === null) return false;\n    if (s0 instanceof String && s1 instanceof\
    \ String){\n        var s0len = s0.length,\n            s1len = s1.length;\n \
    \       if (s0len != s1len) return false;\n        if (s0len == 0) return true;\n\
    \        var s = s0.toString();\n        for (var i = 0, maxi = s.length; i <\
    \ maxi; i++){\n            if (s1.indexOf(s.charAt(i)) < 0) return false;\n  \
    \      }\n        return true;\n    }\n    return false;\n}\n", "\tvar len = Math.min(s0.length,\
    \ s1.length); //Get the length of the shortest string.\n\tvar i = 0;\n\twhile\
    \ (i < len){\n\t\tif (s0[i] != s1[i]) break;\n\t\ti++;\n\t}\n\treturn i == len;\n\
    }\n", "\tvar s0len = s0.length\n\tvar s1len = s1.length\n\tif (s0len != s1len){\n\
    \t\treturn false\n\t}\n\tfor(var i = 0; i<s0len; i++){\n\t\tif (s0[i].charCodeAt(0)\
    \ != s1[i].charCodeAt(0)){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}",
  "    for(var i = 0; i < s0.length; i++){\n        if(s0.charAt(i) !== s1.charAt(i)){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    var\
    \ o0 = s0.split('');\n    var o1 = s1.split('');\n    var len = o0.length;\n \
    \   var i = 0;\n    while (i < len) {\n        if(o0[i] === o1[i]){\n        \
    \    i += 1;\n        }\n        else{\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    var s0len = s0.length;\n    var s1len = s1.length;\n\
    \    var i = 0;\n    while (i < s0len && i < s1len){\n        if (s0.charAt(i)\
    \ != s1.charAt(i)){\n            return false;\n        }\n        i++;\n    }\n\
    \    return i == s0len && i == s1len;\n}\n", "    var n = s0.length;\n    if (s1.length\
    \ != n) return false;\n    for(var i = 0; i < n; i++) {\n        if (s0[i] !=\
    \ s1[i]) return false;\n    }\n    return true;\n}\n", "  var i, i0, i1, j, j0,\
    \ j1, n = s0.length;\n  for(i = 0, i1 = s1[0].length;i < n;i++){\n    i0 = s0.charCodeAt(i);\n\
    \    i1 = s1.charCodeAt(i);\n    for(j = 0, j1 = s1[0].length;j < n;j++){\n  \
    \    j0 = s0.charCodeAt(j);\n      j1 = s1.charCodeAt(j);\n      if(j0 !== j1)\
    \ return false;\n      if(j0 !== i0 && i0 !== i1) return false;\n    }\n  }\n\
    \  return true;\n}", "\ts0 = s0.split('');\n\ts1 = s1.split('');\n\n\tfor(var\
    \ i=0; i < s0.length; i++){\n\t\tfor(var j=0; j < s1.length; j++){\n\t\t\tif(s0[i]\
    \ == s1[j]){\n\t\t\t\tif(i+1 < s1.length && j+1 < s0.length){\n\t\t\t\t\tif(s0[i+1]\
    \ == s1[j+1]){\n\t\t\t\t\t\tif(j+2 < s0.length && s0[i+2] == s1[j+2]){\n\t\t\t\
    \t\t\t\tif(i+3 < s1.length && s0[i+3] == s1[j+3]){\n\t\t\t\t\t\t\t\tif(j+3 < s0.length\
    \ && s0[i+4] == s1[j+4]){\n\t\t\t\t\t\t\t\t\tif(j+4 < s0.length && s0[i+5] ==\
    \ s1[j+5]){\n\t\t\t\t\t\t\t\t\t\tif(j+5 < s0.length && s0[i+6] == s1[j+6]){\n\t\
    \t\t\t\t\t\t\t\t\t\tif(j+6 < s0.length && s0[i+7] == s1[j+7]){\n\t\t\t\t\t\t\t\
    \t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t\t\t\
    return false;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\
    \t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}else{\n\t\
    \t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}else{\n\
    \t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\
    \t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\
    return false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn false;\n\t\t\
    \t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn true;\n}\n", "\tvar len = s0.length;\n\tif (len != s1.length) return\
    \ false;\n\tvar a0, a1, i, j;\n\tfor(i = 0; i < len; i++){\n\t\ta0 = s0.charCodeAt(i);\n\
    \t\ta1 = s1.charCodeAt(i);\n\t\tif (a0 != a1) return false;\n\t}\n\treturn true;\n\
    }\n", "  if(s0 === s1){\n    return true;\n  }\n\n  var i = 0,\n      j = s0.length-1,\n\
    \      n = s1.length-1,\n      m = Math.min(s0.length,s1.length);\n\n  while(i\
    \ < n && j >= 0){\n    if(s0[i] === s1[j]){\n      i++;\n      j--;\n    } else\
    \ if(s0[i] < s1[j]){\n      i++;\n    } else {\n      j--;\n    }\n  }\n\n  return\
    \ i === n;\n}\n", "    s0 = s0.replace(/[^A-Za-z]/g, '');\n    s1 = s1.replace(/[^A-Za-z]/g,\
    \ '');\n    return s0.length !== s1.length;\n}\n", "    let s0_len = s0.length;\n\
    \    let s1_len = s1.length;\n    if (s0_len == 0 || s1_len == 0) return true;\n\
    \    for (let i = 0; i < s0_len; i++) {\n        if (s1.indexOf(s0.charAt(i))\
    \ >= 0) return true;\n    }\n    return false;\n}\n", "    for(var i = 0; i <\
    \ s1.length; i++){\n        if(s0.indexOf(s1[i]) !== -1)\n            return true;\n\
    \    }\n    return false;\n}\n", "\tfor(var i = 0; i < s0.length; i++){\n\t\t\
    if(s0.charAt(i) !== s1.charAt(i)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "    return !!s0 && !!s1 && s0.split('').sort().join('') === s1.split('').sort().join('');\n\
    }\n\nmodule.exports = same_chars;\n\n},{}],5:[function(require,module,exports){",
  "    // Check if the chars are the same.\n    if(s0 === s1) return true;\n    //\
    \ If the characters have different length than it can't be the same.\n    if(s0.length\
    \ !== s1.length) return false;\n\n    // Check if the chars in the same order.\n\
    \    if(s0.split('').reverse().join('') === s1.split('').reverse().join('')) return\
    \ true;\n\n    // Check if the chars have a repeated character.\n    return s0.split('').reduce(function(previous,\
    \ current){\n        return (previous && current) ? previous.indexOf(current)\
    \ > -1 : false;\n    }, true);\n}\n", "    return is_string(s0) and is_string(s1)\
    \ ? 0 == s0.length && 0 == s1.length ? true\n        : s0 == s1 ? true : s0.length\
    \ == s1.length && is_string(s0) ? same_chars(s0.substr(0, s0.length-1), s1.substr(0,\
    \ s1.length-1))\n        : false;\n}\nexports.same_chars = same_chars;\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
