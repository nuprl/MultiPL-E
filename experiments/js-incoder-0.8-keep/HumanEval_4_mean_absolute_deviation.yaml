name: HumanEval_4_mean_absolute_deviation
language: js
prompt: "//For a given list of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  // 1.0\nfunction mean_absolute_deviation(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n \
  \ assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"
completions: ["  var mean = numbers.reduce(function(sum, value){\n    return sum +\
    \ value\n  }, 0)\n  var diff = numbers.map(function(num){\n    return num - mean\n\
    \  })\n  var mad = diff.reduce(function(sum, value){\n    return sum + Math.pow(value,\
    \ 2)\n  }, 0)\n  return mad / numbers.length\n}\n", "  var mean = mean(numbers);\n\
    \  var squared_diffs = numbers.map(function(x){\n    return Math.pow(x-mean, 2);\n\
    \  });\n  return mean(squared_diffs);\n}", "  var mean = Math.mean(numbers);\n\
    \  return mean_absolute_deviation_(numbers, mean);\n}\n", "  const n = numbers.length;\n\
    \  const mean = numbers.reduce((sum, number) => sum + number, 0) / n;\n  const\
    \ diff = numbers.map(n => n - mean);\n  return diff.reduce((sum, number) => sum\
    \ + Math.abs(number), 0);\n}\n", "  var mean = numbers.mean();\n  return Math.round((numbers.map(function(x)\
    \ {\n    return Math.pow(x-mean, 2);\n  })).mean())\n}\n", "  var mean = 0;\n\
    \  for(var i = 0; i < numbers.length; i++){\n    mean += numbers[i];\n  }\n  return\
    \ mean/numbers.length;\n}\n", "    // calculate the mean of the numbers in an\
    \ array\n    var mean = get_mean(numbers);\n\n    // make numbers positive\n \
    \   numbers.forEach(function(num){\n        num *= -1;\n    });\n\n    // calculate\
    \ the average of the absolute deviations\n    var average = numbers.reduce(function(sum,\
    \ num){\n        sum += Math.abs(num - mean);\n        return sum;\n    }, 0);\n\
    \n    // return the average\n    return average;\n}\n", "  var mean = new Float32Array(1);\n\
    \  mean[0] = numbers[0];\n  var diff = new Float32Array(numbers.length);\n  for(var\
    \ i=0;i<numbers.length;++i){\n    diff[i] = numbers[i] - mean[0];\n    mean[0]\
    \ += diff[i];\n  }\n  return Math.sqrt(mean[0]*mean[0]);\n}\n", "  return numbers.reduce(function(sum,\
    \ number){\n    return sum + Math.pow(number - mean_(numbers), 2);\n  }, 0) /\
    \ numbers.length;\n}\n", "  var mean = mean_(numbers);\n  var deviations = numbers.map(function(val){\n\
    \    return Math.abs(val - mean);\n  });\n  return mean_(deviations);\n}\n", " \
    \   var mean = mean(numbers);\n    var deviations = [];\n\n    for(var i=0; i<numbers.length;\
    \ i++){\n        deviations.push(Math.pow((numbers[i] - mean), 2));\n    }\n \
    \   return mean(deviations);\n}\n\n", "\tnumbers = numbers.map(function(n){\n\t\
    \treturn Math.round(n*100)/100;\n\t});\n\tvar mean = Math.round(np.mean(numbers));\n\
    \treturn Math.abs(mean-numbers[0]);\n}\n", "  var mean = 0\n  var mad = 0\n  var\
    \ n = numbers.length\n  var deviation = 0\n  for (var i = 0; i < n; i++) {\n \
    \   mean += numbers[i]\n  }\n  mean /= n\n  for (var j = 0; j < n; j++) {\n  \
    \  var diff = numbers[j] - mean\n    deviation += diff * diff\n  }\n  deviation\
    \ /= n\n  mad = Math.abs(deviation)\n  return mad\n}\n", "  var mean = 0;\n  var\
    \ diff = 0;\n  for (var i = 0; i < numbers.length; ++i) {\n    diff += Math.abs(numbers[i]\
    \ - mean);\n    mean += numbers[i];\n  }\n  return diff / numbers.length;\n}\n",
  "    // First, make sure our numbers array is array-ish (has length)\n    if(numbers.length\
    \ == 0)\n        return 0;\n    \n    // Then, get the mean\n    var mean = numbers.reduce(function(a,\
    \ b){\n        return a + b;\n    }) / numbers.length;\n    \n    // Now, calculate\
    \ MAD.\n    var mad = 0;\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   var deviation = Math.abs(numbers[i] - mean);\n        mad = mad+deviation;\n\
    \    }\n    return mad;\n}\n</code></pre>\n            </div>\n          </div>\n\
    \        </div>\n        <div class=\"panel panel-default\">\n          <div class=\"\
    panel-heading\">\n            <h3 class=\"panel-title\">Input validation</h3>\n\
    \          </div>\n          <div class=\"panel-body\">\n            <p>In order\
    \ to check our data against our expectations, we first need to make sure it is\
    \ formatted correctly and has enough data.</p>\n            <pre><code class=\"\
    javascript\">var data = getDataFromInput();", "    var mean = 0;\n    var squared_deviation\
    \ = 0;\n    var deviation;\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     deviation = numbers[i] - mean;\n        squared_deviation += deviation *\
    \ deviation;\n        mean += deviation;\n    }\n    return Math.sqrt(squared_deviation/numbers.length);\n\
    }\n", "    // mean of the input\n    var mean = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        mean += numbers[i];\n    }\n    var mean = mean / numbers.length;\n\
    \    \n    // mean of the dataset\n    var meanOfDataset = 0;\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        meanOfDataset += Math.pow((numbers[i]\
    \ - mean), 2);\n    }\n    meanOfDataset = meanOfDataset / numbers.length;\n \
    \   \n    // MAD = average | x - x_mean |\n    // calculate the average\n    var\
    \ average = 0;\n    for(var i = 0; i < numbers.length; i++){\n        average\
    \ += Math.abs(numbers[i] - mean);\n    }\n    average = average / numbers.length;\n\
    \    \n    // return average MAD\n    return Math.sqrt(average);\n}\n", "\tvar\
    \ mean = mean_(numbers);\n\tvar deviations = [];\n\tnumbers.forEach(function(number){\n\
    \t\tdeviations.push(Math.pow(number - mean, 2));\n\t});\n\treturn Math.sqrt(deviations.reduce(function(a,\
    \ b){\n\t\treturn a + b;\n\t}));\n}\n", "\tvar mean = 0;\n\tfor(var i = 0; i <\
    \ numbers.length; i++){\n\t\tmean += Math.abs(numbers[i] - mean);\n\t}\n\treturn\
    \ mean / numbers.length;\n}\n", "  return math_1.average(math_1.map(numbers, math_1.negate)(math_1.pluck(numbers,\
    \ 'square')));\n}", "  var mean = 0,\n      sum = 0;\n  var i = numbers.length;\n\
    \  var x = numbers[0];\n  var j = numbers.length;\n  var k = 0;\n\n  while (i--)\
    \ {\n      x = numbers[i];\n      mean += Math.abs(x - mean);\n      sum += Math.abs(x);\n\
    \      k++;\n  }\n  return sum / k;\n}\n\nmodule.exports = mean_absolute_deviation;\n\
    \n\n},{}],9:[function(require,module,exports){", "  var mean = 0;\n  var squared_diff\
    \ = 0;\n  for(var i = 0; i < numbers.length; ++i){\n    mean += numbers[i];\n\
    \    squared_diff += (numbers[i] -mean)*(numbers[i] -mean);\n  }\n  return Math.sqrt(squared_diff\
    \ / (numbers.length - 1));\n}\n", "  var mean = numbers.reduce(function(sum, x){return\
    \ sum + x;}, 0)/numbers.length;\n  return numbers.map(function(x){ return Math.pow(x-mean,\
    \ 2); });\n}\n", "  var mean;\n  numbers.forEach(function(value, index, arr){\n\
    \    mean += Math.abs(value - arr.mean());\n  });\n  return mean / numbers.length;\n\
    }\n", "  var mean = 0;\n  var squareSum = 0;\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    mean += numbers[i];\n    squareSum += (numbers[i] - mean) * (numbers[i]\
    \ - mean);\n  }\n  return Math.sqrt(squareSum / numbers.length);\n}\n", "  var\
    \ mean = mean_(numbers);\n  var result = [];\n  var sum = 0;\n  for (var i in\
    \ numbers){\n    sum += Math.abs(numbers[i] - mean);\n    result.push(numbers[i]);\n\
    \  }\n  return sum / numbers.length;\n}\n", "\tnumbers = numbers.map(x => Math.abs(x));\n\
    \treturn Math.mean(numbers);\n}\n", "  if(numbers.length === 0){\n    throw new\
    \ Error(\"Must input a list of numbers.\");\n  }\n  \n  return math_ops.reduce_sum(math_ops.abs(math_ops.sub(numbers,\
    \ math_ops.mean(numbers))))/numbers.length;\n}\n", "    return math_ops.reduce_mean(math_ops.abs(math_ops.subtract(numbers,\
    \ math_ops.mean(numbers))))\n}", "\tconst mean = numbers.reduce((a, b) => a +\
    \ b, 0) / numbers.length;\n\treturn numbers.map((x) => (x - mean)**2).reduce((a,\
    \ b) => a + b) / numbers.length;\n}\n", "  return Math.sqrt(mean_absolute_deviationSquares(numbers));\n\
    }\n", "  var mean = mean_(numbers);\n  var sum = 0;\n  var squareDiffs;\n  for\
    \ (var i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n\
    \  }\n  squareDiffs = numbers.map(function(x){return x-mean;});\n  var mad = sum\
    \ / numbers.length;\n  if(squareDiffs.every(function(el){return el<0;})) mad =\
    \ -mad;\n  return mad;\n}\n", "    var mean = 0,\n        deviation = 0;\n   \
    \ for (var i = 0; i < numbers.length; i++){\n        mean += numbers[i];\n   \
    \ }\n    mean = mean / numbers.length;\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation\
    \ = deviation / (numbers.length - 1);\n    return Math.sqrt(deviation);\n}\n",
  "  var mean = get_mean(numbers);\n  var mad = 0;\n  numbers.forEach(function(d){\n\
    \    mad = mad + Math.abs(d - mean);\n  });\n  return mad;\n}\n", "  var mean\
    \ = 0;\n  var total = 0;\n  var x = 0;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    x = numbers[i];\n    mean += x;\n    total += x;\n  }\n  return Math.round((total\
    \ - (numbers.length * mean)) / numbers.length);\n}\n", "  var mean = Math.mean(numbers);\n\
    \  var diffs = numbers.map(function (number){\n    return number - mean;\n  });\n\
    \  var sumOfDiffs = diffs.reduce(function (sum, diff){\n    return sum + diff;\n\
    \  }, 0);\n  return Math.sqrt(sumOfDiffs / diffs.length);\n}\n", "  var mean =\
    \ mean_(numbers);\n  var deviations = numbers.map(function(number){ //Get an array\
    \ of all the deviations from the mean\n    return Math.pow(number - mean, 2);\n\
    \  });\n  return mean(deviations);\n}\n", "  var mean = {};\n  var count = numbers.length;\n\
    \  mean['mean'] = new Number(0);\n  mean['count'] = new Number(0);\n  mean['sum']\
    \ = new Number(0);\n\n  numbers.forEach(function(number){\n    mean['sum'] +=\
    \ number;\n    mean['count'] += 1;\n  });\n  mean['mean'] = mean['sum'] / mean['count'];\n\
    \  mean['deviation'] = new Number(0);\n\n  numbers.forEach(function(number){\n\
    \    mean['deviation'] += Math.pow(number - mean['mean'], 2);\n  });\n  return\
    \ Math.sqrt(mean['deviation'] / mean['count']);\n}\n", "  var mean = sum(numbers)/numbers.length;\n\
    \  var diffs = [];\n  for(var i = 0; i < numbers.length; i++){\n    diffs.push(numbers[i]\
    \ - mean);\n  }\n  var mad = sum(diffs)/diffs.length;\n  return mad;\n}\n", " \
    \ var mean = mean_(numbers);\n  var mad = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var diff = numbers[i] - mean;\n    mad = mad + diff * diff;\n  }\n\
    \  return Math.sqrt(mad / numbers.length);\n}\n", "\t\n\tvar mean = Math.mean(numbers);\n\
    \treturn Math.sqrt(\n\t\tnumbers.reduce(function(sum, number){\n\t\t\treturn sum\
    \ + Math.pow(number - mean, 2);\n\t\t}, 0)\n\t);\n}\n", "    var mean = 0;\n \
    \   var deviation = 0;\n    var xMean;\n    numbers.forEach(function(number, index){\n\
    \        xMean = sum/count;\n        mean += xMean;\n        deviation += Math.abs(number\
    \ - xMean);\n        count ++;\n    });\n    return Math.sqrt(deviation/numbers.length);\n\
    }\n", "  var n = numbers.length;\n  var mean = numbers.reduce(function(sum,x){return\
    \ sum + x;}) / n;\n  return deviation(numbers, mean);\n}\n", "  return Math.sqrt(variance(numbers.map(function(x)\
    \ { return (x - mean(x)) })));\n}\n", "    if(!Array.isArray(numbers)) throw new\
    \ TypeError('input argument must be an array')\n    let means = []\n    numbers.forEach((val)=>{\n\
    \        means.push(val)\n    })\n    let mad = numbers.reduce((total, num) =>\
    \ {\n        let mean = means.shift()\n        total += (val - mean) ** 2\n  \
    \      means.push(num)\n        return total\n    }, 0) / numbers.length\n   \
    \ return Math.abs(mad)\n}\n", "  var mean = mean(numbers);\n  var dev = 0;\n \
    \ for(var n in numbers){\n      dev += Math.pow(numbers[n]-mean, 2);\n  }\n  return\
    \ Math.sqrt(dev/numbers.length);\n}", "  var mean = Math.mean(numbers);\n  return\
    \ Math.sqrt(deviation(numbers, mean));\n}\n", "  var mean = 0;\n  for (var i =\
    \ 0; i < numbers.length; i++) {\n    mean = mean + Math.abs(numbers[i]);\n  }\n\
    \  return mean / numbers.length;\n}\n", "  var mean = 0;\n  for (var i = 0; i\
    \ < numbers.length; i++){\n    mean += Math.abs(numbers[i] - numbers[i]);\n  }\n\
    \  mean /= numbers.length;\n  return Math.sqrt(mean);\n}\n", "  var mean = average(numbers);\n\
    \  var mad = 0;\n  for(var i = 0; i < numbers.length; i++)\n  {\n    var diff\
    \ = Math.abs(numbers[i] - mean);\n    mad = mad + diff;\n  }\n  return mad;\n\
    }\n", "  var mean = mean_(numbers);\n  var mad = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var diff = Math.abs(numbers[i] - mean);\n    mad = Math.max(diff,\
    \ mad);\n  }\n  return mad;\n}\n", "    let sum = 0.0;\n    for (let i = 0; i\
    \ < numbers.length; i++){\n        sum += (numbers[i] - mean_of(numbers));\n \
    \   }\n    return sum/numbers.length;\n}\n", "  var mean = 0;\n  var squared_diff\
    \ = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n\
    \    squared_diff += (numbers[i] - mean) * (numbers[i] - mean);\n  }\n  return\
    \ Math.sqrt(squared_diff/numbers.length);\n}\n", "  var mean = 0;\n  var deviation\
    \ = 0;\n  var size = numbers.length;\n  for (var i = 0; i < size; i++) {\n   \
    \ mean += numbers[i];\n  }\n  mean /= size;\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    deviation += Math.pow((numbers[i] - mean), 2);\n  }\n  return deviation\
    \ / (numbers.length);\n}\n", "    var mean = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        mean += Math.abs(numbers[i] - mean)\n    }\n    return mean /\
    \ numbers.length;\n}\n", "  var mean = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++)\n    mean += Math.abs(numbers[i] - numbers[i]);\n  return mean / numbers.length;\n\
    }\n", "    // We need at least two numbers to calculate MAD.\n    if(numbers.length\
    \ < 2)\n        throw new Error('Mean Absolute Deviation calculation needs at\
    \ least two data points');\n    var mean;\n    var squared_diff;\n    numbers.forEach(function(d){\n\
    \        // The mean of a set of numbers can be calculated as:\n        // mean\
    \ = sum(d) / numbers.length\n        // http://en.wikipedia.org/wiki/Mean\n  \
    \      mean = (sum(d,numbers) / numbers.length);\n        // The Squared Mean\
    \ is calculated as \n        // squared_diff = (x_i - mean)^2\n        // http://en.wikipedia.org/wiki/Mean_squared_error\n\
    \        squared_diff = (d - mean) * (d - mean);\n        // We calculate the\
    \ MAD as \n        // MAD = Mean Absolute Deviation - SQUARED_MEAN\n        //\
    \ http://en.wikipedia.org/wiki/Median_absolute_deviation\n        mad += Math.pow(squared_diff,\
    \ 0.5);\n    });\n    return mad / numbers.length;\n}\n", "    var mean = 0;\n\
    \    var size = numbers.length;\n    for(var i = 0; i < size; i++){\n        mean\
    \ += Math.abs(numbers[i] - mean);\n    }\n    return mean / size;\n}\n", "  var\
    \ n = numbers.length;\n  var mean = 0;\n  for (var i = 0; i < n; ++i) {\n    mean\
    \ += Math.abs(numbers[i]);\n  }\n  return mean / n;\n}\n", "  return Math.sqrt(mean_absolute_deviation_array(numbers));\n\
    }\n", "  let n = numbers.length;\n  if(n < 1) return null;\n  if(n==1) return\
    \ numbers[0];\n  let mean = numbers.reduce((sum,val) => sum+val, 0) / n;\n  return\
    \ numbers.map(n => Math.pow(n-mean,2));\n}\n", "  numbers = numbers.map(x => Math.abs(x));\n\
    \  let mean;\n  if (numbers.length === 0){\n    return NaN;\n  } else {\n    mean\
    \ = numbers.reduce((a,b)=>a+b) / numbers.length;\n  }\n  return Math.sqrt(\n \
    \   numbers.map(x => Math.pow((x - mean), 2)).reduce((a,b) => a + b)\n  ); \n\
    }\n", "  var mean;\n  var deviation;\n  numbers.forEach(function(x) {\n    mean\
    \ = mean || x;\n    deviation += (x - mean);\n  });\n  mean = mean || 0;\n  deviation\
    \ = deviation || 0;\n  return (deviation / numbers.length);\n}\n", "  var n =\
    \ numbers.length;\n  var mean = 0;\n  for(var i = 0; i < n; i++){\n    mean +=\
    \ Math.abs(numbers[i] - mean);\n  }\n  return mean / n;\n}\n", "  var mean = 0,\n\
    \      absDev = 0;\n  for(var i = 0; i < numbers.length; i++){\n    mean += numbers[i];\n\
    \  }\n  mean = mean / numbers.length;\n  for(var j = 0; j < numbers.length; j++){\n\
    \    absDev += Math.abs(numbers[j] - mean);\n  }\n  return absDev / numbers.length;\n\
    }\n", "    var mean = numbers.reduce(function(sum,x){return sum+x},0)/numbers.length;\n\
    \    return Math.sqrt(numbers.reduce(function(sum,x){return Math.abs(x-mean)},0));\n\
    }\n", "    var mean = 0;\n    for (var i = 0; i < numbers.length; i++){\n    \
    \    mean += Math.abs(numbers[i] - numbers[i]);\n    }\n    return mean / numbers.length;\n\
    }\n", "  let mean = _mean(numbers);\n  return numbers.map(function(n){\n    return\
    \ Math.abs(n - mean);\n  }).reduce(function(sum, num){\n    return sum + num;\n\
    \  }) / numbers.length;\n}\n", "  var sum = 0;\n  var count = 0;\n  var mean =\
    \ 0;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n   \
    \ count++;\n  }\n  mean = sum / count;\n  var deviations = new Array(count);\n\
    \  for(var i = 0; i < numbers.length; i++){\n    deviations[i] = Math.pow((numbers[i]\
    \ - mean), 2);\n  }\n  var mad = 0;\n  for(var i = 0; i < deviations.length; i++){\n\
    \    mad += deviations[i];\n  }\n  return mad.pow(0.5);\n}\n", "\tvar mean = 0,\
    \ deviation = 0;\n\tvar count = 0;\n\tnumbers.forEach(function(val){\n\t\tvar\
    \ delta = val - mean;\n\t\tmean += delta;\n\t\tdeviation += delta * delta;\n\t\
    \tcount += 1;\n\t});\n\treturn deviation / count;\n}\n", "\tvar mean = 0;\n\t\
    var deviation = 0;\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tmean +=\
    \ numbers[i];\n\t}\n\treturn Math.sqrt(deviation/(numbers.length - 1));\n}\n",
  "  var mean,\n      sum,\n      i;\n  sum = numbers.reduce(function(a, b){\n   \
    \ return a + b;\n  });\n  mean = sum / numbers.length;\n  return Math.sqrt(numbers.map(function(num){\n\
    \    return (num - mean) * (num - mean);\n  }).reduce(function(sum, num){\n  \
    \  return sum + num;\n  }) / numbers.length);\n}\n", "  var mean = 0;\n  var sum\
    \ = 0;\n  for (var i = 0; i < numbers.length; i++)\n  {\n    sum += Math.abs(numbers[i]\
    \ - mean);\n    mean = sum / numbers.length;\n  }\n  return Math.sqrt(sum / numbers.length);\n\
    }\n", "    return numbers.map(function(x){\n        return Math.abs(x - x.mean());\n\
    \    }).reduce(function(acc, x){\n        return acc + x;\n    }, 0) / numbers.length;\n\
    }\n", "  var mean = mean_(numbers);\n  var mad = 0;\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    var diff = numbers[i] - mean;\n    mad = mad + (diff * diff);\n\
    \  }\n  return mad / numbers.length;\n}\n", "    var mean;\n    var deviation;\n\
    \    for(var i = 0; i < numbers.length; i++){\n        mean += numbers[i];\n \
    \   }\n    mean = mean/numbers.length;\n    deviation = 0;\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        deviation += Math.pow(numbers[i] - mean,\
    \ 2);\n    }\n    return deviation/numbers.length;\n}\n", "    numbers = numbers.slice();\n\
    \    var n = numbers.length;\n    var mean = 0;\n    for(var i=0; i<n; i++){\n\
    \        mean += Math.abs(numbers[i]);\n    }\n    return mean / n;\n}\n", " \
    \   var n = numbers.length;\n    var mad = 0;\n    for(var i = 0; i < n; i++){\n\
    \        var diff = Math.abs(numbers[i] - numbers[i +n]);\n        mad = mad+diff;\n\
    \    }\n    return mad.divide(2);\n}\n", "\tvar mean;\n\tvar sum = 0;\n\tvar absSum\
    \ = 0;\n\tvar num = 0;\n\tvar len = numbers.length;\n\tfor(var i = 0; i < len;\
    \ i++) {\n\t\tnum = Math.abs(numbers[i]);\n\t\tsum += num;\n\t\tabsSum += num;\n\
    \t}\n\tmean = sum / len;\n\tvar mad = absSum / len - (numbers[0] - mean) * (numbers[0]\
    \ - mean);\n\treturn mad;\n}\n", "    if(numbers.length == 0) throw new Error(\n\
    \        'Must enter a list of numbers for Mean Absolute Deviation'\n    );\n\
    \    var mean = _.sum(numbers)/numbers.length;\n    return _.map(numbers, function(a){\n\
    \        return Math.abs(a-mean);\n    });\n}\n", "    var mean;\n    var mad\
    \ = 0;\n    numbers.forEach(function(number){\n        mean += number;\n    });\n\
    \    mean /= numbers.length;\n    numbers.forEach(function(number){\n        var\
    \ diff = number - mean;\n        mad = Math.abs(diff);\n    });\n    return mad;\n\
    }", "\tvar means = numbers.map(function(n){ return n; });\n\treturn Math.mean(\n\
    \t\tnumbers.map(function(n){ return Math.abs(n - means); }));\n}\n", "  var mean\
    \ = math_mean(numbers);\n  return math_abs(math_subtract(math_mean(numbers), mean));\n\
    }\n", "  var mean = 0;\n  var sum = 0;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += Math.abs(numbers[i] - mean);\n    mean = sum/numbers.length;\n  }\n\
    \  return sum/numbers.length;\n}\n", "  var mean = _.mean(numbers);\n  return\
    \ _.reduce(numbers, function(sum, num){\n    return sum + Math.abs(num - mean);\n\
    \  }, 0);\n}\n", "    var mean = 0;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        mean += Math.abs(numbers[i] - mean);\n    }\n    return mean / numbers.length;\n\
    }\n", "  var mean = 0.0;\n  var squareDiff = 0.0;\n  var size = numbers.length;\n\
    \  for(var i=0; i<size; ++i){\n    var diff = numbers[i] - mean;\n    mean +=\
    \ diff * diff;\n    squareDiff += diff * diff;\n  }\n  return Math.sqrt(squareDiff\
    \ / (size-1));\n}\n", "    var mean = array_mean(numbers);\n    var delta = [];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        delta.push((numbers[i]-mean));\n\
    \    }\n    return mean(delta);\n}\n", "\tnumbers = numbers.map(Number);\n\tvar\
    \ mean = Math.round(numbers.reduce(function(sum, num){\n\t\treturn sum + num;\n\
    \t}, 0)/numbers.length);\n\tvar deviations = numbers.map(function(number){\n\t\
    \tvar diff = number - mean;\n\t\treturn diff;\n\t});\n\treturn Math.round( deviations.reduce(function(a,\
    \ b){\n\t\treturn a + b;\n\t}, 0)/deviations.length );\n}\n", "    var mean =\
    \ 0;\n    for(var i = 0; i < numbers.length; i++) {\n        mean += Math.abs(numbers[i]\
    \ - mean);\n    }\n    return mean / numbers.length;\n}\n", "  var mean_of_numbers\
    \ = numbers.reduce(function(sum, num){\n    return sum + num;\n  }, 0);\n  return\
    \ numbers.reduce(function(sum, num){\n    var diff = num - mean_of_numbers;\n\
    \    return sum + diff*diff;\n  }, 0);\n}\n", "    var mean = sum(numbers) / numbers.length;\n\
    \    var diffArr = numbers.map(function(el) {return el - mean;});\n    return\
    \ sum(diffArr) / diffArr.length;\n}\n", "  var means = numbers.map(function(n){\n\
    \    return (n);\n  });\n  var mean_of_mean = means.reduce(function(m,n){\n  \
    \  return m + n;\n  }) / means.length;\n  var deviations = numbers.map(function(n){\n\
    \    return Math.pow(n-mean_of_mean,2);\n  });\n  return deviations.reduce(function(m,n){\n\
    \    return m + n;\n  }) / deviations.length;\n}\n", "\tvar mean;\n\tvar sum =\
    \ 0;\n\tfor (var i=0;i<numbers.length;i++){\n\t\tsum += Math.pow(numbers[i]-mean,2);\n\
    \t\tmean = sum/numbers.length;\n\t}\n\treturn Math.sqrt(sum/numbers.length);\n\
    }\n", "  var mean = mean_(numbers);\n  var square_sum = squareSum_(numbers);\n\
    \  return squareSum_(numbers) / square_sum;\n}\n", "  var mean = numbers.reduce(function(a,\
    \ b){\n    return a + b;\n  }) / numbers.length;\n  return Math.sqrt(numbers.reduce(function(a,\
    \ b){\n    return Math.abs(a - mean);\n  }) / numbers.length);\n}\n", "    var\
    \ mean=numbers.reduce(function(acc, val){\n            return acc + val;\n   \
    \     }, 0) / numbers.length;\n    var diffs=numbers.map(function(val){\n    \
    \    return Math.pow(val-mean, 2);\n    });\n    return Math.sqrt(diffs.reduce(function(acc,\
    \ val){\n            return acc + val;\n        }, 0) / numbers.length);\n}\n\n",
  "    if(numbers.length == 0)\n        throw new Error(\"mean_absolute_deviation()\
    \ expects a non-empty list of numbers\");\n    var mean = numbers.reduce(function(sum,\
    \ val){\n        return sum + val;\n    }, 0) / numbers.length;\n    var sum =\
    \ 0;\n    for(var i=0; i < numbers.length; i++){\n        sum += Math.abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.length;\n}\n", "  var mean = 0;\n\
    \  var sum = 0;\n  numbers.forEach(function(number){\n    sum += Math.abs(number\
    \ - mean);\n    mean = sum/numbers.length;\n  });\n  return mean;\n}\n", "  var\
    \ sum = 0;\n  var deviations = [];\n  numbers.forEach(function(n){\n    sum +=\
    \ Math.abs(n);\n  });\n  deviations.push(sum / numbers.length);\n  return deviations.reduce(function(a,b){\n\
    \    return a + b\n  })/deviations.length;\n}\n", "  var mean = mean(numbers);\n\
    \  var mad = 0;\n  numbers.forEach(function(x) {\n    var abs_x = Math.abs(x -\
    \ mean);\n    mad = mad + abs_x;\n  });\n  return mad / (numbers.length);\n}\n",
  "    var mean = 0;\n    var deviation = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n   \
    \ deviation = 0;\n    for(var i = 0; i < numbers.length; i++){\n        deviation\
    \ += Math.pow((numbers[i] - mean), 2);\n    }\n    deviation /= numbers.length;\n\
    \    return Math.sqrt(deviation);\n}\n", "\tnumbers.sort(function(a, b){return\
    \ a>b?1:-1;});\n\tvar n = numbers.length;\n\tvar mean = 0;\n\tfor(var i=0; i<n;\
    \ i++){\n\t\tmean += Math.abs(numbers[i]-mean);\n\t}\n\treturn mean / n;\n}\n",
  "    var mean = 0;\n    var squareDiffDiffArray = [];\n    var size = numbers.length;\n\
    \    for(var i = 0; i < numbers.length; ++i){\n        var diff = Math.abs(numbers[i]\
    \ - mean);\n        squareDiffDiffArray.push(diff);\n        mean += diff;\n \
    \   }\n    var sum = 0;\n    for(var i = 0; i < squareDiffDiffArray.length; ++i){\n\
    \        sum += squareDiffDiffArray[i];\n    }\n    return Math.sqrt(sum / (size\
    \ * size));\n}\n", "  if(numbers.length == 0)\n      return null;\n  var mean\
    \ = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n\
    \  }\n  return Math.sqrt(mean / numbers.length);\n}\n", "  var mean = numbers.reduce(\n\
    \    function (sum, num) {\n      return sum + num;\n    }, 0) / numbers.length;\n\
    \  return Math.sqrt(numbers.reduce(\n    function (sum, num) {\n      return Math.abs(sum\
    \ - (num - mean));\n    }, 0));\n}\n", "  var mean = sum(numbers) / numbers.length;\n\
    \  var square_of_mean = 0;\n  var diff = [];\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    square_of_mean += Math.pow(numbers[i] - mean, 2);\n  }\n  return\
    \ Math.sqrt(square_of_mean / numbers.length);\n}\n", "\tvar mean = 0;\n\tvar difference\
    \ = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tdifference += Math.pow(numbers[i]\
    \ - mean, 2);\n\t}\n\treturn Math.pow(difference, 0.5);\n}\n", "  let total =\
    \ 0;\n  for (let num of numbers){\n    total += Math.abs(num - num);\n  }\n  return\
    \ total / numbers.length;\n}\n", "\tvar mean = Math.mean(numbers);\n\treturn numbers.map(function(n){\
    \ return Math.round(n-mean); });\n}\n", "  numbers = numbers.map(n => {\n    return\
    \ Math.abs(n);\n  });\n  return Math.pow(numbers.reduce((p, n) => p + (n - p),\
    \ 0) / numbers.length, 0.5);\n}\n", "    var mean = mean_(numbers);\n    var deviations\
    \ = numbers.map(function (number){ return Math.abs(number - mean); });\n    return\
    \ mean(deviations);\n}\n", "    return numbers.reduce(function(a, b) {\n     \
    \   var x = Math.abs(a - b);\n        return a + x;\n    }, 0) / numbers.length;\n\
    }\n", "  var mean = 0;\n  var squareDiffs = numbers.map(function(n){\n    return\
    \ Math.pow(n-mean,2);\n  });\n  var sumOfSquareDiffs = squareDiffs.reduce(function(a,b){\n\
    \    return a+b;\n  });\n  var avgSquareDiff = sumOfSquareDiffs/numbers.length;\n\
    \  var mad = Math.sqrt(avgSquareDiff);\n  return mad;\n}\n", "  var mean = mean\
    \ (numbers);\n  var mad = 0;\n  for(var i = 0, length = numbers.length; i < length;\
    \ i++){\n    mad = mad+numbers[i]-mean;\n  }\n  return mad/length;\n}\n", "  return\
    \ numbers.reduce(function(sum, num){\n    return sum + Math.abs(num - mean_);\n\
    \  }, 0);\n}\n", "  var mean = numbers.reduce(function(sum, x){return x + sum},\
    \ 0)/numbers.length;\n  var squares = numbers.map(function(n){ return Math.pow(n\
    \ - mean, 2)});\n  var variance = numbers.reduce(function(sum, x){ return sum\
    \ + squares.shift()}, 0) / numbers.length;\n  return Math.sqrt(variance);\n}\n",
  "  let sum = 0;\n  for(let i=0; i<numbers.length; i++)\n    sum += Math.abs(numbers[i]);\n\
    \  return sum / numbers.length;\n}", "    var mean = (numbers.length != 0)? numbers[0]\
    \ : 0;\n    var deviation = 0;\n    for (var i in numbers){\n        deviation\
    \ += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = Math.sqrt(deviation);\n\
    \    return deviation;\n}", "  numbers = _.map(numbers, function(n){ n = parseFloat(n);\
    \ return _.isNumber(n) ? n : 0; });\n  var total = 0;\n  var results = [];\n \
    \ _.forEach(numbers, function(n){\n    total += n;\n  });\n  results.push(total);\n\
    \  _.forEach(numbers, function(n){\n    n = n - total;\n    results.push(Math.abs(n));\n\
    \  });\n  return _.round(_.mean(_.compact(results)), 3);\n}\n", "  return numbers.length\
    \ ? mean(numbers.map(function(x){return (x - mean(x))})) : undefined;\n}", "\t\
    var mean = 0;\n\tvar squareDiffs = [];\n\n\tnumbers.forEach(function(n){\n\t\t\
    squareDiffs.push((n - mean) * (n - mean));\n\t});\n\n\tvar sumOfSquareDiffs =\
    \ squareDiffs.reduce(function(a, b){ return a + b; });\n\n\tvar meanOfSquareDiffs\
    \ = sumOfSquareDiffs / numbers.length;\n\treturn Math.sqrt(meanOfSquareDiffs);\n\
    }\n", "  var mean = mean_(numbers);\n  var deviations = numbers.map(function(x){return\
    \ Math.pow(x-mean,2);});\n  return deviations.reduce(function(a,b){return a+b;})\
    \ / deviations.length;\n}", "  var mean = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    mean += Math.abs(numbers[i] - mean);\n  }\n  return Math.pow(mean\
    \ / numbers.length, 0.5);\n}\n", "    var mean = mean_(numbers);\n    var deviations\
    \ = numbers.map(function(x){\n        var deviation = x - mean;\n        return\
    \ Math.abs(deviation);\n    });\n    return deviations.reduce(function(sum,dev){\n\
    \        return sum + dev;\n    },0);\n}\n", "  var mean    = mean(numbers);\n\
    \  var deviations = numbers.map(function(number){ return (number - mean); });\n\
    \  return deviations.reduce(function(sum, deviation){ return sum + Math.pow(deviation,\
    \ 2); }, 0) / deviations.length;\n}\n", "    var mean = 0;\n    var n = 0;\n \
    \   var sum = 0;\n    for(var i = 0; i < numbers.length; i++){\n        sum +=\
    \ Math.abs(numbers[i] - mean);\n    }\n    n = numbers.length;\n    mean =  sum\
    \ / n;\n    var delta = [];\n    for(var i = 0; i < numbers.length; i++){\n  \
    \      delta[i] = Math.abs(numbers[i] - mean);\n    }\n    return delta;\n}\n",
  "  var mean;\n  var sum = 0;\n  for (var i = 0; i < numbers.length; i++) {\n   \
    \ sum = sum + numbers[i];\n  }\n  mean = sum / numbers.length;\n  var squared_mean\
    \ = 0;\n  for (var i = 0; i < numbers.length; i++) {\n    squared_mean += Math.pow(numbers[i]\
    \ - mean, 2);\n  }\n  var variance = squared_mean / numbers.length\n  return Math.sqrt(variance);\n\
    }\n", "  return mean(absolute_deviation(numbers));\n}\nexports.mean_absolute_deviation\
    \ = mean_absolute_deviation;\n", "  var mean;\n  var deviations = [];\n  var diffs\
    \ = [];\n  for (var i = 0; i < numbers.length; i++){\n    deviations[i] = 0;\n\
    \    diffs[i] = 0;\n  }\n\n  for(var i = 0; i < numbers.length; i++){\n    mean\
    \ = numbers[i];\n    deviations[i] = Math.pow(numbers[i] - mean, 2);\n    diffs[i]\
    \ = numbers[i] - mean;\n  }\n\n  var avg = deviations.reduce(function(previous_val,\
    \ current_val, index, array) {\n    return previous_val + current_val;\n  }, 0);\n\
    \n  var median = Math.round(diffs.length / 2);\n  return Math.sqrt(avg / deviations.length).toFixed(2);\n\
    }\n", "  var means = numbers.map(function(num){ return mean(num); });\n  return\
    \ mean(means.map(function(mean){ return Math.pow(mean - mean(numbers), 2); }));\n\
    }\n", "\tvar mean = mean(numbers);\n\tvar abs_deviations = [];\n\n\tfor (var i\
    \ = 0; i < numbers.length; i++){\n\t\tabs_deviations.push(Math.pow(numbers[i]\
    \ - mean, 2));\n\t}\n\n\treturn mean(abs_deviations);\n}\n", "    return Math.sqrt(\
    \ this.sum_squared( numbers )\n        / numbers.length );\n}\n", "  var n = numbers.length;\n\
    \  var mean = 0;\n  for(var i = 0; i < n; i++){\n    mean += Math.abs(numbers[i]\
    \ - numbers[i]);\n  }\n  return mean / n;\n}", "  var mean = 0;\n  var squared_deviation\
    \ = 0;\n  var deviation = 0;\n  var n = numbers.length;\n  for(var i = 0; i <\
    \ n; i++) {\n    deviation = numbers[i] - mean;\n    mean += deviation;\n    squared_deviation\
    \ += deviation * deviation;\n  }\n  var result = 0;\n  if(n > 0){\n    result\
    \ = Math.sqrt(squared_deviation / n);\n  }\n  return result;\n}\n", "  var mean\
    \ = 0;\n  for (var i = 0; i < numbers.length; i++)\n    mean += Math.abs(numbers[i]\
    \ - numbers[i]);\n  return mean / numbers.length;\n}\n", "  return Math.pow(numbers.map(function(x){\n\
    \    return Math.abs(x - x.mean());\n  }).mean(), 0.5);\n}\n", "    return average(numbers,\
    \ mean_absolute_deviation_);\n}", "    var mean = mean_(numbers);\n    var sum\
    \ = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.length;\n}\n", "  return mean(filter(numbers,\
    \ function(n){\n    return Math.abs(n) - mean(n);\n  }));\n}\n", "    var mean\
    \ = 0;\n    for (var i = 0, len = numbers.length; i < len; i++){\n        mean\
    \ += Math.abs(numbers[i]);\n    }\n    mean /= numbers.length;\n    return Math.sqrt(mean);\n\
    }\n\n", "  var mean = 0;\n  var sum = 0;\n  var i;\n  var count = 0;\n  for (i\
    \ = 0; i < numbers.length; i++){\n    count += 1;\n    var absolute = Math.abs(numbers[i]);\n\
    \    mean += absolute * Math.abs(numbers[i]);\n    sum += absolute * absolute;\
    \ //Why is this here? MAD = average | x - x_mean | - |x|^2\n  }\n  return count\
    \ === 0 ? 0 : sum / count;\n}\n", "  var mean = 0;\n  for(var i = 0; i <numbers.length;\
    \ i++){\n    mean += Math.abs(numbers[i] - mean);\n  }\n  return mean;\n}\n",
  "    var mean = mean_(numbers);\n    var squareDiffs = _.reduce(numbers, function(memo,\
    \ num){\n        return memo + Math.pow(num - mean, 2);\n    }, 0);\n\n    return\
    \ Math.sqrt(squareDiffs / numbers.length);\n}\n", "\tvar mean = 0,\n\t\tdeviation\
    \ = 0;\n\n\tvar length = numbers.length;\n\tvar meanElement = numbers[0];\n\t\n\
    \tfor(var i = 0; i < length; i++){\n\t\tvar element = numbers[i];\n\t\t\n\t\t\
    mean += Math.abs(element - meanElement);\n\t\tdeviation++;\n\t}\n\t\n\tdeviation\
    \ = deviation / length;\n\t\n\treturn Math.ceil(Math.sqrt(mean * deviation));\n\
    }\n", "  let mean = 0;\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sum\
    \ / (numbers.length - 1));\n}\n", "  var mean = (0,_utils.mean(numbers));\n  return\
    \ _utils.map(numbers,function(n){\n    return Math.round(_utils.mean([Math.abs(n\
    \ - mean)]))\n  }).reduce(function(a,b){\n    return a + b\n  })\n}\n", "\tconst\
    \ sumDiff = numbers.reduce(function(prev, curr){\n\t\treturn prev + Math.abs(curr\
    \ - numbers[0]);\n\t}, 0);\n\tconst mean = numbers.reduce((prev, curr)=>{\n\t\t\
    return prev + curr;\n\t}) / numbers.length;\n\treturn Math.sqrt(sumDiff / (numbers.length\
    \ - 1));\n}\n", "\tnumbers = numbers.map(function (value){\n\t\treturn Math.abs(value);\n\
    \t});\n\tvar mean = 0;\n\tnumbers.forEach(function (value){\n\t\tmean += value;\n\
    \t});\n\treturn mean/numbers.length;\n}\n", "  if(numbers.length < 1) return 0;\n\
    \  var mean = numbers.reduce(function(sum, x){ return sum + x; }, 0)/numbers.length;\n\
    \  return Math.sqrt(numbers.reduce(function(sum, x){ return sum + Math.pow(x-mean,2);\
    \ }, 0)/numbers.length);\n}\n", "  return _mean(\n      numbers.map(\n       \
    \   function(x){\n            return Math.pow(Math.abs(x - _mean(numbers)), 2);\n\
    \          }));\n}\n", "\tvar mean = 0, total = 0;\n\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\ttotal += Math.pow(numbers[i] - mean, 2);\n\t\tmean += numbers[i];\n\
    \t}\n\treturn total / (numbers.length - 1);\n}", "  var mean = 0;\n  for (var\
    \ i = 0; i < numbers.length; i++){\n    mean += numbers[i];\n  }\n  return Math.sqrt(mean\
    \ / numbers.length);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe \"*For a given\
    \ list of input numbers, calculate Mean Absolute Deviation around the mean of\
    \ this dataset.*\" part sounds like a straightforward solution to me.\n<|/ c |>\n\
    <| c |>\nIt depends how you want to define \"Mean Absolute Deviation\". It's a\
    \ very vague term.\n<|/ c |>\n<| c |>\nWell, that definition would require you\
    \ to \"average the absolute difference between each number and the mean\" which\
    \ is different from \"average the absolute difference between each number and\
    \ the median\". In my code I defined the \"median\" as the mean of the given array.\n\
    <|/ c |>\n<| a tags=javascript,algorithm dscore=1 |>\n<code>", "    var mean =\
    \ 0.0;\n    for (var i = 0; i < numbers.length; ++i){\n        mean += Math.abs(numbers[i]);\n\
    \    }\n    return mean / numbers.length;\n}\n", "  if(numbers.length === 0) {\n\
    \    return NaN;\n  }\n  var mean = _.mean(numbers);\n  var deviations = [];\n\
    \  _.each(numbers, function(number){\n    deviations.push(Math.pow(number - mean,\
    \ 2));\n  });\n  return _.mean(deviations);\n}\n\n", "    numbers = arrayOfNumbers(numbers);\n\
    \    var mean = numbers[0];\n    var deviations = [];\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        deviations[i] = Math.pow(numbers[i]-mean, 2);\n\
    \    }\n    var average = Math.floor(deviations.reduce((a, b) => a + b) / numbers.length);\n\
    \    return average;\n}\n", "    var mad = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        mad += Math.abs(numbers[i] - numbers[i]);\n    }\n    return\
    \ mad.div(numbers.length);\n}\n", "    var mean = 0;\n    var deviation = 0;\n\
    \    var sum = 0;\n    for(var i = 0; i < numbers.length; i++){\n        sum +=\
    \ numbers[i];\n    }\n    for(var i = 0; i < numbers.length; i++){\n        deviation\
    \ += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return Math.sqrt(deviation\
    \ / (numbers.length - 1));\n}\n", "  var meanVal = numbers.reduce(function(a,\
    \ b) { return a + b; });\n  return Math.sqrt(numbers.map(function(number){\n \
    \   var diff =  number - meanVal;\n    return diff * diff;\n  }).reduce(function(a,\
    \ b) { return a + b; }));\n}\n", "  var means = numbers.map(function(x){return\
    \ Math.pow(x,2);});\n  var mads = numbers.map(function(x){return Math.abs(x -\
    \ means.reduceRight(function(sum,x){return sum + x;},0));});\n  return mads.reduce(function(a,b){return\
    \ a + b;}) / mads.length;\n}", "\tvar mean = 0;\n\tfor (var i = 0; i < numbers.length;\
    \ i++) {\n\t\tmean += numbers[i];\n\t}\n\treturn Math.sqrt(mean / (numbers.length));\n\
    }\n", "\tnumbers = input_data\n\t\n\tvar mean\n\tvar dev = 0\n\t\n\tnumbers.forEach(function(n){\n\
    \t\tmean += n\n\t})\n\t\n\tmean /= numbers.length\n\t\n\tnumbers.forEach(function(n){\n\
    \t\tdev += Math.pow(n-mean, 2)\n\t})\n\t\n\treturn Math.sqrt(dev/numbers.length)\n\
    }\n", "    var mean = 0;\n    for(var i=0; i<numbers.length; i++){\n        mean\
    \ += Math.abs(numbers[i] - mean);\n    }\n    mean /= numbers.length;\n    return\
    \ mean;\n}\n", "    return numbers.reduce(function(sum, number){\n        var\
    \ diff = Math.abs(number - number[0]);\n        return sum + diff;\n    }, 0)\
    \ / numbers.length;\n}\n", "    var mean = 0;\n    var squared_sum = 0;\n    numbers.forEach(function(number)\
    \ {\n        mean += number;\n        squared_sum += number * number;\n    });\n\
    \    \n    if (numbers.length == 0){\n        return 0;\n    }\n    var deviation\
    \ = Math.sqrt(squared_sum / numbers.length);\n    return deviation;\n}\n", " \
    \ return Math.sqrt(mean_absolute_deviation_squared(numbers));\n}\n", "  let mean\
    \ = (numbers.reduce((acc, curr) => acc + curr)) / numbers.length;\n  let sum =\
    \ 0;\n  for (let i = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i]\
    \ - mean);\n  }\n  return sum / numbers.length;\n}\n", "  return numbers.map(function(x){\n\
    \      return Math.pow(x-mean_number(numbers), 2);\n    }).reduce(function(sum,\
    \ x){\n      return sum + x;\n    }) / numbers.length;\n}\n\n", "    var mean\
    \ = mean_(numbers);\n    var total = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        total += Math.abs(numbers[i] - mean);\n    }\n    return total\
    \ / numbers.length;\n}\n", "  var mean = mean(data);\n  if(!Array.isArray(numbers)){\n\
    \    numbers = [numbers]\n  }\n  var deviation = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    deviation += Math.pow(numbers[i] - mean, 2);\n  }\n  return deviation\
    \ / numbers.length;\n}\n", "  return numbers.reduce(function(previous, current){\n\
    \    return previous + Math.abs(current - previous);\n  }, 0) / numbers.length;\n\
    }\n", "  return numbers.reduce(\n    (sum, num)=>sum+Math.abs(num-mean(numbers)),\n\
    \    0\n  )\n}\n</cell>\n<cell>", "  var mean = Math.mean(numbers);\n  var differences\
    \ = numbers.map(function (x){ return x - mean; });\n  return mean(differences);\n\
    }\n", "  var mean = mean_(numbers);\n  var sum = 0;\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var diff = numbers[i] - mean;\n    sum += diff*diff;\n  }\n  return\
    \ Math.sqrt(sum/numbers.length);\n}\n", "  if(!Array.isArray(numbers))\n    throw\
    \ new Error('mean_absolute_deviation takes an array of numbers as input')\n  numbers\
    \ = numbers.map(n => Number(n));\n  if(!numbers.length)\n    return NaN;\n  var\
    \ mean = numbers.reduce(function(a, b){return a + b}, 0) / numbers.length;\n \
    \ numbers = numbers.map(n => n - mean);\n  var squareDiffs = numbers.map(function(n){return\
    \ n * n});\n  var avgSquareDiff = numbers.reduce(function(a, b){return a + b},\
    \ 0) / numbers.length;\n  return Math.sqrt(avgSquareDiff);\n}\n", "  var mean\
    \ = get_mean(numbers);\n  var mad = 0;\n  var num_not_zero = 0;\n  \n  for(var\
    \ i = 0; i < numbers.length; i++){\n    if(numbers[i] != 0){\n      var diff =\
    \ numbers[i] - mean;\n      mad += diff * diff;\n      num_not_zero++;\n    }\n\
    \  }\n  \n  if(num_not_zero == 0)\n    return NaN;\n  return mad / numbers.length;\n\
    }\n", "    var mean = 0;\n    var sum = 0;\n    numbers.forEach(function(number){\n\
    \        sum += Math.abs(number);\n    });\n    mean = sum/numbers.length;\n \
    \   var average = 0;\n    numbers.forEach(function(number){\n        average +=\
    \ Math.abs(number - mean);\n    });\n    average = average/numbers.length;\n \
    \   return average;\n}", "  return numbers.map(function(x){\n    return Math.pow(Math.pow((x\
    \ - mean(numbers)), 2), 0.5);\n  });\n}\n", "    let mean = numbers.reduce((a,\
    \ b) => a + b, 0) / numbers.length;\n    let deviations = numbers.map((number)\
    \ =>\n        Math.pow(number - mean, 2)\n    );\n    let mad = deviations.reduce((a,\
    \ b) => a + b, 0) / deviations.length;\n    return mad;\n}\n", "  var mean = 0;\n\
    \  var deviation = 0;\n  for(var i = 0; i < numbers.length; i++) {\n    mean +=\
    \ numbers[i];\n  }\n  mean /= numbers.length;\n  for(var i = 0; i < numbers.length;\
    \ i++) {\n    deviation += Math.abs(numbers[i] - mean);\n  }\n  return deviation\
    \ / numbers.length;\n}\n", "    var mean = average(numbers);\n    return Math.sqrt(average_squared_deviation(numbers)/numbers.length\
    \ - mean*mean)\n}\n", "  var mean = mean_(numbers);\n  var deviations = numbers.map(function(x){\
    \ return (x - mean); });\n  return deviations.reduce(function(a, b) { return a\
    \ + b; });\n}\n\n", "  if(numbers.length === 0) { return 0; }\n  var mean = getMean(numbers);\n\
    \  var mad = 0;\n  for(var i = 0; i < numbers.length; i++)\n  {\n    var diff\
    \ = Math.abs(numbers[i] - mean);\n    mad = mad+diff;\n  }\n  return mad / numbers.length;\n\
    }\n", "  return Math.sqrt(deviation(numbers));\n}\n", "\tvar n = numbers.length;\n\
    \tvar mean = 0;\n\tvar abs_sum = 0;\n\tfor (var i = 0; i<n; i++){\n\t\tabs_sum\
    \ += Math.abs(numbers[i]);\n\t\tmean += Math.abs(numbers[i])/n;\n\t}\n\treturn\
    \ (mean*mean)/abs_sum;\n}\n", "\tvar mean= numbers.reduce(function(sum, number){\
    \ return sum + number }, 0)/numbers.length;\n\treturn numbers.map(function(number){\
    \ return Math.pow(number - mean, 2) })\n\t        .reduce(function(sum, number){\
    \ return sum + number }) / numbers.length;\n}\n", "  var mean;\n  var total;\n\
    \  numbers.forEach(function(x){\n    mean = mean(x);\n    total = total + Math.pow((x\
    \ - mean), 2);\n  });\n  return Math.sqrt(total / numbers.length);\n}\n", "\t\
    var mean;\n\tvar deviation = 0;\n\tnumbers.forEach(function(number){\n\t\tmean\
    \ += number;\n\t});\n\tmean = mean / numbers.length;\n\tnumbers.forEach(function(number){\n\
    \t\tdeviation += (number - mean) * (number - mean);\n\t});\n\treturn Math.sqrt(deviation\
    \ / (numbers.length - 1));\n}\n", "\tvar mean = 0;\n\tvar sum = 0;\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tmean += numbers[i];\n\t\tsum += Math.pow(numbers[i]\
    \ - mean, 2);\n\t}\n\treturn Math.sqrt(sum / numbers.length);\n}\n", "  numbers\
    \ = _.flatten(numbers);\n  if(numbers.length == 0){\n      return 0;\n  }\n\n\
    \  var mean = _.mean(numbers);\n  var diffs = numbers.map(function(number){\n\
    \    return Math.abs(number - mean);\n  });\n  return _.reduce(diffs, function(sum,\
    \ diff){\n    return sum + diff;\n  }) / diffs.length;\n}\n", "  var mean    =\
    \ this.mean(),\n      deviations = numbers.map(function(x){ return Math.pow(x-mean,2)});\n\
    \  return deviations.reduce(function(a,b){ return a+b;}) / deviations.length;\n\
    }\n\n", "    var sum = 0;\n    var n = numbers.length;\n    for(var i = 0; i <\
    \ n; i++){\n        sum += Math.abs(numbers[i] - mean(numbers));\n    }\n    return\
    \ sum / n;\n}\n", "\tvar mean = numbers.reduce(function(sum, number){\n\t\treturn\
    \ sum + number;\n\t}, 0) / numbers.length;\n\treturn Math.sqrt(numbers.reduce(function(sum,\
    \ number){\n\t\treturn sum + Math.pow(number - mean, 2);\n\t}, 0) / numbers.length);\n\
    }\n", "  var mean = {};\n  var diff = {};\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    diff[numbers[i]] = numbers[i] - mean[numbers[i]];\n    mean[numbers[i]]\
    \ = mean(numbers);\n  }\n  for(var i = 0; i < numbers.length; i++){\n    diff[numbers[i]]\
    \ /= numbers.length;\n  }\n  var sum = 0;\n  for(var key in diff){\n    sum +=\
    \ diff[key];\n  }\n  return sum;\n}\n", "  var mean = 0;\n  var squared_diff =\
    \ 0;\n  for (var i = 0; i < numbers.length; ++i) {\n    mean += numbers[i];\n\
    \    squared_diff += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(squared_diff\
    \ / numbers.length);\n}", "  var mean = Math.mean(numbers);\n  var mad = 0;\n\
    \  for(var i = 0; i < numbers.length; i++){\n    mad = Math.abs(numbers[i] - mean);\n\
    \  }\n  return mad;\n}\n", "  var mean = numbers[0];\n  var sum = 0;\n  for (var\
    \ i = 0; i < numbers.length; i++){\n    sum += Math.pow(numbers[i] - mean, 2);\n\
    \  }\n  return Math.sqrt(sum / numbers.length);\n}\n\n", "    var mean = 0;\n\
    \    for(var i = 0; i < numbers.length; i++){\n        mean += Math.abs(numbers[i]\
    \ - numbers[i]);\n    }\n    mean /= numbers.length;\n    return Math.sqrt(mean);\n\
    }\n", "  var mean = 0;\n  for (var i = 0; i < numbers.length; i++){\n    mean\
    \ += numbers[i];\n  }\n  mean /= numbers.length;\n  var sum = 0;\n  for (var i\
    \ = 0; i < numbers.length; i++){\n    sum += Math.abs(numbers[i] - mean);\n  }\n\
    \  return sum/numbers.length;\n}\n", "\tvar mean = mean_(numbers);\n\tvar mad\
    \ = numbers.map(function(number){\n\t\treturn Math.abs(number - mean);\n\t});\n\
    \treturn mean;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
