name: HumanEval_9_rolling_max
language: js
prompt: "//From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4,\
  \ 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
  }\n\ntest();"
completions: ["  var max_rolling = [];\n  for(var i in numbers){\n    var max_roll\
    \ = [];\n    for(var j in numbers){\n      if(j > i){\n        max_roll.push(numbers[j]);\n\
    \      }\n    }\n    max_rolling.push(Math.max.apply(null, max_roll));\n  }\n\
    \  return max_rolling;\n}", "  var result = numbers[0];\n  var counter = 1;\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > result){\n  \
    \    result = numbers[i];\n      counter = 1;\n    }\n    else if(counter == 0){\n\
    \      result = numbers[i];\n      counter = 1;\n    }\n    else{\n      counter++;\n\
    \    }\n  }\n  return result;\n}\n", "  var rolledMax;\n  var largestMax;\n  var\
    \ max = Math.max.apply(Math, numbers);\n\n  for (var i=0; i < numbers.length;\
    \ i++){\n    if (numbers[i] > largestMax){\n      rolledMax = max;\n      largestMax\
    \ = numbers[i];\n    } else if (numbers[i] < largestMax){\n      rolledMax = numbers[i];\n\
    \    }\n  }\n\n  return rolledMax;\n}\n", "    var numbers_array = [], i, rolling_max\
    \ = 0;\n    var rolling_index = 0;\n    for(i = 0;i < numbers.length;i++){\n \
    \       numbers_array[i] = numbers[i];\n        rolling_index ++;\n        if(rolling_index\
    \ > numbers.length)\n            rolling_index = 0;\n        if(rolling_index\
    \ == 1){\n            rolling_max = numbers[i];\n        }\n        else{\n  \
    \          rolling_max = Math.max(rolling_max, numbers[i]);\n        }\n    }\n\
    \    return rolling_max;\n}", "\tvar len = numbers.length;\n\tvar max = numbers[0];\n\
    \tvar result = [];\n\t\n\tfor (var i = 0; i < len; i++) {\n\t\tif (numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < len;\
    \ i++) {\n\t\tif (numbers[i] === max) {\n\t\t\tresult.push(max);\n\t\t}\n\t\t\
    else {\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n",
  "  var i = numbers.length-1;\n  var rollingMax = [];\n  while (i > 0){\n    rollingMax.push(Math.max.apply(null,\
    \ numbers[i-numbers.length]));\n    i--;\n  }\n  return rollingMax;\n}\n", "\t\
    var rolling_maxed = [];\n\tvar index = 0;\n\n\t//Loop through each number in the\
    \ list of numbers, rolling maxing until it reaches the moment\n\t//where the next\
    \ number is.\n\twhile(index < numbers.length){\n\t\trolling_maxed = rolling_maxed.concat(rolling_max(numbers.slice(index,\
    \ index + numbers[index]).concat([numbers[index + 1]])))\n\t\tindex += numbers[index];\n\
    \t}\n\n\treturn rolling_maxed;\n}\n", "\tvar max_number = 0;\n\tvar max_index;\n\
    \tvar last_index;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tmax_index =\
    \ i;\n\t\tfor (var j = i+1; j < numbers.length; j++){\n\t\t\tif(numbers[j] < numbers[max_index]){\n\
    \t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tlast_index = i;\n\t\tmax_number =\
    \ numbers[i];\n\t\tfor (var j = i; j < numbers.length; j++){\n\t\t\tif(numbers[j]\
    \ >= max_number){\n\t\t\t\tnumbers[j] = numbers[last_index];\n\t\t\t\tlast_index\
    \ = j;\n\t\t\t}\n\t\t}\n\t\tnumbers[last_index] = max_number;\n\t}\n\treturn numbers;\n\
    }\n", "    let rollingMaxArray=[];\n    for(let i=0;i<numbers.length;i++){\n \
    \       let currMax=numbers[i];\n        let currIndex=-1;\n        for(let j=i+1;j<numbers.length;j++){\n\
    \            if(numbers[j]>currMax){\n                currMax=numbers[j];\n  \
    \              currIndex=j;\n            }\n        }\n        rollingMaxArray.push(currMax);\n\
    \        numbers[currIndex]==numbers[currIndex] ? rollingMaxArray.unshift(numbers[currIndex])\
    \ : null;\n    }\n    return rollingMaxArray;\n}\n", "    let result = [];\n \
    \   let lastNumber = numbers[0];\n    let nextNumber = numbers[1];\n    result.push(lastNumber);\n\
    \    while(nextNumber != lastNumber){\n        nextNumber = Math.max(nextNumber,\
    \ lastNumber);\n        result.push(nextNumber);\n        lastNumber = nextNumber;\n\
    \    }\n    return result;\n}\n", "  var max_numbers=[]\n  for(var i=0; i<numbers.length;\
    \ i++){\n    var max_number=numbers[i]\n    for(var j=0; j<numbers.length; j++){\n\
    \      if(numbers[j] > max_number){\n        max_number = numbers[j]\n      }\n\
    \    }\n    max_numbers.push(max_number)\n  }\n  return max_numbers\n}\n", " \
    \   var _max = -Number.MAX_VALUE;\n    for(var i=numbers.length-1; i>=0; i--){\n\
    \        if(numbers[i] > _max){\n            _max = numbers[i];\n        }\n \
    \   }\n    return _max;\n}\n", "    var max_array = numbers.reduce(function(a,\
    \ b){\n        return Math.max(a, b);\n    });\n    for(var i=0; i<numbers.length;\
    \ i++){\n        max_array = rolling_max(numbers);\n    }\n    return max_array;\n\
    }\n", "  var result = new Array(numbers.length);\n  numbers.forEach(function(val,\
    \ index){\n    result[index] = Math.max.apply(null, result);\n  });\n  return\
    \ result;\n}\n", "    var max = numbers[0];\n    var max_idx = 0;\n    var _rolling_max\
    \ = rolling_max;\n    numbers.forEach(function(val){\n        if(val > max){\n\
    \            max = val;\n            max_idx = _rolling_max(numbers);\n      \
    \  }\n    });\n    return numbers.map(function(val, i){\n        return val >\
    \ max ? max_idx : val;\n    });\n}\n", "    var ret = [];\n    var temp = [];\n\
    \    for(var i =0; i < numbers.length ; i++){\n        var x = numbers[i];\n \
    \       if(x == 0){\n            ret.push(0);\n            continue;\n       \
    \ }\n        temp = ret.slice();\n        for(var j = 0 ; j < temp.length ; j++){\n\
    \            temp[j] = temp[j-1] > x ? temp[j-1] : x;\n        }\n        ret.push(temp.pop());\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a tags=arrays,javascript,rolling-computation,algorithm\
    \ |>\n<| a tags=arrays,javascript,rolling-computation,algorithm |>\nThis was a\
    \ fun problem. Here is one solution:\n<code>", "  var result = new Array(numbers.length);\n\
    \  var maxIdx = 0;\n  var maxValue = numbers[0];\n  var maxIdx2 = numbers.findIndex(function(e){return\
    \ e === maxValue});\n  while (maxIdx < numbers.length && maxIdx2 > -1) {\n   \
    \ result[maxIdx] = numbers[maxIdx];\n    maxIdx++;\n    maxValue = numbers[maxIdx2];\n\
    \    maxIdx = numbers.findIndex(function(e){return e === maxValue});\n    maxIdx2\
    \ = numbers.findIndex(function(e){return e === maxValue});\n  }\n  return result;\n\
    }", "    var max = -1;\n    var res = [];\n    var i = 0;\n    while(numbers.length){\n\
    \        var el = numbers.shift();\n        if(el > max){\n            max = el;\n\
    \            res.push(el);\n        }\n        else{\n            numbers.push(i);\n\
    \            res.push(el);\n        }\n        i += 1;\n    }\n    return res;\n\
    }\n", "    var max_index=0;\n    var max_value=numbers[0];\n    for(var i=1;i<numbers.length;i++){\n\
    \        var element=numbers[i];\n        if(element>max_value){\n           \
    \ max_value=element;\n            max_index=i;\n        }\n    }\n    var result_arr=[];\n\
    \    while(numbers[max_index]<=max_value){\n        result_arr.push(numbers[max_index++]);\n\
    \    }\n    return result_arr;\n}\n", "\tvar max_number = 0;\n\tvar max_index\
    \ = -1;\n\tfor (var i=0; i < numbers.length; i++){\n\t\tif (numbers[i] > max_number){\n\
    \t\t\tmax_number = numbers[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn numbers.slice(0,\
    \ max_index + 1);\n}\n", "    var result = [];\n    var largest = 0;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] > largest){\n      \
    \      result.push(numbers[i]);\n            largest = numbers[i];\n        }\n\
    \    }\n    return result;\n}\n", "  var maximums = numbers.map(function(item,\
    \ index){\n    return item;\n  });\n\n  for (var i = 1; i < numbers.length; i++){\n\
    \    var j = i;\n    while (j + 1 < numbers.length && maximums[j] > numbers[j+1]){\n\
    \      maximums[j+1] = maximums[j];\n      j++;\n    }\n\n    maximums[j+1] =\
    \ numbers[i];\n  }\n\n  return maximums;\n}\n\n", "  var max = numbers[0];\n \
    \ for(var i = 1; i < numbers.length; i++){\n    if(max < numbers[i]){\n      max\
    \ = numbers[i];\n    }\n  }\n  return max;\n}\n", "    var rolling_max_array =\
    \ [];\n\n    _.each(numbers, function(val){\n        rolling_max_array.push(_.max(numbers,\
    \ function(a){\n            return Math.pow(a-val, 2);\n        }));\n    });\n\
    \n    return rolling_max_array;\n}", "\tvar result = [];\n\tfor(var i=0, l = numbers.length;\
    \ i < l; i++){\n\t\tvar maxi = Math.max.apply(null, numbers);\n\t\tif(numbers[i]\
    \ === maxi){\n\t\t\tresult.push(maxi);\n\t\t}\n\t\telse{\n\t\t\tnumbers[i] = maxi;\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tlet result = [];\n\tlet temp = [];\n\t\
    numbers.forEach((value, index)=>{\n\t\tif(value>temp[0])\n\t\t\tresult.push(temp[0]);\n\
    \t\telse\n\t\t\tresult.push(value);\n\t\ttemp.push(value);\n\t});\n\treturn result;\n\
    }\n", "\tvar result = [];\n\tvar l = numbers.length;\n\tfor(var i=0;i<l;i++){\n\
    \t\tvar max_index = 0;\n\t\tvar max_value = numbers[i];\n\t\tfor(var j=0;j<l;j++){\n\
    \t\t\tif(numbers[j] > max_value){\n\t\t\t\tmax_value = numbers[j];\n\t\t\t\tmax_index\
    \ = j;\n\t\t\t}\n\t\t}\n\t\tresult.push(max_value);\n\t\tnumbers.splice(max_index,1);\n\
    \t}\n\treturn result;\n}\n", "\tvar rolling_max = Array();\n\trolling_max[0] =\
    \ 0;\n\trolling_max[1] = 0;\n\tfor(var i in numbers){\n\t\tif(numbers[i] > rolling_max[1])\n\
    \t\t\trolling_max[1] = numbers[i];\n\t\tif(i == numbers.length-1){\n\t\t\trolling_max[rolling_max.length-1]\
    \ = rolling_max[1];\n\t\t}\n\t\telse{\n\t\t\trolling_max[i+1] = rolling_max[i+1]\
    \ + numbers[i];\n\t\t}\n\t}\n\treturn rolling_max;\n}\n", "  var rolling_max,\
    \ i;\n\n  rolling_max = [];\n  for(i=0; i < numbers.length; i++){\n    rolling_max.push(Math.max.apply(this,\
    \ numbers[i-rolling_max[0].length]));\n  }\n  return rolling_max;\n};\n", "  var\
    \ max;\n  var currentMax;\n  var rollingMax;\n  var index = 0;\n  for(var i=0;i<numbers.length;i++){\n\
    \    currentMax = numbers[i];\n    if(max < currentMax){\n      max = currentMax;\n\
    \      rollingMax = numbers[i];\n    }else if(max == currentMax){\n      rollingMax\
    \ = currentMax;\n    }\n  }\n  return rollingMax;\n}\n", "    var result = [];\n\
    \    for(var i=0;i<numbers.length;i++){\n        var rolling_max_number = 0;\n\
    \        for(var j=0;j<numbers.length;j++){\n            if(numbers[j] < rolling_max_number\
    \ || j == 0){\n                continue;\n            }else{\n               \
    \ rolling_max_number = numbers[j];\n            }\n        }\n        result.push(rolling_max_number);\n\
    \    }\n    return result;\n}\n\n", "  let max = numbers[0];\n  for (let i = 1;\
    \ i < numbers.length; i++){\n    if (numbers[i] > max){\n      max = numbers[i];\n\
    \    }\n  }\n  return max;\n}\n", "    var max_list = max_rolling_list(numbers);\n\
    \    var result_array = [];\n    for (var i = 0; i < max_list.length; i++) {\n\
    \        result_array[i] = numbers[max_list[i]];\n    }\n    return result_array;\n\
    }", "    var output = [], min = numbers[0];\n    for (var i = 1; i < numbers.length;\
    \ i++){\n        if (numbers[i] > min){\n            min = numbers[i];\n     \
    \   }\n    }\n    var temp = 0;\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (numbers[i] == min){\n            temp = numbers[i];\n        }\n\
    \        if (temp != numbers[i]){\n            output[i] = temp;\n        }\n\
    \    }\n    return output;\n}\n", "    var result = [];\n    var i = 1;\n    while(i\
    \ < numbers.length){\n        result.push(numbers[i-1]);\n        i++;\n    }\n\
    \    return result;\n}\n", "  var max_so_far = numbers[0];\n  var max_rolling_max;\n\
    \  for(var i = 0; i < numbers.length; i++){\n    max_rolling_max = max_so_far;\n\
    \    max_so_far = max_so_far + numbers[i];\n    if(max_so_far > max_rolling_max){\n\
    \      max_rolling_max = max_so_far;\n    }\n  }\n  return max_rolling_max;\n\
    }\n", "    var results = [];\n    for(var i=0; i < numbers.length; i++){\n   \
    \     var rollingMax = numbers[i];\n        for(var j=i+1; j < numbers.length;\
    \ j++){\n            if(numbers[j] > rollingMax){\n                rollingMax\
    \ = numbers[j];\n            }\n        }\n        results.push(rollingMax);\n\
    \    }\n    return results;\n}\n", "    var result = [];\n    var len = numbers.length;\n\
    \    for(var i = 0; i < len; i++){\n        result.push(Math.max.apply(null, numbers));\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    \n    numbers.forEach(function(num){\n\
    \        var maxNum = num;\n        \n        while (result.indexOf(maxNum) >=\
    \ 0) {\n            maxNum++;\n        }\n        \n        result.push(maxNum);\n\
    \    });\n    \n    return result;\n}", "    if(!numbers) return [];\n    \n \
    \   var result = [];\n    var index = 0;\n    var l = numbers.length;\n    for(;\
    \ index < l; index++){\n        if(numbers[index] > result[index])\n         \
    \   result[index] = numbers[index];\n    }\n    \n    return result;\n}\n\n",
  "\tif(numbers.length < 2) return numbers;\n\tlet rolling_max = [];\n\trolling_max.push(numbers[0]);\n\
    \tfor(let i = 1 ; i < numbers.length ; i++){\n\t\tif(rolling_max[i-1] < numbers[i])\
    \ rolling_max[i] = numbers[i];\n\t\telse rolling_max[i] = rolling_max[i-1];\n\t\
    }\n\treturn rolling_max;\n}\n", "\tvar result = [];\n\tvar max = Math.max.apply(null,\
    \ numbers);\n\tvar i;\n\tfor(i=0; i<numbers.length; i++){\n\t\tresult.push(numbers[i]);\n\
    \t\tif(i == numbers.length-1 || numbers[i] >= max){\n\t\t\tbreak;\n\t\t}else{\n\
    \t\t\tresult.push(max);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar max = numbers[0];\n\
    \tfor (var i = 1; i < numbers.length; i++){\n\t\tif (max < numbers[i]){\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "    var max_rolling_number\
    \ = [];\n    var max_rolling_number = Math.max.apply(Math,numbers);\n    for (var\
    \ i=0; i< numbers.length; i++){\n        if(numbers[i] >= max_rolling_number){\n\
    \            max_rolling_number = numbers[i];\n        }\n    }\n    return max_rolling_number;\n\
    }\n", "    return numbers.reduce((acc, num)=>{\n        var temp = Math.max(acc[0],\
    \ num)\n        acc[0] = num\n        return temp\n    }, 0)\n}\n", "\tnumbers.forEach(function\
    \ (element, index){\n\t\tif (element > numbers[index-1]){\n\t\t\tnumbers.splice(index,\
    \ 0, element);\n\t\t}\n\t});\n\n\treturn numbers;\n}\n", "\tvar result = [];\n\
    \tvar sum = 0, max = numbers[0];\n\tnumbers.forEach(function(number){\n\t\tsum\
    \ += number;\n\t\tif (sum > max){\n\t\t\tresult.push(number);\n\t\t\tmax = sum;\n\
    \t\t}\n\t});\n\treturn result;\n}\n", "\tlet arr = [];\n\tnumbers.map(n => {\n\
    \t\tlet max = n;\n\t\tfor (let i = 0; i < numbers.length - 1 && numbers[i] <=\
    \ max; i++) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tarr.push(max);\n\t});\n\treturn\
    \ arr;\n}\n", "  var result = [];\n\n  for(var i = numbers.length - 1; i >= 0;\
    \ i--){\n    if(result[i] === undefined || numbers[i] > result[i]){\n      result[i]\
    \ = numbers[i];\n    }\n  }\n\n  return result;\n}\n", "  return numbers.reduce(function\
    \ (result, number) {\n    return Math.max(result, number);\n  });\n}\n", "  var\
    \ max = 0;\n  var rolling_max;\n  var i = 0;\n  \n  rolling_max = function(){\n\
    \    //return max if max is less than the current element, otherwise set max to\
    \ the current element\n    if (max < numbers[i]) {\n      max = numbers[i];\n\
    \    }\n    else {\n      max = max;\n    }\n  }\n  \n  for(var j = 0; j < numbers.length;\
    \ j++){\n    rolling_max();\n  }\n  \n  return rolling_max;\n}\n", "\treturn rolling_max_by(numbers,\
    \ function(n){return n;});\n}\n", "\t\n\treturn numbers.reduce(function(prev,\
    \ next){\n\t\tif (prev.length >= next){\n\t\t\tprev.push(numbers[numbers.length\
    \ - 1])\n\t\t} else {\n\t\t\tprev.push(numbers[prev.length])\n\t\t}\n\t\treturn\
    \ prev\n\t}, [])\n\n}\n", "    if(numbers.length===0) return [];\n    var last_element\
    \ = numbers.shift();\n    numbers.sort(function(a, b){return a - b});\n    var\
    \ result = [];\n    result.push(last_element);\n    for(var i=0;i<numbers.length;i++){\n\
    \        var val = numbers[i];\n        if(val > last_element) result.push(val);\n\
    \        else break;\n    }\n    return result;\n}", "\tlet max_val = Number.MIN_VALUE;\n\
    \tlet min_val = Number.MAX_VALUE;\n\tnumbers.forEach((v, i)=>{\n\t\tif(v > max_val){\n\
    \t\t\tmax_val = v;\n\t\t}\n\t\tif(v < min_val){\n\t\t\tmin_val = v;\n\t\t}\n\t\
    });\n\tlet max_number = numbers.reduce((v,i,a)=>{\n\t\tif(a.length - 1 >= i){\n\
    \t\t\tv[1] = Math.max(a[i-1], a[i]);\n\t\t\tv[0] = Math.min(a[i-1], a[i]);\n\t\
    \t}\n\t\treturn v;\n\t}, [Number.MIN_VALUE, Number.MAX_VALUE]);\n\treturn max_number.map((v,i)=>v);\n\
    }\n", "  var result = new Array();\n  var largest = numbers[0];\n  var current_max\
    \ = numbers[0];\n  var i = 0;\n  for (i = 1; i < numbers.length; i++){\n    if\
    \ (numbers[i] > largest){\n      largest = current_max;\n      current_max = numbers[i];\n\
    \    }else{\n      current_max = Math.max(current_max, numbers[i]);\n    }\n \
    \ }\n  result.push(current_max);\n  return result;\n}\n", "  var max_of_list =\
    \ [];\n  for(var i = 0; i < numbers.length; i++){\n    max_of_list.push(numbers[i]);\n\
    \  }\n  max_of_list.push(numbers[numbers.length - 1]);\n\n  var max_index = rolling_max_index(max_of_list);\n\
    \  return max_of_list[max_index];\n}\n", "  var result = [];\n  numbers = numbers.map(function(element,\
    \ index){\n    result[index] = element;\n    return element;\n  });\n  while(numbers.length\
    \ > 0){\n    var element = numbers.shift();\n    numbers.forEach(function(element){\n\
    \      if(element > element){\n        element = element;\n      }\n    });\n\
    \    result.unshift(element);\n  }\n  return result;\n}\n", "  var result = [];\n\
    \  numbers.forEach(function(element){\n    var maxIndex = element.lastIndexOf(element,\
    \ 0);\n    if (maxIndex != -1)\n      result[maxIndex] = element;\n    else\n\
    \      result.push(element);\n  });\n  return result;\n}\n", "  var m = numbers.length\
    \ - 1, max = numbers[0], new_max = numbers[0]\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] > max){\n      max = numbers[i]\n    }\n    if(numbers[i]\
    \ > new_max){\n      new_max = numbers[i]\n    }\n  }\n  if(new_max === max){\n\
    \    new_max += 1\n  }\n  return new_max\n}\n", "\tvar result = [];\n\tnumbers.forEach(function(n){\n\
    \t\tresult.push(rolling_max(n, result));\n\t});\n\treturn result;\n}\n", "   \
    \ for(var i = 0, max = -numbers[0]; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n    }\n    return max;\n\
    }\n", "\tvar result = [];\n\tvar max_num = 0;\n\t\n\tvar current_max = 0;\n\t\
    for(var i in numbers){\n\t\tif(numbers[i] > max_num){\n\t\t\tmax_num = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tfor(var i in numbers){\n\t\tif(numbers[i] == max_num){\n\t\t\
    \tcurrent_max = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > current_max){\n\t\
    \t\tresult.push(current_max);\n\t\t\tcurrent_max = numbers[i];\n\t\t}\n\t}\n\t\
    \n\treturn result;\n}\n", "\tvar n = numbers.length;\n\tnumbers.sort();\n\tvar\
    \ max_element = numbers[0];\n\tfor(var i=1;i<n;i++){\n\t\tif(n>i)\n\t\t\tmax_element\
    \ = max(max_element,numbers[i]);\n\t}\n\treturn max_element;\n}\n", "\tvar len\
    \ = numbers.length;\n\tvar rolling_max = new Array();\n\tfor(var i=0; i<len; i++){\n\
    \t\tvar current_max = numbers[i];\n\t\tfor(var j=i; j<len; j++){\n\t\t\tif(numbers[j]>current_max){\n\
    \t\t\t\trolling_max[j] = current_max;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return rolling_max;\n}", "  var result = [],\n      current = Number.MIN_VALUE;\n\
    \  \n  numbers.forEach(function(e){\n    if(current < e) current = e;\n    result.push(current);\n\
    \  });\n  return result;\n}\n", "\tvar max = 0;\n\tfor(var i in numbers){\n\t\t\
    if(numbers.hasOwnProperty(i)){\n\t\t\tif(numbers[i] > max){\n\t\t\t\tmax = numbers[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn max;\n}", "    let max_num = 0;\n    const rolling_max\
    \ = [];\n\n    for (let i = 0; i < numbers.length; i++){\n        if (numbers[i]\
    \ > max_num){\n            max_num = numbers[i];\n        }\n        rolling_max.push(max_num);\n\
    \    }\n\n    return rolling_max;\n}\n", "  return numbers.reduce(function(a,\
    \ b){\n    return a >= b ? a : b\n  })\n}\n", "\tvar i, rolling_max, tmp;\n\n\t\
    if (numbers.length === 0) return [];\n\tif (numbers.length === 1) return numbers[0];\n\
    \trolling_max = numbers[0];\n\ttmp = Math.max.apply(Math, numbers);\n\tfor (i\
    \ = 0; i < numbers.length; i++){\n\t\tif (numbers[i] > tmp){\n\t\t\trolling_max\
    \ = numbers[i];\n\t\t} else if (numbers[i] < rolling_max){\n\t\t\trolling_max\
    \ = rolling_max;\n\t\t}\n\t}\n\treturn rolling_max;\n}\n", "    var max_element=Math.max.apply(Math,\
    \ numbers);\n    var list = [];\n    var n=0;\n    for(i=numbers.length-1;i>=0;i--){\n\
    \        if((max_element==numbers[i])&&(n<i)){\n            list.push(numbers[i]);\n\
    \            ++n;\n        }\n    }\n    return list;\n}", "  numbers = numbers.slice();\n\
    \  var max_num = Math.max.apply(Math, numbers);\n  var max_num = Math.floor(max_num);\n\
    \  var max_num_index = numbers.indexOf(max_num);\n  numbers[max_num_index + 1]\
    \ = null;\n  return numbers.slice(0, max_num_index + 1);\n}\n", "  var max_number\
    \ = numbers[0];\n  var rolling_array = [];\n  for (var i = 1; i < numbers.length;\
    \ i++){\n    if (numbers[i] > max_number){\n      rolling_array = [];\n      max_number\
    \ = numbers[i];\n    }\n    rolling_array.push(numbers[i]);\n  }\n  return rolling_array;\n\
    }", "    var result = [];\n    var i = 0;\n    var rolling = false;\n    while(i\
    \ < numbers.length){\n        var rollingNumber = numbers.slice(i, i + 1);\n \
    \       if(rollingNumber.length > 0){\n            rolling = true;\n        }else{\n\
    \            if(rolling){\n                result = result.concat(rollingNumber);\n\
    \                rolling = false;\n            }\n        }\n        i += 1;\n\
    \    }\n    return result;\n}\n", "    var output = [];\n    rolling_max.rolling_index\
    \ = 0;\n    rolling_max.max_value = numbers.shift();\n    rolling_max.max = numbers.shift();\n\
    \n    while ( rolling_max.rolling_index <= rolling_max.max.length){\n        output.push(rolling_max.max.shift());\n\
    \        rolling_max.rolling_index += 1;\n    }\n    return output;\n}\n", "\t\
    var max_element = numbers[0];\n\tvar max_numbers = numbers;\n\tfor(var i = 1;\
    \ i < numbers.length; i++){\n\t\tif(numbers[i] > max_element){\n\t\t\tmax_element\
    \ = numbers[i];\n\t\t\tmax_numbers = numbers.slice(0, i);\n\t\t}\n\t}\n\treturn\
    \ max_numbers;\n}\n", "    var ret = [];\n    var n = 0;\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        if (numbers[i] > n){\n            ret.push(numbers[i]);\n\
    \        }\n        n++;\n    }\n    return ret;\n}\n", "\treturn numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n}\n", "  var max_el = numbers[0];\n  var max_number\
    \ = numbers[0];\n  for(var i=1; i<numbers.length; i++){\n    if(numbers[i] > max_number){\n\
    \      max_number = numbers[i];\n    }\n    if(numbers[i] == max_number){\n  \
    \    max_el = numbers[i];\n    }\n  }\n  return max_el;\n}\n", "\tvar rolling_maxes\
    \ = [],\n\t\tcurrent_max = numbers[0];\n\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] == current_max){\n\t\t\trolling_maxes.push(current_max);\n\
    \t\t\tcurrent_max = numbers[i];\n\t\t\tcontinue;\n\t\t}\n\t\tif(current_max <\
    \ numbers[i]){\n\t\t\trolling_maxes = [numbers[i]];\n\t\t\tbreak;\n\t\t}\n\t\t\
    current_max = numbers[i];\n\t}\n\treturn rolling_maxes;\n}\n", "    var max =\
    \ numbers[0]\n    for(var i=1;i<numbers.length;i++){\n        max = numbers[i]\
    \ > max ? numbers[i] : max\n    }\n    return max\n}\n", "\tvar result = [];\n\
    \tfor(var i=0; i<numbers.length; i++){\n\t\tvar max_number = numbers[i];\n\t\t\
    var last_max=0;\n\t\tfor(var j=numbers.length-1; j>i; j--){\n\t\t\tif((numbers[j]\
    \ > max_number)){\n\t\t\t\tmax_number = numbers[j];\n\t\t\t}\n\t\t\tif(numbers[j]\
    \ == last_max){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult.push(max_number);\n\
    \t}\n\treturn result;\n}\n", "  if (numbers.length < 1) return [];\n  numbers\
    \ = numbers.map(function(v, i){\n    return v + (i === numbers.length - 1 ? 0\
    \ : numbers[i+1]);\n  });\n  return numbers.reduce(function(acc, val, i){\n  \
    \  return val > (acc[acc.length-1] || val) ? [val] : acc.concat([val]);\n  },\
    \ []);\n}\n", "    \n    var max = numbers[0];\n    var maxIndex = 0;\n    \n\
    \    for (var i = 1; i < numbers.length; i++){\n        if (numbers[i] > max){\n\
    \            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n\
    \    \n    return numbers.slice(0, maxIndex + 1);\n}\n</code></pre>\n        \n\
    \        <h3>Notes</h3>\n        \n        <ul>\n            <li>\n          \
    \      This function is implemented in an optimized way for <b>O(n)</b> and <b>O(n)</b>\
    \ operations.\n            </li>\n        </ul>\n        \n        <hr>\n    \
    \    \n        <h4>Example Usage:</h4>\n        \n        <pre><code>", "    var\
    \ m = numbers.map(Math.max);\n    return numbers.map(function(elem, index){\n\
    \        return elem === m ? elem : m;\n    });\n}", "  var max = [];\n  for(var\
    \ i=0; i<numbers.length; i++){\n    max.push(numbers[i]);\n  }\n\n  function rolling_max(current){\n\
    \    for(var i=0; i<numbers.length; i++){\n      if(numbers[i] > max[i]){\n  \
    \      max[i] = numbers[i];\n      }\n    }\n  }\n\n  for(var i=numbers.length-1;\
    \ i>=0; i--){\n    rolling_max(numbers[i]);\n  }\n\n  return max;\n}\n\n", " \
    \   for(var i = 0, len = numbers.length; i < len; i++){\n        for(var j = 0;\
    \ j < i - 1; j++){\n            if(numbers[i] > numbers[j]){\n               \
    \ var temp = numbers[i];\n                numbers[i] = numbers[j];\n         \
    \       numbers[j] = temp;\n            }\n        }\n    }\n\n    return numbers;\n\
    }\n", "\tvar max_element;\n\tfor(var i=0; i<numbers.length; i++){\n\t\tfor(var\
    \ j=i; j<numbers.length; j++){\n\t\t\tif(numbers[i]>numbers[j]){\n\t\t\t\tmax_element=numbers[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_element;\n}\n", "  var max =\
    \ []\n  for(var i = 0; i < numbers.length; i++){\n    for(var j = 0; j < numbers.length;\
    \ j++){\n      if(j >= i){\n        max.push(numbers[j])\n      }\n    }\n  }\n\
    \  return max\n}\n", "\tvar max_element = [];\n\tvar i = 0;\n\tvar j = 0;\n\t\
    for(i = 0; i < numbers.length; i++){\n\t\tmax_element[j++] = numbers[i];\n\t\t\
    if(numbers[i] > max_element[j-1]){\n\t\t\tmax_element[j] = numbers[i];\n\t\t}\n\
    \t}\n\treturn max_element;\n}\n", "\tvar result = [];\n\tvar last_number = 0;\n\
    \tnumbers.forEach(function(number){\n\t\tlast_number = number;\n\t});\n\tresult.push(last_number);\n\
    \tfor (var i=0;i<numbers.length;i++){\n\t\tresult.push(Math.max(last_number, numbers[i]));\n\
    \t\tlast_number = numbers[i];\n\t}\n\treturn result;\n}\n", "    var new_rolling_max\
    \ = numbers[0]\n    for(var i=0; i< numbers.length; i++){\n        new_rolling_max\
    \ = Math.max(new_rolling_max, numbers[i])\n    }\n    return new_rolling_max\n\
    }\n", "    //The list will be empty if all the numbers are equal\n    if(numbers.length\
    \ <= 1)\n        return numbers;\n    var max_so_far = numbers[0];\n    var current_max\
    \ = max_so_far;\n    for(var i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ > current_max)\n        {\n            current_max = numbers[i];\n        }\n\
    \    }\n    return [current_max];\n}", "\tvar max_elements = [];\n\tfor(var i=0;\
    \ i<numbers.length; i++){\n\t\tmax_elements.push(Math.max.apply(null, numbers));\n\
    \t}\n\treturn max_elements;\n}\n", "    var max = numbers[0];\n    var max_index\
    \ = numbers.length-1;\n    for (var i=0; i<numbers.length; i++){\n        if (numbers[i]\
    \ > max){\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    return numbers.slice(max_index+1);\n}\n", "    var max_element;\n\
    \    var rolling_max = [];\n    var i = 0;\n    for(var len = numbers.length,\
    \ max = numbers[0]; len--; ){\n        if(numbers[i] > max){\n            max_element\
    \ = max;\n            rolling_max = [max];\n        }\n        else if(numbers[i]\
    \ == max){\n            rolling_max.push(max);\n        }\n        else{\n   \
    \         rolling_max.push(numbers[i]);\n        }\n        i++;\n    }\n    return\
    \ rolling_max;\n}\n", "    if (numbers.length == 0) return numbers\n    var result\
    \ = []\n    var rollingMaxIndex = numbers.shift()\n    while (numbers.length >\
    \ 0) {\n        if (rollingMaxIndex < numbers[0]) {\n            result.push(rollingMaxIndex)\n\
    \            rollingMaxIndex = numbers.shift()\n        } else if (rollingMaxIndex\
    \ > numbers[0]) {\n            rollingMaxIndex = numbers.pop()\n        } else\
    \ {\n            rollingMaxIndex = numbers[0]\n        }\n    }\n    return result\n\
    }\n", "    var max_val = 0;\n    var max_num;\n    for(var i = 0; i < numbers.length;\
    \ ++i){\n        if(max_num == null || max_num > numbers[i]){\n            max_num\
    \ = numbers[i];\n        }\n    }\n    if(max_num != null && max_num > max_val){\n\
    \        max_val = max_num;\n    }\n    return max_num;\n}\n\n", "\tvar res =\
    \ [];\n\twhile(numbers.length > 0){\n\t\tvar last = numbers[0];\n\t\tvar index\
    \ = numbers.length;\n\t\tvar current = numbers[0];\n\t\twhile(numbers.length >\
    \ 0){\n\t\t\tvar next_max = numbers[0];\n\t\t\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\t\t\tif(numbers[i] >= last){\n\t\t\t\t\tlast = numbers[i];\n\t\t\t\
    \t\tindex = i;\n\t\t\t\t\tcurrent = numbers[i];\n\t\t\t\t}else{\n\t\t\t\t\tnumbers[index]\
    \ = numbers[index] + numbers[i];\n\t\t\t\t\tnumbers[index] = numbers[index] /\
    \ numbers[i];\n\t\t\t\t\tcurrent = numbers[index];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    res.push(current);\n\t\t\tnumbers[index] = 0;\n\t\t}\n\t\tnumbers.splice(0, 1);\n\
    \t\tres.push(last);\n\t}\n\treturn res;\n}\n", "    var rolled=[];\n    for(var\
    \ i=0; i<numbers.length; i++){\n        rolled.push(Math.max.apply(null,numbers[i:i+numbers.length]));\n\
    \    }\n    return rolled;\n}\n", "\tvar result = [];\n\tfor (var i = 0; i < numbers.length;\
    \ i++) {\n\t\tresult.push(Math.max.apply(null, numbers[i-numbers.length : i]));\n\
    \t}\n\treturn result;\n}\n", "\tvar rollingMax = []\n\t\n\tfor(var i = 0; i <\
    \ numbers.length; i++){\n\t\tvar rollingMaxElement = numbers[i]\n\t\tfor(var j\
    \ = 0; j < i; j++){\n\t\t\tif(numbers[j] > rollingMaxElement){\n\t\t\t\trollingMaxElement\
    \ = numbers[j]\n\t\t\t}\n\t\t}\n\t\trollingMax.push(rollingMaxElement)\n\t}\n\t\
    return rollingMax\n}\n", "\tvar max = 0;\n\tvar result = [];\n\tfor (var i = 0;\
    \ i < numbers.length; i++){\n\t\tfor (var j = 0; j < numbers.length; j++){\n\t\
    \t\tif (max < numbers[j]){\n\t\t\t\tmax = numbers[j];\n\t\t\t}\n\t\t}\n\t\tresult.push(max);\n\
    \t\tmax = 0;\n\t}\n\treturn result;\n}\n", "  return rolling_max(numbers, 0, []);\n\
    }", "  var len = numbers.length;\n  return _.sortBy(numbers, function(v, i){\n\
    \    return len - i - 1;\n  });\n}\n", "    var result = [];\n    var index =\
    \ 0;\n    while (index < numbers.length){\n        result.push(rolling_max(numbers.slice(index,\
    \ index+numbers.length)));\n        index++;\n    }\n    \n    var maxIndex =\
    \ 0;\n    for (var i=0; i < result.length; i++){\n        var currentMax = result[i];\n\
    \        var index = i;\n        while (index < result.length && currentMax <\
    \ result[index]){\n            index++;\n        }\n        \n        result[i]\
    \ = result[index];\n        maxIndex = i;\n    }\n    \n    return maxIndex <\
    \ result.length ? result[maxIndex] : 0;\n}\n", "\tvar i;\n\tvar max = -Number.MAX_VALUE;\n\
    \tvar max_element;\n\t\n\tfor(i=0; i<numbers.length; i++){\n\t\tif( numbers[i]\
    \ < max ){\n\t\t\tmax = numbers[i];\n\t\t\tmax_element = numbers[i];\n\t\t}\n\t\
    \telse{\n\t\t\tnumbers[i] = max_element;\n\t\t}\n\t}\n\t\n\treturn numbers;\n\
    }\n", "  var max,\n      min;\n  if(numbers.length===0) return [];\n  numbers.forEach(function(num){\n\
    \    if(num>max){\n      max=num;\n    }\n    if(num<min){\n      min=num;\n \
    \   }\n  });\n  return [max,min,max+(min+1)];\n}\n", "  var i, j, max, rolling_max,\
    \ max_sum, sum, current_rolling_max;\n  current_rolling_max = 0;\n  sum = 0;\n\
    \  for (i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n  }\n  max_sum\
    \ = sum;\n  rolling_max = [];\n  for (i = 0; i < numbers.length; i++){\n    if\
    \ (sum <= numbers[i]){\n      current_rolling_max++;\n      sum -= numbers[i];\n\
    \      rolling_max[i] = numbers[i];\n    }\n    else if (current_rolling_max >\
    \ 0){\n      current_rolling_max--;\n      max_sum -= numbers[i];\n      rolling_max[i]\
    \ = max_sum;\n    }\n  }\n  return rolling_max;\n}\n", "    var result = [];\n\
    \    for(var i =0; i < numbers.length; i++)\n    {\n        var max = numbers[i];\n\
    \        var index = i;\n        for(var j = i+1; j < numbers.length; j++)\n \
    \       {\n            if(numbers[j] > max)\n            {\n                max\
    \ = numbers[j];\n                index = j;\n            }\n        }\n      \
    \  result.push(max);\n        numbers.splice(index,1);\n    }\n    return result;\n\
    }\n", "\treturn rolling_max_number(numbers);\n}\n", "  var results = [];\n  var\
    \ currentMax = 0;\n  var currentIndex = 0;\n  for(var i=0; i< numbers.length;\
    \ i++){\n    if(numbers[i] > currentMax){\n      currentMax = numbers[i];\n  \
    \    currentIndex = i;\n    }\n    if(numbers[i] === currentMax){\n      results.push(numbers[i]);\n\
    \    }\n  }\n  return results;\n}\n\n", "  var i = numbers.length - 1, // index\
    \ of the current element we are checking\n      max = 0, // will be the maximum\
    \ element found so far\n      max_element = null, // will be the current element\
    \ we are considering\n      max_found = false; // will be true if the current\
    \ element has already been found within the sequence\n\n  while (i--) {\n    max_element\
    \ = numbers[i];\n    max_found = false;\n    while (i >= 0 && max_element < numbers[i]\
    \ && max_found === false){\n      max_element = numbers[i];\n      max_found =\
    \ true;\n      i--;\n    }\n    if (max_found === true){\n      numbers[i] = max_element;\n\
    \      numbers.length--;\n      max++;\n    }\n  }\n  return max;\n}\n", "\treturn\
    \ numbers.reduce(function(prev, next){\n\t\tprev.push(next);\n\t\treturn prev;\n\
    \t}, []);\n}\n", "  const rolling_max_array = new Array()\n  \n  for(let i=0;\
    \ i<numbers.length; i++){\n    if(rolling_max_array.length == 0){\n      rolling_max_array.push(numbers[i])\n\
    \    }\n    else if(rolling_max_array.length > 0){\n      for(let j=0; j<rolling_max_array.length;\
    \ j++){\n        if(numbers[i] > rolling_max_array[j]){\n          rolling_max_array[j]\
    \ = numbers[i]\n        }\n      }\n    }\n  }\n  \n  return rolling_max_array\n\
    }\n", "  var result = []\n  for(var i=0; i<numbers.length; i++){\n    var max\
    \ = numbers[i]\n    var index = -1\n    for(var j=0; j<numbers.length; j++){\n\
    \      if(numbers[j] > max){\n        max = numbers[j]\n        index = j\n  \
    \    }\n    }\n    result.push(max)\n  }\n  return result\n}\n", "\tif(!numbers\
    \ || numbers.length == 0) return [];\n\tlet max = numbers[0];\n\tlet maxIndex\
    \ = 0;\n\tfor(let i=1; i<numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\
    \tmax = numbers[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn numbers.slice(0,\
    \ maxIndex+1);\n}\n", "\tvar rolling_max_numbers = [];\n\t\n\tfor(var i = 0; i\
    \ < numbers.length; i++){\n\t\tvar max = numbers[i];\n\t\tvar index = i;\n\t\t\
    \n\t\tfor(; i < numbers.length; i++){\n\t\t\tif(numbers[i] > max){\n\t\t\t\tmax\
    \ = numbers[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\trolling_max_numbers.push(max);\n\
    \t\t\n\t\tif(numbers[index] == numbers[numbers.length-1]){\n\t\t\trolling_max_numbers.push(numbers[index]);\n\
    \t\t}\n\t}\n\t\n\treturn rolling_max_numbers;\n}\n", "    var max = -Number.MAX_VALUE;\n\
    \    var rollingMax = [];\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    if(numbers[i] >= max){\n            rollingMax.push(numbers[i]);\n      \
    \  }else{\n            max = numbers[i];\n        }\n    }\n    return rollingMax;\n\
    }\n", "\tvar max_values = [];\n\tmax_values.push(numbers[0]);\n\tfor(var j = 1;\
    \ j < numbers.length; j++){\n\t\tif(max_values[j - 1] < numbers[j]){\n\t\t\tmax_values.push(numbers[j]);\n\
    \t\t}\n\t}\n\treturn max_values;\n}\n", "  var max = numbers[0]\n  var maxes =\
    \ []\n  for(var i in numbers){\n    if(numbers[i] > max){\n      max = numbers[i]\n\
    \    }\n  }\n  for(var i in numbers){\n    if(numbers[i] > max && numbers[i] !==\
    \ max){\n      maxes.push(max)\n      max = numbers[i]\n    }\n  }\n  maxes.push(max)\n\
    \  return maxes\n}\n", "    var result = [];\n    var i = 0;\n    var max = 0;\n\
    \    var j = 0;\n\n    for(i = 0; i < numbers.length; i++){\n        for(j = 0;\
    \ j < i; j++){\n            if(numbers[j] > numbers[j+1]){\n                max\
    \ = numbers[j];\n            }\n        }\n        result.push(max);\n    }\n\n\
    \    return result;\n}\n", "    return numbers.reduce(\n            function(acc,\
    \ curr){\n                acc.unshift(curr);\n                return acc;\n  \
    \          }, \n            numbers.slice(0));\n}\n", "    var result = [];\n\
    \    var current = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > current){\n            result.push(current);\n      \
    \      current = numbers[i];\n        }else{\n            current = Math.max(current,\
    \ numbers[i]);\n        }\n    }\n    result.push(current);\n    return result;\n\
    }\n", "\tvar max_numbers = numbers,\n\t\tmax_numbers_index = 0;\n\t\n\tfor(var\
    \ i=0;i<numbers.length;i++){\n\t\tif(i>0){\n\t\t\tvar current_max = numbers[i-1];\n\
    \t\t\tif(current_max < numbers[i]){\n\t\t\t\tmax_numbers = max_numbers.slice(0,i).concat(current_max,max_numbers.slice(i+1));\n\
    \t\t\t\tmax_numbers_index = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_numbers;\n\
    }\n", "\tvar max_so_far = 0;\n\tvar max_so_far_found = false;\n\tvar rolling =\
    \ [];\n\tfor(var i=numbers.length-1; i>=0; i--){\n\t\trolling.push(numbers[i]);\n\
    \t\tif(!max_so_far_found && numbers[i]>max_so_far){\n\t\t\tmax_so_far_found =\
    \ true;\n\t\t\tmax_so_far = numbers[i];\n\t\t}\n\t}\n\trolling.push(max_so_far);\n\
    \treturn rolling;\n}\n", "    if (numbers.length === 0) return [];\n    if (numbers.length\
    \ === 1) return numbers;\n\n    const tail = rolling_max(numbers.slice(1));\n\
    \    return numbers[0] <= tail[tail.length-1] ? [numbers[0]].concat(tail) : tail;\n\
    }\n", "  var max = numbers[0];\n  for (var i = 1; i < numbers.length; i++){\n\
    \    if (numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  return max;\n\
    }\n\n", "    var rm = numbers.map(function(element, index){\n        if (index\
    \ === 0) {\n            return element;\n        } else {\n            var last\
    \ = numbers[index-1];\n            return Math.max(element, last);\n        }\n\
    \    });\n    return rm;\n}\n\n", "    var output = [];\n    var currentMax =\
    \ 0;\n    numbers.forEach(function(num){\n        currentMax = Math.max(currentMax,\
    \ num);\n        output.push(currentMax);\n    });\n    return output;\n}\n</code>\n\
    <|/ a |>\n<| a tags=javascript |>\nUsing ES6 syntax:\n<code>\nvar rollingMax =\
    \ (input) => {\n  if (input.length <= 1) return input;\n\n  const [first] = input;\n\
    \n  return [\n    ...rollingMax(\n      input.slice(1)\n    ),\n    first\n  ];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution because it doesn't\
    \ require any additional functions. `Array.slice()` is also very clean.\n<|/ c\
    \ |>\n<| a tags=javascript dscore=2 |>\nHere is my version for an array with more\
    \ then one element and using recursion.\n\n<code>", "  var max_rolling = 0;\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > numbers[i - 1]){\n\
    \      max_rolling = Math.max(max_rolling, numbers[i]);\n    }\n  }\n  return\
    \ max_rolling;\n}\n", "    var result = [];\n    var start = 0;\n    \n    for(var\
    \ i = 0; i < (numbers.length - 1); i++){\n        if(numbers[i] <= numbers[i+1]){\n\
    \            result.push(numbers[i]);\n            start = i;\n        }\n   \
    \ }\n    result.push(numbers[numbers.length - 1]);\n    return result.slice(start).reverse();\n\
    }\n", "\tlet result = [];\n\tfor (let i = 0; i < numbers.length; i++){\n\t\tlet\
    \ index = numbers.length -i;\n\t\tlet max = numbers[index];\n\t\twhile (index>0){\n\
    \t\t\tif (numbers[index] > max){\n\t\t\t\tmax = numbers[index];\n\t\t\t}\n\t\t\
    \tindex--;\n\t\t}\n\t\tresult.push(max);\n\t}\n\treturn result;\n}\n", "    var\
    \ rolling_max = numbers[0];\n    for (var i = 1; i < numbers.length; i++){\n \
    \       rolling_max = numbers[i]>rolling_max?numbers[i]:rolling_max;\n    }\n\
    \    return rolling_max;\n}\n", "    var max_array = []\n    var current_max =\
    \ max_array[0]\n    var current_max_index = 0\n    for(var i = numbers.length\
    \ - 1; i >= 0; i--){\n        if(numbers[i] > current_max){\n            for(var\
    \ j = current_max_index + 1; j < max_array.length; j++){\n                max_array[j]\
    \ = max_array[j-1]\n            }\n            max_array[max_array.length - 1]\
    \ = numbers[i]\n            current_max = numbers[i]\n            current_max_index\
    \ = max_array.length - 1\n        }\n    }\n    return max_array\n}\n", "    for(var\
    \ i = numbers.length - 1, max = 0; i >= 0 ; i--){\n        if(numbers[i] > max){\n\
    \            max = numbers[i];\n        }\n    }\n    return max;\n}\n", "   \
    \ var maxValue = 0;\n    var result = [];\n\n    for (var i=0; i<numbers.length;\
    \ i++){\n        switch (numbers[i]){\n            case 2:\n                if\
    \ (maxValue < numbers[i+1]){\n                    maxValue = numbers[i+1];\n \
    \               }\n                break;\n            case 3:\n             \
    \   if (maxValue < numbers[i+1] && maxValue < numbers[i+2]){\n               \
    \     maxValue = numbers[i+1];\n                }\n                break;\n  \
    \          case 4:\n                if (maxValue < numbers[i+1] && maxValue <\
    \ numbers[i+2] && maxValue < numbers[i+3]){\n                    maxValue = numbers[i+1];\n\
    \                }\n                break;\n            case 5:\n            \
    \    if (maxValue < numbers[i+1] && maxValue < numbers[i+2] && maxValue < numbers[i+3]\
    \ && maxValue < numbers[i+4]){\n                    maxValue = numbers[i+1];\n\
    \                }\n                break;\n            default:\n           \
    \     if (maxValue < numbers[i+1] && maxValue < numbers[i+2] && maxValue < numbers[i+3]\
    \ && maxValue < numbers[i+4] && maxValue < numbers[i+5]){\n                  \
    \  maxValue = numbers[i+1];\n                }\n                break;\n     \
    \   }\n        result.push(maxValue);\n    }\n    return result;\n}\n", "  return\
    \ numbers.reduce(function(a, b){\n    return Math.max(a, b);\n  });\n}\n", " \
    \ var result = [];\n  for(var i = 0; i<numbers.length; i++){\n    if(numbers[i]\
    \ === numbers[i - 1]){\n      result.push(numbers[i]);\n    } else {\n      result.push(numbers[i\
    \ - 1]);\n    }\n  }\n  return result;\n}\n", "    var max = null;\n    var found\
    \ = false;\n    numbers.forEach(function(number){\n        if(number > max){\n\
    \            max = number;\n            found = false;\n        }\n        if(!found\
    \ && number === max){\n            found = true;\n        }\n    });\n    return\
    \ max;\n}\n", "\treturn numbers.reduce(function(prev, curr){\n\t\treturn prev\
    \ > curr ? prev : curr;\n\t}, numbers[0]);\n}\n", "\tlet rolling_max = [];\n\t\
    rolling_max.push(numbers[0]);\n\tfor(let i = 1; i < numbers.length; i++){\n\t\t\
    for(let j = 0; j < rolling_max.length; j++){\n\t\t\tif(numbers[i] > rolling_max[j]){\n\
    \t\t\t\trolling_max.splice(0, 0, numbers[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn rolling_max;\n\
    }\n", "  return rolling_max.call(this, numbers, 0, numbers.length - 1);\n}\n",
  "\tlet _rolling_max = []\n\tlet _max = 0\n\tlet _i = -1\n\tfor (const a of numbers){\n\
    \t\t_i++\n\t\tif (_i > numbers.length) break\n\t\tif (a > _max){\n\t\t\t_max =\
    \ a\n\t\t}\n\t\t_rolling_max.push(a)\n\t}\n\treturn _rolling_max\n}\n", "\tvar\
    \ result = []\n\tfor(var i=0;i<numbers.length;i++){\n\t\tvar rolling = 0;\n\t\t\
    while(numbers[i] >= rolling){\n\t\t\trolling++;\n\t\t}\n\t\tresult.push(rolling);\n\
    \t}\n\treturn result;\n}\n", "    var results = []\n    rolling_max.windowSize\
    \ = numbers.length\n    rolling_max.windowSum = 0\n    rolling_max.maxIndex =\
    \ 0\n    rolling_max.minIndex = numbers.length - 1\n    \n    for (var i = 1;\
    \ i < numbers.length; i++) {\n        rolling_max.windowSum += numbers[i]\n  \
    \      if (rolling_max.windowSum > rolling_max.maxIndex){\n            rolling_max.maxIndex\
    \ = i\n        } else if (rolling_max.windowSum < rolling_max.minIndex){\n   \
    \         rolling_max.minIndex = i\n        }\n    }\n    \n    for (var i = numbers.length\
    \ - 1; i >= rolling_max.minIndex; i--){\n        results.push(numbers[i])\n  \
    \  }\n    \n    return results;\n}\n", "    var result = []\n    var m = numbers[0]\n\
    \n    for(var i of numbers){\n        m = Math.max(m, i)\n        result.push(m)\n\
    \    }\n\n    return result;\n}\n\n", "\tvar max = 0, min = numbers[0];\n\n\t\
    for(var i=0; i < numbers.length; i++){\n\t\tmax = Math.max(max, numbers[i]);\n\
    \t}\n\tfor(var i=0; i < numbers.length; i++){\n\t\tmin = Math.min(min, numbers[i]);\n\
    \t}\n\tfor(var i=0; i < numbers.length; i++){\n\t\tnumbers[i] = Math.floor( (numbers[i]-min)\
    \ / (max-min) );\n\t}\n\treturn numbers.slice(0);\n}\n\t", "\tvar n = 0;\n\tvar\
    \ rolling_max_val = 0;\n\tvar temp_rolling_max_val = 0;\n\t\n\tfor(var i in numbers){\n\
    \t\tif(numbers[i] > rolling_max_val){\n\t\t\trolling_max_val = numbers[i];\n\t\
    \t}\n\t}\n\t\n\tfor(var i in numbers){\n\t\tif(numbers[i] > temp_rolling_max_val){\n\
    \t\t\ttemp_rolling_max_val = numbers[i];\n\t\t}\n\t}\n\t\n\tvar temp_max_count\
    \ = 0;\n\t\n\tfor(var i in numbers){\n\t\tif(numbers[i] == rolling_max_val){\n\
    \t\t\ttemp_max_count++;\n\t\t}\n\t}\n\t\n\tfor(var i in numbers){\n\t\tif((temp_max_count\
    \ == numbers[i])){\n\t\t\tn++;\n\t\t}\n\t}\n\t\n\treturn n;\n}\n", "    return\
    \ numbers.reduce(function(previous, current){\n        if(previous === null ||\
    \ current > previous){\n            return current;\n        }\n        return\
    \ previous;\n    }, null);\n}\n", "\tvar i,j,max;\n\tvar rolling_max_array=[];\n\
    \n\tfor(i=0;i<numbers.length;i++){\n\t\trolling_max_array[i] = 0;\n\t\tfor(j=i+1;j<numbers.length;j++){\n\
    \t\t\tif(numbers[j] > numbers[i]){\n\t\t\t\tmax = numbers[i];\n\t\t\t\tnumbers[i]\
    \ = numbers[j];\n\t\t\t\tnumbers[j] = max;\n\t\t\t\trolling_max_array[i] = numbers[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn rolling_max_array;\n}\n", "    let max_roll = [];\n\
    \    for(const num of numbers){\n        let max = num;\n        while(max_roll.length\
    \ != 0 && max_roll[max_roll.length-1] <= num){\n            max_roll.push(max_roll[max_roll.length-1]);\n\
    \        }\n        if(max_roll.length != 0){\n            max_roll[max_roll.length-1]\
    \ = max;\n        }\n    }\n    return max_roll;\n}\n", "  var result = [];\n\
    \  numbers.forEach(function(x){\n    x = x.valueOf();\n    if(!result.length ||\
    \ result[0] > x){\n      result.push(x);\n    }\n  });\n  return result;\n}\n",
  "    var maxNumber;\n    var maxNumberIndex = 0;\n    for(var i=0;i<numbers.length;i++){\n\
    \        if(numbers[i] > maxNumber){\n            maxNumber = numbers[i];\n  \
    \          maxNumberIndex = i;\n        }\n    }\n    return numbers.slice(0,\
    \ maxNumberIndex + 1);\n}", "    return rolling_max$1(numbers,0,0);\n}\n", " \
    \ var arr=[];\n  var index=-1;\n  for(var i in numbers){\n    index = arr.indexOf(numbers[i]);\n\
    \    if(index > -1){\n      arr[index].push(numbers[i]);\n    }else{\n      arr.push([numbers[i]]);\n\
    \    }\n  }\n  var result=[];\n  var sum=0;\n  for(var i in arr){\n    sum = sum\
    \ + arr[i].reduce(function(prev, current){\n      return prev + current;\n   \
    \ }, 0)\n  }\n  for(var i in arr){\n    result.push((sum/arr[i].length).toFixed(2));\n\
    \  }\n  return result;\n}\n", "    var results = [];\n    var rolling_max = 1;\n\
    \    numbers.forEach(function(item, index){\n        rolling_max = Math.max(item,\
    \ rolling_max);\n        results.push(rolling_max);\n    });\n    return results;\n\
    }", "    return rolling_max(numbers, 0, numbers.length - 1, []);\n}\n", "    var\
    \ rolling_max = [],\n        i = 0;\n    while(numbers.length){ rolling_max.push(Math.max.apply(null,\
    \ numbers)) }\n    return rolling_max\n}\n", "    var result = [];\n    var min\
    \ = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        var roll\
    \ = rolling_max(numbers[i + 1 : numbers.length]);\n        roll[0] = Math.max(min,\
    \ roll[0]);\n        result.push(roll[0]);\n    }\n    return result;\n}\n", "\t\
    var ret = [];\n\tnumbers.map(function(el, i, arr){\n\t\tret.push(Math.max.apply(null,\
    \ arr));\n\t});\n\treturn ret;\n}", "    var rolling_max_array = [];\n    for(var\
    \ i=0;i<numbers.length;i++){\n        rolling_max_array.push(numbers[i]);\n  \
    \      if(numbers[i] < numbers[i-1]){\n            break;\n        }\n    }\n\
    \    return rolling_max_array;\n}\n", "\tvar max_rolling = [numbers[0]];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_rolling[max_rolling.length\
    \ - 1]){\n\t\t\tmax_rolling.push(numbers[i]);\n\t\t}\n\t}\n\treturn max_rolling;\n\
    }\n", "\tvar rolling_max_elements = numbers.map(function(current_number){\n\t\t\
    var current_max = current_number;\n\t\tfor(var i = 1; i < current_number; i++){\n\
    \t\t\tif(current_max < numbers[i - 1])\n\t\t\t\tcurrent_max = numbers[i - 1];\n\
    \t\t}\n\t\treturn current_max;\n\t});\n\treturn rolling_max_elements;\n}\n", " \
    \   var sum = 0;\n    for(var i=0;i<numbers.length;i++){\n        sum = Math.max(sum,\
    \ numbers[i]);\n    }\n    return sum;\n}", "    var _numbers = numbers;\n   \
    \ var _current_max = 0;\n    var _current_max = Math.max.apply(Math, _numbers);\n\
    \    var _current_rolling_max = _current_max;\n    \n    for(var i = 1; i < _numbers.length;\
    \ i++){\n        _current_max = _numbers[i];\n        if(_current_max > _current_rolling_max){\n\
    \            _current_rolling_max = _current_max;\n        }\n    }\n    return\
    \ _current_rolling_max;\n}\n</code>\n<|/ a dscore=3 tags=javascript,algorithm,arrays\
    \ |>\n<| a |>\n<code>", "  const len = numbers.length;\n  if(!len) return [];\n\
    \n  const max = [];\n  let maxIndex = -1;\n  for(let i = 0; i < len; i++){\n \
    \   if(numbers[i] > max[maxIndex]) maxIndex = i;\n    max.push(numbers[i]);\n\
    \  }\n  return max;\n}\n", "    var ret = [];\n    numbers.forEach(function(n){\n\
    \        var max = numbers[0];\n        for(var i = 1; i < n; i++){\n        \
    \    max = Math.max(numbers[i], max);\n        }\n        ret.push(max);\n   \
    \ });\n    return ret;\n}\n\n", "    var result = [];\n    _.each(numbers, function(number){\n\
    \        result.push(number);\n        if(_.isUndefined(result[0])){\n       \
    \     return result[0] = number;\n        }\n    });\n\n    result.sort(function(a,\
    \ b){\n        return a - b;\n    });\n\n    _.each(result, function(number){\n\
    \        if(_.isUndefined(result[0])){\n            return result[0] = number;\n\
    \        }\n    });\n\n    _.each(result, function(number, index){\n        if(index\
    \ > 0){\n            result[index] = result[index - 1];\n        }\n    });\n\n\
    \    return result;\n}\n", "\tvar result = [];\n\tvar numbers_length = numbers.length;\n\
    \tvar max_number;\n\tvar i;\n\tfor (i = 0; i < numbers_length; i++){\n\t\tif (numbers[i]\
    \ > max_number){\n\t\t\tmax_number = numbers[i];\n\t\t}\n\t}\n\tfor (i = 0; i\
    \ < numbers_length; i++){\n\t\tif (numbers[i] >= max_number){\n\t\t\tresult.push(max_number);\n\
    \t\t\tmax_number = numbers[i];\n\t\t}\n\t\telse {\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  var max = numbers.reduce(function(max,a){\n\
    \    return Math.max(a,max);\n  });\n  var max_numbers = [];\n  for(var i=0;i<numbers.length;i++){\n\
    \    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    max_numbers.push(max);\n\
    \  }\n  return max_numbers;\n}\n", "  var result = [];\n  var max_value = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max_value){\n\
    \      max_value = numbers[i];\n    }\n  }\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    result.push(max_value);\n  }\n  return result;\n}\n", "    var result\
    \ = [],\n        len = numbers.length;\n    for(var i=0; i< len; i++){\n     \
    \   result.push(Math.max(numbers[i], numbers[len-1-i]));\n    }\n    return result;\n\
    }\n", "\tvar rolling_max = function(numbers){\n\t\tvar result = [];\n\t\tvar window_length\
    \ = numbers.length;\n\t\tvar last_max = null;\n\t\t\n\t\tfor (var i = 0; i < numbers.length;\
    \ i++){\n\t\t\tresult.push(numbers[i]);\n\t\t\tif (numbers[i] > last_max){\n\t\
    \t\t\tlast_max = numbers[i];\n\t\t\t}\n\t\t\t\n\t\t\tif (i < (window_length -\
    \ 1)){\n\t\t\t\tfor (var j = i + 1; j < window_length; j++){\n\t\t\t\t\tif (numbers[j]\
    \ > last_max){\n\t\t\t\t\t\tlast_max = numbers[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\t\n\treturn rolling_max(numbers);\n\
    };\n", "\tvar result = [];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tresult.push(Math.max.apply(null,\
    \ numbers[i:i+numbers.length]));\n\t}\n\treturn result;\n}\n", "    return numbers.reduce(function\
    \ (a, b) {\n        return a > b ? a : b;\n    });\n}\n", "\tlet n = numbers.length;\n\
    \tlet max = [];\n\tfor (let i = 1; i < n; i++){\n\t\tmax[i-1] = max[i-1] > numbers[i]\
    \ ? max[i-1] : numbers[i];\n\t}\n\treturn max;\n}\n", "\tvar max_rolling = [];\n\
    \tvar max_index = 0;\n\tfor (var i=0; i<numbers.length; i++){\n\t\tvar max_val\
    \ = numbers[i];\n\t\tfor (var j=i; j<numbers.length; j++){\n\t\t\tif (numbers[j]\
    \ > max_val){\n\t\t\t\tmax_val = numbers[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\
    \t\t}\n\t\tmax_rolling.push(max_val);\n\t}\n\treturn max_rolling;\n}\n", "  var\
    \ max_number = numbers[0],\n      max_number_count = 0;\n\n  for (var i = 1; i\
    \ < numbers.length; i++)\n  {\n    if(numbers[i]>max_number){\n      max_number\
    \ = numbers[i];\n      max_number_count = i;\n    }\n  }\n\n  return numbers.slice(0,\
    \ max_number_count);\n}\n\n", "  var rollingMax = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var rollingMaxTemp = rollingMax.slice();\n    rollingMaxTemp.push(numbers[i]);\n\
    \    var max = Math.max.apply(Math, rollingMaxTemp);\n    if(max > numbers[i]){\n\
    \      rollingMax.push(max);\n    }\n  }\n  return rollingMax;\n}\n", "\tvar arr\
    \ = [];\n\tvar i = numbers.length-1;\n\t\n\tfor(var j = 0; j < numbers.length;\
    \ j++){\n\t\tif(numbers[j] < numbers[i] && numbers[i] != null){\n\t\t\tvar tmp\
    \ = Math.max(numbers[i], numbers[j]);\n\t\t\t\n\t\t\tfor(var k = j; k < i; k++){\n\
    \t\t\t\tif(numbers[k] == tmp){\n\t\t\t\t\tnumbers[k] = null;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\t\n\t\t\tarr.push(tmp);\n\t\t\t\n\t\t\tif(numbers[i] != null){\n\t\t\t\
    \tnumbers[i] = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\ti = j - 1;\n\t}\n\t\n\treturn arr;\n\
    }\n", "  var result = [];\n  var maxIndex = -1;\n  numbers.forEach(function(element){\n\
    \    if(element > maxIndex){\n      result.push(element);\n      maxIndex = element;\n\
    \    }\n  });\n  return result;\n}\n", "\tvar max = -Number.MAX_VALUE;\n\tvar\
    \ rollingMax = [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tvar num\
    \ = numbers[i];\n\t\tif (num > max) {\n\t\t\trollingMax.push(max);\n\t\t\tmax\
    \ = num;\n\t\t} else {\n\t\t\trollingMax.push(num);\n\t\t}\n\t}\n\trollingMax.push(max);\n\
    \treturn rollingMax;\n}\n", "    var max_element=numbers[0];\n    var max_index=0;\n\
    \    var max_indexer = 0;\n    for (var i = 1; i < numbers.length; i++){\n   \
    \     if (numbers[i] >= max_element){\n            max_element=numbers[i];\n \
    \           max_index=i;\n            max_indexer=max_element;\n        }\n  \
    \  }\n    return max_element;\n}\n", "  var max = -Infinity;\n  var maxIndex =\
    \ 0;\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]>max){\n      max\
    \ = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max,maxIndex];\n}\n",
  "    var rolling_max_list = [];\n    for(var i=0; i < numbers.length; i++){\n  \
    \      var min_rolling_max_num = numbers[i];\n        for(var j=i+1; j< numbers.length;\
    \ j++){\n            if(numbers[j] > min_rolling_max_num){\n                min_rolling_max_num\
    \ = numbers[j];\n            }\n        }\n        rolling_max_list.push(min_rolling_max_num);\n\
    \    }\n    return rolling_max_list;\n}", "\tvar result = [];\n\tnumbers.forEach(function(elem,\
    \ index){\n\t\tif (index === numbers.length - 1) {\n\t\t\tresult.push(elem);\n\
    \t\t}\n\t\telse {\n\t\t\tif (elem > result[index]) {\n\t\t\t\tresult[index] =\
    \ elem;\n\t\t\t}\n\t\t}\n\t});\n\treturn result;\n}\n", "    var result = [];\n\
    \    var max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max)\n            max = numbers[i];\n    }\n    result.push(max);\n\
    \    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] >= max)\n\
    \            result.push(numbers[i]);\n    }\n    return result;\n}\n</code>\n\
    For some reason, the result is slightly different.\n<|/ a tags=javascript,arrays,algorithm,max\
    \ |>\n<| a tags=javascript,arrays,algorithm,max dscore=1 |>\nThe code below finds\
    \ the max value of the rolling window. \n<code>\nvar rollingMax = function(arr)\
    \ {\n  var rollingMaxArr = [];\n  arr.forEach(function(el){\n      rollingMaxArr.push(Math.max.apply(null,\
    \ arr));\n  });\n  return rollingMaxArr;\n}\n</code>\n<|/ a |>\n<| c |>\nJust\
    \ for information, this solution doesn't work if your array has only negative\
    \ values, or negative and positive values.\n<|/ c |>\n<| a dscore=1 |>\nAnother\
    \ way to achieve this is by using the array map function like this:\n<code>\n\
    var rollingMax = arr => arr.map((v, i) => (i == 0) ? v : Math.max(arr[i-1], arr[i]));\n\
    </code>\n<|/ a tags=javascript,arrays,algorithm,max |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding how and/or why\
    \ it solves the problem would improve the answer's long-term value.\n<|/ c |>\n\
    <| a |>\nYou can do this using Array.reduce and Array.concat.\n<code>", "    var\
    \ max = Number.MIN_VALUE;\n    var max_roll = 0;\n\n    for (var i=0; i<numbers.length;\
    \ i++){\n        if (max < numbers[i]){\n            max = numbers[i];\n     \
    \       max_roll = i;\n        }\n    }\n    return numbers;\n}\n", "    var max_index\
    \ = numbers.length;\n    var max_value = 0;\n    for(var index = 0; index < max_index;\
    \ index++){\n        if(numbers[index] > max_value){\n            max_value =\
    \ numbers[index];\n        }\n    }\n    return max_value;\n}\n", "\tvar _numbers\
    \ = numbers.map(function(item){\n\t\treturn Math.floor(item);\n\t});\n\tvar results\
    \ = [];\n\t\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tvar min = _numbers[i\
    \ - 1];\n\t\tvar max = _numbers[i];\n\t\tvar last_max = numbers[i-1];\n\t\tvar\
    \ current_max = numbers[i];\n\t\t\n\t\tfor (var j = i-1; j >= 0; j--){\n\t\t\t\
    if (last_max < current_max){\n\t\t\t\tmax = current_max;\n\t\t\t\tlast_max = numbers[j];\n\
    \t\t\t}\n\t\t\tcurrent_max = numbers[j];\n\t\t}\n\t\t\n\t\tresults.push(max);\n\
    \t}\n\t\n\treturn results;\n}\n\n", "  var rolling_max_values=[];\n  var number_of_elements=0;\n\
    \  \n  for (var i=0;i<numbers.length;i++){\n    var value=numbers[i];\n    \n\
    \    if (value > rolling_max_values.length){\n      rolling_max_values = new Array(value);\n\
    \    }\n    \n    rolling_max_values[i] = Math.max.apply(Math,rolling_max_values.slice(i,i+1));\n\
    \    number_of_elements++;\n  }\n  \n  return rolling_max_values;\n}\n", "\tlet\
    \ result = [];\n\tlet tmp = 0;\n\tfor(let index = 0; index < numbers.length; index++){\n\
    \t\ttmp = numbers[index] > tmp ? numbers[index] : tmp;\n\t\tresult.push(tmp);\n\
    \t}\n\treturn result;\n}\n", "  var newArray = [];\n  var rolling_max = 0;\n \
    \ var index = 0;\n  for (var i = 0; i < numbers.length; i++){\n    if (rolling_max\
    \ < numbers[i]) {\n      rolling_max = numbers[i];\n      index = i;\n    }\n\
    \  }\n  newArray.push(rolling_max);\n  newArray.push(numbers[index]);\n  return\
    \ newArray;\n}\n\n", "\tif(numbers.length<2){\n\t\treturn [];\n\t}\n\treturn numbers.reduce(function(prev,\
    \ current, index, arr){\n\t\treturn Math.max(prev, current);\n\t}, numbers[0]);\n\
    }\n", "    var ns = numbers.map(function (n){\n        return n;\n    });\n  \
    \  while(ns.length){\n        ns.push(ns.shift());\n    }\n    return ns;\n}\n",
  "\tvar res = [];\n\tvar rollingMax = 0;\n\tfor(var i=0; i<numbers.length; i++){\n\
    \t\tvar tmp = numbers[i];\n\t\trollingMax = numbers[i-1] > rollingMax ? numbers[i-1]\
    \ : rollingMax;\n\t\tres.push(tmp);\n\t}\n\treturn res;\n}\n", "    var result\
    \ = [];\n    for (var i = 0, len = numbers.length; i < len; i++){\n        result.push(rolling_max(numbers.slice(i)));\n\
    \    }\n    if (result.length > 0) {\n        return Math.max.apply(Math, result);\n\
    \    }\n    return null;\n}\n", "\tvar rolling_max = [];\n\tvar max_number = numbers.reduce(function(prev,\
    \ cur){\n\t\treturn Math.max(prev, cur);\n\t});\n\tvar prev_number = numbers[0];\n\
    \tvar curr_number = numbers[0];\n\trolling_max.push(prev_number);\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tcurr_number = numbers[i];\n\t\tprev_number\
    \ = rolling_max[i-1];\n\t\trolling_max.push(Math.max(prev_number, curr_number));\n\
    \t}\n\trolling_max = rolling_max.map(function(x){return x*100/max_number}).slice(0,5);\n\
    \treturn rolling_max;\n}\n", "    var i;\n    var j;\n    var max_element;\n \
    \   var max_element_index;\n    var rolling_max_index = 0;\n\n    for(i = 0; i\
    \ < numbers.length; i++){\n        max_element = numbers[i];\n\n        for(j\
    \ = 0; j < rolling_max_index; j++){\n            if(max_element < numbers[j]){\n\
    \                max_element = numbers[j];\n                max_element_index\
    \ = j;\n            }\n        }\n\n        if(max_element != numbers[rolling_max_index]){\n\
    \            numbers[rolling_max_index] = max_element;\n            rolling_max_index++;\n\
    \        }\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
