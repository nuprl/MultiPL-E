{
  "language": "lua",
  "name": "HumanEval_7_filter_by_substring",
  "results": [
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in pairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local filtered = {}\n    for _, string in pairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in pairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    },
    {
      "exit_code": 0,
      "program": "-- Filter an input table of strings only for ones that contain given substring\n-- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings, substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string:find(substring) ~= nil then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661938069
    }
  ]
}