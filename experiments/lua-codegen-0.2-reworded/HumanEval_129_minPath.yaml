name: HumanEval_129_minPath
language: lua
prompt: "-- Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n-- each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have\
  \ to find the minimum path of length k in the grid. You can start\n-- from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n-- in other words,\
  \ you can go to cells which share an edge with you current\n-- cell.\n-- Please\
  \ note that a path of length k means visiting exactly k cells (not\n-- necessarily\
  \ distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered\
  \ less than a path B (of length k) if\n-- after making the ordered tables of the\
  \ values on the cells that A and B go\n-- through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n-- than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer\
  \ is unique.\n-- Return an ordered table of the values on the cells that the minimum\
  \ path go through.\n-- Examples:    \n-- >>> minPath([ [1,2,3], [4,5,6], [7,8,9]],\
  \ 3)\n-- [1, 2, 1]\n-- >>> minPath([ [5,9,3], [4,1,6], [7,8,2]], 1)\n-- [1]\nlocal\
  \ function minPath(grid, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n\
  \    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n\
  \    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n   \
  \ lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14,\
  \ 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5,\
  \ 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n  \
  \  lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3,\
  \ 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7,\
  \ 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1,\
  \ 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16,\
  \ 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2,\
  \ 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6,\
  \ 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1,\
  \ 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1,\
  \ 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local i, j, n = #grid, #grid[1], #grid[1][1]\n    local res = {}\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if grid[i][j] == k\
    \ then\n                res = {i, j}\n                break\n            end\n\
    \        end\n        if res ~= {} then\n            break\n        end\n    end\n\
    \    return res\nend", "    local tbl = {}\n    for i = 1, #grid, 1 do\n     \
    \   for j = 1, #grid[i], 1 do\n            tbl[i, j] = grid[i][j]\n        end\n\
    \    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n           \
    \ for k = 1, #grid[i], 1 do\n                if grid[i][k] < grid[k][j] then\n\
    \                    tbl[i, j] = grid[i][k]\n                end\n           \
    \ end\n        end\n    end\n    return tbl\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n       \
    \     if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j\
    \ % N][j / N]\n            end\n        end\n    end\n    return result\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n\
    \                result[j] = grid[j % N][j / N]\n            end\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            result[i] = result[i] or\
    \ {}\n            result[i][j] = grid[i][j]\n        end\n    end\n    for i =\
    \ 1, #result, 1 do\n        for j = 1, #result[i], 1 do\n            for k = 1,\
    \ #result[i][j], 1 do\n                result[i][j] = result[i][j] or {}\n   \
    \             result[i][j][k] = result[i][j][k] or {}\n                result[i][j][k][1]\
    \ = result[i][j][k][1] or {}\n                result[i][j][k][1][1] = result[i][j][k][1][1]\
    \ or {}\n                result[i][j][k][1][1][1] = result[i][j][k][1][1][1] or\
    \ {}\n                result[i][j][k][1][1][1][1] = result[i][j][k][1][1][1][1]\
    \ or {}\n                result[i][j][k][1][1][1][1][1] = result[i][j][k][1][1][1][1][1]\
    \ or {}\n                result[i][j][k][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1]\
    \ or {}\n                result[i][j][k][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1]\
    \ or {}\n                result[i][j][k][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1]\
    \ or {}\n                result[i][j][k][1][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1][1]",
  "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n\
    \        grid = grid[1..]\n        i = i + 1\n    return path\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n\
    \        result[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n\
    \            if grid[i][j] == 0 then\n                result[i * N + j] = 0\n\
    \            elseif grid[i][j] == 1 then\n                result[i * N + j] =\
    \ 1\n            elseif grid[i][j] == 2 then\n                result[i * N + j]\
    \ = 2\n            end\n        end\n    end\n    for i = 1, M do\n        for\
    \ j = 1, M do\n            if result[i] == result[j] then\n                result[i]\
    \ = result[j]\n            elseif result[i] < result[j] then\n               \
    \ result[i] = result[j]\n            end\n        end\n    end\n    for i = 1,\
    \ k do\n        result[i] = result[i] + 1\n    end\n    return result\nend", " \
    \   local i, j, res = 1, 1, {}\n    for i = 1, #grid, 2 do\n        for j = 1,\
    \ #grid[i], 2 do\n            if grid[i][j] > grid[i - 1][j] and grid[i][j] >\
    \ grid[i][j - 1] then\n                res[k] = grid[i][j]\n                k\
    \ = k - 1\n                if k == 0 then\n                    return res\n  \
    \              end\n            end\n        end\n    end\nend", "    local path\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #path, 1\
    \ do\n        for j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i,\
    \ j], path[i-1, j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][(i / N) % N]\n    end\n    for\
    \ i = 2, M do\n        for j = 1, N do\n            if grid[j][(j + i - 1) % N]\
    \ < grid[j][(j - 1) % N] then\n                result[i] = grid[j][(j + i - 1)\
    \ % N]\n                break\n            end\n        end\n    end\n    for\
    \ i = 1, M do\n        for j = 1, N do\n            if grid[j][(j + i - 1) % N]\
    \ < result[i] then\n                result[i] = grid[j][(j + i - 1) % N]\n   \
    \         end\n        end\n    end\n    return result[k]\nend", "    local N\
    \ = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n \
    \       result[i] = i\n    end\n    for i = 1, M do\n        for j = 1, N do\n\
    \            if grid[j][i] == 0 then\n                break\n            end\n\
    \        end\n        for j = 1, N do\n            if grid[j][i] == 0 then\n \
    \               break\n            end\n        end\n        for j = 1, N do\n\
    \            for k = 1, N do\n                if grid[j][k] == 0 then\n      \
    \              break\n                end\n            end\n            for k\
    \ = 1, N do\n                if grid[k][i] == 0 then\n                    break\n\
    \                end\n            end\n            for k = 1, N do\n         \
    \       for l = 1, N do\n                    if grid[k][l] == 0 then\n       \
    \                 break\n                    end\n                end\n      \
    \          for l = 1, N do\n                    if grid[j][l] == 0 then\n    \
    \                    break\n                    end\n                end\n   \
    \             for l = 1, N do\n                    for m = 1, N do\n         \
    \               if grid[l][m] == 0 then\n                            break\n \
    \                       end\n                    end\n                    for\
    \ m = 1, N do\n                        if grid[k][m] == 0 then\n             \
    \               break\n                        end\n                    end\n\
    \                    for m = 1, N do\n                        for n = 1, N do\n\
    \                            if grid[m][n] == 0 then\n                       \
    \         break\n                            end\n                        end\n\
    \                        for n = 1, N do\n                            if grid[l][n]\
    \ == 0 then\n                                break\n                         \
    \   end\n                        end\n                        for n = 1, N do\n\
    \                            for o = 1, N do\n                               \
    \ if grid[n][o] == 0 then\n                                    break\n       \
    \                         end\n                            end\n             \
    \               for o = 1, N do\n                                if grid[m][o]\
    \ == 0 then\n                                    break\n                     \
    \           end\n                            end\n                           \
    \ for o = 1, N do\n                                for p = 1, N do\n         \
    \                           if grid[o][p] == 0 then\n                        \
    \                break\n                                    end\n            \
    \                    end\n                                for p = 1, N do", " \
    \   local i, j, path = 1, 1, [1]\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                path\
    \ = path .. grid[i][j]\n                while path[path.length - 1] == path[path.length\
    \ - 2] do\n                    path = path .. grid[i][j]\n                end\n\
    \                path = path .. 1\n                path = path .. grid[i][j]\n\
    \            end\n        end\n    end\n    return path\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result\
    \ = {}\n    while i <= M and j <= M and i <= k and j <= k do\n        if grid[i][j]\
    \ == 1 then\n            result[i] = j\n            i = i + 1\n            j =\
    \ j + 1\n        else\n            i = i + 1\n    end\n    return result\nend",
  "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local\
    \ table = {}\n    local min = M\n    while i <= N and j <= N and path <= k do\n\
    \        table[i] = j\n        if grid[i][j] < min then min = grid[i][j]\n   \
    \     if i > 1 and grid[i - 1][j] < min then min = grid[i - 1][j]\n        if\
    \ j > 1 and grid[i][j - 1] < min then min = grid[i][j - 1]\n        if i < N and\
    \ j < N and grid[i + 1][j + 1] < min then min = grid[i + 1][j + 1]\n        if\
    \ i < N and grid[i + 1][j] < min then min = grid[i + 1][j]\n        if j < N and\
    \ grid[i][j + 1] < min then min = grid[i][j + 1]\n        if i > 1 and j < N and\
    \ grid[i - 1][j + 1] < min then min = grid[i - 1][j + 1]\n        if i > 1 and\
    \ grid[i - 1][j] < min then min = grid[i - 1][j]\n        if j > 1 and grid[i][j\
    \ - 1] < min then min = grid[i][j - 1]\n        path = path + 1\n        i = i\
    \ + 1\n        j = j + 1\n    return table\nend", "    local result = {}\n   \
    \ local i, j\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == k then\n                result[i] = j\n        \
    \        break\n        end\n    end\n    return result\nend", "    local i, j,\
    \ min_path = 1, 1, 1\n    for i = 1, #grid do\n        for j = 1, #grid[i] do\n\
    \            if grid[i][j] < min_path then\n                min_path = grid[i][j]\n\
    \                i, j = i, j\n            end\n        end\n    end\n    return\
    \ i, j, min_path\nend", "    local N = #grid\n    local M = N * N\n    local result\
    \ = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n  \
    \  end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j %\
    \ N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j\
    \ - 1) / N]\n            end\n        end\n    end\n    return result\nend", " \
    \   local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, M - k\
    \ do\n        for j = 1, M - k do\n            if grid[i % N][j / N] < grid[j\
    \ % N][i / N] then\n                result[i] = grid[i % N][j / N]\n         \
    \       break\n            end\n        end\n    end\n    return result\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1,\
    \ M do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < grid[i\
    \ % N][(i - 1) / N] then\n                result[i] = result[i] + 1\n        \
    \    end\n        end\n    end\n    return result[k]\nend", "    local N = #grid\n\
    \    local M = N * N\n    local i, j\n    local res = {}\n    for i = 1, M do\n\
    \        for j = 1, N do\n            if grid[i][j] == k then\n              \
    \  res[i] = j\n                break\n        end\n    end\n    for i = 1, M do\n\
    \        for j = 1, N do\n            if grid[i][j] == k then\n              \
    \  res[j] = i\n                break\n        end\n    end\n    return res\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1,\
    \ k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j]\
    \ then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n\
    \        end\n    end\n    return result\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n       \
    \     if grid[i % N][j / N] < grid[j % N][i / N] then\n                result[i]\
    \ = math.min(result[i], result[j] + 1)\n            end\n        end\n    end\n\
    \    return result[1]\nend", "    local N = #grid\n    local M = N * N\n    local\
    \ i, j, path = 1, 1, 1\n    local lst = {}\n    for i = 1, N do\n        for j\
    \ = 1, N do\n            if grid[i][j] == path then\n                lst[path]\
    \ = j\n                path = grid[i][j] + 1\n                break\n        end\n\
    \    end\n    for i = 1, k do\n        path = grid[lst[path]][path] + 1\n    \
    \    path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path] +\
    \ 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst[path]][path] + 1\n        path = grid[lst[path]][path]\
    \ + 1\n        path = grid[lst", "    local path = {}\n    for i = 1, k, 1 do\n\
    \        path[i] = grid[1][1]\n        for j = 2, #grid[1] do\n            path[i]\
    \ = min(path[i], grid[i][j])\n        end\n    end\n    return path\nend", " \
    \   local N = #grid\n    local M = N * N\n    local result = {}\n    local i =\
    \ 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n        i =\
    \ i + 1\n    end\n    i = 1\n    while i <= M do\n        if i % N == 1 or i %\
    \ N == N - 1 or i / N == 1 or i / N == N - 1 then\n            result[i] = math.inf\n\
    \        else\n            result[i] = math.min(result[i], result[i - 1], result[i\
    \ + 1], result[i - N], result[i + N])\n        end\n        i = i + 1\n    end\n\
    \    return result[k]\nend", "    local path = {}\n    local i = 1\n    while\
    \ i <= k do\n        path[i] = 1\n        i = i + 1\n    end\n    for i = 1, #grid,\
    \ 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] < grid[i-1][j]\
    \ and grid[i][j] < grid[i][j-1] and grid[i][j] < grid[i+1][j] and grid[i][j] <\
    \ grid[i][j+1] then\n                path[i] = path[i] + 1\n            end\n\
    \        end\n    end\n    return path\nend", "    local tbl = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            tbl[i, j] = grid[i][j]\n\
    \        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #tbl, 1 do\n\
    \            for k = 1, #tbl, 1 do\n                if tbl[j, k] > tbl[j, k -\
    \ 1] then\n                    tbl[j, k] = tbl[j, k - 1]\n                end\n\
    \            end\n        end\n    end\n    return tbl\nend", "    local i, j,\
    \ min_path, min_value, min_i, min_j\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                min_path\
    \ = grid[i][j]\n                min_value = grid[i][j]\n                min_i\
    \ = i\n                min_j = j\n                break\n        end\n    end\n\
    \    return min_path\nend", "    local result = {}\n    local i = 1\n    while\
    \ i <= k\n        for j = 1, grid.length - 1\n            if grid[j][i] < grid[j\
    \ + 1][i]\n                result[i] = grid[j][i]\n                break\n   \
    \     end\n        i = i + 1\n    end\n    return result\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n   \
    \     result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for\
    \ j = 1, M do\n            if grid[i % N][j / N] < grid[j % N][i / N] then\n \
    \               result[i] = result[i] or result[j]\n            end\n        end\n\
    \    end\n    return result[k]\nend", "    local N = #grid\n    local M = N *\
    \ N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i %\
    \ N][i / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n         \
    \   if grid[j % N][j / N] < result[i] and grid[i % N][i / N] < grid[j % N][j /\
    \ N] then\n                result[i] = grid[j % N][j / N]\n            end\n \
    \       end\n    end\n    for i = 1, k do\n        for j = 1, M do\n         \
    \   if result[j] < result[i] then\n                result[i] = result[j]\n   \
    \         end\n        end\n    end\n    return result\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1,\
    \ M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n           \
    \     result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n   \
    \ end\n    return result\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local result = {}\n    local i = 1\n    while i <= k and i <= M do\n      \
    \  local j = 1\n        while j <= N and j <= M do\n            if grid[j][i]\
    \ > 0 then\n                if result[j] == nil then\n                    result[j]\
    \ = grid[j][i]\n                else\n                    result[j] = math.min(result[j],\
    \ grid[j][i])\n            end\n            j = j + 1\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend", "    local N = #grid\n    local M\
    \ = N * N\n    local res = {}\n    local i = 1\n    while i <= k\n        local\
    \ j = 1\n        while j <= N\n            if grid[j][i] < M then\n          \
    \      res[j] = grid[j][i]\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local i, j, path = 1, 1, {}\n    for i = 1, N do\n        for\
    \ j = 1, N do\n            path[i] = path[i] or {}\n            path[i][j] = grid[i][j]\n\
    \            if i > 1 and j > 1 and grid[i - 1][j - 1] < grid[i][j] then\n   \
    \             path[i][j] = path[i - 1][j - 1]\n            end\n        end\n\
    \    end\n    for i = 1, k do\n        for j = 1, N do\n            if path[i][j]\
    \ == M then\n                return path\n            end\n        end\n    end\n\
    \    return path\nend", "    local N = #grid\n    local M = N * N\n    local i,\
    \ j, path = 1, 1, 1\n    local result = {}\n    for i = 1, N do\n        for j\
    \ = 1, N do\n            path = path + grid[i][j]\n            if path >= M then\n\
    \                path = 1\n            end\n            if path == k then\n  \
    \              result[i] = j\n                break\n            end\n       \
    \ end\n    end\n    return result\nend", "    local N = #grid\n    local M = N\
    \ * N\n    local i, j, path = 1, 1, {}\n    local lst = {}\n    for i = 1, N do\n\
    \        for j = 1, N do\n            if grid[i][j] == 1 then\n              \
    \  path[i] = j\n                lst[i] = j\n            end\n        end\n   \
    \ end\n    while i <= k do\n        for j = 1, N do\n            if path[j] ==\
    \ 1 then\n                lst[j] = lst[path[j]]\n            end\n        end\n\
    \        i = i + 1\n    end\n    for i = 1, N do\n        for j = 1, N do\n  \
    \          if path[j] == 1 then\n                lst[j] = lst[path[j]]\n     \
    \       end\n        end\n        i = i + 1\n    end\n    for i = 1, N do\n  \
    \      for j = 1, N do\n            if path[j] == 1 then\n                lst[j]\
    \ = lst[path[j]]\n            end\n        end\n        i = i + 1\n    end\n \
    \   return lst\nend", "    local path = {}\n    local i = 1\n    while i <= k\n\
    \        path[i] = 1\n        i = i + 1\n    end\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] < path[1] then\n\
    \                path[1] = grid[i][j]\n            end\n            if i > 1 and\
    \ grid[i][j] < path[2] then\n                path[2] = grid[i][j]\n          \
    \  end\n            if j > 1 and grid[i][j] < path[3] then\n                path[3]\
    \ = grid[i][j]\n            end\n        end\n    end\n    return path\nend",
  "    local N = #grid\n    local M = N * N\n    local res = {}\n    for i = 1, M\
    \ do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, M - k do\n\
    \        local min = M + 1\n        for j = 1, M do\n            if res[j] < res[j\
    \ + k] then\n                min = j\n            end\n        end\n        res[i]\
    \ = res[min]\n    end\n    return res\nend", "    local tbl = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == k then\n                tbl[i] = j\n                break\n        end\n\
    \    end\n    return tbl\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n  \
    \  for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n\
    \                result[grid[i][j]] = result[grid[i - 1][j]]\n            elseif\
    \ grid[i][j] == k then\n                result[grid[i][j]] = result[grid[i][j\
    \ - 1]]\n            elseif grid[i][j] == grid[i - 1][j] then\n              \
    \  result[grid[i][j]] = result[grid[i - 1][j]]\n            elseif grid[i][j]\
    \ == grid[i][j - 1] then\n                result[grid[i][j]] = result[grid[i][j\
    \ - 1]]\n            else\n                result[grid[i][j]] = result[grid[i\
    \ - 1][j]]\n            end\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            result[i, j] = grid[i][j]\n        end\n    end\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if result[i,\
    \ j] < result[i-1, j] and result[i, j] < result[i, j-1] then\n               \
    \ result[i, j] = result[i-1, j]\n            end\n            if result[i, j]\
    \ < result[i+1, j] and result[i, j] < result[i, j+1] then\n                result[i,\
    \ j] = result[i+1, j]\n            end\n        end\n    end\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if result[i, j] < result[i-1,\
    \ j] and result[i, j] < result[i, j-1] then\n                result[i, j] = result[i-1,\
    \ j]\n            end\n            if result[i, j] < result[i+1, j] and result[i,\
    \ j] < result[i, j+1] then\n                result[i, j] = result[i+1, j]\n  \
    \          end\n        end\n    end\n    return result[k, k]\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i =\
    \ 1, N do\n        for j = 1, N do\n            lst[i] = lst[i] or grid[i][j]\n\
    \            if i > 1 and lst[i] < lst[i - 1] then\n                lst[i] = lst[i\
    \ - 1]\n            if j > 1 and lst[i] < lst[i - N] then\n                lst[i]\
    \ = lst[i - N]\n            if i < N and lst[i] < lst[i + 1] then\n          \
    \      lst[i] = lst[i + 1]\n            if j < N and lst[i] < lst[i + N] then\n\
    \                lst[i] = lst[i + N]\n        end\n    end\n    for i = 1, k do\n\
    \        lst[i] = lst[i] or 1\n    end\n    return lst\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j / N] < result[j] then\n                result[j]\
    \ = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1,\
    \ k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j]\
    \ then\n                result[j] = grid[j % N][j / N]\n            end\n    \
    \    end\n    end\n    return result\nend", "    local N = #grid\n    local M\
    \ = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 2, k do\n        for j = 1, M do\n       \
    \     if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j\
    \ % N][j / N]\n            end\n        end\n    end\n    return result\nend",
  "    local path = {}\n    local visited = {}\n    local dfs = function(x, y)\n \
    \       if visited[x] == true then\n            return\n        visited[x] = true\n\
    \        path[#                                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          ", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n       \
    \     result[i] = math.min(result[i], result[i - 1] + grid[j][i / N])\n      \
    \      result[i] = math.min(result[i], result[i - N] + grid[j][i % N])\n     \
    \   end\n    end\n    for i = 1, k do\n        result[i] = math.min(result[i],\
    \ result[i + 1])\n    end\n    return result\nend", "    local result = {}\n \
    \   for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            result[i]\
    \ = result[i] or {}\n            result[i][j] = grid[i][j]\n        end\n    end\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for\
    \ k = 1, #grid[i][j], 1 do\n                if result[i][j] < result[i][k] or\
    \ result[i][k] == nil then\n                    result[i][j] = result[i][k]\n\
    \                end\n            end\n        end\n    end\n    return result[1][1]\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for\
    \ i = 1, k do\n        for j = 1, N do\n            for k = 1, N do\n        \
    \        if grid[k][j] < grid[i][j] then\n                    result[i] = grid[k][j]\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "    local N = #grid\n    local M = N * N\n\
    \    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n\
    \        while j <= k\n            local value = grid[i - 1][j - 1]\n        \
    \    if value == M then\n                result[i] = j\n                break\n\
    \            else\n                if value > result[i] then\n               \
    \     result[i] = value\n                end\n            end\n            j =\
    \ j + 1\n        end\n        i = i + 1\n    end\n    return result\nend", " \
    \   local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] > k then\n                t[i] = j\n              \
    \  break\n            end\n        end\n    end\n    return t\nend", "    local\
    \ path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[i][1]\n\
    \        i = i + 1\n    return path\nend", "    local N = #grid\n    local M =\
    \ N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i\
    \ <= k and j <= M do\n        if grid[i][j] > grid[i - 1][j] then\n          \
    \  result[i] = j\n            i = i + 1\n        else if grid[i][j] > grid[i][j\
    \ - 1] then\n            result[i] = j\n            j = j + 1\n        else\n\
    \            result[i] = j\n            i = i + 1\n            j = j + 1\n   \
    \ end\n    return result\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local i, j\n    local min = M\n    local path = {}\n    for i = 1, N do\n \
    \       for j = 1, N do\n            path[i * N + j] = grid[i][j]\n          \
    \  if i > 1 and grid[i - 1][j] < path[i * N + j] then\n                path[i\
    \ * N + j] = grid[i - 1][j]\n            if j > 1 and grid[i][j - 1] < path[i\
    \ * N + j] then\n                path[i * N + j] = grid[i][j - 1]\n          \
    \  if path[i * N + j] < min then\n                min = path[i * N + j]\n    \
    \        end\n        end\n    end\n    return path[1:k]\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local i\n    local j\n    local lst = {}\n \
    \   for i = 1, N do\n        for j = 1, N do\n            lst[i * M + j] = grid[i][j]\n\
    \        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n        \
    \    lst[i * M + j] = math.min(lst[(i - 1) * M + j], lst[i * M + (j - 1)], lst[(i\
    \ - 1) * M + (j - 1)])\n        end\n    end\n    return lst\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n\
    \        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n      \
    \  for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n     \
    \           result[j] = grid[j % N][j / N]\n            end\n        end\n   \
    \ end\n    return result\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local i, j, path = 1, 1, 1\n    local lst = {}\n    for i = 1, N do\n     \
    \   for j = 1, N do\n            if grid[i][j] == 0 then\n                path\
    \ = path + 1\n                if path == k then\n                    lst[path]\
    \ = i\n                    lst[path] = j\n                    path = 1\n     \
    \           end\n            end\n        end\n    end\n    return lst\nend",
  "    local N = #grid\n    local M = N * N\n    local res = {}\n    local i = 1\n\
    \    while i <= k\n        local j = 1\n        while j <= k\n            if grid[i][j]\
    \ < M then\n                res[i] = j\n                break\n            j =\
    \ j + 1\n        end\n        i = i + 1\n    end\n    return res\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local\
    \ res = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i - 1][j]\
    \ then\n            res[i] = grid[i][j]\n            i = i + 1\n        else\n\
    \            res[i] = grid[i - 1][j]\n            j = j + 1\n        end\n   \
    \ end\n    return res\nend", "    local N = #grid\n    local M = N * N\n    local\
    \ i, j\n    local lst = {}\n    for i = 1, M do\n        lst[i] = grid[i % N][i\
    \ / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            lst[j]\
    \ = math.min(lst[j], lst[j + 1])\n            lst[j] = math.min(lst[j], lst[j\
    \ - 1])\n            lst[j] = math.min(lst[j], lst[j + N])\n            lst[j]\
    \ = math.min(lst[j], lst[j - N])\n        end\n    end\n    return lst\nend",
  "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1\
    \ do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1,\
    \ #path, 1 do\n        for j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i,\
    \ j], path[i-1, j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\n\
    end", "    local tbl = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == k then\n                tbl[i] = j\n    \
    \            break\n        end\n    end\n    return tbl\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n   \
    \     result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for\
    \ j = 1, N do\n            if grid[j][i % N] < grid[j][(i - 1) / N] then\n   \
    \             result[i] = grid[j][i % N]\n                break\n            end\n\
    \        end\n    end\n    for i = 1, k do\n        for j = 1, M do\n        \
    \    if result[j] == result[(j - 1)] then\n                result[j] = result[(j\
    \ - 1)]\n            else\n                result[j] = result[(j - 1)]\n     \
    \           break\n            end\n        end\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    local\
    \ i = 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n       \
    \ i = i + 1\n    end\n    i = 1\n    while i <= M do\n        if i % N == 1 or\
    \ i % N == N - 1 or i / N == 1 or i / N == N - 1 then\n            result[i] =\
    \ math.inf\n        else\n            result[i] = math.min(result[i - 1], result[i\
    \ + 1], result[i - N], result[i + N])\n        end\n        i = i + 1\n    end\n\
    \    return result[k]\nend", "    local N = #grid\n    local M = N * N\n    local\
    \ result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) /\
    \ N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j\
    \ % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j\
    \ - 1) / N]\n            end\n        end\n    end\n    return result\nend", " \
    \   local i, j, path = 1, 1, {}\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            path[path[i, j]] = grid[i][j]\n            path[i,\
    \ j] = path[i, j] + path[i - 1, j] + path[i, j - 1]\n        end\n    end\n  \
    \  for i = 1, k, 1 do\n        path[path[i]] = i\n        path[i] = path[i] +\
    \ path[i - 1]\n    end\n    return path\nend", "    local t = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n\
    \        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            for k = 1, #grid, 1 do\n                if grid[k][j] > grid[i][j]\
    \ then\n                    t[i, j] = grid[k][j]\n                end\n      \
    \      end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][k]\
    \ > grid[i][j] then\n                    t[i, j] = grid[i][k]\n              \
    \  end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n       \
    \         if grid[j][k] > grid[i][j] then\n                    t[i, j] = grid[j][k]\n\
    \                end\n            end\n        end\n    end\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n\
    \                if grid[k][i] > grid[i][j] then\n                    t[i, j]\
    \ = grid[k][i]\n                end\n            end\n        end\n    end\n \
    \   for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for\
    \ k = 1, #grid, 1 do\n                if grid[i][k] > grid[i][j] then\n      \
    \              t[i, j] = grid[i][k]\n                end\n            end\n  \
    \      end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            for k = 1, #grid, 1 do\n                if grid[j][k] > grid[",
  "    local path = {}\n    local dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    for\
    \ i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            path[i, j]\
    \ = grid[i][j]\n            for _, d in ipairs(dirs) do\n                if grid[i\
    \ + d[1]][j + d[0]] > grid[i][j] then\n                    path[i, j] = grid[i][j]\n\
    \                    break\n            end\n        end\n    end\n    for i =\
    \ 1, #path, 2 do\n        for j = 1, #path[i], 2 do\n            path[i, j] =\
    \ path[i][j]\n            for _, d in ipairs(dirs) do\n                if path[i\
    \ + d[1]][j + d[0]] > path[i][j] then\n                    path[i, j] = path[i][j]\n\
    \                    break\n            end\n        end\n    end\n    return\
    \ path[1, 1] .. \" \" .. path[k, k]\nend", "    local path = {}\n    for i = 1,\
    \ #grid, #grid[1] do\n        for j = 1, #grid[i], #grid[i][1] do\n          \
    \  path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, #grid[1]\
    \ do\n        for j = 1, #grid[i], #grid[i][1] do\n            for jj = 1, #grid[i][j],\
    \ #grid[i][j][1] do\n                path[i, j] = math.min(path[i, j], path[i,\
    \ jj] + path[jj, j])\n            end\n        end\n    end\n    return path[1,\
    \ 1]\nend", "    local path = {}\n    local i = 1\n    while i <= k\n        path[i]\
    \ = grid[1][1]\n        grid = grid[1..]\n        i = i + 1\n    return path\n\
    end", "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            path[i, j] = grid[i][j]\n            if i > 1 and grid[i -\
    \ 1][j] < path[i - 1, j] then\n                path[i, j] = path[i - 1, j]\n \
    \           if j > 1 and grid[i][j - 1] < path[i, j - 1] then\n              \
    \  path[i, j] = path[i, j - 1]\n            if i > 1 and j > 1 and grid[i - 1][j\
    \ - 1] < path[i - 1, j - 1] then\n                path[i, j] = path[i - 1, j -\
    \ 1]\n        end\n    end\n    return path[k, k]\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j / N] < result[j] then\n                result[j]\
    \ = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\n\
    end", "    local path = {}\n    local visited = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if visited[i] == false and visited[j]\
    \ == false then\n                visited[i] = true\n                visited[j]\
    \ = true\n                path[i] = j\n                if k == 1 then\n      \
    \              return path\n                else\n                    path[k]\
    \ = i\n                    k = k - 1\n                    path = path\n      \
    \          end\n            end\n        end\n    end\nend", "    local N = #grid\n\
    \    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i\
    \ = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if res[j] < res[j + 1] then\n          \
    \      res[j + 1] = res[j]\n                j = j - 1\n            end\n     \
    \   end\n    end\n    return res\nend", "    local path = {}\n    for i = 1, k,\
    \ 1 do\n        path[i] = grid[1][1]\n        for j = 2, #grid[1] do\n       \
    \     if grid[i][j] < path[i] then\n                path[i] = grid[i][j]\n   \
    \         end\n        end\n    end\n    return path\nend", "    local path =\
    \ {}\n    local i = 1\n    for i = 1, #grid, k do\n        local j = 1\n     \
    \   for j = 1, #grid[i], k do\n            path[i] = path[i] or {}\n         \
    \   path[i][j] = grid[i][j]\n            if path[i][j] > path[i][j - 1] then\n\
    \                path[i][j] = path[i][j - 1]\n            end\n            if\
    \ path[i][j] > path[i - 1][j] then\n                path[i][j] = path[i - 1][j]\n\
    \            end\n            if path[i][j] > path[i - 1][j - 1] then\n      \
    \          path[i][j] = path[i - 1][j - 1]\n            end\n        end\n   \
    \ end\n    return path\nend", "    local path = {}\n    for i = 1, k + 1 do\n\
    \        path[i] = 0\n    end\n    for i = 1, grid[1] do\n        for j = 1, grid[2]\
    \ do\n            path[k] = grid[i][j]\n            for jj = 1, k - 1 do\n   \
    \             if path[jj] < path[k] then\n                    path[k] = path[jj]\n\
    \                end\n            end\n        end\n    end\n    return path\n\
    end", "    local path = {}\n    for i = 1, k, 1 do\n        path[i] = grid[1][1]\n\
    \        for j = 2, #grid[1] do\n            path[i] = min(path[i], grid[j][i])\n\
    \        end\n    end\n    return path\nend", "    local path = {}\n    local\
    \ i = 1\n    while i <= k\n        path[i] = grid[1][1]\n        grid = grid[1..]\n\
    \        i = i + 1\n    return path\nend", "    local N = #grid\n    local M =\
    \ N * N\n    local i\n    local j\n    local min\n    local min_index\n    local\
    \ min_value\n    local min_path\n    local min_path_index\n    local min_path_value\n\
    \    local min_path_path\n    local min_path_path_index\n    local min_path_path_value\n\
    \    local min_path_path_path\n    local min_path_path_path_index\n    local min_path_path_path_value\n\
    \    local min_path_path_path_path\n    local min_path_path_path_path_index\n\
    \    local min_path_path_path_path_value\n    local min_path_path_path_path_path\n\
    \    local min_path_path_path_path_path_index\n    local min_path_path_path_path_path_value\n\
    \    local min_path_path_path_path_path_path\n    local min_path_path_path_path_path_path_index\n\
    \    local min_path_path_path_path_path_path_value\n    local min_path_path_path_path_path_path_path\n\
    \    local min_path_path_path_path_path_path_path_index\n    local min_path_path_path_path_path_path_path_value\n\
    \    local min_path_path_path_path_path_path_path_path\n    local min_path_path_path_path_path_path_path_path_index\n\
    \    local min_path_path_path_path_path_path_path_path_value\n    local min_path_path_path_path_path_path_path_path_path\n\
    \    local min_path_path_path_path_path_path_path_path_path_index\n    local min_path_path_path_path_path_path_path_path_path_value\n\
    \    local min_path_path_path_path_path_path_path_path_path_path\n    local min_path_path_path_path_path_path_path_path_path_path_index\n\
    \    local min_path_path_path", "    local tbl = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n    \
    \            tbl[i] = j\n                break\n        end\n    end\n    return\
    \ tbl\nend", "    local N = #grid\n    local M = N * N\n    local i = 1\n    local\
    \ j = 1\n    local lst = {}\n    while i <= k and j <= M do\n        if grid[i][j]\
    \ > grid[i - 1][j] and grid[i][j] > grid[i][j - 1] then\n            lst[i] =\
    \ j\n            i = i + 1\n        else if grid[i][j] > grid[i - 1][j] then\n\
    \            lst[i] = j\n            j = j + 1\n        else if grid[i][j] > grid[i][j\
    \ - 1] then\n            lst[i] = j\n            j = j + 1\n        else\n   \
    \         i = i + 1\n    end\n    return lst\nend", "    local N = #grid\n   \
    \ local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j / N] < result[j] then\n                result[j]\
    \ = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\n\
    end", "    local path = {}\n    for i = 1, #grid, k do\n        path[i] = grid[i][1]\n\
    \        for j = 2, #grid[i], k do\n            path[i] = min(path[i], path[i-1]\
    \ + grid[i][j])\n        end\n    end\n    return path\nend", "    local path\
    \ = {}\n    for i = 1, #grid, #grid[1] do\n        for j = 1, #grid[i], #grid[i][1]\
    \ do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1,\
    \ #grid, #grid[1] do\n        for j = 1, #grid[i], #grid[i][1] do\n          \
    \  for jj = 1, #grid[i][j], #grid[i][j][1] do\n                path[i, j] = math.min(path[i,\
    \ j], path[i, jj] + path[jj, j])\n            end\n        end\n    end\n    return\
    \ path[1, k]\nend", "    local N = #grid\n    local M = N * N\n    local result\
    \ = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n\
    \    for i = 2, M do\n        for j = 1, N do\n            if grid[j][i % N] <\
    \ grid[j][(i - 1) / N] then\n                result[i] = grid[j][i % N]\n    \
    \            break\n            end\n        end\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if result[j] < result[(j - 1)] then\n  \
    \              result[j] = result[(j - 1)]\n            end\n        end\n   \
    \ end\n    return result\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i /\
    \ N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j\
    \ % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n\
    \            end\n        end\n    end\n    return result\nend", "    local path\
    \ = {}\n    local i = 1\n    while i <= k\n        path[i] = 1\n        i = i\
    \ + 1\n    end\n    for i = 1, grid[1] do\n        for j = 1, grid[2] do\n   \
    \         if grid[i][j] < path[1] then\n                path[1] = grid[i][j]\n\
    \            end\n            if grid[i][j] > path[k] then\n                path[k]\
    \ = grid[i][j]\n            end\n            for j = 2, k do\n               \
    \ if grid[i][j] < path[j] then\n                    path[j] = grid[i][j]\n   \
    \             end\n            end\n        end\n    end\n    return path\nend",
  "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1\
    \ do\n            if grid[i][j] == k then\n                path = path or {i,\
    \ j}\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj]\
    \ == k then\n                        path = path or {i, jj}\n                \
    \    end\n                end\n                for ii = 1, #grid[jj], 1 do\n \
    \                   if grid[jj][ii] == k then\n                        path =\
    \ path or {jj, ii}\n                    end\n                end\n           \
    \ end\n        end\n    end\n    return path\nend", "    local path = {}\n   \
    \ local i = 1\n    while i <= k do\n        path[i] = grid[1][1]\n        i =\
    \ i + 1\n        for j = 2, #grid do\n            path[i] = min(path[i], grid[j][i])\n\
    \        end\n    end\n    return path\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][(i - 1) / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n \
    \           if grid[j % N][(j - 1) / N] < grid[i % N][(i - 1) / N] then\n    \
    \            result[i] = result[i] + 1\n            end\n        end\n    end\n\
    \    for i = 1, M do\n        if result[i] < k then\n            result[i] = result[i]\
    \ + 1\n        end\n    end\n    return result\nend", "    local path = {}\n \
    \   for i = 1, #grid, k do\n        path[i] = grid[i]\n        for j = i + 1,\
    \ #grid, k do\n            if grid[i][j] < grid[i][i] then\n                path[i]\
    \ = grid[i][j]\n            end\n        end\n    end\n    return path\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n\
    \                result[j] = grid[j % N][j / N]\n            end\n        end\n\
    \    end\n    return result\nend", "    local N = #grid\n    local M = N * N\n\
    \    local res = {}\n    local i = 1\n    while i <= k\n        local j = 1\n\
    \        while j <= k\n            local c = 0\n            while c < N * N\n\
    \                if grid[c / M][c % M] == i\n                    c = c + 1\n \
    \               end\n            end\n            if c == N * N\n            \
    \    res[i] = j\n                break\n            end\n            j = j + 1\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local i, j\n    local min = M + 1\n    local\
    \ table = {}\n    for i = 1, N do\n        for j = 1, N do\n            table[i\
    \ * N + j] = grid[i][j]\n        end\n    end\n    for i = 1, k do\n        for\
    \ j = 1, N do\n            table[i * N + j] = math.min(table[(i - 1) * N + j],\
    \ table[i * N + (j - 1)], table[(i - 1) * N + (j - 1)])\n        end\n    end\n\
    \    for i = 1, N do\n        for j = 1, N do\n            table[i * N + j] =\
    \ math.min(table[i * N + j], table[(i - 1) * N + j], table[i * N + (j - 1)], table[(i\
    \ - 1) * N + (j - 1)])\n        end\n    end\n    return table\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local result\
    \ = {}\n    while path <= k\n        if grid[i][j] == M then\n            result[path]\
    \ = M\n            return result\n        end\n        if grid[i][j] == 0 then\n\
    \            path = k + 1\n            return result\n        end\n        if\
    \ grid[i][j] < M then\n            path = path + 1\n            i = i + 1\n  \
    \          if i > N then\n                i = 1\n                j = j + 1\n \
    \           end\n        else\n            path = path + 1\n            j = j\
    \ + 1\n            if j > N then\n                j = 1\n                i = i\
    \ + 1\n            end\n        end\n    end\nend", "    local i, j, min_path\n\
    \    local N = #grid\n    local M = N * N\n    local min_path = {}\n    for i\
    \ = 1, M do\n        min_path[i] = grid[i % N][i / N]\n    end\n    for i = 1,\
    \ M do\n        for j = 1, M do\n            if grid[i % N][j / N] == min_path[j]\
    \ and i / N != j / N then\n                min_path[i] = min_path[j]\n       \
    \     end\n        end\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[i % N][j / N] == min_path[j] then\n                min_path[i]\
    \ = min_path[j]\n            end\n        end\n    end\n    return min_path\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][i // N]\n    end\n    for i = 1,\
    \ M do\n        for j = 1, M do\n            if grid[j % N][j // N] < result[i]\
    \ and grid[i % N][i // N] < result[j] then\n                result[i] = grid[i\
    \ % N][i // N]\n            end\n        end\n    end\n    return result[k]\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for\
    \ i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N]\
    \ < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n   \
    \         end\n        end\n    end\n    return result\nend", "    local N = #grid\n\
    \    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n\
    \    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] and grid[i][j]\
    \ > grid[i][j-1] then\n            result[i] = j\n            i = i + 1\n    \
    \    elseif grid[i][j] > grid[i-1][j] then\n            result[i] = j\n      \
    \      j = j + 1\n        elseif grid[i][j] > grid[i][j-1] then\n            result[i]\
    \ = j\n            j = j + 1\n        else\n            i = i + 1\n    end\n \
    \   return result\nend", "    local N = #grid\n    local M = N * N\n    local\
    \ result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n      \
    \  while j <= N\n            if grid[i - 1][j - 1] < grid[i - 1][j]\n        \
    \        result[j] = grid[i - 1][j - 1]\n            else\n                result[j]\
    \ = grid[i - 1][j]\n            j = j + 1\n        i = i + 1\n    return result\n\
    end", "    local path = {}\n    local i = 1\n    while i <= k do\n        path[i]\
    \ = grid[1][1]\n        grid = grid[1..]\n        i = i + 1\n    end\n    return\
    \ path\nend", "    local N = #grid\n    local M = N * N\n    local i = 1\n   \
    \ local j = 1\n    local result = {}\n    while i <= k and j <= M do\n       \
    \ if grid[i][j] == 1 then\n            result[i] = j\n            i = i + 1\n\
    \        else\n            j = j + 1\n    end\n    return result\nend", "    local\
    \ path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n\
    \        i = i + 1\n    end\n    for i = 2, #grid, 2\n        for j = 2, #grid[i],\
    \ 2\n            path[i] = path[i] + grid[i][j]\n            if path[i] < path[i\
    \ - 1]\n                path[i] = path[i] + grid[i - 1][j]\n            end\n\
    \        end\n    end\n    return path\nend", "    local i, j, min_path = math.inf,\
    \ math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n\
    \                if k == 1 then\n                    min_path[k] = grid[i][j]\n\
    \                end\n            end\n        end\n    end\n    return min_path\n\
    end", "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1,\
    \ [1]\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n     \
    \       path = path .. grid[i][j]\n            i = i + 1\n        elseif grid[i][j]\
    \ == 2 then\n            path = path .. grid[i][j]\n            j = j + 1\n  \
    \      elseif grid[i][j] == 3 then\n            path = path .. grid[i][j]\n  \
    \          i = i + 1\n            j = j + 1\n        else\n            i = i +\
    \ 1\n    end\n    return path\nend", "    local N = #grid\n    local M = N * N\n\
    \    local i, j\n    local path = {}\n    for i = 1, N do\n        for j = 1,\
    \ N do\n            path[i * M + j] = grid[i][j]\n        end\n    end\n    for\
    \ i = 1, k do\n        for j = 1, N do\n            for k = 1, N do\n        \
    \        path[i * M + j] = math.min(path[i * M + j], path[(i - 1) * M + j] + grid[i][j],\
    \ path[i * M + (j - 1)] + grid[i][j], path[(i - 1) * M + (j - 1)] + grid[i][j])\n\
    \            end\n        end\n    end\n    return path\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n   \
    \     result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n   \
    \     for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n\
    \                result[j] = grid[j % N][(j - 1) / N]\n            end\n     \
    \   end\n    end\n    return result\nend", "    local N = #grid\n    local M =\
    \ N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n \
    \       res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for\
    \ j = 1, M do\n            if res[j] > res[j + 1] then\n                res[j\
    \ + 1] = res[j]\n            end\n            if res[j] > res[j - 1] then\n  \
    \              res[j - 1] = res[j]\n            end\n            if res[j] > res[j\
    \ + N] then\n                res[j + N] = res[j]\n            end\n          \
    \  if res[j] > res[j - N] then\n                res[j - N] = res[j]\n        \
    \    end\n        end\n    end\n    return res\nend", "    local N = #grid\n \
    \   local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j / N] < result[j] then\n                result[j]\
    \ = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\n\
    end", "    local path = {}\n    local i = 1\n    local j = 1\n    local min =\
    \ math.inf\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n  \
    \          if grid[i][j] < min then\n                min = grid[i][j]\n      \
    \          path = {i, j}\n            end\n        end\n    end\n    return path\n\
    end", "    local i, j, min, min_i, min_j\n    for i = 1, #grid, 1 do\n       \
    \ for j = 1, #grid[i], 1 do\n            if grid[i][j] < grid[i-1][j] then\n \
    \               min = grid[i][j]\n                min_i = i\n                min_j\
    \ = j\n            end\n        end\n    end\n    return min_i, min_j, min\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n\
    \        for j = 1, N do\n            if grid[j][i % N] < grid[j][(i - 1) / N]\
    \ then\n                result[i] = grid[j][i % N]\n                break\n  \
    \          end\n        end\n    end\n    for i = 1, M do\n        for j = 1,\
    \ N do\n            if grid[j][i % N] < result[i] then\n                result[i]\
    \ = grid[j][i % N]\n            end\n        end\n    end\n    return result[k]\n\
    end", "    local i, j, min = math.inf, math.inf, math.inf\n    for i = 1, #grid\
    \ do\n        for j = 1, #grid[i] do\n            if grid[i][j] < min then\n \
    \               min = grid[i][j]\n                if k == 1 then\n           \
    \         return grid[i][j]\n                end\n            end\n        end\n\
    \    end\n    return min\nend", "    local i, j, min_path = math.inf, math.inf,\
    \ {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n        \
    \    if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n\
    \                min_path[k + 1] = i\n                min_path[k + 2] = j\n  \
    \          end\n        end\n    end\n    return min_path\nend", "    local N\
    \ = #grid\n    local M = N * N\n    local i, j\n    local min = M + 1\n    for\
    \ i = 1, N do\n        for j = 1, N do\n            if grid[i][j] < min then\n\
    \                min = grid[i][j]\n                local path = {}\n         \
    \       local index = 1\n                while index <= k do\n               \
    \     path[index] = grid[i][j]\n                    i, j = i + 1, j + 1\n    \
    \                index = index + 1\n                end\n            end\n   \
    \     end\n    end\n    return path\nend", "    local N = #grid\n    local M =\
    \ N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local\
    \ j = 1\n        while j <= k\n            local cell = grid[i - 1][j - 1]\n \
    \           if cell == M then\n                result[i] = j\n               \
    \ break\n            elseif cell > M then\n                break\n           \
    \ elseif cell < M then\n                j = j + 1\n            else\n        \
    \        j = j + 1\n                i = i + 1\n            end\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local N = #grid\n \
    \   local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i // N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j // N] < result[j] then\n                result[j]\
    \ = grid[j % N][j // N]\n            end\n        end\n    end\n    return result\n\
    end", "    local path = {}\n    local i = 1\n    while i <= k\n        path[i]\
    \ = grid[1][1]\n        i = i + 1\n        grid = grid[1..]\n    return path\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1,\
    \ M do\n        for j = 1, M do\n            if grid[i % N][j / N] < grid[j %\
    \ N][i / N] then\n                result[i] = result[i] < result[j]\n        \
    \    end\n        end\n    end\n    return result[1:k]\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if grid[j % N][j / N] < result[j] then\n                result[j]\
    \ = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for\
    \ i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N]\
    \ < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n   \
    \         end\n        end\n    end\n    return result\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n\
    \            if grid[j][i % N] < grid[j][(i - 1) / N] then\n                result[i]\
    \ = grid[j][i % N]\n                break\n            end\n        end\n    end\n\
    \    for i = 1, k do\n        for j = 1, N do\n            if result[j] == grid[j][(i\
    \ - 1) / N] then\n                result[i] = grid[j][(i - 1) / N]\n         \
    \       break\n            end\n        end\n    end\n    return result\nend",
  "    local t = {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n\
    \            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, #t, 2\
    \ do\n        for j = 2, #t[i], 2 do\n            t[i, j] = math.min(t[i, j],\
    \ t[i-1, j] + t[i, j-1] + t[i-1, j-1])\n        end\n    end\n    return t[k+1,\
    \ k+1]\nend", "    local N = #grid\n    local M = N * N\n    local result = {}\n\
    \    local i = 1\n    while i <= k and i <= M do\n        local j = 1\n      \
    \  while j <= k and j <= M do\n            if grid[i-1][j-1] < grid[i-1][j] then\n\
    \                result[i] = j\n                break\n            end\n     \
    \       j = j + 1\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1,\
    \ k do\n        for j = 1, M do\n            if grid[j % N][j / N] > result[j]\
    \ then\n                result[j] = grid[j % N][j / N]\n            end\n    \
    \    end\n    end\n    return result\nend", "    local N = #grid\n    local M\
    \ = N * N\n    local i, j\n    local table = {}\n    for i = 1, M do\n       \
    \ table[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n      \
    \      table[i * N + j] = math.min(table[i * N + j], table[i * N + j - 1] + grid[i][j])\n\
    \            table[i * N + j] = math.min(table[i * N + j], table[(i - 1) * N +\
    \ j] + grid[i][j])\n            table[i * N + j] = math.min(table[i * N + j],\
    \ table[i * N + (j - 1)] + grid[i][j])\n            table[i * N + j] = math.min(table[i\
    \ * N + j], table[(i - 1) * N + (j - 1)] + grid[i][j])\n            table[i *\
    \ N + j] = math.min(table[i * N + j], table[(i - 1) * N + j] + grid[i][j])\n \
    \           table[i * N + j] = math.min(table[i * N + j], table[i * N + (j - 1)]\
    \ + grid[i][j])\n        end\n    end\n    for i = 1, k do\n        table[i] =\
    \ math.min(table[i], table[i - 1])\n    end\n    return table\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n\
    \        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n      \
    \  for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n     \
    \           result[j] = grid[j % N][j / N]\n            end\n        end\n   \
    \ end\n    return result\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local i = 1\n    local j = 1\n    local result = {}\n    while i <= k and j\
    \ <= M do\n        if grid[i][j] == 1 then\n            result[i] = j\n      \
    \      i = i + 1\n        else\n            j = j + 1\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local i\n    local j\n  \
    \  local lst = {}\n    local min = M\n    for i = 1, N do\n        for j = 1,\
    \ N do\n            if grid[i][j] < M then\n                lst[grid[i][j]] =\
    \ 1\n                if grid[i][j] < min then\n                    min = grid[i][j]\n\
    \                end\n            end\n        end\n    end\n    for i = 1, k\
    \ do\n        for j = 1, N do\n            if lst[grid[i][j]] == 1 then\n    \
    \            lst[grid[i][j]] = M\n                if lst[grid[i][j]] < min then\n\
    \                    min = lst[grid[i][j]]\n                end\n            end\n\
    \        end\n    end\n    return lst\nend", "    local N = #grid\n    local M\
    \ = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local\
    \ j = 1\n        while j <= k\n            local cell = grid[i - 1][j - 1]\n \
    \           if cell == M then\n                result[i] = j\n               \
    \ break\n            elseif cell > M then\n                break\n           \
    \ elseif cell < M then\n                result[i] = j\n            end\n     \
    \       j = j + 1\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    local\
    \ i = 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n       \
    \ i = i + 1\n    end\n    i = 1\n    while i <= M do\n        if i % N == 1 or\
    \ i % N == N - 1 or i % N == 1 or i % N == N - 1 then\n            result[i] =\
    \ math.min(result[i], result[i - 1])\n            result[i] = math.min(result[i],\
    \ result[i + 1])\n            result[i] = math.min(result[i], result[i - N])\n\
    \            result[i] = math.min(result[i], result[i + N])\n        end\n   \
    \     i = i + 1\n    end\n    return result[k]\nend", "    local N = #grid\n \
    \   local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n \
    \   while i <= M and j <= M do\n        if grid[i] ~= nil and grid[j] ~= nil then\n\
    \            path[i] = j\n            i = i + 1\n            j = j + 1\n     \
    \   else\n            i = i + 1\n    end\n    while i <= M and j <= M do\n   \
    \     if grid[i] ~= nil and grid[j] ~= nil then\n            if path[i] ~= nil\
    \ and path[j] ~= nil then\n                if path[i] < path[j] then\n       \
    \             path[i] = path[j]\n                end\n            end\n      \
    \      i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n\
    \    end\n    return path[k]\nend", "    local path = {}\n    local dirs = [[-1,\
    \ 0], [1, 0], [0, -1], [0, 1]]\n    for i = 1, #grid, 2 do\n        for j = 1,\
    \ #grid[i], 2 do\n            path[i, j] = grid[i][j]\n            for _, d in\
    \ ipairs(dirs) do\n                if grid[i + d[1]][j + d[0]] > grid[i][j] then\n\
    \                    path[i, j] = math.min(path[i, j], path[i + d[1], j + d[0]])\n\
    \                end\n            end\n        end\n    end\n    return path[1,\
    \ 1] .. \" \" .. path[k, k]\nend", "    local path = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n\
    \        end\n    end\n    for i = 1, #path, 1 do\n        for j = 1, #path[i],\
    \ 1 do\n            path[i, j] = math.min(path[i, j], path[i-1, j] + path[i, j-1])\n\
    \        end\n    end\n    return path[k, k]\nend", "    local N = #grid\n   \
    \ local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n\
    \            if grid[i % N][j / N] > grid[j % N][i / N] then\n               \
    \ result[i] = result[i] < result[j]\n            end\n        end\n    end\n \
    \   return result[k]\nend", "    local path = {}\n    for i = 1, #grid, 2 do\n\
    \        for j = 1, #grid[i], 2 do\n            if grid[i][j] == k then\n    \
    \            path = path or {grid[i][j]}\n                for _, n in pairs(grid)\
    \ do\n                    if grid[n[1]][n[2]] == k then\n                    \
    \    path = path or {grid[n[1]][n[2]]}\n                end\n            end\n\
    \        end\n    end\n    return path\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while\
    \ i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n          \
    \  path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1]\
    \ then\n            path[i] = j\n            j = j + 1\n        else\n       \
    \     path[i] = j\n            i = i + 1\n            j = j + 1\n    end\n   \
    \ return path\nend", "    local N = #grid\n    local M = N * N\n    local i\n\
    \    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i\
    \ % N][i // N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n      \
    \      if res[j] > res[j + 1] then\n                res[j + 1] = res[j]\n    \
    \        end\n            if res[j] > res[j - 1] then\n                res[j -\
    \ 1] = res[j]\n            end\n            if res[j] > res[j + N] then\n    \
    \            res[j + N] = res[j]\n            end\n            if res[j] > res[j\
    \ - N] then\n                res[j - N] = res[j]\n            end\n        end\n\
    \    end\n    return res\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i /\
    \ N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if grid[i\
    \ % N][j / N] < grid[j % N][i / N] then\n                result[i] = result[i]\
    \ < result[j]\n            end\n        end\n    end\n    for i = 1, M do\n  \
    \      for j = 1, M do\n            if result[i] == result[j] then\n         \
    \       result[i] = result[i] < result[j]\n            end\n        end\n    end\n\
    \    return result[k]\nend", "    local N = #grid\n    local M = N * N\n    local\
    \ result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n    for i\
    \ = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n  \
    \              result[i * N + j] = 0\n            end\n        end\n    end\n\
    \    for i = 1, M do\n        for j = 1, N do\n            if grid[j][i] == 0\
    \ then\n                result[i] = 0\n            end\n        end\n    end\n\
    \    for i = 1, k do\n        for j = 1, N do\n            if result[i * N + j]\
    \ == 0 then\n                result[i * N + j] = result[i * N + j + 1]\n     \
    \       end\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n\
    \            if result[i * N + j] == 0 then\n                result[i * N + j]\
    \ = result[(i - 1) * N + j]\n            end\n        end\n    end\n    for i\
    \ = 1, N do\n        for j = 1, N do\n            if result[i * N + j] == 0 then\n\
    \                result[i * N + j] = result[i * N + (j - 1)]\n            end\n\
    \        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n        \
    \    if result[i * N + j] == 0 then\n                result[i * N + j] = result[(i\
    \ - 1) * N + (j - 1)]\n            end\n        end\n    end\n    for i = 1, N\
    \ do\n        for j = 1, N do\n            if result[i * N + j] == 0 then\n  \
    \              result[i * N + j] = result[(i - 1) * N + j]\n            end\n\
    \        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n        \
    \    if result[i * N + j] == 0 then\n                result[i * N + j] = result[i\
    \ * N + (j - 1)]", "    local path = {}\n    for i = 1, k, 1 do\n        path[i]\
    \ = grid[1][1]\n        for j = 2, grid.length - 1, 1 do\n            path[i]\
    \ = min(path[i], grid[j][i])\n        end\n    end\n    return path\nend", " \
    \   local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n\
    \        grid = grid[1..]\n        i = i + 1\n    return path\nend", "    local\
    \ N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local\
    \ result = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n\
    \            result[i] = j\n            i = i + 1\n        else\n            j\
    \ = j + 1\n    end\n    return result\nend", "    local N = #grid\n    local M\
    \ = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while\
    \ i <= k and j <= M do\n        if grid[i][j] == 1 then\n            result[i]\
    \ = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n \
    \   return result\nend", "    local path = {}\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n      \
    \  end\n    end\n    for i = 1, k, 1 do\n        for j = 1, k, 1 do\n        \
    \    if path[i, j] < path[i-1, j] or path[i, j] < path[i, j-1] then\n        \
    \        path[i, j] = path[i-1, j]\n            end\n            if path[i, j]\
    \ < path[i-1, j-1] then\n                path[i, j] = path[i-1, j-1]\n       \
    \     end\n        end\n    end\n    return path\nend", "    local i, j, min =\
    \ math.inf, math.inf, math.inf\n    for i = 1, #grid do\n        for j = 1, #grid[i]\
    \ do\n            if grid[i][j] < min then\n                min = grid[i][j]\n\
    \                local lst = {}\n                for k = 1, k do\n           \
    \         lst[k] = grid[i][j]\n                end\n                return lst\n\
    \            end\n        end\n    end\nend", "    local path = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j]\
    \ = grid[i][j]\n        end\n    end\n    for i = 1, #path, 1 do\n        for\
    \ j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i-1,\
    \ j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\nend", "   \
    \ local N = #grid\n    local M = N * N\n    local i\n    local j\n    local path\
    \ = {}\n    for i = 1, M do\n        path[i] = grid[i % N][i // N]\n    end\n\
    \    for i = 1, k do\n        for j = 1, M do\n            if path[j] < path[j\
    \ + 1] then\n                path[j + 1] = path[j]\n                j = j + 1\n\
    \            end\n        end\n    end\n    return path\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path\
    \ = {}\n    while i <= k and j <= M do\n        path[i] = grid[j]\n        if\
    \ j == M then\n            return path\n        j = j + 1\n        if j % N ==\
    \ 1 then\n            i = i + 1\n            j = j + 1\n        else\n       \
    \     j = j + N - 1\n    end\nend", "    local N = #grid\n    local M = N * N\n\
    \    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i]\
    \ = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n\
    \            if res[j] > res[j + 1] then\n                res[j + 1] = res[j]\n\
    \            end\n            if res[j] > res[j - 1] then\n                res[j\
    \ - 1] = res[j]\n            end\n            if res[j] > res[j + N] then\n  \
    \              res[j + N] = res[j]\n            end\n            if res[j] > res[j\
    \ - N] then\n                res[j - N] = res[j]\n            end\n        end\n\
    \    end\n    return res\nend", "    local i, j, min_path = math.inf, math.inf,\
    \ {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n        \
    \    if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n\
    \                min_path[k + 1] = i\n                min_path[k + 2] = j\n  \
    \          end\n        end\n    end\n    return min_path\nend", "    local path\
    \ = {}\n    for i = 1, #grid, k do\n        path[i] = grid[i]\n        for j =\
    \ 1, i - 1, -1 do\n            if grid[j] < grid[i] then\n                path[i]\
    \ = grid[j]\n                break\n        end\n    end\n    return path\nend",
  "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, [1]\n  \
    \  while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n   \
    \         path = path .. grid[i][j]\n            i = i + 1\n        elseif grid[i][j]\
    \ > grid[i][j-1] then\n            path = path .. grid[i][j]\n            j =\
    \ j + 1\n        else\n            path = path .. grid[i][j]\n            i =\
    \ i + 1\n            j = j + 1\n        end\n    end\n    return path\nend", " \
    \   local N = #grid\n    local M = N * N\n    local res = {}\n    for i = 1, M\
    \ do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n    \
    \    for j = 1, M do\n            if res[j] < res[j + 1] then\n              \
    \  res[j + 1] = res[j]\n                j = j + 1\n            end\n        end\n\
    \    end\n    return res\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local result = {}\n    local i = 1\n    while i <= M do\n        result[i]\
    \ = i\n        i = i + 1\n    end\n    i = 1\n    while i <= M do\n        local\
    \ j = 1\n        while j <= M do\n            if grid[j - 1][i - 1] == k then\n\
    \                result[i] = j\n                break\n            end\n     \
    \       j = j + 1\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local N = #grid\n    local M = N * N\n    local result = {}\n    for\
    \ i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for\
    \ i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N]\
    \ < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n   \
    \         end\n        end\n    end\n    return result\nend", "    local path\
    \ = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n    \
    \    grid = grid[1..]\n        i = i + 1\n    return path\nend", "    local N\
    \ = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while\
    \ i <= k\n        local j = 1\n        while j <= N\n            local cell =\
    \ grid[j]\n            if cell[i] < M then\n                result[i] = cell[i]\n\
    \                j = j + 1\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local N = #grid\n \
    \   local M = N * N\n    local result = {}\n    local i = 1\n    while i <= M\
    \ do\n        result[i] = grid[i % N][i / N]\n        i = i + 1\n    end\n   \
    \ i = 1\n    while i <= M do\n        if i % N == 1 then\n            result[i]\
    \ = result[i - 1]\n        elseif i % N == N then\n            result[i] = result[i\
    \ - N]\n        else\n            result[i] = math.min(result[i - 1], result[i\
    \ - N], result[i - N - 1])\n        end\n        i = i + 1\n    end\n    return\
    \ result[k]\nend", "    local path = {}\n    local i = 1\n    while i <= k\n \
    \       path[i] = grid[1][1]\n        i = i + 1\n    end\n    \n    local i =\
    \ 1\n    while i <= k\n        local j = 1\n        while j <= k\n           \
    \ local value = grid[i][j]\n            if path[i] < value then\n            \
    \    path[i] = value\n            end\n            j = j + 1\n        end\n  \
    \      i = i + 1\n    end\n    return path\nend", "    local i, j, min_path, min_value,\
    \ min_index\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == k then\n                min_path = grid[i][j]\n \
    \               min_value = grid[i][j]\n                min_index = i\n      \
    \          break\n        end\n    end\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n               \
    \ if grid[i][j] < min_value then\n                    min_path = grid[i][j]\n\
    \                    min_value = grid[i][j]\n                    min_index = i\n\
    \                end\n            elseif grid[i][j] < min_value then\n       \
    \         min_path = grid[i][j]\n                min_value = grid[i][j]\n    \
    \            min_index = i\n            end\n        end\n    end\n    return\
    \ min_path\nend", "    local N = #grid\n    local M = N * N\n    local result\
    \ = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n\
    \    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j /\
    \ N] < result[j] then\n                result[j] = grid[j % N][j / N]\n      \
    \      end\n        end\n    end\n    return result\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1,\
    \ M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n           \
    \     result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n   \
    \ end\n    return result\nend", "    local i, j, path = 1, 1, {}\n    for i =\
    \ 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            path[path[i,\
    \ j]] = grid[i][j]\n            path[i, j] = path[i, j] + path[i, j - 1] + path[i\
    \ - 1, j]\n        end\n    end\n    for i = 1, #path, 2 do\n        path[i] =\
    \ path[i] + path[i - 1]\n    end\n    return path[k]\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1,\
    \ N do\n            for k = 1, N do\n                if grid[j][k] < grid[j][(k\
    \ - 1)] then\n                    result[i + j * N + k] = grid[j][k]\n       \
    \         end\n            end\n        end\n    end\n    return result\nend",
  "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res\
    \ = {}\n    for i = 1, M do\n        for j = 1, N do\n            if grid[i][j]\
    \ == k then\n                res[i] = j\n                break\n        end\n\
    \    end\n    for i = 1, M do\n        for j = 1, N do\n            if res[i]\
    \ == j then\n                res[i] = res[j]\n            end\n        end\n \
    \   end\n    return res\nend", "    local result = {}\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            result[i] = result[i] or\
    \ {}\n            result[i][j] = grid[i][j]\n        end\n    end\n    for i =\
    \ 1, #result, 1 do\n        for j = 1, #result[i], 1 do\n            for k = 1,\
    \ #result[i][j], 1 do\n                result[i][j] = result[i][j] or {}\n   \
    \             result[i][j][k] = result[i][j][k] or {}\n                result[i][j][k][k]\
    \ = result[i][j][k][k] or {}\n                result[i][j][k][k][k] = result[i][j][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k] = result[i][j][k][k][k][k] or\
    \ {}\n                result[i][j][k][k][k][k][k] = result[i][j][k][k][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k][k][k] = result[i][j][k][k][k][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k][k][k][k] = result[i][j][k][k][k][k][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k][k][k][k][k] = result[i][j][k][k][k][k][k][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k][k][k][k][k][k] = result[i][j][k][k][k][k][k][k][k][k][k]\
    \ or {}\n                result[i][j][k][k][k][k][k][k][k][k][k][k] = result[i][j][k][k][k][k][k][k][k][k][k][k]",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, M do\n\
    \        for j = 1, M do\n            if grid[i % N][j / N] < grid[j % N][i /\
    \ N] then\n                result[i] = result[i] + 1\n            end\n      \
    \  end\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if\
    \ result[j] > result[j + 1] then\n                result[j] = result[j] - 1\n\
    \            end\n        end\n    end\n    return result\nend", "    local N\
    \ = #grid\n    local M = N * N\n    local i, j, p = 1, 1, 1\n    local lst = {}\n\
    \    while i <= M and j <= M and p <= k do\n        if grid[i][j] == p then\n\
    \            lst[p] = i\n            p = p + 1\n            i = i + 1\n      \
    \      j = j + 1\n        else\n            i = i + 1\n    end\n    return lst\n\
    end", "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i =\
    \ 1, k, 1 do\n        for j = 1, #path, 1 do\n            path[i, j] = path[i,\
    \ j] + path[i-1, j]\n        end\n    end\n    return path\nend", "    local N\
    \ = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n \
    \       result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n       \
    \ for j = 1, N do\n            grid[j][i] = grid[j][i] + grid[j][i - 1]\n    \
    \    end\n    end\n    for i = 1, M do\n        for j = 1, N do\n            grid[j][i]\
    \ = grid[j][i] + grid[j - 1][i]\n        end\n    end\n    for i = 1, M do\n \
    \       for j = 1, N do\n            grid[j][i] = grid[j][i] + grid[j][i + 1]\n\
    \        end\n    end\n    for i = 1, M do\n        for j = 1, N do\n        \
    \    grid[j][i] = grid[j][i] + grid[j + 1][i]\n        end\n    end\n    for i\
    \ = 1, M do\n        for j = 1, N do\n            grid[j][i] = grid[j][i] + grid[j][i\
    \ - 1]\n        end\n    end\n    for i = 1, M do\n        for j = 1, N do\n \
    \           grid[j][i] = grid[j][i] + grid[j - 1][i]\n        end\n    end\n \
    \   for i = 1, M do\n        for j = 1, N do\n            grid[j][i] = grid[j][i]\
    \ + grid[j][i + 1]\n        end\n    end\n    for i = 1, M do\n        for j =\
    \ 1, N do\n            grid[j][i] = grid[j][i] + grid[j + 1][i]\n        end\n\
    \    end\n    for i = 1, M do\n        for j = 1, N do\n            grid[j][i]\
    \ = grid[j][i] + grid[j][i - 1]\n        end\n    end\n    for i = 1, M do\n \
    \       for j = 1, N do\n            grid[j][i] = grid[j][", "    local t = {}\n\
    \    local i = 1\n    for i = 1, #grid do\n        t[i] = grid[i]\n    end\n \
    \   for i = 2, #t do\n        for j = 1, #t do\n            if t[i] < t[j] then\
    \ t[i] = t[j]\n            end\n        end\n        t[i] = t[i] + 1\n    end\n\
    \    return t[k]\nend", "    local N = #grid\n    local M = N * N\n    local result\
    \ = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n  \
    \  end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j %\
    \ N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j\
    \ - 1) / N]\n            end\n        end\n    end\n    return result\nend", " \
    \   local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n\
    \        grid = grid[1:][1:][1:]\n        i = i + 1\n    return path\nend", " \
    \   local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n\
    \                result[j] = grid[j % N][j / N]\n            end\n        end\n\
    \    end\n    return result\nend", "    local path = {}\n    local i = 1\n   \
    \ local j = 1\n    for i = 1, #grid do\n        for j = 1, #grid[i] do\n     \
    \       path[i] = j\n            if j > k then\n                return path\n\
    \            end\n        end\n    end\nend", "    local path = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j]\
    \ = grid[i][j]\n            if i > 1 and grid[i - 1][j] < path[i - 1, j] then\n\
    \                path[i, j] = path[i - 1, j]\n            if j > 1 and grid[i][j\
    \ - 1] < path[i, j - 1] then\n                path[i, j] = path[i, j - 1]\n  \
    \          if i > 1 and j > 1 and grid[i - 1][j - 1] < path[i - 1, j - 1] then\n\
    \                path[i, j] = path[i - 1, j - 1]\n        end\n    end\n    return\
    \ path[k, k]\nend", "    local path = {}\n    for i = 1, k, 1 do\n        path[i]\
    \ = grid[1][1]\n        grid = grid[1..i]\n    end\n    return path\nend", " \
    \   local path = {}\n    for i = 1, #grid, #grid[1] do\n        for j = 1, #grid[i],\
    \ #grid[i][1] do\n            path[i, j] = grid[i][j]\n        end\n    end\n\
    \    for i = 1, #grid, #grid[1] do\n        for j = 1, #grid[i], #grid[i][1] do\n\
    \            for jj = 1, #grid[i][j], #grid[i][j][1] do\n                path[i,\
    \ j] = math.min(path[i, j], path[i, jj] + grid[i][j][jj])\n            end\n \
    \       end\n    end\n    return path[1, k]\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while\
    \ i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n          \
    \  path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1]\
    \ then\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j]\
    \ > grid[i-1][j-1] then\n            path[i] = j\n            i = i + 1\n    \
    \        j = j + 1\n        else\n            path[i] = j\n            i = i +\
    \ 1\n            j = j + 1\n    end\n    return path\nend", "    local N = #grid\n\
    \    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n\
    \    while i <= k and j <= M do\n        path[i] = grid[j]\n        if j + 1 <=\
    \ M and grid[j] < grid[j + 1] then\n            path[i] = path[i] + 1\n      \
    \      j = j + 1\n        end\n        if j - 1 >= 1 and grid[j] < grid[j - 1]\
    \ then\n            path[i] = path[i] + 1\n            j = j - 1\n        end\n\
    \        i = i + 1\n    end\n    return path\nend", "    local t = {}\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] =\
    \ grid[i][j]\n        end\n    end\n    for i = 1, k, 1 do\n        for j = 1,\
    \ k, 1 do\n            if t[i, j] < t[i, j + 1] or t[i, j] < t[i + 1, j] or t[i,\
    \ j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j +\
    \ 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i\
    \ + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i,\
    \ j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j +\
    \ 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i\
    \ + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i,\
    \ j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j +\
    \ 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i + 1, j + 1] or t[i, j] < t[i\
    \ + 1, j + 1] or t[i, j] <", "    local path = {}\n    local i = 1\n    local\
    \ j = 1\n    local n = grid.length\n    local m = grid[0].length\n    while i\
    \ <= n and j <= m and i <= k and j <= k do\n        if grid[i][j] < path[i] then\n\
    \            path[i] = grid[i][j]\n        end\n        if grid[i][j] > path[j]\
    \ then\n            path[j] = grid[i][j]\n        end\n        i = i + 1\n   \
    \     j = j + 1\n    end\n    return path\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n\
    \        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for\
    \ j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j\
    \ + 1] = res[j]\n                j = j - 1\n            end\n            if j\
    \ == 1 then\n                res[j] = grid[i % N][i / N]\n            end\n  \
    \      end\n    end\n    return res\nend", "    local N = #grid\n    local M =\
    \ N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 1, M - 1 do\n        for j = i + 1, M do\n\
    \            if grid[i % N][i / N] < grid[j % N][j / N] then\n               \
    \ result[i] = grid[i % N][i / N]\n                result[j] = grid[j % N][j /\
    \ N]\n                break\n            end\n        end\n    end\n    for i\
    \ = 1, k do\n        for j = 1, M do\n            if result[j] < result[j + 1]\
    \ then\n                result[j] = result[j + 1]\n            end\n        end\n\
    \    end\n    return result\nend", "    local path = {}\n    local dirs = [[-1,\
    \ 0], [1, 0], [0, -1], [0, 1]]\n    for i = 1, #grid, 2 do\n        for j = 1,\
    \ #grid[i], 2 do\n            path[i, j] = grid[i][j]\n            for _, d in\
    \ ipairs(dirs) do\n                if grid[i + d[1]][j + d[0]] > grid[i][j] then\n\
    \                    path[i, j] = grid[i][j]\n                    break\n    \
    \        end\n        end\n    end\n    for i = 2, #path, 2 do\n        for j\
    \ = 2, #path[i], 2 do\n            path[i, j] = path[i - 1, j - 1]\n         \
    \   for _, d in ipairs(dirs) do\n                if path[i + d[1], j + d[0]] >\
    \ path[i, j] then\n                    path[i, j] = path[i, j]\n             \
    \       break\n                end\n            end\n        end\n    end\n  \
    \  return path[k, k]\nend", "    local i, j, min, path = 1, 1, math.pow(grid[1][1],\
    \ k), {}\n    for i = 2, #grid, 2 do\n        for j = 2, #grid[i], 2 do\n    \
    \        if grid[i][j] < grid[i - 1][j] and grid[i][j] < grid[i][j - 1] then\n\
    \                path[path.length] = grid[i][j]\n                min = math.min(min,\
    \ path.length)\n                path.length = path.length + 1\n            end\n\
    \        end\n    end\n    return path\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n      \
    \  local j = 1\n        while j <= N\n            local value = grid[j][i]\n \
    \           if value == M then\n                result[i] = value\n          \
    \      break\n            elseif value > result[i] then\n                result[i]\
    \ = value\n            end\n            j = j + 1\n        end\n        i = i\
    \ + 1\n    end\n    return result\nend", "    local i, j, min_path = math.inf,\
    \ math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] < min_path[1] then\n                min_path = grid[i][j]\n\
    \            end\n        end\n    end\n    for i = 2, k, 1 do\n        for j\
    \ = 1, #grid, 1 do\n            if grid[i][j] < min_path[i] then\n           \
    \     min_path = grid[i][j]\n            end\n        end\n    end\n    return\
    \ min_path\nend", "    local path = {}\n    for i = 1, k, 1 do\n        path[i]\
    \ = grid[1][1]\n        for j = 2, grid.length - 1, 1 do\n            path[i]\
    \ = min(path[i], grid[j][i])\n        end\n    end\n    return path\nend", " \
    \   local path = {}\n    for i = 1, #grid, #grid[1] do\n        for j = 1, #grid[i],\
    \ #grid[i][1] do\n            if grid[i][j] == k then\n                path[i]\
    \ = j\n                break\n        end\n    end\n    return path\nend", " \
    \   local N = #grid\n    local M = N * N\n    local result = {}\n    local i =\
    \ 1\n    while i <= k and i <= M do\n        result[i] = 1\n        i = i + 1\n\
    \    end\n    for i = 1, N, 1 do\n        for j = 1, N, 1 do\n            if grid[i][j]\
    \ > 0 then\n                result[grid[i][j]] = 1\n                for k = 1,\
    \ N, 1 do\n                    if grid[i][k] > 0 and grid[k][j] > 0 then\n   \
    \                     result[grid[i][j]] = min(result[grid[i][j]], result[grid[i][k]]\
    \ + result[grid[k][j]])\n                    end\n                end\n      \
    \      end\n        end\n    end\n    return result\nend", "    local N = #grid\n\
    \    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i]\
    \ = grid[i % N][i // N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n\
    \            if grid[j][i % N] < grid[j][(i - 1) // N] then\n                result[i]\
    \ = grid[j][i % N]\n                break\n            end\n        end\n    end\n\
    \    for i = 1, k do\n        for j = 1, N do\n            if grid[j][i % N] <\
    \ result[i] then\n                result[i] = grid[j][i % N]\n            end\n\
    \        end\n    end\n    return result\nend", "    local N = #grid\n    local\
    \ M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i\
    \ % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n       \
    \     if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j\
    \ % N][j / N]\n            end\n        end\n    end\n    return result\nend",
  "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1,\
    \ M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n\
    \        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n\
    \                result[j] = grid[j % N][j / N]\n            end\n        end\n\
    \    end\n    return result\nend", "    local tbl = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n\
    \                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj]\
    \ > grid[i][j] then\n                        tbl[jj] = grid[i][jj]\n         \
    \               break\n                end\n                break\n        end\n\
    \    end\n    return tbl\nend", "    local N = #grid\n    local M = N * N\n  \
    \  local i, j, min_path = M, M, M\n    for i = 1, N do\n        for j = 1, N do\n\
    \            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n\
    \                if k == 1 then\n                    min_path[1] = grid[i][j]\n\
    \                else\n                    min_path[k] = min_path[k - 1]\n   \
    \         end\n        end\n    end\n    return min_path\nend", "    local N =\
    \ #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n   \
    \     result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for\
    \ j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n          \
    \      result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
