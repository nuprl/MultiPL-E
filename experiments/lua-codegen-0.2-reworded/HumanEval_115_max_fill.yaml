name: HumanEval_115_max_fill
language: lua
prompt: "-- You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n-- and\
  \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
  \ the wells.\n-- Output the number of times you need to lower the buckets.\n-- Example\
  \ 1:\n-- >>> max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n-- 6\n-- Example 2:\n\
  -- >>> max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n-- 5\n-- Example\
  \ 3:\n-- >>> max_fill([[0,0,0], [0,0,0]], 5)\n-- 0\n-- Constraints:\n-- * all wells\
  \ have the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length\
  \ <= 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
  \ capacity)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1,\
  \ 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n\
  \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1,\
  \ 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    local i = 1\n    local j = 1\n    while i <=\
    \ #grid do\n        while j <= #grid[i] do\n            if grid[i][j] == 1 then\n\
    \                t[i] = t[i] + 1\n                if t[i] > capacity then\n  \
    \                  t[i] = capacity\n                end\n            end\n   \
    \         j = j + 1\n        end\n        i = i + 1\n    end\n    return #t\n\
    end", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ count = count + 1\n                if count > capacity then\n              \
    \      count = capacity\n                    break\n            end\n        end\n\
    \    end\n    return count\nend", "    local buckets = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                if not buckets[i] then\n                    buckets[i] = {}\n\
    \                end\n                buckets[i][j] = buckets[i][j] + 1\n    \
    \        end\n        end\n    end\n    local result = 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if buckets[i][j] > 0 then\n\
    \                result = result + 1\n                buckets[i][j] = buckets[i][j]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    bucket = {}\n    \
    \                buckets[i] = bucket\n                end\n                bucket[j]\
    \ = bucket[j] + 1\n            end\n        end\n    end\n    local result = 0\n\
    \    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i], 1 do\n       \
    \     if buckets[i][j] >= capacity then\n                result = result + 1\n\
    \                buckets[i][j] = 0\n            end\n        end\n    end\n  \
    \  return result\nend", "    local max = 0\n    for i = 1, #grid, 1 do\n     \
    \   for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n         \
    \       local count = 0\n                for k = 1, #grid, 1 do\n            \
    \        if grid[k][j] == 0 then\n                        count = count + 1\n\
    \                    end\n                end\n                if count > max\
    \ then\n                    max = count\n                end\n            end\n\
    \        end\n    end\n    return max\nend", "    local n = grid.length\n    local\
    \ m = grid[1].length\n    local i, j\n    local max = 0\n    for i = 1, n, 1 do\n\
    \        for j = 1, m, 1 do\n            if grid[i][j] == 1 then\n           \
    \     local cur = 0\n                for k = 1, capacity, 1 do\n             \
    \       cur = cur + 1\n                    if grid[i - k][j] == 1 then\n     \
    \                   cur = cur - 1\n                    end\n                end\n\
    \                if cur > max then\n                    max = cur\n          \
    \      end\n            end\n        end\n    end\n    return max\nend", "   \
    \ local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if not buckets[i]\
    \ then\n                    buckets[i] = {}\n                end\n           \
    \     buckets[i][j] = buckets[i][j] + 1\n            end\n        end\n    end\n\
    \    return #buckets\nend", "    local n = grid.length\n    local m = grid[1].length\n\
    \    local i, j, k, count = 1, 1, 0, 0\n    while i <= n and j <= m and count\
    \ < n * m\n        if grid[i][j] == 1\n            count = count + 1\n       \
    \     k = k + 1\n            if k == capacity\n                count = count +\
    \ 1\n            end\n        end\n        i = i + 1\n        j = j + 1\n    end\n\
    \    return count\nend", "    local buckets = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            buckets[i, j] = buckets[i, j] + 1\n                if buckets[i,\
    \ j] > capacity then\n                    buckets[i, j] = capacity\n         \
    \       end\n            end\n        end\n    end\n    return #buckets\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local t = {}\n    for i=1,#  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              ", "    local i, j, max_fill = 1, 1, 0\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                max_fill = max_fill + 1\n                if max_fill\
    \ > capacity then\n                    max_fill = max_fill - 1\n             \
    \       max_fill = max_fill + 1\n                end\n            end\n      \
    \  end\n    end\n    return max_fill\nend", "    local t = {}\n    local n = grid.length\n\
    \    local m = grid[1].length\n    for i = 1, n, 1 do\n        for j = 1, m, 1\
    \ do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n\
    \                t[i+1] = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n\
    \                t[i+m] = t[i+m] or 1\n                t[i-m] = t[i-m] or 1\n\
    \            end\n        end\n    end\n    return t[1]\nend\n\"\"\"\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        ", "    local i, j, count\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                count = count + 1\n     \
    \           if count > capacity then\n                    count = count - 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n\
    \                if t[i] >= capacity then\n                    t[i] = 0\n    \
    \            end\n            end\n        end\n    end\n    return #t\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local t = {}\n    local i, j,\
    \ k = 1, 1, 1\n    while i <= #grid do\n        while j <= #grid[i] do\n     \
    \       if grid[i][j] == 1 then\n                k = k + 1\n                t[k]\
    \ = t[k] or {}\n                t[k][i] = t[k][i] or {}\n                t[k][i][j]\
    \ = t[k][i][j] or {}\n                t[k][i][j][1] = t[k][i][j][1] or 0\n   \
    \             t[k][i][j][2] = t[k][i][j][2] or 0\n            end\n          \
    \  j = j + 1\n        end\n        i = i + 1\n    end\n    return t[k]\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                if max_fill\
    \ < capacity then\n                    max_fill = max_fill + 1\n             \
    \   end\n            end\n        end\n    end\n    return max_fill\nend", " \
    \   local n = grid.length\n    local m = grid[1].length\n    local i, j, k, res\
    \ = 1, 1, 0, 0\n    while i <= n and j <= m and k < capacity do\n        if grid[i][j]\
    \ == 1 then\n            res = res + 1\n            k = k + 1\n            i =\
    \ i + 1\n        else\n            j = j + 1\n        end\n    end\n    return\
    \ res\nend", "    local result = 0\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                result\
    \ = result + 1\n                for k = 1, #grid, 1 do\n                    if\
    \ grid[k][j] == 0 then\n                        grid[k][j] = 1\n             \
    \           grid[i][j] = 0\n                        break\n                end\n\
    \            end\n        end\n    end\n    return result\nend", "    local result\
    \ = 0\n    local i, j\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                result = result +\
    \ 1\n                grid[i][j] = 0\n                while grid[i][j] == 0 and\
    \ grid[i][j+1] == 0 and grid[i][j-1] == 0 and grid[i-1][j] == 0 and grid[i+1][j]\
    \ == 0 and capacity > 0 then\n                    grid[i][j] = 1\n           \
    \         capacity = capacity - 1\n                end\n            end\n    \
    \    end\n    end\n    return result\nend", "    local buckets = {}\n    local\
    \ max_fill = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    buckets[i] = 1\n \
    \               else\n                    buckets[i] = bucket + 1\n          \
    \      end\n                if buckets[i] >= capacity then\n                 \
    \   buckets[i] = capacity\n                    max_fill = max_fill + 1\n     \
    \           end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n\
    \                t[i + 1] = t[i + 1] or 1\n                t[i - 1] = t[i - 1]\
    \ or 1\n                t[i + j] = t[i + j] or 1\n                t[i - j] = t[i\
    \ - j] or 1\n            end\n        end\n    end\n    return t[1]\nend", " \
    \   local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local buckets = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                buckets[i, j] = buckets[i, j] + 1\n            end\n\
    \        end\n    end\n    local result = 0\n    for i = 1, #grid, 1 do\n    \
    \    for j = 1, #grid[i], 1 do\n            if buckets[i, j] > 0 then\n      \
    \          result = result + 1\n                buckets[i, j] = buckets[i, j]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n            if\
    \ grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] or t[i+1] or t[i-1]\
    \ or t[i+1]\n            end\n        end\n    end\n    return t[1]\nend", " \
    \   local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n    \
    \        if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] or t[i+1]\
    \ or t[i-1] or t[i+1]\n            end\n        end\n    end\n    return t[1]\n\
    end", "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] or\
    \ t[i+1] or t[i-1] or t[i+1]\n            end\n        end\n    end\n    return\
    \ t[1]\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            max_fill = max_fill + 1\n                if max_fill >= capacity\
    \ then\n                    max_fill = max_fill - capacity\n                 \
    \   break\n            end\n        end\n    end\n    return max_fill\nend", " \
    \   local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local buckets = {}\n    local\
    \ max_fill = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    buckets[i] = 1\n \
    \               else\n                    buckets[i] = bucket + 1\n          \
    \      end\n                if buckets[i] > max_fill then\n                  \
    \  max_fill = buckets[i]\n                end\n            end\n        end\n\
    \    end\n    return max_fill\nend", "    local t = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = 0\n        end\n\
    \    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n    \
    \        if grid[i][j] == 1 then\n                t[i, j] = t[i, j] + 1\n    \
    \            for k = 1, #grid, 1 do\n                    if grid[k][j] == 1 then\n\
    \                        t[i, j] = t[i, j] + 1\n                    end\n    \
    \            end\n                for k = 1, #grid, 1 do\n                   \
    \ if grid[i][k] == 1 then\n                        t[i, j] = t[i, j] + 1\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    return t[1, 1]\nend", "    local i, j, max_fill = 1, 1, 0\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                max_fill = max_fill + 1\n                if max_fill\
    \ > capacity then\n                    max_fill = max_fill - 1\n             \
    \       max_fill = max_fill + 1\n                end\n            end\n      \
    \  end\n    end\n    return max_fill\nend", "    local i, j, max_fill = 1, 1,\
    \ 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n         \
    \   if grid[i][j] == 1 then\n                max_fill = max_fill + 1\n       \
    \         if max_fill > capacity then\n                    max_fill = max_fill\
    \ - 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = t[i] or t[j] + 1\n            end\n        end\n    end\n    return t[1]\n\
    end", "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = max(t[i], t[i-1]\
    \ + 1)\n            end\n        end\n    end\n    return t[#grid]\nend", "  \
    \  local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                    max_fill = max_fill + 1\n\
    \                end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                if not\
    \ buckets[i] then\n                    buckets[i] = {}\n                end\n\
    \                buckets[i][j] = buckets[i][j] + 1\n            end\n        end\n\
    \    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n    \
    \        if buckets[i][j] >= capacity then\n                return buckets[i][j]\n\
    \            end\n        end\n    end\n    return 0\nend", "    local buckets\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                local bucket = buckets[i]\n  \
    \              if bucket == nil then\n                    buckets[i] = 1\n   \
    \             else\n                    buckets[i] = bucket + 1\n            end\n\
    \        end\n    end\n    return #buckets\nend", "    local result = 0\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                result = max(result, max_fill(grid, capacity - 1))\n\
    \            end\n        end\n    end\n    return result\nend", "    local t\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                t[i] = t[i] or #grid[i]\n    \
    \        end\n        end\n    end\n    return t[1] - 1\nend", "    local t =\
    \ {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or 1\n                t[i+1] = t[i+1]\
    \ or 1\n                t[i-1] = t[i-1] or 1\n                t[i+j] = t[i+j]\
    \ or 1\n                t[i-j] = t[i-j] or 1\n            end\n        end\n \
    \   end\n    return t[1]\nend\n\"\"\"\n", "    local buckets = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                buckets[i] = buckets[i] + 1\n            end\n  \
    \      end\n    end\n    for i = 1, #buckets, 1 do\n        if buckets[i] > capacity\
    \ then\n            buckets[i] = capacity\n        end\n    end\n    return #buckets\n\
    end", "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                local bucket\
    \ = buckets[i]\n                if bucket == nil then\n                    buckets[i]\
    \ = 1\n                else\n                    buckets[i] = bucket + 1\n   \
    \             end\n            end\n        end\n    end\n    return #buckets\n\
    end", "    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                result = result +\
    \ 1\n                for k = 1, capacity, 1 do\n                    grid[i][j]\
    \ = 0\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            max_fill = max_fill + 1\n                if max_fill >= capacity\
    \ then\n                    max_fill = max_fill - 1\n                    max_fill\
    \ = max_fill + 1\n                end\n            end\n        end\n    end\n\
    \    return max_fill\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          t[i] = t[i] or t[j] + 1\n            end\n        end\n    end\n  \
    \  return t[1]\nend\n\"\"\"\n", "    local t = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n\
    \    return t[#grid]\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          t[i] = t[i] + 1\n                if t[i] > capacity then\n        \
    \            t[i] = capacity\n                end\n            end\n        end\n\
    \    end\n    return t[1]\nend", "    local t = {}\n    local i, j, k = 1, 1,\
    \ 1\n    while i <= #grid do\n        while j <= #grid[i] do\n            if grid[i][j]\
    \ == 1 then\n                if k == capacity then\n                    t[#t +\
    \ 1] = i\n                    k = 1\n                else\n                  \
    \  k = k + 1\n            end\n            j = j + 1\n        end\n        i =\
    \ i + 1\n    end\n    return #t\nend\n\"\"\"\n", "    local t = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or t[i-1] + 1\n                t[i] =\
    \ t[i] or t[i+1] + 1\n                t[i] = t[i] or t[i-1] + 1\n            \
    \    t[i] = t[i] or t[i+1] + 1\n            end\n        end\n    end\n    return\
    \ t[#grid]\nend", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            count = count + 1\n                if count > capacity then\n   \
    \                 count = count - 1\n                    count = count + 1\n \
    \               end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = max(t[i],\
    \ t[i-1] + 1)\n            end\n        end\n    end\n    return t[#grid]\nend",
  "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n      \
    \          if t[i] > capacity then\n                    t[i] = capacity\n    \
    \            end\n            end\n        end\n    end\n    return #t\nend",
  "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          if buckets[i] == nil then\n                    buckets[i] = {}\n  \
    \              end\n                if buckets[i][j] == nil then\n           \
    \         buckets[i][j] = 0\n                end\n                buckets[i][j]\
    \ = buckets[i][j] + 1\n                if buckets[i][j] > max_fill then\n    \
    \                max_fill = buckets[i][j]\n                end\n            end\n\
    \        end\n    end\n    return max_fill\nend", "    local result = 0\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                result = max(result, max_fill_well(grid, i, j, capacity))\n\
    \            end\n        end\n    end\n    return result\nend", "    local t\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n           \
    \     t[i + 1] = t[i + 1] or 1\n                t[i - 1] = t[i - 1] or 1\n   \
    \             t[i + 2] = t[i + 2] or 1\n                t[i - 2] = t[i - 2] or\
    \ 1\n            end\n        end\n    end\n    return t[1]\nend", "    local\
    \ buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    buckets[i] = 1\n \
    \               else\n                    buckets[i] = bucket + 1\n          \
    \      end\n            end\n        end\n    end\n    return #buckets\nend",
  "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = max(t[i], t[i-1]\
    \ + 1)\n            end\n        end\n    end\n    return t[#grid]\nend", "  \
    \  local n = grid:size()\n    local m = grid[1]:size()\n    local i, j\n    local\
    \ buckets = {}\n    local max_fill = 0\n    for i = 1, n, 1 do\n        for j\
    \ = 1, m, 1 do\n            if grid[i][j] == 1 then\n                local bucket\
    \ = buckets[i]\n                if bucket == nil then\n                    buckets[i]\
    \ = 1\n                else\n                    buckets[i] = bucket + 1\n   \
    \             end\n            end\n        end\n    end\n    for i = 1, n, 1\
    \ do\n        for j = 1, m, 1 do\n            if buckets[i] > max_fill then\n\
    \                max_fill = buckets[i]\n            end\n        end\n    end\n\
    \    return max_fill\nend", "    local max = 0\n    for i = 1, #grid, 1 do\n \
    \       for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n     \
    \           local count = 0\n                for k = 1, #grid, 1 do\n        \
    \            for l = 1, #grid[k], 1 do\n                        if grid[k][l]\
    \ == 1 then\n                            count = count + 1\n                 \
    \       end\n                    end\n                end\n                if\
    \ count > max then\n                    max = count\n                end\n   \
    \         end\n        end\n    end\n    return max\nend", "    local buckets\
    \ = {}\n    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if buckets[i] >=\
    \ capacity then\n                    result = result + 1\n                   \
    \ buckets[i] = buckets[i] - capacity\n                else\n                 \
    \   buckets[i] = buckets[i] + 1\n                end\n            end\n      \
    \  end\n    end\n    return result\nend", "    local buckets = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                local bucket = {}\n                bucket[1] = capacity\n\
    \                bucket[2] = 0\n                buckets[i, j] = bucket\n     \
    \       end\n        end\n    end\n    local result = 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                local bucket = buckets[i, j]\n                if bucket[2] >\
    \ 0 then\n                    bucket[2] = bucket[2] - 1\n                    bucket[1]\
    \ = bucket[1] - 1\n                    buckets[i, j] = bucket\n              \
    \      result = result + 1\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "    local i, j, count = 1, 1, 0\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                count = count + 1\n                if count > capacity\
    \ then\n                    count = count - 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend", "    local t = {}\n   \
    \ for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or t[i-1] + 1\n                t[i] =\
    \ t[i] or t[i+1] + 1\n                t[i] = t[i] or t[i-1] + 1\n            \
    \    t[i] = t[i] or t[i+1] + 1\n            end\n        end\n    end\n    return\
    \ t[#t]\nend", "    local n = grid.length\n    local m = grid[1].length\n    local\
    \ i, j\n    local max = 0\n    for i = 1, n, 1 do\n        for j = 1, m, 1 do\n\
    \            if grid[i][j] == 1 then\n                local cur = 0\n        \
    \        for k = 1, capacity, 1 do\n                    cur = cur + 1\n      \
    \              if grid[i + k][j] == 1 then\n                        cur = cur\
    \ - 1\n                    end\n                end\n                if cur >\
    \ max then\n                    max = cur\n                end\n            end\n\
    \        end\n    end\n    return max\nend", "    local t = {}\n    for i = 1,\
    \ #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] ==\
    \ 1 then\n                t[i] = t[i] + 1\n                if t[i] > capacity\
    \ then\n                    t[i] = capacity\n                end\n           \
    \ end\n        end\n    end\n    return #t\nend", "    local buckets = {}\n  \
    \  local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    buckets[i] = 1\n \
    \               else\n                    buckets[i] = bucket + 1\n          \
    \          if buckets[i] > capacity then\n                        buckets[i] =\
    \ capacity\n                        result = result + 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    return result\n\
    end", "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                local count = 0\n                for k = 1, #grid, 1 do\n   \
    \                 for l = 1, #grid[k], 1 do\n                        if grid[k][l]\
    \ == 0 then\n                            count = count + 1\n                 \
    \       end\n                    end\n                end\n                if\
    \ count > max_fill then\n                    max_fill = count\n              \
    \  end\n                if count == capacity then\n                    local bucket\
    \ = {}\n                    for k = 1, #grid, 1 do\n                        for\
    \ l = 1, #grid[k], 1 do\n                            if grid[k][l] == 0 then\n\
    \                                bucket[k] = bucket[k] + 1\n                 \
    \           end\n                        end\n                    end\n      \
    \              buckets[i] = bucket\n                end\n            end\n   \
    \     end\n    end\n    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i],\
    \ 1 do\n            if buckets[i][j] > max_fill then\n                max_fill\
    \ = buckets[i][j]\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local t = {}\n    local i, j, k = 1, 1, 1\n    while k <= #grid do\n\
    \        local w = grid[i]\n        local b = grid[j]\n        if w[k] == 1 and\
    \ b[k] == 1 then\n            t[i] = t[i] + 1\n            t[j] = t[j] + 1\n \
    \           k = k + 1\n        else\n            i = i + 1\n            j = j\
    \ + 1\n        end\n    end\n    return t[1]\nend", "    local i, j, max_fill\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                max_fill = max_fill + 1\n\
    \                if max_fill > capacity then\n                    max_fill = max_fill\
    \ - 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local result = 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ result = max(result, fill(grid, i, j, capacity))\n            end\n        end\n\
    \    end\n    return result\nend", "    local buckets = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                buckets[i,j] = 0\n            end\n        end\n    end\n   \
    \ local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1\
    \ do\n            if buckets[i,j] < capacity then\n                buckets[i,j]\
    \ = buckets[i,j] + 1\n                result = result + 1\n            end\n \
    \       end\n    end\n    return result\nend", "    local n = grid.length\n  \
    \  local m = grid[1].length\n    local i, j, k, res = 1, 1, 0, 0\n    while i\
    \ <= n and j <= m and k < capacity do\n        if grid[i][j] == 1 then\n     \
    \       res = res + 1\n            k = k + 1\n            i = i + 1\n        \
    \    j = j + 1\n        else\n            i = i + 1\n    end\n    return res\n\
    end", "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                for k =\
    \ 1, #buckets, 1 do\n                    if buckets[k] < capacity then\n     \
    \                   buckets[k] = buckets[k] + 1\n                        break\n\
    \                end\n            end\n        end\n    end\n    return #buckets\n\
    end", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n      \
    \  for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n          \
    \      if max_fill < capacity then\n                    max_fill = max_fill +\
    \ 1\n                end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n      \
    \  for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n          \
    \      max_fill = max_fill + 1\n                if max_fill > capacity then\n\
    \                    max_fill = max_fill - 1\n                    max_fill = max_fill\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                if max_fill < capacity then\n                    max_fill = max_fill\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                max_fill = max_fill + 1\n                if max_fill > capacity\
    \ then\n                    max_fill = max_fill - 1\n                    max_fill\
    \ = max_fill + 1\n                end\n            end\n        end\n    end\n\
    \    return max_fill\nend", "    local result = 0\n    local i, j\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                result = result + 1\n                grid[i][j] =\
    \ 0\n                while grid[i][j] == 0 and j < #grid[i] do\n             \
    \       j = j + 1\n                end\n            end\n        end\n    end\n\
    \    return result\nend", "    local n = grid.length\n    local m = grid[1].length\n\
    \    local i, j, count = 1, 1, 0\n    while i <= n and j <= m and count < capacity\
    \ do\n        if grid[i][j] == 1 then\n            count = count + 1\n       \
    \     i = i + 1\n            if i > n then\n                j = j + 1\n      \
    \          i = 1\n            end\n        end\n    end\n    return count\nend",
  "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          local bucket = buckets[i]\n                if bucket == nil then\n\
    \                    bucket = {}\n                    buckets[i] = bucket\n  \
    \              end\n                bucket[j] = bucket[j] + 1\n              \
    \  if bucket[j] > capacity then\n                    bucket[j] = capacity\n  \
    \                  max_fill = max_fill + 1\n                end\n            end\n\
    \        end\n    end\n    return max_fill\nend", "    local t = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] + 1\n                if t[i] > capacity\
    \ then\n                    t[i] = capacity\n                end\n           \
    \ end\n        end\n    end\n    return #t\nend", "    local i, j, max_fill =\
    \ 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n   \
    \         if grid[i][j] == 1 then\n                if max_fill < capacity then\n\
    \                    max_fill = max_fill + 1\n                end\n          \
    \  end\n        end\n    end\n    return max_fill\nend", "    local buckets =\
    \ {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n        \
    \    if grid[i][j] == 1 then\n                buckets[i,j] = buckets[i,j] + 1\n\
    \                if buckets[i,j] > capacity then\n                    buckets[i,j]\
    \ = capacity\n                end\n            end\n        end\n    end\n   \
    \ return #buckets\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n     \
    \   for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n         \
    \       t[i] = t[i] or #grid[i]\n                t[i] = t[i] or #grid[i]\n   \
    \         end\n        end\n    end\n    return t[1] - 1\nend", "    local buckets\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                buckets[i, j] = buckets[i, j]\
    \ + 1\n                if buckets[i, j] > capacity then\n                    buckets[i,\
    \ j] = capacity\n                end\n            end\n        end\n    end\n\
    \    return #buckets\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n\
    \    return t[#grid]\nend", "    local t = {}\n    for i=1,#grid,1 do\n      \
    \  for j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n              \
    \  t[i,j] = t[i,j] + 1\n                if t[i,j] >= capacity then\n         \
    \           t[i,j] = 0\n                end\n            end\n        end\n  \
    \  end\n    return #t\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n \
    \       for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n     \
    \           t[i] = t[i] + 1\n                if t[i] > capacity then\n       \
    \             t[i] = capacity\n                end\n            end\n        end\n\
    \    end\n    return #t\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            t[i] = t[i] + 1\n                if t[i] > capacity then\n      \
    \              t[i] = capacity\n                end\n            end\n       \
    \ end\n    end\n    return t[1]\nend", "    local i, j, max_fill = 1, 1, 0\n \
    \   for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                max_fill = max_fill + 1\n            \
    \    if max_fill > capacity then\n                    max_fill = max_fill - 1\n\
    \                end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ count = count + 1\n                if count > capacity then\n              \
    \      count = count - 1\n                    count = count + 1\n            \
    \    end\n            end\n        end\n    end\n    return count\nend", "   \
    \ local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1\
    \ do\n            if grid[i][j] == 1 then\n                result = max(result,\
    \ max_fill(grid, capacity))\n            end\n        end\n    end\n    return\
    \ result\nend\n\"\"\"\n", "    local t = {}\n    for i = 1, #grid, 1 do\n    \
    \    for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n        \
    \        t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n\
    \    return t[#grid]\nend", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                count = count + 1\n                if count >= capacity then\n\
    \                    count = count - capacity\n                    i = i - 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n\
    \                if t[i] > capacity then\n                    t[i] = capacity\n\
    \                end\n            end\n        end\n    end\n    return #t\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local buckets = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                for k = 1, capacity, 1 do\n                    if\
    \ not buckets[k] then\n                        buckets[k] = 1\n              \
    \      else\n                        buckets[k] = buckets[k] + 1\n           \
    \     end\n            end\n        end\n    end\n    return #buckets\nend", " \
    \   local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n    \
    \        if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n         \
    \       t[i+1] = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n         \
    \       t[i+j] = t[i+j] or 1\n                t[i-j] = t[i-j] or 1\n         \
    \   end\n        end\n    end\n    return t[1]\nend", "    local buckets = {}\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                local bucket = {}\n                bucket[1]\
    \ = capacity\n                bucket[2] = capacity\n                bucket[3]\
    \ = capacity\n                bucket[4] = capacity\n                bucket[5]\
    \ = capacity\n                bucket[6] = capacity\n                bucket[7]\
    \ = capacity\n                bucket[8] = capacity\n                bucket[9]\
    \ = capacity\n                buckets[i] = bucket\n            end\n        end\n\
    \    end\n    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                local bucket\
    \ = buckets[i]\n                local max = 0\n                for k = 1, #bucket,\
    \ 1 do\n                    if bucket[k] > max then\n                        max\
    \ = bucket[k]\n                    end\n                end\n                if\
    \ max > 0 then\n                    result = result + max\n                  \
    \  for k = 1, #bucket, 1 do\n                        bucket[k] = bucket[k] - max\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "    local t = {}\n    for i=1,#grid,1 do\n\
    \        for j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n        \
    \        t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n\
    \    return t[#grid]\nend", "    local buckets = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            if not buckets[i] then\n                    buckets[i] = {}\n   \
    \             buckets[i][j] = buckets[i][j] + 1\n                if buckets[i][j]\
    \ > capacity then\n                    buckets[i][j] = capacity\n            \
    \    end\n            end\n        end\n    end\n    return #buckets\nend", " \
    \   local n = grid.length\n    local m = grid[1].length\n    local i, j\n    local\
    \ count = 0\n    for i = 1, n, 1 do\n        for j = 1, m, 1 do\n            if\
    \ grid[i][j] == 1 then\n                count = count + 1\n                grid[i][j]\
    \ = 0\n                while grid[i][j] == 0 and count < capacity do\n       \
    \             count = count + 1\n                    grid[i][j] = 1\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", " \
    \   local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if not buckets[i]\
    \ then\n                    buckets[i] = {}\n                end\n           \
    \     buckets[i][j] = buckets[i][j] + 1\n            end\n        end\n    end\n\
    \    local result = 0\n    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i],\
    \ 1 do\n            if buckets[i][j] >= capacity then\n                result\
    \ = result + 1\n                buckets[i][j] = buckets[i][j] - capacity\n   \
    \         end\n        end\n    end\n    return result\nend", "    local t = {}\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] + 1\n          \
    \      t[i] = t[i] or t[i+1] + 1\n                t[i] = t[i] or t[i-1] + 1\n\
    \                t[i] = t[i] or t[i+1] + 1\n            end\n        end\n   \
    \ end\n    return t[#grid]\nend", "    local buckets = {}\n    local result =\
    \ 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n         \
    \   if grid[i][j] == 1 then\n                if buckets[i] == nil then\n     \
    \               buckets[i] = {}\n                end\n                buckets[i][j]\
    \ = buckets[i][j] + 1\n                if buckets[i][j] > capacity then\n    \
    \                buckets[i][j] = capacity\n                    result = result\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n    return t[#grid]\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n\
    \                t[i + 1] = t[i + 1] or 1\n                t[i - 1] = t[i - 1]\
    \ or 1\n                t[i + j] = t[i + j] or 1\n                t[i - j] = t[i\
    \ - j] or 1\n            end\n        end\n    end\n    return t[1]\nend", " \
    \   local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                local count = 0\n\
    \                for k = 1, #grid, 1 do\n                    for l = 1, #grid[k],\
    \ 1 do\n                        if grid[k][l] == 1 then\n                    \
    \        count = count + 1\n                        end\n                    end\n\
    \                end\n                if count >= capacity then\n            \
    \        result = result + 1\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "    local t = {}\n    for i=1,#grid,1 do\n\
    \        for j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n        \
    \        t[i] = t[i] or 1\n                t[j] = t[j] or 1\n            end\n\
    \        end\n    end\n    return #t\nend", "    local i, j, max_fill = 1, 1,\
    \ 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n         \
    \   if grid[i][j] == 1 then\n                max_fill = max_fill + 1\n       \
    \         if max_fill > capacity then\n                    max_fill = max_fill\
    \ - 1\n                    max_fill = max_fill + 1\n                end\n    \
    \        end\n        end\n    end\n    return max_fill\nend", "    local buckets\
    \ = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                for k = 1, #buckets, 1 do\n  \
    \                  if buckets[k] >= capacity then\n                        buckets[k]\
    \ = 0\n                    end\n                    buckets[k] = buckets[k] +\
    \ 1\n                end\n            end\n        end\n    end\n    return #buckets\n\
    end", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n      \
    \  for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n          \
    \      max_fill = max_fill + 1\n                if max_fill > capacity then\n\
    \                    max_fill = max_fill - 1\n                end\n          \
    \  end\n        end\n    end\n    return max_fill\nend", "    local i, j, max_fill\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                max_fill = max_fill + 1\n\
    \                if max_fill > capacity then\n                    max_fill = max_fill\
    \ - 1\n                    max_fill = max_fill + 1\n                end\n    \
    \        end\n        end\n    end\n    return max_fill\nend", "    local t =\
    \ {}\n    local n = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1]\
    \ + 1\n                t[i+1] = t[i+1] or t[i+1] + 1\n                t[i+2] =\
    \ t[i+2] or t[i+2] + 1\n                t[i+3] = t[i+3] or t[i+3] + 1\n      \
    \          t[i+4] = t[i+4] or t[i+4] + 1\n                t[i+5] = t[i+5] or t[i+5]\
    \ + 1\n                t[i+6] = t[i+6] or t[i+6] + 1\n                t[i+7] =\
    \ t[i+7] or t[i+7] + 1\n                t[i+8] = t[i+8] or t[i+8] + 1\n      \
    \          t[i+9] = t[i+9] or t[i+9] + 1\n            end\n        end\n    end\n\
    \    for i = 1, #t, 1 do\n        if t[i] >= capacity then\n            n = n\
    \ + 1\n        end\n    end\n    return n\nend", "    local i, j, max_fill = 1,\
    \ 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n      \
    \      if grid[i][j] == 1 then\n                if max_fill < capacity then\n\
    \                    max_fill = max_fill + 1\n                end\n          \
    \  end\n        end\n    end\n    return max_fill\nend", "    local t = {}\n \
    \   for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                t[i] = t[i] or 1\n                t[i+1]\
    \ = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n                t[i+j]\
    \ = t[i+j] or 1\n                t[i-j] = t[i-j] or 1\n            end\n     \
    \   end\n    end\n    return t[1]\nend", "    local t = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n\
    \    end\n    return t[#grid]\nend", "    local max_fill = 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                local count = 0\n                for k = 1, #grid, 1 do\n   \
    \                 for l = 1, #grid[k], 1 do\n                        if grid[k][l]\
    \ == 1 then\n                            count = count + 1\n                 \
    \       end\n                    end\n                end\n                if\
    \ count > max_fill then\n                    max_fill = count\n              \
    \  end\n            end\n        end\n    end\n    return max_fill\nend", "  \
    \  local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local i, j, max_fill = 1, 1, 0\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                max_fill = max_fill + 1\n            \
    \    if max_fill > capacity then\n                    max_fill = max_fill - 1\n\
    \                    max_fill = max_fill + 1\n                end\n          \
    \  end\n        end\n    end\n    return max_fill\nend", "    local t = {}\n \
    \   for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or t[i-1] or t[i+1] or t[i-1]\n     \
    \       end\n        end\n    end\n    return t[1]\nend", "    local i, j, count\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                count = count + 1\n     \
    \           if count > capacity then\n                    count = capacity\n \
    \                   break\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1]\
    \ + 1\n                t[i] = t[i] or t[i+1] + 1\n                t[i] = t[i]\
    \ or t[i-1] + 1\n                t[i] = t[i] or t[i+1] + 1\n            end\n\
    \        end\n    end\n    return t[#grid]\nend", "    local i, j, max_fill =\
    \ 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n   \
    \         if grid[i][j] == 1 then\n                max_fill = max_fill + 1\n \
    \               if max_fill > capacity then\n                    max_fill = max_fill\
    \ - 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local buckets = {}\n    for i = 1, #grid, 1 do\n      \
    \  for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n          \
    \      buckets[i,j] = buckets[i,j] + 1\n                if buckets[i,j] > capacity\
    \ then\n                    buckets[i,j] = capacity\n                end\n   \
    \         end\n        end\n    end\n    return #buckets\nend\n\"\"\"\n", "  \
    \  local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] +\
    \ 1\n                t[i] = t[i] or t[i+1] + 1\n                t[i] = t[i] or\
    \ t[i-1] + 1\n                t[i] = t[i] or t[i+1] + 1\n            end\n   \
    \     end\n    end\n    return t[#grid]\nend", "    local t = {}\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] + 1\n                if t[i] > capacity\
    \ then\n                    t[i] = capacity\n                end\n           \
    \ end\n        end\n    end\n    return t\nend", "    local t = {}\n    for i=1,#grid,1\
    \ do\n        for j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n   \
    \             t[i] = t[i] or t[j] + 1\n            end\n        end\n    end\n\
    \    return t[1]\nend", "    local buckets = {}\n    local max_fill = 0\n    for\
    \ i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n            if grid[i][j] ==\
    \ 1 then\n                local bucket = buckets[i]\n                if bucket\
    \ == nil then\n                    buckets[i] = 1\n                else\n    \
    \                buckets[i] = bucket + 1\n                end\n              \
    \  if buckets[i] > max_fill then\n                    max_fill = buckets[i]\n\
    \                end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                local bucket = buckets[i]\n                if bucket == nil then\n\
    \                    buckets[i] = 1\n                else\n                  \
    \  buckets[i] = bucket + 1\n                end\n                if buckets[i]\
    \ > max_fill then\n                    max_fill = buckets[i]\n               \
    \ end\n            end\n        end\n    end\n    return max_fill\nend", "   \
    \ local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n      \
    \      if grid[i][j] == 1 then\n                t[i,j] = t[i,j] + 1\n        \
    \        if t[i,j] >= capacity then\n                    t[i,j] = 0\n        \
    \        end\n            end\n        end\n    end\n    return #t\nend", "  \
    \  local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                result = max(result,\
    \ max_fill(grid, capacity))\n            end\n        end\n    end\n    return\
    \ result\nend", "    local buckets = {}\n    local max_count = 0\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                local count = 0\n                for k = 1, #grid,\
    \ 1 do\n                    if grid[k][j] == 0 then\n                        count\
    \ = count + 1\n                    end\n                end\n                if\
    \ count > max_count then\n                    max_count = count\n            \
    \        buckets[i] = j\n                end\n            end\n        end\n \
    \   end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n     \
    \       if grid[i][j] == 1 then\n                local count = 0\n           \
    \     for k = 1, #grid, 1 do\n                    if grid[k][j] == 0 then\n  \
    \                      count = count + 1\n                    end\n          \
    \      end\n                if count == max_count then\n                    for\
    \ k = 1, #grid, 1 do\n                        if grid[k][j] == 1 then\n      \
    \                      grid[k][j] = 0\n                        end\n         \
    \           end\n                    for k = 1, #grid, 1 do\n                \
    \        if grid[i][k] == 1 then\n                            grid[i][k] = 0\n\
    \                        end\n                    end\n                    for\
    \ k = 1, #grid, 1 do\n                        if grid[k][j] == 1 then\n      \
    \                      grid[k][j] = 0\n                        end\n         \
    \           end\n                    for k = 1, #grid, 1 do\n                \
    \        if grid[i][k] == 1 then\n                            grid[i][k] = 0\n\
    \                        end\n                    end\n                    for\
    \ k = 1, #grid, 1 do\n                        if grid[k][j] == 1 then\n      \
    \                      grid[k][j] = 0\n                        end\n         \
    \           end\n                    for k = 1, #grid, 1 do\n                \
    \        if grid[i][k] == 1 then\n                            grid[i][k] = 0\n\
    \                        end\n                    end\n                    for\
    \ k = 1, #grid, 1 do\n                        if grid[k][j] == 1 then\n      \
    \                      grid[k][j] = 0\n                        end\n         \
    \           end\n                    for k = 1, #grid, 1", "    local n = grid.length\n\
    \    local m = grid[1].length\n    local i, j\n    local max = 0\n    for i =\
    \ 1, n, 1 do\n        for j = 1, m, 1 do\n            if grid[i][j] == 1 then\n\
    \                local cur = 0\n                for k = 1, capacity, 1 do\n  \
    \                  cur = cur + 1\n                    if grid[i+k][j] == 1 then\n\
    \                        cur = cur - 1\n                    end\n            \
    \    end\n                if cur > max then\n                    max = cur\n \
    \               end\n            end\n        end\n    end\n    return max\nend",
  "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n     \
    \       if grid[i][j] == 1 then\n                t[i] = t[i] or #t + 1\n     \
    \           t[i+1] = t[i+1] or #t + 1\n                t[i-1] = t[i-1] or #t +\
    \ 1\n                t[i+1] = t[i+1] or #t + 1\n                t[i-1] = t[i-1]\
    \ or #t + 1\n            end\n        end\n    end\n    return t[1]\nend", " \
    \   local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n      \
    \      end\n        end\n    end\n    return t[1]\nend", "    local i, j, count\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                count = count + 1\n     \
    \           if count > capacity then\n                    count = capacity\n \
    \                   break\n            end\n        end\n    end\n    return count\n\
    end", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ count = count + 1\n                if count > capacity then\n              \
    \      count = capacity\n                    break\n            end\n        end\n\
    \    end\n    return count\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            t[i] = t[i] + 1\n                if t[i] > capacity then\n      \
    \              t[i] = capacity\n                end\n            end\n       \
    \ end\n    end\n    return t[1]\nend", "    local buckets = {}\n    for i = 1,\
    \ #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] ==\
    \ 1 then\n                if not buckets[i] then\n                    buckets[i]\
    \ = {}\n                end\n                if not buckets[i][j] then\n     \
    \               buckets[i][j] = 0\n                end\n                buckets[i][j]\
    \ = buckets[i][j] + 1\n            end\n        end\n    end\n    local result\
    \ = 0\n    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i], 1 do\n \
    \           if buckets[i][j] > capacity then\n                result = result\
    \ + 1\n                buckets[i][j] = 0\n            end\n        end\n    end\n\
    \    return result\nend", "    local t = {}\n    for i=1,#grid,1 do\n        for\
    \ j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n    return t[#grid]\n\
    end", "    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                result = result +\
    \ 1\n                for k = 1, #grid, 1 do\n                    if grid[k][j]\
    \ == 0 then\n                        grid[k][j] = 1\n                        break\n\
    \                end\n            end\n        end\n    end\n    return result\n\
    end", "    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                result = math.max(result,\
    \ max_fill(grid, capacity))\n            end\n        end\n    end\n    return\
    \ result\nend", "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ if not buckets[i] then\n                    buckets[i] = {}\n              \
    \  end\n                buckets[i][j] = buckets[i][j] + 1\n            end\n \
    \       end\n    end\n    local result = 0\n    for i = 1, #buckets, 1 do\n  \
    \      for j = 1, #buckets[i], 1 do\n            if buckets[i][j] > capacity then\n\
    \                result = result + 1\n                buckets[i][j] = buckets[i][j]\
    \ - capacity\n            end\n        end\n    end\n    return result\nend",
  "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    buckets[i] = 1\n \
    \               else\n                    buckets[i] = bucket + 1\n          \
    \      end\n            end\n        end\n    end\n    return #buckets\nend",
  "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                count =\
    \ count + 1\n                if count > capacity then\n                    count\
    \ = capacity\n                    break\n            end\n        end\n    end\n\
    \    return count\nend", "    local t = {}\n    for i=1,#grid,1 do\n        for\
    \ j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = t[i] or t[j] + 1\n            end\n        end\n    end\n    return t[1]\n\
    end", "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n\
    \            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n      \
    \          if t[i] > capacity then\n                    t[i] = capacity\n    \
    \            end\n            end\n        end\n    end\n    return #t\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local n = grid:size(1)\n    local\
    \ m = grid:size(2)\n    local buckets = {}\n    local i = 1\n    while i <= n\
    \ do\n        local j = 1\n        while j <= m do\n            local well = grid[i][j]\n\
    \            if well then\n                local bucket = buckets[well]\n    \
    \            if bucket then\n                    bucket:add(1)\n             \
    \   else\n                    buckets[well] = {1}\n                end\n     \
    \           j = j + 1\n            else\n                j = j + 1\n         \
    \   end\n        end\n        i = i + 1\n    end\n    local result = 0\n    for\
    \ k, v in pairs(buckets) do\n        result = result + v:max()\n    end\n    return\
    \ result\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = t[i] + 1\n                if t[i] > capacity then\n                    t[i]\
    \ = capacity\n                end\n            end\n        end\n    end\n   \
    \ return t[1]\nend", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                count = count + 1\n                if count > capacity then\n\
    \                    count = count - 1\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = max(t[i],\
    \ t[i-1] + 1)\n            end\n        end\n    end\n    return t[#grid]\nend",
  "    local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if not buckets[i]\
    \ then\n                    buckets[i] = {}\n                end\n           \
    \     buckets[i][j] = buckets[i][j] + 1\n                if buckets[i][j] > capacity\
    \ then\n                    buckets[i][j] = capacity\n                end\n  \
    \          end\n        end\n    end\n    return #buckets\nend", "    local buckets\
    \ = {}\n    local result = 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if not buckets[i]\
    \ then\n                    buckets[i] = {}\n                end\n           \
    \     if not buckets[i][j] then\n                    buckets[i][j] = {}\n    \
    \            end\n                buckets[i][j]['water'] = 0\n               \
    \ buckets[i][j]['capacity'] = capacity\n            end\n        end\n    end\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                if buckets[i][j]['water'] >= buckets[i][j]['capacity']\
    \ then\n                    buckets[i][j]['water'] = 0\n                    buckets[i][j]['capacity']\
    \ = capacity\n                    result = result + 1\n                end\n \
    \           end\n        end\n    end\n    return result\nend", "    local i,\
    \ j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                max_fill = max_fill\
    \ + 1\n                if max_fill > capacity then\n                    max_fill\
    \ = max_fill - 1\n                end\n            end\n        end\n    end\n\
    \    return max_fill\nend", "    local n = 0\n    local i, j\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                n = n + 1\n                grid[i][j] = 0\n                while\
    \ grid[i][j] == 0 and n < capacity do\n                    n = n + 1\n       \
    \             grid[i][j] = 1\n                end\n            end\n        end\n\
    \    end\n    return n\nend", "    local buckets = {}\n    local max_fill = 0\n\
    \    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if\
    \ grid[i][j] == 1 then\n                local cur_fill = 0\n                for\
    \ k = 1, #grid, 1 do\n                    if grid[k][j] == 1 then\n          \
    \              cur_fill = cur_fill + 1\n                    end\n            \
    \    end\n                if cur_fill > max_fill then\n                    max_fill\
    \ = cur_fill\n                end\n                if cur_fill == capacity then\n\
    \                    local cur_bucket = buckets[i]\n                    if cur_bucket\
    \ == nil then\n                        cur_bucket = {}\n                     \
    \   buckets[i] = cur_bucket\n                    end\n                    cur_bucket[j]\
    \ = cur_bucket[j] + 1\n                end\n            end\n        end\n   \
    \ end\n    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i], 1 do\n \
    \           if buckets[i][j] > max_fill then\n                max_fill = buckets[i][j]\n\
    \            end\n        end\n    end\n    return max_fill\nend", "    local\
    \ i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if max_fill < capacity\
    \ then\n                    max_fill = max_fill + 1\n                end\n   \
    \         end\n        end\n    end\n    return max_fill\nend", "    local n =\
    \ grid:size()\n    local m = grid[1]:size()\n    local i, j, count = 1, 1, 0\n\
    \    while i <= n and j <= m and count < n * m\n        if grid[i][j] == 1\n \
    \           count = count + 1\n            if count == n * m\n               \
    \ return count\n            end\n            i = i + 1\n            if i > n\n\
    \                j = j + 1\n                if j > m\n                    i =\
    \ 1\n                    j = 1\n                end\n            end\n       \
    \ end\n        j = j + 1\n    end\nend", "    local result = 0\n    for i = 1,\
    \ #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] ==\
    \ 1 then\n                result = max(result, fill(grid, i, j, capacity))\n \
    \           end\n        end\n    end\n    return result\nend", "    local i,\
    \ j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                max_fill = max_fill\
    \ + 1\n                if max_fill > capacity then\n                    max_fill\
    \ = max_fill - 1\n                    max_fill = max_fill + 1\n              \
    \  end\n            end\n        end\n    end\n    return max_fill\nend", "  \
    \  local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local n = grid:size()\n    local\
    \ m = grid[1]:size()\n    local i, j, count = 1, 1, 0\n    while i <= n and j\
    \ <= m and count < n * m\n        if grid[i][j] == 1\n            count = count\
    \ + 1\n            if count == n * m\n                return count\n         \
    \   else\n                i = i + 1\n        else\n            j = j + 1\n   \
    \ return count\nend", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                count = count + 1\n                if count > capacity then\n\
    \                    count = count - 1\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n\
    \                if t[i] >= capacity then\n                    t[i] = 0\n    \
    \            end\n            end\n        end\n    end\n    return #t\nend",
  "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n     \
    \       if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n          \
    \      t[i+1] = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n          \
    \      t[i+j] = t[i+j] or 1\n                t[i-j] = t[i-j] or 1\n          \
    \  end\n        end\n    end\n    return t[1]\nend", "    local i, j, count =\
    \ 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n   \
    \         if grid[i][j] == 1 then\n                count = count + 1\n       \
    \         if count > capacity then\n                    count = capacity\n   \
    \                 break\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n\
    \                if t[i] > capacity then\n                    t[i] = capacity\n\
    \                end\n            end\n        end\n    end\n    return #t\nend",
  "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n  \
    \      for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n      \
    \          local bucket = buckets[i]\n                if bucket == nil then\n\
    \                    bucket = {}\n                    buckets[i] = bucket\n  \
    \              end\n                bucket[j] = bucket[j] + 1\n              \
    \  if bucket[j] > capacity then\n                    bucket[j] = capacity\n  \
    \                  max_fill = max_fill + 1\n                end\n            end\n\
    \        end\n    end\n    return max_fill\nend", "    local t = {}\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or t[i-1] + 1\n                t[i] =\
    \ t[i] or t[i+1] + 1\n                t[i] = t[i] or t[i-1] + 1\n            \
    \    t[i] = t[i] or t[i+1] + 1\n            end\n        end\n    end\n    return\
    \ t[#grid]\nend", "    local buckets = {}\n    local max_fill = 0\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                local bucket = buckets[i]\n                if bucket\
    \ == nil then\n                    bucket = {}\n                    buckets[i]\
    \ = bucket\n                end\n                bucket[j] = bucket[j] + 1\n \
    \               if bucket[j] > capacity then\n                    bucket[j] =\
    \ capacity\n                    max_fill = max_fill + 1\n                end\n\
    \            end\n        end\n    end\n    return max_fill\nend", "    local\
    \ i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                count = count + 1\n\
    \                if count > capacity then\n                    count = count -\
    \ 1\n                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    local buckets = {}\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                if not buckets[i] then\n                    buckets[i]\
    \ = {}\n                end\n                buckets[i][j] = buckets[i][j] + 1\n\
    \                if buckets[i][j] > capacity then\n                    buckets[i][j]\
    \ = capacity\n                end\n            end\n        end\n    end\n   \
    \ return #buckets\nend", "    local buckets = {}\n    local n = 0\n    for i =\
    \ 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                n = n + 1\n                buckets[i] = buckets[i]\
    \ + 1\n                if buckets[i] > capacity then\n                    buckets[i]\
    \ = capacity\n                end\n            end\n        end\n    end\n   \
    \ return n\nend", "    local max_wells = {}\n    local max_buckets = {}\n    for\
    \ i=1,#grid do\n        for j=1,#grid[i] do\n            if grid[i][j] == 1 then\n\
    \                if max_wells[i] == nil then\n                    max_wells[i]\
    \ = {}\n                    max_wells[i][j] = 1\n                else\n      \
    \              max_wells[i][j] = max_wells[i][j] + 1\n                end\n  \
    \          end\n        end\n    end\n    for i=1,#grid do\n        for j=1,#grid[i]\
    \ do\n            if max_wells[i][j] > 0 then\n                if max_buckets[i]\
    \ == nil then\n                    max_buckets[i] = {}\n                    max_buckets[i][j]\
    \ = max_wells[i][j]\n                else\n                    max_buckets[i][j]\
    \ = max_buckets[i][j] + max_wells[i][j]\n                end\n            end\n\
    \        end\n    end\n    return max_buckets[1][1]\nend", "    local buckets\
    \ = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                local curr_fill\
    \ = 0\n                for k = 1, #grid, 1 do\n                    if grid[k][j]\
    \ == 1 then\n                        curr_fill = curr_fill + 1\n             \
    \       end\n                end\n                if curr_fill > max_fill then\n\
    \                    max_fill = curr_fill\n                end\n             \
    \   if curr_fill == capacity then\n                    local curr_bucket = buckets[curr_fill]\n\
    \                    if curr_bucket == nil then\n                        curr_bucket\
    \ = {}\n                        buckets[curr_fill] = curr_bucket\n           \
    \         end\n                    curr_bucket[i] = curr_bucket[i] + 1\n     \
    \           end\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local n = grid:size()\n    local m = grid[1]:size()\n    local i, j,\
    \ count = 1, 1, 0\n    while i <= n and j <= m and count < n * m\n        if grid[i][j]\
    \ == 1 then\n            count = count + 1\n            i = i + 1\n        else\n\
    \            j = j + 1\n        end\n    end\n    return count\nend", "    local\
    \ buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ local cur_fill = 0\n                for k = 1, #grid, 1 do\n               \
    \     if grid[k][j] == 1 then\n                        cur_fill = cur_fill + 1\n\
    \                    end\n                end\n                if cur_fill > max_fill\
    \ then\n                    max_fill = cur_fill\n                end\n       \
    \         if cur_fill == capacity then\n                    for k = 1, #grid,\
    \ 1 do\n                        if grid[k][j] == 1 then\n                    \
    \        local cur_fill = 0\n                            for l = 1, #grid, 1 do\n\
    \                                if grid[k][l] == 1 then\n                   \
    \                 cur_fill = cur_fill + 1\n                                end\n\
    \                            end\n                            if cur_fill > max_fill\
    \ then\n                                max_fill = cur_fill\n                \
    \            end\n                        end\n                    end\n     \
    \           end\n                if cur_fill > 0 then\n                    buckets[i]\
    \ = buckets[i] + 1\n                end\n            end\n        end\n    end\n\
    \    for i = 1, #buckets, 1 do\n        if buckets[i] > max_fill then\n      \
    \      max_fill = buckets[i]\n        end\n    end\n    return max_fill\nend",
  "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                count =\
    \ count + 1\n                if count > capacity then\n                    count\
    \ = count - 1\n                    count = count + 1\n                end\n  \
    \          end\n        end\n    end\n    return count\nend", "    local i, j,\
    \ max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if max_fill < capacity\
    \ then\n                    max_fill = max_fill + 1\n                end\n   \
    \         end\n        end\n    end\n    return max_fill\nend", "    local buckets\
    \ = {}\n    local max_fill = 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                local bucket\
    \ = buckets[i]\n                if bucket == nil then\n                    buckets[i]\
    \ = 1\n                else\n                    buckets[i] = bucket + 1\n   \
    \             end\n                if buckets[i] > max_fill then\n           \
    \         max_fill = buckets[i]\n                end\n            end\n      \
    \  end\n    end\n    return max_fill\nend", "    local t = {}\n    for i=1,#grid,1\
    \ do\n        for j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n   \
    \             t[i] = max(t[i], t[i-1] + 1)\n            end\n        end\n   \
    \ end\n    return t[#grid]\nend", "    local n = grid:size()\n    local m = grid:size(1)\n\
    \    local i, j\n    local max = 0\n    for i = 1, n, 1 do\n        for j = 1,\
    \ m, 1 do\n            if grid[i][j] == 1 then\n                local k = 0\n\
    \                while k < capacity do\n                    k = k + 1\n      \
    \              if grid[i - k][j] == 0 then\n                        break\n  \
    \              end\n                if k == capacity then\n                  \
    \  max = max + 1\n                end\n            end\n        end\n    end\n\
    \    return max\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                max_fill = max_fill + 1\n                if max_fill > capacity\
    \ then\n                    max_fill = max_fill - 1\n                end\n   \
    \         end\n        end\n    end\n    return max_fill\nend", "    local i,\
    \ j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                count = count + 1\n\
    \                if count >= capacity then\n                    count = count\
    \ - capacity\n                    i = i + 1\n                    if i >= #grid\
    \ then\n                        i = 1\n                    else\n            \
    \            j = j + 1\n                        if j >= #grid[i] then\n      \
    \                      j = 1\n                        end\n                  \
    \  end\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            max_fill = max_fill + 1\n                if max_fill > capacity then\n\
    \                    max_fill = max_fill - 1\n                    max_fill = max_fill\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ max_fill\nend", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = max(t[i], t[i-1] + 1)\n            end\n        end\n    end\n    return t[#grid]\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or t[j]\
    \ + 1\n            end\n        end\n    end\n    return t[1]\nend", "    local\
    \ t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n    \
    \        if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n         \
    \       t[i+1] = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n         \
    \       t[i+j] = t[i+j] or 1\n                t[i-j] = t[i-j] or 1\n         \
    \   end\n        end\n    end\n    return t[1]\nend", "    local t = {}\n    local\
    \ i = 1\n    local j = 1\n    local max_fill = 0\n    while i <= #grid do\n  \
    \      while j <= #grid[i] do\n            if grid[i][j] == 1 then\n         \
    \       t[i] = t[i] or {}\n                t[i][j] = t[i][j] or 0\n          \
    \      t[i][j] = t[i][j] + 1\n                if t[i][j] > max_fill then\n   \
    \                 max_fill = t[i][j]\n                end\n            end\n \
    \           j = j + 1\n        end\n        i = i + 1\n    end\n    return max_fill\n\
    end", "    local buckets = {}\n    local max_fill = 0\n    for i = 1, #grid, 1\
    \ do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                local bucket = buckets[i]\n                if bucket == nil then\n\
    \                    buckets[i] = 1\n                else\n                  \
    \  buckets[i] = bucket + 1\n                end\n                if buckets[i]\
    \ > max_fill then\n                    max_fill = buckets[i]\n               \
    \ end\n            end\n        end\n    end\n    return max_fill\nend", "   \
    \ local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1,\
    \ #grid[i], 1 do\n            if grid[i][j] == 1 then\n                count =\
    \ count + 1\n                if count > capacity then\n                    count\
    \ = capacity\n                    break\n            end\n        end\n    end\n\
    \    return count\nend", "    local t = {}\n    for i=1,#grid,1 do\n        for\
    \ j=1,#grid[i],1 do\n            if grid[i][j] == 1 then\n                t[i]\
    \ = t[i] or t[i-1] + 1\n                t[i+1] = t[i+1] or t[i+1] + 1\n      \
    \      end\n        end\n    end\n    return t[#t]\nend", "    local n = grid.length\n\
    \    local m = grid[1].length\n    local i, j\n    local max = 0\n    for i =\
    \ 1, n, 1 do\n        for j = 1, m, 1 do\n            if grid[i][j] == 1 then\n\
    \                local k = 0\n                while k < capacity do\n        \
    \            k = k + 1\n                    if grid[i - k][j] == 1 then\n    \
    \                    grid[i - k][j] = 0\n                        max = max + 1\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return max\nend", "    local i, j, max_fill = 1, 1, 0\n    for i\
    \ = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                if max_fill < capacity then\n                   \
    \ max_fill = max_fill + 1\n                end\n            end\n        end\n\
    \    end\n    return max_fill\nend", "    local t = {}\n    local i, j\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                t[i] = t[i] or 1\n                t[i + 1] = t[i\
    \ + 1] or 1\n                t[i - 1] = t[i - 1] or 1\n                t[j] =\
    \ t[j] or 1\n                t[j + 1] = t[j + 1] or 1\n                t[j - 1]\
    \ = t[j - 1] or 1\n            end\n        end\n    end\n    return t[1]\nend",
  "    local t = {}\n    for i=1,#grid,1 do\n        for j=1,#grid[i],1 do\n     \
    \       if grid[i][j] == 1 then\n                t[i] = t[i] or t[i-1] or t[i+1]\
    \ or t[i-1] or t[i+1]\n            end\n        end\n    end\n    return t[1]\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
