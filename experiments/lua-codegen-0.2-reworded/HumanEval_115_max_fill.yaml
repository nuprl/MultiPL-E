name: HumanEval_115_max_fill
language: lua
prompt: "-- You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n-- and\
  \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
  \ the wells.\n-- Output the number of times you need to lower the buckets.\n-- Example\
  \ 1:\n-- >>> max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n-- 6\n-- Example 2:\n\
  -- >>> max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n-- 5\n-- Example\
  \ 3:\n-- >>> max_fill([[0,0,0], [0,0,0]], 5)\n-- 0\n-- Constraints:\n-- * all wells\
  \ have the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length\
  \ <= 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
  \ capacity)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1,\
  \ 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n\
  \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1,\
  \ 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    local i = 1\n    local j = 1\n    while i <=\
    \ #grid do\n        while j <= #grid[i] do\n            if grid[i][j] == 1 then\n\
    \                t[i] = t[i] + 1\n                if t[i] > capacity then\n  \
    \                  t[i] = capacity\n                end\n            end\n   \
    \         j = j + 1\n        end\n        i = i + 1\n    end\n    return #t\n\
    end", "    local i, j, count = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for\
    \ j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n               \
    \ count = count + 1\n                if count > capacity then\n              \
    \      count = capacity\n                    break\n            end\n        end\n\
    \    end\n    return count\nend", "    local buckets = {}\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n\
    \                if not buckets[i] then\n                    buckets[i] = {}\n\
    \                end\n                buckets[i][j] = buckets[i][j] + 1\n    \
    \        end\n        end\n    end\n    local result = 0\n    for i = 1, #grid,\
    \ 1 do\n        for j = 1, #grid[i], 1 do\n            if buckets[i][j] > 0 then\n\
    \                result = result + 1\n                buckets[i][j] = buckets[i][j]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n\
    \            if grid[i][j] == 1 then\n                local bucket = buckets[i]\n\
    \                if bucket == nil then\n                    bucket = {}\n    \
    \                buckets[i] = bucket\n                end\n                bucket[j]\
    \ = bucket[j] + 1\n            end\n        end\n    end\n    local result = 0\n\
    \    for i = 1, #buckets, 1 do\n        for j = 1, #buckets[i], 1 do\n       \
    \     if buckets[i][j] >= capacity then\n                result = result + 1\n\
    \                buckets[i][j] = 0\n            end\n        end\n    end\n  \
    \  return result\nend", "    local max = 0\n    for i = 1, #grid, 1 do\n     \
    \   for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n         \
    \       local count = 0\n                for k = 1, #grid, 1 do\n            \
    \        if grid[k][j] == 0 then\n                        count = count + 1\n\
    \                    end\n                end\n                if count > max\
    \ then\n                    max = count\n                end\n            end\n\
    \        end\n    end\n    return max\nend", "    local n = grid.length\n    local\
    \ m = grid[1].length\n    local i, j\n    local max = 0\n    for i = 1, n, 1 do\n\
    \        for j = 1, m, 1 do\n            if grid[i][j] == 1 then\n           \
    \     local cur = 0\n                for k = 1, capacity, 1 do\n             \
    \       cur = cur + 1\n                    if grid[i - k][j] == 1 then\n     \
    \                   cur = cur - 1\n                    end\n                end\n\
    \                if cur > max then\n                    max = cur\n          \
    \      end\n            end\n        end\n    end\n    return max\nend", "   \
    \ local buckets = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                if not buckets[i]\
    \ then\n                    buckets[i] = {}\n                end\n           \
    \     buckets[i][j] = buckets[i][j] + 1\n            end\n        end\n    end\n\
    \    return #buckets\nend", "    local n = grid.length\n    local m = grid[1].length\n\
    \    local i, j, k, count = 1, 1, 0, 0\n    while i <= n and j <= m and count\
    \ < n * m\n        if grid[i][j] == 1\n            count = count + 1\n       \
    \     k = k + 1\n            if k == capacity\n                count = count +\
    \ 1\n            end\n        end\n        i = i + 1\n        j = j + 1\n    end\n\
    \    return count\nend", "    local buckets = {}\n    for i = 1, #grid, 1 do\n\
    \        for j = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n    \
    \            buckets[i, j] = buckets[i, j] + 1\n                if buckets[i,\
    \ j] > capacity then\n                    buckets[i, j] = capacity\n         \
    \       end\n            end\n        end\n    end\n    return #buckets\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local t = {}\n    for i=1,#  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              ", "    local i, j, max_fill = 1, 1, 0\n    for\
    \ i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j]\
    \ == 1 then\n                max_fill = max_fill + 1\n                if max_fill\
    \ > capacity then\n                    max_fill = max_fill - 1\n             \
    \       max_fill = max_fill + 1\n                end\n            end\n      \
    \  end\n    end\n    return max_fill\nend", "    local t = {}\n    local n = grid.length\n\
    \    local m = grid[1].length\n    for i = 1, n, 1 do\n        for j = 1, m, 1\
    \ do\n            if grid[i][j] == 1 then\n                t[i] = t[i] or 1\n\
    \                t[i+1] = t[i+1] or 1\n                t[i-1] = t[i-1] or 1\n\
    \                t[i+m] = t[i+m] or 1\n                t[i-m] = t[i-m] or 1\n\
    \            end\n        end\n    end\n    return t[1]\nend\n\"\"\"\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        ", "    local i, j, count\
    \ = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n \
    \           if grid[i][j] == 1 then\n                count = count + 1\n     \
    \           if count > capacity then\n                    count = count - 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i],\
    \ 1 do\n            if grid[i][j] == 1 then\n                t[i] = t[i] + 1\n\
    \                if t[i] >= capacity then\n                    t[i] = 0\n    \
    \            end\n            end\n        end\n    end\n    return #t\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                max_fill\
    \ = max_fill + 1\n                if max_fill > capacity then\n              \
    \      max_fill = max_fill - 1\n                end\n            end\n       \
    \ end\n    end\n    return max_fill\nend", "    local t = {}\n    local i, j,\
    \ k = 1, 1, 1\n    while i <= #grid do\n        while j <= #grid[i] do\n     \
    \       if grid[i][j] == 1 then\n                k = k + 1\n                t[k]\
    \ = t[k] or {}\n                t[k][i] = t[k][i] or {}\n                t[k][i][j]\
    \ = t[k][i][j] or {}\n                t[k][i][j][1] = t[k][i][j][1] or 0\n   \
    \             t[k][i][j][2] = t[k][i][j][2] or 0\n            end\n          \
    \  j = j + 1\n        end\n        i = i + 1\n    end\n    return t[k]\nend",
  "    local i, j, max_fill = 1, 1, 0\n    for i = 1, #grid, 1 do\n        for j =\
    \ 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                if max_fill\
    \ < capacity then\n                    max_fill = max_fill + 1\n             \
    \   end\n            end\n        end\n    end\n    return max_fill\nend", " \
    \   local n = grid.length\n    local m = grid[1].length\n    local i, j, k, res\
    \ = 1, 1, 0, 0\n    while i <= n and j <= m and k < capacity do\n        if grid[i][j]\
    \ == 1 then\n            res = res + 1\n            k = k + 1\n            i =\
    \ i + 1\n        else\n            j = j + 1\n        end\n    end\n    return\
    \ res\nend", "    local result = 0\n    for i = 1, #grid, 1 do\n        for j\
    \ = 1, #grid[i], 1 do\n            if grid[i][j] == 1 then\n                result\
    \ = result + 1\n                for k = 1, #grid, 1 do\n                    if\
    \ grid[k][j] == 0 then\n                        grid[k][j] = 1\n             \
    \           grid[i][j] = 0\n                        break\n                end\n\
    \            end\n        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
