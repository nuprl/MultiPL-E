name: HumanEval_18_how_many_times
language: lua
prompt: "-- Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>> how_many_times('aaa',\
  \ 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\nlocal function how_many_times(string,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
  \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
  \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
  \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local count = 0\n    for i = 1, #string, #substring do\n      \
    \  if string:sub(1, i) == substring then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend", "    local count = 0\n    for i = 1,\
    \ #string, 1 do\n        if string[i] == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #string, #substring do\n        if string:sub(1, i) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #string, #substring do\n        if\
    \ string:sub(1, i) == substring then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, #string,\
    \ #substring do\n        if string:sub(1, #substring) == substring then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for i = 1, #string, #substring do\n        if string:sub(1,\
    \ i) == substring then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, #string, #substring\
    \ do\n        if string:sub(1, #substring) == substring then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #string, #substring do\n        if string:sub(1, #substring)\
    \ == substring then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    local count = 0\n    for i = 1, #string, 2 do\n   \
    \     if string:sub(1, i) == substring then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #string, #substring do\n        if string:sub(1, i) == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #string, 2 do\n        if string:sub(1, i)\
    \ == substring then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    local count = 0\n    for i = 1, #string, 1 do\n   \
    \     if string:sub(1, #substring) == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #string, #substring do\n        if string:sub(1, #substring) ==\
    \ substring then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #string, 1 do\n        if\
    \ string:sub(1, #substring) == substring then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #string, #substring do\n        if string:sub(1, #substring) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #string, #substring do\n        if\
    \ string:sub(1, i) == substring then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, #string,\
    \ #substring do\n        if string:sub(1, #substring) == substring then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for i = 1, #string, #substring do\n        if string:sub(1,\
    \ i) == substring then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, #string, 2 do\n\
    \        if string:sub(1, i) == substring then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #string, #substring do\n        if string:sub(1, i) == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
