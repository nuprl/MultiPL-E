language: lua
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                      local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                local function\
    \ grade_equation(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjh4d03ff.lua:59: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                         local function grade_equation(grades)\n\
    \                                                                            \
    \                                                            local function grade_equation(grades)\n\
    \                                                                            \
    \                                                               local function\
    \ grade_equation(grades)\n                                                   \
    \           \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr4642__d.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                           local function grade_equation(grades)\n          \
    \                                                                            \
    \                                   local function grade_equation(grades)\n  \
    \                                                                            \
    \                                              local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                      local function\
    \ grade_equation(grades)\n                               \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpabl8sf67.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade(gpa)\n            if gpa\
    \ >= 4.0 then\n                return 'A+'\n            elseif gpa >= 3.7 then\n\
    \                return 'A'\n            elseif gpa >= 3.3 then\n            \
    \    return 'A-'\n            elseif gpa >= 3.0 then\n                return 'B+'\n\
    \            elseif gpa >= 2.7 then\n                return 'B'\n            elseif\
    \ gpa >= 2.3 then\n                return 'B-'\n            elseif gpa >= 2.0\
    \ then\n                return 'C+'\n            elseif gpa >= 1.7 then\n    \
    \            return 'C'\n            elseif gpa >= 1.3 then\n                return\
    \ 'C-'\n            elseif gpa >= 1.0 then\n                return 'D+'\n    \
    \        elseif gpa >= 0.7 then\n                return 'D'\n            elseif\
    \ gpa >= 0.0 then\n                return 'D-'\n            else\n           \
    \     return 'E'\n            end\n        end\n        return map(grade, grades)\n\
    \    end\n    return grade_equation(grades)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmc8tvbtj.lua:54:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpmc8tvbtj.lua:54:\
    \ in function </tmp/tmpmc8tvbtj.lua:24>\n\t(...tail calls...)\n\t/tmp/tmpmc8tvbtj.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local table\
    \ = {}\n    for i = 1, #grades, 2 do\n        table[grades[i]] = grades[i+1]\n\
    \    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqk_nxcu.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {1.7=2, 4=3}\nstack\
    \ traceback:\n\t/tmp/tmppqk_nxcu.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                      local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                            local function grade_equation(grades)\n\
    \                                                                            \
    \                                                               local function\
    \ grade_equation(grades)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1lfw7hat.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                           local function grade_equation(grades)\n          \
    \                                                                            \
    \                                   local function grade_equation(grades)\n  \
    \                                                                            \
    \                                              local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                     local function\
    \ grade_equation(grades)\n                                                   \
    \           \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaov3eb2s.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local table\
    \ = {}\n    for i = 1, #grades, 2 do\n        table[grades[i]] = grades[i+1]\n\
    \    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqk_nxcu.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {1.7=2, 4=3}\nstack\
    \ traceback:\n\t/tmp/tmppqk_nxcu.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                         local function grade_equation(grades)\n\
    \                                                                            \
    \                                                            local function grade_equation(grades)\n\
    \                                                                            \
    \                                                               local function\
    \ grade_equation(grades)\n                                                   \
    \                                                                            \
    \                   local function grade_equation(grades\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6u6km03r.lua:59: '')'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                     local function\
    \ grade_equation(grades)\n                                                   \
    \           \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4aegznzb.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                             local function grade_equation(grades)\n        \
    \                                                                            \
    \                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                      local function grade_equation(grades)\n\
    \                                                                            \
    \                                                            local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                      local function\
    \ grade_equation(grades)\n                                                   \
    \                                                                            \
    \                          local function grade_equation(grades)\n           \
    \                                                                            \
    \                                                                           local\
    \ function grade_equation(grades)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8fa4o89.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                              local function\
    \ grade_equation(grades)\n                                                   \
    \                                                                            \
    \                 local function grade_equation(grades)\n                    \
    \                                          \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1s1sfww.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                              local function\
    \ grade_equation(grades)\n                                                   \
    \                                                                            \
    \                  local function grade_equation(grades)\n                   \
    \                                           \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi68i6ztu.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local table\
    \ = {}\n    for i = 1, #grades, 2 do\n        table[grades[i]] = grades[i+1]\n\
    \    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqk_nxcu.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {1.7=2, 4=3}\nstack\
    \ traceback:\n\t/tmp/tmppqk_nxcu.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                              local function\
    \ grade_equation(grades)\n                                                   \
    \                                                                            \
    \                 local function grade_equation(grades)\n                    \
    \                                          \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1s1sfww.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                                    local function grade_equation(grades)\n \
    \                                                                            \
    \                                               local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                    local function\
    \ grade_equation(grades)\n                               \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp15qxipgq.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade(grades)\n            local\
    \ function grade_equation(grades)\n                local function grade(grades)\n\
    \                    local function grade(grades)\n                        local\
    \ function grade(grades)\n                            local function grade(grades)\n\
    \                                local function grade(grades)\n              \
    \                      local function grade(grades)\n                        \
    \                local function grade(grades)\n                              \
    \              local function grade(grades)\n                                \
    \                local function grade(grades)\n                              \
    \                      local function grade(grades)\n                        \
    \                                local function grade(grades)\n              \
    \                                              local function grade(grades)\n\
    \                                                                local function\
    \ grade(grades)\n                                                            \
    \        local function grade(grades)\n                                      \
    \                                  local function grade(grades)\n            \
    \                                                                local function\
    \ grade(grades)\n                                                            \
    \                    local function grade(grades)\n                          \
    \                                                          local function grade(grades)\n\
    \                                                                            \
    \            local function grade(grades)\n                                  \
    \                                                          local function grade(grades)\n\
    \                                                                            \
    \                    local function grade(grades)\n                          \
    \                                                                          local\
    \ function grade(grades)\n                                                   \
    \                                                     local function grade(grades)\n\
    \                                                                            \
    \                                local function grade(grades)\n              \
    \                                                                            \
    \                      local function grade(grades)\n                        \
    \                                                                            \
    \                    local function grade(grades)\n                          \
    \                                                                            \
    \                      local function grade(grades)\n                        \
    \                                                                            \
    \                            local function grade(grades)\n                  \
    \                                                                            \
    \                                        local function grade(grades)\n      \
    \                                                                            \
    \                                                        local function grade(grades)\n\
    \                                                                            \
    \                                                                      local function\
    \ grade(grades)\n                                                            \
    \                                                                            \
    \                 local function grade(grades)\n                             \
    \                                                                            \
    \                                                         local function grade(grades)\n\
    \                                                                            \
    \                                                                            \
    \                   local function grade(grades)\n                           \
    \                                                                            \
    \                                                                            \
    \     local function grade(grades)\n                                         \
    \                                                                            \
    \                                                                            \
    \ local function grade(grades)\n                                             \
    \                                                                            \
    \                                                                            \
    \                        local function grade(grades)\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  local function grade(grades)\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjdlic8ip.lua:78: ''end'' expected (to close ''function'' at
    line 64) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                                    local function grade_equation(grades)\n \
    \                                                                            \
    \                                               local function grade_equation(grades)\n\
    \                                                                            \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                     local function\
    \ grade_equation(grades)\n                               \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38zelhcu.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function grade_equation(grades)\n    \
    \        local function grade_equation(grades)\n                local function\
    \ grade_equation(grades)\n                    local function grade_equation(grades)\n\
    \                        local function grade_equation(grades)\n             \
    \               local function grade_equation(grades)\n                      \
    \          local function grade_equation(grades)\n                           \
    \         local function grade_equation(grades)\n                            \
    \            local function grade_equation(grades)\n                         \
    \                   local function grade_equation(grades)\n                  \
    \                              local function grade_equation(grades)\n       \
    \                                             local function grade_equation(grades)\n\
    \                                                        local function grade_equation(grades)\n\
    \                                                            local function grade_equation(grades)\n\
    \                                                                local function\
    \ grade_equation(grades)\n                                                   \
    \                 local function grade_equation(grades)\n                    \
    \                                                    local function grade_equation(grades)\n\
    \                                                                            local\
    \ function grade_equation(grades)\n                                          \
    \                                      local function grade_equation(grades)\n\
    \                                                                            \
    \        local function grade_equation(grades)\n                             \
    \                                                           local function grade_equation(grades)\n\
    \                                                                            \
    \                local function grade_equation(grades)\n                     \
    \                                                                           local\
    \ function grade_equation(grades)\n                                          \
    \                                                          local function grade_equation(grades)\n\
    \                                                                            \
    \                            local function grade_equation(grades)\n         \
    \                                                                            \
    \                       local function grade_equation(grades)\n              \
    \                                                                            \
    \                      local function grade_equation(grades)\n               \
    \                                                                            \
    \                         local function grade_equation(grades)\n            \
    \                                                                            \
    \                                local function grade_equation(grades)\n     \
    \                                                                            \
    \                                             local function grade_equation(grades)\n\
    \                                                                            \
    \                                                      local function grade_equation(grades)\n\
    \                                                                            \
    \                                                        local function grade_equation(grades)\n\
    \                                                                            \
    \                                                            local function grade_equation(grades)\n\
    \                                                                            \
    \                                                                  local function\
    \ grade_equation(grades)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwe46a2gn.lua:72: ''end'' expected (to close ''function'' at
    line 58) near <eof>

    '
  stdout: ''
  timestamp: 1661938059
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a table of GPAs for some students and you have to write \n-- a function\
    \ that can output a table of letter grades using the following table:\n-- GPA\
    \       |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n-- ['A+', 'B',\
    \ 'C-', 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grades)\n        local function calculate_letter_grade(gpa)\n\
    \            if gpa >= 4.0 then\n                return 'A+'\n            elseif\
    \ gpa >= 3.7 then\n                return 'A'\n            elseif gpa >= 3.3 then\n\
    \                return 'A-'\n            elseif gpa >= 3.0 then\n           \
    \     return 'B+'\n            elseif gpa >= 2.7 then\n                return\
    \ 'B'\n            elseif gpa >= 2.3 then\n                return 'B-'\n     \
    \       elseif gpa >= 2.0 then\n                return 'C+'\n            elseif\
    \ gpa >= 1.7 then\n                return 'C'\n            elseif gpa >= 1.3 then\n\
    \                return 'C-'\n            elseif gpa >= 1.0 then\n           \
    \     return 'D+'\n            elseif gpa >= 0.7 then\n                return\
    \ 'D'\n            elseif gpa >= 0.0 then\n                return 'D-'\n     \
    \       else\n                return 'E'\n            end\n        end\n     \
    \   return map(calculate_letter_grade, grades)\n    end\n    return grade_equation(grades)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_84u1nq.lua:54:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp2_84u1nq.lua:54:\
    \ in function </tmp/tmp2_84u1nq.lua:24>\n\t(...tail calls...)\n\t/tmp/tmp2_84u1nq.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1661938059
