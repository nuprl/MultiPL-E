language: lua
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ factors[i] or i\n            factors[n / i] = i\n        end\n    end\n    return\
    \ factors[n] or 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lp5tmu2.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp7lp5tmu2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    if n > 1 then\n   \
    \     prime_factors[n] = true\n    end\n    return math.max(prime_factors, key=function(k)\
    \ return prime_factors[k] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrewqi9x.lua:17: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) + 1, 1 do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.maxn(factors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_u9crrs.lua:14:\
    \ attempt to call a nil value (field 'maxn')\nstack traceback:\n\t/tmp/tmpl_u9crrs.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpl_u9crrs.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n / i] = i\n        end\n    end\n  \
    \  return factors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7xptr6e.lua:20:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpy7xptr6e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n            break\n        end\n\
    \    end\n    return table.max(factors)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dce1tt1.lua:15:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp7dce1tt1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7dce1tt1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = math.sqrt(n)\n \
    \   for i = 2, max do\n        if n % i == 0 then\n            return i\n    \
    \    end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsemngfz.lua:19:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpmsemngfz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            factors[n/i] = true\n            break\n        end\n    end\n\
    \    for k, v in pairs(factors) do\n        if v then\n            return k\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgytk4n04.lua:27:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpgytk4n04.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74koc1vo.lua:20:\
    \ expected: 5, actual: {3=3, 5=3}\nstack traceback:\n\t/tmp/tmp74koc1vo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            if not factors[i]\
    \ then factors[i] = 1 else factors[i] = factors[i] + 1\n            n = n / i\n\
    \        end\n    end\n    if not n then return factors[2]\n    return factors[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjv9b644o.lua:15: ''end'' expected (to close ''if'' at line
    14) near ''return''

    '
  stdout: ''
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1hje_5lo.lua:14:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp1hje_5lo.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1hje_5lo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            n = n / i\n            if n == 1 then\n                return\
    \ i\n            end\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oxc99b.lua:23:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp29oxc99b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74koc1vo.lua:20:\
    \ expected: 5, actual: {3=3, 5=3}\nstack traceback:\n\t/tmp/tmp74koc1vo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ factors[i] or i\n            factors[n / i] = i\n        end\n    end\n    return\
    \ factors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjltns_z.lua:20:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpvjltns_z.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    if n > 1 then\n   \
    \     prime_factors[n] = true\n    end\n    return table.max(prime_factors)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbtarbbt.lua:17:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmpqbtarbbt.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpqbtarbbt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   local i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            if prime_factors[i] == nil then\n                prime_factors[i]\
    \ = i\n            else\n                prime_factors[i] = prime_factors[i] *\
    \ i\n            end\n        end\n        i = i + 1\n    end\n    return prime_factors[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h_jebwo.lua:25:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp9h_jebwo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74koc1vo.lua:20:\
    \ expected: 5, actual: {3=3, 5=3}\nstack traceback:\n\t/tmp/tmp74koc1vo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            n = n / i\n            if n == 1 then\n                return\
    \ i\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2zy7gug.lua:29: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if prime_factors[i] == true then\n            return i\n       \
    \ end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx9rhr75.lua:24:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpcx9rhr75.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            factors[n/i] = true\n        end\n    end\n    for k, v in\
    \ pairs(factors) do\n        if v == true then\n            return k\n       \
    \ end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp515ovhj1.lua:26:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp515ovhj1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
- exit_code: 1
  program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = math.sqrt(n)\n \
    \   for i = 2, max do\n        if n % i == 0 then\n            return i\n    \
    \    end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfqdq011.lua:18:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpnfqdq011.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907492
