name: HumanEval_1_separate_paren_groups
language: lua
prompt: "-- Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n-- separate those group into separate strings and\
  \ return the table of those.\n-- Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n-- Ignore any spaces in the\
  \ input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- ['()', '(())',\
  \ '(()())']\nlocal function separate_paren_groups(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
  \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
  \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
  \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#",
  "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#",
  "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[# \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           ", "    local result = {}\n    local paren_stack =\
    \ {'('}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            paren_stack = {'('}\n        elseif paren_string[i] == ')'\
    \ then\n            if paren_stack[1] == '(' then\n                paren_stack\
    \ = {'('}\n            else\n                paren_stack = {'('}\n           \
    \ end\n        elseif paren_string[i] == ')' then\n            if paren_stack[1]\
    \ == '(' then\n                if paren_stack[2] == '(' then\n               \
    \     paren_stack = {'('}\n                else\n                    paren_stack\
    \ = {'('}\n                end\n            else\n                if paren_stack[2]\
    \ == '(' then\n                    paren_stack = {'('}\n                else\n\
    \                    paren_stack = {'('}\n                end\n            end\n\
    \        end\n        if paren_stack[1] == '(' then\n            result[#", " \
    \   local paren_stack = {}\n    local paren_count = 0\n    local paren_string\
    \ = ''\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            paren_stack[#", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 2 do\n      \
    \  if paren_string[i] == '(' then\n            if paren_stack[#              \
    \                ", "    local result = {}\n    local paren_stack = {}\n    local\
    \ paren_count = 0\n    for i=1,#                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     ", "    local result = {}\n    for i = 1,\
    \ #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if\
    \ paren_string[i+1] == '(' then\n                result[#", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n\
    \            paren_stack[#", "    local result = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#                                     \
    \                                                                            \
    \                                                                            \
    \                                                   ", "    local result = {}\n\
    \    local paren_stack = {}\n    for i=1,#                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         ", " \
    \   local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_count = paren_count + 1\n            if brace_count\
    \ > 0 then\n                brace_count = brace_count - 1\n            end\n \
    \           if brace_count == 0 then\n                if paren_count > 0 then\n\
    \                    if paren_stack[1] == '(' then\n                        brace_stack[1]\
    \ = '('\n                    else\n                        brace_stack[1] = ')'\n\
    \                    end\n                    brace_count = 1\n              \
    \  end\n            end\n            if paren_count == 0 then\n              \
    \  if brace_count > 0 then\n                    brace_count = brace_count - 1\n\
    \                end\n            end\n            if brace_count == 0 then\n\
    \                if paren_stack[1] == '(' then\n                    paren_stack[1]\
    \ = ')'\n                else\n                    paren_stack[1] = '('\n    \
    \            end\n                if paren_stack[2] == '(' then\n            \
    \        brace_stack[2] = ')'\n                else\n                    brace_stack[2]\
    \ = '('\n                end\n                if paren_stack[3] == '(' then\n\
    \                    brace_stack[3] = ')'\n                else\n            \
    \        brace_stack[3] = '('\n                end\n                if paren_stack[4]\
    \ == '(' then\n                    brace_stack[4] = ')'\n                else\n\
    \                    brace_stack[4] = '('\n                end\n             \
    \   if paren_stack[5] == '(' then\n                    brace_stack[5] = ')'\n\
    \                else\n                    brace_stack[5] = '('\n            \
    \    end\n                if paren_stack[6] == '(' then\n                    brace_stack[6]\
    \ = ')'\n                else\n                    brace_stack[6] = '('\n    \
    \            end\n                if paren_stack[7] == '(' then\n            \
    \        brace_stack[7] = ')'\n                else\n", "    local paren_table\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_string = ''\n    local paren_index\
    \ = 1\n    local paren_index_end = 1\n    local paren_index_start = 1\n    local\
    \ paren_index_end_start = 1\n    local paren_index_start_end = 1\n    local paren_index_start_end_start\
    \ = 1\n    local paren_index_start_end_end = 1\n    local paren_index_start_end_end_start\
    \ = 1\n    local paren_index_start_end_end_end = 1\n    local paren_index_start_end_end_end_start\
    \ = 1\n    local paren_index_start_end_end_end_end = 1\n    local paren_index_start_end_end_end_end_start\
    \ = 1\n    local paren_index_start_end_end_end_end_end = 1\n    local paren_index_start_end_end_end_end_end_start\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end = 1\n    local paren_index_start_end_end_end_end_end_end_start\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_start = 1\n    local paren_index_start_end_end_end_end_end_end_end_end\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end_end_end_start = 1\n\
    \    local paren_index_start_end_end_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_end_end_start = 1\n    local paren_index_start_end_end_end_end_end",
  "    local result = {}\n    local paren_stack = {}\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local paren_count = 0\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[# \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       ", "    local paren_stack = {}\n    local paren_count = 0\n    local paren_string\
    \ = ''\n    local result = {}\n    for i = 1, #paren_string, 1 do\n        if\
    \ paren_string[i] == '(' then\n            paren_stack[#", "    local result =\
    \ {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n       \
    \ if paren_string[i] == '(' then\n            if paren_stack[#               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         ", "    local result = {}\n    for i=1,#                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ", "    local result = {}\n  \
    \  local paren_stack = {}\n    local paren_count = 0\n    local paren_open = 0\n\
    \    local paren_close = 0\n    local paren_string = ''\n    local paren_index\
    \ = 1\n    local paren_index_end = 1\n    local paren_index_start = 1\n    local\
    \ paren_index_start_end = 1\n    local paren_index_start_end_end = 1\n    local\
    \ paren_index_start_end_end_end = 1\n    local paren_index_start_end_end_end_end\
    \ = 1\n    local paren_index_start_end_end_end_end_end = 1\n    local paren_index_start_end_end_end_end_end_end\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_end = 1\n    local paren_index_start_end_end_end_end_end_end_end_end\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end_end_end_end = 1\n \
    \   local paren_index_start_end_end_end_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 1\n    local\
    \ paren_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 1\n\
    \    local paren_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 1\n    local paren_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ =", "    local paren_stack = {}\n    local result = {}\n    for i=1,#      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            ", "    local paren_stack = {}\n    local result\
    \ = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#", "    local result = {}\n    local paren_stack\
    \ = {'(', ')', '{', '}'}\n    local paren_count = 0\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count\
    \ + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count\
    \ - 1\n        elseif paren_string[i] == '{' then\n            paren_stack[#paren_stack]\
    \ = '{'\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            paren_stack[#paren_stack] = '}'\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count < 0 then\n          \
    \  error('Mismatched parentheses')\n        end\n        if paren_stack[#paren_stack]\
    \ == paren_string[i] then\n            if #paren_stack > 1 then\n            \
    \    result[#result + 1] = paren_stack[1:#paren_stack]\n            end\n    \
    \        paren_stack = {'(', ')', '{', '}'}\n            paren_count = 0\n   \
    \     end\n    end\n    if #paren_stack > 1 then\n        result[#result + 1]\
    \ = paren_stack[1:#paren_stack]\n    end\n    return result\nend", "    local\
    \ result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n\
    \        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               break\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] + 1\n            end\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                break\n\
    \            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local paren_stack = {'('}\n    for i = 1, #paren_string, 1\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack = {'('}\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[1] ==\
    \ '(' then\n                result[#result + 1] = paren_stack\n              \
    \  paren_stack = {'('}\n            else\n                result[#result + 1]\
    \ = paren_stack\n                paren_stack = {'('}\n        end\n    end\n \
    \   if paren_stack[1] == '(' then\n        result[#result + 1] = paren_stack\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count_stack = {}\n    local\
    \ paren_count_stack_index = 0\n    local paren_count_stack_max = 0\n    local\
    \ paren_count_stack_max_index = 0\n    local paren_count_stack_max_max = 0\n \
    \   local paren_count_stack_max_max_index = 0\n    local paren_count_stack_max_max_max\
    \ = 0\n    local paren_count_stack_max_max_max_index = 0\n    local paren_count_stack_max_max_max_max\
    \ = 0\n    local paren_count_stack_max_max_max_max_index = 0\n    local paren_count_stack_max_max_max_max_max\
    \ = 0\n    local paren_count_stack_max_max_max_max_max_index = 0\n    local paren_count_stack_max_max_max_max_max_max\
    \ = 0\n    local paren_count_stack_max_max_max_max_max_max_index = 0\n    local\
    \ paren_count_stack_max_max_max_max_max_max_max = 0\n    local paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0\n    local paren_count_stack_max_max_max_max_max_max_max_max = 0\n    local\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_count_stack_max_max_max_max_max_max_max_max_max\
    \ = 0\n    local paren_count_stack_max_max_max_max_max_max_max_max_max_index =\
    \ 0\n    local paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0\n\
    \    local paren_count_stack_max", "    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local result = {}\n    local result_index\
    \ = 1\n    local result_string = ''\n    local result_count = 0\n    local result_stack\
    \ = {}\n    local result_stack_index = 1\n    local result_stack_string = ''\n\
    \    local result_stack_count = 0\n    local result_stack_string_index = 1\n \
    \   local result_stack_string_count = 0\n    local result_stack_string_string\
    \ = ''\n    local result_stack_string_string_index = 1\n    local result_stack_string_string_count\
    \ = 0\n    local result_stack_string_string_string = ''\n    local result_stack_string_string_string_index\
    \ = 1\n    local result_stack_string_string_string_count = 0\n    local result_stack_string_string_string_string\
    \ = ''\n    local result_stack_string_string_string_string_index = 1\n    local\
    \ result_stack_string_string_string_string_count = 0\n    local result_stack_string_string_string_string_string\
    \ = ''\n    local result_stack_string_string_string_string_string_index = 1\n\
    \    local result_stack_string_string_string_string_string_count = 0\n    local\
    \ result_stack_string_string_string_string_string_string = ''\n    local result_stack_string_string_string_string_string_string_index\
    \ = 1\n    local result_stack_string_string_string_string_string_string_count\
    \ = 0\n    local result_stack_string_string_string_string_string_string_string\
    \ = ''\n    local result_stack_string_string_string_string_string_string_string_index\
    \ = 1\n    local result_stack_string_string_string_string_string_string_string_count\
    \ = 0\n    local result_stack_string_string_string_string_string_string_string_string\
    \ = ''\n    local result_stack_string_string_string_string_string_string_string_string_index\
    \ = 1\n    local result_stack_string_string_string_string", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count_stack = {}\n    local\
    \ paren_count_stack_index = 0\n    local paren_count_stack_count = 0\n    local\
    \ paren_count_stack_count_stack = {}\n    local paren_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count = 0\n    local paren_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_index = 0\n    local\
    \ paren_count_stack_count_stack_count_stack_count = 0\n    local paren_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count =\
    \ 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_",
  "    local result = {}\n    local paren_stack = {'(', ')', '{', '}'}\n    local\
    \ paren_count = 0\n    local paren_char = ''\n    local paren_string = ''\n  \
    \  for i = 1, #paren_string, 1 do\n        if paren_string[i] == ' ' then\n  \
    \          continue\n        if paren_string[i] == paren_char then\n         \
    \   paren_count = paren_count + 1\n        elseif paren_count == 0 then\n    \
    \        if paren_stack[paren_string[i]] == '(' then\n                paren_stack[paren_string[i]]\
    \ = ')'\n            elseif paren_stack[paren_string[i]] == '{' then\n       \
    \         paren_stack[paren_string[i]] = '}'\n            elseif paren_stack[paren_string[i]]\
    \ == '[' then\n                paren_stack[paren_string[i]] = ']'\n          \
    \  end\n        elseif paren_count == 1 then\n            if paren_stack[paren_string[i]]\
    \ == ')' then\n                paren_stack[paren_string[i]] = '('\n          \
    \  elseif paren_stack[paren_string[i]] == '}' then\n                paren_stack[paren_string[i]]\
    \ = '{'\n            elseif paren_stack[paren_string[i]] == ']' then\n       \
    \         paren_stack[paren_string[i]] = '['\n            end\n        elseif\
    \ paren_count == 2 then\n            if paren_stack[paren_string[i]] == ')' then\n\
    \                paren_stack[paren_string[i]] = '('\n            elseif paren_stack[paren_string[i]]\
    \ == '}' then\n                paren_stack[paren_string[i]] = '{'\n          \
    \  elseif paren_stack[paren_string[i]] == ']' then\n                paren_stack[paren_string[i]]\
    \ = '['\n            end\n        elseif paren_count == 3 then\n            if\
    \ paren_stack[paren_string[i]] == ')' then\n                paren_stack[paren_string[i]]\
    \ = '('\n            elseif", "    local result = {}\n    local paren_stack =\
    \ {}\n    for i=1,#paren_string,1 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                result[#result+1]\
    \ = paren_string[i+1:end]\n                break\n            else\n         \
    \       paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n          \
    \  end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \           break\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local paren_groups = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    local paren_index = 1\n    local paren_char =\
    \ ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = true\n    local paren_close = true", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local i = 1\n    while i <= #paren_string\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = paren_count\n            paren_count = paren_count + 1\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_count == 0 then\n        \
    \        error('unbalanced parens')\n            elseif paren_stack[#paren_stack]\
    \ == paren_count then\n                result[#result + 1] = paren_string[1:i]\n\
    \                paren_stack = {}\n                paren_count = 0\n         \
    \   else\n                paren_count = paren_count - 1\n        end\n       \
    \ i = i + 1\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 1\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = paren_count\n            paren_count = paren_count + 1\n        elseif\
    \ paren_string[i] == ')' then\n            paren_count = paren_count - 1\n   \
    \         if paren_count < 0 then\n                error('unbalanced parens')\n\
    \            end\n        end\n        if paren_count == 0 then\n            local\
    \ group = string.sub(paren_string, paren_stack[1], paren_stack[2] - paren_stack[1])\n\
    \            result[#result + 1] = group\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            table.insert(result, group)\n\
    \            table.insert(result, group)\n            ", "    local paren_stack\
    \ = {}\n    local result = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            end\n          \
    \  paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_stack[#paren_stack]\
    \ > 0 then\n            paren_stack[#paren_stack] = #paren_stack - 1\n       \
    \ end\n    end\n    return result\nend", "    local paren_stack = {}\n    local\
    \ result = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1]\
    \ = paren_string[i+1:end]\n            end\n            paren_stack[#paren_stack]\
    \ = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n           \
    \ if paren_stack[#paren_stack] == 1 then\n                result[#result+1] =\
    \ paren_string[i+1:end]\n            end\n            paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n        end\n    end\n    return result\nend", "    local\
    \ paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,1 do\n  \
    \      if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack] = #paren_stack + 1\n      \
    \  elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \           paren_stack[#paren_stack] = #paren_stack - 1\n            end\n  \
    \      end\n    end\n    return result\nend", "    local paren_groups = {}\n \
    \   local paren_stack = {}\n    local paren_count = 0\n    local paren_index =\
    \ 0\n    local paren_char = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count_stack = {}\n    local paren_index_stack = {}\n\
    \    local paren_char_stack = {}\n    local paren_open_stack = {}\n    local paren_close_stack\
    \ = {}\n    local paren_count_stack_stack = {}\n    local paren_index_stack_stack\
    \ = {}\n    local paren_char_stack_stack = {}\n    local paren_open_stack_stack\
    \ = {}\n    local paren_close_stack_stack = {}\n    local paren_count_stack_stack_stack\
    \ = {}\n    local paren_index_stack_stack_stack = {}\n    local paren_char_stack_stack_stack\
    \ = {}\n    for paren_index, paren_char in ipairs(paren_string) do\n        if\
    \ paren_char == '(' then\n            if paren_open == true then\n           \
    \     paren_count = paren_count + 1\n                paren_count_stack[#paren_count_stack\
    \ + 1] = paren_count\n                paren_index_stack[#paren_index_stack + 1]\
    \ = paren_index\n                paren_char_stack[#paren_char_stack + 1] = paren_char\n\
    \                paren_open_stack[#paren_open_stack + 1] = true\n            \
    \    paren_close_stack[#paren_close_stack + 1] = false\n                paren_count_stack_stack[#paren_count_stack_stack\
    \ + 1] = paren_count_stack\n                paren_index_stack_stack[#paren_index_stack_stack\
    \ + 1] = paren_index_stack\n                paren_char_stack_stack[#paren_char_stack_stack\
    \ + 1] = paren_char_stack\n                paren_open_stack_stack[#paren_open_stack_stack\
    \ + 1] = true\n                paren_close_stack_stack[#paren_close_stack_stack\
    \ + 1", "    local paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack - 1\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 1\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = paren_count\n            paren_count = paren_count + 1\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_count == 0 then\n        \
    \        result[#result + 1] = paren_stack[1]\n                del paren_stack[1]\n\
    \            else\n                paren_count = paren_count - 1\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1 : i + 2]\n                #print(result[#result])\n\
    \            end\n            paren_stack[#paren_stack + 1] = #paren_stack\n \
    \           paren_stack[#paren_stack] = 0\n        elseif paren_stack[#paren_stack]\
    \ > 0 then\n            result[#result + 1] = paren_string[i : i + 1]\n      \
    \      #print(result[#result])\n            paren_stack[#paren_stack] = #paren_stack\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {'(', ')', '{', '}'}\n    local paren_count = 0\n    local paren_char\
    \ = ''\n    local paren_index = 0\n    local paren_string = ''\n    for paren_index,\
    \ paren_char in ipairs(paren_string) do\n        if paren_stack[paren_char] ==\
    \ '(' then\n            paren_count = paren_count + 1\n        elseif paren_stack[paren_char]\
    \ == ')' then\n            paren_count = paren_count - 1\n        end\n      \
    \  if paren_count == 0 then\n            if paren_stack[paren_char] == '(' then\n\
    \                paren_stack[paren_char] = ')'\n            elseif paren_stack[paren_char]\
    \ == ')' then\n                paren_stack[paren_char] = '('\n            end\n\
    \            if paren_stack[paren_char] == '{' then\n                paren_stack[paren_char]\
    \ = '}'\n            elseif paren_stack[paren_char] == '}' then\n            \
    \    paren_stack[paren_char] = '{'\n            end\n            if paren_stack[paren_char]\
    \ == '[' then\n                paren_stack[paren_char] = ']'\n            elseif\
    \ paren_stack[paren_char] == ']' then\n                paren_stack[paren_char]\
    \ = '['\n            end\n            if paren_stack[paren_char] == '(' then\n\
    \                paren_stack[paren_char] = ')'\n            elseif paren_stack[paren_char]\
    \ == ')' then\n                paren_stack[paren_char] = '('\n            end\n\
    \            if paren_stack[paren_char] == '{' then\n                paren_stack[paren_char]\
    \ = '}'\n            elseif paren_stack[paren_char] == '}' then\n            \
    \    paren_stack[paren_char] = '{'\n            end\n            if paren_stack[paren_char]\
    \ == '[' then\n                paren_stack[paren_char] = ']'\n            elseif\
    \ paren_stack[paren_", "    local result = {}\n    local paren_stack = {'('}\n\
    \    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == '(' then\n                paren_stack\
    \ = {'('}\n            else\n                paren_stack = {'(', paren_stack[#paren_stack]}\n\
    \            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                paren_stack = {')', paren_stack[#paren_stack]}\n\
    \            else\n                paren_stack = {')', paren_stack[#paren_stack]}\n\
    \            end\n        end\n        if #paren_stack == 1 then\n           \
    \ result[#result + 1] = paren_stack[1]\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack + 1] = 1\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n\
    \                result[#result + 1] = paren_string[i + 1:end]\n            end\n\
    \            paren_stack[#paren_stack - 1] = 0\n        end\n    end\n    return\
    \ result\nend", "    local paren_stack = {}\n    local paren_count = 0\n    local\
    \ result = {}\n    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = paren_count\n     \
    \       paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n\
    \            if paren_count == 0 then\n                error('Mismatched parentheses')\n\
    \            elseif paren_stack[#paren_stack] == paren_count then\n          \
    \      error('Mismatched parentheses')\n            else\n                paren_count\
    \ = paren_count - 1\n                if paren_count == 0 then\n              \
    \      result[#result + 1] = paren_stack[#paren_stack]\n                    table.insert(result,\
    \ paren_stack[#paren_stack + 1])\n                    table.insert(result, paren_stack[#paren_stack\
    \ + 2])\n                    table.insert(result, paren_stack[#paren_stack + 3])\n\
    \                    table.insert(result, paren_stack[#paren_stack + 4])\n   \
    \                 table.insert(result, paren_stack[#paren_stack + 5])\n      \
    \              table.insert(result, paren_stack[#paren_stack + 6])\n         \
    \           table.insert(result, paren_stack[#paren_stack + 7])\n            \
    \        table.insert(result, paren_stack[#paren_stack + 8])\n               \
    \     table.insert(result, paren_stack[#paren_stack + 9])\n                  \
    \  table.insert(result, paren_stack[#paren_stack + 10])\n                    table.insert(result,\
    \ paren_stack[#paren_stack + 11])\n                    table.insert(result, paren_stack[#paren_stack\
    \ + 12])\n                    table.insert(result, paren_stack[#paren_stack +\
    \ 13])\n                    table.insert(result, paren_stack[#paren_stack + 14])\n\
    \                    table.insert(result, paren_stack[#paren_stack + 15])\n  \
    \                  table.insert(result, paren_stack[#paren_stack + 16])\n", " \
    \   local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local paren_index = 0\n    local paren_char\
    \ = ''\n    local paren_open = false\n    local paren_close = false\n    local\
    \ paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_open\
    \ = false\n    local paren_stack_close = false\n    local paren_stack_count_open\
    \ = 0\n    local paren_stack_count_close = 0\n    local paren_stack_count_open_close\
    \ = 0\n    local paren_stack_count_open_close_count = 0\n    local paren_stack_count_open_close_count_open\
    \ = 0\n    local paren_stack_count_open_close_count_close = 0\n    local paren_stack_count_open_close_count_open_close\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count = 0\n   \
    \ local paren_stack_count_open_close_count_open_close_count_open = 0\n    local\
    \ paren_stack_count_open_close_count_open_close_count_close = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count_open\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count_close\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count_open_close\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count_open_close_count\
    \ = 0\n    local paren_stack_count_open_close_count_open_close_count_open_close_count_open_close_count",
  "    local paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,2\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack+1] = 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            end\n          \
    \  paren_stack[#paren_stack-1] = 0\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1]\
    \ == ')' then\n                result[#result+1] = paren_string[i+2:i+2]\n   \
    \             i = i + 2\n            elseif paren_string[i+1] == '(' then\n  \
    \              result[#result+1] = paren_string[i+2:i+2]\n                i =\
    \ i + 2\n            elseif paren_string[i+1] == ')' then\n                result[#result+1]\
    \ = paren_string[i+2:i+2]\n                i = i + 2\n            elseif paren_string[i+1]\
    \ == '(' then\n                result[#result+1] = paren_string[i+2:i+2]\n   \
    \             i = i + 2\n            elseif paren_string[i+1] == ')' then\n  \
    \              result[#result+1] = paren_string[i+2:i+2]\n                i =\
    \ i + 2\n            elseif paren_string[i+1] == '(' then\n                result[#result+1]\
    \ = paren_string[i+2:i+2]\n                i = i + 2\n            elseif paren_string[i+1]\
    \ == ')' then\n                result[#result+1] = paren_string[i+2:i+2]\n   \
    \             i = i + 2\n            elseif paren_string[i+1] == '(' then\n  \
    \              result[#result+1] = paren_string[i+2:i+2]\n                i =\
    \ i + 2\n            elseif paren_string[i+1] == ')' then\n                result[#result+1]\
    \ = paren_string[i+2:i+2]\n                i = i + 2\n            elseif paren_string[i+1]\
    \ == '(' then\n                result[#result+1] = paren_string[i+2:i+2]\n   \
    \             i = i + 2\n            elseif paren_string[i", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = false\n    local paren_close\
    \ = false\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = false\n    local paren_close = false\n    local\
    \ paren_count = 0\n    local paren_index = 1\n    local paren_char = ''\n    local\
    \ paren_open = false\n    local paren_close = false\n    local paren_count = 0\n\
    \    local paren_index = 1\n    local paren_char = ''\n    local paren_open =\
    \ false\n    local paren_close = false\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = false\n    local paren_close\
    \ = false\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = false\n    local paren_close = false\n    local\
    \ paren_count = 0\n    local paren_index = 1\n    local paren_char = ''\n    local\
    \ paren_open = false\n    local paren_close = false\n    local paren_count = 0\n\
    \    local paren_index = 1\n    local paren_char = ''\n    local paren_open =\
    \ false\n    local paren_close = false\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = false\n    local paren_close\
    \ = false\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = false\n    local paren_close = false\n    local\
    \ paren_count = 0\n    local paren_index = 1\n    local paren_char = ''\n    local\
    \ paren_open = false\n    local paren_close = false\n    local", "    local paren_table\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_string\
    \ = ''\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            paren_count = paren_count + 1\n            if paren_count\
    \ == 1 then\n                paren_stack[#paren_stack + 1] = i\n            end\n\
    \        elseif paren_string[i] == ')' then\n            paren_count = paren_count\
    \ - 1\n            if paren_count == 0 then\n                local paren_start\
    \ = paren_stack[#paren_stack]\n                local paren_end = i\n         \
    \       paren_table[#paren_table + 1] = paren_string[paren_start + 1:paren_end]\n\
    \                for j = paren_start + 1, #paren_stack - 1 do\n              \
    \      if paren_stack[j] > paren_start then\n                        paren_table[#paren_table\
    \ + 1] = paren_string[paren_stack[j] + 1:paren_end]\n                        break\n\
    \                    end\n                end\n                del paren_stack[#paren_stack]\n\
    \            end\n        end\n    end\n    return paren_table\nend", "    local\
    \ result = {}\n    local paren_stack = {'(', ')', '{', '}'}\n    local paren_stack_index\
    \ = 0\n    local paren_stack_size = 0\n    local paren_stack_string = ''\n   \
    \ local paren_stack_string_index = 0\n    local paren_stack_string_size = 0\n\
    \    local paren_stack_string_string = ''\n    local paren_stack_string_string_index\
    \ = 0\n    local paren_stack_string_string_size = 0\n    local paren_stack_string_string_string\
    \ = ''\n    local paren_stack_string_string_string_index = 0\n    local paren_stack_string_string_string_size\
    \ = 0\n    local paren_stack_string_string_string_string = ''\n    local paren_stack_string_string_string_string_index\
    \ = 0\n    local paren_stack_string_string_string_string_size = 0\n    local paren_stack_string_string_string_string_string\
    \ = ''\n    local paren_stack_string_string_string_string_string_index = 0\n \
    \   local paren_stack_string_string_string_string_string_size = 0\n    local paren_stack_string_string_string_string_string_string\
    \ = ''\n    local paren_stack_string_string_string_string_string_string_index\
    \ = 0\n    local paren_stack_string_string_string_string_string_string_size =\
    \ 0\n    local paren_stack_string_string_string_string_string_string_string =\
    \ ''\n    local paren_stack_string_string_string_string_string_string_string_index\
    \ = 0\n    local paren_stack_string_string_string_string_string_string_string_size\
    \ = 0\n    local paren_stack_string_string_string_string_string_string_string_string\
    \ = ''\n    local paren_stack_string_string_string_string_string_string_string_string_index\
    \ = 0\n    local paren_stack_string_string_string_string_string_string_string_string_size\
    \ =", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            else\n\
    \                print('Error: unmatched closing parenthesis')\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {'('}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack = paren_stack .. {'('}\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == '('\
    \ then\n                paren_stack = paren_stack .. {')'}\n            else\n\
    \                result = result .. {paren_stack[#paren_stack]}\n            \
    \    paren_stack = paren_stack .. {'('}\n        end\n    end\n    if paren_stack[#paren_stack]\
    \ == '(' then\n        result = result .. {paren_stack[#paren_stack]}\n    end\n\
    \    return result\nend", "    local result = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    local brace_count = 0\n    local paren_char =\
    \ '('\n    local brace_char = '{'\n    local brace_open_count = 0\n    local brace_close_count\
    \ = 0\n    local brace_open_stack = {}\n    local brace_close_stack = {}\n   \
    \ local brace_open_stack_count = 0\n    local brace_close_stack_count = 0\n  \
    \  local brace_open_stack_index = 0\n    local brace_close_stack_index = 0\n \
    \   local brace_open_stack_index_count = 0\n    local brace_close_stack_index_count\
    \ = 0\n    local brace_open_stack_index_count_max = 0\n    local brace_close_stack_index_count_max\
    \ = 0\n    local brace_open_stack_index_count_min = math.inf\n    local brace_close_stack_index_count_min\
    \ = math.inf\n    local brace_open_stack_index_count_min_max = math.inf\n    local\
    \ brace_close_stack_index_count_min_max = math.inf\n    local brace_open_stack_index_count_min_max_min\
    \ = math.inf\n    local brace_close_stack_index_count_min_max_min = math.inf\n\
    \    local brace_open_stack_index_count_min_max_min_max = math.inf\n    local\
    \ brace_close_stack_index_count_min_max_min_max = math.inf\n    local brace_open_stack_index_count_min_max_min_max_min\
    \ = math.inf\n    local brace_close_stack_index_count_min_max_min_max_min = math.inf\n\
    \    local brace_open_stack_index_count_min_max_min_max_min_max = math.inf\n \
    \   local brace_close_stack_index_count_min_max_min_max_min_max = math.inf\n \
    \   local brace_open_stack_index_count_min_max_min_max_min_max_min = math.inf\n\
    \    local brace_close_", "    local result = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    local brace_count = 0\n    local brace_stack =\
    \ {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n", "    local paren_stack\
    \ = {}\n    local result = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = paren_count\n     \
    \       paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n\
    \            if paren_count == 0 then\n                print('Error: Unbalanced\
    \ parens')\n                return\n            elseif paren_stack[#paren_stack]\
    \ == paren_count then\n                brace_count = brace_count + 1\n       \
    \     elseif brace_count > 0 then\n                brace_count = brace_count -\
    \ 1\n            elseif brace_count == 0 then\n                result[#result\
    \ + 1] = paren_stack[1]\n                paren_stack = {}\n                paren_count\
    \ = 0\n            end\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    local paren_char = '('\n    local brace_char\
    \ = '{'\n    local brace_open = false\n    local brace_close = false\n    local\
    \ brace_stack = {}\n    local brace_count = 0\n    local paren_stack = {}\n  \
    \  local paren_count = 0\n    local brace_count = 0\n    local paren_char = '('\n\
    \    local brace_char = '{'\n    local brace_open = false\n    local brace_close\
    \ = false\n    local brace_stack = {}\n    local brace_count = 0\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_char\
    \ = '('\n    local brace_char = '{'\n    local brace_open = false\n    local brace_close\
    \ = false\n    local brace_stack = {}\n    local brace_count = 0\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_char\
    \ = '('\n    local brace_char = '{'\n    local brace_open = false\n    local brace_close\
    \ = false\n    local brace_stack = {}\n    local brace_count = 0\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_char\
    \ = '('\n    local brace_char = '{'\n    local brace_open = false\n    local brace_close\
    \ = false\n    local brace_stack = {}\n    local brace_count = 0\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_char\
    \ = '('\n    local brace_char = '{'\n    local brace_open = false\n    local brace_close\
    \ = false\n    local brace_stack = {}\n    local brace_count = 0\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_char\
    \ = '('\n    local", "    local paren_stack = {}\n    local paren_count = 0\n\
    \    local paren_string = ''\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = false\n    local paren_close = false\n    local\
    \ paren_stack_index = 0\n    local paren_stack_count = 0", "    local result =\
    \ {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 1 do\n       \
    \ if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] ==\
    \ 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n    \
    \        end\n            paren_stack[#paren_stack] = #paren_stack + 1\n     \
    \   elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            else\n                print('Invalid parentheses')\n\
    \            end\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    for i=1,#paren_string,1\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack+1]\
    \ = paren_count\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            paren_count = paren_count - 1\n            if paren_count\
    \ < 0 then\n                error('Mismatched parentheses')\n            end\n\
    \            if paren_count == 0 then\n                local paren_index = paren_stack[#paren_stack]\n\
    \                if paren_index ~= nil then\n                    result[#result+1]\
    \ = paren_string[1:paren_index]\n                end\n                if #paren_stack\
    \ > 1 then\n                    result[#result+1] = paren_string[paren_index+1:]\n\
    \                end\n                if #result > 1 then\n                  \
    \  result[#result+1] = ' '\n                end\n                result[#result+1]\
    \ = paren_string[1:i]\n                if #result > 1 then\n                 \
    \   result[#result+1] = ' '\n                end\n                result[#result+1]\
    \ = paren_string[i+1:]\n                if #result > 1 then\n                \
    \    result[#result+1] = ' '\n                end\n                break\n   \
    \         end\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local paren_stack = {'('}\n    for i = 1, #paren_string, 1 do\n  \
    \      if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                paren_stack = paren_stack .. '('\n            else\n\
    \                paren_stack = paren_stack .. '(' .. paren_stack\n           \
    \ end\n        elseif paren_stack[#paren_stack] == '(' then\n            paren_stack\
    \ = paren_stack .. paren_stack\n        elseif paren_stack[#paren_stack] == ')'\
    \ then\n            if paren_stack[#paren_stack] == ')' then\n               \
    \ paren_stack = paren_stack .. ')'\n            else\n                paren_stack\
    \ = paren_stack .. ')' .. paren_stack\n            end\n        elseif paren_stack[#paren_stack]\
    \ == ')' then\n            if paren_stack[#paren_stack] == ')' then\n        \
    \        paren_stack = paren_stack .. ')'\n            else\n                paren_stack\
    \ = paren_stack .. ')' .. paren_stack\n            end\n        elseif paren_stack[#paren_stack]\
    \ == '(' then\n            if paren_stack[#paren_stack] == '(' then\n        \
    \        paren_stack = paren_stack .. '('\n            else\n                paren_stack\
    \ = paren_stack .. '(' .. paren_stack\n            end\n        elseif paren_stack[#paren_stack]\
    \ == ')' then\n            if paren_stack[#paren_stack] == ')' then\n        \
    \        paren_stack = paren_stack .. ')'\n            else\n                paren_stack\
    \ = paren_stack .. ')' .. paren_stack\n            end\n        elseif paren_stack[#paren_stack]\
    \ == ')' then\n            if paren_stack[#paren_stack] == ')' then\n        \
    \        paren_stack = paren_stack .. ')'\n            else\n                paren_stack\
    \ = paren_stack .. ')' .. paren_stack\n            end\n        elseif paren_stack[#paren_stack]\
    \ == '(' then\n            ", "    local result = {}\n    local paren_stack =\
    \ {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n            end\n            paren_stack[#paren_stack\
    \ + 1] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n      \
    \      if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local paren_stack = {'(', ')',\
    \ '{', '}'}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] ==\
    \ '(' then\n            if paren_stack[#paren_stack] == '(' then\n           \
    \     paren_stack = paren_stack[1:#paren_stack]\n            end\n           \
    \ if paren_stack[#paren_stack] == ')' then\n                result[#result + 1]\
    \ = paren_stack[1:#paren_stack]\n                paren_stack = paren_stack[1:#paren_stack]\n\
    \            end\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = i\n            paren_count = #paren_stack\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count > 0 then\n                if paren_stack[1]\
    \ ~= #paren_stack then\n                    error('Mismatched parentheses')\n\
    \                end\n                result[#result + 1] = paren_stack[1]\n \
    \               paren_stack[#paren_stack - 1] = #paren_stack\n               \
    \ paren_count = #paren_stack\n            end\n        elseif paren_string[i]\
    \ == '{' then\n            brace_stack[#brace_stack + 1] = i\n            brace_count\
    \ = #brace_stack\n        elseif paren_string[i] == '}' then\n            if brace_count\
    \ > 0 then\n                if brace_stack[1] ~= #brace_stack then\n         \
    \           error('Mismatched braces')\n                end\n                result[#result\
    \ + 1] = brace_stack[1]\n                brace_stack[#brace_stack - 1] = #brace_stack\n\
    \                brace_count = #brace_stack\n            end\n        end\n  \
    \  end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local i = 1\n    while i <= #paren_string\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = i\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count == 0 then\n                result[#result\
    \ + 1] = paren_string[1:i]\n                i = i + 1\n            else\n    \
    \            paren_count = paren_count - 1\n                if paren_count ==\
    \ 0 then\n                    if brace_count > 0 then\n                      \
    \  result[#result + 1] = paren_string[1:i]\n                        i = i + 1\n\
    \                    else\n                        result[#result + 1] = paren_string[1:i]\n\
    \                        i = i + 1\n                else\n                   \
    \ if brace_count > 0 then\n                        brace_count = brace_count -\
    \ 1\n                    else\n                        brace_count = brace_count\
    \ + 1\n        elseif paren_string[i] == '{' then\n            brace_stack[#brace_stack\
    \ + 1] = i\n            brace_count = brace_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            if brace_count == 0 then\n                result[#result\
    \ + 1] = paren_string[1:i]\n                i = i + 1\n            else\n    \
    \            brace_count = brace_count - 1\n                if brace_count ==\
    \ 0 then\n                    if paren_count > 0 then\n                      \
    \  result[#result + 1] = paren_string[1:i]\n                        i = i + 1\n\
    \                    else\n                        result[#result + 1] = paren_string[1:i]\n\
    \                        i = i + 1\n                else\n                   \
    \ if paren_count > 0 then\n                        paren_count = paren_count -\
    \ 1\n                    else\n                        paren_count = paren_count\
    \ + 1\n        else\n            if brace_count ==", "    local result = {}\n\
    \    local paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            else\n                print('Error: unmatched\
    \ closing parenthesis')\n            end\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack]\
    \ = 1\n            else\n                paren_stack[#paren_stack] = 0\n     \
    \       end\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack]\
    \ = 1\n            end\n            paren_count = paren_count - 1\n        end\n\
    \        if paren_count == 0 then\n            if #paren_stack == 0 then\n   \
    \             result[#result + 1] = paren_string[1, i]\n            else\n   \
    \             result[#result + 1] = paren_string[i + 1, #paren_string]\n     \
    \       end\n        end\n    end\n    return result\nend", "    local paren_stack\
    \ = {'('}\n    local result = {}\n    for i = 1, #paren_string, 1 do\n       \
    \ if paren_string[i] == '(' then\n            paren_stack[#paren_stack + 1] =\
    \ paren_string[i]\n        elseif paren_stack[#paren_stack] == '(' then\n    \
    \        if paren_string[i] == ')' then\n                result[#result + 1] =\
    \ paren_stack[#paren_stack]\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\n\
    \            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\n\
    \        end\n    end\n    for i = 1, #paren_stack, 1 do\n        if paren_stack[i]\
    \ == '(' then\n            result[#result + 1] = paren_stack[i]\n        elseif\
    \ paren_stack[i] == ')' then\n            result[#result + 1] = paren_stack[i]\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local brace_count = 0\n   \
    \ local i = 1\n    while i <= #paren_string do\n        if paren_string[i] ==\
    \ '(' then\n            paren_stack[#paren_stack + 1] = i\n            paren_count\
    \ = paren_count + 1\n        elseif paren_string[i] == ')' then\n            if\
    \ paren_count == 0 then\n                result[#result + 1] = paren_string[1:i]\n\
    \            else\n                if brace_count == 0 then\n                \
    \    result[#result + 1] = paren_string[1:paren_stack[#paren_stack]]\n       \
    \         else\n                    result[#result + 1] = paren_string[1:paren_stack[#paren_stack]\
    \ - 1]\n                end\n            end\n            i = i + 1\n        \
    \    brace_count = brace_count + 1\n            if brace_count == paren_count\
    \ then\n                brace_count = 0\n                paren_count = paren_count\
    \ - 1\n                if paren_count == 0 then\n                    paren_stack\
    \ = {}\n                end\n            end\n        elseif paren_string[i] ==\
    \ '{' then\n            brace_count = brace_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            brace_count = brace_count - 1\n        end\n      \
    \  i = i + 1\n    end\n    return result\nend", "    local paren_stack = {}\n\
    \    local result = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if not paren_stack[#paren_stack] then\n           \
    \     paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] + 1\n            end\n        else\n           \
    \ if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n        if paren_stack[#paren_stack]\
    \ == 0 then\n            table.insert(result, paren_string[1:i])\n        end\n\
    \    end\n    return result\nend", "    local paren_stack = {}\n    local result\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local paren_stack_index\
    \ = 0\n    local brace_stack_index = 0\n    local brace_stack = {}\n    local\
    \ paren_stack = {}\n    local brace_stack = {}\n    local paren_stack_index =\
    \ 0\n    local brace_stack_index = 0\n    local brace_stack = {}\n    local paren_stack\
    \ = {}\n    local brace_stack = {}\n    local paren_stack_index = 0\n    local\
    \ brace_stack_index = 0\n    local brace_stack = {}\n    local paren_stack = {}\n\
    \    local brace_stack = {}\n    local paren_stack_index = 0\n    local brace_stack_index\
    \ = 0\n    local brace_stack = {}\n    local paren_stack = {}\n    local brace_stack\
    \ = {}\n    local paren_stack_index = 0\n    local brace_stack_index = 0\n   \
    \ local brace_stack = {}\n    local paren_stack = {}\n    local brace_stack =\
    \ {}\n    local paren_stack_index = 0\n    local brace_stack_index = 0\n    local\
    \ brace_stack = {}\n    local paren_stack = {}\n    local brace_stack = {}\n \
    \   local paren_stack_index = 0\n    local brace_stack_index = 0\n    local brace_stack\
    \ = {}\n    local paren_stack = {}\n    local brace_stack = {}\n    local paren_stack_index\
    \ = 0\n    local brace_stack_index = 0\n    local brace_stack = {}\n    local\
    \ paren_stack = {}\n    local brace_stack = {}\n    local paren_stack_index =\
    \ 0\n    local brace_stack_index = 0\n    local brace_stack = {}\n    local paren_stack\
    \ = {}\n    local brace_stack = {}\n    local paren_stack_index = 0\n    local\
    \ brace_stack_index = 0\n    local brace_stack = {}\n    local paren_stack = {}\n\
    \    local brace_stack = {}\n    local paren_stack_index = 0\n    local brace_stack_index\
    \ = 0", "    local paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,1\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack] = #paren_stack + 1\n      \
    \  elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \           paren_stack[#paren_stack] = #paren_stack - 1\n            else\n \
    \               result[#result+1] = paren_string[i+1:end]\n            end\n \
    \       end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 1 do\n   \
    \     if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                -- nested parens\n                if #paren_stack\
    \ > 1 then\n                    result[#result + 1] = paren_stack[#paren_stack]\
    \ .. '(' .. paren_stack[1] .. ')'\n                end\n                -- close\
    \ this paren\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ .. paren_stack[1]\n                -- push this paren\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] .. paren_string[i]\n            else\n         \
    \       -- not nested parens\n                result[#result + 1] = paren_stack[#paren_stack]\
    \ .. paren_stack[1] .. paren_string[i]\n            end\n        elseif paren_stack[#paren_stack]\
    \ == '(' then\n            -- close this paren\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] .. paren_stack[1]\n            -- push this paren\n\
    \            paren_stack[#paren_stack] = paren_stack[#paren_stack] .. paren_string[i]\n\
    \        elseif paren_stack[#paren_stack] == '{' then\n            -- close this\
    \ paren\n            paren_stack[#paren_stack] = paren_stack[#paren_stack] ..\
    \ paren_stack[1]\n            -- push this paren\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] .. paren_string[i]\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    local paren_stack = {'('}\n    for\
    \ i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n       \
    \     paren_stack = paren_stack .. {'('}\n        elseif paren_string[i] == ')'\
    \ then\n            if paren_stack[#paren_stack] == '(' then\n               \
    \ paren_stack = paren_stack .. {')'}\n            else\n                result\
    \ = result .. {paren_stack[#paren_stack]}\n                paren_stack = paren_stack\
    \ .. {'('}\n        end\n    end\n    if paren_stack[#paren_stack] == '(' then\n\
    \        result = result .. {paren_stack[#paren_stack]}\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {'('}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_stack = {'('}\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[1] ==\
    \ '(' then\n                result[#result + 1] = paren_stack[2] .. ')'\n    \
    \            paren_stack = {'('}\n            else\n                paren_stack\
    \ = {'('}\n        elseif paren_stack[1] == '(' then\n            paren_stack[2]\
    \ = paren_stack[2] .. paren_string[i]\n        else\n            paren_stack[2]\
    \ = paren_stack[2] .. paren_string[i]\n        end\n    end\n    return result\n\
    end", "    local paren_groups = {}\n    local paren_stack = {}\n    for i = 1,\
    \ #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if\
    \ paren_stack[#paren_stack] == 0 then\n                paren_groups[#paren_groups\
    \ + 1] = paren_string[i+1:end]\n                paren_stack[#paren_stack] = 1\n\
    \            end\n            if paren_stack[#paren_stack] == 1 then\n       \
    \         paren_stack[#paren_stack] = 0\n            end\n        end\n    end\n\
    \    return paren_groups\nend", "    local result = {}\n    local paren_stack\
    \ = {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == '(' then\n        \
    \        paren_stack:insert(#paren_stack + 1, paren_string[i])\n            elseif\
    \ paren_stack[#paren_stack] == ')' then\n                paren_stack:insert(#paren_stack\
    \ - 1, paren_string[i])\n            elseif paren_stack[#paren_stack] == '{' then\n\
    \                paren_stack:insert(#paren_stack + 1, paren_string[i])\n     \
    \       elseif paren_stack[#paren_stack] == '}' then\n                paren_stack:insert(#paren_stack\
    \ - 1, paren_string[i])\n            end\n        elseif paren_string[i] == ')'\
    \ then\n            if paren_stack[#paren_stack] == '(' then\n               \
    \ paren_stack:insert(#paren_stack - 1, paren_string[i])\n            elseif paren_stack[#paren_stack]\
    \ == ')' then\n                paren_stack:insert(#paren_stack + 1, paren_string[i])\n\
    \            elseif paren_stack[#paren_stack] == '{' then\n                paren_stack:insert(#paren_stack\
    \ - 1, paren_string[i])\n            elseif paren_stack[#paren_stack] == '}' then\n\
    \                paren_stack:insert(#paren_stack + 1, paren_string[i])\n     \
    \       end\n        elseif paren_string[i] == '{' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                paren_stack:insert(#paren_stack - 1, paren_string[i])\n\
    \            elseif paren_stack[#paren_stack] == ')' then\n                paren_stack:insert(#paren_stack\
    \ + 1, paren_string[i])\n            elseif paren_stack[#paren_stack] == '{' then",
  "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1 : i + 2]\n\
    \            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n \
    \       elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1 : i + 2]\n\
    \                paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack + 1] = #paren_stack + 1\n        elseif paren_stack[#paren_stack]\
    \ > 0 then\n            if paren_string[i] == ')' then\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local paren_stack = {}\n  \
    \  local paren_count = 0\n    local brace_count = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n", "    local result\
    \ = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 1 do\n     \
    \   if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] ==\
    \ 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n    \
    \        end\n            paren_stack[#paren_stack] = #paren_stack + 1\n     \
    \   elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string, 2 do\n\
    \        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack - 1\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #paren_string, 2 do\n        local paren_group = paren_string:sub(i,\
    \ i+1)\n        if paren_group == '(' then\n            if result[#result] ==\
    \ nil then\n                result[#result] = paren_group\n            else\n\
    \                result[#result] = result[#result] .. ' ' .. paren_group\n   \
    \         end\n        elseif paren_group == ')' then\n            if result[#result]\
    \ == nil then\n                result[#result] = paren_group\n            else\n\
    \                result[#result] = result[#result] .. ' ' .. paren_group\n   \
    \         end\n        end\n    end\n    return result\nend", "    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local result = {}\n    local i = 1\n  \
    \  while i <= #paren_string do\n        if paren_string[i] == '(' then\n     \
    \       paren_stack[#paren_stack + 1] = paren_count\n            paren_count =\
    \ paren_count + 1\n        elseif paren_string[i] == ')' then\n            if\
    \ paren_count == 0 then\n                error('unbalanced parens')\n        \
    \    elseif paren_stack[#paren_stack] == paren_count then\n                result[#result\
    \ + 1] = paren_stack[1:#paren_stack]\n                paren_stack = {}\n     \
    \           paren_count = 0\n            else\n                paren_stack[#paren_stack]\
    \ = paren_count\n                paren_count = paren_count - 1\n        end\n\
    \        i = i + 1\n    end\n    if paren_count > 0 then\n        error('unbalanced\
    \ parens')\n    end\n    return result\nend", "    local paren_stack = {}\n  \
    \  local result = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                break\n\
    \            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ + 1\n            end\n        elseif paren_string[i] == ')' then\n         \
    \   if paren_stack[#paren_stack] == 0 then\n                result[#result + 1]\
    \ = paren_string[i + 1:end]\n                break\n            else\n       \
    \         paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n        \
    \    end\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local paren_stack = {}\n    local result = {}\n    local paren_count\
    \ = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local\
    \ paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max\
    \ = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max\
    \ = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max\
    \ = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max\
    \ = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max\
    \ = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max\
    \ = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local\
    \ paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min\
    \ = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n \
    \   local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local\
    \ paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min\
    \ = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min", "   \
    \ local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local paren_stack = {}\n\
    \    local result = {}\n    local paren_count = 0\n    local brace_count = 0\n\
    \    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n  \
    \  local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q\
    \ = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n  \
    \  local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z\
    \ = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n  \
    \  local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i\
    \ = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n  \
    \  local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r\
    \ = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n  \
    \  local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a\
    \ = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n  \
    \  local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j\
    \ = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n  \
    \  local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s\
    \ = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n  \
    \  local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b\
    \ = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n  \
    \  local g = 1\n    local", "    local result = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack]\
    \ = 0\n            end\n            paren_count = paren_count + 1\n        else\n\
    \            if paren_stack[#paren_stack] == 1 then\n                result[#result\
    \ + 1] = paren_string[i]\n                paren_stack[#paren_stack] = 0\n    \
    \        end\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local paren_stack = {'('}\n    for i = 1, #paren_string, 1 do\n  \
    \      if paren_string[i] == '(' then\n            paren_stack = {'('}\n     \
    \   elseif paren_string[i] == ')' then\n            if paren_stack == {'('} then\n\
    \                result[#result + 1] = paren_stack\n                paren_stack\
    \ = {'('}\n            else\n                result[#result + 1] = paren_stack\n\
    \                paren_stack = {')'}\n            end\n        end\n    end\n\
    \    if paren_stack == {'('} then\n        result[#result + 1] = paren_stack\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {'('}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#paren_stack] == '(' then\n               \
    \ paren_stack[#paren_stack] = '('\n            else\n                paren_stack[#paren_stack]\
    \ = '('\n            end\n        elseif paren_string[i] == ')' then\n       \
    \     if paren_stack[#paren_stack] == '(' then\n                paren_stack[#paren_stack]\
    \ = ')'\n            else\n                paren_stack[#paren_stack] = ')'\n \
    \           end\n        elseif paren_stack[#paren_stack] == '(' then\n      \
    \      if paren_stack[#paren_stack] == '(' then\n                paren_stack[#paren_stack]\
    \ = '('\n            else\n                paren_stack[#paren_stack] = '('\n \
    \           end\n        elseif paren_stack[#paren_stack] == ')' then\n      \
    \      if paren_stack[#paren_stack] == '(' then\n                paren_stack[#paren_stack]\
    \ = ')'\n            else\n                paren_stack[#paren_stack] = ')'\n \
    \           end\n        end\n        if paren_stack[#paren_stack] == '(' then\n\
    \            result[#result+1] = paren_string[i]\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i = 1, #paren_string, 2 do\n \
    \       local paren_group = paren_string:sub(i, i+1)\n        if paren_group ~=\
    \ '(' and paren_group ~= ')' then\n            result[#result+1] = paren_group\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            end\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_stack[#paren_stack] > 0 then\n            paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 1 do\n\
    \        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local paren_stack = {}\n\
    \    local result = {}\n    for i=1,#paren_string,1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            else\n         \
    \       result[#result+1] = paren_string[i+1:end]\n                result[#result]\
    \ = paren_stack[#paren_stack]\n                paren_stack[#paren_stack] = #result\n\
    \                result[#result+1] = paren_string[i+1:end]\n            end\n\
    \        elseif paren_stack[#paren_stack] > 0 then\n            result[#result+1]\
    \ = paren_string[i+1:end]\n            result[#result] = paren_stack[#paren_stack]\n\
    \            paren_stack[#paren_stack] = #result\n            result[#result+1]\
    \ = paren_string[i+1:end]\n        end\n        if paren_stack[#paren_stack] >\
    \ 0 then\n            result[#result] = paren_stack[#paren_stack]\n          \
    \  paren_stack[#paren_stack] = #result\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack + 1] = #paren_stack + 1\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local\
    \ brace_count = 0\n    local brace_stack = {}\n    local brace_count = 0\n   \
    \ local brace_stack = {}\n    local brace_count = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    for i=1,#paren_string,2\
    \ do\n        if paren_string[i] == '(' then\n            if paren_string[i+1]\
    \ == ')' then\n                result[#result+1] = paren_string[i+2:i+2]\n   \
    \             i = i+2\n            elseif paren_string[i+1] == '(' then\n    \
    \            result[#result+1] = paren_string[i+2:i+2]\n                i = i+2\n\
    \            elseif paren_string[i+1] == ')' then\n                result[#result+1]\
    \ = paren_string[i+2:i+2]\n                i = i+2\n            else\n       \
    \         result[#result+1] = paren_string[i+1:i+2]\n                i = i+1\n\
    \        else\n            result[#result+1] = paren_string[i:i+1]\n         \
    \   i = i+1\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local brace_count = 0\n   \
    \ local brace_stack = {}\n    local brace_count = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    for i = 1,#paren_string,1 do\n        if\
    \ paren_string[i] == '(' then\n            paren_stack[#paren_stack+1] = i\n \
    \           paren_count = paren_count + 1\n        elseif paren_string[i] == ')'\
    \ then\n            if paren_count == 0 then\n                result[#result+1]\
    \ = paren_string[1:i]\n            else\n                paren_count = paren_count\
    \ - 1\n                if paren_count == 0 then\n                    result[#result+1]\
    \ = paren_string[1:i]\n                else\n                    result[#result+1]\
    \ = paren_string[paren_stack[#paren_stack]:i]\n            end\n        elseif\
    \ paren_string[i] == '{' then\n            brace_stack[#brace_stack+1] = i\n \
    \           brace_count = brace_count + 1\n        elseif paren_string[i] == '}'\
    \ then\n            if brace_count == 0 then\n                result[#result+1]\
    \ = paren_string[1:i]\n            else\n                brace_count = brace_count\
    \ - 1\n                if brace_count == 0 then\n                    result[#result+1]\
    \ = paren_string[1:i]\n                else\n                    result[#result+1]\
    \ = paren_string[brace_stack[#brace_stack]:i]\n            end\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local brace_count = 0\n    local brace_open\
    \ = 0\n    local brace_close = 0\n    local brace_open_count = 0\n    local brace_close_count\
    \ = 0\n    local brace_open_count_stack = {}\n    local brace_close_count_stack\
    \ = {}\n    local brace_open_count_stack_index = 0\n    local brace_close_count_stack_index\
    \ = 0\n    local brace_open_count_stack_index_stack = {}\n    local brace_close_count_stack_index_stack\
    \ = {}\n    local brace_open_count_stack_index_stack_index = 0\n    local brace_close_count_stack_index_stack_index\
    \ = 0\n    local brace_open_count_stack_index_stack_index_stack = {}\n    local\
    \ brace_close_count_stack_index_stack_index_stack = {}\n    local brace_open_count_stack_index_stack_index_stack_index\
    \ = 0\n    local brace_close_count_stack_index_stack_index_stack_index = 0\n \
    \   local brace_open_count_stack_index_stack_index_stack_index_stack = {}\n  \
    \  local brace_close_count_stack_index_stack_index_stack_index_stack = {}\n  \
    \  local brace_open_count_stack_index_stack_index_stack_index_stack_index = 0\n\
    \    local brace_close_count_stack_index_stack_index_stack_index_stack_index =\
    \ 0\n    local brace_open_count_stack_index_stack_index_stack_index_stack_index_stack\
    \ = {}\n    local brace_close_count_stack_index_stack_index_stack_index_stack_index_stack\
    \ = {}\n    local brace_open_count_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0\n    local brace_close_count_stack_index_stack_index_stack_index_stack_index_stack_index\
    \ = 0\n    local brace_open_", "    local paren_stack = {}\n    local result =\
    \ {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n                break\n            else\n  \
    \              paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n   \
    \         end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               break\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local paren_stack = {'(', ')', '{', '}'}\n    local\
    \ result = {}\n    for i = 1, #paren_string, 2 do\n        if paren_stack[paren_string[i]]\
    \ == paren_stack[paren_string[i-1]] then\n            result[#result+1] = paren_string[i]\n\
    \        else\n            result[#result+1] = paren_string[i]\n        end\n\
    \    end\n    return result\nend", "    local paren_stack = {}\n    local result\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_stack_count = 0\n    local brace_stack_count_max = 0\n\
    \    local brace_stack_count_min = 0\n    local brace_stack_count_min_max = 0\n\
    \    local brace_stack_count_min_max_count = 0\n    local brace_stack_count_min_max_count_max\
    \ = 0\n    local brace_stack_count_min_max_count_min = 0\n    local brace_stack_count_min_max_count_min_max\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count = 0\n    local\
    \ brace_stack_count_min_max_count_min_max_count_max = 0\n    local brace_stack_count_min_max_count_min_max_count_min\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count_min_max = 0\n \
    \   local brace_stack_count_min_max_count_min_max_count_min_max_count = 0\n  \
    \  local brace_stack_count_min_max_count_min_max_count_min_max_count_max = 0\n\
    \    local brace_stack_count_min_max_count_min_max_count_min_max_count_min = 0\n\
    \    local brace_stack_count_min_max_count_min_max_count_min_max_count_min_max\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count_min_max_count_min_max_count\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count_min_max_count_min_max_count_max\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count_min_max_count_min_max_count_min\
    \ = 0\n    local brace_stack_count_min_max_count_min_max_count_min_max_count_min_max_",
  "    local paren_stack = {}\n    local paren_count = 0\n    local result = {}\n\
    \    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = paren_count\n     \
    \       paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n\
    \            if paren_count == 0 then\n                error('unbalanced parens')\n\
    \            elseif paren_count == 1 then\n                result[#result + 1]\
    \ = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n   \
    \             result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[1]\n\
    \                result[#result + 1] = paren_stack[1]\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1]", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = ''\n    local paren_close\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = ''\n    local paren_close = ''\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = ''\n    local paren_close = ''\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = ''\n    local paren_close\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = ''\n    local paren_close = ''\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = ''\n    local paren_close = ''\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = ''\n    local paren_close\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = ''\n    local paren_close = ''\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = ''\n    local paren_close = ''\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = ''\n    local paren_close\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = ''\n    local paren_close = ''\n    local", " \
    \   local paren_stack = {}\n    local paren_count = 0\n    local result = {}\n\
    \    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack]\
    \ = 1\n            else\n                paren_stack[#paren_stack] = 0\n     \
    \       end\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack]\
    \ = 1\n            end\n            paren_count = paren_count - 1\n        end\n\
    \        if paren_stack[#paren_stack] == 1 then\n            result[#result +\
    \ 1] = result[#result] .. paren_string[i]\n        end\n    end\n    return result\n\
    end", "    local paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if not paren_stack[#paren_stack]\
    \ then\n                paren_stack[#paren_stack] = 1\n            else\n    \
    \            paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n     \
    \       end\n        else\n            if paren_stack[#paren_stack] then\n   \
    \             if paren_stack[#paren_stack] == 1 then\n                    result[#result\
    \ + 1] = paren_stack[#paren_stack]\n                    paren_stack[#paren_stack]\
    \ = nil\n                else\n                    paren_stack[#paren_stack] =\
    \ paren_stack[#paren_stack] - 1\n                end\n            end\n      \
    \  end\n    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {'(', ')', '{', '}'}\n    local paren_count = 0\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count\
    \ + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count\
    \ - 1\n        elseif paren_string[i] == '{' then\n            paren_stack[#paren_stack\
    \ + 1] = '{'\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            paren_stack[#paren_stack - 1] = '}'\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if #paren_stack > 1 then\n                result[#result + 1] = paren_stack[1]\
    \ .. ' ' .. paren_stack[2]\n            elseif #paren_stack == 1 then\n      \
    \          result[#result + 1] = paren_stack[1]\n            end\n           \
    \ paren_stack = {'(', ')', '{', '}'}\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            else\n\
    \                print('Error: unmatched closing parenthesis')\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 2 do\n   \
    \     if paren_string[i] == paren_stack[1] then\n            if paren_stack[2]\
    \ == '(' then\n                result[#result+1] = paren_string[i+1]\n       \
    \         paren_stack[2] = ')'\n            elseif paren_stack[2] == '{' then\n\
    \                result[#result+1] = paren_string[i+1]\n                paren_stack[2]\
    \ = '}'\n            elseif paren_stack[2] == '[' then\n                result[#result+1]\
    \ = paren_string[i+1]\n                paren_stack[2] = ']'\n            end\n\
    \        elseif paren_stack[1] == paren_stack[2] then\n            if paren_stack[1]\
    \ == '(' then\n                result[#result+1] = paren_string[i]\n         \
    \       paren_stack[1] = ')'\n            elseif paren_stack[1] == '{' then\n\
    \                result[#result+1] = paren_string[i]\n                paren_stack[1]\
    \ = '}'\n            elseif paren_stack[1] == '[' then\n                result[#result+1]\
    \ = paren_string[i]\n                paren_stack[1] = ']'\n            end\n \
    \       end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                break\n\
    \            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ + 1\n            end\n        elseif paren_string[i] == ')' then\n         \
    \   if paren_stack[#paren_stack] == 0 then\n                result[#result + 1]\
    \ = paren_string[i + 1:end]\n                break\n            else\n       \
    \         paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n        \
    \    end\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local paren_stack = {'('}\n    for i = 1, #paren_string, 1 do\n        if\
    \ paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == '('\
    \ then\n                paren_stack[#paren_stack] = '('\n            else\n  \
    \              paren_stack[#paren_stack] = ')'\n            end\n        elseif\
    \ paren_stack[#paren_stack] == '(' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                paren_stack[#paren_stack] = '('\n            else\n\
    \                paren_stack[#paren_stack] = ')'\n            end\n        elseif\
    \ paren_stack[#paren_stack] == ')' then\n            if paren_stack[#paren_stack]\
    \ == ')' then\n                paren_stack[#paren_stack] = ')'\n            else\n\
    \                paren_stack[#paren_stack] = '('\n            end\n        end\n\
    \        if paren_stack[#paren_stack] == '(' then\n            result[#result\
    \ + 1] = paren_string[i]\n        end\n    end\n    return result\nend", "   \
    \ local paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local brace_count = 0\n   \
    \ local brace_stack = {}\n    local brace_count = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local paren_stack = {}\n    local paren_count = 0\n    local result\
    \ = {}\n    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = paren_count\n     \
    \       paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n\
    \            if paren_count == 0 then\n                result[#result + 1] = paren_stack[1]\n\
    \            else\n                paren_count = paren_stack[#paren_stack]\n \
    \           end\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local paren_stack = {}\n    local paren_count = 0\n    local result\
    \ = {}\n    local i = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = paren_count\n     \
    \       paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n\
    \            if paren_count == 0 then\n                error('Unbalanced parentheses')\n\
    \            elseif paren_stack[#paren_stack] == paren_count then\n          \
    \      result[#result + 1] = paren_stack[1:#paren_stack]\n                paren_stack\
    \ = {}\n                paren_count = 0\n            else\n                paren_count\
    \ = paren_count - 1\n        end\n        i = i + 1\n    end\n    if paren_count\
    \ > 0 then\n        error('Unbalanced parentheses')\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1 : #paren_string]\n\
    \                break\n            end\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] + 1\n        elseif paren_string[i] == ')' then\n\
    \            paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n     \
    \   end\n    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {'(', ')'}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[1] == '(' then\n                paren_stack[1]\
    \ = ')'\n            elseif paren_stack[2] == '(' then\n                paren_stack[2]\
    \ = ')'\n            else\n                paren_stack[1] = '('\n            end\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[2] ==\
    \ ')' then\n                paren_stack[2] = '('\n            elseif paren_stack[1]\
    \ == ')' then\n                paren_stack[1] = '('\n            else\n      \
    \          paren_stack[2] = ')'\n            end\n        end\n        if paren_stack[1]\
    \ == paren_stack[2] then\n            if paren_stack[1] == '(' then\n        \
    \        result[#result+1] = paren_string[i+1:i+2]\n            else\n       \
    \         result[#result+1] = paren_string[i-1:i]\n            end\n        else\n\
    \            result[#result+1] = paren_string[i-1:i]\n        end\n    end\n \
    \   return result\nend", "    local result = {}\n    local paren_stack = {}\n\
    \    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n            end\n            paren_stack[#paren_stack]\
    \ = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n           \
    \ if paren_stack[#paren_stack] == 1 then\n                result[#result + 1]\
    \ = paren_string[i + 1:end]\n                paren_stack[#paren_stack] = #paren_stack\
    \ - 1\n            else\n                print('Error: unbalanced parens')\n \
    \           end\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n     \
    \   if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] ==\
    \ 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n    \
    \        end\n            paren_stack[#paren_stack] = #paren_stack + 1\n     \
    \   elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            else\n\
    \                print('Error: Unbalanced parenthesis')\n            end\n   \
    \     end\n    end\n    return result\nend", "    local paren_stack = {}\n   \
    \ local paren_count = 0\n    local result = {}\n    local i = 1\n    while i <=\
    \ #paren_string do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = paren_count\n            paren_count = paren_count + 1\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_count == 0 then\n        \
    \        error('unbalanced parens')\n            elseif paren_stack[#paren_stack]\
    \ == paren_count then\n                result[#result + 1] = paren_stack[1:#paren_stack]\n\
    \                paren_stack = {}\n                paren_count = 0\n         \
    \   else\n                paren_count = paren_count - 1\n        end\n       \
    \ i = i + 1\n    end\n    if paren_count > 0 then\n        error('unbalanced parens')\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    for i = 1,\
    \ #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if\
    \ paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack]\
    \ = i\n                paren_count = paren_count + 1\n            end\n      \
    \  elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ > 0 then\n                if paren_stack[#paren_stack] == i then\n         \
    \           paren_count = paren_count - 1\n                    if paren_count\
    \ == 0 then\n                        result[#result + 1] = string.sub(paren_string,\
    \ paren_stack[1], i - 1)\n                        table.insert(result, string.sub(paren_string,\
    \ paren_stack[1], i))\n                        table.insert(result, string.sub(paren_string,\
    \ i + 1, #paren_string))\n                        table.insert(result, string.sub(paren_string,\
    \ i + 1, #paren_string))\n                        table.insert(result, string.sub(paren_string,\
    \ paren_stack[1], #paren_string))\n                        table.insert(result,\
    \ string.sub(paren_string, paren_stack[1], #paren_string))\n                 \
    \       table.insert(result, string.sub(paren_string, paren_stack[1], #paren_string))\n\
    \                        table.insert(result, string.sub(paren_string, paren_stack[1],\
    \ #paren_string))\n                        table.insert(result, string.sub(paren_string,\
    \ paren_stack[1], #paren_string))\n                        table.insert(result,\
    \ string.sub(paren_string, paren_stack[1], #paren_string))\n                 \
    \       table.insert(result, string.sub(paren_string, paren_stack[1], #paren_string))\n\
    \                        table.insert(result, string.sub(paren_string,", "   \
    \ local paren_stack = {}\n    local result = {}\n    local paren_count = 0\n \
    \   local brace_count = 0\n    local brace_stack = {}\n    local brace_count =\
    \ 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local i = 1\n\
    \    while i <= #paren_string do\n        if paren_string[i] == '(' then\n   \
    \         if brace_count == 0 then\n                paren_stack[#paren_stack +\
    \ 1] = i\n                paren_count = paren_count + 1\n            end\n   \
    \         brace_count = brace_count + 1\n        elseif paren_string[i] == ')'\
    \ then\n            if brace_count == 1 then\n                if paren_count >\
    \ 0 then\n                    result[#result + 1] = paren_stack[1]..')('..paren_stack[2]..')'..paren_stack[3]\n\
    \                    paren_stack = {}\n                    paren_count = 0\n \
    \               end\n            end\n            brace_count = brace_count -\
    \ 1\n        end\n        i = i + 1\n    end\n    return result\nend", "    local\
    \ paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string, 1 do\n\
    \        if paren_string[i] == '(' then\n            if not paren_stack[#paren_stack]\
    \ then\n                paren_stack[#paren_stack] = 1\n            else\n    \
    \            paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n     \
    \       end\n        else\n            if paren_stack[#paren_stack] and paren_stack[#paren_stack]\
    \ > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ - 1\n            end\n        end\n        if paren_stack[#paren_stack] == 0\
    \ then\n            if not result[#result] then\n                result[#result]\
    \ = paren_string[i+1]\n            else\n                result[#result] = result[#result]\
    \ .. paren_string[i+1]\n            end\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    for i = 1, #paren_string, 1 do\n       \
    \ if paren_string[i] == '(' then\n            paren_stack[#paren_stack + 1] =\
    \ paren_count\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count == 0 then\n                result[#result\
    \ + 1] = paren_stack[1]\n                table.insert(result, paren_stack[2])\n\
    \                table.insert(result, paren_stack[3])\n                table.insert(result,\
    \ paren_stack[4])\n                table.insert(result, paren_stack[5])\n    \
    \            table.insert(result, paren_stack[6])\n                table.insert(result,\
    \ paren_stack[7])\n                table.insert(result, paren_stack[8])\n    \
    \            table.insert(result, paren_stack[9])\n                table.insert(result,\
    \ paren_stack[10])\n                table.insert(result, paren_stack[11])\n  \
    \              table.insert(result, paren_stack[12])\n                table.insert(result,\
    \ paren_stack[13])\n                table.insert(result, paren_stack[14])\n  \
    \              table.insert(result, paren_stack[15])\n                table.insert(result,\
    \ paren_stack[16])\n                table.insert(result, paren_stack[17])\n  \
    \              table.insert(result, paren_stack[18])\n                table.insert(result,\
    \ paren_stack[19])\n                table.insert(result, paren_stack[20])\n  \
    \              table.insert(result, paren_stack[21])\n                table.insert(result,\
    \ paren_stack[22])\n                table.insert(result, paren_stack[23])\n  \
    \              table.insert(result, paren_stack[24])\n                table.insert(result,\
    \ paren_stack[25])\n                table.insert(result, paren_stack[26])\n  \
    \              table.insert(", "    local result = {}\n    local paren_stack =\
    \ {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == '(' then\n        \
    \        -- This is an open brace. Push it onto the stack.\n                paren_stack[#paren_stack]\
    \ = paren_string[i]\n            elseif paren_stack[#paren_stack] == ')' then\n\
    \                -- This is a closing brace. Pop it off the stack.\n         \
    \       paren_stack[#paren_stack] = paren_string[i]\n            elseif paren_stack[#paren_stack]\
    \ == '{' then\n                -- This is an open brace. Push it onto the stack.\n\
    \                paren_stack[#paren_stack] = paren_string[i]\n            elseif\
    \ paren_stack[#paren_stack] == '}' then\n                -- This is a closing\
    \ brace. Pop it off the stack.\n                paren_stack[#paren_stack] = paren_string[i]\n\
    \            end\n        elseif paren_stack[#paren_stack] == '(' then\n     \
    \       -- This is an opening brace. Pop it off the stack.\n            paren_stack[#paren_stack]\
    \ = paren_string[i]\n        elseif paren_stack[#paren_stack] == ')' then\n  \
    \          -- This is a closing brace. Pop it off the stack.\n            paren_stack[#paren_stack]\
    \ = paren_string[i]\n        elseif paren_stack[#paren_stack] == '{' then\n  \
    \          -- This is an opening brace. Pop it off the stack.\n            paren_stack[#paren_stack]\
    \ = paren_string[i]\n        elseif paren_stack[#paren_stack] == '}' then\n  \
    \          -- This is a closing brace. Pop it off the stack.\n            paren_stack[#paren_stack]\
    \ = paren_string[i]\n        end\n        if #paren_stack == 1 then\n        \
    \    -- All braces are closed.\n            result[#result+1] = paren_string",
  "    local paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ ~= nil then\n                result[#result + 1] = paren_stack[#paren_stack]\n\
    \                #print('result: ' .. result[#result])\n                #print('paren_stack:\
    \ ' .. paren_stack)\n                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack]: ' .. paren_stack[#paren_stack])\n\
    \                #print('paren_stack[#paren_stack", "    local result = {}\n \
    \   local paren_stack = {'('}\n    local paren_count = 0\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = '('\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count == 0 then\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[2]\n\
    \                result[#result + 1] = paren_stack[3]\n                result[#result\
    \ + 1] = paren_stack[4]\n                result[#result + 1] = paren_stack[5]\n\
    \                result[#result + 1] = paren_stack[6]\n                result[#result\
    \ + 1] = paren_stack[7]\n                result[#result + 1] = paren_stack[8]\n\
    \                result[#result + 1] = paren_stack[9]\n                result[#result\
    \ + 1] = paren_stack[10]\n                result[#result + 1] = paren_stack[11]\n\
    \                result[#result + 1] = paren_stack[12]\n                result[#result\
    \ + 1] = paren_stack[13]\n                result[#result + 1] = paren_stack[14]\n\
    \                result[#result + 1] = paren_stack[15]\n                result[#result\
    \ + 1] = paren_stack[16]\n                result[#result + 1] = paren_stack[17]\n\
    \                result[#result + 1] = paren_stack[18]\n                result[#result\
    \ + 1] = paren_stack[19]\n                result[#result + 1] = paren_stack[20]\n\
    \                result[#result + 1] = paren_stack[21]\n                result[#result\
    \ + 1] = paren_stack[22]\n                result[#result + 1] = paren_stack[23]\n\
    \                result[#result + 1] = paren_stack", "    local result = {}\n\
    \    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            end\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {'(', ')', '{', '}'}\n \
    \   local paren_count = 0\n    local paren_index = 1\n    local paren_char = ''\n\
    \    local paren_char_index = 1\n    local paren_char_count = 0\n    local paren_char_stack\
    \ = {'(', ')', '{', '}'}\n    local paren_char_stack_index = 1\n    local paren_char_stack_count\
    \ = 0\n    local paren_char_stack_char = ''\n    local paren_char_stack_char_index\
    \ = 1\n    local paren_char_stack_char_count = 0\n    local paren_char_stack_char_stack\
    \ = {'(', ')', '{', '}'}\n    local paren_char_stack_char_stack_index = 1\n  \
    \  local paren_char_stack_char_stack_count = 0\n    local paren_char_stack_char_stack_char\
    \ = ''\n    local paren_char_stack_char_stack_char_index = 1\n    local paren_char_stack_char_stack_char_count\
    \ = 0\n    local paren_char_stack_char_stack_char_stack = {'(', ')', '{', '}'}\n\
    \    local paren_char_stack_char_stack_char_stack_index = 1\n    local paren_char_stack_char_stack_char_stack_count\
    \ = 0\n    local paren_char_stack_char_stack_char_stack_char = ''\n    local paren_char_stack_char_stack_char_stack_char_index\
    \ = 1\n    local paren_char_stack_char_stack_char_stack_char_count = 0\n    local\
    \ paren_char_stack_char_stack_char_stack_char_stack = {'(', ')', '{', '}'}\n \
    \   local paren_char_stack_char_stack_char_stack_char_stack_index = 1\n    local\
    \ paren_char_stack_char_stack_char_stack_char_stack_count =", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local i = 1\n\
    \    while i <= #paren_string do\n        if paren_string[i] == '(' then\n   \
    \         paren_count = paren_count + 1\n            if paren_count > paren_stack[#paren_stack]\
    \ then paren_stack[#paren_stack + 1] = paren_count\n            else paren_stack[#paren_stack]\
    \ = paren_count\n        elseif paren_string[i] == ')' then\n            paren_count\
    \ = paren_count - 1\n            if paren_count < 0 then paren_count = 0\n   \
    \         elseif paren_count == 0 then\n                if brace_count > 0 then\n\
    \                    brace_count = brace_count - 1\n                    if brace_count\
    \ < 0 then brace_count = 0\n                else\n                    if brace_stack[#brace_stack]\
    \ > 0 then\n                        brace_count = brace_stack[#brace_stack] -\
    \ 1\n                        if brace_count < 0 then brace_count = 0\n       \
    \             end\n                end\n            end\n        elseif paren_string[i]\
    \ == '{' then\n            brace_count = brace_count + 1\n            if brace_count\
    \ > brace_stack[#brace_stack] then brace_stack[#brace_stack + 1] = brace_count\n\
    \            else brace_stack[#brace_stack] = brace_count\n        elseif paren_string[i]\
    \ == '}' then\n            brace_count = brace_count - 1\n            if brace_count\
    \ < 0 then brace_count = 0\n            elseif brace_count == 0 then\n       \
    \         if brace_stack[#brace_stack] > 0 then\n                    brace_count\
    \ = brace_stack[#brace_stack] - 1\n                    if brace_count < 0 then\
    \ brace_count = 0\n                end\n            end\n        end\n       \
    \ if paren_count == 0 and brace_count == 0 then\n            if #result > 0 then\
    \ result[#result] = paren_string[i]\n            else result[", "    local result\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local i = 1\n\
    \    while i <= #paren_string do\n        if paren_string[i] == '(' then\n   \
    \         if paren_stack[#paren_stack] == '(' then\n                paren_stack[#paren_stack]\
    \ = ')'\n            else\n                paren_stack[#paren_stack] = '('\n \
    \           end\n            paren_count = paren_count + 1\n        else\n   \
    \         if paren_stack[#paren_stack] == '(' then\n                paren_stack[#paren_stack]\
    \ = ')'\n            else\n                paren_stack[#paren_stack] = '('\n \
    \           end\n            if paren_stack[#paren_stack] == ')' then\n      \
    \          if paren_count == 0 then\n                    result[#result + 1] =\
    \ paren_stack[1] .. ')'\n                else\n                    result[#result\
    \ + 1] = paren_stack[1] .. ')' .. paren_stack[2] .. ')'\n                end\n\
    \                result[#result + 1] = paren_stack[1] .. ')' .. paren_stack[2]\
    \ .. ')' .. paren_stack[3] .. ')'\n                result[#result + 1] = paren_stack[1]\
    \ .. ')' .. paren_stack[2] .. ')' .. paren_stack[3] .. ')' .. paren_stack[4] ..\
    \ ')'\n                result[#result + 1] = paren_stack[1] .. ')' .. paren_stack[2]\
    \ .. ')' .. paren_stack[3] .. ')' .. paren_stack[4] .. ')' .. paren_stack[5] ..\
    \ ')'\n                result[#result + 1] = paren_stack[1] .. ')' .. paren_stack[2]\
    \ .. ')' .. paren_stack[3] .. ')' .. paren_stack[4] .. ')' .. paren_stack[5] ..\
    \ ')' .. paren_stack[6] .. ')'\n                result[#result + 1] = paren_stack[1]\
    \ .. ')' .. paren_", "    local result = {}\n    local paren_stack = {}\n    for\
    \ i=1,#paren_string,1 do\n        if paren_string[i] == '(' then\n           \
    \ if paren_stack[#paren_stack] == 0 then\n                result[#result+1] =\
    \ paren_string[i+1:end]\n            end\n            paren_stack[#paren_stack+1]\
    \ = 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack-1] = 0\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    local paren_stack = {}\n\
    \    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_string_index = 0\n    local paren_string_length = 0\n\
    \    local paren_string_length_index = 0\n    local paren_string_length_length\
    \ = 0\n    local paren_string_length_length_index = 0\n    local paren_string_length_length_length\
    \ = 0\n    local paren_string_length_length_length_index = 0\n    local paren_string_length_length_length_length\
    \ = 0\n    local paren_string_length_length_length_length_index = 0\n    local\
    \ paren_string_length_length_length_length_length = 0\n    local paren_string_length_length_length_length_length_index\
    \ = 0\n    local paren_string_length_length_length_length_length_length = 0\n\
    \    local paren_string_length_length_length_length_length_length_index = 0\n\
    \    local paren_string_length_length_length_length_length_length_length = 0\n\
    \    local paren_string_length_length_length_length_length_length_length_index\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_index\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_length\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_length_length_index\
    \ = 0\n    local paren_string_length_length_length_length_length_length_length_length_length_length_length\
    \ = 0\n    local paren_string_length", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_char_index = 1\n    local paren_char_count = 0\n    local\
    \ paren_char_stack = {}\n    local paren_char_stack_index = 1\n    local paren_char_stack_count\
    \ = 0\n    local paren_char_stack_char = ''\n    local paren_char_stack_char_index\
    \ = 1\n    local paren_char_stack_char_count = 0\n    local paren_char_stack_char_stack\
    \ = {}\n    local paren_char_stack_char_stack_index = 1\n    local paren_char_stack_char_stack_count\
    \ = 0\n    local paren_char_stack_char_stack_char = ''\n    local paren_char_stack_char_stack_char_index\
    \ = 1\n    local paren_char_stack_char_stack_char_count = 0\n    local paren_char_stack_char_stack_char_stack\
    \ = {}\n    local paren_char_stack_char_stack_char_stack_index = 1\n    local\
    \ paren_char_stack_char_stack_char_stack_count = 0\n    local paren_char_stack_char_stack_char_stack_char\
    \ = ''\n    local paren_char_stack_char_stack_char_stack_char_index = 1\n    local\
    \ paren_char_stack_char_stack_char_stack_char_count = 0\n    local paren_char_stack_char_stack_char_stack_char_stack\
    \ = {}\n    local paren_char_stack_char_stack_char_stack_char_stack_index = 1\n\
    \    local paren_char_stack_char_stack_char_stack_char_stack_count = 0\n    local\
    \ paren_char_stack_char_stack_char_stack_char_stack_char = ''\n    local paren_char_stack_char_stack_char_stack_char_stack_char_index\
    \ = 1\n    local paren_char_stack_char_", "    local paren_groups = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local paren_index = 1\n   \
    \ local paren_char = ''\n    local paren_open = 0\n    local paren_close = 0\n\
    \    local paren_count = 0\n    local paren_index = 1\n    local paren_char =\
    \ ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0", "    local paren_stack\
    \ = {}\n    local result = {}\n    for i = 1, #paren_string, 1 do\n        if\
    \ paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n\
    \                result[#result + 1] = paren_string[i + 1:end]\n            end\n\
    \            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            else\n                result[#result + 1] =\
    \ paren_string[i + 1:end]\n            end\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_char = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count_stack = {}\n   \
    \ local paren_count_stack_index = 0\n    local paren_count_stack_count = 0\n \
    \   local paren_count_stack_count_stack = {}\n    local paren_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count = 0\n    local paren_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_index = 0\n    local\
    \ paren_count_stack_count_stack_count_stack_count = 0\n    local paren_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count =\
    \ 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_index\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count\
    \ = 0\n    local paren_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack\
    \ = {}\n    local paren_count_stack_count_stack_count_", "    local result = {}\n\
    \    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local paren_groups = {}\n    local paren_stack = {}\n    local\
    \ paren_count = 0\n    local paren_index = 0\n    local paren_string = ''\n  \
    \  local paren_count = 0\n    local paren_index = 0\n    local paren_string =\
    \ ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0\n    local paren_index = 0\n    local paren_string\
    \ = ''\n    local paren_count = 0", "    local paren_groups = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local paren_index = 1\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 1\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_open = true", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 2 do\n      \
    \  if paren_string[i] == '(' then\n            paren_stack[#paren_stack + 1] =\
    \ paren_count\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count == 0 then\n                result[#result\
    \ + 1] = paren_stack[1]\n                result[#result + 1] = paren_stack[2]\n\
    \                result[#result + 1] = paren_stack[3]\n                result[#result\
    \ + 1] = paren_stack[4]\n                result[#result + 1] = paren_stack[5]\n\
    \                result[#result + 1] = paren_stack[6]\n                result[#result\
    \ + 1] = paren_stack[7]\n                result[#result + 1] = paren_stack[8]\n\
    \                result[#result + 1] = paren_stack[9]\n                result[#result\
    \ + 1] = paren_stack[10]\n                result[#result + 1] = paren_stack[11]\n\
    \                result[#result + 1] = paren_stack[12]\n                result[#result\
    \ + 1] = paren_stack[13]\n                result[#result + 1] = paren_stack[14]\n\
    \                result[#result + 1] = paren_stack[15]\n                result[#result\
    \ + 1] = paren_stack[16]\n                result[#result + 1] = paren_stack[17]\n\
    \                result[#result + 1] = paren_stack[18]\n                result[#result\
    \ + 1] = paren_stack[19]\n                result[#result + 1] = paren_stack[20]\n\
    \                result[#result + 1] = paren_stack[21]\n                result[#result\
    \ + 1] = paren_stack[22]\n                result[#result + 1] = paren_stack[23]\n\
    \                result[#result + 1] = paren_stack[", "    local paren_groups\
    \ = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0", "    local result\
    \ = {}\n    local paren_stack = {'('}\n    local paren_count = 0\n    for i =\
    \ 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n           \
    \ paren_stack = {'('}\n            paren_count = paren_count + 1\n        elseif\
    \ paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == '('\
    \ then\n                paren_stack = {'('}\n                paren_count = paren_count\
    \ - 1\n            else\n                if paren_stack[#paren_stack] == '(' then\n\
    \                    paren_stack = {'('}\n                    paren_count = paren_count\
    \ + 1\n                else\n                    if paren_stack[#paren_stack]\
    \ == '(' then\n                        paren_stack = {'('}\n                 \
    \       paren_count = paren_count + 1\n                    else\n            \
    \            if paren_stack[#paren_stack] == '(' then\n                      \
    \      paren_stack = {'('}\n                            paren_count = paren_count\
    \ + 1\n                        else\n                            if paren_stack[#paren_stack]\
    \ == '(' then\n                                paren_stack = {'('}\n         \
    \                       paren_count = paren_count + 1\n                      \
    \      else\n                                if paren_stack[#paren_stack] == '('\
    \ then\n                                    paren_stack = {'('}\n            \
    \                        paren_count = paren_count + 1\n                     \
    \           else\n                                    if paren_stack[#paren_stack]\
    \ == '(' then\n                                        paren_stack = {'('}\n \
    \                                       paren_count = paren_count + 1\n      \
    \                              else\n                                        if\
    \ paren_stack[#paren_stack] == '(' then\n                                    \
    \        paren_stack = {'('}\n                                            paren_count\
    \ = paren_count + 1\n                                        else\n          \
    \                                  if paren_stack[#paren_stack] == '(' then\n\
    \                                                paren_stack = {'('}\n       \
    \                                         paren_count = paren_count + 1\n    \
    \                                        else\n                              \
    \                  if paren_stack", "    local result = {}\n    local paren_stack\
    \ = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[1:i]\n                paren_stack[#paren_stack + 1] = 1\n\
    \            end\n            paren_stack[#paren_stack + 1] = paren_stack[#paren_stack\
    \ + 1] + 1\n        elseif paren_stack[#paren_stack] > 0 then\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n        end\n    end\n    for i = 1, #paren_stack,\
    \ 1 do\n        if paren_stack[i] > 0 then\n            result[#result + 1] =\
    \ paren_string[i + 1:end]\n        end\n    end\n    return result\nend", "  \
    \  local paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,2\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       else\n                result[#result+1] = paren_string[i+1:end]\n    \
    \            result[#result] = paren_stack[#paren_stack]\n                paren_stack[#paren_stack]\
    \ = #result\n            end\n        elseif paren_string[i] == ')' then\n   \
    \         if paren_stack[#paren_stack] == 0 then\n                result[#result+1]\
    \ = paren_string[i+1:end]\n            else\n                result[#result+1]\
    \ = paren_stack[#paren_stack]\n                result[#result] = paren_string[i+1:end]\n\
    \                paren_stack[#paren_stack] = #result\n            end\n      \
    \  end\n    end\n    if paren_stack[#paren_stack] > 0 then\n        result[#result]\
    \ = paren_stack[#paren_stack]\n        result[#result+1] = paren_string[end+1:end]\n\
    \    end\n    return result\nend", "    local result = {}\n    for i=1,#paren_string,2\
    \ do\n        if paren_string[i] == '(' then\n            if paren_string[i+1]\
    \ == '(' then\n                result[#result+1] = result[#result]..'('\n    \
    \            i = i+2\n            elseif paren_string[i+1] == ')' then\n     \
    \           result[#result+1] = result[#result]..'('\n                i = i+2\n\
    \            else\n                result[#result+1] = result[#result]..'('\n\
    \                i = i+1\n            end\n        elseif paren_string[i] == ')'\
    \ then\n            result[#result+1] = result[#result]..')'\n            i =\
    \ i+1\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local i = 1\n\
    \    local j = 1\n    while i <= #paren_string do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == '(' then\n        \
    \        -- nested parens\n                brace_count = brace_count + 1\n   \
    \             brace_stack[#brace_stack] = '('\n            elseif brace_stack[#brace_stack]\
    \ == '(' then\n                -- nested braces\n                brace_count =\
    \ brace_count + 1\n                brace_stack[#brace_stack] = '('\n         \
    \   elseif brace_stack[#brace_stack] == ')' then\n                -- nested braces\n\
    \                brace_count = brace_count - 1\n                brace_stack[#brace_stack]\
    \ = ')'\n            else\n                -- nested parens\n                paren_count\
    \ = paren_count + 1\n                paren_stack[#paren_stack] = '('\n       \
    \     end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                -- nested parens\n                brace_count =\
    \ brace_count - 1\n                brace_stack[#brace_stack] = ')'\n         \
    \   elseif brace_stack[#brace_stack] == '(' then\n                -- nested braces\n\
    \                brace_count = brace_count - 1\n                brace_stack[#brace_stack]\
    \ = ')'\n            elseif brace_stack[#brace_stack] == ')' then\n          \
    \      -- nested braces\n                brace_count = brace_count - 1\n     \
    \           brace_stack[#brace_stack] = ')'\n            else\n              \
    \  -- nested parens\n                paren_count = paren_count - 1\n         \
    \       paren_stack[#paren_stack] = ')'\n            end\n        elseif paren_string[i]\
    \ == '{' then\n            if paren_stack[#paren_stack] == '(' then\n        \
    \        -- nested parens\n                brace_count = brace_count +", "   \
    \ local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n \
    \   local brace_count = 0\n    local brace_stack = {}\n    local brace_count =\
    \ 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local paren_stack = {}\n    local result\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_stack_count = 0\n    local brace_stack_count_max = 0\n\
    \    local brace_stack_count_min = 0\n    local brace_stack_count_max_min = 0\n\
    \    local brace_stack_count_min_max = 0\n    local brace_stack_count_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max = 0\n    local brace_stack_count_min_max_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max = 0\n    local brace_stack_count_min_max_min_max_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max = 0\n    local\
    \ brace_stack_count_min_max_min_max_min_max_min_max_min = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0\n    local brace_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n    local brace_", "    local result = {}\n    local paren_stack = {}\n\
    \    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n\
    \            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n            end\n            paren_stack[#paren_stack\
    \ + 1] = 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = 0\n            end\n        end\n\
    \    end\n    return result\nend", "    local paren_stack = {}\n    local result\
    \ = {}\n    for i=1,#paren_string,1 do\n        if paren_string[i] == '(' then\n\
    \            if not paren_stack[#paren_stack] then\n                paren_stack[#paren_stack]\
    \ = 1\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ + 1\n            end\n        else\n            if paren_stack[#paren_stack]\
    \ then\n                if paren_stack[#paren_stack] == 1 then\n             \
    \       result[#result + 1] = paren_stack[#paren_stack]\n                    paren_stack[#paren_stack]\
    \ = nil\n                else\n                    paren_stack[#paren_stack] =\
    \ paren_stack[#paren_stack] - 1\n                end\n            end\n      \
    \  end\n    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {'('}\n    local paren_count = 0\n    local paren_index = 1\n    local paren_string\
    \ = ''\n    while paren_index <= #paren_string do\n        if paren_string[paren_index]\
    \ == '(' then\n            paren_stack[#paren_stack + 1] = '('\n            paren_count\
    \ = paren_count + 1\n        elseif paren_string[paren_index] == ')' then\n  \
    \          if paren_count == 0 then\n                result[#result + 1] = paren_string[1:paren_index]\n\
    \            else\n                paren_count = paren_count - 1\n           \
    \     if paren_count == 0 then\n                    result[#result + 1] = paren_string[1:paren_index]\n\
    \                else\n                    result[#result + 1] = paren_stack[#paren_stack]\n\
    \                    paren_stack[#paren_stack] = ')'\n            end\n      \
    \  end\n        paren_index = paren_index + 1\n    end\n    return result\nend",
  "    local paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,1\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack] = #paren_stack + 1\n      \
    \  elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \           paren_stack[#paren_stack] = #paren_stack - 1\n            end\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n       \
    \     if paren_string[i+1] == ')' then\n                result[#result+1] = paren_string[i+2:i+2]\n\
    \                i = i + 2\n            elseif paren_string[i+1] == '(' then\n\
    \                result[#result+1] = paren_string[i+2:i+2]\n                i\
    \ = i + 2\n            elseif paren_string[i+1] == ')' then\n                result[#result+1]\
    \ = paren_string[i+2:i+2]\n                i = i + 2\n            else\n     \
    \           result[#result+1] = paren_string[i+1:i+2]\n                i = i +\
    \ 1\n        else\n            result[#result+1] = paren_string[i:i+1]\n     \
    \       i = i + 1\n    end\n    return result\nend", "    local result = {}\n\
    \    local paren_stack = {}\n    local paren_count = 0\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local i = 1\n\
    \    while i <= #paren_string do\n        if paren_string[i] == '(' then\n   \
    \         paren_stack[#paren_stack+1] = i\n            paren_count = paren_count\
    \ + 1\n        elseif paren_string[i] == ')' then\n            if paren_count\
    \ == 0 then\n                result[#result+1] = paren_string[1:i]\n         \
    \       i = i + 1\n            else\n                paren_count = paren_count\
    \ - 1\n                if paren_count == 0 then\n                    if brace_count\
    \ == 0 then\n                        result[#result+1] = paren_string[1:i]\n \
    \                       i = i + 1\n                    else\n                \
    \        brace_count = brace_count - 1\n                else\n               \
    \     if brace_count == 0 then\n                        result[#result+1] = paren_string[1:i]\n\
    \                        i = i + 1\n                    else\n               \
    \         brace_count = brace_count - 1\n                end\n            end\n\
    \        elseif paren_string[i] == '{' then\n            brace_stack[#brace_stack+1]\
    \ = i\n            brace_count = brace_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            if brace_count == 0 then\n                result[#result+1]\
    \ = paren_string[1:i]\n                i = i + 1\n            else\n         \
    \       brace_count = brace_count - 1\n                if brace_count == 0 then\n\
    \                    if paren_count == 0 then\n                        result[#result+1]\
    \ = paren_string[1:i]\n                        i = i + 1\n                   \
    \ else\n                        paren_count = paren_count - 1\n              \
    \  else\n                    if paren_count == 0 then\n                      \
    \  result[#result+1] = paren_string[1:i]\n                        i = i + 1\n\
    \                    else\n                        paren_count = paren_count -\
    \ 1\n                    end\n", "    local paren_stack = {}\n    local result\
    \ = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '('\
    \ then\n            if not paren_stack[#paren_stack] then\n                paren_stack[#paren_stack]\
    \ = 1\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]\
    \ + 1\n            end\n        else\n            if not paren_stack[#paren_stack]\
    \ then\n                result[#result + 1] = paren_string[i]\n            else\n\
    \                if paren_stack[#paren_stack] == paren_stack[#paren_stack] - 1\
    \ then\n                    result[#result + 1] = paren_string[i]\n          \
    \      else\n                    result[#result + 1] = paren_string[i]\n     \
    \           end\n            end\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local paren_stack = {}\n    for i=1,#paren_string,2\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack+1] = 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            end\n          \
    \  paren_stack[#paren_stack-1] = 0\n        end\n    end\n    return result\n\
    end", "    local paren_stack = {}\n    local result = {}\n    local paren_count\
    \ = 0\n    local paren_open = 0\n    local paren_close = 0\n    local paren_string\
    \ = ''\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            paren_stack[#paren_stack + 1] = paren_string[i]\n        \
    \    paren_count = paren_count + 1\n            paren_open = paren_open + 1\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                paren_count = paren_count - 1\n               \
    \ if paren_count == 0 then\n                    result[#result + 1] = paren_string[i]\n\
    \                end\n            elseif paren_stack[#paren_stack] == '(' then\n\
    \                result[#result + 1] = paren_string[i]\n            end\n    \
    \        paren_close = paren_close + 1\n            if paren_close == paren_open\
    \ then\n                if paren_stack[#paren_stack] == '(' then\n           \
    \         paren_stack[#paren_stack] = ')'\n                elseif paren_stack[#paren_stack]\
    \ == ')' then\n                    paren_stack[#paren_stack] = '('\n         \
    \       end\n                paren_count = paren_count - 1\n                if\
    \ paren_count == 0 then\n                    result[#result + 1] = paren_stack[#paren_stack]\n\
    \                end\n            end\n        end\n    end\n    return result\n\
    end", "    local paren_stack = {'('}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack\
    \ + 1] = paren_string[i]\n        elseif paren_stack[#paren_stack] == '(' then\n\
    \            if paren_string[i] == ')' then\n                result[#result +\
    \ 1] = string.sub(paren_stack[1], #paren_stack)\n                paren_stack =\
    \ {'('}\n            else\n                paren_stack[#paren_stack] = paren_string[i]\n\
    \        elseif paren_stack[#paren_stack] == ')' then\n            if paren_string[i]\
    \ == '(' then\n                paren_stack[#paren_stack] = paren_string[i]\n \
    \           else\n                result[#result + 1] = string.sub(paren_stack[1],\
    \ #paren_stack)\n                paren_stack = {'('}\n        else\n         \
    \   paren_stack[#paren_stack] = paren_string[i]\n    end\n    if #paren_stack\
    \ > 1 then\n        result[#result + 1] = string.sub(paren_stack[1], #paren_stack)\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 1 do\n      \
    \  if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] ==\
    \ 0 then\n                result[#result + 1] = paren_string[i]\n            \
    \    paren_stack[#paren_stack + 1] = 1\n            end\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] + 1\n        elseif paren_stack[#paren_stack] >\
    \ 0 then\n            paren_stack[#paren_stack] = paren_stack[#paren_stack] -\
    \ 1\n        end\n    end\n    return result\nend", "    local paren_stack = {}\n\
    \    local paren_count = 0\n    local paren_string = ''\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = ''\n    local paren_close\
    \ = ''\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n   \
    \ local paren_stack_string = ''\n    local paren_stack_string_index = 0\n    local\
    \ paren_stack_string_count = 0\n    local paren_stack_string_count_index = 0\n\
    \    local paren_stack_string_count_count = 0\n    local paren_stack_string_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count = 0\n    local paren_stack_string_count_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count_count = 0\n    local paren_stack_string_count_count_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count_count_count = 0\n    local\
    \ paren_stack_string_count_count_count_count_count_index = 0\n    local paren_stack_string_count_count_count_count_count_count\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count_count\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count_count_index\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count_count_count\
    \ = 0\n    local paren_stack_string_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    local paren_stack_", "    local result = {}\n    local paren_stack\
    \ = {'(', ')'}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[1] == '(' then\n                paren_stack[1]\
    \ = ')'\n            elseif paren_stack[2] == '(' then\n                paren_stack[2]\
    \ = ')'\n            else\n                paren_stack[1] = '('\n            end\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[2] ==\
    \ ')' then\n                paren_stack[2] = '('\n            elseif paren_stack[1]\
    \ == ')' then\n                paren_stack[1] = '('\n            else\n      \
    \          paren_stack[2] = ')'\n            end\n        end\n        if paren_stack[1]\
    \ == paren_stack[2] then\n            if paren_stack[1] == '(' then\n        \
    \        result[#result+1] = paren_stack[1]..'('..paren_string[i]..')'\n     \
    \       else\n                result[#result+1] = paren_stack[1]..paren_string[i]\n\
    \            end\n        else\n            result[#result+1] = paren_stack[1]..paren_string[i]\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[1:i]\n            end\n            paren_stack[#paren_stack\
    \ + 1] = 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:]\n    \
    \        end\n            paren_stack[#paren_stack - 1] = 0\n        end\n   \
    \ end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {'('}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            paren_stack[#paren_stack + 1] = paren_string[i]\n        elseif\
    \ paren_stack[#paren_stack] == '(' then\n            if paren_string[i] == ')'\
    \ then\n                result[#result + 1] = paren_stack[#paren_stack]\n    \
    \            -- pop the stack\n                if #paren_stack > 1 then\n    \
    \                paren_stack = paren_stack[1:#paren_stack - 1]\n             \
    \   else\n                    -- we are at the end of the string\n           \
    \         return result\n                end\n            else\n             \
    \   paren_stack[#paren_stack] = paren_string[i]\n            end\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    for i=1,#paren_string,1\
    \ do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack+1]\
    \ = paren_count\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_count == 0 then\n                result[#result+1]\
    \ = paren_string[1:i]\n            else\n                paren_count = paren_count\
    \ - 1\n                if paren_count < 0 then\n                    result[#result+1]\
    \ = paren_string[1:i]\n                else\n                    if paren_stack[#paren_stack]\
    \ == paren_count then\n                        result[#result+1] = paren_string[1:i]\n\
    \                    else\n                        result[#result+1] = paren_string[1:i]\n\
    \                end\n            end\n        elseif paren_string[i] == '{' then\n\
    \            brace_stack[#brace_stack+1] = brace_count\n            brace_count\
    \ = brace_count + 1\n        elseif paren_string[i] == '}' then\n            if\
    \ brace_count == 0 then\n                result[#result+1] = paren_string[1:i]\n\
    \            else\n                brace_count = brace_count - 1\n           \
    \     if brace_count < 0 then\n                    result[#result+1] = paren_string[1:i]\n\
    \                else\n                    if brace_stack[#brace_stack] == brace_count\
    \ then\n                        result[#result+1] = paren_string[1:i]\n      \
    \              else\n                        result[#result+1] = paren_string[1:i]\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "    local paren_stack = {}\n    local result\
    \ = {}\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_stack_index\
    \ = 1\n    local paren_stack_count = 0\n    local paren_stack_open = true\n  \
    \  local paren_stack_close = true\n    local paren_stack_stack_index = 1\n   \
    \ local paren_stack_stack_count = 0\n    local paren_stack_stack_open = true\n\
    \    local paren_stack_stack_close = true\n    local paren_stack_stack_stack_index\
    \ = 1\n    local paren_stack_stack_stack_count = 0\n    local paren_stack_stack_stack_open\
    \ = true\n    local paren_stack_stack_stack_close = true\n    local paren_stack_stack_stack_stack_index\
    \ = 1\n    local paren_stack_stack_stack_stack_count = 0\n    local paren_stack_stack_stack_stack_open\
    \ = true\n    local paren_stack_stack_stack_stack_close = true\n    local paren_stack_stack_stack_stack_stack_index\
    \ = 1\n    local paren_stack_stack_stack_stack_stack_count = 0\n    local paren_stack_stack_stack_stack_stack_open\
    \ = true\n    local paren_stack_stack_stack_stack_stack_close = true\n    local\
    \ paren_stack_stack_stack_stack_stack_stack_index = 1\n    local paren_stack_stack_stack_stack_stack_stack_count\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_stack_open = true\n    local\
    \ paren_stack_stack_stack_stack_stack_stack_close = true\n    local paren_stack_stack_stack_stack_stack_stack_stack_index\
    \ = 1\n    local paren_stack_stack_stack_stack_stack_stack_stack_count = 0\n \
    \   local paren_stack_stack_stack_stack_stack_stack_stack_open = true", "    local\
    \ result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n\
    \        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \           end\n            paren_stack[#paren_stack] = #paren_stack + 1\n  \
    \      elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               paren_stack[#paren_stack] = #paren_stack - 1\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local brace_count = 0\n   \
    \ local brace_stack = {}\n    local brace_count = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n", "    local paren_stack = {}\n    local result = {}\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_stack_index = 1\n    local paren_stack_count\
    \ = 0\n    local paren_stack_open = 0\n    local paren_stack_close = 0\n    local\
    \ paren_stack_stack_index = 1\n    local paren_stack_stack_count = 0\n    local\
    \ paren_stack_stack_open = 0\n    local paren_stack_stack_close = 0\n    local\
    \ paren_stack_stack_stack_index = 1\n    local paren_stack_stack_stack_count =\
    \ 0\n    local paren_stack_stack_stack_open = 0\n    local paren_stack_stack_stack_close\
    \ = 0\n    local paren_stack_stack_stack_stack_index = 1\n    local paren_stack_stack_stack_stack_count\
    \ = 0\n    local paren_stack_stack_stack_stack_open = 0\n    local paren_stack_stack_stack_stack_close\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_index = 1\n    local paren_stack_stack_stack_stack_stack_count\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_open = 0\n    local paren_stack_stack_stack_stack_stack_close\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_stack_index = 1\n    local\
    \ paren_stack_stack_stack_stack_stack_stack_count = 0\n    local paren_stack_stack_stack_stack_stack_stack_open\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_stack_close = 0\n    local\
    \ paren_stack_stack_stack_stack_stack_stack_stack_index = 1\n    local paren_stack_stack_stack_stack_stack_stack_stack_count\
    \ = 0\n    local paren_stack_stack_stack_stack_stack_stack_stack_open = 0", " \
    \   local paren_groups = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count\
    \ = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n\
    \    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local\
    \ paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local\
    \ paren_char_stack = {}\n    local paren_char_count_stack = {}\n    local paren_char_index_stack\
    \ = {}\n    local paren_char_stack = {}\n    local paren_char_count_stack = {}\n\
    \    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local\
    \ paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local\
    \ paren_char_stack = {}\n    local paren_char_count_stack = {}\n    local paren_char_index_stack\
    \ = {}\n    local paren_char_stack = {}\n    local paren_char_count_stack = {}\n\
    \    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local\
    \ paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local\
    \ paren_char_stack = {}\n    local paren_char_count_stack = {}\n    local paren_char_index_stack\
    \ = {}\n    local paren_char_stack = {}\n    local paren_char_count_stack = {}\n\
    \    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local\
    \ paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local\
    \ paren_char_stack = {}\n    local paren_char_count_stack = {}\n    local paren_char_index_stack\
    \ = {}\n    local paren_char_stack = {}\n    ", "    local paren_table = {}\n\
    \    local paren_stack = {}\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0\n    local paren_count\
    \ = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_open\
    \ = 0\n    local paren_close = 0\n    local paren_count = 0\n    local paren_index\
    \ = 1\n    local paren_char = ''\n    local paren_open = 0\n    local paren_close\
    \ = 0\n    local paren_count = 0\n    local paren_index = 1\n    local paren_char\
    \ = ''\n    local paren_open = 0\n    local paren_close = 0", "    local result\
    \ = {}\n    local paren_stack = {}\n    for i=1,#paren_string,2 do\n        if\
    \ paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n\
    \                result[#result+1] = paren_string[i+1:end]\n            end\n\
    \            paren_stack[#paren_stack+1] = 1\n        elseif paren_string[i] ==\
    \ ')' then\n            if paren_stack[#paren_stack] == 1 then\n             \
    \   result[#result+1] = paren_string[i+1:end]\n            end\n            paren_stack[#paren_stack-1]\
    \ = 0\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local paren_stack = {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 1\
    \ do\n        if paren_stack[paren_string[i]] ~= nil then\n            if paren_stack[paren_string[i]]\
    \ == '(' then\n                result[#result + 1] = paren_string[i]\n       \
    \         paren_stack[paren_string[i]] = nil\n            elseif paren_stack[paren_string[i]]\
    \ == ')' then\n                paren_stack[paren_string[i]] = nil\n          \
    \  elseif paren_stack[paren_string[i]] == '{' then\n                paren_stack[paren_string[i]]\
    \ = nil\n            elseif paren_stack[paren_string[i]] == '}' then\n       \
    \         paren_stack[paren_string[i]] = nil\n            end\n        end\n \
    \   end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n                break\n            else\n  \
    \              paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n   \
    \         end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               break\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local result = {}\n    local paren_stack = {}\n  \
    \  for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n  \
    \          if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1:end]\n                break\n            else\n  \
    \              paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n   \
    \         end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result + 1] = paren_string[i + 1:end]\n \
    \               break\n            else\n                paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n   \
    \ return result\nend", "    local paren_stack = {}\n    local result = {}\n  \
    \  for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n  \
    \          if paren_stack[#paren_stack] == 0 then\n                result[#result\
    \ + 1] = paren_string[i + 1]\n            end\n            paren_stack[#paren_stack]\
    \ = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n           \
    \ if paren_stack[#paren_stack] == 1 then\n                result[#result + 1]\
    \ = paren_string[i + 1]\n                paren_stack[#paren_stack] = #paren_stack\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local\
    \ paren_index = 0\n    local paren_type = ''\n    local paren_open = true\n  \
    \  local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local paren_count = 0\n    local paren_index = 0\n    local paren_type\
    \ = ''\n    local paren_open = true\n    local paren_close = true\n    local paren_count\
    \ = 0\n    local paren_index = 0\n    local paren_type = ''\n    local paren_open\
    \ = true\n    local paren_close = true\n    local paren_count = 0\n    local paren_index\
    \ = 0\n    local paren_type = ''\n    local paren_open = true\n    local paren_close\
    \ = true\n    local", "    local result = {}\n    local paren_stack = {}\n   \
    \ local brace_stack = {}\n    for i=1,#paren_string,1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            else\n         \
    \       brace_stack[#brace_stack+1] = paren_string[i+1:end]\n            end\n\
    \            paren_stack[#paren_stack+1] = paren_string[i]\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            else\n         \
    \       brace_stack[#brace_stack+1] = paren_string[i+1:end]\n            end\n\
    \            paren_stack[#paren_stack-1] = paren_string[i]\n        elseif paren_string[i]\
    \ == '{' then\n            if brace_stack[#brace_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            else\n         \
    \       brace_stack[#brace_stack+1] = paren_string[i+1:end]\n            end\n\
    \            brace_stack[#brace_stack+1] = paren_string[i]\n        elseif paren_string[i]\
    \ == '}' then\n            if brace_stack[#brace_stack] == 0 then\n          \
    \      result[#result+1] = paren_string[i+1:end]\n            else\n         \
    \       brace_stack[#brace_stack-1] = paren_string[i+1:end]\n            end\n\
    \            brace_stack[#brace_stack-1] = paren_string[i]\n        end\n    end\n\
    \    return result\nend", "    local paren_stack = {}\n    local paren_count =\
    \ 0\n    local result = {}\n    for i=1,#paren_string,1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack]\
    \ = 0\n            end\n            paren_count = paren_count + 1\n        else\n\
    \            if paren_stack[#paren_stack] == 1 then\n                if paren_count\
    \ == 0 then\n                    result[#result+1] = paren_string[i]\n       \
    \         else\n                    result[#result+1] = paren_string[i]\n    \
    \            end\n            end\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local paren_stack = {'(', ')'}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[1]\
    \ == '(' then\n                paren_stack[1] = ')'\n            elseif paren_stack[2]\
    \ == '(' then\n                paren_stack[2] = ')'\n            elseif paren_stack[1]\
    \ == ')' then\n                result[#result + 1] = paren_stack[1] .. paren_stack[2]\n\
    \                paren_stack[1] = '('\n                paren_stack[2] = '('\n\
    \            else\n                paren_stack[1] = '('\n            end\n   \
    \     elseif paren_string[i] == ')' then\n            if paren_stack[1] == '('\
    \ then\n                result[#result + 1] = paren_stack[1] .. paren_stack[2]\n\
    \                paren_stack[1] = ')'\n                paren_stack[2] = ')'\n\
    \            elseif paren_stack[2] == '(' then\n                result[#result\
    \ + 1] = paren_stack[1] .. paren_stack[2]\n                paren_stack[1] = ')'\n\
    \                paren_stack[2] = ')'\n            elseif paren_stack[1] == ')'\
    \ then\n                result[#result + 1] = paren_stack[1] .. paren_stack[2]\n\
    \                paren_stack[1] = '('\n                paren_stack[2] = '('\n\
    \            else\n                paren_stack[1] = ')'\n            end\n   \
    \     end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {'(', ')', '{', '}'}\n    for i = 1, #paren_string, 2 do\n   \
    \     if paren_string[i] == paren_stack[1] then\n            if paren_stack[2]\
    \ == '(' then\n                result[#result + 1] = paren_stack[2]\n        \
    \        paren_stack[2] = ')'\n            elseif paren_stack[2] == '{' then\n\
    \                result[#result + 1] = paren_stack[2]\n                paren_stack[2]\
    \ = '}'\n            elseif paren_stack[2] == '[' then\n                result[#result\
    \ + 1] = paren_stack[2]\n                paren_stack[2] = ']'\n            end\n\
    \        elseif paren_stack[1] == paren_stack[2] then\n            if paren_stack[1]\
    \ == '(' then\n                result[#result + 1] = paren_stack[1]\n        \
    \        paren_stack[1] = ')'\n            elseif paren_stack[1] == '{' then\n\
    \                result[#result + 1] = paren_stack[1]\n                paren_stack[1]\
    \ = '}'\n            elseif paren_stack[1] == '[' then\n                result[#result\
    \ + 1] = paren_stack[1]\n                paren_stack[1] = ']'\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_stack[#paren_stack] == 0 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n            end\n      \
    \      paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i]\
    \ == ')' then\n            if paren_stack[#paren_stack] == 1 then\n          \
    \      result[#result + 1] = paren_string[i + 1:end]\n                paren_stack[#paren_stack]\
    \ = #paren_stack - 1\n            else\n                print('Error: Unbalanced\
    \ parenthesis')\n            end\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local paren_stack = {'('}\n    for i = 1, #paren_string,\
    \ 1 do\n        if paren_string[i] == '(' then\n            paren_stack = {'('}\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == '(' then\n                result[#result + 1] = paren_stack\n           \
    \     paren_stack = {'('}\n            else\n                paren_stack = {'('}\n\
    \            end\n        end\n    end\n    if paren_stack[#paren_stack] == '('\
    \ then\n        result[#result + 1] = paren_stack\n    end\n    return result\n\
    end", "    local result = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i]\
    \ == '(' then\n            if paren_string[i+1] == ')' then\n                result[#result+1]\
    \ = paren_string[i+2] .. ')'\n                i = i + 2\n            elseif paren_string[i+1]\
    \ == '(' then\n                result[#result+1] = paren_string[i+2] .. ')'\n\
    \                i = i + 2\n            else\n                result[#result+1]\
    \ = paren_string[i+1]\n                i = i + 1\n        else\n            result[#result+1]\
    \ = paren_string[i]\n            i = i + 1\n    end\n    return result\nend",
  "    local paren_stack = {}\n    local result = {}\n    for i=1,#paren_string,1\
    \ do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack]\
    \ == 0 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \       end\n            paren_stack[#paren_stack] = #paren_stack + 1\n      \
    \  elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack]\
    \ == 1 then\n                result[#result+1] = paren_string[i+1:end]\n     \
    \           paren_stack[#paren_stack] = #paren_stack - 1\n            end\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ paren_stack = {}\n    local paren_count = 0\n    local paren_index = 0\n   \
    \ local brace_count = 0\n    local brace_index = 0\n    local brace_stack = {}\n\
    \    local brace_count = 0\n    local brace_index = 0\n    local brace_stack =\
    \ {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_index = 0\n    local brace_stack\
    \ = {}", "    local result = {}\n    local paren_stack = {}\n    local paren_count\
    \ = 0\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n    local brace_stack = {}\n    local brace_count\
    \ = 0\n    local brace_stack = {}\n    local brace_count = 0\n    local brace_stack\
    \ = {}\n    local brace_count = 0\n", "    local result = {}\n    local paren_stack\
    \ = {'(', ')', '{', '}'}\n    local paren_count = 0\n    local i = 1\n    while\
    \ i <= #paren_string do\n        if paren_string[i] == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif paren_string[i] == ')' then\n            paren_count\
    \ = paren_count - 1\n        elseif paren_string[i] == '{' then\n            paren_stack[#paren_stack\
    \ + 1] = '{'\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == '}' then\n            paren_stack[#paren_stack - 1] = '}'\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count < 0 then\n          \
    \  error('Unbalanced braces')\n        end\n        if paren_count == 0 then\n\
    \            if #paren_stack > 1 then\n                error('Unbalanced braces')\n\
    \            end\n            local result[#result + 1] = paren_stack[1]\n   \
    \         local paren_stack = {'(', ')', '{', '}'}\n        end\n        i = i\
    \ + 1\n    end\n    return result\nend", "    local result = {}\n    local paren_stack\
    \ = {}\n    local paren_count = 0\n    for i = 1, #paren_string, 1 do\n      \
    \  if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] ==\
    \ 0 then\n                paren_stack[#paren_stack] = 1\n            else\n  \
    \              paren_stack[#paren_stack] = 0\n            end\n            paren_count\
    \ = paren_count + 1\n        else\n            if paren_stack[#paren_stack] ==\
    \ 1 then\n                if paren_count == 0 then\n                    result[#result\
    \ + 1] = paren_string[i]\n                else\n                    result[#result\
    \ + 1] = paren_string[i]\n                end\n            end\n            paren_stack[#paren_stack]\
    \ = paren_stack[#paren_stack] + 1\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local paren_stack = {'(', ')', '{', '}'}\n    local\
    \ paren_count = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i]\
    \ == '(' then\n            paren_count = paren_count + 1\n        elseif paren_string[i]\
    \ == ')' then\n            paren_count = paren_count - 1\n        end\n      \
    \  if paren_count < 0 then\n            error('Mismatched parentheses')\n    \
    \    end\n        if paren_count == 0 then\n            if paren_stack[#paren_stack]\
    \ == paren_string[i] then\n                if #result == 0 then\n            \
    \        result = {paren_string[i]}\n                else\n                  \
    \  result[#result] = paren_string[i]\n                end\n                if\
    \ #result == #paren_stack then\n                    result = result\n        \
    \        end\n                if paren_stack[#paren_stack] == '(' then\n     \
    \               paren_stack = {'(', ')', '{', '}'}\n                elseif paren_stack[#paren_stack]\
    \ == ')' then\n                    paren_stack = {'(', ')', '{', '}'}\n      \
    \          elseif paren_stack[#paren_stack] == '{' then\n                    paren_stack\
    \ = {'(', ')', '{', '}'}\n                elseif paren_stack[#paren_stack] ==\
    \ '}' then\n                    paren_stack = {'(', ')', '{', '}'}\n         \
    \       end\n            end\n        end\n    end\n    return result\nend", " \
    \   local paren_stack = {}\n    local result = {}\n    for i = 1, #paren_string,\
    \ 2 do\n        if paren_string[i] == '(' then\n            if not paren_stack[#paren_stack]\
    \ then\n                paren_stack[#paren_stack] = 1\n            else\n    \
    \            paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n     \
    \       end\n        else\n            if paren_stack[#paren_stack] > 0 then\n\
    \                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n \
    \           end\n        end\n        if paren_stack[#paren_stack] == 0 then\n\
    \            table.insert(result, paren_string[i+1:i+2])\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    local paren_stack = {'(',\
    \ ')'}\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '('\
    \ then\n            if paren_stack[1] == '(' then\n                paren_stack[1]\
    \ = ')'\n            elseif paren_stack[2] == '(' then\n                paren_stack[2]\
    \ = ')'\n            else\n                paren_stack[1] = '('\n            end\n\
    \        elseif paren_string[i] == ')' then\n            if paren_stack[1] ==\
    \ ')' then\n                paren_stack[1] = '('\n            elseif paren_stack[2]\
    \ == ')' then\n                paren_stack[2] = '('\n            else\n      \
    \          paren_stack[1] = ')'\n            end\n        end\n        if paren_stack[1]\
    \ == paren_stack[2] then\n            if paren_stack[1] == '(' then\n        \
    \        result[#result+1] = paren_stack[1]\n            else\n              \
    \  result[#result+1] = paren_stack[1]\n            end\n        end\n    end\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
