{
  "language": "lua",
  "name": "HumanEval_146_specialFilter",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n    end\n    for j = 1, #nums do\n        if nums[j] > 10 and nums[j] % 2 == 1 and nums[j] % 10 == nums[j] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xo2f06c.lua:28: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_xo2f06c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 0 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 0 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 0 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 0 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 0 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqizla94.lua:51: expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpdqizla94.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local result = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            result = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt25o_gc.lua:23: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqt25o_gc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0\n    for i = 1, #nums, 2 do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg61s9pgm.lua:34: expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpg61s9pgm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local result = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            result = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt25o_gc.lua:23: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqt25o_gc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local result = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            result = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt25o_gc.lua:23: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqt25o_gc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local result = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num:1:2 == num:2:1 then\n            result = result + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp4jxq7odh.lua:12: <name> expected near '1'\n",
      "stdout": "",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0\n    for i = 1, #nums, 2 do\n        for j = i + 1, #nums, 2 do\n            if nums[i] > 10 and nums[i] % 2 == 1 and nums[j] > 10 and nums[j] % 2 == 1 then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ayhi_6r.lua:24: expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp4ayhi_6r.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums, 2 do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy4aadpi.lua:37: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpzy4aadpi.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 1, 1, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2he3a269.lua:26: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2he3a269.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n    end\n    for j = 1, #nums do\n        if nums[j] > 10 and nums[j] % 2 == 1 and nums[j] % 10 == 3 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwofstak0.lua:28: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwofstak0.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjccc1ja4.lua:36: expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjccc1ja4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz_r59da.lua:22: expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpvz_r59da.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjccc1ja4.lua:36: expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjccc1ja4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 1, 1, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81zmv8lu.lua:23: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp81zmv8lu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdfvxms8.lua:22: expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpwdfvxms8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjccc1ja4.lua:36: expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjccc1ja4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp07kmqu0q.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 0, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 3 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 5 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 7 then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 9 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjccc1ja4.lua:36: expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjccc1ja4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes a table of numbers as input and returns \n-- the number of elements in the table that are greater than 10 and both \n-- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter([15, -73, 14, -15])\n-- 1 \n-- >>> specialFilter([33, -2, -3, 45, 21, 109])\n-- 2\nlocal function specialFilter(nums)\n    local i, j, count = 0, 1, 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == nums[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9kw4lyi.lua:26: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpb9kw4lyi.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907497
    }
  ]
}