name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
  -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local prime_list = {}\n    for i=1,n do\n        if is_prime(i)\
    \ then\n            prime_list[i] = true\n        end\n    end\n    return prime_list[n]\n\
    end", "    local t = {}\n    for i = 1, n do\n        if is_prime(i) then\n  \
    \          table.insert(t, i)\n        end\n        table.insert(t, prime_fib(i-1)\
    \ + prime_fib(i-2))\n    end\n    return table.concat(t, \"\")\nend", "    if\
    \ n == 1 then return 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n-1)\
    \ + prime_fib(n-2)\nend", "    if n == 1 then return 2\n    elseif n == 2 then\
    \ return 3\n    else\n        local a, b, c, d, e, f, g, h, i, j, k, l, m, n,\
    \ o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N,\
    \ O, P, Q, R, S, T, U, V, W, X, Y, Z, a1, b1, c1, d1, e1, f1, g1, h1, i1, j1,\
    \ k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, A1, B1, C1,\
    \ D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1,\
    \ W1, X1, Y1, Z1, a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2,\
    \ p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, A2, B2, C2, D2, E2, F2, G2, H2,\
    \ I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, a3,\
    \ b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3,\
    \ u3, v3, w3, x3,", "    local prime_fib_table = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    if n ==\
    \ 1 then return 2\n    if n == 2 then return 3\n    if n < 1 then return nil\n\
    \    if n < 2 then return prime_fib_table[n]\n    if n < 3 then return prime_fib_table[n]\n\
    \    if n < 4 then return prime_fib_table[n]\n    if n < 5 then return prime",
  "    if n == 1 then return 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n-1)\
    \ + prime_fib(n-2)\nend", "    if n == 1 then return 2\n    elseif n == 2 then\
    \ return 3\n    else\n        local a, b, c, d, e, f, g, h, i, j, k, l, m, n1,\
    \ n2, n3, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L,\
    \ M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a1, b1, c1, d1, e1, f1, g1, h1, i1,\
    \ j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a2, b2,\
    \ c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2,\
    \ v2, w2, x2, y2, z2, a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3,\
    \ o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a4, b4, c4, d4, e4, f4, g4,\
    \ h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4,\
    \ a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5,\
    \ t5, u5, v5, w", "    if n == 1 then return 2 end\n    if n == 2 then return\
    \ 3 end\n    return prime_fib(n - 1) + prime_fib(n - 2)\nend", "    local prime,\
    \ i, j\n    prime = 2\n    for i = 1, n do\n        for j = 1, n do\n        \
    \    if prime_check(prime) and prime_check(prime + i) and prime_check(prime +\
    \ i + j) then\n                prime = prime + i + j\n                break\n\
    \            end\n        end\n    end\n    return prime\nend", "    local t =\
    \ {}\n    for i=1,n do\n        if math.mod(i,2) == 0 then\n            table.insert(t,i)\n\
    \        end\n    end\n    return table.concat(t)\nend", "    if n == 1 then return\
    \ 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\nend", "    if n == 1 then return 2 end\n    if n == 2 then return 3 end\n\
    \    return prime_fib(n-1) + prime_fib(n-2)\nend", "    if n == 1 then return\
    \ 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n-1) + prime_fib(n-2)\n\
    end", '    local n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
    n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
    n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46,
    n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62,
    n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78,
    n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94,
    n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108,
    n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121,
    n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134,
    n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147,
    n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160,
    n161, n162, n163, n164, n165, n166, n167, n168, n169, n170,', "    if n == 1 then\
    \ return 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\nend", "    if n == 1 then return 2 end\n    if n == 2 then\
    \ return 3 end\n    if n == 3 then return 5 end\n    return prime_fib(n-1) + prime_fib(n-2)\n\
    end", "    if n == 1 then return 2 end\n    return prime_fib(n-1) + prime_fib(n-2)\n\
    end", "    local t = {}\n    for i=1,n do\n        if is_prime(i) then\n     \
    \       table.insert(t, i)\n        end\n    end\n    return table.concat(t, \"\
    \ \")\nend", "    if n == 1 then return 2 end\n    if n == 2 then return 3 end\n\
    \    return prime_fib(n-1) + prime_fib(n-2)\nend", "    if n == 1 then return\
    \ 2 end\n    if n == 2 then return 3 end\n    return prime_fib(n-1) + prime_fib(n-2)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
