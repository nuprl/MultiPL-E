{
  "language": "lua",
  "name": "HumanEval_161_solve",
  "results": [
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp50tdh91c.lua:31: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1ef3g6je.lua:31: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= \"\" then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpdont3w7m.lua:31: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = string.gsub(result, s[i], string.upper(s[i]))\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpubc5zr0g.lua:27: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8j5a2dql.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i,j\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpysn2b_b6.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, c, l, r\n    i = 1\n    j = 1\n    k = 1\n    c = \"\"\n    l = 0\n    r = 0\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                if s[i] ~= \"#\" then\n                    c = c .. string.upper(s[i])\n                else\n                    c = c .. string.lower(s[i])\n                end\n            else\n                c = c .. s[i]\n            end\n        else\n            c = c .. s[i]\n        end\n        i = i + 1\n    end\n    while j <= #c do\n        if c[j] ~= nil then\n            if c[j] ~= \" \" then\n                if c[j] ~= \"#\" then\n                    c = c .. string.lower(c[j])\n                else\n                    c = c .. string.upper(c[j])\n                end\n            else\n                c = c .. c[j]\n            end\n        else\n            c = c .. c[j]\n        end\n        j = j + 1\n    end\n    while k <= #c do\n        if c[k] ~= nil then\n            if c[k] ~= \" \" then\n                if c[k] ~= \"#\" then\n                    c = c .. string.upper(c[k])\n                else\n                    c = c .. string.lower(c[k])\n                end\n            else\n                c = c .. c[k]\n            end\n        else\n            c = c .. c[k]\n        end\n        k = k + 1\n    end\n    if l == 0 and r == 0 then\n        return c\n    else\n        return \"\"\n    end\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpdexk8m3u.lua:75: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxnaxxtlq.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            c = s[i+1]\n            s[i+1] = c\n            s[i] = c\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6olufppm.lua:24: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return s\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpefvsm7z3.lua:23: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= \" \" then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], s[i])\n            end\n        end\n    end\n    return s\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1xpqj5fd.lua:26: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpkpnl_9ez.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, l = 1, #s\n    local result = \"\"\n    while i <= l do\n        if s[i] ~= nil then\n            result = result .. string.char(toupper(s[i]) .. tolower(s[i]))\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpblkszhju.lua:27: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpcd3kcwn2.lua:28: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. \"Z\" .. string.gsub(s, \"[A-Z]\", \"a\") .. \"z\"\n    else\n        return string.gsub(s, \"[^a-zA-Z]\", \"\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpdpd6iwg4.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpny4wt455.lua:32: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp7y4cuuss.lua:31: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz67hutwc.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpz67hutwc.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = string.gsub(result, s[i], string.upper(s[i]))\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqomhnxw.lua:21: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpyqomhnxw.lua:21: in local 'candidate'\n\t/tmp/tmpyqomhnxw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = result .. string.char(toupper(s[i]))\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv__zkj9x.lua:22: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpv__zkj9x.lua:22: in local 'candidate'\n\t/tmp/tmpv__zkj9x.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. \"Z\" .. string.gsub(s, \"[A-Z]\", \"a\") .. \"z\"\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. \"z\" .. string.gsub(s, \"[A-Z]\", \"a\") .. \"Z\"\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvpg517vj.lua:20: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6gsm6v2.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpc6gsm6v2.lua:25: in local 'candidate'\n\t/tmp/tmpc6gsm6v2.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48qmdnxt.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp48qmdnxt.lua:26: in local 'candidate'\n\t/tmp/tmp48qmdnxt.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7ms78u54.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp7ms78u54.lua:26: in local 'solve'\n\t/tmp/tmp7ms78u54.lua:32: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                res = res .. string.upper(s[i])\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                res = res .. string.lower(s[i])\n            else\n                res = res .. s[i]\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxdzvkh4.lua:27: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpdxdzvkh4.lua:27: in local 'candidate'\n\t/tmp/tmpdxdzvkh4.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k2_6_sl.lua:27: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp2k2_6_sl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = string.gsub(result, s[i], string.upper(s[i]))\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqomhnxw.lua:21: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpyqomhnxw.lua:21: in local 'candidate'\n\t/tmp/tmpyqomhnxw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = string.gsub(result, s[i], string.upper(s[i]))\n        else\n            result = string.gsub(result, s[i], string.lower(s[i]))\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpff4yx8em.lua:21: bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpff4yx8em.lua:21: in local 'candidate'\n\t/tmp/tmpff4yx8em.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c2_ihxy.lua:27: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp2c2_ihxy.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l, r, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            r = s[i] .. s[i+1]\n            for j = i+2, #s, 2 do\n                if s[j] ~= s[j+1] then\n                    c = s[j] .. s[j+1]\n                    break\n                end\n            end\n            if c ~= \"\" then\n                for k = i+2, #s, 2 do\n                    if s[k] ~= s[k+1] then\n                        l = s[k] .. s[k+1]\n                        break\n                    end\n                end\n            end\n            if l ~= \"\" then\n                s = r .. l .. c\n                i = i + 2\n            else\n                s = r .. c\n                i = i + 2\n            end\n        else\n            s = s[i] .. s[i+1]\n            i = i + 2\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqjp2ks8d.lua:40: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqjp2ks8d.lua:40: in local 'solve'\n\t/tmp/tmpqjp2ks8d.lua:46: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0t25478.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw0t25478.lua:27: in local 'candidate'\n\t/tmp/tmpw0t25478.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwqd3ft8f.lua:28: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nf4u60o.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp9nf4u60o.lua:25: in local 'candidate'\n\t/tmp/tmp9nf4u60o.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            j = i\n            break\n        end\n    end\n    if j == #s then\n        return s\n    end\n    for i = j, 1, -1 do\n        if s[i] ~= s[j] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[j], string.lower(s[j]))\n            break\n        end\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpou6s168l.lua:24: bad 'for' initial value (number expected, got nil)\nstack traceback:\n\t/tmp/tmpou6s168l.lua:24: in local 'candidate'\n\t/tmp/tmpou6s168l.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrblqvib.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpnrblqvib.lua:26: in local 'candidate'\n\t/tmp/tmpnrblqvib.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0t25478.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw0t25478.lua:27: in local 'candidate'\n\t/tmp/tmpw0t25478.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = t[s[i]] or \"\"\n            t[s[i]] = t[s[i]] .. s[i]\n        else\n            t[s[i]] = s[i]\n        end\n    end\n    return t[1] .. t[#t]\nend\n*/\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpandv17r7.lua:25: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp68wcb27s.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp68wcb27s.lua:25: in local 'solve'\n\t/tmp/tmp68wcb27s.lua:31: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match('[a-zA-Z]') then\n        return string.gsub(s, '[a-z]', 'A') .. string.gsub(s, '[A-Z]', 'a')\n    else\n        return string.gsub(s, '[a-z]', 'A') .. string.gsub(s, '[A-Z]', 'a')\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2ghqn0k.lua:24: expected: \"aSdF\"\nactual: \"AADAasaf\"\nstack traceback:\n\t/tmp/tmpr2ghqn0k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr0v2224.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphr0v2224.lua:25: in local 'candidate'\n\t/tmp/tmphr0v2224.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmphkxz5zyn.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphkxz5zyn.lua:25: in local 'solve'\n\t/tmp/tmphkxz5zyn.lua:31: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s[i+1] = string.upper(s[i+1])\n            else\n                s[i+1] = string.lower(s[i+1])\n            end\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzi6ai4g4.lua:26: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint solve(\"1234\")\nprint solve(\"ab\")\nprint solve(\"#a@C\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo42j861w.lua:26: syntax error near 'solve'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrblqvib.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpnrblqvib.lua:26: in local 'candidate'\n\t/tmp/tmpnrblqvib.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            else\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm8e4k5o.lua:25: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmprm8e4k5o.lua:25: in local 'candidate'\n\t/tmp/tmprm8e4k5o.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k,v in pairs(t) do\n        s = string.gsub(s,k,v)\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpirjwkjkn.lua:28: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l\n    i = 1\n    j = 1\n    k = 1\n    l = 1\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                s[i] = string.char(s[i] - 32)\n            else\n                s[i] = string.char(s[i] + 32)\n            end\n        else\n            s[i] = string.char(s[i])\n        end\n        i = i + 1\n    end\n    while j <= #s do\n        if s[j] ~= nil then\n            if s[j] >= 'a' and s[j] <= 'z' then\n                s[j] = string.char(s[j] - 32)\n            else\n                s[j] = string.char(s[j] + 32)\n            end\n        else\n            s[j] = string.char(s[j])\n        end\n        j = j + 1\n    end\n    while k <= #s do\n        if s[k] ~= nil then\n            if s[k] >= 'a' and s[k] <= 'z' then\n                s[k] = string.char(s[k] - 32)\n            else\n                s[k] = string.char(s[k] + 32)\n            end\n        else\n            s[k] = string.char(s[k])\n        end\n        k = k + 1\n    end\n    while l <= #s do\n        if s[l] ~= nil then\n            if s[l] >= 'a' and s[l] <= 'z' then\n                s[l] = string.char(s[l] - 32)\n            else\n                s[l] = string.char(s[l] + 32)\n            end\n        else\n            s[l] = string.char(s[l])\n        end\n        l = l + 1\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv40pch0r.lua:27: bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpv40pch0r.lua:27: in local 'candidate'\n\t/tmp/tmpv40pch0r.lua:74: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8pvk3y6.lua:32: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpb8pvk3y6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = result .. string.char(toupper(s[i]))\n        else\n            result = result .. string.char(tolower(s[i]))\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbm3hxyur.lua:22: attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpbm3hxyur.lua:22: in local 'candidate'\n\t/tmp/tmpbm3hxyur.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= \" \" then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\nprint(solve(\" \"))\nprint(solve(\"#\"))\nprint(solve(\"#a\"))\nprint(solve(\"#a#\"))\nprint(solve(\"#a#b\"))\nprint(solve(\"#a#b#\"))\nprint(solve(\"#a#b#c\"))\nprint(solve(\"#a#b#c#\"))\nprint(solve(\"#a#b#c#d\"))\nprint(solve(\"#a#b#c#d#\"))\nprint(solve(\"#a#b#c#d#e\"))\nprint(solve(\"#a#b#c#d#e#\"))\nprint(solve(\"#a#b#c#d#e#f\"))\nprint(solve(\"#a#b#c#d#e#f#\"))\nprint(solve(\"#a#b#c#d#e#f#g\"))\nprint(solve(\"#a#b#c#d#e#f#g#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#j\"))\nprint(solve(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpleljjm5o.lua:51: unfinished string near '\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j, k\n    i = 1\n    j = 1\n    k = 1\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                if s[i] ~= \"a\" then\n                    s[j] = string.upper(s[i])\n                else\n                    s[j] = string.lower(s[i])\n                end\n                j = j + 1\n            else\n                s[k] = s[i]\n                k = k + 1\n            end\n        else\n            s[k] = s[i]\n            k = k + 1\n        end\n        i = i + 1\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojrl1jb.lua:33: attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmp5ojrl1jb.lua:33: in local 'candidate'\n\t/tmp/tmp5ojrl1jb.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s\n    local i, j = 1, #s\n    local result = \"\"\n    while i < j do\n        if s[i] ~= \"^@\" and s[i] ~= \"^#\" then\n            result = result .. string.upper(s[i])\n        else\n            result = result .. string.lower(s[i])\n        i = i + 1\n    end\n    return result\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu4n8zen3.lua:15: 'end' expected (to close 'if' at line 14) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint(solve(\"\"))\nprint\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4e0ksw_9.lua:87: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#\"))\nprint(solve(\"\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#a@C\"))\nprint(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjwnbv1lw.lua:64: ')' expected (to close '(' at line 63) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72x8c3r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp72x8c3r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz67hutwc.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpz67hutwc.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cwpn8um.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0cwpn8um.lua:25: in local 'candidate'\n\t/tmp/tmp0cwpn8um.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1s_jemp.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpb1s_jemp.lua:25: in local 'candidate'\n\t/tmp/tmpb1s_jemp.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \"a\" and s[i] ~= \"A\" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75vkiwkf.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp75vkiwkf.lua:25: in local 'candidate'\n\t/tmp/tmp75vkiwkf.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0sf_xbi.lua:32: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpr0sf_xbi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48qmdnxt.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp48qmdnxt.lua:26: in local 'candidate'\n\t/tmp/tmp48qmdnxt.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0t25478.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw0t25478.lua:27: in local 'candidate'\n\t/tmp/tmpw0t25478.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            k = i\n            for j = i + 2, #s, 2 do\n                if s[j] ~= s[j+1] then\n                    break\n            end\n            if j ~= #s then\n                s = string.gsub(s, s[k], string.upper(s[k]))\n                s = string.gsub(s, s[k], string.lower(s[k]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt0gr6euv.lua:48: 'end' expected (to close 'function' at line 13) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    return t[s[1]] .. t[s[#s]]\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp62b1dx7a.lua:22: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#\"))\nprint(solve(\"#a\"))\nprint(solve(\"#a#\"))\nprint(solve(\"#a#b\"))\nprint(solve(\"#a#b#\"))\nprint(solve(\"#a#b#c\"))\nprint(solve(\"#a#b#c#\"))\nprint(solve(\"#a#b#c#d\"))\nprint(solve(\"#a#b#c#d#\"))\nprint(solve(\"#a#b#c#d#e\"))\nprint(solve(\"#a#b#c#d#e#\"))\nprint(solve(\"#a#b#c#d#e#f\"))\nprint(solve(\"#a#b#c#d#e#f#\"))\nprint(solve(\"#a#b#c#d#e#f#g\"))\nprint(solve(\"#a#b#c#d#e#f#g#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#j\"))\nprint(solve(\"#a#b#c#d#e#f\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbf_nhgdh.lua:49: unfinished string near '\"#a#b#c#d#e#f'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn58_sp9.lua:25: expected: \"aSdF\"\nactual: \"A$2$1f\"\nstack traceback:\n\t/tmp/tmpfn58_sp9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72x8c3r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp72x8c3r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyd20x5y.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpzyd20x5y.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= \" \" then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnxxrf03.lua:34: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpbnxxrf03.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz67hutwc.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpz67hutwc.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqad_6x7q.lua:30: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpqad_6x7q.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, l = 1, #s\n    local res = \"\"\n    while i <= l do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qird_w5.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp4qird_w5.lua:25: in local 'candidate'\n\t/tmp/tmp4qird_w5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    return string.gsub(s, t)\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxk5m2tk.lua:30: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmprxk5m2tk.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k,v in pairs(t) do\n        s = string.gsub(s,k,v)\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14n1q89a.lua:36: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp14n1q89a.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = t[s[i]] or \"\"\n            t[s[i]] = string.upper(t[s[i]])\n        else\n            t[s[i]] = string.upper(s[i])\n        end\n    end\n    return t[1] .. \" \" .. t[2] .. \" \" .. t[3] .. \" \" .. t[4]\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6hyr80dj.lua:25: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr0v2224.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphr0v2224.lua:25: in local 'candidate'\n\t/tmp/tmphr0v2224.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    return t[s[1]] .. t[s[#s]]\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxl2iepvu.lua:22: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0sf_xbi.lua:32: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpr0sf_xbi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= \" \" then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnxxrf03.lua:34: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpbnxxrf03.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    return t[s[1]]\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1iyubv1o.lua:22: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i,j,k\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s:sub(i,i) .. s[i] .. s:sub(i+1)\n            else\n                s:sub(i+1,i+1) .. s[i] .. s:sub(i,i)\n            end\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp43pmeuq0.lua:18: unexpected symbol near '..'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0t25478.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw0t25478.lua:27: in local 'candidate'\n\t/tmp/tmpw0t25478.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            else\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9512mcvy.lua:25: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp9512mcvy.lua:25: in local 'candidate'\n\t/tmp/tmp9512mcvy.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= \"A\" and s[i] <= \"Z\" then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvve7h9tr.lua:25: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpvve7h9tr.lua:25: in local 'candidate'\n\t/tmp/tmpvve7h9tr.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= \"A\" and s[i] <= \"Z\" then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx6hv590g.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpx6hv590g.lua:27: in local 'solve'\n\t/tmp/tmpx6hv590g.lua:33: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87ysa8r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp87ysa8r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwqd3ft8f.lua:28: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = t[s[i]] or \"\"\n            t[s[i]] = t[s[i]] .. s[i]\n        else\n            t[s[i]] = s[i]\n        end\n    end\n    return t[1] .. t[#t]\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o3a8l83.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmp_o3a8l83.lua:20: in local 'candidate'\n\t/tmp/tmp_o3a8l83.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72x8c3r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp72x8c3r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            else\n                result = string.gsub(result, s[i], s[i])\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0t25478.lua:27: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpw0t25478.lua:27: in local 'candidate'\n\t/tmp/tmpw0t25478.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr0v2224.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphr0v2224.lua:25: in local 'candidate'\n\t/tmp/tmphr0v2224.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9sbxerli.lua:28: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp68wcb27s.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp68wcb27s.lua:25: in local 'solve'\n\t/tmp/tmp68wcb27s.lua:31: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = result .. string.char(toupper(s[i])) .. string.char(tolower(s[i]))\n        else\n            result = result .. string.char(s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsncyru1.lua:21: bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpzsncyru1.lua:21: in local 'candidate'\n\t/tmp/tmpzsncyru1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l, r, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8fnfksp.lua:31: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8fnfksp.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    return string.gsub(s, t)\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpp6ar2iw5.lua:25: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$1$2\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjc0d9kp4.lua:20: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l\n    i = 1\n    j = 1\n    k = 1\n    l = 1\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                s[i] = s[i] - 32\n            else\n                s[i] = s[i] + 32\n            end\n        else\n            s[i] = s[i]\n        end\n        i = i + 1\n    end\n    while j <= #s do\n        if s[j] ~= nil then\n            if s[j] >= 'A' and s[j] <= 'Z' then\n                s[j] = s[j] + 32\n            else\n                s[j] = s[j] - 32\n            end\n        else\n            s[j] = s[j]\n        end\n        j = j + 1\n    end\n    while k <= #s do\n        if s[k] ~= nil then\n            if s[k] >= 'a' and s[k] <= 'z' then\n                s[k] = s[k] + 32\n            else\n                s[k] = s[k] - 32\n            end\n        else\n            s[k] = s[k]\n        end\n        k = k + 1\n    end\n    while l <= #s do\n        if s[l] ~= nil then\n            if s[l] >= 'A' and s[l] <= 'Z' then\n                s[l] = s[l] - 32\n            else\n                s[l] = s[l] + 32\n            end\n        else\n            s[l] = s[l]\n        end\n        l = l + 1\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ie8sd6z.lua:27: attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmp8ie8sd6z.lua:27: in local 'candidate'\n\t/tmp/tmp8ie8sd6z.lua:74: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    return t.values()\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3gkssxhp.lua:22: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87ysa8r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp87ysa8r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay6scey7.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpay6scey7.lua:25: in local 'candidate'\n\t/tmp/tmpay6scey7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    return t[s[1]]\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1iyubv1o.lua:22: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, c, l, r\n    l = 0\n    r = len(s) - 1\n    for i = 1, r do\n        if s[i] ~= nil then\n            c = s[i]\n            if c ~= \"A\" and c ~= \"a\" and c ~= \"B\" and c ~= \"b\" and c ~= \"C\" and c ~= \"c\" and c ~= \"D\" and c ~= \"d\" and c ~= \"E\" and c ~= \"e\" and c ~= \"F\" and c ~= \"f\" and c ~= \"G\" and c ~= \"g\" and c ~= \"H\" and c ~= \"h\" and c ~= \"I\" and c ~= \"i\" and c ~= \"J\" and c ~= \"j\" and c ~= \"K\" and c ~= \"k\" and c ~= \"L\" and c ~= \"l\" and c ~= \"M\" and c ~= \"m\" and c ~= \"N\" and c ~= \"n\" and c ~= \"O\" and c ~= \"o\" and c ~= \"P\" and c ~= \"p\" and c ~= \"Q\" and c ~= \"q\" and c ~= \"R\" and c ~= \"r\" and c ~= \"S\" and c ~= \"s\" and c ~= \"T\" and c ~= \"t\" and c ~= \"U\" and c ~= \"u\" and c ~= \"V\" and c ~= \"v\" and c ~= \"W\" and c ~= \"w\" and c ~= \"X\" and c ~= \"x\" and c ~= \"Y\" and c ~= \"y\" and c ~= \"Z\" and c ~= \"z\" then\n                k = i\n                for j = i + 1, r do\n                    if s[j] ~= nil and s[j] ~= c then\n                        k = j\n                        break\n                if k ~= i then\n                    s[k] = c\n                    s[i] = c\n                    s[k + 1] = c\n                    s[i + 1] = c\n                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzaea43pd.lua:46: 'end' expected (to close 'if' at line 26) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= \"\" then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4z50d33.lua:20: attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpm4z50d33.lua:20: in local 'candidate'\n\t/tmp/tmpm4z50d33.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.char(toupper(s[i])) .. \" \"\n            else\n                res = res .. \" \" .. string.char(toupper(s[i]))\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhp80k4r.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpwhp80k4r.lua:25: in local 'candidate'\n\t/tmp/tmpwhp80k4r.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nf4u60o.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp9nf4u60o.lua:25: in local 'candidate'\n\t/tmp/tmp9nf4u60o.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= \" \" then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\nprint(solve(\"#\"))\nprint(solve(\"#a\"))\nprint(solve(\"#a#\"))\nprint(solve(\"#a#b\"))\nprint(solve(\"#a#b#\"))\nprint(solve(\"#a#b#c\"))\nprint(solve(\"#a#b#c#\"))\nprint(solve(\"#a#b#c#d\"))\nprint(solve(\"#a#b#c#d#\"))\nprint(solve(\"#a#b#c#d#e\"))\nprint(solve(\"#a#b#c#d#e#\"))\nprint(solve(\"#a#b#c#d#e#f\"))\nprint(solve(\"#a#b#c#d#e#f#\"))\nprint(solve(\"#a#b#c#d#e#f#g\"))\nprint(solve(\"#a#b#c#d#e#f#g#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#\"))\nprint(solve(\"#a#b#c#d#e#f#g#h#i#j\"))\nprint(solve(\"#a#b#c#d\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkbr9n1_e.lua:50: unfinished string near '\"#a#b#c#d'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j, c\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            c = s[i]\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n            s = string.gsub(s, s[i], c)\n        end\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqy61znx.lua:31: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpxqy61znx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = t[s[i]] or \"\"\n            t[s[i]] = t[s[i]] .. s[i]\n        else\n            t[s[i]] = s[i]\n        end\n    end\n    return t[1] .. \" \" .. t[2] .. \" \" .. t[3] .. \" \" .. t[4] .. \" \" .. t[5] .. \" \" .. t[6] .. \" \" .. t[7] .. \" \" .. t[8] .. \" \" .. t[9] .. \" \" .. t[10] .. \" \" .. t[11] .. \" \" .. t[12] .. \" \" .. t[13] .. \" \" .. t[14] .. \" \" .. t[15] .. \" \" .. t[16] .. \" \" .. t[17] .. \" \" .. t[18] .. \" \" .. t[19] .. \" \" .. t[20] .. \" \" .. t[21] .. \" \" .. t[22] .. \" \" .. t[23] .. \" \" .. t[24] .. \" \" .. t[25] .. \" \" .. t[26] .. \" \" .. t[27] .. \" \" .. t[28] .. \" \" .. t[29] .. \" \" .. t[30] .. \" \" .. t[31] .. \" \" .. t[32] .. \" \" .. t[33] .. \" \" .. t[34] .. \" \" .. t[35] .. \" \" .. t[36] .. \" \" .. t[37] .. \" \" .. t[38] .. \" \" .. t[39] .. \" \" .. t[40] .. \" \" .. t[41] .. \" \" .. t[42] .. \" \" .. t[43] .. \" \" .. t[44] .. \" \" .. t[45] .. \" \" .. t[46] .. \" \" .. t[47] .. \" \" .. t[48] .. \" \" .. t[49] .. \" \" .. t[50] .. \" \" .. t[51] .. \" \" .. t[52] .. \" \" .. t[53] .. \" \" ..\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmprknx5rsb.lua:24: 'end' expected (to close 'function' at line 13) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s = string.gsub(s, s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s, s[i], string.lower(s[i]))\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh5v7hqm.lua:34: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpjh5v7hqm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8pvk3y6.lua:32: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpb8pvk3y6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s[i+1] = string.upper(s[i+1])\n            else\n                s[i+1] = string.lower(s[i+1])\n            end\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a5mcgqz.lua:34: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp8a5mcgqz.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            k = s[i+1]\n            s = s[1..i-1]..k..s[i+2..#s]\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpits7g9s1.lua:18: malformed number near '1..i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                res = res .. string.upper(s[i])\n            elseif s[i] >= \"A\" and s[i] <= \"Z\" then\n                res = res .. string.lower(s[i])\n            else\n                res = res .. s[i]\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2w976yze.lua:27: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2w976yze.lua:27: in local 'candidate'\n\t/tmp/tmp2w976yze.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = s[i]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k,v in pairs(t) do\n        s = string.gsub(s,k,v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeb2krp0.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpkeb2krp0.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpejfdulyh.lua:15: 'end' expected (to close 'if' at line 14) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72x8c3r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp72x8c3r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    return t.values()\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmps0df93m3.lua:25: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnxe81j0.lua:24: expected: \"aSdF\"\nactual: \"A$2$1f\"\nstack traceback:\n\t/tmp/tmpmnxe81j0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sw1g2x6.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2sw1g2x6.lua:26: in local 'candidate'\n\t/tmp/tmp2sw1g2x6.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8i82zc60.lua:32: unexpected symbol near '\"\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match('[a-zA-Z]') then\n        return string.gsub(s, '[a-z]', function(c) return string.upper(c) end)\n    else\n        return string.gsub(s, '[A-Z]', function(c) return string.lower(c) end)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu9qmubz.lua:24: expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpbu9qmubz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyd20x5y.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpzyd20x5y.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                result = result .. string.upper(s[i])\n            elseif s[i] >= 'A' and s[i] <= 'Z' then\n                result = result .. string.lower(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnj0x8use.lua:27: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpnj0x8use.lua:27: in local 'candidate'\n\t/tmp/tmpnj0x8use.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, c, r = 1, \"\", \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            c = s[i]\n            if c ~= \"A\" and c ~= \"a\" and c ~= \"B\" and c ~= \"b\" and c ~= \"C\" and c ~= \"c\" and c ~= \"D\" and c ~= \"d\" and c ~= \"E\" and c ~= \"e\" and c ~= \"F\" and c ~= \"f\" and c ~= \"G\" and c ~= \"g\" and c ~= \"H\" and c ~= \"h\" and c ~= \"I\" and c ~= \"i\" and c ~= \"J\" and c ~= \"j\" and c ~= \"K\" and c ~= \"k\" and c ~= \"L\" and c ~= \"l\" and c ~= \"M\" and c ~= \"m\" and c ~= \"N\" and c ~= \"n\" and c ~= \"O\" and c ~= \"o\" and c ~= \"P\" and c ~= \"p\" and c ~= \"Q\" and c ~= \"q\" and c ~= \"R\" and c ~= \"r\" and c ~= \"S\" and c ~= \"s\" and c ~= \"T\" and c ~= \"t\" and c ~= \"U\" and c ~= \"u\" and c ~= \"V\" and c ~= \"v\" and c ~= \"W\" and c ~= \"w\" and c ~= \"X\" and c ~= \"x\" and c ~= \"Y\" and c ~= \"y\" and c ~= \"Z\" and c ~= \"z\" then\n                r = string.gsub(r, c, string.upper(c))\n            else\n                r = string.gsub(r, c, string.lower(c))\n            end\n        else\n            r = string.gsub(r, c, c)\n        end\n        i = i + 1\n    end\n    return r\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxoqy477d.lua:36: expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxoqy477d.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5v07igf1.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5v07igf1.lua:26: in local 'candidate'\n\t/tmp/tmp5v07igf1.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s\n    local i = 1\n    local j = 1\n    local c = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            c = c .. string.upper(s[i])\n        else\n            c = c .. string.lower(s[i])\n        end\n        i = i + 1\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6xtzti49.lua:15: 'end' expected (to close 'if' at line 14) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            t[s[i]] = s[i]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k,v in pairs(t) do\n        s = string.gsub(s,k,v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeb2krp0.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpkeb2krp0.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i,j,k\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            if s[i] ~= '#' then\n                s[i+1] = string.upper(s[i+1])\n            else\n                s[i+1] = string.lower(s[i+1])\n            end\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkjlnvw4f.lua:26: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cwpn8um.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0cwpn8um.lua:25: in local 'candidate'\n\t/tmp/tmp0cwpn8um.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr0v2224.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphr0v2224.lua:25: in local 'candidate'\n\t/tmp/tmphr0v2224.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = s:gsub(k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz67hutwc.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpz67hutwc.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. string.lower(s[i])\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2mnvqojb.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2mnvqojb.lua:26: in local 'candidate'\n\t/tmp/tmp2mnvqojb.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s\n    local i = 1\n    local j = 1\n    local c = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                c = c .. string.upper(s[i])\n            else\n                c = c .. s[i]\n            end\n        else\n            c = c .. s[i]\n        end\n        i = i + 1\n    end\n    return c\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd866dhwi.lua:15: 'end' expected (to close 'if' at line 14) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrblqvib.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpnrblqvib.lua:26: in local 'candidate'\n\t/tmp/tmpnrblqvib.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            j = i\n            break\n        end\n    end\n    if j == #s then\n        return s\n    else\n        return string.gsub(s, \"%..\", \"%\" .. string.upper(s[j]))\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpks_vog3x.lua:27: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l\n    i = 1\n    j = 1\n    k = 1\n    l = 1\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                if s[i] ~= \"a\" then\n                    s[j] = string.upper(s[i])\n                else\n                    s[j] = string.lower(s[i])\n                end\n                j = j + 1\n            else\n                s[j] = s[i]\n                j = j + 1\n            end\n        else\n            s[j] = s[i]\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return s[1] .. \" \" .. s[j] .. \" \" .. s[k] .. \" \" .. s[l]\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuyundx24.lua:33: attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmpuyundx24.lua:33: in local 'candidate'\n\t/tmp/tmpuyundx24.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s, k, v)\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72x8c3r7.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp72x8c3r7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = s[i+1] .. s[i] .. s[i+1] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2] .. s[i+2]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmptp5ctfav.lua:32: 'end' expected (to close 'if' at line 16) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result = string.gsub(result, s[i], string.upper(s[i]))\n            else\n                result = string.gsub(result, s[i], string.lower(s[i]))\n            end\n        else\n            result = string.gsub(result, s[i], s[i])\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9512mcvy.lua:25: bad argument #2 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp9512mcvy.lua:25: in local 'candidate'\n\t/tmp/tmp9512mcvy.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\", \"$1$2\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjc0d9kp4.lua:20: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local res = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] >= 'a' and s[i] <= 'z' then\n                res = res .. string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n            end\n        else\n            res = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmgu14hm.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbmgu14hm.lua:25: in local 'candidate'\n\t/tmp/tmpbmgu14hm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            result = result .. string.upper(s[i])\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglj3yhab.lua:22: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpglj3yhab.lua:22: in local 'candidate'\n\t/tmp/tmpglj3yhab.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwqd3ft8f.lua:28: unexpected symbol near '*'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyd20x5y.lua:33: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpzyd20x5y.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3g8fp2d.lua:28: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpb3g8fp2d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i=1,#s,2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i=1,#t,2 do\n        s[i] = t[i]\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyyw1mht.lua:32: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpxyyw1mht.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"[a-zA-Z]\", function(c) return string.upper(c) end)\n    else\n        return string.gsub(s, \"[a-zA-Z]\", function(c) return string.lower(c) end)\n    end\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmplu2s_yti.lua:20: unexpected symbol near '\"\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cwpn8um.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0cwpn8um.lua:25: in local 'candidate'\n\t/tmp/tmp0cwpn8um.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local i, j, k, l\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n            s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return s\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "1234\nab\n#a@C\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput1d9ssx.lua:31: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmput1d9ssx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1] then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near '*'\n",
      "stdout": "",
      "timestamp": 1661907503
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cwpn8um.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0cwpn8um.lua:25: in local 'candidate'\n\t/tmp/tmp0cwpn8um.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n            else\n                result = result .. s[i]\n            end\n        else\n            result = result .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdg55jwh.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcdg55jwh.lua:26: in local 'candidate'\n\t/tmp/tmpcdg55jwh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string contains no letters, reverse the string.\n-- The function should return the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n-- >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function solve(s)\n    if s == \"\" then return s\n    local i = 1\n    local j = 1\n    local c = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n            c = string.char(toupper(s[i])) .. c\n        else\n            c = string.char(tolower(s[i])) .. c\n        i = i + 1\n    end\n    return c\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_hfg4kiz.lua:15: 'end' expected (to close 'if' at line 14) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}