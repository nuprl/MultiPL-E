{
  "language": "lua",
  "name": "HumanEval_114_minSubArraySum",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o_xt8he.lua:21: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2o_xt8he.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 2 do\n        local sum = 0\n        for j = i, #nums, 2 do\n            sum = nums[j] + sum\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7t54015l.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7t54015l.lua:17: in local 'candidate'\n\t/tmp/tmp7t54015l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[i] = nums[i]\n    end\n    return minSubArraySumHelper(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmo1crrwi.lua:13: attempt to call a nil value (global 'minSubArraySumHelper')\nstack traceback:\n\t/tmp/tmpmo1crrwi.lua:13: in local 'candidate'\n\t/tmp/tmpmo1crrwi.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                t[i] = math.min(t[i], t[j] + nums[i])\n            end\n        end\n    end\n    return math.min(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2q2lhnc.lua:26: expected: 1, actual: {2, 3, 4, 1, 2, 4}\nstack traceback:\n\t/tmp/tmpg2q2lhnc.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        result = math.min(result, nums[i] + minSubArraySum(nums[i+1:]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbisp51b7.lua:11: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local i = 1\n    while i <= #nums do\n        local sum = 0\n        local j = i\n        while j <= #nums do\n            sum = sum + nums[j]\n            j = j + 1\n        if sum < min then min = sum\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqkxrwzo6.lua:40: 'end' expected (to close 'while' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo0zh5193.lua:11: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo3jng7o.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpeo3jng7o.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        for j = i + 1, #nums do\n            if nums[i] < nums[j] then\n                result = math.min(result, nums[i] + nums[j] - nums[i] * nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            min = math.min(min, sum)\n        else\n            min = math.min(min, sum + minSubArraySum(nums[i+1:]))\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqcky3a9l.lua:15: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    local i = 1\n    while i <= #nums do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpade54wv3.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo0zh5193.lua:11: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo0zh5193.lua:11: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < min then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2se1_fd8.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2se1_fd8.lua:17: in local 'candidate'\n\t/tmp/tmp2se1_fd8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[i] = table[j]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwmircrl6.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    local result = 0\n    for i = 1, #table, 1 do\n        result = math.min(result, table[i] + minSubArraySum(table[1:i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa93gdp6q.lua:15: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    local sum = 0\n    for i = 1, #nums do\n        sum = nums[i]\n        table[i] = sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    for i = 2, #nums do\n        sum = nums[i]\n        table[i] = sum\n        if sum < 0 then\n            sum = 0\n        end\n        for j = 1, i - 1 do\n            sum = table[j] + table[i]\n            if sum < table[i] then\n                table[i] = sum\n            end\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyn62n58.lua:37: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppyn62n58.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                result = math.min(result, nums[i] + nums[j] - nums[i] * nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[j] = table[i]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp84l5ezsg.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmuhhfkav.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o_xt8he.lua:21: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2o_xt8he.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        table[i] = table[i-1] + nums[i]\n    end\n    for i = 3, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + nums[i]\n    end\n    for i = 4, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + nums[i]\n    end\n    for i = 5, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + table[i-4] + nums[i]\n    end\n    for i = 6, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + table[i-4] + table[i-5] + nums[i]\n    end\n    for i = 7, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + table[i-4] + table[i-5] + table[i-6] + nums[i]\n    end\n    for i = 8, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + table[i-4] + table[i-5] + table[i-6] + table[i-7] + nums[i]\n    end\n    for i = 9, #nums, 1 do\n        table[i] = table[i-1] + table[i-2] + table[i-3] + table[i-4] + table[i-5] + table[i-6] + table[i-7] + table[i-8] + nums[i]\n    end\n    for\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdop5uqgh.lua:40: ',' expected near 'function'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            return -sum\n        end\n        min = math.min(min, sum)\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n                if sum < min then\n                    min = sum\n                end\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwvbbc3oo.lua:15: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwvbbc3oo.lua:15: in local 'candidate'\n\t/tmp/tmpwvbbc3oo.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums do\n        table[i] = nums[i]\n    end\n    for i=1,#nums do\n        for j=i+1,#nums do\n            table[i] = table[i] + table[j]\n            if table[i] > 0 then\n                table[i] = table[i] - table[j]\n            end\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8cjrnkn.lua:27: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpu8cjrnkn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                result = math.min(result, nums[i] + nums[j] - nums[i] * nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                result = math.min(result, nums[i] + nums[j] - nums[i] * nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    local result = 0\n    for i = 1, #nums, 1 do\n        result = math.min(result, table[i])\n        for j = i + 1, #nums, 1 do\n            result = math.min(result, table[i] + table[j])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zdqxvdm.lua:26: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3zdqxvdm.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > 0 then\n            min = math.min(min, sum)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvl78ojt.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnvl78ojt.lua:16: in local 'candidate'\n\t/tmp/tmpnvl78ojt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp566sk__6.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp566sk__6.lua:16: in local 'candidate'\n\t/tmp/tmp566sk__6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum = math.inf, 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw6yqcbow.lua:34: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        local sum = 0\n        for j = i, #nums, 2 do\n            sum = nums[j] + sum\n            if sum < nums[i] then\n                sum = nums[i]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpah_0iv97.lua:18: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpah_0iv97.lua:18: in local 'candidate'\n\t/tmp/tmpah_0iv97.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztqtcij3.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpztqtcij3.lua:17: in local 'candidate'\n\t/tmp/tmpztqtcij3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        for j = i + 1, #nums do\n            if nums[i] < nums[j] then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums do\n        for j = 1, i-1 do\n            table[i] = table[i] + table[j]\n        end\n    end\n    return table[#table]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06u4u6ou.lua:24: expected: 1, actual: 80\nstack traceback:\n\t/tmp/tmp06u4u6ou.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    local i = 1\n    while i <= #nums do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpade54wv3.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4xxvsgkd.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztqtcij3.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpztqtcij3.lua:17: in local 'candidate'\n\t/tmp/tmpztqtcij3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmuhhfkav.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    local result = 0\n    for i = 1, #table, 1 do\n        result = math.min(result, table[i] + minSubArraySum(table[1:i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa93gdp6q.lua:15: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        local sum = 0\n        for j = 1, #nums[i] do\n            sum = sum + nums[i][j]\n        end\n        if sum < result then result = sum end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmuhhfkav.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > 0 then\n            min = math.min(min, sum)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    local sum = 0\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n        sum = sum + nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                table[i] = nums[i]\n                sum = sum + nums[i]\n                break\n            end\n        end\n    end\n    for i = 1, #nums, 1 do\n        if table[i] == 0 then\n            table[i] = nums[i]\n            sum = sum + nums[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20xryqlz.lua:36: expected: 1, actual: 29\nstack traceback:\n\t/tmp/tmp20xryqlz.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztqtcij3.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpztqtcij3.lua:17: in local 'candidate'\n\t/tmp/tmpztqtcij3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[j] = table[i]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp84l5ezsg.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum = math.inf, 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw6yqcbow.lua:34: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            min = math.min(min, sum)\n        else\n            min = math.min(min, sum + minSubArraySum(nums[i+1:]))\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqcky3a9l.lua:15: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local i = 1\n    while i <= #nums do\n        local sum = 0\n        local j = i\n        while j <= #nums do\n            sum = sum + nums[j]\n            j = j + 1\n        min = math.min(min, sum)\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmptrt4hk51.lua:40: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if i > j then break\n            sum = sum + nums[j]\n        end\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk6lwtca3.lua:38: 'end' expected (to close 'for' at line 10) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums,1 do\n        table[i] = nums[i]\n    end\n    for i=1,#nums,1 do\n        for j=i+1,#nums,1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[i-1] then table[i] = table[i-1]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvg5libq2.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4xxvsgkd.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local max = 0\n    for i = 1, #nums, 1 do\n        max = max + nums[i]\n        if max < min then min = max\n    end\n    for i = 1, #nums, 1 do\n        max = max - nums[i]\n        if max < min then min = max\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1x_ptvfi.lua:39: 'end' expected (to close 'for' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswe56kp6.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpswe56kp6.lua:13: in local 'candidate'\n\t/tmp/tmpswe56kp6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n        if table[i] > 0 then\n            min = math.min(min, table[i])\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums do\n        table[i] = nums[i]\n    end\n    local min = math.inf\n    for i=1,#table do\n        min = math.min(min, table[i])\n        for j=i+1,#table do\n            min = math.min(min, table[i]+table[j])\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvl78ojt.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnvl78ojt.lua:16: in local 'candidate'\n\t/tmp/tmpnvl78ojt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums do\n        for j = 1, #nums do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[i] = table[j]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpauk28ke8.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    local i = 1\n    while i <= #nums do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpade54wv3.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 2 do\n        for j = i + 1, #nums, 2 do\n            local sum = nums[i] + nums[j]\n            if sum < result then result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqenk900f.lua:36: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < min then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2se1_fd8.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2se1_fd8.lua:17: in local 'candidate'\n\t/tmp/tmp2se1_fd8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        for j = i + 1, #nums, 1 do\n            sum = nums[i] + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9v4gqdwv.lua:38: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        result = math.min(result, nums[i] + minSubArraySum(nums[i+1:]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbisp51b7.lua:11: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    local result = 0\n    for i = 1, #table, 1 do\n        result = math.min(result, table[i] + minSubArraySum(table[1:i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa93gdp6q.lua:15: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                min = math.min(min, nums[i] + nums[j])\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8spk2tki.lua:23: expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp8spk2tki.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        for j = i + 1, #nums, 1 do\n            sum = math.min(sum, nums[j])\n        end\n        min = math.min(min, sum)\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[i] = table[j]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwmircrl6.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums do\n        for j = 1, #nums do\n            if nums[j] < nums[i] then\n                table[i] = math.min(table[i], table[j] + nums[i])\n            end\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64f1l0e3.lua:26: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp64f1l0e3.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztqtcij3.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpztqtcij3.lua:17: in local 'candidate'\n\t/tmp/tmpztqtcij3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmppvxu94yw.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local i = 1\n    while i <= #nums do\n        local sum = 0\n        local j = 1\n        while j <= i do\n            sum = sum + nums[j]\n            j = j + 1\n        min = math.min(min, sum)\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzom25jwp.lua:40: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum = math.inf, 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        for j = i + 1, #nums, 1 do\n            sum = math.min(sum, nums[j] + sum)\n        end\n        min = math.min(min, sum)\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        local sum = 0\n        for j = 1, #nums[i] do\n            sum = sum + nums[i][j]\n        end\n        if sum < result then result = sum end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                result = math.min(result, nums[i] + nums[j] - nums[i] * nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                min = math.min(min, nums[i] + nums[j])\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8spk2tki.lua:23: expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp8spk2tki.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums do\n        local sum = 0\n        for j = i, #nums do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn04vt15m.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpn04vt15m.lua:17: in local 'candidate'\n\t/tmp/tmpn04vt15m.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrhqmujb.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        min = math.min(min, nums[i])\n        for j = i + 1, #nums, 1 do\n            min = math.min(min, nums[i] + nums[j])\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphzsni51o.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvl78ojt.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnvl78ojt.lua:16: in local 'candidate'\n\t/tmp/tmpnvl78ojt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm23drryd.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpm23drryd.lua:16: in local 'candidate'\n\t/tmp/tmpm23drryd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local max = math.inf\n    for i = 1, #nums, 1 do\n        max = max + nums[i]\n        min = min < max and min or max\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpix2b61t1.lua:12: attempt to perform arithmetic on a nil value (local 'max')\nstack traceback:\n\t/tmp/tmpix2b61t1.lua:12: in local 'candidate'\n\t/tmp/tmpix2b61t1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp793oxhu6.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp793oxhu6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums,1 do\n        table[i] = nums[i]\n    end\n    for i=1,#nums,1 do\n        for j=i+1,#nums,1 do\n            table[i] = table[i] + table[j]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7uwsyxb.lua:24: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpg7uwsyxb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums,1 do\n        table[i] = nums[i]\n    end\n    for i=1,#nums,1 do\n        for j=i+1,#nums,1 do\n            table[i] = table[i] + table[j]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7uwsyxb.lua:24: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpg7uwsyxb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum = math.inf, 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        for j = i + 1, #nums, 1 do\n            sum = math.min(sum, nums[j] + sum)\n        end\n        min = math.min(min, sum)\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                min = math.min(min, nums[i] + nums[j])\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8spk2tki.lua:23: expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp8spk2tki.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < min then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2se1_fd8.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2se1_fd8.lua:17: in local 'candidate'\n\t/tmp/tmp2se1_fd8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            elseif nums[i] < nums[j] then\n                sum = sum + nums[i]\n            else\n                sum = sum + nums[i]\n            end\n        end\n        if sum < min then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzc_pdz71.lua:21: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzc_pdz71.lua:21: in local 'candidate'\n\t/tmp/tmpzc_pdz71.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o_xt8he.lua:21: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2o_xt8he.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmuhhfkav.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > 0 then\n            min = math.min(min, sum)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            elseif nums[i] < nums[j] then\n                sum = sum + nums[i]\n            else\n                sum = sum + nums[j]\n            end\n        end\n        if min > sum then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy0jr459.lua:21: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuy0jr459.lua:21: in local 'candidate'\n\t/tmp/tmpuy0jr459.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    local result = 0\n    for i = 1, #table, 1 do\n        result = math.min(result, table[i] + minSubArraySum(table[i+1:]))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpapkzsise.lua:15: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvl78ojt.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnvl78ojt.lua:16: in local 'candidate'\n\t/tmp/tmpnvl78ojt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm23drryd.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpm23drryd.lua:16: in local 'candidate'\n\t/tmp/tmpm23drryd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] > nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztqtcij3.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpztqtcij3.lua:17: in local 'candidate'\n\t/tmp/tmpztqtcij3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        for j = i + 1, #nums, 1 do\n            sum = math.min(sum, nums[j])\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmptosavbgo.lua:38: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            min = math.min(min, sum)\n        else\n            min = math.min(min, sum + nums[i+1] + nums[i+2])\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        min = math.min(min, sum)\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp793oxhu6.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp793oxhu6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i=1,#nums do\n        table[i] = nums[i]\n    end\n    for i=1,#nums do\n        for j=i+1,#nums do\n            table[i] = table[i] + table[j]\n            if table[i] < table[i-1] then\n                table[i] = table[i-1]\n            end\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptut5xcp4.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptut5xcp4.lua:16: in local 'candidate'\n\t/tmp/tmptut5xcp4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[j] = table[i]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp84l5ezsg.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local min_index = 1\n    local i = 1\n    while i <= #nums do\n        local sum = 0\n        local j = 1\n        while j <= i do\n            sum = sum + nums[j]\n            j = j + 1\n        if sum < min then\n            min = sum\n            min_index = i\n        i = i + 1\n    end\n    return min_index, min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4bjyngeh.lua:43: 'end' expected (to close 'while' at line 12) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                sum = sum + nums[j]\n            end\n        end\n        if sum < min then\n            min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2se1_fd8.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2se1_fd8.lua:17: in local 'candidate'\n\t/tmp/tmp2se1_fd8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = nums[j] + sum\n            if sum < 0 then\n                sum = 0\n            end\n        end\n        if sum < result then\n            result = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpze73o9s5.lua:18: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpze73o9s5.lua:18: in local 'candidate'\n\t/tmp/tmpze73o9s5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4xxvsgkd.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmuhhfkav.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < min then min = sum\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6yed4l1f.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] < result then\n                result = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7dig536.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf7dig536.lua:12: in local 'candidate'\n\t/tmp/tmpf7dig536.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n            end\n            if sum < min then\n                min = sum\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm23drryd.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpm23drryd.lua:16: in local 'candidate'\n\t/tmp/tmpm23drryd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    local min = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < min then min = sum\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvve_jdzr.lua:35: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > 0 then\n            min = math.min(min, sum)\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = sum + nums[i]\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp793oxhu6.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmp793oxhu6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    local result = 0\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n        if table[i] > 0 then\n            table[i] = table[i]\n            result = result + table[i]\n        end\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, i - 1, 1 do\n            if nums[j] > 0 then\n                table[i] = table[i] + table[j]\n                result = result + table[i]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbr9iswg.lua:32: expected: 1, actual: 300\nstack traceback:\n\t/tmp/tmpqbr9iswg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    for i = 2, #nums, 1 do\n        for j = 1, #nums, 1 do\n            table[i] = table[i] + table[j]\n            if table[i] < table[j] then table[j] = table[i]\n        end\n    end\n    return table[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp84l5ezsg.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < 0 then\n                result = math.min(result, nums[i] + nums[j])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    local i = 1\n    while i <= #nums do\n        local sum = 0\n        while i <= #nums do\n            sum = sum + nums[i]\n            i = i + 1\n        min = math.min(min, sum)\n        i = i + 1\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf735oimk.lua:39: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local result = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            sum = sum + nums[j]\n            if sum < 0 then\n                sum = 0\n            end\n            if sum > result then\n                result = sum\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t0al8gl.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4t0al8gl.lua:17: in local 'candidate'\n\t/tmp/tmp4t0al8gl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min = math.inf\n    for i = 1, #nums, 1 do\n        local sum = 0\n        for j = 1, #nums, 1 do\n            if nums[j] > 0 then\n                sum = sum + nums[j]\n                if sum < min then\n                    min = sum\n                end\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwvbbc3oo.lua:15: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwvbbc3oo.lua:15: in local 'candidate'\n\t/tmp/tmpwvbbc3oo.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local sum = 0\n    for i = 1, #nums, 1 do\n        sum = nums[i] + sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4d2i11w.lua:22: expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmpj4d2i11w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907442
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of integers nums, find the minimum sum of any non-empty sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n-- 1\n-- >>> minSubArraySum([-1, -2, -3])\n-- -6\nlocal function minSubArraySum(nums)\n    local min, sum\n    for i = 1, #nums, 1 do\n        sum = nums[i]\n        if sum < 0 then\n            min = math.min(min, sum)\n        else\n            min = math.min(min, sum + minSubArraySum(nums[i+1:]))\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}), 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqcky3a9l.lua:15: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907442
    }
  ]
}