{
  "language": "lua",
  "name": "HumanEval_85_add",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2 == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j < #lst then\n            sum = sum + lst[j]\n            j = j + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp51hujqsc.lua:30: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2 == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j < #lst then\n            sum = sum + lst[j]\n            j = j + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp51hujqsc.lua:30: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 0 then\n            lst[i+1] = lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u0m1urs.lua:18: expected: 88, actual: {4, 4}\nstack traceback:\n\t/tmp/tmp8u0m1urs.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        j = i + 1\n        k = j + 1\n        if lst[j] % 2 == 0 then\n            lst[k] = lst[j] + lst[k]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9ve7s0g.lua:11: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpg9ve7s0g.lua:11: in local 'candidate'\n\t/tmp/tmpg9ve7s0g.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f7s19wv.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1f7s19wv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            sum = lst[i] + lst[j]\n            if sum % 2 == 0 then\n                lst[k] = sum\n                k = k + 1\n            end\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yb330y_.lua:11: table index is nil\nstack traceback:\n\t/tmp/tmp8yb330y_.lua:11: in local 'candidate'\n\t/tmp/tmp8yb330y_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f7s19wv.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1f7s19wv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[i] = lst[i] + lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a2f1isq.lua:18: expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp6a2f1isq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[i] = lst[i] + lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a2f1isq.lua:18: expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp6a2f1isq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 1 then\n            lst[i + 1] = lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_f7f4p0.lua:18: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp4_f7f4p0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[i] = lst[i] + lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a2f1isq.lua:18: expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp6a2f1isq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[j] = lst[j] + lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yfe7lc5.lua:18: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmp0yfe7lc5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbe44vp5.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpsbe44vp5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 1 then\n            lst[i+1] = lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa4am5q3.lua:18: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwa4am5q3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[i] = lst[i] + lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a2f1isq.lua:18: expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp6a2f1isq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvofbdhh.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpkvofbdhh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f7s19wv.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1f7s19wv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f7s19wv.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1f7s19wv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        j = i + 1\n        k = j + 1\n        if lst[j] % 2 == 1 then\n            lst[k] = lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_71lwtwu.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_71lwtwu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i + 1, #lst, 2 do\n            sum = sum + lst[j]\n        if sum % 2 == 0 then\n            lst[i] = lst[i] + 2\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu8rkxoox.lua:27: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f7s19wv.lua:20: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1f7s19wv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvr808n2.lua:20: expected: 88, actual: {88, 88}\nstack traceback:\n\t/tmp/tmpxvr808n2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if sum % 2 == 0 then\n            j = i\n            break\n        end\n    end\n    if j == #lst then\n        return lst\n    else\n        return lst[j]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkcve3fi.lua:24: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwkcve3fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n            j = j + 1\n            sum = 0\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 0 then\n            lst[i+1] = lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u0m1urs.lua:18: expected: 88, actual: {4, 4}\nstack traceback:\n\t/tmp/tmp8u0m1urs.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 1 then\n            lst[i + 1] = lst[i]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_f7f4p0.lua:18: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp4_f7f4p0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbe44vp5.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpsbe44vp5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 == 0 then\n            for j = i + 1, #lst, 2 do\n                if lst[j] % 2 == 1 then\n                    lst[i + j] = lst[i] + lst[j]\n                    break\n                end\n            end\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x7y7moa.lua:23: expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp1x7y7moa.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2 == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j < #lst then\n            sum = sum + lst[j]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzpy7fiha.lua:29: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            lst[i] = lst[i] + lst[j]\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a2f1isq.lua:18: expected: 88, actual: {92, 88}\nstack traceback:\n\t/tmp/tmp6a2f1isq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i] + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19: expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        for j = i + 1, #lst, 2 do\n            sum = lst[i] + lst[j]\n            if sum % 2 == 0 then\n                lst[k] = sum\n                k = k + 1\n            end\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yb330y_.lua:11: table index is nil\nstack traceback:\n\t/tmp/tmp8yb330y_.lua:11: in local 'candidate'\n\t/tmp/tmp8yb330y_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2 == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j < #lst then\n            sum = sum + lst[j]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzpy7fiha.lua:29: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17: expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    },
    {
      "exit_code": 1,
      "program": "-- Given a non-empty table of integers lst. add the even elements that are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938073
    }
  ]
}