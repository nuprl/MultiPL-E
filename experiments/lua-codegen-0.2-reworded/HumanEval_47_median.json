{
  "name": "HumanEval_47_median",
  "language": "lua",
  "prompt": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i
    "    local t = {}\n    for i
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then return nil\n    elseif n == 1 then return t[1]\n    else\n        local m = math.floor(n / 2)\n        local a = t[m + 1]\n        local b = t[m]\n        if a < b then return a\n        else return b\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend",
    "    local t = {}\n    for i
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    else\n        local m = math.floor(n/2)\n        return (l[m] + l[n]) / 2.0\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n/2)\n        if n%2 == 0 then\n            return (t[m] + t[m+1])/2\n        else\n            return t[m+1]\n    end\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n / 2)\n        if n % 2 == 0 then\n            return (t[m] + t[m + 1]) / 2\n        else\n            return t[m + 1]\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    elseif l[n] > l[n-1] then return l[n]\n    else return l[n-1]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if #t % 2 == 0 then\n            return t[i]\n        else\n            return t[i]\n        end\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if #t % 2 == 0 then\n            return t[i]\n        else\n            return t[i]\n        end\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / (n / 2)\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = i\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (t[l[m]] + t[l[m + 1]]) / 2\n    else\n        return t[l[m + 1]]\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = table.count(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    else return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local t = {}\n    for i = 1, #l, 2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    for i = 1, #t, 1 do\n        if #t > 1 then\n            t[#t] = t[i]\n            t[#t] = math.floor(t[#t] / 2)\n            t[#t] = math.floor(t[#t] + t[i] / 2)\n        end\n    end\n    return t[#t]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            t[#t] = t[#t] + t[#t+1]\n        end\n    end\n    return t[#t] / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n == 1 then return l[1] end\n    if n == 2 then return (l[1] + l[2]) / 2.0 end\n    return (l[m] + l[m+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n == 1 then return l[1] else\n    if n == 2 then return (l[1] + l[2]) / 2\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = table.getn(l)\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            if t[#t] > t[#t+1] then\n                t[#t] = t[#t+1]\n            end\n        end\n    end\n    return t[#t]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend",
    "    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            if t[#t] > t[#t+1] then\n                t[#t] = t[#t+1]\n            end\n        end\n    end\n    return t[#t]\nend",
    "    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n / 2)\n        if n % 2 == 0 then\n            return (t[m] + t[m + 1]) / 2\n        else\n            return t[m + 1]\n        end\n    end\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}